
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b14  08000278  08000278  00001278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c4  08017d90  08017d90  00018d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e54  08018e54  0001a374  2**0
                  CONTENTS
  4 .ARM          00000008  08018e54  08018e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e5c  08018e5c  0001a374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e5c  08018e5c  00019e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018e60  08018e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000374  20000000  08018e64  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004238  20000378  080191d8  0001a378  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200045b0  080191d8  0001a5b0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001a374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034639  00000000  00000000  0001a3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bb2  00000000  00000000  0004e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bb0  00000000  00000000  00054598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000220c  00000000  00000000  00057148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000499df  00000000  00000000  00059354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038850  00000000  00000000  000a2d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001beec5  00000000  00000000  000db583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0029a448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d1c4  00000000  00000000  0029a48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  002a7650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000278 <__do_global_dtors_aux>:
 8000278:	b510      	push	{r4, lr}
 800027a:	4c05      	ldr	r4, [pc, #20]	@ (8000290 <__do_global_dtors_aux+0x18>)
 800027c:	7823      	ldrb	r3, [r4, #0]
 800027e:	b933      	cbnz	r3, 800028e <__do_global_dtors_aux+0x16>
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x1c>)
 8000282:	b113      	cbz	r3, 800028a <__do_global_dtors_aux+0x12>
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <__do_global_dtors_aux+0x20>)
 8000286:	f3af 8000 	nop.w
 800028a:	2301      	movs	r3, #1
 800028c:	7023      	strb	r3, [r4, #0]
 800028e:	bd10      	pop	{r4, pc}
 8000290:	20000378 	.word	0x20000378
 8000294:	00000000 	.word	0x00000000
 8000298:	08017d74 	.word	0x08017d74

0800029c <frame_dummy>:
 800029c:	b508      	push	{r3, lr}
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <frame_dummy+0x10>)
 80002a0:	b11b      	cbz	r3, 80002aa <frame_dummy+0xe>
 80002a2:	4903      	ldr	r1, [pc, #12]	@ (80002b0 <frame_dummy+0x14>)
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <frame_dummy+0x18>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	00000000 	.word	0x00000000
 80002b0:	2000037c 	.word	0x2000037c
 80002b4:	08017d74 	.word	0x08017d74

080002b8 <strcmp>:
 80002b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c0:	2a01      	cmp	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	429a      	cmpcs	r2, r3
 80002c6:	d0f7      	beq.n	80002b8 <strcmp>
 80002c8:	1ad0      	subs	r0, r2, r3
 80002ca:	4770      	bx	lr

080002cc <strlen>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1fb      	bne.n	80002ce <strlen+0x2>
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	3801      	subs	r0, #1
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	@ 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_uldivmod>:
 8000c04:	b953      	cbnz	r3, 8000c1c <__aeabi_uldivmod+0x18>
 8000c06:	b94a      	cbnz	r2, 8000c1c <__aeabi_uldivmod+0x18>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	2800      	cmpeq	r0, #0
 8000c0e:	bf1c      	itt	ne
 8000c10:	f04f 31ff 	movne.w	r1, #4294967295
 8000c14:	f04f 30ff 	movne.w	r0, #4294967295
 8000c18:	f000 b97e 	b.w	8000f18 <__aeabi_idiv0>
 8000c1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c24:	f000 f806 	bl	8000c34 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr

08000c34 <__udivmoddi4>:
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c38:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d14d      	bne.n	8000cdc <__udivmoddi4+0xa8>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	460f      	mov	r7, r1
 8000c44:	4684      	mov	ip, r0
 8000c46:	4696      	mov	lr, r2
 8000c48:	fab2 f382 	clz	r3, r2
 8000c4c:	d960      	bls.n	8000d10 <__udivmoddi4+0xdc>
 8000c4e:	b14b      	cbz	r3, 8000c64 <__udivmoddi4+0x30>
 8000c50:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c68:	fa1f f48e 	uxth.w	r4, lr
 8000c6c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c70:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c74:	fb06 7711 	mls	r7, r6, r1, r7
 8000c78:	fb01 f004 	mul.w	r0, r1, r4
 8000c7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c84:	eb1e 0202 	adds.w	r2, lr, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x60>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 812d 	bhi.w	8000eee <__udivmoddi4+0x2ba>
 8000c94:	4639      	mov	r1, r7
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fa1f fc8c 	uxth.w	ip, ip
 8000c9c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000ca0:	fb06 2210 	mls	r2, r6, r0, r2
 8000ca4:	fb00 f404 	mul.w	r4, r0, r4
 8000ca8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cac:	4564      	cmp	r4, ip
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x8e>
 8000cb0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x8c>
 8000cba:	4564      	cmp	r4, ip
 8000cbc:	f200 811a 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc6:	ebac 0c04 	sub.w	ip, ip, r4
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b125      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cce:	fa2c f303 	lsr.w	r3, ip, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d905      	bls.n	8000cec <__udivmoddi4+0xb8>
 8000ce0:	b10d      	cbz	r5, 8000ce6 <__udivmoddi4+0xb2>
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	e7f5      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000cec:	fab3 f183 	clz	r1, r3
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d14d      	bne.n	8000d90 <__udivmoddi4+0x15c>
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	f0c0 80f2 	bcc.w	8000ede <__udivmoddi4+0x2aa>
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f080 80ef 	bcs.w	8000ede <__udivmoddi4+0x2aa>
 8000d00:	4606      	mov	r6, r0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4608      	mov	r0, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e6      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d0a:	e9c5 6300 	strd	r6, r3, [r5]
 8000d0e:	e7e3      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 80a2 	bne.w	8000e5a <__udivmoddi4+0x226>
 8000d16:	1a8a      	subs	r2, r1, r2
 8000d18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d1c:	fa1f f68e 	uxth.w	r6, lr
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d26:	fb07 2014 	mls	r0, r7, r4, r2
 8000d2a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb06 f004 	mul.w	r0, r6, r4
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d90f      	bls.n	8000d5a <__udivmoddi4+0x126>
 8000d3a:	eb1e 0202 	adds.w	r2, lr, r2
 8000d3e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0901 	movcs.w	r9, #1
 8000d48:	f04f 0900 	movcc.w	r9, #0
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d903      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d50:	f1b9 0f00 	cmp.w	r9, #0
 8000d54:	f000 80c8 	beq.w	8000ee8 <__udivmoddi4+0x2b4>
 8000d58:	4644      	mov	r4, r8
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	fa1f fc8c 	uxth.w	ip, ip
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	fb00 f606 	mul.w	r6, r0, r6
 8000d6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d70:	4566      	cmp	r6, ip
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x152>
 8000d74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x150>
 8000d7e:	4566      	cmp	r6, ip
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d84:	4610      	mov	r0, r2
 8000d86:	ebac 0c06 	sub.w	ip, ip, r6
 8000d8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d8e:	e79d      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da2:	40f4      	lsrs	r4, r6
 8000da4:	408a      	lsls	r2, r1
 8000da6:	431f      	orrs	r7, r3
 8000da8:	ea4e 030c 	orr.w	r3, lr, ip
 8000dac:	fa00 fe01 	lsl.w	lr, r0, r1
 8000db0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dc0:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc8:	fb00 f90c 	mul.w	r9, r0, ip
 8000dcc:	45a1      	cmp	r9, r4
 8000dce:	d90e      	bls.n	8000dee <__udivmoddi4+0x1ba>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0b01 	movcs.w	fp, #1
 8000ddc:	f04f 0b00 	movcc.w	fp, #0
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000de4:	f1bb 0f00 	cmp.w	fp, #0
 8000de8:	f000 8093 	beq.w	8000f12 <__udivmoddi4+0x2de>
 8000dec:	4650      	mov	r0, sl
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dfa:	fb08 4413 	mls	r4, r8, r3, r4
 8000dfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d906      	bls.n	8000e18 <__udivmoddi4+0x1e4>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e10:	d201      	bcs.n	8000e16 <__udivmoddi4+0x1e2>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d87a      	bhi.n	8000f0c <__udivmoddi4+0x2d8>
 8000e16:	4643      	mov	r3, r8
 8000e18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	fba0 9802 	umull	r9, r8, r0, r2
 8000e24:	4544      	cmp	r4, r8
 8000e26:	46cc      	mov	ip, r9
 8000e28:	4643      	mov	r3, r8
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0x1fe>
 8000e2c:	d106      	bne.n	8000e3c <__udivmoddi4+0x208>
 8000e2e:	45ce      	cmp	lr, r9
 8000e30:	d204      	bcs.n	8000e3c <__udivmoddi4+0x208>
 8000e32:	3801      	subs	r0, #1
 8000e34:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e38:	eb68 0307 	sbc.w	r3, r8, r7
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x222>
 8000e3e:	ebbe 020c 	subs.w	r2, lr, ip
 8000e42:	eb64 0403 	sbc.w	r4, r4, r3
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	40cc      	lsrs	r4, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e73e      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000e5a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e5e:	f1c3 0120 	rsb	r1, r3, #32
 8000e62:	fa04 f203 	lsl.w	r2, r4, r3
 8000e66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e6a:	40cc      	lsrs	r4, r1
 8000e6c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e70:	fa20 f101 	lsr.w	r1, r0, r1
 8000e74:	fa1f f68e 	uxth.w	r6, lr
 8000e78:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	fb07 4410 	mls	r4, r7, r0, r4
 8000e82:	0c11      	lsrs	r1, r2, #16
 8000e84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e88:	fb00 f406 	mul.w	r4, r0, r6
 8000e8c:	428c      	cmp	r4, r1
 8000e8e:	d90e      	bls.n	8000eae <__udivmoddi4+0x27a>
 8000e90:	eb1e 0101 	adds.w	r1, lr, r1
 8000e94:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e98:	bf2c      	ite	cs
 8000e9a:	f04f 0901 	movcs.w	r9, #1
 8000e9e:	f04f 0900 	movcc.w	r9, #0
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	d902      	bls.n	8000eac <__udivmoddi4+0x278>
 8000ea6:	f1b9 0f00 	cmp.w	r9, #0
 8000eaa:	d02c      	beq.n	8000f06 <__udivmoddi4+0x2d2>
 8000eac:	4640      	mov	r0, r8
 8000eae:	1b09      	subs	r1, r1, r4
 8000eb0:	b292      	uxth	r2, r2
 8000eb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000eb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ebe:	fb04 f106 	mul.w	r1, r4, r6
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x2a2>
 8000ec6:	eb1e 0202 	adds.w	r2, lr, r2
 8000eca:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ece:	d201      	bcs.n	8000ed4 <__udivmoddi4+0x2a0>
 8000ed0:	4291      	cmp	r1, r2
 8000ed2:	d815      	bhi.n	8000f00 <__udivmoddi4+0x2cc>
 8000ed4:	4644      	mov	r4, r8
 8000ed6:	1a52      	subs	r2, r2, r1
 8000ed8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000edc:	e721      	b.n	8000d22 <__udivmoddi4+0xee>
 8000ede:	1a86      	subs	r6, r0, r2
 8000ee0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	e70e      	b.n	8000d06 <__udivmoddi4+0xd2>
 8000ee8:	3c02      	subs	r4, #2
 8000eea:	4472      	add	r2, lr
 8000eec:	e735      	b.n	8000d5a <__udivmoddi4+0x126>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4472      	add	r2, lr
 8000ef2:	e6d0      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ef4:	44f4      	add	ip, lr
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	e6e3      	b.n	8000cc2 <__udivmoddi4+0x8e>
 8000efa:	44f4      	add	ip, lr
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x152>
 8000f00:	3c02      	subs	r4, #2
 8000f02:	4472      	add	r2, lr
 8000f04:	e7e7      	b.n	8000ed6 <__udivmoddi4+0x2a2>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4471      	add	r1, lr
 8000f0a:	e7d0      	b.n	8000eae <__udivmoddi4+0x27a>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e782      	b.n	8000e18 <__udivmoddi4+0x1e4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	e76a      	b.n	8000dee <__udivmoddi4+0x1ba>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__io_putchar>:
//
// @param ch character to write to stdout
// @return character
//
int __io_putchar(int ch)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    char data = (char)ch;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]

    // Critical section begin.
    bspInterruptEnable(false);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f9d0 	bl	80012d0 <bspInterruptEnable>

    // Write to ring buffer.
    ringWrite(bsp()->hStdout, &data, sizeof(data));
 8000f30:	f000 f842 	bl	8000fb8 <bsp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	f107 010f 	add.w	r1, r7, #15
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 ff8e 	bl	8002e60 <ringWrite>

    // Critical section end.
    bspInterruptEnable(true);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f9c3 	bl	80012d0 <bspInterruptEnable>

    return ch;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_UART_RxCpltCallback>:
//
// @param pUart pointer to UART instance
// @return none
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pUart)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pUart);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2d8      	uxtb	r0, r3
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_UART_RxCpltCallback+0x58>)
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f6e:	223b      	movs	r2, #59	@ 0x3b
 8000f70:	4910      	ldr	r1, [pc, #64]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x60>)
 8000f72:	f000 fb61 	bl	8001638 <logAssert>

    // Write character to ring.
    ringWrite(bsp()->hStdin, &bsp()->stdRx, sizeof(bsp()->stdRx));
 8000f76:	f000 f81f 	bl	8000fb8 <bsp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6a1c      	ldr	r4, [r3, #32]
 8000f7e:	f000 f81b 	bl	8000fb8 <bsp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	331c      	adds	r3, #28
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f001 ff68 	bl	8002e60 <ringWrite>

    // Receive character in interrupt mode.
    HAL_UART_Receive_IT(pUart, (uint8_t*)&bsp()->stdRx, sizeof(bsp()->stdRx));
 8000f90:	f000 f812 	bl	8000fb8 <bsp>
 8000f94:	4603      	mov	r3, r0
 8000f96:	331c      	adds	r3, #28
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f011 fd57 	bl	8012a50 <HAL_UART_Receive_IT>
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08017da4 	.word	0x08017da4
 8000fb0:	08018820 	.word	0x08018820
 8000fb4:	08017d90 	.word	0x08017d90

08000fb8 <bsp>:
// @brief Get the BSP.
//
// @return pointer to BSP structure
//
inline trBsp* bsp(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
    // Validate BSP pointer.
    //ASSERT(NULL != gprBsp);

    return gprBsp;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <bsp+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000394 	.word	0x20000394

08000fd0 <bspConsoleDrain>:
// @brief Drain console stdout buffer.
//
// @return void
//
void bspConsoleDrain(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
    char ch;

    // Try to drain a character from the log.
    if (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8000fd6:	f7ff ffef 	bl	8000fb8 <bsp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	1df9      	adds	r1, r7, #7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 ff8c 	bl	8002f00 <ringRead>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <bspConsoleDrain+0x26>
    {
        bspConsoleWrite(ch);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f853 	bl	800109c <bspConsoleWrite>
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <bspConsoleEmpty>:
// @brief Determine if console stdin is empty.
//
// @return true = empty, false = not empty
//
bool bspConsoleEmpty(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
    return ringEmpty(bsp()->hStdin);
 8001002:	f7ff ffd9 	bl	8000fb8 <bsp>
 8001006:	4603      	mov	r3, r0
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4618      	mov	r0, r3
 800100c:	f001 ff06 	bl	8002e1c <ringEmpty>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}

08001016 <bspConsoleFlush>:
// @brief Flush console stdout buffer.
//
// @return void
//
void bspConsoleFlush(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
    char ch;

    // Drain character to stdout.
    while (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 800101c:	e003      	b.n	8001026 <bspConsoleFlush+0x10>
    {
        bspConsoleWrite(ch);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f83b 	bl	800109c <bspConsoleWrite>
    while (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8001026:	f7ff ffc7 	bl	8000fb8 <bsp>
 800102a:	4603      	mov	r3, r0
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	1df9      	adds	r1, r7, #7
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 ff64 	bl	8002f00 <ringRead>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1ef      	bne.n	800101e <bspConsoleFlush+0x8>
    }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <bspConsoleRead>:
//
// @param pCh pointer to character
// @return true = read, false = not read
//
bool bspConsoleRead(char *pCh)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pCh);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2d8      	uxtb	r0, r3
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <bspConsoleRead+0x48>)
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <bspConsoleRead+0x4c>)
 8001062:	2285      	movs	r2, #133	@ 0x85
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <bspConsoleRead+0x50>)
 8001066:	f000 fae7 	bl	8001638 <logAssert>

    return (ringRead(bsp()->hStdin, pCh, sizeof(*pCh)) > 0) ? true : false;
 800106a:	f7ff ffa5 	bl	8000fb8 <bsp>
 800106e:	4603      	mov	r3, r0
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	2201      	movs	r2, #1
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f001 ff42 	bl	8002f00 <ringRead>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08017db4 	.word	0x08017db4
 8001094:	08018838 	.word	0x08018838
 8001098:	08017d90 	.word	0x08017d90

0800109c <bspConsoleWrite>:
//
// @param ch character to write to UART
// @return character
//
void bspConsoleWrite(char ch)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(bsp()->pUart1, (const uint8_t*)&ch, sizeof(ch),
 80010a6:	f7ff ff87 	bl	8000fb8 <bsp>
 80010aa:	4603      	mov	r3, r0
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	1df9      	adds	r1, r7, #7
 80010b0:	230a      	movs	r3, #10
 80010b2:	2201      	movs	r2, #1
 80010b4:	f011 fc3e 	bl	8012934 <HAL_UART_Transmit>
        BSP_UART_TIMEOUT);
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <bspCycleCounter>:
// @brief Read cycle counter value.
//
// @return counter value
//
inline uint32_t bspCycleCounter(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <bspCycleCounter+0x14>)
 80010c6:	685b      	ldr	r3, [r3, #4]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e0001000 	.word	0xe0001000

080010d8 <bspCycleCounterFrequency>:
// @brief Retrieve cycle counter frequency.
//
// @return frequency
//
inline uint32_t bspCycleCounterFrequency(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    return BSP_CPU_CLOCK_FREQUENCY;
 80010dc:	4b02      	ldr	r3, [pc, #8]	@ (80010e8 <bspCycleCounterFrequency+0x10>)
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	07a12000 	.word	0x07a12000

080010ec <bspMillisecondDelay>:
//
// @param milliseconds number of milliseconds to delay execution
// @return none
//
inline void bspMillisecondDelay(uint32_t milliseconds)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    HAL_Delay(milliseconds);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f004 fd3f 	bl	8005b78 <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <bspI2cRead>:
// @param pBuffer pointer to data buffer
// @param length size of data buffer in bytes
// @return true = success, false = timeout
//
bool bspI2cRead(uint8_t address, uint8_t *pBuffer, uint16_t length)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pBuffer);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf14      	ite	ne
 800111a:	2301      	movne	r3, #1
 800111c:	2300      	moveq	r3, #0
 800111e:	b2d8      	uxtb	r0, r3
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <bspI2cRead+0x70>)
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <bspI2cRead+0x74>)
 8001126:	22e0      	movs	r2, #224	@ 0xe0
 8001128:	4914      	ldr	r1, [pc, #80]	@ (800117c <bspI2cRead+0x78>)
 800112a:	f000 fa85 	bl	8001638 <logAssert>
    ASSERT(length > 0);
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2d8      	uxtb	r0, r3
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <bspI2cRead+0x7c>)
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <bspI2cRead+0x74>)
 8001140:	22e1      	movs	r2, #225	@ 0xe1
 8001142:	490e      	ldr	r1, [pc, #56]	@ (800117c <bspI2cRead+0x78>)
 8001144:	f000 fa78 	bl	8001638 <logAssert>

    // Send data.
    if (HAL_OK != HAL_I2C_Master_Receive(bsp()->pI2c1, address,
 8001148:	f7ff ff36 	bl	8000fb8 <bsp>
 800114c:	4603      	mov	r3, r0
 800114e:	6858      	ldr	r0, [r3, #4]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b299      	uxth	r1, r3
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	2264      	movs	r2, #100	@ 0x64
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	f009 fcce 	bl	800aafc <HAL_I2C_Master_Receive>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <bspI2cRead+0x66>
        pBuffer, length, BSP_I2C_TIMEOUT))
    {
        return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <bspI2cRead+0x68>
    }

    return true;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08017dc0 	.word	0x08017dc0
 8001178:	08018848 	.word	0x08018848
 800117c:	08017d90 	.word	0x08017d90
 8001180:	08017dd0 	.word	0x08017dd0

08001184 <bspI2cWrite>:
// @param pBuffer pointer to data buffer
// @param length size of data buffer in bytes
// @return true = success, false = timeout
//
bool bspI2cWrite(uint8_t address, uint8_t *pBuffer, uint16_t length)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pBuffer);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <bspI2cWrite+0x74>)
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <bspI2cWrite+0x78>)
 80011a6:	f240 122f 	movw	r2, #303	@ 0x12f
 80011aa:	4915      	ldr	r1, [pc, #84]	@ (8001200 <bspI2cWrite+0x7c>)
 80011ac:	f000 fa44 	bl	8001638 <logAssert>
    ASSERT(length > 0);
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <bspI2cWrite+0x80>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <bspI2cWrite+0x78>)
 80011c2:	f44f 7298 	mov.w	r2, #304	@ 0x130
 80011c6:	490e      	ldr	r1, [pc, #56]	@ (8001200 <bspI2cWrite+0x7c>)
 80011c8:	f000 fa36 	bl	8001638 <logAssert>

    // Send data.
    if (HAL_OK != HAL_I2C_Master_Transmit(bsp()->pI2c1, address,
 80011cc:	f7ff fef4 	bl	8000fb8 <bsp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	6858      	ldr	r0, [r3, #4]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	b299      	uxth	r1, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	2264      	movs	r2, #100	@ 0x64
 80011dc:	9200      	str	r2, [sp, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	f009 fb98 	bl	800a914 <HAL_I2C_Master_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <bspI2cWrite+0x6a>
        pBuffer, length, BSP_I2C_TIMEOUT))
    {
        return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <bspI2cWrite+0x6c>
    }

    return true;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08017dc0 	.word	0x08017dc0
 80011fc:	08018854 	.word	0x08018854
 8001200:	08017d90 	.word	0x08017d90
 8001204:	08017dd0 	.word	0x08017dd0

08001208 <bspInit>:
//
// @param prBsp pointer to BSP structure
// @return true = success, false = failure
//
bool bspInit(trBsp *prBsp)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
	// Validate argument[s].
	ASSERT(NULL != prBsp);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf14      	ite	ne
 8001216:	2301      	movne	r3, #1
 8001218:	2300      	moveq	r3, #0
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <bspInit+0xa4>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <bspInit+0xa8>)
 8001222:	f240 1245 	movw	r2, #325	@ 0x145
 8001226:	4923      	ldr	r1, [pc, #140]	@ (80012b4 <bspInit+0xac>)
 8001228:	f000 fa06 	bl	8001638 <logAssert>

	// Set local BSP structure pointer.
	gprBsp = prBsp;
 800122c:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <bspInit+0xb0>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]

	// Disable I/O buffering.
	setvbuf(stdout, NULL, _IONBF, 0);
 8001232:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <bspInit+0xb4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	2300      	movs	r3, #0
 800123a:	2202      	movs	r2, #2
 800123c:	2100      	movs	r1, #0
 800123e:	f014 fa9f 	bl	8015780 <setvbuf>

	// Enable trace and cycle counter.
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <bspInit+0xb8>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <bspInit+0xb8>)
 8001248:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800124c:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT       = 0;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <bspInit+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
	DWT->CTRL        |= DWT_CTRL_CYCCNTENA_Msk;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <bspInit+0xbc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <bspInit+0xbc>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

    // Create ring buffers.
    bsp()->hStdin   = ringInit(gStdinBuffer, sizeof(gStdinBuffer));
 8001260:	f7ff feaa 	bl	8000fb8 <bsp>
 8001264:	4604      	mov	r4, r0
 8001266:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126a:	4817      	ldr	r0, [pc, #92]	@ (80012c8 <bspInit+0xc0>)
 800126c:	f001 fd98 	bl	8002da0 <ringInit>
 8001270:	4603      	mov	r3, r0
 8001272:	6223      	str	r3, [r4, #32]
    bsp()->hStdout  = ringInit(gStdoutBuffer, sizeof(gStdoutBuffer));
 8001274:	f7ff fea0 	bl	8000fb8 <bsp>
 8001278:	4604      	mov	r4, r0
 800127a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800127e:	4813      	ldr	r0, [pc, #76]	@ (80012cc <bspInit+0xc4>)
 8001280:	f001 fd8e 	bl	8002da0 <ringInit>
 8001284:	4603      	mov	r3, r0
 8001286:	6263      	str	r3, [r4, #36]	@ 0x24

	// Receive character in interrupt mode.
	HAL_UART_Receive_IT(bsp()->pUart1, (uint8_t*)&bsp()->stdRx,
 8001288:	f7ff fe96 	bl	8000fb8 <bsp>
 800128c:	4603      	mov	r3, r0
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	f7ff fe92 	bl	8000fb8 <bsp>
 8001294:	4603      	mov	r3, r0
 8001296:	331c      	adds	r3, #28
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f011 fbd7 	bl	8012a50 <HAL_UART_Receive_IT>
        sizeof(bsp()->stdRx));

	return true;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	08017ddc 	.word	0x08017ddc
 80012b0:	08018860 	.word	0x08018860
 80012b4:	08017d90 	.word	0x08017d90
 80012b8:	20000394 	.word	0x20000394
 80012bc:	200001b8 	.word	0x200001b8
 80012c0:	e000edf0 	.word	0xe000edf0
 80012c4:	e0001000 	.word	0xe0001000
 80012c8:	20000398 	.word	0x20000398
 80012cc:	20000798 	.word	0x20000798

080012d0 <bspInterruptEnable>:
//
// @param state true = enable, false = disable
// @return none
//
void bspInterruptEnable(bool state)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	// Evaluate state.
	if (state)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <bspInterruptEnable+0x14>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80012e0:	b662      	cpsie	i
}
 80012e2:	e001      	b.n	80012e8 <bspInterruptEnable+0x18>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
	}
	else
	{
		__disable_irq();
	}
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <bspPrintf>:
// @param pFormat pointer to null terminated format string
// @param ... variable arguments
// @return number of characters printed
//
int bspPrintf(const char *pFormat, ...)
{
 80012f4:	b40f      	push	{r0, r1, r2, r3}
 80012f6:	b590      	push	{r4, r7, lr}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
    va_list     args;
    static char buffer[BSP_PRINTF_BUFFER_SIZE];

    // Print formatted string to buffer.
    //lint -save -e530
    va_start(args, pFormat);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	603b      	str	r3, [r7, #0]
    //lint -restore
    length = vsnprintf(buffer, sizeof(buffer), pFormat, args);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	2150      	movs	r1, #80	@ 0x50
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <bspPrintf+0x54>)
 800130a:	f014 fb8f 	bl	8015a2c <vsniprintf>
 800130e:	6078      	str	r0, [r7, #4]
    va_end(args);

    // Critical section begin.
    bspInterruptEnable(false);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff ffdd 	bl	80012d0 <bspInterruptEnable>

    // Write to ring buffer.
    ringWrite(bsp()->hStdout, buffer, strlen(buffer));
 8001316:	f7ff fe4f 	bl	8000fb8 <bsp>
 800131a:	4603      	mov	r3, r0
 800131c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <bspPrintf+0x54>)
 8001320:	f7fe ffd4 	bl	80002cc <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <bspPrintf+0x54>)
 800132a:	4620      	mov	r0, r4
 800132c:	f001 fd98 	bl	8002e60 <ringWrite>

    // Critical section end.
    bspInterruptEnable(true);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff ffcd 	bl	80012d0 <bspInterruptEnable>

    return length;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001342:	b004      	add	sp, #16
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20001798 	.word	0x20001798

0800134c <bspReset>:
// @brief Reset the board.
//
// @return none
//
void bspReset(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    // Reset MCU.
    HAL_NVIC_SystemReset();
 8001350:	f006 ff21 	bl	8008196 <HAL_NVIC_SystemReset>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <bspTick>:
// @brief Handle tick.
//
// @return void
//
void bspTick(void)
{
 8001358:	b598      	push	{r3, r4, r7, lr}
 800135a:	af00      	add	r7, sp, #0
	// Validate BSP structure.
	if (NULL != bsp())
 800135c:	f7ff fe2c 	bl	8000fb8 <bsp>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00f      	beq.n	8001386 <bspTick+0x2e>
	{
		// Validate callback.
		if (NULL != bsp()->pTickHandler)
 8001366:	f7ff fe27 	bl	8000fb8 <bsp>
 800136a:	4603      	mov	r3, r0
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <bspTick+0x2e>
		{
			// Invoke callback.
		    bsp()->pTickHandler(bsp()->pTickContext);
 8001372:	f7ff fe21 	bl	8000fb8 <bsp>
 8001376:	4603      	mov	r3, r0
 8001378:	695c      	ldr	r4, [r3, #20]
 800137a:	f7ff fe1d 	bl	8000fb8 <bsp>
 800137e:	4603      	mov	r3, r0
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4618      	mov	r0, r3
 8001384:	47a0      	blx	r4
		}
	}
}
 8001386:	bf00      	nop
 8001388:	bd98      	pop	{r3, r4, r7, pc}
	...

0800138c <bspTickHandler>:
// @param pCallback pointer to callback function
// @param pContext optional pointer to callback context
// @return character
//
void bspTickHandler(tpBspTickHandler pHandler, void *pContext)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	// Validate argument[s].
	ASSERT(NULL != pHandler);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2d8      	uxtb	r0, r3
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <bspTickHandler+0x50>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <bspTickHandler+0x54>)
 80013a8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80013ac:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <bspTickHandler+0x58>)
 80013ae:	f000 f943 	bl	8001638 <logAssert>

	// Disable interrupts.
	bspInterruptEnable(false);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff8c 	bl	80012d0 <bspInterruptEnable>

	// Assign callback.
	bsp()->pTickHandler = pHandler;
 80013b8:	f7ff fdfe 	bl	8000fb8 <bsp>
 80013bc:	4602      	mov	r2, r0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6153      	str	r3, [r2, #20]
	bsp()->pTickContext = pContext;
 80013c2:	f7ff fdf9 	bl	8000fb8 <bsp>
 80013c6:	4602      	mov	r2, r0
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6193      	str	r3, [r2, #24]

	// Enable interrupts.
	bspInterruptEnable(true);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff ff7f 	bl	80012d0 <bspInterruptEnable>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08017dec 	.word	0x08017dec
 80013e0:	08018868 	.word	0x08018868
 80013e4:	08017d90 	.word	0x08017d90

080013e8 <bspHeartbeatLed>:
//
// @param state true = on, false = off
// @return character
//
void bspHeartbeatLed(bool state)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, (state) ?
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	461a      	mov	r2, r3
 80013f6:	2104      	movs	r1, #4
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <bspHeartbeatLed+0x20>)
 80013fa:	f009 f99b 	bl	800a734 <HAL_GPIO_WritePin>
        GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	42020c00 	.word	0x42020c00

0800140c <errorString>:
//
// @param eError enumerated error value
// @return enumerated error code
//
const char * errorString(teError eError)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
    // Validate argument[s].
    ASSERT(eError < DIM(grError));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b27      	cmp	r3, #39	@ 0x27
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2d8      	uxtb	r0, r3
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <errorString+0x58>)
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <errorString+0x5c>)
 8001428:	2253      	movs	r2, #83	@ 0x53
 800142a:	4910      	ldr	r1, [pc, #64]	@ (800146c <errorString+0x60>)
 800142c:	f000 f904 	bl	8001638 <logAssert>
    ASSERT(eError == grError[eError].eError);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <errorString+0x64>)
 8001434:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	429a      	cmp	r2, r3
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <errorString+0x68>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <errorString+0x5c>)
 800144a:	2254      	movs	r2, #84	@ 0x54
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <errorString+0x60>)
 800144e:	f000 f8f3 	bl	8001638 <logAssert>

    return grError[eError].pDescription;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <errorString+0x64>)
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08017f8c 	.word	0x08017f8c
 8001468:	08018878 	.word	0x08018878
 800146c:	08017f78 	.word	0x08017f78
 8001470:	20000000 	.word	0x20000000
 8001474:	08017fa4 	.word	0x08017fa4

08001478 <logFilename>:
//
// @param pFilename pointer to null terminated string
// @return pointer to null terminated string
//
static char * logFilename(const char *pFilename)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
    char *pString;

    // Validate argument[s].
    ASSERT(NULL != pFilename);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <logFilename+0x58>)
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <logFilename+0x5c>)
 8001492:	2223      	movs	r2, #35	@ 0x23
 8001494:	4910      	ldr	r1, [pc, #64]	@ (80014d8 <logFilename+0x60>)
 8001496:	f000 f8cf 	bl	8001638 <logAssert>

    // Scan for last forward slash if present.
    pString = (char*)pFilename + strlen(pFilename);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7fe ff16 	bl	80002cc <strlen>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
    while (pString != pFilename)
 80014a8:	e009      	b.n	80014be <logFilename+0x46>
    {
        // Check for forward slash.
        if ('/' == *(pString - 1))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80014b2:	d101      	bne.n	80014b8 <logFilename+0x40>
        {
            return pString;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	e007      	b.n	80014c8 <logFilename+0x50>
        }

        // Move to previous character.
        pString--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
    while (pString != pFilename)
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d1f1      	bne.n	80014aa <logFilename+0x32>
    }

    return pString;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08017fec 	.word	0x08017fec
 80014d4:	08018884 	.word	0x08018884
 80014d8:	08017fd8 	.word	0x08017fd8

080014dc <logPrefix>:
// @return none
//
static void logPrefix(teLogLevel eLogLevel, const char *pFilename,
			   	      const uint16_t line, const char *pFunction,
					  char *pBuffer, uint16_t length)
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b093      	sub	sp, #76	@ 0x4c
 80014e0:	af08      	add	r7, sp, #32
 80014e2:	61b9      	str	r1, [r7, #24]
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4603      	mov	r3, r0
 80014e8:	77fb      	strb	r3, [r7, #31]
 80014ea:	4613      	mov	r3, r2
 80014ec:	83bb      	strh	r3, [r7, #28]
	trTimerTimestamp   rTimestamp;
    static const char *pPrefix[] = { "NONE", "FATAL", "ASSERT", "ERR",
    								 "WARN", "INFO", "DBG", "MAX" };

    // Validate arguments.
    ASSERT(NULL != pFilename);
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2d8      	uxtb	r0, r3
 80014fa:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <logPrefix+0x118>)
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4b3e      	ldr	r3, [pc, #248]	@ (80015f8 <logPrefix+0x11c>)
 8001500:	2249      	movs	r2, #73	@ 0x49
 8001502:	493e      	ldr	r1, [pc, #248]	@ (80015fc <logPrefix+0x120>)
 8001504:	f000 f898 	bl	8001638 <logAssert>
    ASSERT(line > 0);
 8001508:	8bbb      	ldrh	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2d8      	uxtb	r0, r3
 8001514:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <logPrefix+0x124>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <logPrefix+0x11c>)
 800151a:	224a      	movs	r2, #74	@ 0x4a
 800151c:	4937      	ldr	r1, [pc, #220]	@ (80015fc <logPrefix+0x120>)
 800151e:	f000 f88b 	bl	8001638 <logAssert>
    ASSERT(NULL != pFunction);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf14      	ite	ne
 8001528:	2301      	movne	r3, #1
 800152a:	2300      	moveq	r3, #0
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <logPrefix+0x128>)
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <logPrefix+0x11c>)
 8001534:	224b      	movs	r2, #75	@ 0x4b
 8001536:	4931      	ldr	r1, [pc, #196]	@ (80015fc <logPrefix+0x120>)
 8001538:	f000 f87e 	bl	8001638 <logAssert>
    ASSERT(eLogLevel <= eLogLevelMax);
 800153c:	7ffb      	ldrb	r3, [r7, #31]
 800153e:	2b07      	cmp	r3, #7
 8001540:	bf94      	ite	ls
 8001542:	2301      	movls	r3, #1
 8001544:	2300      	movhi	r3, #0
 8001546:	b2d8      	uxtb	r0, r3
 8001548:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <logPrefix+0x12c>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <logPrefix+0x11c>)
 800154e:	224c      	movs	r2, #76	@ 0x4c
 8001550:	492a      	ldr	r1, [pc, #168]	@ (80015fc <logPrefix+0x120>)
 8001552:	f000 f871 	bl	8001638 <logAssert>
    ASSERT(NULL != pBuffer);
 8001556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <logPrefix+0x130>)
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <logPrefix+0x11c>)
 8001568:	224d      	movs	r2, #77	@ 0x4d
 800156a:	4924      	ldr	r1, [pc, #144]	@ (80015fc <logPrefix+0x120>)
 800156c:	f000 f864 	bl	8001638 <logAssert>
    ASSERT(length > 0);
 8001570:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <logPrefix+0x134>)
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <logPrefix+0x11c>)
 8001584:	224e      	movs	r2, #78	@ 0x4e
 8001586:	491d      	ldr	r1, [pc, #116]	@ (80015fc <logPrefix+0x120>)
 8001588:	f000 f856 	bl	8001638 <logAssert>

    // Format and log string.
    timerTimestamp(&rTimestamp);
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f004 f82d 	bl	80055f0 <timerTimestamp>
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 8001596:	f8b7 4044 	ldrh.w	r4, [r7, #68]	@ 0x44
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	4a1d      	ldr	r2, [pc, #116]	@ (8001614 <logPrefix+0x138>)
 800159e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015a2:	8c3b      	ldrh	r3, [r7, #32]
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015a4:	461e      	mov	r6, r3
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015aa:	613b      	str	r3, [r7, #16]
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015b0:	60fb      	str	r3, [r7, #12]
        rTimestamp.seconds, rTimestamp.milliseconds, logFilename(pFilename),
 80015b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015b6:	60bb      	str	r3, [r7, #8]
        rTimestamp.seconds, rTimestamp.milliseconds, logFilename(pFilename),
 80015b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	69b8      	ldr	r0, [r7, #24]
 80015be:	f7ff ff5b 	bl	8001478 <logFilename>
 80015c2:	4601      	mov	r1, r0
 80015c4:	8bbb      	ldrh	r3, [r7, #28]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	9207      	str	r2, [sp, #28]
 80015ca:	9306      	str	r3, [sp, #24]
 80015cc:	9105      	str	r1, [sp, #20]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	9204      	str	r2, [sp, #16]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	9203      	str	r2, [sp, #12]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9600      	str	r6, [sp, #0]
 80015e0:	462b      	mov	r3, r5
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <logPrefix+0x13c>)
 80015e4:	4621      	mov	r1, r4
 80015e6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80015e8:	f014 f97e 	bl	80158e8 <sniprintf>
        line, pFunction);
}
 80015ec:	bf00      	nop
 80015ee:	372c      	adds	r7, #44	@ 0x2c
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f4:	08017fec 	.word	0x08017fec
 80015f8:	08018890 	.word	0x08018890
 80015fc:	08017fd8 	.word	0x08017fd8
 8001600:	08018000 	.word	0x08018000
 8001604:	0801800c 	.word	0x0801800c
 8001608:	08018020 	.word	0x08018020
 800160c:	0801803c 	.word	0x0801803c
 8001610:	0801804c 	.word	0x0801804c
 8001614:	20000144 	.word	0x20000144
 8001618:	08018058 	.word	0x08018058

0800161c <logInit>:
// @brief Initialize log.
//
// @return enumerated error code
//
teError logInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	// Initialize history buffer.
	memset(grLogErrorHistory, 0, sizeof(grLogErrorHistory));
 8001620:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001624:	2100      	movs	r1, #0
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <logInit+0x18>)
 8001628:	f014 faa2 	bl	8015b70 <memset>

	return eErrorNone;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200017e8 	.word	0x200017e8

08001638 <logAssert>:
// @return void
//
void logAssert(bool bIgnore, const char *pFilename,
    const uint16_t line, const char *pFunction,
    const char *pDescription)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af02      	add	r7, sp, #8
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	4613      	mov	r3, r2
 8001648:	81bb      	strh	r3, [r7, #12]
    bool state = true;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]

    // Check condition.
    if (!bIgnore)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d020      	beq.n	800169c <logAssert+0x64>
    {
        // Display location information.
    	logEntry(eLogLevelAssert, pFilename, line, pFunction, pDescription);
 800165a:	89ba      	ldrh	r2, [r7, #12]
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	2002      	movs	r0, #2
 8001666:	f000 f81d 	bl	80016a4 <logEntry>

        // Flush the console.
        bspConsoleFlush();
 800166a:	f7ff fcd4 	bl	8001016 <bspConsoleFlush>

        // Spin forever!
        for (;;)
        {
            // Set heartbeat LED to indicate fault.
            bspHeartbeatLed(state = !state);
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f083 0301 	eor.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	75fb      	strb	r3, [r7, #23]
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff feab 	bl	80013e8 <bspHeartbeatLed>

            // Wait for a bit.
            bspMillisecondDelay(BSP_FAULT_LED_FLASH_PERIOD);
 8001692:	2064      	movs	r0, #100	@ 0x64
 8001694:	f7ff fd2a 	bl	80010ec <bspMillisecondDelay>
            bspHeartbeatLed(state = !state);
 8001698:	bf00      	nop
 800169a:	e7e8      	b.n	800166e <logAssert+0x36>
        }
    }
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <logEntry>:
// @return void
//
void logEntry(teLogLevel eLogLevel, const char *pFilename,
    const uint16_t line, const char *pFunction,
    const char *pFormat, ...)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09c      	sub	sp, #112	@ 0x70
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	4613      	mov	r3, r2
 80016b4:	81bb      	strh	r3, [r7, #12]
    va_list args;
    char    buffer[LOG_LINE_LENGTH_MAX];

    // Filter log level.
    if (eLogLevel > geLogLevel)
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <logEntry+0xb4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d847      	bhi.n	8001750 <logEntry+0xac>
    {
        return;
    }

    // Validate argument[s].
    ASSERT(NULL != pFilename);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2d8      	uxtb	r0, r3
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <logEntry+0xb8>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <logEntry+0xbc>)
 80016d2:	22be      	movs	r2, #190	@ 0xbe
 80016d4:	4923      	ldr	r1, [pc, #140]	@ (8001764 <logEntry+0xc0>)
 80016d6:	f7ff ffaf 	bl	8001638 <logAssert>
    ASSERT(line > 0);
 80016da:	89bb      	ldrh	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2d8      	uxtb	r0, r3
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <logEntry+0xc4>)
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <logEntry+0xbc>)
 80016ec:	22bf      	movs	r2, #191	@ 0xbf
 80016ee:	491d      	ldr	r1, [pc, #116]	@ (8001764 <logEntry+0xc0>)
 80016f0:	f7ff ffa2 	bl	8001638 <logAssert>
    ASSERT(NULL != pFunction);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2d8      	uxtb	r0, r3
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <logEntry+0xc8>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <logEntry+0xbc>)
 8001706:	22c0      	movs	r2, #192	@ 0xc0
 8001708:	4916      	ldr	r1, [pc, #88]	@ (8001764 <logEntry+0xc0>)
 800170a:	f7ff ff95 	bl	8001638 <logAssert>

    // Print prefix information.
    logPrefix(eLogLevel, pFilename, line, pFunction, buffer, sizeof(buffer));
 800170e:	89ba      	ldrh	r2, [r7, #12]
 8001710:	7bf8      	ldrb	r0, [r7, #15]
 8001712:	2350      	movs	r3, #80	@ 0x50
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	f7ff fedc 	bl	80014dc <logPrefix>
    bspPrintf("\r\n%s", buffer);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4811      	ldr	r0, [pc, #68]	@ (8001770 <logEntry+0xcc>)
 800172c:	f7ff fde2 	bl	80012f4 <bspPrintf>

    // Print formatted string.
	//lint -save -e530
	va_start(args, pFormat);
 8001730:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001734:	667b      	str	r3, [r7, #100]	@ 0x64
	//lint -restore
	vsnprintf(buffer, sizeof(buffer), pFormat, args);
 8001736:	f107 0014 	add.w	r0, r7, #20
 800173a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800173c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800173e:	2150      	movs	r1, #80	@ 0x50
 8001740:	f014 f974 	bl	8015a2c <vsniprintf>
	va_end(args);
	bspPrintf(buffer);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fdd3 	bl	80012f4 <bspPrintf>
 800174e:	e000      	b.n	8001752 <logEntry+0xae>
        return;
 8001750:	bf00      	nop
}
 8001752:	3768      	adds	r7, #104	@ 0x68
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000140 	.word	0x20000140
 800175c:	08017fec 	.word	0x08017fec
 8001760:	0801889c 	.word	0x0801889c
 8001764:	08017fd8 	.word	0x08017fd8
 8001768:	08018000 	.word	0x08018000
 800176c:	0801800c 	.word	0x0801800c
 8001770:	08018080 	.word	0x08018080

08001774 <logError>:
// @param line source code line number
// @param pFunction pointer to function name string
// @return enumerated error code
teError logError(teError eError, const char *pFilename,
    const uint16_t line, const char *pFunction)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af02      	add	r7, sp, #8
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	4613      	mov	r3, r2
 8001784:	81bb      	strh	r3, [r7, #12]
    // Validate argument[s].
    ASSERT(NULL != pFilename);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2d8      	uxtb	r0, r3
 8001792:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <logError+0xd4>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <logError+0xd8>)
 8001798:	f240 1215 	movw	r2, #277	@ 0x115
 800179c:	492c      	ldr	r1, [pc, #176]	@ (8001850 <logError+0xdc>)
 800179e:	f7ff ff4b 	bl	8001638 <logAssert>
    ASSERT(NULL != pFunction);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <logError+0xe0>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4b26      	ldr	r3, [pc, #152]	@ (800184c <logError+0xd8>)
 80017b4:	f44f 728b 	mov.w	r2, #278	@ 0x116
 80017b8:	4925      	ldr	r1, [pc, #148]	@ (8001850 <logError+0xdc>)
 80017ba:	f7ff ff3d 	bl	8001638 <logAssert>

    // Advance head.
    gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <logError+0xe4>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <logError+0xe4>)
 80017ce:	801a      	strh	r2, [r3, #0]

    // Assign error entry.
    grLogErrorHistory[gLogErrorHistoryHead].eError = eError;
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <logError+0xe4>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4a21      	ldr	r2, [pc, #132]	@ (800185c <logError+0xe8>)
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	701a      	strb	r2, [r3, #0]
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <logError+0xe4>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4a19      	ldr	r2, [pc, #100]	@ (800185c <logError+0xe8>)
 80017f6:	4413      	add	r3, r2
 80017f8:	1c5c      	adds	r4, r3, #1
        logFilename(pFilename), sizeof(grLogErrorHistory[0].file) - 1);
 80017fa:	68b8      	ldr	r0, [r7, #8]
 80017fc:	f7ff fe3c 	bl	8001478 <logFilename>
 8001800:	4603      	mov	r3, r0
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 8001802:	221f      	movs	r2, #31
 8001804:	4619      	mov	r1, r3
 8001806:	4620      	mov	r0, r4
 8001808:	f014 f9cd 	bl	8015ba6 <strncpy>
    grLogErrorHistory[gLogErrorHistoryHead].line = line;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <logError+0xe4>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	89ba      	ldrh	r2, [r7, #12]
 8001814:	4911      	ldr	r1, [pc, #68]	@ (800185c <logError+0xe8>)
 8001816:	4603      	mov	r3, r0
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4403      	add	r3, r0
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3324      	adds	r3, #36	@ 0x24
 8001822:	601a      	str	r2, [r3, #0]

    // Issue log entry.
    logEntry(eLogLevelError, pFilename, line, pFunction, errorString(eError));
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdf0 	bl	800140c <errorString>
 800182c:	4603      	mov	r3, r0
 800182e:	89ba      	ldrh	r2, [r7, #12]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	2003      	movs	r0, #3
 8001838:	f7ff ff34 	bl	80016a4 <logEntry>

    return eErrorNone;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	08017fec 	.word	0x08017fec
 800184c:	080188a8 	.word	0x080188a8
 8001850:	08017fd8 	.word	0x08017fd8
 8001854:	0801800c 	.word	0x0801800c
 8001858:	20001928 	.word	0x20001928
 800185c:	200017e8 	.word	0x200017e8

08001860 <logFatal>:
//                  name
// @return none
//
void logFatal(teError eError, const char *pFilename,
    const uint16_t line, const char *pFunction)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af02      	add	r7, sp, #8
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	4613      	mov	r3, r2
 8001870:	81bb      	strh	r3, [r7, #12]
    bool state = true;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]

    // Advance head.
    gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <logFatal+0xc8>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <logFatal+0xc8>)
 8001886:	801a      	strh	r2, [r3, #0]

    // Assign error entry.
    grLogErrorHistory[gLogErrorHistoryHead].eError = eError;
 8001888:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <logFatal+0xc8>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	4a27      	ldr	r2, [pc, #156]	@ (800192c <logFatal+0xcc>)
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	701a      	strb	r2, [r3, #0]
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <logFatal+0xc8>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4a1f      	ldr	r2, [pc, #124]	@ (800192c <logFatal+0xcc>)
 80018ae:	4413      	add	r3, r2
 80018b0:	1c5c      	adds	r4, r3, #1
        logFilename(pFilename), sizeof(grLogErrorHistory[0].file) - 1);
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	f7ff fde0 	bl	8001478 <logFilename>
 80018b8:	4603      	mov	r3, r0
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80018ba:	221f      	movs	r2, #31
 80018bc:	4619      	mov	r1, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	f014 f971 	bl	8015ba6 <strncpy>
    grLogErrorHistory[gLogErrorHistoryHead].line = line;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <logFatal+0xc8>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	89ba      	ldrh	r2, [r7, #12]
 80018cc:	4917      	ldr	r1, [pc, #92]	@ (800192c <logFatal+0xcc>)
 80018ce:	4603      	mov	r3, r0
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4403      	add	r3, r0
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3324      	adds	r3, #36	@ 0x24
 80018da:	601a      	str	r2, [r3, #0]

    // Issue log entry.
    logEntry(eLogLevelFatal, pFilename, line, pFunction, errorString(eError));
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd94 	bl	800140c <errorString>
 80018e4:	4603      	mov	r3, r0
 80018e6:	89ba      	ldrh	r2, [r7, #12]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fed8 	bl	80016a4 <logEntry>

    // Flush the console.
    bspConsoleFlush();
 80018f4:	f7ff fb8f 	bl	8001016 <bspConsoleFlush>

    // Spin forever!
    for (;;)
    {
        // Set heartbeat LED to indicate fault.
        bspHeartbeatLed(state = !state);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	75fb      	strb	r3, [r7, #23]
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fd66 	bl	80013e8 <bspHeartbeatLed>

        // Wait for a bit.
        bspMillisecondDelay(BSP_FAULT_LED_FLASH_PERIOD);
 800191c:	2064      	movs	r0, #100	@ 0x64
 800191e:	f7ff fbe5 	bl	80010ec <bspMillisecondDelay>
        bspHeartbeatLed(state = !state);
 8001922:	bf00      	nop
 8001924:	e7e8      	b.n	80018f8 <logFatal+0x98>
 8001926:	bf00      	nop
 8001928:	20001928 	.word	0x20001928
 800192c:	200017e8 	.word	0x200017e8

08001930 <logErrorHistory>:
// @param pBuffer pointer to buffer
// @param length size of buffer in bytes
// @return true = content, false = empty
//
bool logErrorHistory(trLogError *prError)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af02      	add	r7, sp, #8
 8001936:	6078      	str	r0, [r7, #4]
	// Validate argument[s].
	ASSERT(NULL != prError);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2d8      	uxtb	r0, r3
 8001944:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <logErrorHistory+0x94>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <logErrorHistory+0x98>)
 800194a:	f44f 72ad 	mov.w	r2, #346	@ 0x15a
 800194e:	491f      	ldr	r1, [pc, #124]	@ (80019cc <logErrorHistory+0x9c>)
 8001950:	f7ff fe72 	bl	8001638 <logAssert>

	// Check content.
	if (eErrorNone != grLogErrorHistory[gLogErrorHistoryHead].eError)
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <logErrorHistory+0xa0>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <logErrorHistory+0xa4>)
 800195c:	460b      	mov	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d026      	beq.n	80019ba <logErrorHistory+0x8a>
	{
		// Copy and clear entry.
	    memcpy(prError, &grLogErrorHistory[gLogErrorHistoryHead],
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <logErrorHistory+0xa0>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <logErrorHistory+0xa4>)
 800197c:	4413      	add	r3, r2
 800197e:	2228      	movs	r2, #40	@ 0x28
 8001980:	4619      	mov	r1, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f014 fa03 	bl	8015d8e <memcpy>
            sizeof(*prError));
		memset(&grLogErrorHistory[gLogErrorHistoryHead], 0,
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <logErrorHistory+0xa0>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <logErrorHistory+0xa4>)
 8001998:	4413      	add	r3, r2
 800199a:	2228      	movs	r2, #40	@ 0x28
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f014 f8e6 	bl	8015b70 <memset>
            sizeof(grLogErrorHistory[0]));
    	gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <logErrorHistory+0xa0>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <logErrorHistory+0xa0>)
 80019b4:	801a      	strh	r2, [r3, #0]

    	return true;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <logErrorHistory+0x8c>
	}

	return false;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	080180b4 	.word	0x080180b4
 80019c8:	080188b4 	.word	0x080188b4
 80019cc:	08017fd8 	.word	0x08017fd8
 80019d0:	20001928 	.word	0x20001928
 80019d4:	200017e8 	.word	0x200017e8

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019dc:	f004 f806 	bl	80059ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e0:	f000 f852 	bl	8001a88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019e4:	f000 f8bc 	bl	8001b60 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80019e8:	f000 f8f1 	bl	8001bce <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ec:	f000 fde0 	bl	80025b0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80019f0:	f000 faec 	bl	8001fcc <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80019f4:	f000 faac 	bl	8001f50 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80019f8:	f000 fb20 	bl	800203c <MX_HSPI1_Init>
  MX_I2C2_Init();
 80019fc:	f000 fb9c 	bl	8002138 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8001a00:	f000 fbda 	bl	80021b8 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8001a04:	f000 fbec 	bl	80021e0 <MX_LTDC_Init>
  MX_RTC_Init();
 8001a08:	f000 fc6a 	bl	80022e0 <MX_RTC_Init>
  MX_TIM3_Init();
 8001a0c:	f000 fd22 	bl	8002454 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001a10:	f000 f8ec 	bl	8001bec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001a14:	f000 fd80 	bl	8002518 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8001a18:	f000 fcb0 	bl	800237c <MX_SAI2_Init>
  MX_ADC4_Init();
 8001a1c:	f000 fa1e 	bl	8001e5c <MX_ADC4_Init>
  MX_I2C1_Init();
 8001a20:	f000 fb4a 	bl	80020b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize BSP structure.
  memset(&rBsp, 0, sizeof(rBsp));
 8001a24:	2228      	movs	r2, #40	@ 0x28
 8001a26:	2100      	movs	r1, #0
 8001a28:	4810      	ldr	r0, [pc, #64]	@ (8001a6c <main+0x94>)
 8001a2a:	f014 f8a1 	bl	8015b70 <memset>
  rBsp.pUart1      = &huart1;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <main+0x94>)
 8001a30:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <main+0x98>)
 8001a32:	601a      	str	r2, [r3, #0]
  rBsp.pI2c1       = &hi2c1;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <main+0x94>)
 8001a36:	4a0f      	ldr	r2, [pc, #60]	@ (8001a74 <main+0x9c>)
 8001a38:	605a      	str	r2, [r3, #4]
  rBsp.pSaiBlockB2 = &hsai_BlockB2;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <main+0x94>)
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a78 <main+0xa0>)
 8001a3e:	609a      	str	r2, [r3, #8]
  rBsp.pAdc1	   = &hadc1;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <main+0x94>)
 8001a42:	4a0e      	ldr	r2, [pc, #56]	@ (8001a7c <main+0xa4>)
 8001a44:	60da      	str	r2, [r3, #12]
  rBsp.pAdc4	   = &hadc4;
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <main+0x94>)
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <main+0xa8>)
 8001a4a:	611a      	str	r2, [r3, #16]
  platformInit(&rBsp);
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <main+0x94>)
 8001a4e:	f001 f829 	bl	8002aa4 <platformInit>
  HAL_SAI_Receive_DMA(bsp()->pSaiBlockB2,pcmDMA,DIM(pcmDMA));
 8001a52:	f7ff fab1 	bl	8000fb8 <bsp>
 8001a56:	4603      	mov	r3, r0
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	4909      	ldr	r1, [pc, #36]	@ (8001a84 <main+0xac>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00f fd04 	bl	801146c <HAL_SAI_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  platformService();
 8001a64:	f001 f8f4 	bl	8002c50 <platformService>
 8001a68:	e7fc      	b.n	8001a64 <main+0x8c>
 8001a6a:	bf00      	nop
 8001a6c:	20002174 	.word	0x20002174
 8001a70:	20002060 	.word	0x20002060
 8001a74:	20001c38 	.word	0x20001c38
 8001a78:	20001e50 	.word	0x20001e50
 8001a7c:	2000192c 	.word	0x2000192c
 8001a80:	200019b8 	.word	0x200019b8
 8001a84:	200020f4 	.word	0x200020f4

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09e      	sub	sp, #120	@ 0x78
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2260      	movs	r2, #96	@ 0x60
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f014 f86a 	bl	8015b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aac:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001ab0:	f00a fdc6 	bl	800c640 <HAL_PWREx_ControlVoltageScaling>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001aba:	f000 febd 	bl	8002838 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001abe:	f00a fdaf 	bl	800c620 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <SystemClock_Config+0xd4>)
 8001ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ac8:	4a24      	ldr	r2, [pc, #144]	@ (8001b5c <SystemClock_Config+0xd4>)
 8001aca:	f023 0318 	bic.w	r3, r3, #24
 8001ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001adc:	2381      	movs	r3, #129	@ 0x81
 8001ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae6:	2310      	movs	r3, #16
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aea:	2302      	movs	r3, #2
 8001aec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aee:	2303      	movs	r3, #3
 8001af0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001afa:	2308      	movs	r3, #8
 8001afc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001afe:	2308      	movs	r3, #8
 8001b00:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	4618      	mov	r0, r3
 8001b18:	f00a fe8e 	bl	800c838 <HAL_RCC_OscConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b22:	f000 fe89 	bl	8002838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b26:	231f      	movs	r3, #31
 8001b28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b3e:	463b      	mov	r3, r7
 8001b40:	2103      	movs	r1, #3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00b fd54 	bl	800d5f0 <HAL_RCC_ClockConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b4e:	f000 fe73 	bl	8002838 <Error_Handler>
  }
}
 8001b52:	bf00      	nop
 8001b54:	3778      	adds	r7, #120	@ 0x78
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	46020c00 	.word	0x46020c00

08001b60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b8      	sub	sp, #224	@ 0xe0
 8001b64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b66:	463b      	mov	r3, r7
 8001b68:	22e0      	movs	r2, #224	@ 0xe0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f013 ffff 	bl	8015b70 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8001b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b76:	f04f 0301 	mov.w	r3, #1
 8001b7a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8001b84:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 9;
 8001b94:	2309      	movs	r3, #9
 8001b96:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 3;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 3072;
 8001ba8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8001bae:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00c f8ea 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8001bc2:	f000 fe39 	bl	8002838 <Error_Handler>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	37e0      	adds	r7, #224	@ 0xe0
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001bd2:	f00a fe11 	bl	800c7f8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f00a fdbe 	bl	800c758 <HAL_PWREx_ConfigSupply>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001be2:	f000 fe29 	bl	8002838 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f013 ffb9 	bl	8015b70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bfe:	4b88      	ldr	r3, [pc, #544]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c00:	4a88      	ldr	r2, [pc, #544]	@ (8001e24 <MX_ADC1_Init+0x238>)
 8001c02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c04:	4b86      	ldr	r3, [pc, #536]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001c0a:	4b85      	ldr	r3, [pc, #532]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001c10:	4b83      	ldr	r3, [pc, #524]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c16:	4b82      	ldr	r3, [pc, #520]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c1c:	4b80      	ldr	r3, [pc, #512]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c22:	4b7f      	ldr	r3, [pc, #508]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8001c28:	4b7d      	ldr	r3, [pc, #500]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8001c36:	4b7a      	ldr	r3, [pc, #488]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c38:	220d      	movs	r2, #13
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c3c:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c44:	4b76      	ldr	r3, [pc, #472]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c4a:	4b75      	ldr	r3, [pc, #468]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c50:	4b73      	ldr	r3, [pc, #460]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001c58:	4b71      	ldr	r3, [pc, #452]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c5e:	4b70      	ldr	r3, [pc, #448]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c64:	4b6e      	ldr	r3, [pc, #440]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c70:	4b6b      	ldr	r3, [pc, #428]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c78:	4869      	ldr	r0, [pc, #420]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001c7a:	f004 faf3 	bl	8006264 <HAL_ADC_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001c84:	f000 fdd8 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c88:	4b67      	ldr	r3, [pc, #412]	@ (8001e28 <MX_ADC1_Init+0x23c>)
 8001c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c8c:	2306      	movs	r3, #6
 8001c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c98:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485e      	ldr	r0, [pc, #376]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001ca8:	f005 fa0a 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001cb2:	f000 fdc1 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e2c <MX_ADC1_Init+0x240>)
 8001cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4857      	ldr	r0, [pc, #348]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001cc4:	f005 f9fc 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001cce:	f000 fdb3 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cd2:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <MX_ADC1_Init+0x244>)
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cd6:	2312      	movs	r3, #18
 8001cd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cda:	463b      	mov	r3, r7
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4850      	ldr	r0, [pc, #320]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001ce0:	f005 f9ee 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001cea:	f000 fda5 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cee:	4b51      	ldr	r3, [pc, #324]	@ (8001e34 <MX_ADC1_Init+0x248>)
 8001cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cf2:	2318      	movs	r3, #24
 8001cf4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4849      	ldr	r0, [pc, #292]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001cfc:	f005 f9e0 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001d06:	f000 fd97 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <MX_ADC1_Init+0x24c>)
 8001d0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	4619      	mov	r1, r3
 8001d18:	4841      	ldr	r0, [pc, #260]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001d1a:	f005 f9d1 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001d24:	f000 fd88 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d28:	4b44      	ldr	r3, [pc, #272]	@ (8001e3c <MX_ADC1_Init+0x250>)
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d2c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001d30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	483a      	ldr	r0, [pc, #232]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001d38:	f005 f9c2 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8001d42:	f000 fd79 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d46:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <MX_ADC1_Init+0x254>)
 8001d48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d4a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	4619      	mov	r1, r3
 8001d54:	4832      	ldr	r0, [pc, #200]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001d56:	f005 f9b3 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8001d60:	f000 fd6a 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d64:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <MX_ADC1_Init+0x258>)
 8001d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d68:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001d6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	482b      	ldr	r0, [pc, #172]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001d74:	f005 f9a4 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8001d7e:	f000 fd5b 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d82:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <MX_ADC1_Init+0x25c>)
 8001d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001d86:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4823      	ldr	r0, [pc, #140]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001d92:	f005 f995 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8001d9c:	f000 fd4c 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <MX_ADC1_Init+0x260>)
 8001da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	481c      	ldr	r0, [pc, #112]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001db0:	f005 f986 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8001dba:	f000 fd3d 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <MX_ADC1_Init+0x264>)
 8001dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001dc2:	f240 2306 	movw	r3, #518	@ 0x206
 8001dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4814      	ldr	r0, [pc, #80]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001dce:	f005 f977 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8001dd8:	f000 fd2e 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <MX_ADC1_Init+0x268>)
 8001dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001de0:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001de4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001dec:	f005 f968 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8001df6:	f000 fd1f 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <MX_ADC1_Init+0x26c>)
 8001dfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001dfe:	f240 2312 	movw	r3, #530	@ 0x212
 8001e02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_ADC1_Init+0x234>)
 8001e0a:	f005 f959 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8001e14:	f000 fd10 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000192c 	.word	0x2000192c
 8001e24:	42028000 	.word	0x42028000
 8001e28:	04000002 	.word	0x04000002
 8001e2c:	08000004 	.word	0x08000004
 8001e30:	0c000008 	.word	0x0c000008
 8001e34:	10000010 	.word	0x10000010
 8001e38:	14000020 	.word	0x14000020
 8001e3c:	1c000080 	.word	0x1c000080
 8001e40:	20000100 	.word	0x20000100
 8001e44:	2a000400 	.word	0x2a000400
 8001e48:	2e000800 	.word	0x2e000800
 8001e4c:	32001000 	.word	0x32001000
 8001e50:	3e008000 	.word	0x3e008000
 8001e54:	42010000 	.word	0x42010000
 8001e58:	ce080000 	.word	0xce080000

08001e5c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2220      	movs	r2, #32
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f013 fe81 	bl	8015b70 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e70:	4a34      	ldr	r2, [pc, #208]	@ (8001f44 <MX_ADC4_Init+0xe8>)
 8001e72:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e74:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001e7a:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e80:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8001e86:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e8c:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e90:	2204      	movs	r2, #4
 8001e92:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001eaa:	2202      	movs	r2, #2
 8001eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eae:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ec4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ec8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001edc:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001ee4:	4816      	ldr	r0, [pc, #88]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001ee6:	f004 f9bd 	bl	8006264 <HAL_ADC_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001ef0:	f000 fca2 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <MX_ADC4_Init+0xec>)
 8001ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f00:	2304      	movs	r3, #4
 8001f02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001f0e:	f005 f8d7 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8001f18:	f000 fc8e 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <MX_ADC4_Init+0xf0>)
 8001f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001f20:	2304      	movs	r3, #4
 8001f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <MX_ADC4_Init+0xe4>)
 8001f2a:	f005 f8c9 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8001f34:	f000 fc80 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200019b8 	.word	0x200019b8
 8001f44:	46021000 	.word	0x46021000
 8001f48:	1c000080 	.word	0x1c000080
 8001f4c:	20000100 	.word	0x20000100

08001f50 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f56:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <MX_DMA2D_Init+0x78>)
 8001f58:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001f9c:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001f9e:	f007 f835 	bl	800900c <HAL_DMA2D_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001fa8:	f000 fc46 	bl	8002838 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001fac:	2101      	movs	r1, #1
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_DMA2D_Init+0x74>)
 8001fb0:	f007 f88e 	bl	80090d0 <HAL_DMA2D_ConfigLayer>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001fba:	f000 fc3d 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20001b70 	.word	0x20001b70
 8001fc8:	4002b000 	.word	0x4002b000

08001fcc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001fd2:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <MX_GPDMA1_Init+0x6c>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd8:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <MX_GPDMA1_Init+0x6c>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <MX_GPDMA1_Init+0x6c>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	201d      	movs	r0, #29
 8001ff6:	f006 f8a6 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001ffa:	201d      	movs	r0, #29
 8001ffc:	f006 f8bd 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	201e      	movs	r0, #30
 8002006:	f006 f89e 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800200a:	201e      	movs	r0, #30
 800200c:	f006 f8b5 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	201f      	movs	r0, #31
 8002016:	f006 f896 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800201a:	201f      	movs	r0, #31
 800201c:	f006 f8ad 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2020      	movs	r0, #32
 8002026:	f006 f88e 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800202a:	2020      	movs	r0, #32
 800202c:	f006 f8a5 	bl	800817a <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	46020c00 	.word	0x46020c00

0800203c <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002042:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <MX_HSPI1_Init+0x78>)
 8002044:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002048:	2204      	movs	r2, #4
 800204a:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 800204c:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8002052:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002054:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002058:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 800205c:	221a      	movs	r2, #26
 800205e:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002062:	2202      	movs	r2, #2
 8002064:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 800206c:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8002078:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	@ (80020b0 <MX_HSPI1_Init+0x74>)
 800209e:	f012 fbd7 	bl	8014850 <HAL_XSPI_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 80020a8:	f000 fbc6 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20001bd8 	.word	0x20001bd8
 80020b4:	420d3400 	.word	0x420d3400

080020b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <MX_I2C1_Init+0x74>)
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <MX_I2C1_Init+0x78>)
 80020c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <MX_I2C1_Init+0x74>)
 80020c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002134 <MX_I2C1_Init+0x7c>)
 80020c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020c8:	4b18      	ldr	r3, [pc, #96]	@ (800212c <MX_I2C1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <MX_I2C1_Init+0x74>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <MX_I2C1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020da:	4b14      	ldr	r3, [pc, #80]	@ (800212c <MX_I2C1_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <MX_I2C1_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <MX_I2C1_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <MX_I2C1_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f2:	480e      	ldr	r0, [pc, #56]	@ (800212c <MX_I2C1_Init+0x74>)
 80020f4:	f008 fb72 	bl	800a7dc <HAL_I2C_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020fe:	f000 fb9b 	bl	8002838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002102:	2100      	movs	r1, #0
 8002104:	4809      	ldr	r0, [pc, #36]	@ (800212c <MX_I2C1_Init+0x74>)
 8002106:	f009 fe7f 	bl	800be08 <HAL_I2CEx_ConfigAnalogFilter>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002110:	f000 fb92 	bl	8002838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002114:	2100      	movs	r1, #0
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <MX_I2C1_Init+0x74>)
 8002118:	f009 fec1 	bl	800be9e <HAL_I2CEx_ConfigDigitalFilter>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002122:	f000 fb89 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20001c38 	.word	0x20001c38
 8002130:	40005400 	.word	0x40005400
 8002134:	20a0c4df 	.word	0x20a0c4df

08002138 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <MX_I2C2_Init+0x74>)
 800213e:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <MX_I2C2_Init+0x78>)
 8002140:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002144:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <MX_I2C2_Init+0x7c>)
 8002146:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <MX_I2C2_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002150:	2201      	movs	r2, #1
 8002152:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <MX_I2C2_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <MX_I2C2_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002172:	480e      	ldr	r0, [pc, #56]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002174:	f008 fb32 	bl	800a7dc <HAL_I2C_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800217e:	f000 fb5b 	bl	8002838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002182:	2100      	movs	r1, #0
 8002184:	4809      	ldr	r0, [pc, #36]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002186:	f009 fe3f 	bl	800be08 <HAL_I2CEx_ConfigAnalogFilter>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002190:	f000 fb52 	bl	8002838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002194:	2100      	movs	r1, #0
 8002196:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_I2C2_Init+0x74>)
 8002198:	f009 fe81 	bl	800be9e <HAL_I2CEx_ConfigDigitalFilter>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80021a2:	f000 fb49 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20001c8c 	.word	0x20001c8c
 80021b0:	40005800 	.word	0x40005800
 80021b4:	20a0c4df 	.word	0x20a0c4df

080021b8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80021bc:	2000      	movs	r0, #0
 80021be:	f009 febb 	bl	800bf38 <HAL_ICACHE_ConfigAssociativityMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80021c8:	f000 fb36 	bl	8002838 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80021cc:	f009 fed4 	bl	800bf78 <HAL_ICACHE_Enable>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80021d6:	f000 fb2f 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	@ 0x38
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2234      	movs	r2, #52	@ 0x34
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f013 fcbf 	bl	8015b70 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 80021f4:	4a39      	ldr	r2, [pc, #228]	@ (80022dc <MX_LTDC_Init+0xfc>)
 80021f6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021f8:	4b37      	ldr	r3, [pc, #220]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021fe:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002204:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800220a:	4b33      	ldr	r3, [pc, #204]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8002210:	4b31      	ldr	r3, [pc, #196]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002212:	2203      	movs	r2, #3
 8002214:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002216:	4b30      	ldr	r3, [pc, #192]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002218:	2203      	movs	r2, #3
 800221a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 800221c:	4b2e      	ldr	r3, [pc, #184]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 800221e:	220b      	movs	r2, #11
 8002220:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002224:	220b      	movs	r2, #11
 8002226:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8002228:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 800222a:	f240 322b 	movw	r2, #811	@ 0x32b
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002232:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8002238:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 800223a:	f240 3233 	movw	r2, #819	@ 0x333
 800223e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002242:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002250:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002260:	481d      	ldr	r0, [pc, #116]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 8002262:	f009 fe99 	bl	800bf98 <HAL_LTDC_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800226c:	f000 fae4 	bl	8002838 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8002274:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002278:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800227e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002282:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002284:	2301      	movs	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002288:	23ff      	movs	r3, #255	@ 0xff
 800228a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002290:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002294:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002296:	2307      	movs	r3, #7
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2200      	movs	r2, #0
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <MX_LTDC_Init+0xf8>)
 80022c0:	f009 fffc 	bl	800c2bc <HAL_LTDC_ConfigLayer>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80022ca:	f000 fab5 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3738      	adds	r7, #56	@ 0x38
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20001ce0 	.word	0x20001ce0
 80022dc:	40016800 	.word	0x40016800

080022e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <MX_RTC_Init+0x94>)
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <MX_RTC_Init+0x98>)
 80022fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <MX_RTC_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <MX_RTC_Init+0x94>)
 8002306:	227f      	movs	r2, #127	@ 0x7f
 8002308:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <MX_RTC_Init+0x94>)
 800230c:	22ff      	movs	r2, #255	@ 0xff
 800230e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MX_RTC_Init+0x94>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <MX_RTC_Init+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <MX_RTC_Init+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <MX_RTC_Init+0x94>)
 8002324:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002328:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <MX_RTC_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <MX_RTC_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002336:	480f      	ldr	r0, [pc, #60]	@ (8002374 <MX_RTC_Init+0x94>)
 8002338:	f00e fd26 	bl	8010d88 <HAL_RTC_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002342:	f000 fa79 	bl	8002838 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	@ (8002374 <MX_RTC_Init+0x94>)
 800235c:	f00e fe42 	bl	8010fe4 <HAL_RTCEx_PrivilegeModeSet>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8002366:	f000 fa67 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20001d88 	.word	0x20001d88
 8002378:	46007800 	.word	0x46007800

0800237c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002380:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <MX_SAI2_Init+0xc4>)
 8002382:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <MX_SAI2_Init+0xc8>)
 8002384:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002386:	4b2e      	ldr	r3, [pc, #184]	@ (8002440 <MX_SAI2_Init+0xc4>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800238c:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <MX_SAI2_Init+0xc4>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002392:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <MX_SAI2_Init+0xc4>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002398:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <MX_SAI2_Init+0xc4>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80023a4:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023a6:	4a28      	ldr	r2, [pc, #160]	@ (8002448 <MX_SAI2_Init+0xcc>)
 80023a8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023b6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80023b8:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80023c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023c6:	2210      	movs	r2, #16
 80023c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80023ca:	2302      	movs	r3, #2
 80023cc:	2202      	movs	r2, #2
 80023ce:	2101      	movs	r1, #1
 80023d0:	481b      	ldr	r0, [pc, #108]	@ (8002440 <MX_SAI2_Init+0xc4>)
 80023d2:	f00e fe35 	bl	8011040 <HAL_SAI_InitProtocol>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 80023dc:	f000 fa2c 	bl	8002838 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <MX_SAI2_Init+0xd0>)
 80023e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <MX_SAI2_Init+0xd4>)
 80023e4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80023e6:	4b19      	ldr	r3, [pc, #100]	@ (800244c <MX_SAI2_Init+0xd0>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80023ec:	4b17      	ldr	r3, [pc, #92]	@ (800244c <MX_SAI2_Init+0xd0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <MX_SAI2_Init+0xd0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <MX_SAI2_Init+0xd0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <MX_SAI2_Init+0xd0>)
 8002400:	2202      	movs	r2, #2
 8002402:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K;
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <MX_SAI2_Init+0xd0>)
 8002406:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800240a:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800240c:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <MX_SAI2_Init+0xd0>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8002412:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <MX_SAI2_Init+0xd0>)
 8002414:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002418:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <MX_SAI2_Init+0xd0>)
 800241c:	2200      	movs	r2, #0
 800241e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <MX_SAI2_Init+0xd0>)
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8002426:	2308      	movs	r3, #8
 8002428:	2202      	movs	r2, #2
 800242a:	2100      	movs	r1, #0
 800242c:	4807      	ldr	r0, [pc, #28]	@ (800244c <MX_SAI2_Init+0xd0>)
 800242e:	f00e fe07 	bl	8011040 <HAL_SAI_InitProtocol>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8002438:	f000 f9fe 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20001db8 	.word	0x20001db8
 8002444:	40015804 	.word	0x40015804
 8002448:	00017700 	.word	0x00017700
 800244c:	20001e50 	.word	0x20001e50
 8002450:	40015824 	.word	0x40015824

08002454 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245a:	f107 031c 	add.w	r3, r7, #28
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002466:	463b      	mov	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	615a      	str	r2, [r3, #20]
 8002476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002478:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <MX_TIM3_Init+0xbc>)
 800247a:	4a26      	ldr	r2, [pc, #152]	@ (8002514 <MX_TIM3_Init+0xc0>)
 800247c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 800247e:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <MX_TIM3_Init+0xbc>)
 8002480:	22a0      	movs	r2, #160	@ 0xa0
 8002482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <MX_TIM3_Init+0xbc>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800248a:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <MX_TIM3_Init+0xbc>)
 800248c:	2264      	movs	r2, #100	@ 0x64
 800248e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <MX_TIM3_Init+0xbc>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <MX_TIM3_Init+0xbc>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800249c:	481c      	ldr	r0, [pc, #112]	@ (8002510 <MX_TIM3_Init+0xbc>)
 800249e:	f00f faef 	bl	8011a80 <HAL_TIM_PWM_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024a8:	f000 f9c6 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	4815      	ldr	r0, [pc, #84]	@ (8002510 <MX_TIM3_Init+0xbc>)
 80024bc:	f010 f928 	bl	8012710 <HAL_TIMEx_MasterConfigSynchronization>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80024c6:	f000 f9b7 	bl	8002838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ca:	2360      	movs	r3, #96	@ 0x60
 80024cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80024ce:	234b      	movs	r3, #75	@ 0x4b
 80024d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024da:	463b      	mov	r3, r7
 80024dc:	220c      	movs	r2, #12
 80024de:	4619      	mov	r1, r3
 80024e0:	480b      	ldr	r0, [pc, #44]	@ (8002510 <MX_TIM3_Init+0xbc>)
 80024e2:	f00f fb25 	bl	8011b30 <HAL_TIM_PWM_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80024ec:	f000 f9a4 	bl	8002838 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <MX_TIM3_Init+0xbc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_TIM3_Init+0xbc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002500:	4803      	ldr	r0, [pc, #12]	@ (8002510 <MX_TIM3_Init+0xbc>)
 8002502:	f002 fc31 	bl	8004d68 <HAL_TIM_MspPostInit>

}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	@ 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20002014 	.word	0x20002014
 8002514:	40000400 	.word	0x40000400

08002518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800251c:	4b22      	ldr	r3, [pc, #136]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 800251e:	4a23      	ldr	r2, [pc, #140]	@ (80025ac <MX_USART1_UART_Init+0x94>)
 8002520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002522:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252a:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002536:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002560:	4811      	ldr	r0, [pc, #68]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002562:	f010 f997 	bl	8012894 <HAL_UART_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800256c:	f000 f964 	bl	8002838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002570:	2100      	movs	r1, #0
 8002572:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002574:	f012 f8a1 	bl	80146ba <HAL_UARTEx_SetTxFifoThreshold>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800257e:	f000 f95b 	bl	8002838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002582:	2100      	movs	r1, #0
 8002584:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002586:	f012 f8d6 	bl	8014736 <HAL_UARTEx_SetRxFifoThreshold>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002590:	f000 f952 	bl	8002838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	@ (80025a8 <MX_USART1_UART_Init+0x90>)
 8002596:	f012 f857 	bl	8014648 <HAL_UARTEx_DisableFifoMode>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025a0:	f000 f94a 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20002060 	.word	0x20002060
 80025ac:	40013800 	.word	0x40013800

080025b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	@ 0x38
 80025b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c6:	4b93      	ldr	r3, [pc, #588]	@ (8002814 <MX_GPIO_Init+0x264>)
 80025c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025cc:	4a91      	ldr	r2, [pc, #580]	@ (8002814 <MX_GPIO_Init+0x264>)
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <MX_GPIO_Init+0x264>)
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002814 <MX_GPIO_Init+0x264>)
 80025e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ea:	4a8a      	ldr	r2, [pc, #552]	@ (8002814 <MX_GPIO_Init+0x264>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025f4:	4b87      	ldr	r3, [pc, #540]	@ (8002814 <MX_GPIO_Init+0x264>)
 80025f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002602:	4b84      	ldr	r3, [pc, #528]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002608:	4a82      	ldr	r2, [pc, #520]	@ (8002814 <MX_GPIO_Init+0x264>)
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002612:	4b80      	ldr	r3, [pc, #512]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002620:	4b7c      	ldr	r3, [pc, #496]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002626:	4a7b      	ldr	r2, [pc, #492]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002630:	4b78      	ldr	r3, [pc, #480]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b75      	ldr	r3, [pc, #468]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002644:	4a73      	ldr	r2, [pc, #460]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800264e:	4b71      	ldr	r3, [pc, #452]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800265c:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <MX_GPIO_Init+0x264>)
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002662:	4a6c      	ldr	r2, [pc, #432]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800266c:	4b69      	ldr	r3, [pc, #420]	@ (8002814 <MX_GPIO_Init+0x264>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800267a:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <MX_GPIO_Init+0x264>)
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002680:	4a64      	ldr	r2, [pc, #400]	@ (8002814 <MX_GPIO_Init+0x264>)
 8002682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002686:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800268a:	4b62      	ldr	r3, [pc, #392]	@ (8002814 <MX_GPIO_Init+0x264>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002698:	4b5e      	ldr	r3, [pc, #376]	@ (8002814 <MX_GPIO_Init+0x264>)
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800269e:	4a5d      	ldr	r2, [pc, #372]	@ (8002814 <MX_GPIO_Init+0x264>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002814 <MX_GPIO_Init+0x264>)
 80026aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026b6:	4b57      	ldr	r3, [pc, #348]	@ (8002814 <MX_GPIO_Init+0x264>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026bc:	4a55      	ldr	r2, [pc, #340]	@ (8002814 <MX_GPIO_Init+0x264>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <MX_GPIO_Init+0x264>)
 80026c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2104      	movs	r1, #4
 80026d8:	484f      	ldr	r0, [pc, #316]	@ (8002818 <MX_GPIO_Init+0x268>)
 80026da:	f008 f82b 	bl	800a734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 80026de:	2201      	movs	r2, #1
 80026e0:	2110      	movs	r1, #16
 80026e2:	484d      	ldr	r0, [pc, #308]	@ (8002818 <MX_GPIO_Init+0x268>)
 80026e4:	f008 f826 	bl	800a734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2114      	movs	r1, #20
 80026ec:	484b      	ldr	r0, [pc, #300]	@ (800281c <MX_GPIO_Init+0x26c>)
 80026ee:	f008 f821 	bl	800a734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 80026f2:	2314      	movs	r3, #20
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	4843      	ldr	r0, [pc, #268]	@ (8002818 <MX_GPIO_Init+0x268>)
 800270a:	f007 fe3b 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800270e:	2320      	movs	r3, #32
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002712:	4b43      	ldr	r3, [pc, #268]	@ (8002820 <MX_GPIO_Init+0x270>)
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	483d      	ldr	r0, [pc, #244]	@ (8002818 <MX_GPIO_Init+0x268>)
 8002722:	f007 fe2f 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8002726:	2302      	movs	r3, #2
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800272a:	4b3e      	ldr	r3, [pc, #248]	@ (8002824 <MX_GPIO_Init+0x274>)
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002736:	4619      	mov	r1, r3
 8002738:	483b      	ldr	r0, [pc, #236]	@ (8002828 <MX_GPIO_Init+0x278>)
 800273a:	f007 fe23 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800273e:	2310      	movs	r3, #16
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002742:	4b3a      	ldr	r3, [pc, #232]	@ (800282c <MX_GPIO_Init+0x27c>)
 8002744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002746:	2301      	movs	r3, #1
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800274a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800274e:	4619      	mov	r1, r3
 8002750:	4835      	ldr	r0, [pc, #212]	@ (8002828 <MX_GPIO_Init+0x278>)
 8002752:	f007 fe17 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002756:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276c:	4619      	mov	r1, r3
 800276e:	482e      	ldr	r0, [pc, #184]	@ (8002828 <MX_GPIO_Init+0x278>)
 8002770:	f007 fe08 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8002774:	2314      	movs	r3, #20
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4824      	ldr	r0, [pc, #144]	@ (800281c <MX_GPIO_Init+0x26c>)
 800278c:	f007 fdfa 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a0:	4619      	mov	r1, r3
 80027a2:	481e      	ldr	r0, [pc, #120]	@ (800281c <MX_GPIO_Init+0x26c>)
 80027a4:	f007 fdee 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80027a8:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ba:	4619      	mov	r1, r3
 80027bc:	481c      	ldr	r0, [pc, #112]	@ (8002830 <MX_GPIO_Init+0x280>)
 80027be:	f007 fde1 	bl	800a384 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80027c2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d4:	4619      	mov	r1, r3
 80027d6:	4817      	ldr	r0, [pc, #92]	@ (8002834 <MX_GPIO_Init+0x284>)
 80027d8:	f007 fdd4 	bl	800a384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	200c      	movs	r0, #12
 80027e2:	f005 fcb0 	bl	8008146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027e6:	200c      	movs	r0, #12
 80027e8:	f005 fcc7 	bl	800817a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	200f      	movs	r0, #15
 80027f2:	f005 fca8 	bl	8008146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80027f6:	200f      	movs	r0, #15
 80027f8:	f005 fcbf 	bl	800817a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2100      	movs	r1, #0
 8002800:	2010      	movs	r0, #16
 8002802:	f005 fca0 	bl	8008146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8002806:	2010      	movs	r0, #16
 8002808:	f005 fcb7 	bl	800817a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800280c:	bf00      	nop
 800280e:	3738      	adds	r7, #56	@ 0x38
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	46020c00 	.word	0x46020c00
 8002818:	42021000 	.word	0x42021000
 800281c:	42020c00 	.word	0x42020c00
 8002820:	10110000 	.word	0x10110000
 8002824:	10310000 	.word	0x10310000
 8002828:	42020000 	.word	0x42020000
 800282c:	10210000 	.word	0x10210000
 8002830:	42021800 	.word	0x42021800
 8002834:	42020400 	.word	0x42020400

08002838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <Error_Handler+0x8>

08002844 <mixerInit>:
// @brief Intialize the mixer.
//
// @return enumerated error code
//
teError mixerInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	//HAL_SAI_Receive_DMA(bsp()->pSaiBlockB2,pcmVals,DIM(pcmVals));
	HAL_ADC_Start_DMA(bsp()->pAdc1, (uint32_t*)adc1Vals, DIM(adc1Vals));
 8002848:	f7fe fbb6 	bl	8000fb8 <bsp>
 800284c:	4603      	mov	r3, r0
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	220d      	movs	r2, #13
 8002852:	4908      	ldr	r1, [pc, #32]	@ (8002874 <mixerInit+0x30>)
 8002854:	4618      	mov	r0, r3
 8002856:	f003 ffed 	bl	8006834 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(bsp()->pAdc4, (uint32_t*)adc4Vals, DIM(adc4Vals));
 800285a:	f7fe fbad 	bl	8000fb8 <bsp>
 800285e:	4603      	mov	r3, r0
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2202      	movs	r2, #2
 8002864:	4904      	ldr	r1, [pc, #16]	@ (8002878 <mixerInit+0x34>)
 8002866:	4618      	mov	r0, r3
 8002868:	f003 ffe4 	bl	8006834 <HAL_ADC_Start_DMA>

	return eErrorNone;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000219c 	.word	0x2000219c
 8002878:	200021b8 	.word	0x200021b8

0800287c <pcm6260Init>:
// @brief Intialize the ADC.
//
// @return enumerated error code
//
teError pcm6260Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	bspMillisecondDelay(100);
 8002882:	2064      	movs	r0, #100	@ 0x64
 8002884:	f7fe fc32 	bl	80010ec <bspMillisecondDelay>
	HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 8002888:	2201      	movs	r2, #1
 800288a:	2104      	movs	r1, #4
 800288c:	4813      	ldr	r0, [pc, #76]	@ (80028dc <pcm6260Init+0x60>)
 800288e:	f007 ff51 	bl	800a734 <HAL_GPIO_WritePin>
	bspMillisecondDelay(100);
 8002892:	2064      	movs	r0, #100	@ 0x64
 8002894:	f7fe fc2a 	bl	80010ec <bspMillisecondDelay>
	int index;

	// Wait for a bit and take the ADC out of reset.

	// Iterate over configuration.
	for (index = 0; index < DIM(grPcm6260Config); index++)
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	e016      	b.n	80028cc <pcm6260Init+0x50>
	{
		// Set register value.
		if (!bspI2cWrite(PCM6260_I2C_ADDRESS,
			(uint8_t*)&grPcm6260Config[index],
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4a0f      	ldr	r2, [pc, #60]	@ (80028e0 <pcm6260Init+0x64>)
 80028a4:	4413      	add	r3, r2
		if (!bspI2cWrite(PCM6260_I2C_ADDRESS,
 80028a6:	2202      	movs	r2, #2
 80028a8:	4619      	mov	r1, r3
 80028aa:	2090      	movs	r0, #144	@ 0x90
 80028ac:	f7fe fc6a 	bl	8001184 <bspI2cWrite>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <pcm6260Init+0x44>
			sizeof(grPcm6260Config[index])))
		{
			return eErrorInit;
 80028bc:	230d      	movs	r3, #13
 80028be:	e009      	b.n	80028d4 <pcm6260Init+0x58>
		}
		bspMillisecondDelay(100);
 80028c0:	2064      	movs	r0, #100	@ 0x64
 80028c2:	f7fe fc13 	bl	80010ec <bspMillisecondDelay>
	for (index = 0; index < DIM(grPcm6260Config); index++)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3301      	adds	r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b0d      	cmp	r3, #13
 80028d0:	d9e5      	bls.n	800289e <pcm6260Init+0x22>
	}

	return eErrorNone;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	42021000 	.word	0x42021000
 80028e0:	20000164 	.word	0x20000164

080028e4 <dump>:
// @brief Print performance stats.
//
// @return enumerated error code
//
static void dump(trPerf *prPerf)
{
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af04      	add	r7, sp, #16
 80028ec:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prPerf);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2d8      	uxtb	r0, r3
 80028fa:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <dump+0xcc>)
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <dump+0xd0>)
 8002900:	221e      	movs	r2, #30
 8002902:	492d      	ldr	r1, [pc, #180]	@ (80029b8 <dump+0xd4>)
 8002904:	f7fe fe98 	bl	8001638 <logAssert>

    // Print stats.
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1c5e      	adds	r6, r3, #1
        (double)prPerf->rMeasure.min / (double)bspCycleCounterFrequency(),
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fe25 	bl	8000560 <__aeabi_ui2d>
 8002916:	4604      	mov	r4, r0
 8002918:	460d      	mov	r5, r1
 800291a:	f7fe fbdd 	bl	80010d8 <bspCycleCounterFrequency>
 800291e:	4603      	mov	r3, r0
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe1d 	bl	8000560 <__aeabi_ui2d>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f7fd ffbb 	bl	80008a8 <__aeabi_ddiv>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4692      	mov	sl, r2
 8002938:	469b      	mov	fp, r3
        (double)prPerf->rMeasure.max / (double)bspCycleCounterFrequency(),
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fe0e 	bl	8000560 <__aeabi_ui2d>
 8002944:	4604      	mov	r4, r0
 8002946:	460d      	mov	r5, r1
 8002948:	f7fe fbc6 	bl	80010d8 <bspCycleCounterFrequency>
 800294c:	4603      	mov	r3, r0
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fe06 	bl	8000560 <__aeabi_ui2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	f7fd ffa4 	bl	80008a8 <__aeabi_ddiv>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4690      	mov	r8, r2
 8002966:	4699      	mov	r9, r3
        (double)prPerf->rMeasure.avg / (double)bspCycleCounterFrequency());
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fdf7 	bl	8000560 <__aeabi_ui2d>
 8002972:	4604      	mov	r4, r0
 8002974:	460d      	mov	r5, r1
 8002976:	f7fe fbaf 	bl	80010d8 <bspCycleCounterFrequency>
 800297a:	4603      	mov	r3, r0
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdef 	bl	8000560 <__aeabi_ui2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	f7fd ff8d 	bl	80008a8 <__aeabi_ddiv>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002996:	e9cd 8900 	strd	r8, r9, [sp]
 800299a:	4652      	mov	r2, sl
 800299c:	465b      	mov	r3, fp
 800299e:	4631      	mov	r1, r6
 80029a0:	4806      	ldr	r0, [pc, #24]	@ (80029bc <dump+0xd8>)
 80029a2:	f7fe fca7 	bl	80012f4 <bspPrintf>
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b0:	0801810c 	.word	0x0801810c
 80029b4:	080188c4 	.word	0x080188c4
 80029b8:	080180f8 	.word	0x080180f8
 80029bc:	0801811c 	.word	0x0801811c

080029c0 <perfInit>:
// @brief Initialize performance module.
//
// @return enumerated error code
//
teError perfInit(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
    // Initialize performance resources.
    memset(grPerf, 0, sizeof(grPerf));
 80029c4:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 80029c8:	2100      	movs	r1, #0
 80029ca:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <perfInit+0x18>)
 80029cc:	f013 f8d0 	bl	8015b70 <memset>

    return eErrorNone;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200021bc 	.word	0x200021bc

080029dc <perfPrint>:
//
// @param prPerf optional pointer to performance structure
// @return enumerated error code
//
void perfPrint(trPerf *prPerf)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    int index;

    // Check pointer.
    if (NULL != prPerf)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <perfPrint+0x16>
    {
        dump(prPerf);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ff7a 	bl	80028e4 <dump>

        return;
 80029f0:	e01c      	b.n	8002a2c <perfPrint+0x50>
    }

    // Iterate over resources.
    for (index = 0; index < DIM(grPerf); index++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e016      	b.n	8002a26 <perfPrint+0x4a>
    {
        // Check allocation.
        if (grPerf[index].allocated)
 80029f8:	490e      	ldr	r1, [pc, #56]	@ (8002a34 <perfPrint+0x58>)
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <perfPrint+0x44>
        {
            dump(&grPerf[index]);
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4a07      	ldr	r2, [pc, #28]	@ (8002a34 <perfPrint+0x58>)
 8002a18:	4413      	add	r3, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff62 	bl	80028e4 <dump>
    for (index = 0; index < DIM(grPerf); index++)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3301      	adds	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b07      	cmp	r3, #7
 8002a2a:	d9e5      	bls.n	80029f8 <perfPrint+0x1c>
        }
    }
}
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200021bc 	.word	0x200021bc

08002a38 <heartbeatHandler>:
//
// @param pContext pointer to callback context
// @return none
//
static void heartbeatHandler(void *pContext)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	static bool state = false;

	// Toggle LED.
	bspHeartbeatLed(state = !state);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <heartbeatHandler+0x38>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f083 0301 	eor.w	r3, r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <heartbeatHandler+0x38>)
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <heartbeatHandler+0x38>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fcc0 	bl	80013e8 <bspHeartbeatLed>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000237c 	.word	0x2000237c

08002a74 <version>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError version(int argc, char *argv[])
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
	// Print version.
    bspPrintf("\r\n%u.%u.%u %s", VERSION_MAJOR, VERSION_MINOR,
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f002 ff68 	bl	8005954 <versionConfidence>
 8002a84:	4603      	mov	r3, r0
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4804      	ldr	r0, [pc, #16]	@ (8002aa0 <version+0x2c>)
 8002a90:	f7fe fc30 	bl	80012f4 <bspPrintf>
		VERSION_BUILD, versionConfidence(VERSION_CONF));

    return eErrorNone;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08018164 	.word	0x08018164

08002aa4 <platformInit>:
//
// @param prBsp pointer to BSP data.
// @return true = success, false = failure
//
bool platformInit(trBsp *prBsp)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af04      	add	r7, sp, #16
 8002aaa:	6078      	str	r0, [r7, #4]
	teError eError;

	// Initialize BSP.
	if (!bspInit(prBsp))
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe fbab 	bl	8001208 <bspInit>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <platformInit+0x1e>
	{
		return false;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e09e      	b.n	8002c00 <platformInit+0x15c>
	}

	// Disable I/O buffering.
	setvbuf(stdout, NULL, _IONBF, 0);
 8002ac2:	4b51      	ldr	r3, [pc, #324]	@ (8002c08 <platformInit+0x164>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6898      	ldr	r0, [r3, #8]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2202      	movs	r2, #2
 8002acc:	2100      	movs	r1, #0
 8002ace:	f012 fe57 	bl	8015780 <setvbuf>

	// Initialize ADC.
	if (eErrorNone != (eError = pcm6260Init()))
 8002ad2:	f7ff fed3 	bl	800287c <pcm6260Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <platformInit+0x48>
	{
		LOGFATAL(eError);
 8002ae0:	7bf8      	ldrb	r0, [r7, #15]
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <platformInit+0x168>)
 8002ae4:	2251      	movs	r2, #81	@ 0x51
 8002ae6:	494a      	ldr	r1, [pc, #296]	@ (8002c10 <platformInit+0x16c>)
 8002ae8:	f7fe feba 	bl	8001860 <logFatal>
	}

    // Initialize performance.
    if (eErrorNone != (eError = perfInit()))
 8002aec:	f7ff ff68 	bl	80029c0 <perfInit>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <platformInit+0x62>
    {
        LOGFATAL(eError);
 8002afa:	7bf8      	ldrb	r0, [r7, #15]
 8002afc:	4b43      	ldr	r3, [pc, #268]	@ (8002c0c <platformInit+0x168>)
 8002afe:	2257      	movs	r2, #87	@ 0x57
 8002b00:	4943      	ldr	r1, [pc, #268]	@ (8002c10 <platformInit+0x16c>)
 8002b02:	f7fe fead 	bl	8001860 <logFatal>
    }

	// Initialize timer.
	if (eErrorNone != (eError = timerInit()))
 8002b06:	f002 fd53 	bl	80055b0 <timerInit>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <platformInit+0x7c>
	{
		LOGFATAL(eError);
 8002b14:	7bf8      	ldrb	r0, [r7, #15]
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <platformInit+0x168>)
 8002b18:	225d      	movs	r2, #93	@ 0x5d
 8002b1a:	493d      	ldr	r1, [pc, #244]	@ (8002c10 <platformInit+0x16c>)
 8002b1c:	f7fe fea0 	bl	8001860 <logFatal>
	}

	// Initialize log.
	if (eErrorNone != (eError = logInit()))
 8002b20:	f7fe fd7c 	bl	800161c <logInit>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <platformInit+0x96>
	{
		LOGFATAL(eError);
 8002b2e:	7bf8      	ldrb	r0, [r7, #15]
 8002b30:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <platformInit+0x168>)
 8002b32:	2263      	movs	r2, #99	@ 0x63
 8002b34:	4936      	ldr	r1, [pc, #216]	@ (8002c10 <platformInit+0x16c>)
 8002b36:	f7fe fe93 	bl	8001860 <logFatal>
	}

	// Initialize mixer.
	if (eErrorNone != (eError = mixerInit()))
 8002b3a:	f7ff fe83 	bl	8002844 <mixerInit>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <platformInit+0xb0>
	{
		LOGFATAL(eError);
 8002b48:	7bf8      	ldrb	r0, [r7, #15]
 8002b4a:	4b30      	ldr	r3, [pc, #192]	@ (8002c0c <platformInit+0x168>)
 8002b4c:	2269      	movs	r2, #105	@ 0x69
 8002b4e:	4930      	ldr	r1, [pc, #192]	@ (8002c10 <platformInit+0x16c>)
 8002b50:	f7fe fe86 	bl	8001860 <logFatal>
	}

	// Initialize shell.
	if (eErrorNone != (eError = shellInit()))
 8002b54:	f000 ff56 	bl	8003a04 <shellInit>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <platformInit+0xca>
	{
		LOGFATAL(eError);
 8002b62:	7bf8      	ldrb	r0, [r7, #15]
 8002b64:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <platformInit+0x168>)
 8002b66:	226f      	movs	r2, #111	@ 0x6f
 8002b68:	4929      	ldr	r1, [pc, #164]	@ (8002c10 <platformInit+0x16c>)
 8002b6a:	f7fe fe79 	bl	8001860 <logFatal>
	}

    // Add shell commands.
    if (eErrorNone != (eError = shellAdd("ver",
 8002b6e:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <platformInit+0x170>)
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2301      	movs	r3, #1
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <platformInit+0x174>)
 8002b78:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <platformInit+0x174>)
 8002b7a:	4928      	ldr	r1, [pc, #160]	@ (8002c1c <platformInit+0x178>)
 8002b7c:	4828      	ldr	r0, [pc, #160]	@ (8002c20 <platformInit+0x17c>)
 8002b7e:	f001 fa9d 	bl	80040bc <shellAdd>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <platformInit+0xf4>
        "version information", "", "", 1, version)))
    {
        LOGERROR(eError);
 8002b8c:	7bf8      	ldrb	r0, [r7, #15]
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <platformInit+0x168>)
 8002b90:	2276      	movs	r2, #118	@ 0x76
 8002b92:	491f      	ldr	r1, [pc, #124]	@ (8002c10 <platformInit+0x16c>)
 8002b94:	f7fe fdee 	bl	8001774 <logError>
    }

	// Add LED heartbeat callback.
	if (eErrorNone != (eError = timerAdd(PLATFORM_HEARTBEAT_INTERVAL,
 8002b98:	2301      	movs	r3, #1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4921      	ldr	r1, [pc, #132]	@ (8002c24 <platformInit+0x180>)
 8002b9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ba2:	f002 fdad 	bl	8005700 <timerAdd>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <platformInit+0x118>
		heartbeatHandler, NULL, true)))
	{
		LOGFATAL(eError);
 8002bb0:	7bf8      	ldrb	r0, [r7, #15]
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <platformInit+0x168>)
 8002bb4:	227d      	movs	r2, #125	@ 0x7d
 8002bb6:	4916      	ldr	r1, [pc, #88]	@ (8002c10 <platformInit+0x16c>)
 8002bb8:	f7fe fe52 	bl	8001860 <logFatal>
	}

	// Clear terminal.
	puts(VT100_CLEAR_SCREEN);
 8002bbc:	481a      	ldr	r0, [pc, #104]	@ (8002c28 <platformInit+0x184>)
 8002bbe:	f012 fdd7 	bl	8015770 <puts>
	puts(VT100_CURSOR_HOME);
 8002bc2:	481a      	ldr	r0, [pc, #104]	@ (8002c2c <platformInit+0x188>)
 8002bc4:	f012 fdd4 	bl	8015770 <puts>

    // Print shell banner.
    bspPrintf("\r\n\n%s %s Version %d.%d.%d %s (%s)" , PLATFORM_MDL,
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f002 fec3 	bl	8005954 <versionConfidence>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <platformInit+0x18c>)
 8002bd2:	9203      	str	r2, [sp, #12]
 8002bd4:	9302      	str	r3, [sp, #8]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	4a14      	ldr	r2, [pc, #80]	@ (8002c34 <platformInit+0x190>)
 8002be2:	4915      	ldr	r1, [pc, #84]	@ (8002c38 <platformInit+0x194>)
 8002be4:	4815      	ldr	r0, [pc, #84]	@ (8002c3c <platformInit+0x198>)
 8002be6:	f7fe fb85 	bl	80012f4 <bspPrintf>
		PLATFORM_DESCRIPTION, VERSION_MAJOR, VERSION_MINOR,
		VERSION_BUILD, versionConfidence(VERSION_CONF), PLATFORM_TYPE);
    bspPrintf("\r\n%s %s %s" ,PLATFORM_COPYRIGHT, PLATFORM_MFG_FULL,
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <platformInit+0x19c>)
 8002bec:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <platformInit+0x1a0>)
 8002bee:	4916      	ldr	r1, [pc, #88]	@ (8002c48 <platformInit+0x1a4>)
 8002bf0:	4816      	ldr	r0, [pc, #88]	@ (8002c4c <platformInit+0x1a8>)
 8002bf2:	f7fe fb7f 	bl	80012f4 <bspPrintf>
		PLATFORM_RIGHTS);

    // Wait for power rails to stabilize.
    bspMillisecondDelay(BSP_WAIT_RAIL_STABLIZE);
 8002bf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bfa:	f7fe fa77 	bl	80010ec <bspMillisecondDelay>

    // TODO: Perform self-test.

	return true;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200001b8 	.word	0x200001b8
 8002c0c:	080188cc 	.word	0x080188cc
 8002c10:	08018174 	.word	0x08018174
 8002c14:	08002a75 	.word	0x08002a75
 8002c18:	0801818c 	.word	0x0801818c
 8002c1c:	08018190 	.word	0x08018190
 8002c20:	080181a4 	.word	0x080181a4
 8002c24:	08002a39 	.word	0x08002a39
 8002c28:	080181a8 	.word	0x080181a8
 8002c2c:	080181b0 	.word	0x080181b0
 8002c30:	080181f4 	.word	0x080181f4
 8002c34:	080181b4 	.word	0x080181b4
 8002c38:	080181cc 	.word	0x080181cc
 8002c3c:	080181d0 	.word	0x080181d0
 8002c40:	080181f8 	.word	0x080181f8
 8002c44:	08018210 	.word	0x08018210
 8002c48:	08018228 	.word	0x08018228
 8002c4c:	08018234 	.word	0x08018234

08002c50 <platformService>:
// @brief Platform thread of execution.
//
// @return true = success, false = failure
//
bool platformService(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
	teError eError;

    // Service timers.
    timerService();
 8002c56:	f002 fe15 	bl	8005884 <timerService>

	// Service diagnostic shell.
	if (eErrorNone != (eError = shellService()))
 8002c5a:	f001 f8e5 	bl	8003e28 <shellService>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <platformService+0x24>
	{
		LOGERROR(eError);
 8002c68:	79f8      	ldrb	r0, [r7, #7]
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <platformService+0x34>)
 8002c6c:	22a2      	movs	r2, #162	@ 0xa2
 8002c6e:	4906      	ldr	r1, [pc, #24]	@ (8002c88 <platformService+0x38>)
 8002c70:	f7fe fd80 	bl	8001774 <logError>
		LOGERROR(eError);
	}
	*/

    // Try to drain stdout.
    bspConsoleDrain();
 8002c74:	f7fe f9ac 	bl	8000fd0 <bspConsoleDrain>

	return true;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	080188dc 	.word	0x080188dc
 8002c88:	08018174 	.word	0x08018174

08002c8c <empty>:
//
// @param prRing pointer to ring structure
// @return true = empty, false = not empty
//
static inline bool empty(trRing *prRing)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2d8      	uxtb	r0, r3
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <empty+0x3c>)
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <empty+0x40>)
 8002ca6:	2225      	movs	r2, #37	@ 0x25
 8002ca8:	4909      	ldr	r1, [pc, #36]	@ (8002cd0 <empty+0x44>)
 8002caa:	f7fe fcc5 	bl	8001638 <logAssert>

    return (prRing->head == prRing->tail) ? true : false;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08018254 	.word	0x08018254
 8002ccc:	08018904 	.word	0x08018904
 8002cd0:	08018240 	.word	0x08018240

08002cd4 <full>:
//
// @param trRing pointer to ring structure
// @return true = full, false = not full
//
static inline bool full(trRing *prRing)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <full+0x4c>)
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <full+0x50>)
 8002cee:	2233      	movs	r2, #51	@ 0x33
 8002cf0:	490d      	ldr	r1, [pc, #52]	@ (8002d28 <full+0x54>)
 8002cf2:	f7fe fca1 	bl	8001638 <logAssert>

    return ((prRing->head + 1) % prRing->length == prRing->tail) ? true : false;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d04:	fb01 f202 	mul.w	r2, r1, r2
 8002d08:	1a9a      	subs	r2, r3, r2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	bf0c      	ite	eq
 8002d12:	2301      	moveq	r3, #1
 8002d14:	2300      	movne	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	08018254 	.word	0x08018254
 8002d24:	0801890c 	.word	0x0801890c
 8002d28:	08018240 	.word	0x08018240

08002d2c <space>:
//
// @param thRing handle to ring structure
// @return length of free space
//
static inline uint32_t space(trRing *prRing)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2d8      	uxtb	r0, r3
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <space+0x68>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <space+0x6c>)
 8002d46:	2241      	movs	r2, #65	@ 0x41
 8002d48:	4914      	ldr	r1, [pc, #80]	@ (8002d9c <space+0x70>)
 8002d4a:	f7fe fc75 	bl	8001638 <logAssert>

    // Check empty state.
    if (empty(prRing))
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ff9c 	bl	8002c8c <empty>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <space+0x34>
    {
        return prRing->length;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	e014      	b.n	8002d8a <space+0x5e>
    }

    return (prRing->head > prRing->tail) ?
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
            prRing->length - prRing->head + prRing->tail - 1 :
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d909      	bls.n	8002d80 <space+0x54>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1ad2      	subs	r2, r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	e004      	b.n	8002d8a <space+0x5e>
            prRing->tail - prRing->head;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
            prRing->length - prRing->head + prRing->tail - 1 :
 8002d88:	1ad3      	subs	r3, r2, r3
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	08018254 	.word	0x08018254
 8002d98:	08018914 	.word	0x08018914
 8002d9c:	08018240 	.word	0x08018240

08002da0 <ringInit>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return handle to ring
//
thRing ringInit(char *pBuffer, uint32_t length)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	trRing *prRing = (trRing*)pBuffer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2d8      	uxtb	r0, r3
 8002dba:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <ringInit+0x6c>)
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <ringInit+0x70>)
 8002dc0:	225c      	movs	r2, #92	@ 0x5c
 8002dc2:	4914      	ldr	r1, [pc, #80]	@ (8002e14 <ringInit+0x74>)
 8002dc4:	f7fe fc38 	bl	8001638 <logAssert>
	ASSERT(length > 0);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2d8      	uxtb	r0, r3
 8002dd4:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <ringInit+0x78>)
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <ringInit+0x70>)
 8002dda:	225d      	movs	r2, #93	@ 0x5d
 8002ddc:	490d      	ldr	r1, [pc, #52]	@ (8002e14 <ringInit+0x74>)
 8002dde:	f7fe fc2b 	bl	8001638 <logAssert>

	// Initialize ring.
	memset((void*)prRing, 0, length);
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f012 fec2 	bl	8015b70 <memset>
	prRing->length  = length - sizeof(*prRing);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f1a3 0210 	sub.w	r2, r3, #16
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	609a      	str	r2, [r3, #8]
	prRing->pBuffer = pBuffer + sizeof(*prRing);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f103 0210 	add.w	r2, r3, #16
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	60da      	str	r2, [r3, #12]

	return (thRing)prRing;
 8002e00:	68fb      	ldr	r3, [r7, #12]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	08018254 	.word	0x08018254
 8002e10:	080188ec 	.word	0x080188ec
 8002e14:	08018240 	.word	0x08018240
 8002e18:	08018264 	.word	0x08018264

08002e1c <ringEmpty>:
//
// @param hRing handle to ring structure
// @return true = empty, false = not empty
//
bool ringEmpty(thRing hRing)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
	trRing *prRing = (trRing*)hRing;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60fb      	str	r3, [r7, #12]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <ringEmpty+0x38>)
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <ringEmpty+0x3c>)
 8002e3a:	2272      	movs	r2, #114	@ 0x72
 8002e3c:	4907      	ldr	r1, [pc, #28]	@ (8002e5c <ringEmpty+0x40>)
 8002e3e:	f7fe fbfb 	bl	8001638 <logAssert>

	return empty(prRing);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ff22 	bl	8002c8c <empty>
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08018254 	.word	0x08018254
 8002e58:	080188f8 	.word	0x080188f8
 8002e5c:	08018240 	.word	0x08018240

08002e60 <ringWrite>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return number of bytes written
//
uint32_t ringWrite(thRing hRing, const char *pBuffer, const uint32_t length)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	uint32_t  bytes  = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
	trRing   *prRing = (trRing*)hRing;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	613b      	str	r3, [r7, #16]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2d8      	uxtb	r0, r3
 8002e80:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef4 <ringWrite+0x94>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <ringWrite+0x98>)
 8002e86:	22a5      	movs	r2, #165	@ 0xa5
 8002e88:	491c      	ldr	r1, [pc, #112]	@ (8002efc <ringWrite+0x9c>)
 8002e8a:	f7fe fbd5 	bl	8001638 <logAssert>

    // Check free space.
    if (space(prRing) >= length)
 8002e8e:	6938      	ldr	r0, [r7, #16]
 8002e90:	f7ff ff4c 	bl	8002d2c <space>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d825      	bhi.n	8002ee8 <ringWrite+0x88>
    {
        // Write buffer to ring.
        while (!full(prRing) && (bytes < length))
 8002e9c:	e017      	b.n	8002ece <ringWrite+0x6e>
        {
            // Write character.
            prRing->pBuffer[prRing->head] = pBuffer[bytes++];
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	617a      	str	r2, [r7, #20]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	68d9      	ldr	r1, [r3, #12]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	7812      	ldrb	r2, [r2, #0]
 8002eb4:	701a      	strb	r2, [r3, #0]

            // Update head index.
            prRing->head = (prRing->head + 1) % prRing->length;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ec4:	fb01 f202 	mul.w	r2, r1, r2
 8002ec8:	1a9a      	subs	r2, r3, r2
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	601a      	str	r2, [r3, #0]
        while (!full(prRing) && (bytes < length))
 8002ece:	6938      	ldr	r0, [r7, #16]
 8002ed0:	f7ff ff00 	bl	8002cd4 <full>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f083 0301 	eor.w	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <ringWrite+0x88>
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3da      	bcc.n	8002e9e <ringWrite+0x3e>
        }
    }

	return bytes;
 8002ee8:	697b      	ldr	r3, [r7, #20]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08018254 	.word	0x08018254
 8002ef8:	0801891c 	.word	0x0801891c
 8002efc:	08018240 	.word	0x08018240

08002f00 <ringRead>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return number of bytes read
//
uint32_t ringRead(thRing hRing, char *pBuffer, const uint32_t length)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
	uint32_t  bytes  = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
	trRing   *prRing = (trRing*)hRing;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	613b      	str	r3, [r7, #16]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2d8      	uxtb	r0, r3
 8002f20:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <ringRead+0xa0>)
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <ringRead+0xa4>)
 8002f26:	22c6      	movs	r2, #198	@ 0xc6
 8002f28:	491f      	ldr	r1, [pc, #124]	@ (8002fa8 <ringRead+0xa8>)
 8002f2a:	f7fe fb85 	bl	8001638 <logAssert>
	ASSERT(length > 0);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2d8      	uxtb	r0, r3
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fac <ringRead+0xac>)
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <ringRead+0xa4>)
 8002f40:	22c7      	movs	r2, #199	@ 0xc7
 8002f42:	4919      	ldr	r1, [pc, #100]	@ (8002fa8 <ringRead+0xa8>)
 8002f44:	f7fe fb78 	bl	8001638 <logAssert>

	// Read buffer from ring.
	while (!empty(prRing) && (bytes < length))
 8002f48:	e017      	b.n	8002f7a <ringRead+0x7a>
	{
		// Read character.
		pBuffer[bytes++] = prRing->pBuffer[prRing->tail];
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	441a      	add	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	6179      	str	r1, [r7, #20]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	440b      	add	r3, r1
 8002f5e:	7812      	ldrb	r2, [r2, #0]
 8002f60:	701a      	strb	r2, [r3, #0]

		// Update tail index.
		prRing->tail = (prRing->tail + 1) % prRing->length;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	3301      	adds	r3, #1
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f70:	fb01 f202 	mul.w	r2, r1, r2
 8002f74:	1a9a      	subs	r2, r3, r2
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	605a      	str	r2, [r3, #4]
	while (!empty(prRing) && (bytes < length))
 8002f7a:	6938      	ldr	r0, [r7, #16]
 8002f7c:	f7ff fe86 	bl	8002c8c <empty>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f083 0301 	eor.w	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <ringRead+0x94>
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3da      	bcc.n	8002f4a <ringRead+0x4a>
	}

	return bytes;
 8002f94:	697b      	ldr	r3, [r7, #20]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	08018254 	.word	0x08018254
 8002fa4:	08018928 	.word	0x08018928
 8002fa8:	08018240 	.word	0x08018240
 8002fac:	08018264 	.word	0x08018264

08002fb0 <command>:
//
// @param pString pointer to null terminated command line
// @return enumerated error code
//
static teError command(char *pString)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0a4      	sub	sp, #144	@ 0x90
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    uint32_t  index;
    int       argc;
    char 	 *argv[SHELL_CMD_ARGS_MAX];

    // Tokenize command line.
    argv[argc = 0] = strtok(pString, " ");
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fbe:	493a      	ldr	r1, [pc, #232]	@ (80030a8 <command+0xf8>)
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f012 fe03 	bl	8015bcc <strtok>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	3390      	adds	r3, #144	@ 0x90
 8002fd0:	443b      	add	r3, r7
 8002fd2:	f843 2c88 	str.w	r2, [r3, #-136]
    while ((argc < (int)DIM(argv)) && (NULL != argv[argc]))
 8002fd6:	e010      	b.n	8002ffa <command+0x4a>
    {
        //lint -save -e661
        argv[++argc] = strtok(NULL, " ");
 8002fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fe2:	4931      	ldr	r1, [pc, #196]	@ (80030a8 <command+0xf8>)
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f012 fdf1 	bl	8015bcc <strtok>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	3390      	adds	r3, #144	@ 0x90
 8002ff4:	443b      	add	r3, r7
 8002ff6:	f843 2c88 	str.w	r2, [r3, #-136]
    while ((argc < (int)DIM(argv)) && (NULL != argv[argc]))
 8002ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ffe:	2b1f      	cmp	r3, #31
 8003000:	dc08      	bgt.n	8003014 <command+0x64>
 8003002:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	3390      	adds	r3, #144	@ 0x90
 800300a:	443b      	add	r3, r7
 800300c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e1      	bne.n	8002fd8 <command+0x28>
        //lint -restore
    }

    // Check for no command.
    if (0 == argc)
 8003014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <command+0x70>
    {
        return eErrorNone;
 800301c:	2300      	movs	r3, #0
 800301e:	e03e      	b.n	800309e <command+0xee>
    }

    // Iterate over commands.
    for (index = 0; index < DIM(grCmd); index++)
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003026:	e035      	b.n	8003094 <command+0xe4>
    {
        // Check for matching string.
        if (0 == strcmp(argv[0], grCmd[index].name))
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800302e:	21a8      	movs	r1, #168	@ 0xa8
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	491d      	ldr	r1, [pc, #116]	@ (80030ac <command+0xfc>)
 8003036:	440b      	add	r3, r1
 8003038:	3301      	adds	r3, #1
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fd f93b 	bl	80002b8 <strcmp>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <command+0xda>
        {
            // Check for minimum arguments.
            if (argc < (int)grCmd[index].minArgs)
 8003048:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <command+0xfc>)
 800304a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800304e:	21a8      	movs	r1, #168	@ 0xa8
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	33a0      	adds	r3, #160	@ 0xa0
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003060:	4293      	cmp	r3, r2
 8003062:	da01      	bge.n	8003068 <command+0xb8>
            {
                return eErrorArgument;
 8003064:	2303      	movs	r3, #3
 8003066:	e01a      	b.n	800309e <command+0xee>
            }

            // Execute command.
            return grCmd[index].pCmd(argc, argv);
 8003068:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <command+0xfc>)
 800306a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306e:	21a8      	movs	r1, #168	@ 0xa8
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	33a4      	adds	r3, #164	@ 0xa4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f107 0208 	add.w	r2, r7, #8
 800307e:	4611      	mov	r1, r2
 8003080:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003084:	4798      	blx	r3
 8003086:	4603      	mov	r3, r0
 8003088:	e009      	b.n	800309e <command+0xee>
    for (index = 0; index < DIM(grCmd); index++)
 800308a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800308e:	3301      	adds	r3, #1
 8003090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003098:	2b27      	cmp	r3, #39	@ 0x27
 800309a:	d9c5      	bls.n	8003028 <command+0x78>
        }
    }

    return eErrorUnsupported;
 800309c:	2321      	movs	r3, #33	@ 0x21
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3790      	adds	r7, #144	@ 0x90
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	08018270 	.word	0x08018270
 80030ac:	20002944 	.word	0x20002944

080030b0 <clear>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError clear(int argc, char *argv[])
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
    bspPrintf(VT100_CLEAR_SCREEN);
 80030ba:	4804      	ldr	r0, [pc, #16]	@ (80030cc <clear+0x1c>)
 80030bc:	f7fe f91a 	bl	80012f4 <bspPrintf>

    return eErrorNone;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	08018274 	.word	0x08018274

080030d0 <build>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError build(int argc, char *argv[])
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
    bspPrintf("\r\n%s %s", __DATE__, __TIME__);
 80030da:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <build+0x20>)
 80030dc:	4905      	ldr	r1, [pc, #20]	@ (80030f4 <build+0x24>)
 80030de:	4806      	ldr	r0, [pc, #24]	@ (80030f8 <build+0x28>)
 80030e0:	f7fe f908 	bl	80012f4 <bspPrintf>

    return eErrorNone;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	0801827c 	.word	0x0801827c
 80030f4:	08018288 	.word	0x08018288
 80030f8:	08018294 	.word	0x08018294

080030fc <comment>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError comment(int argc, char *argv[])
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
    return eErrorNone;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <delay>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError delay(int argc, char *argv[])
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    uint32_t milliseconds;

    // Parse command line.
    milliseconds = strtol(argv[1], NULL, 0);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	3304      	adds	r3, #4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f011 fd9d 	bl	8014c68 <strtol>
 800312e:	4603      	mov	r3, r0
 8003130:	60fb      	str	r3, [r7, #12]

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <delay+0x2a>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3b01      	subs	r3, #1
 800313c:	e000      	b.n	8003140 <delay+0x2c>
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]

	// Wait a bit.
	bspMillisecondDelay(milliseconds);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7fd ffd2 	bl	80010ec <bspMillisecondDelay>

    return eErrorNone;
 8003148:	2300      	movs	r3, #0

}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <error>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError error(int argc, char *argv[])
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	static trLogError rError;

	// Dump error history.
    while (logErrorHistory(&rError))
 800315e:	e008      	b.n	8003172 <error+0x1e>
	{
		bspPrintf("\r\n%d,%s,%lu", rError.eError, rError.file, rError.line);
 8003160:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <error+0x34>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <error+0x34>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	4a08      	ldr	r2, [pc, #32]	@ (800318c <error+0x38>)
 800316c:	4808      	ldr	r0, [pc, #32]	@ (8003190 <error+0x3c>)
 800316e:	f7fe f8c1 	bl	80012f4 <bspPrintf>
    while (logErrorHistory(&rError))
 8003172:	4805      	ldr	r0, [pc, #20]	@ (8003188 <error+0x34>)
 8003174:	f7fe fbdc 	bl	8001930 <logErrorHistory>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <error+0xc>
	}

	return eErrorNone;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20004384 	.word	0x20004384
 800318c:	20004385 	.word	0x20004385
 8003190:	0801829c 	.word	0x0801829c

08003194 <help>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError help(int argc, char *argv[])
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
    uint32_t index;

    // Check for specific command.
    if (2 == argc)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d13c      	bne.n	800321e <help+0x8a>
    {
        // Iterate over commands.
        for (index = 0; index < DIM(grCmd); index++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e034      	b.n	8003214 <help+0x80>
        {
            // Check for matching string.
            if (0 == strcmp(argv[1], grCmd[index].name))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	3304      	adds	r3, #4
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	21a8      	movs	r1, #168	@ 0xa8
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4931      	ldr	r1, [pc, #196]	@ (8003280 <help+0xec>)
 80031ba:	440b      	add	r3, r1
 80031bc:	3301      	adds	r3, #1
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7fd f879 	bl	80002b8 <strcmp>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d120      	bne.n	800320e <help+0x7a>
            {
                // Print command usage.
                bspPrintf("\r\n%s %s", grCmd[index].name,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	22a8      	movs	r2, #168	@ 0xa8
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <help+0xec>)
 80031d6:	4413      	add	r3, r2
 80031d8:	1c59      	adds	r1, r3, #1
                    grCmd[index].arguments);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22a8      	movs	r2, #168	@ 0xa8
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	3308      	adds	r3, #8
 80031e4:	4a26      	ldr	r2, [pc, #152]	@ (8003280 <help+0xec>)
 80031e6:	4413      	add	r3, r2
 80031e8:	3301      	adds	r3, #1
                bspPrintf("\r\n%s %s", grCmd[index].name,
 80031ea:	461a      	mov	r2, r3
 80031ec:	4825      	ldr	r0, [pc, #148]	@ (8003284 <help+0xf0>)
 80031ee:	f7fe f881 	bl	80012f4 <bspPrintf>
                bspPrintf("\r\n%s", grCmd[index].detail);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	22a8      	movs	r2, #168	@ 0xa8
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	3348      	adds	r3, #72	@ 0x48
 80031fc:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <help+0xec>)
 80031fe:	4413      	add	r3, r2
 8003200:	3305      	adds	r3, #5
 8003202:	4619      	mov	r1, r3
 8003204:	4820      	ldr	r0, [pc, #128]	@ (8003288 <help+0xf4>)
 8003206:	f7fe f875 	bl	80012f4 <bspPrintf>

                return eErrorNone;
 800320a:	2300      	movs	r3, #0
 800320c:	e034      	b.n	8003278 <help+0xe4>
        for (index = 0; index < DIM(grCmd); index++)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b27      	cmp	r3, #39	@ 0x27
 8003218:	d9c7      	bls.n	80031aa <help+0x16>
            }
        }

        return eErrorArgument;
 800321a:	2303      	movs	r3, #3
 800321c:	e02c      	b.n	8003278 <help+0xe4>
    }

    // Iterate over commands.
    for (index = 0; index < DIM(grCmd); index++)
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e025      	b.n	8003270 <help+0xdc>
    {
        // Print command usage.
    	if (grCmd[index].allocated)
 8003224:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <help+0xec>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	21a8      	movs	r1, #168	@ 0xa8
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d019      	beq.n	800326a <help+0xd6>
    	{
			bspPrintf("\r\n%8s %-40s %-28s", grCmd[index].name,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22a8      	movs	r2, #168	@ 0xa8
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	4a10      	ldr	r2, [pc, #64]	@ (8003280 <help+0xec>)
 8003240:	4413      	add	r3, r2
 8003242:	1c59      	adds	r1, r3, #1
				grCmd[index].arguments, grCmd[index].description);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	22a8      	movs	r2, #168	@ 0xa8
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	3308      	adds	r3, #8
 800324e:	4a0c      	ldr	r2, [pc, #48]	@ (8003280 <help+0xec>)
 8003250:	4413      	add	r3, r2
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	20a8      	movs	r0, #168	@ 0xa8
 8003258:	fb00 f303 	mul.w	r3, r0, r3
 800325c:	3330      	adds	r3, #48	@ 0x30
 800325e:	4808      	ldr	r0, [pc, #32]	@ (8003280 <help+0xec>)
 8003260:	4403      	add	r3, r0
 8003262:	3301      	adds	r3, #1
			bspPrintf("\r\n%8s %-40s %-28s", grCmd[index].name,
 8003264:	4809      	ldr	r0, [pc, #36]	@ (800328c <help+0xf8>)
 8003266:	f7fe f845 	bl	80012f4 <bspPrintf>
    for (index = 0; index < DIM(grCmd); index++)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b27      	cmp	r3, #39	@ 0x27
 8003274:	d9d6      	bls.n	8003224 <help+0x90>
    	}
    }

    return eErrorNone;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20002944 	.word	0x20002944
 8003284:	08018294 	.word	0x08018294
 8003288:	080182a8 	.word	0x080182a8
 800328c:	080182b0 	.word	0x080182b0

08003290 <i2cRead>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError i2cRead(int argc, char *argv[])
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
    uint8_t      address;
    uint16_t     index;
    uint16_t     length;

    // Parse arguments.
    address  = (uint8_t)strtol(argv[1], NULL, 0);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3304      	adds	r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f011 fcdf 	bl	8014c68 <strtol>
 80032aa:	4603      	mov	r3, r0
 80032ac:	757b      	strb	r3, [r7, #21]
    length   = (uint16_t)strtol(argv[2], NULL, 0);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f011 fcd5 	bl	8014c68 <strtol>
 80032be:	4603      	mov	r3, r0
 80032c0:	827b      	strh	r3, [r7, #18]

    // Santize length.
    length   = (length > sizeof(buffer)) ? sizeof(buffer) : length;
 80032c2:	8a7b      	ldrh	r3, [r7, #18]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	bf28      	it	cs
 80032c8:	2304      	movcs	r3, #4
 80032ca:	827b      	strh	r3, [r7, #18]

    // Read bus.
    if (!bspI2cRead(address, buffer, length))
 80032cc:	8a7a      	ldrh	r2, [r7, #18]
 80032ce:	f107 010c 	add.w	r1, r7, #12
 80032d2:	7d7b      	ldrb	r3, [r7, #21]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd ff15 	bl	8001104 <bspI2cRead>
 80032da:	4603      	mov	r3, r0
 80032dc:	f083 0301 	eor.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <i2cRead+0x5a>
    {
        return eErrorTimeout;
 80032e6:	231f      	movs	r3, #31
 80032e8:	e016      	b.n	8003318 <i2cRead+0x88>
    }

    // Print data.
    bspPrintf("\r\n");
 80032ea:	480d      	ldr	r0, [pc, #52]	@ (8003320 <i2cRead+0x90>)
 80032ec:	f7fe f802 	bl	80012f4 <bspPrintf>
    for (index = 0; index < length; index++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	82fb      	strh	r3, [r7, #22]
 80032f4:	e00b      	b.n	800330e <i2cRead+0x7e>
    {
        bspPrintf("0x%02x ", buffer[index]);
 80032f6:	8afb      	ldrh	r3, [r7, #22]
 80032f8:	3318      	adds	r3, #24
 80032fa:	443b      	add	r3, r7
 80032fc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003300:	4619      	mov	r1, r3
 8003302:	4808      	ldr	r0, [pc, #32]	@ (8003324 <i2cRead+0x94>)
 8003304:	f7fd fff6 	bl	80012f4 <bspPrintf>
    for (index = 0; index < length; index++)
 8003308:	8afb      	ldrh	r3, [r7, #22]
 800330a:	3301      	adds	r3, #1
 800330c:	82fb      	strh	r3, [r7, #22]
 800330e:	8afa      	ldrh	r2, [r7, #22]
 8003310:	8a7b      	ldrh	r3, [r7, #18]
 8003312:	429a      	cmp	r2, r3
 8003314:	d3ef      	bcc.n	80032f6 <i2cRead+0x66>
    }

    return eErrorNone;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	080182c4 	.word	0x080182c4
 8003324:	080182c8 	.word	0x080182c8

08003328 <i2cWrite>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError i2cWrite(int argc, char *argv[])
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    uint8_t      buffer[BSP_I2C_BUFFER_MAX];
    uint8_t      address;
    uint16_t     length;

    // Parse arguments.
    address = (uint8_t)strtol(argv[1], NULL, 0);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3304      	adds	r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f011 fc93 	bl	8014c68 <strtol>
 8003342:	4603      	mov	r3, r0
 8003344:	737b      	strb	r3, [r7, #13]
    for (length = 0; ((length + 2) < argc) &&
 8003346:	2300      	movs	r3, #0
 8003348:	81fb      	strh	r3, [r7, #14]
 800334a:	e014      	b.n	8003376 <i2cWrite+0x4e>
        (length < sizeof(buffer)); length++)
    {
        buffer[length] = (uint8_t)strtol(argv[length + 2], NULL, 0);
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	3302      	adds	r3, #2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	4413      	add	r3, r2
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f011 fc83 	bl	8014c68 <strtol>
 8003362:	4602      	mov	r2, r0
 8003364:	89fb      	ldrh	r3, [r7, #14]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	3310      	adds	r3, #16
 800336a:	443b      	add	r3, r7
 800336c:	f803 2c08 	strb.w	r2, [r3, #-8]
        (length < sizeof(buffer)); length++)
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	3301      	adds	r3, #1
 8003374:	81fb      	strh	r3, [r7, #14]
    for (length = 0; ((length + 2) < argc) &&
 8003376:	89fb      	ldrh	r3, [r7, #14]
 8003378:	3302      	adds	r3, #2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	dd02      	ble.n	8003386 <i2cWrite+0x5e>
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d9e2      	bls.n	800334c <i2cWrite+0x24>
    }

    // Write channel.
    if (!bspI2cWrite(address, buffer, length))
 8003386:	89fa      	ldrh	r2, [r7, #14]
 8003388:	f107 0108 	add.w	r1, r7, #8
 800338c:	7b7b      	ldrb	r3, [r7, #13]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fef8 	bl	8001184 <bspI2cWrite>
 8003394:	4603      	mov	r3, r0
 8003396:	f083 0301 	eor.w	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <i2cWrite+0x7c>
    {
        return eErrorTimeout;
 80033a0:	231f      	movs	r3, #31
 80033a2:	e000      	b.n	80033a6 <i2cWrite+0x7e>
    }

    return eErrorNone;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <monitor>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError monitor(int argc, char *argv[])
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b0ae      	sub	sp, #184	@ 0xb8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
    char    	   	   buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Parse command line.
    milliseconds = strtol(argv[1], NULL, 0);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	3304      	adds	r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f011 fc4f 	bl	8014c68 <strtol>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 80033d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <monitor+0x30>
 80033d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033dc:	3b01      	subs	r3, #1
 80033de:	e000      	b.n	80033e2 <monitor+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // Wait for user abort.
    while (bspConsoleEmpty())
 80033e6:	e045      	b.n	8003474 <monitor+0xc4>
    {
        // Clear screen and place cursor in home position.
        bspPrintf(VT100_CLEAR_SCREEN);
 80033e8:	4827      	ldr	r0, [pc, #156]	@ (8003488 <monitor+0xd8>)
 80033ea:	f7fd ff83 	bl	80012f4 <bspPrintf>
        bspPrintf(VT100_CURSOR_HOME);
 80033ee:	4827      	ldr	r0, [pc, #156]	@ (800348c <monitor+0xdc>)
 80033f0:	f7fd ff80 	bl	80012f4 <bspPrintf>

        // Build command buffer.
        memset(buffer, 0, sizeof(buffer));
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	22a0      	movs	r2, #160	@ 0xa0
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f012 fbb7 	bl	8015b70 <memset>
        for (index = 2; index < argc; index++)
 8003402:	2302      	movs	r3, #2
 8003404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003408:	e018      	b.n	800343c <monitor+0x8c>
        {
            strncat(buffer, argv[index], sizeof(buffer)-1);
 800340a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	4413      	add	r3, r2
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	229f      	movs	r2, #159	@ 0x9f
 800341c:	4618      	mov	r0, r3
 800341e:	f012 fbaf 	bl	8015b80 <strncat>
            strncat(buffer, pSpace, sizeof(buffer)-1);
 8003422:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <monitor+0xe0>)
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	229f      	movs	r2, #159	@ 0x9f
 800342c:	4618      	mov	r0, r3
 800342e:	f012 fba7 	bl	8015b80 <strncat>
        for (index = 2; index < argc; index++)
 8003432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003436:	3301      	adds	r3, #1
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	dbe1      	blt.n	800340a <monitor+0x5a>
        }

        // Execute command.
        if (eErrorNone != (eError = command(buffer)))
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fdb0 	bl	8002fb0 <command>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8003456:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <monitor+0xb4>
        {
            return eError;
 800345e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003462:	e00d      	b.n	8003480 <monitor+0xd0>
        }

        // Wait for specified time.
        bspMillisecondDelay(milliseconds);
 8003464:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003468:	f7fd fe40 	bl	80010ec <bspMillisecondDelay>

        // Service timers.
        timerService();
 800346c:	f002 fa0a 	bl	8005884 <timerService>

        // Try to drain stdout.
        bspConsoleFlush();
 8003470:	f7fd fdd1 	bl	8001016 <bspConsoleFlush>
    while (bspConsoleEmpty())
 8003474:	f7fd fdc3 	bl	8000ffe <bspConsoleEmpty>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1b4      	bne.n	80033e8 <monitor+0x38>
    }

    return eErrorNone;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	37b8      	adds	r7, #184	@ 0xb8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	08018274 	.word	0x08018274
 800348c:	080182d0 	.word	0x080182d0
 8003490:	20000184 	.word	0x20000184

08003494 <memRead>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError memRead(int argc, char *argv[])
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	@ 0x38
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	uint8_t  *pByte;
	uint16_t *pHalf;
	uint32_t *pWord;

    // Set defaults.
    width  = 'w';
 800349e:	2377      	movs	r3, #119	@ 0x77
 80034a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    length = 1;
 80034a4:	2301      	movs	r3, #1
 80034a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Parse arguments.
    address = strtol(argv[1], NULL, 0);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f011 fbd8 	bl	8014c68 <strtol>
 80034b8:	4603      	mov	r3, r0
 80034ba:	61bb      	str	r3, [r7, #24]
    if (argc > 2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	dd0e      	ble.n	80034e0 <memRead+0x4c>
    {
    	length = strtol(argv[2], NULL, 0);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f011 fbcb 	bl	8014c68 <strtol>
 80034d2:	4603      	mov	r3, r0
 80034d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (0 == length)
 80034d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <memRead+0x4c>
        {
            return eErrorArgument;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0f5      	b.n	80036cc <memRead+0x238>
        }
    }
    if (argc > 3)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	dd05      	ble.n	80034f2 <memRead+0x5e>
    {
        width = *argv[3];
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Assign address types.
    pByte = (uint8_t*)address;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pHalf = (uint16_t*)address;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	623b      	str	r3, [r7, #32]
    pWord = (uint32_t*)address;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	61fb      	str	r3, [r7, #28]

    // Read and display memory contents.
    memset(buffer, 0, sizeof(buffer));
 80034fe:	f107 0308 	add.w	r3, r7, #8
 8003502:	2210      	movs	r2, #16
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f012 fb32 	bl	8015b70 <memset>
    for (index = 0; bspConsoleEmpty() && (index < length); index++)
 800350c:	2300      	movs	r3, #0
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003510:	e08e      	b.n	8003630 <memRead+0x19c>
    {
        // Process width.
        switch (width)
 8003512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003516:	2b77      	cmp	r3, #119	@ 0x77
 8003518:	d06b      	beq.n	80035f2 <memRead+0x15e>
 800351a:	2b77      	cmp	r3, #119	@ 0x77
 800351c:	f300 8083 	bgt.w	8003626 <memRead+0x192>
 8003520:	2b62      	cmp	r3, #98	@ 0x62
 8003522:	d002      	beq.n	800352a <memRead+0x96>
 8003524:	2b68      	cmp	r3, #104	@ 0x68
 8003526:	d04a      	beq.n	80035be <memRead+0x12a>
 8003528:	e07d      	b.n	8003626 <memRead+0x192>
        {
            case 'b':
                if (0 == index%sizeof(buffer))
 800352a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	2b00      	cmp	r3, #0
 8003532:	d12b      	bne.n	800358c <memRead+0xf8>
                {
                    if (index > 0)
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d023      	beq.n	8003582 <memRead+0xee>
                    {
                        bspPrintf(" ");
 800353a:	4866      	ldr	r0, [pc, #408]	@ (80036d4 <memRead+0x240>)
 800353c:	f7fd feda 	bl	80012f4 <bspPrintf>
                        for (offset = 0; offset < sizeof(buffer); offset++)
 8003540:	2300      	movs	r3, #0
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30
 8003544:	e01a      	b.n	800357c <memRead+0xe8>
                        {
                            bspPrintf("%c",
                                (isprint(buffer[offset])) ?
 8003546:	f107 0208 	add.w	r2, r7, #8
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	4413      	add	r3, r2
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a61      	ldr	r2, [pc, #388]	@ (80036d8 <memRead+0x244>)
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f003 0397 	and.w	r3, r3, #151	@ 0x97
                            bspPrintf("%c",
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <memRead+0xd8>
                                buffer[offset] : '.');
 8003560:	f107 0208 	add.w	r2, r7, #8
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	e000      	b.n	800356e <memRead+0xda>
                            bspPrintf("%c",
 800356c:	232e      	movs	r3, #46	@ 0x2e
 800356e:	4619      	mov	r1, r3
 8003570:	485a      	ldr	r0, [pc, #360]	@ (80036dc <memRead+0x248>)
 8003572:	f7fd febf 	bl	80012f4 <bspPrintf>
                        for (offset = 0; offset < sizeof(buffer); offset++)
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	3301      	adds	r3, #1
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d9e1      	bls.n	8003546 <memRead+0xb2>
                        }
                    }
                    bspPrintf("\r\n%08lx: ", (uint32_t)pByte);
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	4856      	ldr	r0, [pc, #344]	@ (80036e0 <memRead+0x24c>)
 8003588:	f7fd feb4 	bl	80012f4 <bspPrintf>
                }
                buffer[index%sizeof(buffer)] = (char)*pByte++;
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	627a      	str	r2, [r7, #36]	@ 0x24
 8003592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003594:	f002 020f 	and.w	r2, r2, #15
 8003598:	7819      	ldrb	r1, [r3, #0]
 800359a:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 800359e:	443b      	add	r3, r7
 80035a0:	460a      	mov	r2, r1
 80035a2:	f803 2c30 	strb.w	r2, [r3, #-48]
                bspPrintf("%02x ", buffer[index%sizeof(buffer)] & 0xff);
 80035a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	3338      	adds	r3, #56	@ 0x38
 80035ae:	443b      	add	r3, r7
 80035b0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80035b4:	4619      	mov	r1, r3
 80035b6:	484b      	ldr	r0, [pc, #300]	@ (80036e4 <memRead+0x250>)
 80035b8:	f7fd fe9c 	bl	80012f4 <bspPrintf>
                break;
 80035bc:	e035      	b.n	800362a <memRead+0x196>

            case 'h':
                if (0 != address%(sizeof(uint16_t)))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <memRead+0x138>
                {
                    return eErrorArgument;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e07f      	b.n	80036cc <memRead+0x238>
                }
                if (0 == index%(sizeof(buffer)/sizeof(uint16_t)))
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d104      	bne.n	80035e0 <memRead+0x14c>
                {
                    bspPrintf("\r\n%08lx: ", (uint32_t)pHalf);
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	4619      	mov	r1, r3
 80035da:	4841      	ldr	r0, [pc, #260]	@ (80036e0 <memRead+0x24c>)
 80035dc:	f7fd fe8a 	bl	80012f4 <bspPrintf>
                }
                bspPrintf("%04x ", *pHalf++);
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	623a      	str	r2, [r7, #32]
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	483f      	ldr	r0, [pc, #252]	@ (80036e8 <memRead+0x254>)
 80035ec:	f7fd fe82 	bl	80012f4 <bspPrintf>
                break;
 80035f0:	e01b      	b.n	800362a <memRead+0x196>

            case 'w':
                    if (0 != address%(sizeof(uint32_t)))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <memRead+0x16c>
                    {
                        return eErrorArgument;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e065      	b.n	80036cc <memRead+0x238>
                    }
                    if (0 == index%(sizeof(buffer)/sizeof(uint32_t)))
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <memRead+0x180>
                    {
                        bspPrintf("\r\n%08lx: ", (uint32_t)pWord);
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4619      	mov	r1, r3
 800360e:	4834      	ldr	r0, [pc, #208]	@ (80036e0 <memRead+0x24c>)
 8003610:	f7fd fe70 	bl	80012f4 <bspPrintf>
                    }
                    bspPrintf("%08lx ", *pWord++);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	1d1a      	adds	r2, r3, #4
 8003618:	61fa      	str	r2, [r7, #28]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	4833      	ldr	r0, [pc, #204]	@ (80036ec <memRead+0x258>)
 8003620:	f7fd fe68 	bl	80012f4 <bspPrintf>
                    break;
 8003624:	e001      	b.n	800362a <memRead+0x196>

            default:
                    return eErrorArgument;
 8003626:	2303      	movs	r3, #3
 8003628:	e050      	b.n	80036cc <memRead+0x238>
    for (index = 0; bspConsoleEmpty() && (index < length); index++)
 800362a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362c:	3301      	adds	r3, #1
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003630:	f7fd fce5 	bl	8000ffe <bspConsoleEmpty>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <memRead+0x1b0>
 800363a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363e:	429a      	cmp	r2, r3
 8003640:	f4ff af67 	bcc.w	8003512 <memRead+0x7e>
        }
    }

    // Print remaining character line.
    if ('b' == width)
 8003644:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003648:	2b62      	cmp	r3, #98	@ 0x62
 800364a:	d13e      	bne.n	80036ca <memRead+0x236>
    {
        bspPrintf(" ");
 800364c:	4821      	ldr	r0, [pc, #132]	@ (80036d4 <memRead+0x240>)
 800364e:	f7fd fe51 	bl	80012f4 <bspPrintf>
        length = length%sizeof(buffer);
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28
        length = (0 == length) ? sizeof(buffer) : length;
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <memRead+0x1d0>
 8003660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003662:	e000      	b.n	8003666 <memRead+0x1d2>
 8003664:	2310      	movs	r3, #16
 8003666:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (index = 0; index < (sizeof(buffer)-length); index++)
 8003668:	2300      	movs	r3, #0
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
 800366c:	e005      	b.n	800367a <memRead+0x1e6>
        {
            bspPrintf("   ");
 800366e:	4820      	ldr	r0, [pc, #128]	@ (80036f0 <memRead+0x25c>)
 8003670:	f7fd fe40 	bl	80012f4 <bspPrintf>
        for (index = 0; index < (sizeof(buffer)-length); index++)
 8003674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003676:	3301      	adds	r3, #1
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	f1c3 0310 	rsb	r3, r3, #16
 8003680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003682:	429a      	cmp	r2, r3
 8003684:	d3f3      	bcc.n	800366e <memRead+0x1da>
        }
        for (offset = 0; offset < length; offset++)
 8003686:	2300      	movs	r3, #0
 8003688:	633b      	str	r3, [r7, #48]	@ 0x30
 800368a:	e01a      	b.n	80036c2 <memRead+0x22e>
        {
            bspPrintf("%c", (isprint(buffer[offset])) ?
 800368c:	f107 0208 	add.w	r2, r7, #8
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a0f      	ldr	r2, [pc, #60]	@ (80036d8 <memRead+0x244>)
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <memRead+0x21e>
                buffer[offset] : '.');
 80036a6:	f107 0208 	add.w	r2, r7, #8
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	4413      	add	r3, r2
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	e000      	b.n	80036b4 <memRead+0x220>
            bspPrintf("%c", (isprint(buffer[offset])) ?
 80036b2:	232e      	movs	r3, #46	@ 0x2e
 80036b4:	4619      	mov	r1, r3
 80036b6:	4809      	ldr	r0, [pc, #36]	@ (80036dc <memRead+0x248>)
 80036b8:	f7fd fe1c 	bl	80012f4 <bspPrintf>
        for (offset = 0; offset < length; offset++)
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	3301      	adds	r3, #1
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3e0      	bcc.n	800368c <memRead+0x1f8>
        }
    }

    return eErrorNone;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3738      	adds	r7, #56	@ 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	08018270 	.word	0x08018270
 80036d8:	08018a88 	.word	0x08018a88
 80036dc:	080182d4 	.word	0x080182d4
 80036e0:	080182d8 	.word	0x080182d8
 80036e4:	080182e4 	.word	0x080182e4
 80036e8:	080182ec 	.word	0x080182ec
 80036ec:	080182f4 	.word	0x080182f4
 80036f0:	080182fc 	.word	0x080182fc

080036f4 <memWrite>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError memWrite(int argc, char *argv[])
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	uint16_t *pHalf;
	uint32_t *pWord;


    // Set defaults.
    width  = 'w';
 80036fe:	2377      	movs	r3, #119	@ 0x77
 8003700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    length = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]

    // Parse arguments.
    address = strtol(argv[1], NULL, 0);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	3304      	adds	r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f011 faa8 	bl	8014c68 <strtol>
 8003718:	4603      	mov	r3, r0
 800371a:	60fb      	str	r3, [r7, #12]
    value   = strtol(argv[2], NULL, 0);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f011 fa9e 	bl	8014c68 <strtol>
 800372c:	4603      	mov	r3, r0
 800372e:	60bb      	str	r3, [r7, #8]
    if (argc > 3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b03      	cmp	r3, #3
 8003734:	dd09      	ble.n	800374a <memWrite+0x56>
    {
        length = strtol(argv[3], NULL, 0);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f011 fa91 	bl	8014c68 <strtol>
 8003746:	4603      	mov	r3, r0
 8003748:	61fb      	str	r3, [r7, #28]
    }
    if (argc > 4)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b04      	cmp	r3, #4
 800374e:	dd05      	ble.n	800375c <memWrite+0x68>
    {
        width = *argv[4];
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	3310      	adds	r3, #16
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Assign address types.
    pByte = (uint8_t*)address;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	61bb      	str	r3, [r7, #24]
    pHalf = (uint16_t*)address;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	617b      	str	r3, [r7, #20]
    pWord = (uint32_t*)address;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	613b      	str	r3, [r7, #16]

    // Write to memory.
    for (index = 0; index < length; index++)
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
 800376c:	e023      	b.n	80037b6 <memWrite+0xc2>
    {
        // Process width.
        switch (width)
 800376e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003772:	2b77      	cmp	r3, #119	@ 0x77
 8003774:	d014      	beq.n	80037a0 <memWrite+0xac>
 8003776:	2b77      	cmp	r3, #119	@ 0x77
 8003778:	dc18      	bgt.n	80037ac <memWrite+0xb8>
 800377a:	2b62      	cmp	r3, #98	@ 0x62
 800377c:	d002      	beq.n	8003784 <memWrite+0x90>
 800377e:	2b68      	cmp	r3, #104	@ 0x68
 8003780:	d007      	beq.n	8003792 <memWrite+0x9e>
 8003782:	e013      	b.n	80037ac <memWrite+0xb8>
        {
            case 'b':
            	*pByte++ = value;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	61ba      	str	r2, [r7, #24]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]
                break;
 8003790:	e00e      	b.n	80037b0 <memWrite+0xbc>

            case 'h':
            	*pHalf++ = value;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	617a      	str	r2, [r7, #20]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	b292      	uxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]
                break;
 800379e:	e007      	b.n	80037b0 <memWrite+0xbc>

            case 'w':
            	*pWord++ = value;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	613a      	str	r2, [r7, #16]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	601a      	str	r2, [r3, #0]
                break;
 80037aa:	e001      	b.n	80037b0 <memWrite+0xbc>

            default:
                return eErrorArgument;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e007      	b.n	80037c0 <memWrite+0xcc>
    for (index = 0; index < length; index++)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	3301      	adds	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d3d7      	bcc.n	800376e <memWrite+0x7a>
        }
    }

    return eErrorNone;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3728      	adds	r7, #40	@ 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <xtime>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError xtime(int argc, char *argv[])
{
 80037c8:	b5b0      	push	{r4, r5, r7, lr}
 80037ca:	b0ae      	sub	sp, #184	@ 0xb8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    char               buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Build command buffer.
    memset(buffer, 0, sizeof(buffer));
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	22a0      	movs	r2, #160	@ 0xa0
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f012 f9c8 	bl	8015b70 <memset>
    for (index = 1; index < argc; index++)
 80037e0:	2301      	movs	r3, #1
 80037e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037e6:	e018      	b.n	800381a <xtime+0x52>
    {
        strncat(buffer, argv[index], sizeof(buffer)-1);
 80037e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	f107 0308 	add.w	r3, r7, #8
 80037f8:	229f      	movs	r2, #159	@ 0x9f
 80037fa:	4618      	mov	r0, r3
 80037fc:	f012 f9c0 	bl	8015b80 <strncat>
        strncat(buffer, pSpace, sizeof(buffer)-1);
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <xtime+0xc0>)
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	f107 0308 	add.w	r3, r7, #8
 8003808:	229f      	movs	r2, #159	@ 0x9f
 800380a:	4618      	mov	r0, r3
 800380c:	f012 f9b8 	bl	8015b80 <strncat>
    for (index = 1; index < argc; index++)
 8003810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003814:	3301      	adds	r3, #1
 8003816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800381a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	dbe1      	blt.n	80037e8 <xtime+0x20>
    }

    // Sample start time.
    start = bspCycleCounter();
 8003824:	f7fd fc4c 	bl	80010c0 <bspCycleCounter>
 8003828:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

    // Execute command.
    eError = command(buffer);
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fbbd 	bl	8002fb0 <command>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

    // Compute duration.
    delta = bspCycleCounter() - start;
 800383c:	f7fd fc40 	bl	80010c0 <bspCycleCounter>
 8003840:	4602      	mov	r2, r0
 8003842:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    // Display execution time.
    bspPrintf("\r\n%1.6E", (double)delta / (double)bspCycleCounterFrequency());
 800384c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003850:	f7fc fe86 	bl	8000560 <__aeabi_ui2d>
 8003854:	4604      	mov	r4, r0
 8003856:	460d      	mov	r5, r1
 8003858:	f7fd fc3e 	bl	80010d8 <bspCycleCounterFrequency>
 800385c:	4603      	mov	r3, r0
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fe7e 	bl	8000560 <__aeabi_ui2d>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f7fd f81c 	bl	80008a8 <__aeabi_ddiv>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4805      	ldr	r0, [pc, #20]	@ (800388c <xtime+0xc4>)
 8003876:	f7fd fd3d 	bl	80012f4 <bspPrintf>

    return eError;
 800387a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800387e:	4618      	mov	r0, r3
 8003880:	37b8      	adds	r7, #184	@ 0xb8
 8003882:	46bd      	mov	sp, r7
 8003884:	bdb0      	pop	{r4, r5, r7, pc}
 8003886:	bf00      	nop
 8003888:	20000188 	.word	0x20000188
 800388c:	08018300 	.word	0x08018300

08003890 <perf>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError perf(int argc, char *argv[])
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
    // Dump all performance stats.
    perfPrint(NULL);
 800389a:	2000      	movs	r0, #0
 800389c:	f7ff f89e 	bl	80029dc <perfPrint>

    return eErrorNone;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <repeat>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError repeat(int argc, char *argv[])
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b0ae      	sub	sp, #184	@ 0xb8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
    char               buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Parse command line.
    count = strtol(argv[1], NULL, 0);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	3304      	adds	r3, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f011 f9d1 	bl	8014c68 <strtol>
 80038c6:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
    if (0 == count)
 80038ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <repeat+0x2a>
    {
        return eErrorArgument;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e063      	b.n	800399e <repeat+0xf2>
    }
    milliseconds = strtol(argv[2], NULL, 0);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f011 f9c1 	bl	8014c68 <strtol>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 80038ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <repeat+0x50>
 80038f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038f8:	3b01      	subs	r3, #1
 80038fa:	e000      	b.n	80038fe <repeat+0x52>
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    // Wait for user abort or terminal count.
    while (bspConsoleEmpty() && (count-- > 0))
 8003902:	e03f      	b.n	8003984 <repeat+0xd8>
    {
        // Build command buffer.
        memset(buffer, 0, sizeof(buffer));
 8003904:	f107 0308 	add.w	r3, r7, #8
 8003908:	22a0      	movs	r2, #160	@ 0xa0
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f012 f92f 	bl	8015b70 <memset>
        for (index = 3; index < argc; index++)
 8003912:	2303      	movs	r3, #3
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003918:	e018      	b.n	800394c <repeat+0xa0>
        {
            strncat(buffer, argv[index], sizeof(buffer)-1);
 800391a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	4413      	add	r3, r2
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	229f      	movs	r2, #159	@ 0x9f
 800392c:	4618      	mov	r0, r3
 800392e:	f012 f927 	bl	8015b80 <strncat>
            strncat(buffer, pSpace, sizeof(buffer)-1);
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <repeat+0xfc>)
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	229f      	movs	r2, #159	@ 0x9f
 800393c:	4618      	mov	r0, r3
 800393e:	f012 f91f 	bl	8015b80 <strncat>
        for (index = 3; index < argc; index++)
 8003942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003946:	3301      	adds	r3, #1
 8003948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800394c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	dbe1      	blt.n	800391a <repeat+0x6e>
        }

        // Execute command.
        if (eErrorNone != (eError = command(buffer)))
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fb28 	bl	8002fb0 <command>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8003966:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <repeat+0xc8>
        {
            return eError;
 800396e:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8003972:	e014      	b.n	800399e <repeat+0xf2>
        }

        // Wait for specified time.
        bspMillisecondDelay(milliseconds);
 8003974:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003978:	f7fd fbb8 	bl	80010ec <bspMillisecondDelay>

        // Service timers.
        timerService();
 800397c:	f001 ff82 	bl	8005884 <timerService>

        // Flush stdout.
        bspConsoleFlush();
 8003980:	f7fd fb49 	bl	8001016 <bspConsoleFlush>
    while (bspConsoleEmpty() && (count-- > 0))
 8003984:	f7fd fb3b 	bl	8000ffe <bspConsoleEmpty>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <repeat+0xf0>
 800398e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003992:	1e5a      	subs	r2, r3, #1
 8003994:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8003998:	2b00      	cmp	r3, #0
 800399a:	dcb3      	bgt.n	8003904 <repeat+0x58>
    }

    return eErrorNone;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	37b8      	adds	r7, #184	@ 0xb8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000018c 	.word	0x2000018c

080039ac <reboot>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError reboot(int argc, char *argv[])
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	bspReset();
 80039b6:	f7fd fcc9 	bl	800134c <bspReset>

    return eErrorNone;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <uptime>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError uptime(int argc, char *argv[])
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
    trTimerTimestamp rTimestamp;

    // Get timestamp.
    timerTimestamp(&rTimestamp);
 80039ce:	f107 0308 	add.w	r3, r7, #8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fe0c 	bl	80055f0 <timerTimestamp>

    // Print update.
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	4619      	mov	r1, r3
 80039dc:	7abb      	ldrb	r3, [r7, #10]
 80039de:	4618      	mov	r0, r3
        rTimestamp.minutes, rTimestamp.seconds, rTimestamp.milliseconds);
 80039e0:	7afb      	ldrb	r3, [r7, #11]
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 80039e2:	461c      	mov	r4, r3
        rTimestamp.minutes, rTimestamp.seconds, rTimestamp.milliseconds);
 80039e4:	7b3b      	ldrb	r3, [r7, #12]
 80039e6:	89fa      	ldrh	r2, [r7, #14]
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 80039e8:	9201      	str	r2, [sp, #4]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4623      	mov	r3, r4
 80039ee:	4602      	mov	r2, r0
 80039f0:	4803      	ldr	r0, [pc, #12]	@ (8003a00 <uptime+0x3c>)
 80039f2:	f7fd fc7f 	bl	80012f4 <bspPrintf>

    return eErrorNone;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}
 8003a00:	08018308 	.word	0x08018308

08003a04 <shellInit>:
// @brief Initialize shell.
//
// @return enumerated error code
//
teError shellInit(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af02      	add	r7, sp, #8
	teError eError;

	// Initialize line and history buffers.
	memset(&grLine, 0, sizeof(grLine));
 8003a0a:	22a4      	movs	r2, #164	@ 0xa4
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	48a2      	ldr	r0, [pc, #648]	@ (8003c98 <shellInit+0x294>)
 8003a10:	f012 f8ae 	bl	8015b70 <memset>
    memset(&grLineHistory, 0, sizeof(grLineHistory));
 8003a14:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8003a18:	2100      	movs	r1, #0
 8003a1a:	48a0      	ldr	r0, [pc, #640]	@ (8003c9c <shellInit+0x298>)
 8003a1c:	f012 f8a8 	bl	8015b70 <memset>

    // Clear commands.
    memset(grCmd, 0, sizeof(grCmd));
 8003a20:	f44f 52d2 	mov.w	r2, #6720	@ 0x1a40
 8003a24:	2100      	movs	r1, #0
 8003a26:	489e      	ldr	r0, [pc, #632]	@ (8003ca0 <shellInit+0x29c>)
 8003a28:	f012 f8a2 	bl	8015b70 <memset>

    // Add built-in commands.
    if (eErrorNone != (eError = shellAdd("build",
 8003a2c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ca4 <shellInit+0x2a0>)
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	2301      	movs	r3, #1
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4b9c      	ldr	r3, [pc, #624]	@ (8003ca8 <shellInit+0x2a4>)
 8003a36:	4a9c      	ldr	r2, [pc, #624]	@ (8003ca8 <shellInit+0x2a4>)
 8003a38:	499c      	ldr	r1, [pc, #624]	@ (8003cac <shellInit+0x2a8>)
 8003a3a:	489d      	ldr	r0, [pc, #628]	@ (8003cb0 <shellInit+0x2ac>)
 8003a3c:	f000 fb3e 	bl	80040bc <shellAdd>
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <shellInit+0x54>
        "build date/time", "", "", 1, build)))
    {
        LOGERROR(eError);
 8003a4a:	79f8      	ldrb	r0, [r7, #7]
 8003a4c:	4b99      	ldr	r3, [pc, #612]	@ (8003cb4 <shellInit+0x2b0>)
 8003a4e:	f240 22c6 	movw	r2, #710	@ 0x2c6
 8003a52:	4999      	ldr	r1, [pc, #612]	@ (8003cb8 <shellInit+0x2b4>)
 8003a54:	f7fd fe8e 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("#",
 8003a58:	4b98      	ldr	r3, [pc, #608]	@ (8003cbc <shellInit+0x2b8>)
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4b91      	ldr	r3, [pc, #580]	@ (8003ca8 <shellInit+0x2a4>)
 8003a62:	4a91      	ldr	r2, [pc, #580]	@ (8003ca8 <shellInit+0x2a4>)
 8003a64:	4996      	ldr	r1, [pc, #600]	@ (8003cc0 <shellInit+0x2bc>)
 8003a66:	4897      	ldr	r0, [pc, #604]	@ (8003cc4 <shellInit+0x2c0>)
 8003a68:	f000 fb28 	bl	80040bc <shellAdd>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	71fb      	strb	r3, [r7, #7]
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <shellInit+0x80>
        "comment", "", "", 1, comment)))
    {
        LOGERROR(eError);
 8003a76:	79f8      	ldrb	r0, [r7, #7]
 8003a78:	4b8e      	ldr	r3, [pc, #568]	@ (8003cb4 <shellInit+0x2b0>)
 8003a7a:	f240 22cb 	movw	r2, #715	@ 0x2cb
 8003a7e:	498e      	ldr	r1, [pc, #568]	@ (8003cb8 <shellInit+0x2b4>)
 8003a80:	f7fd fe78 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("clear",
 8003a84:	4b90      	ldr	r3, [pc, #576]	@ (8003cc8 <shellInit+0x2c4>)
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4b86      	ldr	r3, [pc, #536]	@ (8003ca8 <shellInit+0x2a4>)
 8003a8e:	4a86      	ldr	r2, [pc, #536]	@ (8003ca8 <shellInit+0x2a4>)
 8003a90:	498e      	ldr	r1, [pc, #568]	@ (8003ccc <shellInit+0x2c8>)
 8003a92:	488f      	ldr	r0, [pc, #572]	@ (8003cd0 <shellInit+0x2cc>)
 8003a94:	f000 fb12 	bl	80040bc <shellAdd>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <shellInit+0xac>
		"clear the terminal screen", "", "", 1, clear)))
    {
    	LOGERROR(eError);
 8003aa2:	79f8      	ldrb	r0, [r7, #7]
 8003aa4:	4b83      	ldr	r3, [pc, #524]	@ (8003cb4 <shellInit+0x2b0>)
 8003aa6:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8003aaa:	4983      	ldr	r1, [pc, #524]	@ (8003cb8 <shellInit+0x2b4>)
 8003aac:	f7fd fe62 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("delay",
 8003ab0:	4b88      	ldr	r3, [pc, #544]	@ (8003cd4 <shellInit+0x2d0>)
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4b87      	ldr	r3, [pc, #540]	@ (8003cd8 <shellInit+0x2d4>)
 8003aba:	4a88      	ldr	r2, [pc, #544]	@ (8003cdc <shellInit+0x2d8>)
 8003abc:	4988      	ldr	r1, [pc, #544]	@ (8003ce0 <shellInit+0x2dc>)
 8003abe:	4889      	ldr	r0, [pc, #548]	@ (8003ce4 <shellInit+0x2e0>)
 8003ac0:	f000 fafc 	bl	80040bc <shellAdd>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	71fb      	strb	r3, [r7, #7]
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <shellInit+0xd8>
        "delay for a period of time", "<milliseconds>",
        "milliseconds=<0..n>",
        2, delay)))
    {
        LOGERROR(eError);
 8003ace:	79f8      	ldrb	r0, [r7, #7]
 8003ad0:	4b78      	ldr	r3, [pc, #480]	@ (8003cb4 <shellInit+0x2b0>)
 8003ad2:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8003ad6:	4978      	ldr	r1, [pc, #480]	@ (8003cb8 <shellInit+0x2b4>)
 8003ad8:	f7fd fe4c 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("error",
 8003adc:	4b82      	ldr	r3, [pc, #520]	@ (8003ce8 <shellInit+0x2e4>)
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4b70      	ldr	r3, [pc, #448]	@ (8003ca8 <shellInit+0x2a4>)
 8003ae6:	4a70      	ldr	r2, [pc, #448]	@ (8003ca8 <shellInit+0x2a4>)
 8003ae8:	4980      	ldr	r1, [pc, #512]	@ (8003cec <shellInit+0x2e8>)
 8003aea:	4881      	ldr	r0, [pc, #516]	@ (8003cf0 <shellInit+0x2ec>)
 8003aec:	f000 fae6 	bl	80040bc <shellAdd>
 8003af0:	4603      	mov	r3, r0
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <shellInit+0x104>
		"print error history", "", "", 1, error)))
    {
    	LOGERROR(eError);
 8003afa:	79f8      	ldrb	r0, [r7, #7]
 8003afc:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb4 <shellInit+0x2b0>)
 8003afe:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8003b02:	496d      	ldr	r1, [pc, #436]	@ (8003cb8 <shellInit+0x2b4>)
 8003b04:	f7fd fe36 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("help",
 8003b08:	4b7a      	ldr	r3, [pc, #488]	@ (8003cf4 <shellInit+0x2f0>)
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4b79      	ldr	r3, [pc, #484]	@ (8003cf8 <shellInit+0x2f4>)
 8003b12:	4a7a      	ldr	r2, [pc, #488]	@ (8003cfc <shellInit+0x2f8>)
 8003b14:	497a      	ldr	r1, [pc, #488]	@ (8003d00 <shellInit+0x2fc>)
 8003b16:	487b      	ldr	r0, [pc, #492]	@ (8003d04 <shellInit+0x300>)
 8003b18:	f000 fad0 	bl	80040bc <shellAdd>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <shellInit+0x130>
		"print help information", "[cmd]",
		"cmd=<any supported command>", 1, help)))
    {
    	LOGERROR(eError);
 8003b26:	79f8      	ldrb	r0, [r7, #7]
 8003b28:	4b62      	ldr	r3, [pc, #392]	@ (8003cb4 <shellInit+0x2b0>)
 8003b2a:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8003b2e:	4962      	ldr	r1, [pc, #392]	@ (8003cb8 <shellInit+0x2b4>)
 8003b30:	f7fd fe20 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("ir",
 8003b34:	4b74      	ldr	r3, [pc, #464]	@ (8003d08 <shellInit+0x304>)
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	2302      	movs	r3, #2
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4b73      	ldr	r3, [pc, #460]	@ (8003d0c <shellInit+0x308>)
 8003b3e:	4a74      	ldr	r2, [pc, #464]	@ (8003d10 <shellInit+0x30c>)
 8003b40:	4974      	ldr	r1, [pc, #464]	@ (8003d14 <shellInit+0x310>)
 8003b42:	4875      	ldr	r0, [pc, #468]	@ (8003d18 <shellInit+0x314>)
 8003b44:	f000 faba 	bl	80040bc <shellAdd>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	71fb      	strb	r3, [r7, #7]
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <shellInit+0x15c>
        "i2c read", "<address> <length>",
        "address=<7-bit>, length=<1-n>", 2, i2cRead)))
    {
        LOGERROR(eError);
 8003b52:	79f8      	ldrb	r0, [r7, #7]
 8003b54:	4b57      	ldr	r3, [pc, #348]	@ (8003cb4 <shellInit+0x2b0>)
 8003b56:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8003b5a:	4957      	ldr	r1, [pc, #348]	@ (8003cb8 <shellInit+0x2b4>)
 8003b5c:	f7fd fe0a 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("iw",
 8003b60:	4b6e      	ldr	r3, [pc, #440]	@ (8003d1c <shellInit+0x318>)
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	2302      	movs	r3, #2
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	4b6d      	ldr	r3, [pc, #436]	@ (8003d20 <shellInit+0x31c>)
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d24 <shellInit+0x320>)
 8003b6c:	496e      	ldr	r1, [pc, #440]	@ (8003d28 <shellInit+0x324>)
 8003b6e:	486f      	ldr	r0, [pc, #444]	@ (8003d2c <shellInit+0x328>)
 8003b70:	f000 faa4 	bl	80040bc <shellAdd>
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <shellInit+0x188>
        "i2c write", "<address> <data>",
        "address=<7-bit>, data=<...>", 2, i2cWrite)))
    {
        LOGERROR(eError);
 8003b7e:	79f8      	ldrb	r0, [r7, #7]
 8003b80:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb4 <shellInit+0x2b0>)
 8003b82:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003b86:	494c      	ldr	r1, [pc, #304]	@ (8003cb8 <shellInit+0x2b4>)
 8003b88:	f7fd fdf4 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("mon",
 8003b8c:	4b68      	ldr	r3, [pc, #416]	@ (8003d30 <shellInit+0x32c>)
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	2303      	movs	r3, #3
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4b67      	ldr	r3, [pc, #412]	@ (8003d34 <shellInit+0x330>)
 8003b96:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <shellInit+0x334>)
 8003b98:	4968      	ldr	r1, [pc, #416]	@ (8003d3c <shellInit+0x338>)
 8003b9a:	4869      	ldr	r0, [pc, #420]	@ (8003d40 <shellInit+0x33c>)
 8003b9c:	f000 fa8e 	bl	80040bc <shellAdd>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	71fb      	strb	r3, [r7, #7]
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <shellInit+0x1b4>
		"monitor command", "<milliseconds> <cmd>",
		"milliseconds=<0..n>, cmd=<any supported command>",
		3, monitor)))
    {
    	LOGERROR(eError);
 8003baa:	79f8      	ldrb	r0, [r7, #7]
 8003bac:	4b41      	ldr	r3, [pc, #260]	@ (8003cb4 <shellInit+0x2b0>)
 8003bae:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8003bb2:	4941      	ldr	r1, [pc, #260]	@ (8003cb8 <shellInit+0x2b4>)
 8003bb4:	f7fd fdde 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("mr",
 8003bb8:	4b62      	ldr	r3, [pc, #392]	@ (8003d44 <shellInit+0x340>)
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4b61      	ldr	r3, [pc, #388]	@ (8003d48 <shellInit+0x344>)
 8003bc2:	4a62      	ldr	r2, [pc, #392]	@ (8003d4c <shellInit+0x348>)
 8003bc4:	4962      	ldr	r1, [pc, #392]	@ (8003d50 <shellInit+0x34c>)
 8003bc6:	4863      	ldr	r0, [pc, #396]	@ (8003d54 <shellInit+0x350>)
 8003bc8:	f000 fa78 	bl	80040bc <shellAdd>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <shellInit+0x1e0>
		"memory read", "<address> [length] [b|h|w]",
		"address=<hex>, length=<dec>, b=byte, h=halfword, w=word",
		2, memRead)))
    {
    	LOGERROR(eError);
 8003bd6:	79f8      	ldrb	r0, [r7, #7]
 8003bd8:	4b36      	ldr	r3, [pc, #216]	@ (8003cb4 <shellInit+0x2b0>)
 8003bda:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8003bde:	4936      	ldr	r1, [pc, #216]	@ (8003cb8 <shellInit+0x2b4>)
 8003be0:	f7fd fdc8 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("mw",
 8003be4:	4b5c      	ldr	r3, [pc, #368]	@ (8003d58 <shellInit+0x354>)
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2303      	movs	r3, #3
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4b5b      	ldr	r3, [pc, #364]	@ (8003d5c <shellInit+0x358>)
 8003bee:	4a5c      	ldr	r2, [pc, #368]	@ (8003d60 <shellInit+0x35c>)
 8003bf0:	495c      	ldr	r1, [pc, #368]	@ (8003d64 <shellInit+0x360>)
 8003bf2:	485d      	ldr	r0, [pc, #372]	@ (8003d68 <shellInit+0x364>)
 8003bf4:	f000 fa62 	bl	80040bc <shellAdd>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <shellInit+0x20c>
		"memory write", "<address> <value> [length] [b|h|w]",
		"address=<hex>, value=<hex>, length=<dec>, b=byte, h=half, w=word",
		3, memWrite)))
    {
    	LOGERROR(eError);
 8003c02:	79f8      	ldrb	r0, [r7, #7]
 8003c04:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <shellInit+0x2b0>)
 8003c06:	f240 3203 	movw	r2, #771	@ 0x303
 8003c0a:	492b      	ldr	r1, [pc, #172]	@ (8003cb8 <shellInit+0x2b4>)
 8003c0c:	f7fd fdb2 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("perf",
 8003c10:	4b56      	ldr	r3, [pc, #344]	@ (8003d6c <shellInit+0x368>)
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2301      	movs	r3, #1
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <shellInit+0x2a4>)
 8003c1a:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <shellInit+0x2a4>)
 8003c1c:	4954      	ldr	r1, [pc, #336]	@ (8003d70 <shellInit+0x36c>)
 8003c1e:	4855      	ldr	r0, [pc, #340]	@ (8003d74 <shellInit+0x370>)
 8003c20:	f000 fa4c 	bl	80040bc <shellAdd>
 8003c24:	4603      	mov	r3, r0
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <shellInit+0x238>
        "performance statistics", "", "",
        1, perf)))
    {
        LOGERROR(eError);
 8003c2e:	79f8      	ldrb	r0, [r7, #7]
 8003c30:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <shellInit+0x2b0>)
 8003c32:	f240 3209 	movw	r2, #777	@ 0x309
 8003c36:	4920      	ldr	r1, [pc, #128]	@ (8003cb8 <shellInit+0x2b4>)
 8003c38:	f7fd fd9c 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("reboot",
 8003c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003d78 <shellInit+0x374>)
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	2301      	movs	r3, #1
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <shellInit+0x2a4>)
 8003c46:	4a18      	ldr	r2, [pc, #96]	@ (8003ca8 <shellInit+0x2a4>)
 8003c48:	494c      	ldr	r1, [pc, #304]	@ (8003d7c <shellInit+0x378>)
 8003c4a:	484d      	ldr	r0, [pc, #308]	@ (8003d80 <shellInit+0x37c>)
 8003c4c:	f000 fa36 	bl	80040bc <shellAdd>
 8003c50:	4603      	mov	r3, r0
 8003c52:	71fb      	strb	r3, [r7, #7]
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <shellInit+0x264>
        "reboot firmware", "", "",
        1, reboot)))
    {
        LOGERROR(eError);
 8003c5a:	79f8      	ldrb	r0, [r7, #7]
 8003c5c:	4b15      	ldr	r3, [pc, #84]	@ (8003cb4 <shellInit+0x2b0>)
 8003c5e:	f240 320f 	movw	r2, #783	@ 0x30f
 8003c62:	4915      	ldr	r1, [pc, #84]	@ (8003cb8 <shellInit+0x2b4>)
 8003c64:	f7fd fd86 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("rep",
 8003c68:	4b46      	ldr	r3, [pc, #280]	@ (8003d84 <shellInit+0x380>)
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4b45      	ldr	r3, [pc, #276]	@ (8003d88 <shellInit+0x384>)
 8003c72:	4a46      	ldr	r2, [pc, #280]	@ (8003d8c <shellInit+0x388>)
 8003c74:	4946      	ldr	r1, [pc, #280]	@ (8003d90 <shellInit+0x38c>)
 8003c76:	4847      	ldr	r0, [pc, #284]	@ (8003d94 <shellInit+0x390>)
 8003c78:	f000 fa20 	bl	80040bc <shellAdd>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	71fb      	strb	r3, [r7, #7]
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8088 	beq.w	8003d98 <shellInit+0x394>
		"repeat command", "<count> <milliseconds> <cmd>",
		"count=<1..n>, milliseconds=<0..n>, cmd=<any supported command>",
		4, repeat)))
    {
    	LOGERROR(eError);
 8003c88:	79f8      	ldrb	r0, [r7, #7]
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <shellInit+0x2b0>)
 8003c8c:	f240 3216 	movw	r2, #790	@ 0x316
 8003c90:	4909      	ldr	r1, [pc, #36]	@ (8003cb8 <shellInit+0x2b4>)
 8003c92:	f7fd fd6f 	bl	8001774 <logError>
 8003c96:	e07f      	b.n	8003d98 <shellInit+0x394>
 8003c98:	20002380 	.word	0x20002380
 8003c9c:	20002424 	.word	0x20002424
 8003ca0:	20002944 	.word	0x20002944
 8003ca4:	080030d1 	.word	0x080030d1
 8003ca8:	08018324 	.word	0x08018324
 8003cac:	08018328 	.word	0x08018328
 8003cb0:	08018338 	.word	0x08018338
 8003cb4:	08018934 	.word	0x08018934
 8003cb8:	08018340 	.word	0x08018340
 8003cbc:	080030fd 	.word	0x080030fd
 8003cc0:	08018354 	.word	0x08018354
 8003cc4:	0801835c 	.word	0x0801835c
 8003cc8:	080030b1 	.word	0x080030b1
 8003ccc:	08018360 	.word	0x08018360
 8003cd0:	0801837c 	.word	0x0801837c
 8003cd4:	08003115 	.word	0x08003115
 8003cd8:	08018384 	.word	0x08018384
 8003cdc:	08018398 	.word	0x08018398
 8003ce0:	080183a8 	.word	0x080183a8
 8003ce4:	080183c4 	.word	0x080183c4
 8003ce8:	08003155 	.word	0x08003155
 8003cec:	080183cc 	.word	0x080183cc
 8003cf0:	080183e0 	.word	0x080183e0
 8003cf4:	08003195 	.word	0x08003195
 8003cf8:	080183e8 	.word	0x080183e8
 8003cfc:	08018404 	.word	0x08018404
 8003d00:	0801840c 	.word	0x0801840c
 8003d04:	08018424 	.word	0x08018424
 8003d08:	08003291 	.word	0x08003291
 8003d0c:	0801842c 	.word	0x0801842c
 8003d10:	0801844c 	.word	0x0801844c
 8003d14:	08018460 	.word	0x08018460
 8003d18:	0801846c 	.word	0x0801846c
 8003d1c:	08003329 	.word	0x08003329
 8003d20:	08018470 	.word	0x08018470
 8003d24:	0801848c 	.word	0x0801848c
 8003d28:	080184a0 	.word	0x080184a0
 8003d2c:	080184ac 	.word	0x080184ac
 8003d30:	080033b1 	.word	0x080033b1
 8003d34:	080184b0 	.word	0x080184b0
 8003d38:	080184e4 	.word	0x080184e4
 8003d3c:	080184fc 	.word	0x080184fc
 8003d40:	0801850c 	.word	0x0801850c
 8003d44:	08003495 	.word	0x08003495
 8003d48:	08018510 	.word	0x08018510
 8003d4c:	08018548 	.word	0x08018548
 8003d50:	08018564 	.word	0x08018564
 8003d54:	08018570 	.word	0x08018570
 8003d58:	080036f5 	.word	0x080036f5
 8003d5c:	08018574 	.word	0x08018574
 8003d60:	080185b8 	.word	0x080185b8
 8003d64:	080185dc 	.word	0x080185dc
 8003d68:	080185ec 	.word	0x080185ec
 8003d6c:	08003891 	.word	0x08003891
 8003d70:	080185f0 	.word	0x080185f0
 8003d74:	08018608 	.word	0x08018608
 8003d78:	080039ad 	.word	0x080039ad
 8003d7c:	08018610 	.word	0x08018610
 8003d80:	08018620 	.word	0x08018620
 8003d84:	080038ad 	.word	0x080038ad
 8003d88:	08018628 	.word	0x08018628
 8003d8c:	08018668 	.word	0x08018668
 8003d90:	08018688 	.word	0x08018688
 8003d94:	08018698 	.word	0x08018698
    }
    if (eErrorNone != (eError = shellAdd("xtime",
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <shellInit+0x3f8>)
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <shellInit+0x3fc>)
 8003da2:	4a18      	ldr	r2, [pc, #96]	@ (8003e04 <shellInit+0x400>)
 8003da4:	4918      	ldr	r1, [pc, #96]	@ (8003e08 <shellInit+0x404>)
 8003da6:	4819      	ldr	r0, [pc, #100]	@ (8003e0c <shellInit+0x408>)
 8003da8:	f000 f988 	bl	80040bc <shellAdd>
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <shellInit+0x3c0>
		"measure execution time", "<cmd>",
		"cmd=<any supported command>",
		2, xtime)))
    {
    	LOGERROR(eError);
 8003db6:	79f8      	ldrb	r0, [r7, #7]
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <shellInit+0x40c>)
 8003dba:	f240 321d 	movw	r2, #797	@ 0x31d
 8003dbe:	4915      	ldr	r1, [pc, #84]	@ (8003e14 <shellInit+0x410>)
 8003dc0:	f7fd fcd8 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("up",
 8003dc4:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <shellInit+0x414>)
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	4b13      	ldr	r3, [pc, #76]	@ (8003e1c <shellInit+0x418>)
 8003dce:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <shellInit+0x418>)
 8003dd0:	4913      	ldr	r1, [pc, #76]	@ (8003e20 <shellInit+0x41c>)
 8003dd2:	4814      	ldr	r0, [pc, #80]	@ (8003e24 <shellInit+0x420>)
 8003dd4:	f000 f972 	bl	80040bc <shellAdd>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <shellInit+0x3ec>
		"print time since boot", "", "",
		1, uptime)))
    {
    	LOGERROR(eError);
 8003de2:	79f8      	ldrb	r0, [r7, #7]
 8003de4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <shellInit+0x40c>)
 8003de6:	f240 3223 	movw	r2, #803	@ 0x323
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <shellInit+0x410>)
 8003dec:	f7fd fcc2 	bl	8001774 <logError>
    }

	return eErrorNone;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	080037c9 	.word	0x080037c9
 8003e00:	080183e8 	.word	0x080183e8
 8003e04:	0801869c 	.word	0x0801869c
 8003e08:	080186a4 	.word	0x080186a4
 8003e0c:	080186bc 	.word	0x080186bc
 8003e10:	08018934 	.word	0x08018934
 8003e14:	08018340 	.word	0x08018340
 8003e18:	080039c5 	.word	0x080039c5
 8003e1c:	08018324 	.word	0x08018324
 8003e20:	080186c4 	.word	0x080186c4
 8003e24:	080186dc 	.word	0x080186dc

08003e28 <shellService>:
// @brief Service shell activity.
//
// @return enumerated error code
//
teError shellService(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
	char        ch;
	static uint history = 0;
	teError     eError;

	// Check state.
	if (!gShellEnable)
 8003e2e:	4b97      	ldr	r3, [pc, #604]	@ (800408c <shellService+0x264>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f083 0301 	eor.w	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <shellService+0x18>
	{
		return eErrorNone;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e121      	b.n	8004084 <shellService+0x25c>
	}

	// Check prompt.
	if (!grLine.prompt)
 8003e40:	4b93      	ldr	r3, [pc, #588]	@ (8004090 <shellService+0x268>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <shellService+0x34>
	{
		// Print prompt.
		bspPrintf("\r\n\n%s ", SHELL_PROMPT);
 8003e4e:	4991      	ldr	r1, [pc, #580]	@ (8004094 <shellService+0x26c>)
 8003e50:	4891      	ldr	r0, [pc, #580]	@ (8004098 <shellService+0x270>)
 8003e52:	f7fd fa4f 	bl	80012f4 <bspPrintf>

		// Set state.
		grLine.prompt = true;
 8003e56:	4b8e      	ldr	r3, [pc, #568]	@ (8004090 <shellService+0x268>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
	}

	// Try to read character.
	if (bspConsoleRead(&ch))
 8003e5c:	1dbb      	adds	r3, r7, #6
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd f8f2 	bl	8001048 <bspConsoleRead>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 810b 	beq.w	8004082 <shellService+0x25a>
	{
		// Process character.
		switch (ch)
 8003e6c:	79bb      	ldrb	r3, [r7, #6]
 8003e6e:	3b08      	subs	r3, #8
 8003e70:	2b13      	cmp	r3, #19
 8003e72:	f200 80e6 	bhi.w	8004042 <shellService+0x21a>
 8003e76:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <shellService+0x54>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003ecd 	.word	0x08003ecd
 8003e80:	08004043 	.word	0x08004043
 8003e84:	08003ef9 	.word	0x08003ef9
 8003e88:	08004043 	.word	0x08004043
 8003e8c:	08004043 	.word	0x08004043
 8003e90:	08003ef9 	.word	0x08003ef9
 8003e94:	08004043 	.word	0x08004043
 8003e98:	08004043 	.word	0x08004043
 8003e9c:	08004043 	.word	0x08004043
 8003ea0:	08004043 	.word	0x08004043
 8003ea4:	08004043 	.word	0x08004043
 8003ea8:	08004043 	.word	0x08004043
 8003eac:	08004043 	.word	0x08004043
 8003eb0:	08004043 	.word	0x08004043
 8003eb4:	08004043 	.word	0x08004043
 8003eb8:	08004043 	.word	0x08004043
 8003ebc:	08004043 	.word	0x08004043
 8003ec0:	08004043 	.word	0x08004043
 8003ec4:	08004043 	.word	0x08004043
 8003ec8:	08003f57 	.word	0x08003f57
		{
			case '\b':

				// Check character count.
				if (grLine.position > 0)
 8003ecc:	4b70      	ldr	r3, [pc, #448]	@ (8004090 <shellService+0x268>)
 8003ece:	885b      	ldrh	r3, [r3, #2]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80d3 	beq.w	800407c <shellService+0x254>
				{
					// Echo backspace sequence.
					bspPrintf("\b \b");
 8003ed6:	4871      	ldr	r0, [pc, #452]	@ (800409c <shellService+0x274>)
 8003ed8:	f7fd fa0c 	bl	80012f4 <bspPrintf>

					// Delete character.
					grLine.buffer[--grLine.position] = 0;
 8003edc:	4b6c      	ldr	r3, [pc, #432]	@ (8004090 <shellService+0x268>)
 8003ede:	885b      	ldrh	r3, [r3, #2]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8004090 <shellService+0x268>)
 8003ee6:	805a      	strh	r2, [r3, #2]
 8003ee8:	4b69      	ldr	r3, [pc, #420]	@ (8004090 <shellService+0x268>)
 8003eea:	885b      	ldrh	r3, [r3, #2]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b68      	ldr	r3, [pc, #416]	@ (8004090 <shellService+0x268>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	711a      	strb	r2, [r3, #4]
				}
				break;
 8003ef6:	e0c1      	b.n	800407c <shellService+0x254>

			case '\r':
			case '\n':

				// Print newline.
		        putchar(ch);
 8003ef8:	79bb      	ldrb	r3, [r7, #6]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f011 fbda 	bl	80156b4 <putchar>

		        // Preserve command in circular history buffer.
		        memcpy(&grLineHistory[history], &grLine, sizeof(grLineHistory[history]));
 8003f00:	4b67      	ldr	r3, [pc, #412]	@ (80040a0 <shellService+0x278>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	22a4      	movs	r2, #164	@ 0xa4
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <shellService+0x27c>)
 8003f0c:	4413      	add	r3, r2
 8003f0e:	22a4      	movs	r2, #164	@ 0xa4
 8003f10:	495f      	ldr	r1, [pc, #380]	@ (8004090 <shellService+0x268>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	f011 ff3b 	bl	8015d8e <memcpy>
		        history = (history + 1)%DIM(grLineHistory);
 8003f18:	4b61      	ldr	r3, [pc, #388]	@ (80040a0 <shellService+0x278>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	4a5f      	ldr	r2, [pc, #380]	@ (80040a0 <shellService+0x278>)
 8003f24:	6013      	str	r3, [r2, #0]

		        // Process command.
		        if (eErrorNone != (eError = command(grLine.buffer)))
 8003f26:	4860      	ldr	r0, [pc, #384]	@ (80040a8 <shellService+0x280>)
 8003f28:	f7ff f842 	bl	8002fb0 <command>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <shellService+0x120>
		        {
		            bspPrintf("\r\nmalformed or failed command (%s)",
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd fa67 	bl	800140c <errorString>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4619      	mov	r1, r3
 8003f42:	485a      	ldr	r0, [pc, #360]	@ (80040ac <shellService+0x284>)
 8003f44:	f7fd f9d6 	bl	80012f4 <bspPrintf>
						errorString(eError));
		        }

				// Clear line buffer.
				memset(&grLine, 0, sizeof(grLine));
 8003f48:	22a4      	movs	r2, #164	@ 0xa4
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4850      	ldr	r0, [pc, #320]	@ (8004090 <shellService+0x268>)
 8003f4e:	f011 fe0f 	bl	8015b70 <memset>

				return eErrorNone;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e096      	b.n	8004084 <shellService+0x25c>

			case '\e':

		        // Read character.
		        bspConsoleRead(&ch);
 8003f56:	1dbb      	adds	r3, r7, #6
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fd f875 	bl	8001048 <bspConsoleRead>

		        // Process character.
		        switch (ch)
 8003f5e:	79bb      	ldrb	r3, [r7, #6]
 8003f60:	2b5b      	cmp	r3, #91	@ 0x5b
 8003f62:	d16c      	bne.n	800403e <shellService+0x216>
		        {
		            case '[':

		                // Read character.
		                bspConsoleRead(&ch);
 8003f64:	1dbb      	adds	r3, r7, #6
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd f86e 	bl	8001048 <bspConsoleRead>

		                // Process character.
		                switch (ch)
 8003f6c:	79bb      	ldrb	r3, [r7, #6]
 8003f6e:	3b41      	subs	r3, #65	@ 0x41
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d85f      	bhi.n	8004034 <shellService+0x20c>
 8003f74:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <shellService+0x154>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08004035 	.word	0x08004035
 8003f88:	08004035 	.word	0x08004035
		                {
		                    // Up arrow.
		                    case 'A':
		                        history = (history - 1 + DIM(grLineHistory))%DIM(grLineHistory);
 8003f8c:	4b44      	ldr	r3, [pc, #272]	@ (80040a0 <shellService+0x278>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3307      	adds	r3, #7
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	4a42      	ldr	r2, [pc, #264]	@ (80040a0 <shellService+0x278>)
 8003f98:	6013      	str	r3, [r2, #0]
		                        if (strlen(grLineHistory[history].buffer) > 0)
 8003f9a:	4b41      	ldr	r3, [pc, #260]	@ (80040a0 <shellService+0x278>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	22a4      	movs	r2, #164	@ 0xa4
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80040a4 <shellService+0x27c>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3304      	adds	r3, #4
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d043      	beq.n	8004038 <shellService+0x210>
		                        {
                                    memcpy(&grLine, &grLineHistory[history], sizeof(grLine));
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80040a0 <shellService+0x278>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	22a4      	movs	r2, #164	@ 0xa4
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	4a3a      	ldr	r2, [pc, #232]	@ (80040a4 <shellService+0x27c>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	22a4      	movs	r2, #164	@ 0xa4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4833      	ldr	r0, [pc, #204]	@ (8004090 <shellService+0x268>)
 8003fc4:	f011 fee3 	bl	8015d8e <memcpy>
                                    grLine.prompt = true;
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <shellService+0x268>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
                                    bspPrintf(VT100_CLEAR_LINE);
 8003fce:	4838      	ldr	r0, [pc, #224]	@ (80040b0 <shellService+0x288>)
 8003fd0:	f7fd f990 	bl	80012f4 <bspPrintf>
                                    bspPrintf("\r%s %s", SHELL_PROMPT, grLine.buffer);
 8003fd4:	4a34      	ldr	r2, [pc, #208]	@ (80040a8 <shellService+0x280>)
 8003fd6:	492f      	ldr	r1, [pc, #188]	@ (8004094 <shellService+0x26c>)
 8003fd8:	4836      	ldr	r0, [pc, #216]	@ (80040b4 <shellService+0x28c>)
 8003fda:	f7fd f98b 	bl	80012f4 <bspPrintf>
		                        }
		                        break;
 8003fde:	e02b      	b.n	8004038 <shellService+0x210>

                            // Down arrow.
		                    case 'B':
		                        history = (history + 1)%DIM(grLineHistory);
 8003fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80040a0 <shellService+0x278>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <shellService+0x278>)
 8003fec:	6013      	str	r3, [r2, #0]
                                if (strlen(grLineHistory[history].buffer) > 0)
 8003fee:	4b2c      	ldr	r3, [pc, #176]	@ (80040a0 <shellService+0x278>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	22a4      	movs	r2, #164	@ 0xa4
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80040a4 <shellService+0x27c>)
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <shellService+0x214>
                                {
                                    memcpy(&grLine, &grLineHistory[history], sizeof(grLine));
 8004004:	4b26      	ldr	r3, [pc, #152]	@ (80040a0 <shellService+0x278>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	22a4      	movs	r2, #164	@ 0xa4
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	4a25      	ldr	r2, [pc, #148]	@ (80040a4 <shellService+0x27c>)
 8004010:	4413      	add	r3, r2
 8004012:	22a4      	movs	r2, #164	@ 0xa4
 8004014:	4619      	mov	r1, r3
 8004016:	481e      	ldr	r0, [pc, #120]	@ (8004090 <shellService+0x268>)
 8004018:	f011 feb9 	bl	8015d8e <memcpy>
                                    grLine.prompt = true;
 800401c:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <shellService+0x268>)
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
                                    bspPrintf(VT100_CLEAR_LINE);
 8004022:	4823      	ldr	r0, [pc, #140]	@ (80040b0 <shellService+0x288>)
 8004024:	f7fd f966 	bl	80012f4 <bspPrintf>
                                    bspPrintf("\r%s %s", SHELL_PROMPT, grLine.buffer);
 8004028:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <shellService+0x280>)
 800402a:	491a      	ldr	r1, [pc, #104]	@ (8004094 <shellService+0x26c>)
 800402c:	4821      	ldr	r0, [pc, #132]	@ (80040b4 <shellService+0x28c>)
 800402e:	f7fd f961 	bl	80012f4 <bspPrintf>
                                }
                                break;
 8004032:	e003      	b.n	800403c <shellService+0x214>
                            // Left arrow.
                            case 'D':
                                break;

		                    default:
		                        break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <shellService+0x216>
		                        break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <shellService+0x216>
                                break;
 800403c:	bf00      	nop
		                }

		            default:
		                break;
 800403e:	bf00      	nop

		        }
			    break;
 8004040:	e01f      	b.n	8004082 <shellService+0x25a>

			default:

				// Check for printable character and acceptable length
				if (isprint(ch) && (grLine.position < sizeof(grLine.buffer)))
 8004042:	79bb      	ldrb	r3, [r7, #6]
 8004044:	3301      	adds	r3, #1
 8004046:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <shellService+0x290>)
 8004048:	4413      	add	r3, r2
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <shellService+0x258>
 8004054:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <shellService+0x268>)
 8004056:	885b      	ldrh	r3, [r3, #2]
 8004058:	2b9f      	cmp	r3, #159	@ 0x9f
 800405a:	d811      	bhi.n	8004080 <shellService+0x258>
				{
					// Echo character.
					putchar(ch);
 800405c:	79bb      	ldrb	r3, [r7, #6]
 800405e:	4618      	mov	r0, r3
 8004060:	f011 fb28 	bl	80156b4 <putchar>

					// Add character to buffer.
					grLine.buffer[grLine.position++] = (char)ch;
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <shellService+0x268>)
 8004066:	885b      	ldrh	r3, [r3, #2]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	b291      	uxth	r1, r2
 800406c:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <shellService+0x268>)
 800406e:	8051      	strh	r1, [r2, #2]
 8004070:	4619      	mov	r1, r3
 8004072:	79ba      	ldrb	r2, [r7, #6]
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <shellService+0x268>)
 8004076:	440b      	add	r3, r1
 8004078:	711a      	strb	r2, [r3, #4]
				}
				break;
 800407a:	e001      	b.n	8004080 <shellService+0x258>
				break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <shellService+0x25a>
				break;
 8004080:	bf00      	nop
		}
	}

	return eErrorNone;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000180 	.word	0x20000180
 8004090:	20002380 	.word	0x20002380
 8004094:	080186e0 	.word	0x080186e0
 8004098:	080186e4 	.word	0x080186e4
 800409c:	080186ec 	.word	0x080186ec
 80040a0:	200043ac 	.word	0x200043ac
 80040a4:	20002424 	.word	0x20002424
 80040a8:	20002384 	.word	0x20002384
 80040ac:	080186f0 	.word	0x080186f0
 80040b0:	08018714 	.word	0x08018714
 80040b4:	0801871c 	.word	0x0801871c
 80040b8:	08018a88 	.word	0x08018a88

080040bc <shellAdd>:
// @return enumerated error code
//
teError shellAdd(const char *pName, const char *pDescription,
			     const char *pArguments, const char *pDetail,
				 uint8_t minArgs, tpCmd pCmd)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pName);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2d8      	uxtb	r0, r3
 80040d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004248 <shellAdd+0x18c>)
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	4b5c      	ldr	r3, [pc, #368]	@ (800424c <shellAdd+0x190>)
 80040dc:	f240 32cb 	movw	r2, #971	@ 0x3cb
 80040e0:	495b      	ldr	r1, [pc, #364]	@ (8004250 <shellAdd+0x194>)
 80040e2:	f7fd faa9 	bl	8001638 <logAssert>
	ASSERT(NULL != pArguments);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2d8      	uxtb	r0, r3
 80040f2:	4b58      	ldr	r3, [pc, #352]	@ (8004254 <shellAdd+0x198>)
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	4b55      	ldr	r3, [pc, #340]	@ (800424c <shellAdd+0x190>)
 80040f8:	f44f 7273 	mov.w	r2, #972	@ 0x3cc
 80040fc:	4954      	ldr	r1, [pc, #336]	@ (8004250 <shellAdd+0x194>)
 80040fe:	f7fd fa9b 	bl	8001638 <logAssert>
	ASSERT(NULL != pDescription);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2d8      	uxtb	r0, r3
 800410e:	4b52      	ldr	r3, [pc, #328]	@ (8004258 <shellAdd+0x19c>)
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4b4e      	ldr	r3, [pc, #312]	@ (800424c <shellAdd+0x190>)
 8004114:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8004118:	494d      	ldr	r1, [pc, #308]	@ (8004250 <shellAdd+0x194>)
 800411a:	f7fd fa8d 	bl	8001638 <logAssert>
	ASSERT(NULL != pDetail);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2d8      	uxtb	r0, r3
 800412a:	4b4c      	ldr	r3, [pc, #304]	@ (800425c <shellAdd+0x1a0>)
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	4b47      	ldr	r3, [pc, #284]	@ (800424c <shellAdd+0x190>)
 8004130:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8004134:	4946      	ldr	r1, [pc, #280]	@ (8004250 <shellAdd+0x194>)
 8004136:	f7fd fa7f 	bl	8001638 <logAssert>
	ASSERT(minArgs > 0);
 800413a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2d8      	uxtb	r0, r3
 8004148:	4b45      	ldr	r3, [pc, #276]	@ (8004260 <shellAdd+0x1a4>)
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <shellAdd+0x190>)
 800414e:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8004152:	493f      	ldr	r1, [pc, #252]	@ (8004250 <shellAdd+0x194>)
 8004154:	f7fd fa70 	bl	8001638 <logAssert>
	ASSERT(NULL != pCmd);
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf14      	ite	ne
 800415e:	2301      	movne	r3, #1
 8004160:	2300      	moveq	r3, #0
 8004162:	b2d8      	uxtb	r0, r3
 8004164:	4b3f      	ldr	r3, [pc, #252]	@ (8004264 <shellAdd+0x1a8>)
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4b38      	ldr	r3, [pc, #224]	@ (800424c <shellAdd+0x190>)
 800416a:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 800416e:	4938      	ldr	r1, [pc, #224]	@ (8004250 <shellAdd+0x194>)
 8004170:	f7fd fa62 	bl	8001638 <logAssert>

	// Iterate over command array.
	for (index = 0; index < DIM(grCmd); index++)
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e05e      	b.n	8004238 <shellAdd+0x17c>
	{
		// Check for non-allocated command.
		if (!grCmd[index].allocated)
 800417a:	4a3b      	ldr	r2, [pc, #236]	@ (8004268 <shellAdd+0x1ac>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	21a8      	movs	r1, #168	@ 0xa8
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f083 0301 	eor.w	r3, r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d04f      	beq.n	8004232 <shellAdd+0x176>
		{
			// Assign command.
			strncpy(grCmd[index].name, pName, sizeof(grCmd[index].name)-1);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	22a8      	movs	r2, #168	@ 0xa8
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <shellAdd+0x1ac>)
 800419c:	4413      	add	r3, r2
 800419e:	3301      	adds	r3, #1
 80041a0:	2207      	movs	r2, #7
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f011 fcfe 	bl	8015ba6 <strncpy>
			strncpy(grCmd[index].arguments, pArguments, sizeof(grCmd[index].arguments)-1);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	22a8      	movs	r2, #168	@ 0xa8
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	3308      	adds	r3, #8
 80041b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004268 <shellAdd+0x1ac>)
 80041b6:	4413      	add	r3, r2
 80041b8:	3301      	adds	r3, #1
 80041ba:	2227      	movs	r2, #39	@ 0x27
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f011 fcf1 	bl	8015ba6 <strncpy>
			strncpy(grCmd[index].description, pDescription, sizeof(grCmd[index].description)-1);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	22a8      	movs	r2, #168	@ 0xa8
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	3330      	adds	r3, #48	@ 0x30
 80041ce:	4a26      	ldr	r2, [pc, #152]	@ (8004268 <shellAdd+0x1ac>)
 80041d0:	4413      	add	r3, r2
 80041d2:	3301      	adds	r3, #1
 80041d4:	221b      	movs	r2, #27
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f011 fce4 	bl	8015ba6 <strncpy>
			strncpy(grCmd[index].detail, pDetail, sizeof(grCmd[index].detail)-1);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	22a8      	movs	r2, #168	@ 0xa8
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	3348      	adds	r3, #72	@ 0x48
 80041e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <shellAdd+0x1ac>)
 80041ea:	4413      	add	r3, r2
 80041ec:	3305      	adds	r3, #5
 80041ee:	224f      	movs	r2, #79	@ 0x4f
 80041f0:	6839      	ldr	r1, [r7, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f011 fcd7 	bl	8015ba6 <strncpy>
			grCmd[index].minArgs = minArgs;
 80041f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041fc:	491a      	ldr	r1, [pc, #104]	@ (8004268 <shellAdd+0x1ac>)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	20a8      	movs	r0, #168	@ 0xa8
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	440b      	add	r3, r1
 8004208:	33a0      	adds	r3, #160	@ 0xa0
 800420a:	601a      	str	r2, [r3, #0]
			grCmd[index].pCmd    = pCmd;
 800420c:	4a16      	ldr	r2, [pc, #88]	@ (8004268 <shellAdd+0x1ac>)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	21a8      	movs	r1, #168	@ 0xa8
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	33a4      	adds	r3, #164	@ 0xa4
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	601a      	str	r2, [r3, #0]

			// Mark as allocated.
			grCmd[index].allocated = true;
 800421e:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <shellAdd+0x1ac>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	21a8      	movs	r1, #168	@ 0xa8
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]

			return eErrorNone;
 800422e:	2300      	movs	r3, #0
 8004230:	e006      	b.n	8004240 <shellAdd+0x184>
	for (index = 0; index < DIM(grCmd); index++)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3301      	adds	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b27      	cmp	r3, #39	@ 0x27
 800423c:	d99d      	bls.n	800417a <shellAdd+0xbe>
		}
	}

	return eErrorOutOfResources;
 800423e:	2312      	movs	r3, #18
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	08018724 	.word	0x08018724
 800424c:	08018940 	.word	0x08018940
 8004250:	08018340 	.word	0x08018340
 8004254:	08018734 	.word	0x08018734
 8004258:	08018748 	.word	0x08018748
 800425c:	08018760 	.word	0x08018760
 8004260:	08018770 	.word	0x08018770
 8004264:	0801877c 	.word	0x0801877c
 8004268:	20002944 	.word	0x20002944

0800426c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_MspInit+0x30>)
 8004274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004278:	4a08      	ldr	r2, [pc, #32]	@ (800429c <HAL_MspInit+0x30>)
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004282:	4b06      	ldr	r3, [pc, #24]	@ (800429c <HAL_MspInit+0x30>)
 8004284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8004290:	f008 fac2 	bl	800c818 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	46020c00 	.word	0x46020c00

080042a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b0e0      	sub	sp, #384	@ 0x180
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80042aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80042ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042c0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80042c4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80042c8:	4618      	mov	r0, r3
 80042ca:	23e0      	movs	r3, #224	@ 0xe0
 80042cc:	461a      	mov	r2, r3
 80042ce:	2100      	movs	r1, #0
 80042d0:	f011 fc4e 	bl	8015b70 <memset>
  if(hadc->Instance==ADC1)
 80042d4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80042d8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9d      	ldr	r2, [pc, #628]	@ (8004558 <HAL_ADC_MspInit+0x2b8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f040 814a 	bne.w	800457c <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80042e8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80042ec:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80042f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80042fc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004300:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004304:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004308:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800430c:	f107 0320 	add.w	r3, r7, #32
 8004310:	4618      	mov	r0, r3
 8004312:	f009 fd3d 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800431c:	f7fe fa8c 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004320:	4b8e      	ldr	r3, [pc, #568]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004326:	4a8d      	ldr	r2, [pc, #564]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800432c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004330:	4b8a      	ldr	r3, [pc, #552]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004336:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800433a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800433e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004348:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800434c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800434e:	4b83      	ldr	r3, [pc, #524]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004354:	4a81      	ldr	r2, [pc, #516]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800435e:	4b7f      	ldr	r3, [pc, #508]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004364:	f003 0204 	and.w	r2, r3, #4
 8004368:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800436c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004376:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800437a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4b77      	ldr	r3, [pc, #476]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004382:	4a76      	ldr	r2, [pc, #472]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800438c:	4b73      	ldr	r3, [pc, #460]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004392:	f003 0201 	and.w	r2, r3, #1
 8004396:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800439a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80043a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043a8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043aa:	4b6c      	ldr	r3, [pc, #432]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b0:	4a6a      	ldr	r2, [pc, #424]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043ba:	4b68      	ldr	r3, [pc, #416]	@ (800455c <HAL_ADC_MspInit+0x2bc>)
 80043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043c0:	f003 0202 	and.w	r2, r3, #2
 80043c4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80043c8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80043d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043d6:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80043d8:	230f      	movs	r3, #15
 80043da:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043de:	2303      	movs	r3, #3
 80043e0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ea:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80043ee:	4619      	mov	r1, r3
 80043f0:	485b      	ldr	r0, [pc, #364]	@ (8004560 <HAL_ADC_MspInit+0x2c0>)
 80043f2:	f005 ffc7 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80043f6:	23ed      	movs	r3, #237	@ 0xed
 80043f8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043fc:	2303      	movs	r3, #3
 80043fe:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004408:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800440c:	4619      	mov	r1, r3
 800440e:	4855      	ldr	r0, [pc, #340]	@ (8004564 <HAL_ADC_MspInit+0x2c4>)
 8004410:	f005 ffb8 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8004414:	2303      	movs	r3, #3
 8004416:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800441a:	2303      	movs	r3, #3
 800441c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004426:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800442a:	4619      	mov	r1, r3
 800442c:	484e      	ldr	r0, [pc, #312]	@ (8004568 <HAL_ADC_MspInit+0x2c8>)
 800442e:	f005 ffa9 	bl	800a384 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8004432:	2321      	movs	r3, #33	@ 0x21
 8004434:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8004438:	2300      	movs	r3, #0
 800443a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004444:	2300      	movs	r3, #0
 8004446:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8004450:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004454:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8004458:	2301      	movs	r3, #1
 800445a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800445e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004462:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 800446c:	2301      	movs	r3, #1
 800446e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8004472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004476:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800448c:	2300      	movs	r3, #0
 800448e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8004492:	2300      	movs	r3, #0
 8004494:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8004498:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800449c:	4933      	ldr	r1, [pc, #204]	@ (800456c <HAL_ADC_MspInit+0x2cc>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f005 f884 	bl	80095ac <HAL_DMAEx_List_BuildNode>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 80044aa:	f7fe f9c5 	bl	8002838 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80044ae:	4a2f      	ldr	r2, [pc, #188]	@ (800456c <HAL_ADC_MspInit+0x2cc>)
 80044b0:	2100      	movs	r1, #0
 80044b2:	482f      	ldr	r0, [pc, #188]	@ (8004570 <HAL_ADC_MspInit+0x2d0>)
 80044b4:	f005 f8a6 	bl	8009604 <HAL_DMAEx_List_InsertNode>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 80044be:	f7fe f9bb 	bl	8002838 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80044c2:	482b      	ldr	r0, [pc, #172]	@ (8004570 <HAL_ADC_MspInit+0x2d0>)
 80044c4:	f005 f967 	bl	8009796 <HAL_DMAEx_List_SetCircularMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 80044ce:	f7fe f9b3 	bl	8002838 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80044d2:	4b28      	ldr	r3, [pc, #160]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044d4:	4a28      	ldr	r2, [pc, #160]	@ (8004578 <HAL_ADC_MspInit+0x2d8>)
 80044d6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80044d8:	4b26      	ldr	r3, [pc, #152]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044da:	2200      	movs	r2, #0
 80044dc:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80044de:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80044e4:	4b23      	ldr	r3, [pc, #140]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80044ea:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80044f0:	4b20      	ldr	r3, [pc, #128]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044f2:	2281      	movs	r2, #129	@ 0x81
 80044f4:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80044f6:	481f      	ldr	r0, [pc, #124]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 80044f8:	f004 fe98 	bl	800922c <HAL_DMAEx_List_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 8004502:	f7fe f999 	bl	8002838 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8004506:	491a      	ldr	r1, [pc, #104]	@ (8004570 <HAL_ADC_MspInit+0x2d0>)
 8004508:	481a      	ldr	r0, [pc, #104]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 800450a:	f005 f9a5 	bl	8009858 <HAL_DMAEx_List_LinkQ>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 8004514:	f7fe f990 	bl	8002838 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8004518:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800451c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a14      	ldr	r2, [pc, #80]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 8004524:	671a      	str	r2, [r3, #112]	@ 0x70
 8004526:	4a13      	ldr	r2, [pc, #76]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 8004528:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800452c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8004534:	2110      	movs	r1, #16
 8004536:	480f      	ldr	r0, [pc, #60]	@ (8004574 <HAL_ADC_MspInit+0x2d4>)
 8004538:	f004 fa86 	bl	8008a48 <HAL_DMA_ConfigChannelAttributes>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 8004542:	f7fe f979 	bl	8002838 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	2025      	movs	r0, #37	@ 0x25
 800454c:	f003 fdfb 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004550:	2025      	movs	r0, #37	@ 0x25
 8004552:	f003 fe12 	bl	800817a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8004556:	e0bf      	b.n	80046d8 <HAL_ADC_MspInit+0x438>
 8004558:	42028000 	.word	0x42028000
 800455c:	46020c00 	.word	0x46020c00
 8004560:	42020800 	.word	0x42020800
 8004564:	42020000 	.word	0x42020000
 8004568:	42020400 	.word	0x42020400
 800456c:	20001a44 	.word	0x20001a44
 8004570:	20001a68 	.word	0x20001a68
 8004574:	20001a80 	.word	0x20001a80
 8004578:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 800457c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004580:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a56      	ldr	r2, [pc, #344]	@ (80046e4 <HAL_ADC_MspInit+0x444>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f040 80a4 	bne.w	80046d8 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8004590:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004594:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8004598:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80045a4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80045a8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80045ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80045b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045b4:	f107 0320 	add.w	r3, r7, #32
 80045b8:	4618      	mov	r0, r3
 80045ba:	f009 fbe9 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 80045c4:	f7fe f938 	bl	8002838 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 80045c8:	4b47      	ldr	r3, [pc, #284]	@ (80046e8 <HAL_ADC_MspInit+0x448>)
 80045ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ce:	4a46      	ldr	r2, [pc, #280]	@ (80046e8 <HAL_ADC_MspInit+0x448>)
 80045d0:	f043 0320 	orr.w	r3, r3, #32
 80045d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045d8:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <HAL_ADC_MspInit+0x448>)
 80045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045de:	f003 0220 	and.w	r2, r3, #32
 80045e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80045e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80045f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80045f4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80045f6:	4b3c      	ldr	r3, [pc, #240]	@ (80046e8 <HAL_ADC_MspInit+0x448>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045fc:	4a3a      	ldr	r2, [pc, #232]	@ (80046e8 <HAL_ADC_MspInit+0x448>)
 80045fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004602:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004606:	4b38      	ldr	r3, [pc, #224]	@ (80046e8 <HAL_ADC_MspInit+0x448>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800460c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8004610:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004614:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800461e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004622:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8004624:	2303      	movs	r3, #3
 8004626:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800462a:	2303      	movs	r3, #3
 800462c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004636:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800463a:	4619      	mov	r1, r3
 800463c:	482b      	ldr	r0, [pc, #172]	@ (80046ec <HAL_ADC_MspInit+0x44c>)
 800463e:	f005 fea1 	bl	800a384 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8004642:	4b2b      	ldr	r3, [pc, #172]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004644:	4a2b      	ldr	r2, [pc, #172]	@ (80046f4 <HAL_ADC_MspInit+0x454>)
 8004646:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8004648:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 800464a:	2201      	movs	r2, #1
 800464c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800464e:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004654:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004656:	2200      	movs	r2, #0
 8004658:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800465a:	4b25      	ldr	r3, [pc, #148]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8004660:	4b23      	ldr	r3, [pc, #140]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004662:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004666:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8004668:	4b21      	ldr	r3, [pc, #132]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 800466a:	2201      	movs	r2, #1
 800466c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800466e:	4b20      	ldr	r3, [pc, #128]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004670:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004674:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8004676:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004678:	2200      	movs	r2, #0
 800467a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800467c:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 800467e:	2201      	movs	r2, #1
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8004682:	4b1b      	ldr	r3, [pc, #108]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004684:	2201      	movs	r2, #1
 8004686:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 800468a:	2200      	movs	r2, #0
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800468e:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8004694:	4b16      	ldr	r3, [pc, #88]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 8004696:	2200      	movs	r2, #0
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800469a:	4815      	ldr	r0, [pc, #84]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 800469c:	f003 fe34 	bl	8008308 <HAL_DMA_Init>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 80046a6:	f7fe f8c7 	bl	8002838 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80046aa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80046ae:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0e      	ldr	r2, [pc, #56]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 80046b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80046b8:	4a0d      	ldr	r2, [pc, #52]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 80046ba:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80046be:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80046c6:	2110      	movs	r1, #16
 80046c8:	4809      	ldr	r0, [pc, #36]	@ (80046f0 <HAL_ADC_MspInit+0x450>)
 80046ca:	f004 f9bd 	bl	8008a48 <HAL_DMA_ConfigChannelAttributes>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 80046d4:	f7fe f8b0 	bl	8002838 <Error_Handler>
}
 80046d8:	bf00      	nop
 80046da:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	46021000 	.word	0x46021000
 80046e8:	46020c00 	.word	0x46020c00
 80046ec:	42021800 	.word	0x42021800
 80046f0:	20001af8 	.word	0x20001af8
 80046f4:	40020150 	.word	0x40020150

080046f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0b      	ldr	r2, [pc, #44]	@ (8004734 <HAL_DMA2D_MspInit+0x3c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10e      	bne.n	8004728 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_DMA2D_MspInit+0x40>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <HAL_DMA2D_MspInit+0x40>)
 8004712:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004716:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800471a:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <HAL_DMA2D_MspInit+0x40>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	4002b000 	.word	0x4002b000
 8004738:	46020c00 	.word	0x46020c00

0800473c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	@ 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2a      	ldr	r2, [pc, #168]	@ (8004804 <HAL_XSPI_MspInit+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d14d      	bne.n	80047fa <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 800475e:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004764:	4a28      	ldr	r2, [pc, #160]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 8004766:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800476e:	4b26      	ldr	r3, [pc, #152]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800477c:	4b22      	ldr	r3, [pc, #136]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 800477e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004782:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800478c:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 800478e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800479a:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a0:	4a19      	ldr	r2, [pc, #100]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047aa:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <HAL_XSPI_MspInit+0xcc>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80047b8:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80047bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	2302      	movs	r3, #2
 80047c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c6:	2303      	movs	r3, #3
 80047c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80047ca:	2308      	movs	r3, #8
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	4619      	mov	r1, r3
 80047d4:	480d      	ldr	r0, [pc, #52]	@ (800480c <HAL_XSPI_MspInit+0xd0>)
 80047d6:	f005 fdd5 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80047da:	230f      	movs	r3, #15
 80047dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80047ea:	2308      	movs	r3, #8
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	4619      	mov	r1, r3
 80047f4:	4806      	ldr	r0, [pc, #24]	@ (8004810 <HAL_XSPI_MspInit+0xd4>)
 80047f6:	f005 fdc5 	bl	800a384 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 80047fa:	bf00      	nop
 80047fc:	3728      	adds	r7, #40	@ 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	420d3400 	.word	0x420d3400
 8004808:	46020c00 	.word	0x46020c00
 800480c:	42021c00 	.word	0x42021c00
 8004810:	42022000 	.word	0x42022000

08004814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b0c4      	sub	sp, #272	@ 0x110
 8004818:	af00      	add	r7, sp, #0
 800481a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800481e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004822:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004834:	f107 0318 	add.w	r3, r7, #24
 8004838:	22e0      	movs	r2, #224	@ 0xe0
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f011 f997 	bl	8015b70 <memset>
  if(hi2c->Instance==I2C1)
 8004842:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004846:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a63      	ldr	r2, [pc, #396]	@ (80049dc <HAL_I2C_MspInit+0x1c8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d14f      	bne.n	80048f4 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004854:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004866:	f107 0318 	add.w	r3, r7, #24
 800486a:	4618      	mov	r0, r3
 800486c:	f009 fa90 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8004876:	f7fd ffdf 	bl	8002838 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800487a:	4b59      	ldr	r3, [pc, #356]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 800487c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004880:	4a57      	ldr	r2, [pc, #348]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 8004882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004886:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800488a:	4b55      	ldr	r3, [pc, #340]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004898:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800489c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048a0:	2312      	movs	r3, #18
 80048a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048b2:	2304      	movs	r3, #4
 80048b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80048bc:	4619      	mov	r1, r3
 80048be:	4849      	ldr	r0, [pc, #292]	@ (80049e4 <HAL_I2C_MspInit+0x1d0>)
 80048c0:	f005 fd60 	bl	800a384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048c4:	4b46      	ldr	r3, [pc, #280]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 80048c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ca:	4a45      	ldr	r2, [pc, #276]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 80048cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048d0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80048d4:	4b42      	ldr	r3, [pc, #264]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 80048d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048da:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80048de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048e2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80048f0:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80048f2:	e06e      	b.n	80049d2 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 80048f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a39      	ldr	r2, [pc, #228]	@ (80049e8 <HAL_I2C_MspInit+0x1d4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d165      	bne.n	80049d2 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004906:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004918:	f107 0318 	add.w	r3, r7, #24
 800491c:	4618      	mov	r0, r3
 800491e:	f009 fa37 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8004928:	f7fd ff86 	bl	8002838 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800492c:	4b2c      	ldr	r3, [pc, #176]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 800492e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004932:	4a2b      	ldr	r2, [pc, #172]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 8004934:	f043 0320 	orr.w	r3, r3, #32
 8004938:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800493c:	4b28      	ldr	r3, [pc, #160]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 800493e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004942:	f003 0220 	and.w	r2, r3, #32
 8004946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800494a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004958:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800495a:	2303      	movs	r3, #3
 800495c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004960:	2312      	movs	r3, #18
 8004962:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004972:	2304      	movs	r3, #4
 8004974:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004978:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800497c:	4619      	mov	r1, r3
 800497e:	481b      	ldr	r0, [pc, #108]	@ (80049ec <HAL_I2C_MspInit+0x1d8>)
 8004980:	f005 fd00 	bl	800a384 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004984:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498a:	4a15      	ldr	r2, [pc, #84]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 800498c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004990:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004994:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <HAL_I2C_MspInit+0x1cc>)
 8004996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800499a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800499e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b0:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2100      	movs	r1, #0
 80049b6:	2039      	movs	r0, #57	@ 0x39
 80049b8:	f003 fbc5 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80049bc:	2039      	movs	r0, #57	@ 0x39
 80049be:	f003 fbdc 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	203a      	movs	r0, #58	@ 0x3a
 80049c8:	f003 fbbd 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80049cc:	203a      	movs	r0, #58	@ 0x3a
 80049ce:	f003 fbd4 	bl	800817a <HAL_NVIC_EnableIRQ>
}
 80049d2:	bf00      	nop
 80049d4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40005400 	.word	0x40005400
 80049e0:	46020c00 	.word	0x46020c00
 80049e4:	42021800 	.word	0x42021800
 80049e8:	40005800 	.word	0x40005800
 80049ec:	42021400 	.word	0x42021400

080049f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0c6      	sub	sp, #280	@ 0x118
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80049fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a00:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a10:	f107 0320 	add.w	r3, r7, #32
 8004a14:	22e0      	movs	r2, #224	@ 0xe0
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f011 f8a9 	bl	8015b70 <memset>
  if(hltdc->Instance==LTDC)
 8004a1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a92      	ldr	r2, [pc, #584]	@ (8004c74 <HAL_LTDC_MspInit+0x284>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	f040 811b 	bne.w	8004c68 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0302 	mov.w	r3, #2
 8004a3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8004a44:	2303      	movs	r3, #3
 8004a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8004a4c:	2332      	movs	r3, #50	@ 0x32
 8004a4e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8004a50:	2302      	movs	r3, #2
 8004a52:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8004a54:	2302      	movs	r3, #2
 8004a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8004a58:	2308      	movs	r3, #8
 8004a5a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8004a64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a6a:	f107 0320 	add.w	r3, r7, #32
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f009 f98e 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8004a7a:	f7fd fedd 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004a7e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a84:	4a7c      	ldr	r2, [pc, #496]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a8a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9c:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aa2:	4a75      	ldr	r2, [pc, #468]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004aac:	4b72      	ldr	r3, [pc, #456]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ab2:	f003 0202 	and.w	r2, r3, #2
 8004ab6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004aba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ac4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004ac8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aca:	4b6b      	ldr	r3, [pc, #428]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad0:	4a69      	ldr	r2, [pc, #420]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004ad2:	f043 0310 	orr.w	r3, r3, #16
 8004ad6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ada:	4b67      	ldr	r3, [pc, #412]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae0:	f003 0210 	and.w	r2, r3, #16
 8004ae4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004af6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004af8:	4b5f      	ldr	r3, [pc, #380]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004afe:	4a5e      	ldr	r2, [pc, #376]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004b00:	f043 0308 	orr.w	r3, r3, #8
 8004b04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b08:	4b5b      	ldr	r3, [pc, #364]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b0e:	f003 0208 	and.w	r2, r3, #8
 8004b12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b24:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b26:	4b54      	ldr	r3, [pc, #336]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b2c:	4a52      	ldr	r2, [pc, #328]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b36:	4b50      	ldr	r3, [pc, #320]	@ (8004c78 <HAL_LTDC_MspInit+0x288>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b3c:	f003 0204 	and.w	r2, r3, #4
 8004b40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b52:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b54:	2304      	movs	r3, #4
 8004b56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b72:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004b76:	4619      	mov	r1, r3
 8004b78:	4840      	ldr	r0, [pc, #256]	@ (8004c7c <HAL_LTDC_MspInit+0x28c>)
 8004b7a:	f005 fc03 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004b7e:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8004b82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b9e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4836      	ldr	r0, [pc, #216]	@ (8004c80 <HAL_LTDC_MspInit+0x290>)
 8004ba6:	f005 fbed 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004baa:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8004bae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bca:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004bce:	4619      	mov	r1, r3
 8004bd0:	482c      	ldr	r0, [pc, #176]	@ (8004c84 <HAL_LTDC_MspInit+0x294>)
 8004bd2:	f005 fbd7 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bd6:	23c0      	movs	r3, #192	@ 0xc0
 8004bd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8004bee:	2307      	movs	r3, #7
 8004bf0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bf4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4823      	ldr	r0, [pc, #140]	@ (8004c88 <HAL_LTDC_MspInit+0x298>)
 8004bfc:	f005 fbc2 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c20:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004c24:	4619      	mov	r1, r3
 8004c26:	4818      	ldr	r0, [pc, #96]	@ (8004c88 <HAL_LTDC_MspInit+0x298>)
 8004c28:	f005 fbac 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8004c46:	2307      	movs	r3, #7
 8004c48:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004c50:	4619      	mov	r1, r3
 8004c52:	480a      	ldr	r0, [pc, #40]	@ (8004c7c <HAL_LTDC_MspInit+0x28c>)
 8004c54:	f005 fb96 	bl	800a384 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	2087      	movs	r0, #135	@ 0x87
 8004c5e:	f003 fa72 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004c62:	2087      	movs	r0, #135	@ 0x87
 8004c64:	f003 fa89 	bl	800817a <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004c68:	bf00      	nop
 8004c6a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40016800 	.word	0x40016800
 8004c78:	46020c00 	.word	0x46020c00
 8004c7c:	42020400 	.word	0x42020400
 8004c80:	42021000 	.word	0x42021000
 8004c84:	42020c00 	.word	0x42020c00
 8004c88:	42020800 	.word	0x42020800

08004c8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b0bc      	sub	sp, #240	@ 0xf0
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c94:	f107 0310 	add.w	r3, r7, #16
 8004c98:	22e0      	movs	r2, #224	@ 0xe0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f010 ff67 	bl	8015b70 <memset>
  if(hrtc->Instance==RTC)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <HAL_RTC_MspInit+0x90>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d132      	bne.n	8004d12 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004cac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cc0:	f107 0310 	add.w	r3, r7, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f009 f863 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004cd0:	f7fd fdb2 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004cd4:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cda:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cea:	4a0d      	ldr	r2, [pc, #52]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cf0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d08:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <HAL_RTC_MspInit+0x94>)
 8004d0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004d12:	bf00      	nop
 8004d14:	37f0      	adds	r7, #240	@ 0xf0
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	46007800 	.word	0x46007800
 8004d20:	46020c00 	.word	0x46020c00

08004d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0b      	ldr	r2, [pc, #44]	@ (8004d60 <HAL_TIM_PWM_MspInit+0x3c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d36:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <HAL_TIM_PWM_MspInit+0x40>)
 8004d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d3c:	4a09      	ldr	r2, [pc, #36]	@ (8004d64 <HAL_TIM_PWM_MspInit+0x40>)
 8004d3e:	f043 0302 	orr.w	r3, r3, #2
 8004d42:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d46:	4b07      	ldr	r3, [pc, #28]	@ (8004d64 <HAL_TIM_PWM_MspInit+0x40>)
 8004d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40000400 	.word	0x40000400
 8004d64:	46020c00 	.word	0x46020c00

08004d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a12      	ldr	r2, [pc, #72]	@ (8004dd0 <HAL_TIM_MspPostInit+0x68>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d11e      	bne.n	8004dc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_TIM_MspPostInit+0x6c>)
 8004d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d90:	4a10      	ldr	r2, [pc, #64]	@ (8004dd4 <HAL_TIM_MspPostInit+0x6c>)
 8004d92:	f043 0310 	orr.w	r3, r3, #16
 8004d96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd4 <HAL_TIM_MspPostInit+0x6c>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8004da8:	2340      	movs	r3, #64	@ 0x40
 8004daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dac:	2302      	movs	r3, #2
 8004dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004db8:	2302      	movs	r3, #2
 8004dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004dbc:	f107 030c 	add.w	r3, r7, #12
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4805      	ldr	r0, [pc, #20]	@ (8004dd8 <HAL_TIM_MspPostInit+0x70>)
 8004dc4:	f005 fade 	bl	800a384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004dc8:	bf00      	nop
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	46020c00 	.word	0x46020c00
 8004dd8:	42021000 	.word	0x42021000

08004ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0c2      	sub	sp, #264	@ 0x108
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	22e0      	movs	r2, #224	@ 0xe0
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f010 feb3 	bl	8015b70 <memset>
  if(huart->Instance==USART1)
 8004e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed4 <HAL_UART_MspInit+0xf8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d155      	bne.n	8004ec8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e1c:	f04f 0201 	mov.w	r2, #1
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e2c:	f107 0310 	add.w	r3, r7, #16
 8004e30:	4618      	mov	r0, r3
 8004e32:	f008 ffad 	bl	800dd90 <HAL_RCCEx_PeriphCLKConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8004e3c:	f7fd fcfc 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e40:	4b25      	ldr	r3, [pc, #148]	@ (8004ed8 <HAL_UART_MspInit+0xfc>)
 8004e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e46:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <HAL_UART_MspInit+0xfc>)
 8004e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e4c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004e50:	4b21      	ldr	r3, [pc, #132]	@ (8004ed8 <HAL_UART_MspInit+0xfc>)
 8004e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <HAL_UART_MspInit+0xfc>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed8 <HAL_UART_MspInit+0xfc>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_UART_MspInit+0xfc>)
 8004e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e74:	f003 0201 	and.w	r2, r3, #1
 8004e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e8a:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004e90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ea6:	2307      	movs	r3, #7
 8004ea8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eac:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	480a      	ldr	r0, [pc, #40]	@ (8004edc <HAL_UART_MspInit+0x100>)
 8004eb4:	f005 fa66 	bl	800a384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2100      	movs	r1, #0
 8004ebc:	203d      	movs	r0, #61	@ 0x3d
 8004ebe:	f003 f942 	bl	8008146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ec2:	203d      	movs	r0, #61	@ 0x3d
 8004ec4:	f003 f959 	bl	800817a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004ec8:	bf00      	nop
 8004eca:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40013800 	.word	0x40013800
 8004ed8:	46020c00 	.word	0x46020c00
 8004edc:	42020000 	.word	0x42020000

08004ee0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b0a4      	sub	sp, #144	@ 0x90
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4aae      	ldr	r2, [pc, #696]	@ (80051a8 <HAL_SAI_MspInit+0x2c8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	f040 8086 	bne.w	8005000 <HAL_SAI_MspInit+0x120>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004ef4:	4bad      	ldr	r3, [pc, #692]	@ (80051ac <HAL_SAI_MspInit+0x2cc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10e      	bne.n	8004f1a <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004efc:	4bac      	ldr	r3, [pc, #688]	@ (80051b0 <HAL_SAI_MspInit+0x2d0>)
 8004efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f02:	4aab      	ldr	r2, [pc, #684]	@ (80051b0 <HAL_SAI_MspInit+0x2d0>)
 8004f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f08:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004f0c:	4ba8      	ldr	r3, [pc, #672]	@ (80051b0 <HAL_SAI_MspInit+0x2d0>)
 8004f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8004f1a:	4ba4      	ldr	r3, [pc, #656]	@ (80051ac <HAL_SAI_MspInit+0x2cc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4aa2      	ldr	r2, [pc, #648]	@ (80051ac <HAL_SAI_MspInit+0x2cc>)
 8004f22:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004f24:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004f3c:	230d      	movs	r3, #13
 8004f3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f42:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004f46:	4619      	mov	r1, r3
 8004f48:	489a      	ldr	r0, [pc, #616]	@ (80051b4 <HAL_SAI_MspInit+0x2d4>)
 8004f4a:	f005 fa1b 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f54:	2302      	movs	r3, #2
 8004f56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004f66:	230d      	movs	r3, #13
 8004f68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f6c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004f70:	4619      	mov	r1, r3
 8004f72:	4891      	ldr	r0, [pc, #580]	@ (80051b8 <HAL_SAI_MspInit+0x2d8>)
 8004f74:	f005 fa06 	bl	800a384 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8004f78:	4b90      	ldr	r3, [pc, #576]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004f7a:	4a91      	ldr	r2, [pc, #580]	@ (80051c0 <HAL_SAI_MspInit+0x2e0>)
 8004f7c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8004f7e:	4b8f      	ldr	r3, [pc, #572]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004f80:	2226      	movs	r2, #38	@ 0x26
 8004f82:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8004f84:	4b8d      	ldr	r3, [pc, #564]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f8a:	4b8c      	ldr	r3, [pc, #560]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004f8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f90:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8004f92:	4b8a      	ldr	r3, [pc, #552]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004f94:	2208      	movs	r2, #8
 8004f96:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8004f98:	4b88      	ldr	r3, [pc, #544]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8004f9e:	4b87      	ldr	r3, [pc, #540]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8004fa4:	4b85      	ldr	r3, [pc, #532]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8004faa:	4b84      	ldr	r3, [pc, #528]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004fb0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8004fb2:	4b82      	ldr	r3, [pc, #520]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8004fb8:	4b80      	ldr	r3, [pc, #512]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8004fc4:	4b7d      	ldr	r3, [pc, #500]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8004fca:	4b7c      	ldr	r3, [pc, #496]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8004fd0:	487a      	ldr	r0, [pc, #488]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fd2:	f003 f999 	bl	8008308 <HAL_DMA_Init>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8004fdc:	f7fd fc2c 	bl	8002838 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a76      	ldr	r2, [pc, #472]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004fe8:	4a74      	ldr	r2, [pc, #464]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8004fee:	2110      	movs	r1, #16
 8004ff0:	4872      	ldr	r0, [pc, #456]	@ (80051bc <HAL_SAI_MspInit+0x2dc>)
 8004ff2:	f003 fd29 	bl	8008a48 <HAL_DMA_ConfigChannelAttributes>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 8004ffc:	f7fd fc1c 	bl	8002838 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a6f      	ldr	r2, [pc, #444]	@ (80051c4 <HAL_SAI_MspInit+0x2e4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	f040 80ca 	bne.w	80051a0 <HAL_SAI_MspInit+0x2c0>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800500c:	4b67      	ldr	r3, [pc, #412]	@ (80051ac <HAL_SAI_MspInit+0x2cc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10e      	bne.n	8005032 <HAL_SAI_MspInit+0x152>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005014:	4b66      	ldr	r3, [pc, #408]	@ (80051b0 <HAL_SAI_MspInit+0x2d0>)
 8005016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800501a:	4a65      	ldr	r2, [pc, #404]	@ (80051b0 <HAL_SAI_MspInit+0x2d0>)
 800501c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005020:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8005024:	4b62      	ldr	r3, [pc, #392]	@ (80051b0 <HAL_SAI_MspInit+0x2d0>)
 8005026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800502a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8005032:	4b5e      	ldr	r3, [pc, #376]	@ (80051ac <HAL_SAI_MspInit+0x2cc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	4a5c      	ldr	r2, [pc, #368]	@ (80051ac <HAL_SAI_MspInit+0x2cc>)
 800503a:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800503c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005040:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504e:	2303      	movs	r3, #3
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8005054:	230d      	movs	r3, #13
 8005056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800505e:	4619      	mov	r1, r3
 8005060:	4859      	ldr	r0, [pc, #356]	@ (80051c8 <HAL_SAI_MspInit+0x2e8>)
 8005062:	f005 f98f 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005066:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800506a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506c:	2302      	movs	r3, #2
 800506e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005078:	2303      	movs	r3, #3
 800507a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800507e:	230d      	movs	r3, #13
 8005080:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005084:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8005088:	4619      	mov	r1, r3
 800508a:	4850      	ldr	r0, [pc, #320]	@ (80051cc <HAL_SAI_MspInit+0x2ec>)
 800508c:	f005 f97a 	bl	800a384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005094:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	2302      	movs	r3, #2
 8005098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	2300      	movs	r3, #0
 800509e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80050a8:	230d      	movs	r3, #13
 80050aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80050b2:	4619      	mov	r1, r3
 80050b4:	4845      	ldr	r0, [pc, #276]	@ (80051cc <HAL_SAI_MspInit+0x2ec>)
 80050b6:	f005 f965 	bl	800a384 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80050ba:	2321      	movs	r3, #33	@ 0x21
 80050bc:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80050be:	2327      	movs	r3, #39	@ 0x27
 80050c0:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80050ca:	2300      	movs	r3, #0
 80050cc:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80050ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80050d4:	2302      	movs	r3, #2
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80050d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80050ea:	2300      	movs	r3, #0
 80050ec:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80050f2:	2300      	movs	r3, #0
 80050f4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80050fa:	2300      	movs	r3, #0
 80050fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80050fe:	f107 0310 	add.w	r3, r7, #16
 8005102:	4933      	ldr	r1, [pc, #204]	@ (80051d0 <HAL_SAI_MspInit+0x2f0>)
 8005104:	4618      	mov	r0, r3
 8005106:	f004 fa51 	bl	80095ac <HAL_DMAEx_List_BuildNode>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_SAI_MspInit+0x234>
    {
      Error_Handler();
 8005110:	f7fd fb92 	bl	8002838 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8005114:	4a2e      	ldr	r2, [pc, #184]	@ (80051d0 <HAL_SAI_MspInit+0x2f0>)
 8005116:	2100      	movs	r1, #0
 8005118:	482e      	ldr	r0, [pc, #184]	@ (80051d4 <HAL_SAI_MspInit+0x2f4>)
 800511a:	f004 fa73 	bl	8009604 <HAL_DMAEx_List_InsertNode>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_SAI_MspInit+0x248>
    {
      Error_Handler();
 8005124:	f7fd fb88 	bl	8002838 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8005128:	482a      	ldr	r0, [pc, #168]	@ (80051d4 <HAL_SAI_MspInit+0x2f4>)
 800512a:	f004 fb34 	bl	8009796 <HAL_DMAEx_List_SetCircularMode>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 8005134:	f7fd fb80 	bl	8002838 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8005138:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 800513a:	4a28      	ldr	r2, [pc, #160]	@ (80051dc <HAL_SAI_MspInit+0x2fc>)
 800513c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800513e:	4b26      	ldr	r3, [pc, #152]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005140:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005148:	2200      	movs	r2, #0
 800514a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800514c:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005152:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005154:	2200      	movs	r2, #0
 8005156:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8005158:	4b1f      	ldr	r3, [pc, #124]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 800515a:	2281      	movs	r2, #129	@ 0x81
 800515c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800515e:	481e      	ldr	r0, [pc, #120]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005160:	f004 f864 	bl	800922c <HAL_DMAEx_List_Init>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_SAI_MspInit+0x28e>
    {
      Error_Handler();
 800516a:	f7fd fb65 	bl	8002838 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 800516e:	4919      	ldr	r1, [pc, #100]	@ (80051d4 <HAL_SAI_MspInit+0x2f4>)
 8005170:	4819      	ldr	r0, [pc, #100]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005172:	f004 fb71 	bl	8009858 <HAL_DMAEx_List_LinkQ>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 800517c:	f7fd fb5c 	bl	8002838 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a15      	ldr	r2, [pc, #84]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005188:	4a13      	ldr	r2, [pc, #76]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800518e:	2110      	movs	r1, #16
 8005190:	4811      	ldr	r0, [pc, #68]	@ (80051d8 <HAL_SAI_MspInit+0x2f8>)
 8005192:	f003 fc59 	bl	8008a48 <HAL_DMA_ConfigChannelAttributes>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_SAI_MspInit+0x2c0>
    {
      Error_Handler();
 800519c:	f7fd fb4c 	bl	8002838 <Error_Handler>
    }

    }
}
 80051a0:	bf00      	nop
 80051a2:	3790      	adds	r7, #144	@ 0x90
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40015804 	.word	0x40015804
 80051ac:	200043b0 	.word	0x200043b0
 80051b0:	46020c00 	.word	0x46020c00
 80051b4:	42020400 	.word	0x42020400
 80051b8:	42021800 	.word	0x42021800
 80051bc:	20001ee8 	.word	0x20001ee8
 80051c0:	400201d0 	.word	0x400201d0
 80051c4:	40015824 	.word	0x40015824
 80051c8:	42020000 	.word	0x42020000
 80051cc:	42020800 	.word	0x42020800
 80051d0:	20001f60 	.word	0x20001f60
 80051d4:	20001f84 	.word	0x20001f84
 80051d8:	20001f9c 	.word	0x20001f9c
 80051dc:	400200d0 	.word	0x400200d0

080051e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <NMI_Handler+0x4>

080051e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <HardFault_Handler+0x4>

080051f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <MemManage_Handler+0x4>

080051f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <BusFault_Handler+0x4>

08005200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <UsageFault_Handler+0x4>

08005208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  bspTick();
 8005236:	f7fc f88f 	bl	8001358 <bspTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800523a:	f000 fc7d 	bl	8005b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}

08005242 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8005246:	2002      	movs	r0, #2
 8005248:	f005 fa8c 	bl	800a764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800524c:	bf00      	nop
 800524e:	bd80      	pop	{r7, pc}

08005250 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8005254:	2010      	movs	r0, #16
 8005256:	f005 fa85 	bl	800a764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}

0800525e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8005262:	2020      	movs	r0, #32
 8005264:	f005 fa7e 	bl	800a764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}

0800526c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8005270:	4802      	ldr	r0, [pc, #8]	@ (800527c <GPDMA1_Channel0_IRQHandler+0x10>)
 8005272:	f003 fa7a 	bl	800876a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20001a80 	.word	0x20001a80

08005280 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8005284:	4802      	ldr	r0, [pc, #8]	@ (8005290 <GPDMA1_Channel1_IRQHandler+0x10>)
 8005286:	f003 fa70 	bl	800876a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800528a:	bf00      	nop
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20001f9c 	.word	0x20001f9c

08005294 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8005298:	4802      	ldr	r0, [pc, #8]	@ (80052a4 <GPDMA1_Channel2_IRQHandler+0x10>)
 800529a:	f003 fa66 	bl	800876a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20001af8 	.word	0x20001af8

080052a8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80052ac:	4802      	ldr	r0, [pc, #8]	@ (80052b8 <GPDMA1_Channel3_IRQHandler+0x10>)
 80052ae:	f003 fa5c 	bl	800876a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20001ee8 	.word	0x20001ee8

080052bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80052c0:	4802      	ldr	r0, [pc, #8]	@ (80052cc <ADC1_2_IRQHandler+0x10>)
 80052c2:	f001 fc01 	bl	8006ac8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	2000192c 	.word	0x2000192c

080052d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80052d4:	4802      	ldr	r0, [pc, #8]	@ (80052e0 <I2C2_EV_IRQHandler+0x10>)
 80052d6:	f005 fd07 	bl	800ace8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20001c8c 	.word	0x20001c8c

080052e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80052e8:	4802      	ldr	r0, [pc, #8]	@ (80052f4 <I2C2_ER_IRQHandler+0x10>)
 80052ea:	f005 fd17 	bl	800ad1c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20001c8c 	.word	0x20001c8c

080052f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052fc:	4802      	ldr	r0, [pc, #8]	@ (8005308 <USART1_IRQHandler+0x10>)
 80052fe:	f00d fbf9 	bl	8012af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20002060 	.word	0x20002060

0800530c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005310:	4802      	ldr	r0, [pc, #8]	@ (800531c <LTDC_IRQHandler+0x10>)
 8005312:	f006 ff11 	bl	800c138 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20001ce0 	.word	0x20001ce0

08005320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return 1;
 8005324:	2301      	movs	r3, #1
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <_kill>:

int _kill(int pid, int sig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800533a:	f010 fced 	bl	8015d18 <__errno>
 800533e:	4603      	mov	r3, r0
 8005340:	2216      	movs	r2, #22
 8005342:	601a      	str	r2, [r3, #0]
  return -1;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_exit>:

void _exit (int status)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005358:	f04f 31ff 	mov.w	r1, #4294967295
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ffe7 	bl	8005330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <_exit+0x12>

08005366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e00a      	b.n	800538e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005378:	f3af 8000 	nop.w
 800537c:	4601      	mov	r1, r0
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	60ba      	str	r2, [r7, #8]
 8005384:	b2ca      	uxtb	r2, r1
 8005386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3301      	adds	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	dbf0      	blt.n	8005378 <_read+0x12>
  }

  return len;
 8005396:	687b      	ldr	r3, [r7, #4]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e009      	b.n	80053c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	60ba      	str	r2, [r7, #8]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb fdae 	bl	8000f1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3301      	adds	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	dbf1      	blt.n	80053b2 <_write+0x12>
  }
  return len;
 80053ce:	687b      	ldr	r3, [r7, #4]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_close>:

int _close(int file)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005400:	605a      	str	r2, [r3, #4]
  return 0;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <_isatty>:

int _isatty(int file)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005418:	2301      	movs	r3, #1
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005448:	4a14      	ldr	r2, [pc, #80]	@ (800549c <_sbrk+0x5c>)
 800544a:	4b15      	ldr	r3, [pc, #84]	@ (80054a0 <_sbrk+0x60>)
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005454:	4b13      	ldr	r3, [pc, #76]	@ (80054a4 <_sbrk+0x64>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800545c:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <_sbrk+0x64>)
 800545e:	4a12      	ldr	r2, [pc, #72]	@ (80054a8 <_sbrk+0x68>)
 8005460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005462:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <_sbrk+0x64>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4413      	add	r3, r2
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	429a      	cmp	r2, r3
 800546e:	d207      	bcs.n	8005480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005470:	f010 fc52 	bl	8015d18 <__errno>
 8005474:	4603      	mov	r3, r0
 8005476:	220c      	movs	r2, #12
 8005478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	e009      	b.n	8005494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005480:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <_sbrk+0x64>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005486:	4b07      	ldr	r3, [pc, #28]	@ (80054a4 <_sbrk+0x64>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	4a05      	ldr	r2, [pc, #20]	@ (80054a4 <_sbrk+0x64>)
 8005490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005492:	68fb      	ldr	r3, [r7, #12]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	202f0000 	.word	0x202f0000
 80054a0:	00000800 	.word	0x00000800
 80054a4:	200043b4 	.word	0x200043b4
 80054a8:	200045b0 	.word	0x200045b0

080054ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80054b0:	4b18      	ldr	r3, [pc, #96]	@ (8005514 <SystemInit+0x68>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <SystemInit+0x68>)
 80054b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80054c0:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <SystemInit+0x6c>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80054c6:	4b14      	ldr	r3, [pc, #80]	@ (8005518 <SystemInit+0x6c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80054cc:	4b12      	ldr	r3, [pc, #72]	@ (8005518 <SystemInit+0x6c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80054d2:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <SystemInit+0x6c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80054d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <SystemInit+0x6c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005518 <SystemInit+0x6c>)
 80054de:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80054e2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80054e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80054e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <SystemInit+0x6c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80054ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <SystemInit+0x6c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <SystemInit+0x6c>)
 80054f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80054fa:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <SystemInit+0x6c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005500:	4b04      	ldr	r3, [pc, #16]	@ (8005514 <SystemInit+0x68>)
 8005502:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005506:	609a      	str	r2, [r3, #8]
  #endif
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	e000ed00 	.word	0xe000ed00
 8005518:	46020c00 	.word	0x46020c00

0800551c <tickHandler>:
//
// @param pContext pointer to context data
// @return none
//
static void tickHandler(void *pContext)
{
 800551c:	b4b0      	push	{r4, r5, r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	int index;

	// Increment millisecond counter.
	grTimerMilliseconds++;
 8005524:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <tickHandler+0x8c>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	1c54      	adds	r4, r2, #1
 800552c:	f143 0500 	adc.w	r5, r3, #0
 8005530:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <tickHandler+0x8c>)
 8005532:	e9c3 4500 	strd	r4, r5, [r3]

	// Iterate over callbacks.
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e02b      	b.n	8005594 <tickHandler+0x78>
	{
		// Check entry.
		if (NULL != grTimerCallback[index].pCallback)
 800553c:	491b      	ldr	r1, [pc, #108]	@ (80055ac <tickHandler+0x90>)
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	330c      	adds	r3, #12
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01d      	beq.n	800558e <tickHandler+0x72>
		{
			// Update remaining time.
			if (grTimerCallback[index].remaining > 0)
 8005552:	4916      	ldr	r1, [pc, #88]	@ (80055ac <tickHandler+0x90>)
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3308      	adds	r3, #8
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <tickHandler+0x72>
			{
				grTimerCallback[index].remaining--;
 8005568:	4910      	ldr	r1, [pc, #64]	@ (80055ac <tickHandler+0x90>)
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	3308      	adds	r3, #8
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1e59      	subs	r1, r3, #1
 800557c:	480b      	ldr	r0, [pc, #44]	@ (80055ac <tickHandler+0x90>)
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4403      	add	r3, r0
 800558a:	3308      	adds	r3, #8
 800558c:	6019      	str	r1, [r3, #0]
	for (index = 0; index < DIM(grTimerCallback); index++)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b07      	cmp	r3, #7
 8005598:	d9d0      	bls.n	800553c <tickHandler+0x20>
			}
		}
	}
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bcb0      	pop	{r4, r5, r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	200043b8 	.word	0x200043b8
 80055ac:	200043c0 	.word	0x200043c0

080055b0 <timerInit>:
// @brief Timer initialization.
//
// @return enumerated error code.
//
teError timerInit(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
	// Initialize timer callbacks.
	memset((void*)grTimerCallback, 0, sizeof(grTimerCallback));
 80055b4:	22a0      	movs	r2, #160	@ 0xa0
 80055b6:	2100      	movs	r1, #0
 80055b8:	4804      	ldr	r0, [pc, #16]	@ (80055cc <timerInit+0x1c>)
 80055ba:	f010 fad9 	bl	8015b70 <memset>

	// Install timer tick callback.
	bspTickHandler(tickHandler, NULL);
 80055be:	2100      	movs	r1, #0
 80055c0:	4803      	ldr	r0, [pc, #12]	@ (80055d0 <timerInit+0x20>)
 80055c2:	f7fb fee3 	bl	800138c <bspTickHandler>

	return eErrorNone;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	200043c0 	.word	0x200043c0
 80055d0:	0800551d 	.word	0x0800551d

080055d4 <timerMilliseconds>:
// @brief Retrieve the number of milliseconds since boot.
//
// @return milliseconds
//
uint64_t timerMilliseconds(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	return grTimerMilliseconds;
 80055d8:	4b04      	ldr	r3, [pc, #16]	@ (80055ec <timerMilliseconds+0x18>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	200043b8 	.word	0x200043b8

080055f0 <timerTimestamp>:
//
// @param prTimestamp pointer to timestamp data structure.
// @return void
//
void timerTimestamp(trTimerTimestamp *prTimestamp)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
	uint64_t uptime;

    // Validate argument[s].
    ASSERT(NULL != prTimestamp);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2d8      	uxtb	r0, r3
 8005604:	4b3a      	ldr	r3, [pc, #232]	@ (80056f0 <timerTimestamp+0x100>)
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4b3a      	ldr	r3, [pc, #232]	@ (80056f4 <timerTimestamp+0x104>)
 800560a:	2267      	movs	r2, #103	@ 0x67
 800560c:	493a      	ldr	r1, [pc, #232]	@ (80056f8 <timerTimestamp+0x108>)
 800560e:	f7fc f813 	bl	8001638 <logAssert>

    // Get total uptime in milliseconds.
	uptime = timerMilliseconds();
 8005612:	f7ff ffdf 	bl	80055d4 <timerMilliseconds>
 8005616:	e9c7 0102 	strd	r0, r1, [r7, #8]
	prTimestamp->seconds = uptime / 1000;
 800561a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800561e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	f7fb faed 	bl	8000c04 <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	711a      	strb	r2, [r3, #4]

	// Calculate uptime units.
	prTimestamp->days         =  (uptime / 1000) / (60 * 60 * 24);
 8005634:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005638:	a32b      	add	r3, pc, #172	@ (adr r3, 80056e8 <timerTimestamp+0xf8>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fb fae1 	bl	8000c04 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	b292      	uxth	r2, r2
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	801a      	strh	r2, [r3, #0]
	prTimestamp->hours        = ((uptime / 1000) / (60 * 60)) % 24;
 800564c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005650:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <timerTimestamp+0x10c>)
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	f7fb fad5 	bl	8000c04 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	f04f 0218 	mov.w	r2, #24
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	f7fb facb 	bl	8000c04 <__aeabi_uldivmod>
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	709a      	strb	r2, [r3, #2]
	prTimestamp->minutes      = ((uptime / 1000) / 60) % 60;
 8005674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005678:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	f7fb fac0 	bl	8000c04 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f7fb fab6 	bl	8000c04 <__aeabi_uldivmod>
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	70da      	strb	r2, [r3, #3]
	prTimestamp->seconds      =  (uptime / 1000) % 60;
 800569e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	f7fb faab 	bl	8000c04 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f7fb faa1 	bl	8000c04 <__aeabi_uldivmod>
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	711a      	strb	r2, [r3, #4]
	prTimestamp->milliseconds =   uptime % 1000;
 80056c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	f7fb fa96 	bl	8000c04 <__aeabi_uldivmod>
 80056d8:	b292      	uxth	r2, r2
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	80da      	strh	r2, [r3, #6]
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	05265c00 	.word	0x05265c00
 80056ec:	00000000 	.word	0x00000000
 80056f0:	080187a0 	.word	0x080187a0
 80056f4:	080189a4 	.word	0x080189a4
 80056f8:	0801878c 	.word	0x0801878c
 80056fc:	0036ee80 	.word	0x0036ee80

08005700 <timerAdd>:
// @param periodic true = periodic, false = one-shot
// @return enumerated error code
//
teError timerAdd(uint32_t interval, tpTimerCallback pCallback,
					     void *pContext, bool periodic)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	70fb      	strb	r3, [r7, #3]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pCallback);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2d8      	uxtb	r0, r3
 800571a:	4b2f      	ldr	r3, [pc, #188]	@ (80057d8 <timerAdd+0xd8>)
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4b2f      	ldr	r3, [pc, #188]	@ (80057dc <timerAdd+0xdc>)
 8005720:	2284      	movs	r2, #132	@ 0x84
 8005722:	492f      	ldr	r1, [pc, #188]	@ (80057e0 <timerAdd+0xe0>)
 8005724:	f7fb ff88 	bl	8001638 <logAssert>

	// Find callback resource.
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e046      	b.n	80057bc <timerAdd+0xbc>
	{
		// Check entry.
		if (NULL == grTimerCallback[index].pCallback)
 800572e:	492d      	ldr	r1, [pc, #180]	@ (80057e4 <timerAdd+0xe4>)
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	330c      	adds	r3, #12
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d138      	bne.n	80057b6 <timerAdd+0xb6>
		{
			// Critical section begin.
			bspInterruptEnable(false);
 8005744:	2000      	movs	r0, #0
 8005746:	f7fb fdc3 	bl	80012d0 <bspInterruptEnable>

			// Initialize entry.
			grTimerCallback[index].periodic  = periodic;
 800574a:	4926      	ldr	r1, [pc, #152]	@ (80057e4 <timerAdd+0xe4>)
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	701a      	strb	r2, [r3, #0]
			grTimerCallback[index].interval  = interval;
 800575c:	4921      	ldr	r1, [pc, #132]	@ (80057e4 <timerAdd+0xe4>)
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	3304      	adds	r3, #4
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].remaining = interval;
 8005770:	491c      	ldr	r1, [pc, #112]	@ (80057e4 <timerAdd+0xe4>)
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	3308      	adds	r3, #8
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].pCallback = pCallback;
 8005784:	4917      	ldr	r1, [pc, #92]	@ (80057e4 <timerAdd+0xe4>)
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	330c      	adds	r3, #12
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].pContext  = pContext;
 8005798:	4912      	ldr	r1, [pc, #72]	@ (80057e4 <timerAdd+0xe4>)
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3310      	adds	r3, #16
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	601a      	str	r2, [r3, #0]

			// Critical section end.
			bspInterruptEnable(true);
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7fb fd8f 	bl	80012d0 <bspInterruptEnable>

			return eErrorNone;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e00c      	b.n	80057d0 <timerAdd+0xd0>
	for (index = 0; index < DIM(grTimerCallback); index++)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3301      	adds	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b07      	cmp	r3, #7
 80057c0:	d9b5      	bls.n	800572e <timerAdd+0x2e>
		}
	}
	LOGERROR(eErrorOutOfResources);
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <timerAdd+0xdc>)
 80057c4:	229c      	movs	r2, #156	@ 0x9c
 80057c6:	4906      	ldr	r1, [pc, #24]	@ (80057e0 <timerAdd+0xe0>)
 80057c8:	2012      	movs	r0, #18
 80057ca:	f7fb ffd3 	bl	8001774 <logError>

	return eErrorOutOfResources;
 80057ce:	2312      	movs	r3, #18
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	080187b4 	.word	0x080187b4
 80057dc:	080189b4 	.word	0x080189b4
 80057e0:	0801878c 	.word	0x0801878c
 80057e4:	200043c0 	.word	0x200043c0

080057e8 <timerDelete>:
//
// @param pCallback pointer to callback function
// @return enumerated error code
//
teError timerDelete(tpTimerCallback pCallback)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pCallback);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2d8      	uxtb	r0, r3
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <timerDelete+0x8c>)
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <timerDelete+0x90>)
 8005802:	22ac      	movs	r2, #172	@ 0xac
 8005804:	491d      	ldr	r1, [pc, #116]	@ (800587c <timerDelete+0x94>)
 8005806:	f7fb ff17 	bl	8001638 <logAssert>

	// Find callback resource.
	for (index = 0; index < DIM(grTimerCallback); index++)
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e022      	b.n	8005856 <timerDelete+0x6e>
	{
		// Check entry.
		if (pCallback == grTimerCallback[index].pCallback)
 8005810:	491b      	ldr	r1, [pc, #108]	@ (8005880 <timerDelete+0x98>)
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	330c      	adds	r3, #12
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d113      	bne.n	8005850 <timerDelete+0x68>
		{
			// Critical section begin.
			bspInterruptEnable(false);
 8005828:	2000      	movs	r0, #0
 800582a:	f7fb fd51 	bl	80012d0 <bspInterruptEnable>

			// Clear entry.
			memset((void*)&grTimerCallback[index], 0,
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4a11      	ldr	r2, [pc, #68]	@ (8005880 <timerDelete+0x98>)
 800583a:	4413      	add	r3, r2
 800583c:	2214      	movs	r2, #20
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f010 f995 	bl	8015b70 <memset>
                sizeof(grTimerCallback[index]));

			// Critical section end.
			bspInterruptEnable(true);
 8005846:	2001      	movs	r0, #1
 8005848:	f7fb fd42 	bl	80012d0 <bspInterruptEnable>

			return eErrorNone;
 800584c:	2300      	movs	r3, #0
 800584e:	e00c      	b.n	800586a <timerDelete+0x82>
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b07      	cmp	r3, #7
 800585a:	d9d9      	bls.n	8005810 <timerDelete+0x28>
		}
	}
	LOGERROR(eErrorNotFound);
 800585c:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <timerDelete+0x90>)
 800585e:	22c1      	movs	r2, #193	@ 0xc1
 8005860:	4906      	ldr	r1, [pc, #24]	@ (800587c <timerDelete+0x94>)
 8005862:	2011      	movs	r0, #17
 8005864:	f7fb ff86 	bl	8001774 <logError>

	return eErrorNotFound;
 8005868:	2311      	movs	r3, #17
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	080187b4 	.word	0x080187b4
 8005878:	080189c0 	.word	0x080189c0
 800587c:	0801878c 	.word	0x0801878c
 8005880:	200043c0 	.word	0x200043c0

08005884 <timerService>:
// @brief Process pending timer callback[s].
//
// @return none
//
void timerService(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
	int index;

	// Iterate over timer callbacks.
	for (index = 0; index < DIM(grTimerCallback); index++)
 800588a:	2300      	movs	r3, #0
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	e056      	b.n	800593e <timerService+0xba>
	{
		// Check entry.
		if (NULL != grTimerCallback[index].pCallback)
 8005890:	492f      	ldr	r1, [pc, #188]	@ (8005950 <timerService+0xcc>)
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	330c      	adds	r3, #12
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d048      	beq.n	8005938 <timerService+0xb4>
		{
			// Check remaining time.
			if (0 == grTimerCallback[index].remaining)
 80058a6:	492a      	ldr	r1, [pc, #168]	@ (8005950 <timerService+0xcc>)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	3308      	adds	r3, #8
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d13d      	bne.n	8005938 <timerService+0xb4>
			{
				// Invoke callback.
				grTimerCallback[index].pCallback(grTimerCallback[index].pContext);
 80058bc:	4924      	ldr	r1, [pc, #144]	@ (8005950 <timerService+0xcc>)
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	330c      	adds	r3, #12
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	4820      	ldr	r0, [pc, #128]	@ (8005950 <timerService+0xcc>)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4403      	add	r3, r0
 80058dc:	3310      	adds	r3, #16
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	4788      	blx	r1

				// Check periodicity.
				if (grTimerCallback[index].periodic)
 80058e4:	491a      	ldr	r1, [pc, #104]	@ (8005950 <timerService+0xcc>)
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <timerService+0x9c>
				{
					// Reset interval.
					grTimerCallback[index].remaining = grTimerCallback[index].interval;
 80058fa:	4915      	ldr	r1, [pc, #84]	@ (8005950 <timerService+0xcc>)
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	3304      	adds	r3, #4
 800590a:	6819      	ldr	r1, [r3, #0]
 800590c:	4810      	ldr	r0, [pc, #64]	@ (8005950 <timerService+0xcc>)
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4403      	add	r3, r0
 800591a:	3308      	adds	r3, #8
 800591c:	6019      	str	r1, [r3, #0]
 800591e:	e00b      	b.n	8005938 <timerService+0xb4>
				}
				else
				{
					// Delete entry.
					timerDelete(grTimerCallback[index].pCallback);
 8005920:	490b      	ldr	r1, [pc, #44]	@ (8005950 <timerService+0xcc>)
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	330c      	adds	r3, #12
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff ff58 	bl	80057e8 <timerDelete>
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3301      	adds	r3, #1
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b07      	cmp	r3, #7
 8005942:	d9a5      	bls.n	8005890 <timerService+0xc>
				}

			}
		}
	}
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	200043c0 	.word	0x200043c0

08005954 <versionConfidence>:
//
// @param confidence value
// @return pointer to null terminated string
//
const char * versionConfidence(uint16_t confidence)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af02      	add	r7, sp, #8
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
    static const char *pConfidence[] = { "omega", "alpha", "beta", "release" };

    // Validate argument[s].
    ASSERT(confidence < DIM(pConfidence));
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b03      	cmp	r3, #3
 8005962:	bf94      	ite	ls
 8005964:	2301      	movls	r3, #1
 8005966:	2300      	movhi	r3, #0
 8005968:	b2d8      	uxtb	r0, r3
 800596a:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <versionConfidence+0x34>)
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	4b07      	ldr	r3, [pc, #28]	@ (800598c <versionConfidence+0x38>)
 8005970:	221f      	movs	r2, #31
 8005972:	4907      	ldr	r1, [pc, #28]	@ (8005990 <versionConfidence+0x3c>)
 8005974:	f7fb fe60 	bl	8001638 <logAssert>

    return pConfidence[confidence];
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	4a06      	ldr	r2, [pc, #24]	@ (8005994 <versionConfidence+0x40>)
 800597c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	080187e0 	.word	0x080187e0
 800598c:	080189cc 	.word	0x080189cc
 8005990:	080187c8 	.word	0x080187c8
 8005994:	20000194 	.word	0x20000194

08005998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059d0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800599c:	f7ff fd86 	bl	80054ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80059a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80059a2:	e003      	b.n	80059ac <LoopCopyDataInit>

080059a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80059a4:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80059a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80059a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80059aa:	3104      	adds	r1, #4

080059ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80059ac:	480a      	ldr	r0, [pc, #40]	@ (80059d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80059ae:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80059b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80059b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80059b4:	d3f6      	bcc.n	80059a4 <CopyDataInit>
	ldr	r2, =_sbss
 80059b6:	4a0a      	ldr	r2, [pc, #40]	@ (80059e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80059b8:	e002      	b.n	80059c0 <LoopFillZerobss>

080059ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80059ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80059bc:	f842 3b04 	str.w	r3, [r2], #4

080059c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80059c0:	4b08      	ldr	r3, [pc, #32]	@ (80059e4 <LoopForever+0x16>)
	cmp	r2, r3
 80059c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80059c4:	d3f9      	bcc.n	80059ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059c6:	f010 f9ad 	bl	8015d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059ca:	f7fc f805 	bl	80019d8 <main>

080059ce <LoopForever>:

LoopForever:
    b LoopForever
 80059ce:	e7fe      	b.n	80059ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80059d0:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80059d4:	08018e64 	.word	0x08018e64
	ldr	r0, =_sdata
 80059d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80059dc:	20000374 	.word	0x20000374
	ldr	r2, =_sbss
 80059e0:	20000378 	.word	0x20000378
	ldr	r3, = _ebss
 80059e4:	200045b0 	.word	0x200045b0

080059e8 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059e8:	e7fe      	b.n	80059e8 <ADC4_IRQHandler>
	...

080059ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059f0:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <HAL_Init+0x50>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <HAL_Init+0x50>)
 80059f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059fc:	2003      	movs	r0, #3
 80059fe:	f002 fb97 	bl	8008130 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a02:	f007 ffe7 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <HAL_Init+0x54>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	490c      	ldr	r1, [pc, #48]	@ (8005a44 <HAL_Init+0x58>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	4a0b      	ldr	r2, [pc, #44]	@ (8005a48 <HAL_Init+0x5c>)
 8005a1a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005a1c:	2004      	movs	r0, #4
 8005a1e:	f002 fbe1 	bl	80081e4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a22:	200f      	movs	r0, #15
 8005a24:	f000 f812 	bl	8005a4c <HAL_InitTick>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e002      	b.n	8005a38 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a32:	f7fe fc1b 	bl	800426c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40022000 	.word	0x40022000
 8005a40:	46020c00 	.word	0x46020c00
 8005a44:	0801894c 	.word	0x0801894c
 8005a48:	20000190 	.word	0x20000190

08005a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005a58:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <HAL_InitTick+0xdc>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e05c      	b.n	8005b1e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8005a64:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <HAL_InitTick+0xe0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d10c      	bne.n	8005a8a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005a70:	4b2f      	ldr	r3, [pc, #188]	@ (8005b30 <HAL_InitTick+0xe4>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b2c      	ldr	r3, [pc, #176]	@ (8005b28 <HAL_InitTick+0xdc>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e037      	b.n	8005afa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8005a8a:	f002 fc03 	bl	8008294 <HAL_SYSTICK_GetCLKSourceConfig>
 8005a8e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d023      	beq.n	8005ade <HAL_InitTick+0x92>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d82d      	bhi.n	8005af8 <HAL_InitTick+0xac>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_InitTick+0x5e>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00d      	beq.n	8005ac4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005aa8:	e026      	b.n	8005af8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8005aaa:	4b21      	ldr	r3, [pc, #132]	@ (8005b30 <HAL_InitTick+0xe4>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b1e      	ldr	r3, [pc, #120]	@ (8005b28 <HAL_InitTick+0xdc>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	60fb      	str	r3, [r7, #12]
        break;
 8005ac2:	e01a      	b.n	8005afa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005ac4:	4b18      	ldr	r3, [pc, #96]	@ (8005b28 <HAL_InitTick+0xdc>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ad2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	60fb      	str	r3, [r7, #12]
        break;
 8005adc:	e00d      	b.n	8005afa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005ade:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <HAL_InitTick+0xdc>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	60fb      	str	r3, [r7, #12]
        break;
 8005af6:	e000      	b.n	8005afa <HAL_InitTick+0xae>
        break;
 8005af8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f002 fb50 	bl	80081a0 <HAL_SYSTICK_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e009      	b.n	8005b1e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	f002 fb18 	bl	8008146 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005b16:	4a07      	ldr	r2, [pc, #28]	@ (8005b34 <HAL_InitTick+0xe8>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200001a8 	.word	0x200001a8
 8005b2c:	e000e010 	.word	0xe000e010
 8005b30:	20000190 	.word	0x20000190
 8005b34:	200001a4 	.word	0x200001a4

08005b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_IncTick+0x20>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_IncTick+0x24>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4413      	add	r3, r2
 8005b48:	4a04      	ldr	r2, [pc, #16]	@ (8005b5c <HAL_IncTick+0x24>)
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	200001a8 	.word	0x200001a8
 8005b5c:	20004460 	.word	0x20004460

08005b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return uwTick;
 8005b64:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <HAL_GetTick+0x14>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20004460 	.word	0x20004460

08005b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b80:	f7ff ffee 	bl	8005b60 <HAL_GetTick>
 8005b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d005      	beq.n	8005b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b92:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <HAL_Delay+0x44>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b9e:	bf00      	nop
 8005ba0:	f7ff ffde 	bl	8005b60 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d8f7      	bhi.n	8005ba0 <HAL_Delay+0x28>
  {
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	200001a8 	.word	0x200001a8

08005bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a0a      	ldr	r2, [pc, #40]	@ (8005c64 <LL_ADC_SetResolution+0x3c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d104      	bne.n	8005c48 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f023 020c 	bic.w	r2, r3, #12
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	46021000 	.word	0x46021000

08005c68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3360      	adds	r3, #96	@ 0x60
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	430b      	orrs	r3, r1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3360      	adds	r3, #96	@ 0x60
 8005cb8:	461a      	mov	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b087      	sub	sp, #28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3360      	adds	r3, #96	@ 0x60
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	601a      	str	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3360      	adds	r3, #96	@ 0x60
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	601a      	str	r2, [r3, #0]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b087      	sub	sp, #28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3360      	adds	r3, #96	@ 0x60
 8005d52:	461a      	mov	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	601a      	str	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	d002      	beq.n	8005daa <LL_ADC_SetGainCompensation+0x32>
 8005da4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005da8:	e000      	b.n	8005dac <LL_ADC_SetGainCompensation+0x34>
 8005daa:	2200      	movs	r2, #0
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2107      	movs	r1, #7
 8005dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	401a      	ands	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	@ 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d020      	beq.n	8005e7a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3330      	adds	r3, #48	@ 0x30
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	4413      	add	r3, r2
 8005e4a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	211f      	movs	r1, #31
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	401a      	ands	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0e9b      	lsrs	r3, r3, #26
 8005e64:	f003 011f 	and.w	r1, r3, #31
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e72:	431a      	orrs	r2, r3
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8005e78:	e02b      	b.n	8005ed2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	210f      	movs	r1, #15
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	401a      	ands	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	0e9b      	lsrs	r3, r3, #26
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	e010      	b.n	8005ec4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	fa93 f3a3 	rbit	r3, r3
 8005eac:	613b      	str	r3, [r7, #16]
  return result;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8005eb8:	2320      	movs	r3, #32
 8005eba:	e003      	b.n	8005ec4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	fab3 f383 	clz	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	f001 011f 	and.w	r1, r1, #31
 8005eca:	408b      	lsls	r3, r1
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ed2:	bf00      	nop
 8005ed4:	3724      	adds	r7, #36	@ 0x24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	46021000 	.word	0x46021000

08005ee4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d107      	bne.n	8005f08 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	0e9b      	lsrs	r3, r3, #26
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	2201      	movs	r2, #1
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	e015      	b.n	8005f34 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	fa93 f3a3 	rbit	r3, r3
 8005f12:	60fb      	str	r3, [r7, #12]
  return result;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e003      	b.n	8005f2a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	fab3 f383 	clz	r3, r3
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	2201      	movs	r2, #1
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	0e9b      	lsrs	r3, r3, #26
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2101      	movs	r1, #1
 8005f62:	fa01 f303 	lsl.w	r3, r1, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	401a      	ands	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0303 	and.w	r3, r3, #3
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b08b      	sub	sp, #44	@ 0x2c
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a2d      	ldr	r2, [pc, #180]	@ (8006080 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d042      	beq.n	8006056 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <LL_ADC_SetChannelSamplingTime+0x28>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	0e9b      	lsrs	r3, r3, #26
 8005fde:	f003 021f 	and.w	r2, r3, #31
 8005fe2:	e011      	b.n	8006008 <LL_ADC_SetChannelSamplingTime+0x4c>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	fa93 f3a3 	rbit	r3, r3
 8005fee:	617b      	str	r3, [r7, #20]
  return result;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8005ffa:	2320      	movs	r3, #32
 8005ffc:	e003      	b.n	8006006 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fab3 f383 	clz	r3, r3
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	0e5b      	lsrs	r3, r3, #25
 800600c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8006010:	460b      	mov	r3, r1
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3314      	adds	r3, #20
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	0e5b      	lsrs	r3, r3, #25
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	4413      	add	r3, r2
 8006034:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	2107      	movs	r1, #7
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	401a      	ands	r2, r3
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	431a      	orrs	r2, r3
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8006054:	e00e      	b.n	8006074 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	43db      	mvns	r3, r3
 8006060:	401a      	ands	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	0219      	lsls	r1, r3, #8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	400b      	ands	r3, r1
 800606a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800606e:	431a      	orrs	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	615a      	str	r2, [r3, #20]
}
 8006074:	bf00      	nop
 8006076:	372c      	adds	r7, #44	@ 0x2c
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	46021000 	.word	0x46021000

08006084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800609c:	43db      	mvns	r3, r3
 800609e:	401a      	ands	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0318 	and.w	r3, r3, #24
 80060a6:	4908      	ldr	r1, [pc, #32]	@ (80060c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80060a8:	40d9      	lsrs	r1, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	400b      	ands	r3, r1
 80060ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060b2:	431a      	orrs	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	000fffff 	.word	0x000fffff

080060cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 031f 	and.w	r3, r3, #31
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006114:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6093      	str	r3, [r2, #8]
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800613c:	d101      	bne.n	8006142 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006164:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800618c:	d101      	bne.n	8006192 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061b4:	f043 0201 	orr.w	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	609a      	str	r2, [r3, #8]
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <LL_ADC_IsEnabled+0x18>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <LL_ADC_IsEnabled+0x1a>
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006202:	f043 0204 	orr.w	r2, r3, #4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	609a      	str	r2, [r3, #8]
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d101      	bne.n	800622e <LL_ADC_REG_IsConversionOngoing+0x18>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d101      	bne.n	8006254 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b08b      	sub	sp, #44	@ 0x2c
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8006272:	2300      	movs	r3, #0
 8006274:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e2ce      	b.n	8006822 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a95      	ldr	r2, [pc, #596]	@ (80064e8 <HAL_ADC_Init+0x284>)
 8006292:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7fd ffff 	bl	80042a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff ff37 	bl	8006128 <LL_ADC_IsDeepPowerDownEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff ff1d 	bl	8006104 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff52 	bl	8006178 <LL_ADC_IsInternalRegulatorEnabled>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d115      	bne.n	8006306 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ff36 	bl	8006150 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062e4:	4b81      	ldr	r3, [pc, #516]	@ (80064ec <HAL_ADC_Init+0x288>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	099b      	lsrs	r3, r3, #6
 80062ea:	4a81      	ldr	r2, [pc, #516]	@ (80064f0 <HAL_ADC_Init+0x28c>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	099b      	lsrs	r3, r3, #6
 80062f2:	3301      	adds	r3, #1
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80062f8:	e002      	b.n	8006300 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f9      	bne.n	80062fa <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff ff34 	bl	8006178 <LL_ADC_IsInternalRegulatorEnabled>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10e      	bne.n	8006334 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800631a:	f043 0210 	orr.w	r2, r3, #16
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff6c 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 800633e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 825f 	bne.w	800680c <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 825b 	bne.w	800680c <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800635a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800635e:	f043 0202 	orr.w	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff ff2c 	bl	80061c8 <LL_ADC_IsEnabled>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d14f      	bne.n	8006416 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5b      	ldr	r2, [pc, #364]	@ (80064e8 <HAL_ADC_Init+0x284>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d037      	beq.n	80063f0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5b      	ldr	r2, [pc, #364]	@ (80064f4 <HAL_ADC_Init+0x290>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_ADC_Init+0x130>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a5a      	ldr	r2, [pc, #360]	@ (80064f8 <HAL_ADC_Init+0x294>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d10e      	bne.n	80063b2 <HAL_ADC_Init+0x14e>
 8006394:	4857      	ldr	r0, [pc, #348]	@ (80064f4 <HAL_ADC_Init+0x290>)
 8006396:	f7ff ff17 	bl	80061c8 <LL_ADC_IsEnabled>
 800639a:	4604      	mov	r4, r0
 800639c:	4856      	ldr	r0, [pc, #344]	@ (80064f8 <HAL_ADC_Init+0x294>)
 800639e:	f7ff ff13 	bl	80061c8 <LL_ADC_IsEnabled>
 80063a2:	4603      	mov	r3, r0
 80063a4:	4323      	orrs	r3, r4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e008      	b.n	80063c4 <HAL_ADC_Init+0x160>
 80063b2:	484d      	ldr	r0, [pc, #308]	@ (80064e8 <HAL_ADC_Init+0x284>)
 80063b4:	f7ff ff08 	bl	80061c8 <LL_ADC_IsEnabled>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d026      	beq.n	8006416 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a49      	ldr	r2, [pc, #292]	@ (80064f4 <HAL_ADC_Init+0x290>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_ADC_Init+0x178>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a48      	ldr	r2, [pc, #288]	@ (80064f8 <HAL_ADC_Init+0x294>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d101      	bne.n	80063e0 <HAL_ADC_Init+0x17c>
 80063dc:	4a47      	ldr	r2, [pc, #284]	@ (80064fc <HAL_ADC_Init+0x298>)
 80063de:	e000      	b.n	80063e2 <HAL_ADC_Init+0x17e>
 80063e0:	4a47      	ldr	r2, [pc, #284]	@ (8006500 <HAL_ADC_Init+0x29c>)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7ff fbe9 	bl	8005bc0 <LL_ADC_SetCommonClock>
 80063ee:	e012      	b.n	8006416 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7ff fc14 	bl	8005c28 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8006400:	4b3f      	ldr	r3, [pc, #252]	@ (8006500 <HAL_ADC_Init+0x29c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8006410:	493b      	ldr	r1, [pc, #236]	@ (8006500 <HAL_ADC_Init+0x29c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a33      	ldr	r2, [pc, #204]	@ (80064e8 <HAL_ADC_Init+0x284>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d010      	beq.n	8006442 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006426:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800642c:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8006432:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800643a:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800643c:	4313      	orrs	r3, r2
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	e035      	b.n	80064ae <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7f1b      	ldrb	r3, [r3, #28]
 8006446:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800644e:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006450:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006456:	2a00      	cmp	r2, #0
 8006458:	d002      	beq.n	8006460 <HAL_ADC_Init+0x1fc>
 800645a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800645e:	e000      	b.n	8006462 <HAL_ADC_Init+0x1fe>
 8006460:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006462:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006468:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	da04      	bge.n	800647c <HAL_ADC_Init+0x218>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800647a:	e001      	b.n	8006480 <HAL_ADC_Init+0x21c>
 800647c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8006480:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	491b      	ldr	r1, [pc, #108]	@ (80064f4 <HAL_ADC_Init+0x290>)
 8006488:	428b      	cmp	r3, r1
 800648a:	d004      	beq.n	8006496 <HAL_ADC_Init+0x232>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4919      	ldr	r1, [pc, #100]	@ (80064f8 <HAL_ADC_Init+0x294>)
 8006492:	428b      	cmp	r3, r1
 8006494:	d103      	bne.n	800649e <HAL_ADC_Init+0x23a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800649c:	e003      	b.n	80064a6 <HAL_ADC_Init+0x242>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064a4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80064a6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064a8:	6a3a      	ldr	r2, [r7, #32]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d131      	bne.n	800651c <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a0a      	ldr	r2, [pc, #40]	@ (80064e8 <HAL_ADC_Init+0x284>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	3b01      	subs	r3, #1
 80064c8:	045b      	lsls	r3, r3, #17
 80064ca:	6a3a      	ldr	r2, [r7, #32]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	623b      	str	r3, [r7, #32]
 80064d0:	e024      	b.n	800651c <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d113      	bne.n	8006504 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	e01a      	b.n	800651c <HAL_ADC_Init+0x2b8>
 80064e6:	bf00      	nop
 80064e8:	46021000 	.word	0x46021000
 80064ec:	20000190 	.word	0x20000190
 80064f0:	053e2d63 	.word	0x053e2d63
 80064f4:	42028000 	.word	0x42028000
 80064f8:	42028100 	.word	0x42028100
 80064fc:	42028300 	.word	0x42028300
 8006500:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006514:	f043 0201 	orr.w	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a75      	ldr	r2, [pc, #468]	@ (80066f8 <HAL_ADC_Init+0x494>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006532:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	4313      	orrs	r3, r2
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	4313      	orrs	r3, r2
 8006540:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	4b6c      	ldr	r3, [pc, #432]	@ (80066fc <HAL_ADC_Init+0x498>)
 800654a:	4013      	ands	r3, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	430b      	orrs	r3, r1
 8006554:	60d3      	str	r3, [r2, #12]
 8006556:	e031      	b.n	80065bc <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006564:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	4313      	orrs	r3, r2
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	4313      	orrs	r3, r2
 8006572:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	4b61      	ldr	r3, [pc, #388]	@ (8006700 <HAL_ADC_Init+0x49c>)
 800657c:	4013      	ands	r3, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	6a39      	ldr	r1, [r7, #32]
 8006584:	430b      	orrs	r3, r1
 8006586:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a4d      	ldr	r2, [pc, #308]	@ (80066f8 <HAL_ADC_Init+0x494>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f000 80a4 	beq.w	8006710 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fe22 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 80065d2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fe2f 	bl	800623c <LL_ADC_INJ_IsConversionOngoing>
 80065de:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d166      	bne.n	80066b4 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d163      	bne.n	80066b4 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7f1b      	ldrb	r3, [r3, #28]
 80065f0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4943      	ldr	r1, [pc, #268]	@ (8006704 <HAL_ADC_Init+0x4a0>)
 80065f8:	428b      	cmp	r3, r1
 80065fa:	d004      	beq.n	8006606 <HAL_ADC_Init+0x3a2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4941      	ldr	r1, [pc, #260]	@ (8006708 <HAL_ADC_Init+0x4a4>)
 8006602:	428b      	cmp	r3, r1
 8006604:	d102      	bne.n	800660c <HAL_ADC_Init+0x3a8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	e002      	b.n	8006612 <HAL_ADC_Init+0x3ae>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006612:	4313      	orrs	r3, r2
 8006614:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006620:	f023 0303 	bic.w	r3, r3, #3
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	6a39      	ldr	r1, [r7, #32]
 800662a:	430b      	orrs	r3, r1
 800662c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7ff fb99 	bl	8005d78 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800664c:	2b01      	cmp	r3, #1
 800664e:	d11e      	bne.n	800668e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006654:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	4b2b      	ldr	r3, [pc, #172]	@ (800670c <HAL_ADC_Init+0x4a8>)
 800665e:	4013      	ands	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006664:	0411      	lsls	r1, r2, #16
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800666a:	4311      	orrs	r1, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006670:	4311      	orrs	r1, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800667c:	0892      	lsrs	r2, r2, #2
 800667e:	430a      	orrs	r2, r1
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	611a      	str	r2, [r3, #16]
 800668c:	e007      	b.n	800669e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10c      	bne.n	80066d6 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	f023 010f 	bic.w	r1, r3, #15
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	1e5a      	subs	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80066d4:	e007      	b.n	80066e6 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 020f 	bic.w	r2, r2, #15
 80066e4:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80066f6:	e092      	b.n	800681e <HAL_ADC_Init+0x5ba>
 80066f8:	46021000 	.word	0x46021000
 80066fc:	fff0c013 	.word	0xfff0c013
 8006700:	ffde800d 	.word	0xffde800d
 8006704:	42028000 	.word	0x42028000
 8006708:	42028100 	.word	0x42028100
 800670c:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006716:	2b01      	cmp	r3, #1
 8006718:	d111      	bne.n	800673e <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8006722:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8006728:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800672e:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	4313      	orrs	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	4b39      	ldr	r3, [pc, #228]	@ (800682c <HAL_ADC_Init+0x5c8>)
 8006746:	4013      	ands	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	69f9      	ldr	r1, [r7, #28]
 800674e:	430b      	orrs	r3, r1
 8006750:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800675a:	461a      	mov	r2, r3
 800675c:	2100      	movs	r1, #0
 800675e:	f7ff fb2e 	bl	8005dbe <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676a:	461a      	mov	r2, r3
 800676c:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8006770:	f7ff fb25 	bl	8005dbe <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d108      	bne.n	800678e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f062 020f 	orn	r2, r2, #15
 800678a:	629a      	str	r2, [r3, #40]	@ 0x28
 800678c:	e018      	b.n	80067c0 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006796:	d113      	bne.n	80067c0 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	3b01      	subs	r3, #1
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	f003 031c 	and.w	r3, r3, #28
 80067aa:	f06f 020f 	mvn.w	r2, #15
 80067ae:	fa02 f103 	lsl.w	r1, r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006830 <HAL_ADC_Init+0x5cc>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d10b      	bne.n	80067e8 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	f043 0201 	orr.w	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80067e6:	e01a      	b.n	800681e <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067ec:	f023 0312 	bic.w	r3, r3, #18
 80067f0:	f043 0210 	orr.w	r2, r3, #16
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067fc:	f043 0201 	orr.w	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800680a:	e008      	b.n	800681e <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006810:	f043 0210 	orr.w	r2, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800681e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006822:	4618      	mov	r0, r3
 8006824:	372c      	adds	r7, #44	@ 0x2c
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}
 800682a:	bf00      	nop
 800682c:	f7fffc02 	.word	0xf7fffc02
 8006830:	833ffff3 	.word	0x833ffff3

08006834 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b0a2      	sub	sp, #136	@ 0x88
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a98      	ldr	r2, [pc, #608]	@ (8006aa8 <HAL_ADC_Start_DMA+0x274>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_ADC_Start_DMA+0x20>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a97      	ldr	r2, [pc, #604]	@ (8006aac <HAL_ADC_Start_DMA+0x278>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d101      	bne.n	8006858 <HAL_ADC_Start_DMA+0x24>
 8006854:	4b96      	ldr	r3, [pc, #600]	@ (8006ab0 <HAL_ADC_Start_DMA+0x27c>)
 8006856:	e000      	b.n	800685a <HAL_ADC_Start_DMA+0x26>
 8006858:	4b96      	ldr	r3, [pc, #600]	@ (8006ab4 <HAL_ADC_Start_DMA+0x280>)
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fc36 	bl	80060cc <LL_ADC_GetMultimode>
 8006860:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fcd5 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 8111 	bne.w	8006a96 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_ADC_Start_DMA+0x4e>
 800687e:	2302      	movs	r3, #2
 8006880:	e10e      	b.n	8006aa0 <HAL_ADC_Start_DMA+0x26c>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800688a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006890:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006892:	2b05      	cmp	r3, #5
 8006894:	d003      	beq.n	800689e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006896:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006898:	2b09      	cmp	r3, #9
 800689a:	f040 80f4 	bne.w	8006a86 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f001 fa2c 	bl	8007cfc <ADC_Enable>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80068aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 80e4 	bne.w	8006a7c <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a7a      	ldr	r2, [pc, #488]	@ (8006ab8 <HAL_ADC_Start_DMA+0x284>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d026      	beq.n	8006920 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a75      	ldr	r2, [pc, #468]	@ (8006aac <HAL_ADC_Start_DMA+0x278>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d002      	beq.n	80068e2 <HAL_ADC_Start_DMA+0xae>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	e000      	b.n	80068e4 <HAL_ADC_Start_DMA+0xb0>
 80068e2:	4b71      	ldr	r3, [pc, #452]	@ (8006aa8 <HAL_ADC_Start_DMA+0x274>)
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d002      	beq.n	80068f2 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800690e:	f023 0206 	bic.w	r2, r3, #6
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006916:	e006      	b.n	8006926 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800691e:	e002      	b.n	8006926 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	4a64      	ldr	r2, [pc, #400]	@ (8006abc <HAL_ADC_Start_DMA+0x288>)
 800692c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	4a63      	ldr	r2, [pc, #396]	@ (8006ac0 <HAL_ADC_Start_DMA+0x28c>)
 8006934:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693a:	4a62      	ldr	r2, [pc, #392]	@ (8006ac4 <HAL_ADC_Start_DMA+0x290>)
 800693c:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	221c      	movs	r2, #28
 8006944:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0210 	orr.w	r2, r2, #16
 800695c:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a55      	ldr	r2, [pc, #340]	@ (8006ab8 <HAL_ADC_Start_DMA+0x284>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d107      	bne.n	8006978 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04f      	beq.n	8006a26 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800698c:	2b00      	cmp	r3, #0
 800698e:	d046      	beq.n	8006a1e <HAL_ADC_Start_DMA+0x1ea>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d040      	beq.n	8006a1e <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f002 fe14 	bl	80095d8 <HAL_DMAEx_List_GetNodeConfig>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e072      	b.n	8006aa0 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d104      	bne.n	80069ca <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069c8:	e00a      	b.n	80069e0 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d104      	bne.n	80069da <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069d8:	e002      	b.n	80069e0 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ec:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 fd37 	bl	8009484 <HAL_DMAEx_List_Start_IT>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006a1c:	e028      	b.n	8006a70 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006a24:	e024      	b.n	8006a70 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d104      	bne.n	8006a3a <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a38:	e00c      	b.n	8006a54 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d104      	bne.n	8006a4e <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a4c:	e002      	b.n	8006a54 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3340      	adds	r3, #64	@ 0x40
 8006a5e:	4619      	mov	r1, r3
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a66:	f001 fd7b 	bl	8008560 <HAL_DMA_Start_IT>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fbba 	bl	80061ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006a7a:	e00f      	b.n	8006a9c <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8006a84:	e00a      	b.n	8006a9c <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8006a94:	e002      	b.n	8006a9c <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
 8006a98:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8006a9c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3788      	adds	r7, #136	@ 0x88
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	42028000 	.word	0x42028000
 8006aac:	42028100 	.word	0x42028100
 8006ab0:	42028300 	.word	0x42028300
 8006ab4:	46021300 	.word	0x46021300
 8006ab8:	46021000 	.word	0x46021000
 8006abc:	08007e31 	.word	0x08007e31
 8006ac0:	08007f09 	.word	0x08007f09
 8006ac4:	08007f25 	.word	0x08007f25

08006ac8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	@ 0x28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a77      	ldr	r2, [pc, #476]	@ (8006cc8 <HAL_ADC_IRQHandler+0x200>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_ADC_IRQHandler+0x30>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a76      	ldr	r2, [pc, #472]	@ (8006ccc <HAL_ADC_IRQHandler+0x204>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_ADC_IRQHandler+0x34>
 8006af8:	4b75      	ldr	r3, [pc, #468]	@ (8006cd0 <HAL_ADC_IRQHandler+0x208>)
 8006afa:	e000      	b.n	8006afe <HAL_ADC_IRQHandler+0x36>
 8006afc:	4b75      	ldr	r3, [pc, #468]	@ (8006cd4 <HAL_ADC_IRQHandler+0x20c>)
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fae4 	bl	80060cc <LL_ADC_GetMultimode>
 8006b04:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d017      	beq.n	8006b40 <HAL_ADC_IRQHandler+0x78>
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d012      	beq.n	8006b40 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b2a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 fa2e 	bl	8007f94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <HAL_ADC_IRQHandler+0x8c>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80d1 	beq.w	8006d02 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80cb 	beq.w	8006d02 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a53      	ldr	r2, [pc, #332]	@ (8006cd8 <HAL_ADC_IRQHandler+0x210>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d06c      	beq.n	8006c68 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff f932 	bl	8005dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80aa 	beq.w	8006cf4 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a49      	ldr	r2, [pc, #292]	@ (8006ccc <HAL_ADC_IRQHandler+0x204>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d002      	beq.n	8006bb0 <HAL_ADC_IRQHandler+0xe8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	e000      	b.n	8006bb2 <HAL_ADC_IRQHandler+0xea>
 8006bb0:	4b45      	ldr	r3, [pc, #276]	@ (8006cc8 <HAL_ADC_IRQHandler+0x200>)
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d008      	beq.n	8006bcc <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d002      	beq.n	8006bcc <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b09      	cmp	r3, #9
 8006bca:	d104      	bne.n	8006bd6 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	623b      	str	r3, [r7, #32]
 8006bd4:	e00c      	b.n	8006bf0 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a3c      	ldr	r2, [pc, #240]	@ (8006ccc <HAL_ADC_IRQHandler+0x204>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d002      	beq.n	8006be6 <HAL_ADC_IRQHandler+0x11e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	e000      	b.n	8006be8 <HAL_ADC_IRQHandler+0x120>
 8006be6:	4b38      	ldr	r3, [pc, #224]	@ (8006cc8 <HAL_ADC_IRQHandler+0x200>)
 8006be8:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d17c      	bne.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d175      	bne.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fb02 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11a      	bne.n	8006c4e <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 020c 	bic.w	r2, r2, #12
 8006c26:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d159      	bne.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c44:	f043 0201 	orr.w	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	679a      	str	r2, [r3, #120]	@ 0x78
 8006c4c:	e052      	b.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c52:	f043 0210 	orr.w	r2, r3, #16
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c5e:	f043 0201 	orr.w	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006c66:	e045      	b.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff f8c5 	bl	8005dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d03d      	beq.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d138      	bne.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d131      	bne.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fabe 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d11d      	bne.n	8006cdc <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 020c 	bic.w	r2, r2, #12
 8006cae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	679a      	str	r2, [r3, #120]	@ 0x78
 8006cc4:	e016      	b.n	8006cf4 <HAL_ADC_IRQHandler+0x22c>
 8006cc6:	bf00      	nop
 8006cc8:	42028000 	.word	0x42028000
 8006ccc:	42028100 	.word	0x42028100
 8006cd0:	42028300 	.word	0x42028300
 8006cd4:	46021300 	.word	0x46021300
 8006cd8:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cec:	f043 0201 	orr.w	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f99d 	bl	8007034 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	220c      	movs	r2, #12
 8006d00:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a8c      	ldr	r2, [pc, #560]	@ (8006f38 <HAL_ADC_IRQHandler+0x470>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	f000 8095 	beq.w	8006e38 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <HAL_ADC_IRQHandler+0x25a>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8085 	beq.w	8006e38 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07f      	beq.n	8006e38 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d105      	bne.n	8006d50 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff f91e 	bl	8005f96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006d5a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff f84b 	bl	8005dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d66:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a73      	ldr	r2, [pc, #460]	@ (8006f3c <HAL_ADC_IRQHandler+0x474>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d002      	beq.n	8006d78 <HAL_ADC_IRQHandler+0x2b0>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	e000      	b.n	8006d7a <HAL_ADC_IRQHandler+0x2b2>
 8006d78:	4b71      	ldr	r3, [pc, #452]	@ (8006f40 <HAL_ADC_IRQHandler+0x478>)
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d008      	beq.n	8006d94 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b06      	cmp	r3, #6
 8006d8c:	d002      	beq.n	8006d94 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	d104      	bne.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	623b      	str	r3, [r7, #32]
 8006d9c:	e00c      	b.n	8006db8 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a66      	ldr	r2, [pc, #408]	@ (8006f3c <HAL_ADC_IRQHandler+0x474>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d002      	beq.n	8006dae <HAL_ADC_IRQHandler+0x2e6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	e000      	b.n	8006db0 <HAL_ADC_IRQHandler+0x2e8>
 8006dae:	4b64      	ldr	r3, [pc, #400]	@ (8006f40 <HAL_ADC_IRQHandler+0x478>)
 8006db0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d035      	beq.n	8006e2a <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_ADC_IRQHandler+0x310>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d02d      	beq.n	8006e2a <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d128      	bne.n	8006e2a <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de2:	2b40      	cmp	r3, #64	@ 0x40
 8006de4:	d121      	bne.n	8006e2a <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fa26 	bl	800623c <LL_ADC_INJ_IsConversionOngoing>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d119      	bne.n	8006e2a <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e04:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e22:	f043 0201 	orr.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f894 	bl	8007f58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2260      	movs	r2, #96	@ 0x60
 8006e36:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d011      	beq.n	8006e66 <HAL_ADC_IRQHandler+0x39e>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00c      	beq.n	8006e66 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f8ff 	bl	800705c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2280      	movs	r2, #128	@ 0x80
 8006e64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d012      	beq.n	8006e96 <HAL_ADC_IRQHandler+0x3ce>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f870 	bl	8007f6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d012      	beq.n	8006ec6 <HAL_ADC_IRQHandler+0x3fe>
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00d      	beq.n	8006ec6 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006eae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f862 	bl	8007f80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ec4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d05d      	beq.n	8006f8c <HAL_ADC_IRQHandler+0x4c4>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d058      	beq.n	8006f8c <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee6:	e03b      	b.n	8006f60 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a12      	ldr	r2, [pc, #72]	@ (8006f38 <HAL_ADC_IRQHandler+0x470>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d02c      	beq.n	8006f4c <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a10      	ldr	r2, [pc, #64]	@ (8006f40 <HAL_ADC_IRQHandler+0x478>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_ADC_IRQHandler+0x444>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a0d      	ldr	r2, [pc, #52]	@ (8006f3c <HAL_ADC_IRQHandler+0x474>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d101      	bne.n	8006f10 <HAL_ADC_IRQHandler+0x448>
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f44 <HAL_ADC_IRQHandler+0x47c>)
 8006f0e:	e000      	b.n	8006f12 <HAL_ADC_IRQHandler+0x44a>
 8006f10:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <HAL_ADC_IRQHandler+0x480>)
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f8e8 	bl	80060e8 <LL_ADC_GetMultiDMATransfer>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d020      	beq.n	8006f60 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f22:	e01d      	b.n	8006f60 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8006f32:	2301      	movs	r3, #1
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f36:	e013      	b.n	8006f60 <HAL_ADC_IRQHandler+0x498>
 8006f38:	46021000 	.word	0x46021000
 8006f3c:	42028100 	.word	0x42028100
 8006f40:	42028000 	.word	0x42028000
 8006f44:	42028300 	.word	0x42028300
 8006f48:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff f812 	bl	8005f7a <LL_ADC_REG_GetDMATransfer>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d10e      	bne.n	8006f84 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f6a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f76:	f043 0202 	orr.w	r2, r3, #2
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f876 	bl	8007070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2210      	movs	r2, #16
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01b      	beq.n	8006fce <HAL_ADC_IRQHandler+0x506>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f877 	bl	80070ac <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0201 	bic.w	r2, r2, #1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	@ (8007030 <HAL_ADC_IRQHandler+0x568>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d126      	bne.n	8007026 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_ADC_IRQHandler+0x534>
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f849 	bl	8007084 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ffa:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <HAL_ADC_IRQHandler+0x55e>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f841 	bl	8007098 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007024:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007026:	bf00      	nop
 8007028:	3728      	adds	r7, #40	@ 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	46021000 	.word	0x46021000

08007034 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80070c0:	b590      	push	{r4, r7, lr}
 80070c2:	b0b7      	sub	sp, #220	@ 0xdc
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4aa8      	ldr	r2, [pc, #672]	@ (800737c <HAL_ADC_ConfigChannel+0x2bc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d103      	bne.n	80070e6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x36>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f000 bdfe 	b.w	8007cf2 <HAL_ADC_ConfigChannel+0xc32>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff f887 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 85c1 	bne.w	8007c92 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a99      	ldr	r2, [pc, #612]	@ (800737c <HAL_ADC_ConfigChannel+0x2bc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	f000 8409 	beq.w	800792e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <HAL_ADC_ConfigChannel+0x7a>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	0e9b      	lsrs	r3, r3, #26
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2201      	movs	r2, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	e01d      	b.n	8007176 <HAL_ADC_ConfigChannel+0xb6>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007146:	fa93 f3a3 	rbit	r3, r3
 800714a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800714e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007152:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8007156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800715e:	2320      	movs	r3, #32
 8007160:	e004      	b.n	800716c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8007162:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007166:	fab3 f383 	clz	r3, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2201      	movs	r2, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	69d1      	ldr	r1, [r2, #28]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	430b      	orrs	r3, r1
 8007182:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	f7fe fe47 	bl	8005e24 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff f83b 	bl	8006216 <LL_ADC_REG_IsConversionOngoing>
 80071a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff f847 	bl	800623c <LL_ADC_INJ_IsConversionOngoing>
 80071ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80071b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 81df 	bne.w	800757a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80071bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 81da 	bne.w	800757a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6819      	ldr	r1, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7fe fef2 	bl	8005fbc <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d046      	beq.n	8007288 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6919      	ldr	r1, [r3, #16]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800720a:	f7fe fd2d 	bl	8005c68 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6919      	ldr	r1, [r3, #16]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	461a      	mov	r2, r3
 800721c:	f7fe fd5b 	bl	8005cd6 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	7e9b      	ldrb	r3, [r3, #26]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d11e      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <HAL_ADC_ConfigChannel+0x17e>
 8007238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800723c:	e000      	b.n	8007240 <HAL_ADC_ConfigChannel+0x180>
 800723e:	2300      	movs	r3, #0
 8007240:	461a      	mov	r2, r3
 8007242:	f7fe fd7e 	bl	8005d42 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007252:	2b01      	cmp	r3, #1
 8007254:	d102      	bne.n	800725c <HAL_ADC_ConfigChannel+0x19c>
 8007256:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800725a:	e000      	b.n	800725e <HAL_ADC_ConfigChannel+0x19e>
 800725c:	2300      	movs	r3, #0
 800725e:	461a      	mov	r2, r3
 8007260:	f7fe fd54 	bl	8005d0c <LL_ADC_SetOffsetSignedSaturation>
 8007264:	e189      	b.n	800757a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2200      	movs	r2, #0
 8007270:	4619      	mov	r1, r3
 8007272:	f7fe fd66 	bl	8005d42 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2200      	movs	r2, #0
 8007280:	4619      	mov	r1, r3
 8007282:	f7fe fd43 	bl	8005d0c <LL_ADC_SetOffsetSignedSaturation>
 8007286:	e178      	b.n	800757a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fd0b 	bl	8005caa <LL_ADC_GetOffsetChannel>
 8007294:	4603      	mov	r3, r0
 8007296:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <HAL_ADC_ConfigChannel+0x1f4>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2100      	movs	r1, #0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fd00 	bl	8005caa <LL_ADC_GetOffsetChannel>
 80072aa:	4603      	mov	r3, r0
 80072ac:	0e9b      	lsrs	r3, r3, #26
 80072ae:	f003 021f 	and.w	r2, r3, #31
 80072b2:	e01e      	b.n	80072f2 <HAL_ADC_ConfigChannel+0x232>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fcf5 	bl	8005caa <LL_ADC_GetOffsetChannel>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ca:	fa93 f3a3 	rbit	r3, r3
 80072ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80072d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80072da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80072e2:	2320      	movs	r3, #32
 80072e4:	e004      	b.n	80072f0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80072e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_ADC_ConfigChannel+0x24a>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	0e9b      	lsrs	r3, r3, #26
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	e018      	b.n	800733c <HAL_ADC_ConfigChannel+0x27c>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800731e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800732e:	2320      	movs	r3, #32
 8007330:	e004      	b.n	800733c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8007332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007336:	fab3 f383 	clz	r3, r3
 800733a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800733c:	429a      	cmp	r2, r3
 800733e:	d107      	bne.n	8007350 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	2300      	movs	r3, #0
 800734a:	2100      	movs	r1, #0
 800734c:	f7fe fc8c 	bl	8005c68 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fca7 	bl	8005caa <LL_ADC_GetOffsetChannel>
 800735c:	4603      	mov	r3, r0
 800735e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10c      	bne.n	8007380 <HAL_ADC_ConfigChannel+0x2c0>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2101      	movs	r1, #1
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fc9c 	bl	8005caa <LL_ADC_GetOffsetChannel>
 8007372:	4603      	mov	r3, r0
 8007374:	0e9b      	lsrs	r3, r3, #26
 8007376:	f003 021f 	and.w	r2, r3, #31
 800737a:	e020      	b.n	80073be <HAL_ADC_ConfigChannel+0x2fe>
 800737c:	46021000 	.word	0x46021000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fc8f 	bl	8005caa <LL_ADC_GetOffsetChannel>
 800738c:	4603      	mov	r3, r0
 800738e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007392:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007396:	fa93 f3a3 	rbit	r3, r3
 800739a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800739e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80073a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80073ae:	2320      	movs	r3, #32
 80073b0:	e004      	b.n	80073bc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80073b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073b6:	fab3 f383 	clz	r3, r3
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <HAL_ADC_ConfigChannel+0x316>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	0e9b      	lsrs	r3, r3, #26
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	e018      	b.n	8007408 <HAL_ADC_ConfigChannel+0x348>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80073ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80073f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80073fa:	2320      	movs	r3, #32
 80073fc:	e004      	b.n	8007408 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80073fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007402:	fab3 f383 	clz	r3, r3
 8007406:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007408:	429a      	cmp	r2, r3
 800740a:	d107      	bne.n	800741c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	2300      	movs	r3, #0
 8007416:	2101      	movs	r1, #1
 8007418:	f7fe fc26 	bl	8005c68 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fc41 	bl	8005caa <LL_ADC_GetOffsetChannel>
 8007428:	4603      	mov	r3, r0
 800742a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <HAL_ADC_ConfigChannel+0x388>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2102      	movs	r1, #2
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fc36 	bl	8005caa <LL_ADC_GetOffsetChannel>
 800743e:	4603      	mov	r3, r0
 8007440:	0e9b      	lsrs	r3, r3, #26
 8007442:	f003 021f 	and.w	r2, r3, #31
 8007446:	e01a      	b.n	800747e <HAL_ADC_ConfigChannel+0x3be>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2102      	movs	r1, #2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fc2b 	bl	8005caa <LL_ADC_GetOffsetChannel>
 8007454:	4603      	mov	r3, r0
 8007456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800745a:	fa93 f3a3 	rbit	r3, r3
 800745e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007462:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007466:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800746e:	2320      	movs	r3, #32
 8007470:	e004      	b.n	800747c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8007472:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007476:	fab3 f383 	clz	r3, r3
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <HAL_ADC_ConfigChannel+0x3d6>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	0e9b      	lsrs	r3, r3, #26
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	e011      	b.n	80074ba <HAL_ADC_ConfigChannel+0x3fa>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800749e:	fa93 f3a3 	rbit	r3, r3
 80074a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80074a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80074a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80074ae:	2320      	movs	r3, #32
 80074b0:	e003      	b.n	80074ba <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80074b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074b4:	fab3 f383 	clz	r3, r3
 80074b8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d107      	bne.n	80074ce <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	2102      	movs	r1, #2
 80074ca:	f7fe fbcd 	bl	8005c68 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2103      	movs	r1, #3
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fbe8 	bl	8005caa <LL_ADC_GetOffsetChannel>
 80074da:	4603      	mov	r3, r0
 80074dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x43a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2103      	movs	r1, #3
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fbdd 	bl	8005caa <LL_ADC_GetOffsetChannel>
 80074f0:	4603      	mov	r3, r0
 80074f2:	0e9b      	lsrs	r3, r3, #26
 80074f4:	f003 021f 	and.w	r2, r3, #31
 80074f8:	e017      	b.n	800752a <HAL_ADC_ConfigChannel+0x46a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2103      	movs	r1, #3
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fbd2 	bl	8005caa <LL_ADC_GetOffsetChannel>
 8007506:	4603      	mov	r3, r0
 8007508:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800750c:	fa93 f3a3 	rbit	r3, r3
 8007510:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007514:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800751c:	2320      	movs	r3, #32
 800751e:	e003      	b.n	8007528 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8007520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007522:	fab3 f383 	clz	r3, r3
 8007526:	b2db      	uxtb	r3, r3
 8007528:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <HAL_ADC_ConfigChannel+0x482>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0e9b      	lsrs	r3, r3, #26
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	e011      	b.n	8007566 <HAL_ADC_ConfigChannel+0x4a6>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800754a:	fa93 f3a3 	rbit	r3, r3
 800754e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007552:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007554:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800755a:	2320      	movs	r3, #32
 800755c:	e003      	b.n	8007566 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800755e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007560:	fab3 f383 	clz	r3, r3
 8007564:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007566:	429a      	cmp	r2, r3
 8007568:	d107      	bne.n	800757a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	2103      	movs	r1, #3
 8007576:	f7fe fb77 	bl	8005c68 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fe22 	bl	80061c8 <LL_ADC_IsEnabled>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 83ad 	bne.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	461a      	mov	r2, r3
 800759a:	f7fe fd73 	bl	8006084 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80075a6:	f040 80d6 	bne.w	8007756 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <HAL_ADC_ConfigChannel+0x50e>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	0e9b      	lsrs	r3, r3, #26
 80075bc:	3301      	adds	r3, #1
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	bf94      	ite	ls
 80075c6:	2301      	movls	r3, #1
 80075c8:	2300      	movhi	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	e019      	b.n	8007602 <HAL_ADC_ConfigChannel+0x542>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d6:	fa93 f3a3 	rbit	r3, r3
 80075da:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80075dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80075e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80075e6:	2320      	movs	r3, #32
 80075e8:	e003      	b.n	80075f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80075ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ec:	fab3 f383 	clz	r3, r3
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	3301      	adds	r3, #1
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	2b09      	cmp	r3, #9
 80075fa:	bf94      	ite	ls
 80075fc:	2301      	movls	r3, #1
 80075fe:	2300      	movhi	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d04d      	beq.n	80076a2 <HAL_ADC_ConfigChannel+0x5e2>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d107      	bne.n	8007622 <HAL_ADC_ConfigChannel+0x562>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	0e9b      	lsrs	r3, r3, #26
 8007618:	3301      	adds	r3, #1
 800761a:	069b      	lsls	r3, r3, #26
 800761c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007620:	e015      	b.n	800764e <HAL_ADC_ConfigChannel+0x58e>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800762a:	fa93 f3a3 	rbit	r3, r3
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007632:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800763a:	2320      	movs	r3, #32
 800763c:	e003      	b.n	8007646 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800763e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007640:	fab3 f383 	clz	r3, r3
 8007644:	b2db      	uxtb	r3, r3
 8007646:	3301      	adds	r3, #1
 8007648:	069b      	lsls	r3, r3, #26
 800764a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_ADC_ConfigChannel+0x5ae>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	0e9b      	lsrs	r3, r3, #26
 8007660:	3301      	adds	r3, #1
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2101      	movs	r1, #1
 8007668:	fa01 f303 	lsl.w	r3, r1, r3
 800766c:	e017      	b.n	800769e <HAL_ADC_ConfigChannel+0x5de>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007676:	fa93 f3a3 	rbit	r3, r3
 800767a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8007686:	2320      	movs	r3, #32
 8007688:	e003      	b.n	8007692 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800768a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768c:	fab3 f383 	clz	r3, r3
 8007690:	b2db      	uxtb	r3, r3
 8007692:	3301      	adds	r3, #1
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	4313      	orrs	r3, r2
 80076a0:	e04e      	b.n	8007740 <HAL_ADC_ConfigChannel+0x680>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d107      	bne.n	80076be <HAL_ADC_ConfigChannel+0x5fe>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	0e9b      	lsrs	r3, r3, #26
 80076b4:	3301      	adds	r3, #1
 80076b6:	069b      	lsls	r3, r3, #26
 80076b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076bc:	e015      	b.n	80076ea <HAL_ADC_ConfigChannel+0x62a>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	fa93 f3a3 	rbit	r3, r3
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80076d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80076d6:	2320      	movs	r3, #32
 80076d8:	e003      	b.n	80076e2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	fab3 f383 	clz	r3, r3
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	3301      	adds	r3, #1
 80076e4:	069b      	lsls	r3, r3, #26
 80076e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <HAL_ADC_ConfigChannel+0x64a>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	0e9b      	lsrs	r3, r3, #26
 80076fc:	3301      	adds	r3, #1
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2101      	movs	r1, #1
 8007704:	fa01 f303 	lsl.w	r3, r1, r3
 8007708:	e017      	b.n	800773a <HAL_ADC_ConfigChannel+0x67a>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	fa93 f3a3 	rbit	r3, r3
 8007716:	61bb      	str	r3, [r7, #24]
  return result;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8007722:	2320      	movs	r3, #32
 8007724:	e003      	b.n	800772e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	fab3 f383 	clz	r3, r3
 800772c:	b2db      	uxtb	r3, r3
 800772e:	3301      	adds	r3, #1
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2101      	movs	r1, #1
 8007736:	fa01 f303 	lsl.w	r3, r1, r3
 800773a:	4313      	orrs	r3, r2
 800773c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	461a      	mov	r2, r3
 800774e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8007752:	f7fe fc33 	bl	8005fbc <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f280 82c3 	bge.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a92      	ldr	r2, [pc, #584]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_ADC_ConfigChannel+0x6b4>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a91      	ldr	r2, [pc, #580]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d101      	bne.n	8007778 <HAL_ADC_ConfigChannel+0x6b8>
 8007774:	4b90      	ldr	r3, [pc, #576]	@ (80079b8 <HAL_ADC_ConfigChannel+0x8f8>)
 8007776:	e000      	b.n	800777a <HAL_ADC_ConfigChannel+0x6ba>
 8007778:	4b90      	ldr	r3, [pc, #576]	@ (80079bc <HAL_ADC_ConfigChannel+0x8fc>)
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fa46 	bl	8005c0c <LL_ADC_GetCommonPathInternalCh>
 8007780:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a89      	ldr	r2, [pc, #548]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <HAL_ADC_ConfigChannel+0x6d8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a88      	ldr	r2, [pc, #544]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d10e      	bne.n	80077b6 <HAL_ADC_ConfigChannel+0x6f6>
 8007798:	4885      	ldr	r0, [pc, #532]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 800779a:	f7fe fd15 	bl	80061c8 <LL_ADC_IsEnabled>
 800779e:	4604      	mov	r4, r0
 80077a0:	4884      	ldr	r0, [pc, #528]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 80077a2:	f7fe fd11 	bl	80061c8 <LL_ADC_IsEnabled>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4323      	orrs	r3, r4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf0c      	ite	eq
 80077ae:	2301      	moveq	r3, #1
 80077b0:	2300      	movne	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	e008      	b.n	80077c8 <HAL_ADC_ConfigChannel+0x708>
 80077b6:	4882      	ldr	r0, [pc, #520]	@ (80079c0 <HAL_ADC_ConfigChannel+0x900>)
 80077b8:	f7fe fd06 	bl	80061c8 <LL_ADC_IsEnabled>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf0c      	ite	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	2300      	movne	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80a6 	beq.w	800791a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a7c      	ldr	r2, [pc, #496]	@ (80079c4 <HAL_ADC_ConfigChannel+0x904>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d13c      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80077d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d136      	bne.n	8007852 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a71      	ldr	r2, [pc, #452]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00a      	beq.n	8007804 <HAL_ADC_ConfigChannel+0x744>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a70      	ldr	r2, [pc, #448]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d005      	beq.n	8007804 <HAL_ADC_ConfigChannel+0x744>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a70      	ldr	r2, [pc, #448]	@ (80079c0 <HAL_ADC_ConfigChannel+0x900>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	f040 826e 	bne.w	8007ce0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a69      	ldr	r2, [pc, #420]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_ADC_ConfigChannel+0x758>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a68      	ldr	r2, [pc, #416]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d101      	bne.n	800781c <HAL_ADC_ConfigChannel+0x75c>
 8007818:	4a67      	ldr	r2, [pc, #412]	@ (80079b8 <HAL_ADC_ConfigChannel+0x8f8>)
 800781a:	e000      	b.n	800781e <HAL_ADC_ConfigChannel+0x75e>
 800781c:	4a67      	ldr	r2, [pc, #412]	@ (80079bc <HAL_ADC_ConfigChannel+0x8fc>)
 800781e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007822:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7fe f9dc 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800782e:	4b66      	ldr	r3, [pc, #408]	@ (80079c8 <HAL_ADC_ConfigChannel+0x908>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	099b      	lsrs	r3, r3, #6
 8007834:	4a65      	ldr	r2, [pc, #404]	@ (80079cc <HAL_ADC_ConfigChannel+0x90c>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	099b      	lsrs	r3, r3, #6
 800783c:	3301      	adds	r3, #1
 800783e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8007840:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8007842:	e002      	b.n	800784a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3b01      	subs	r3, #1
 8007848:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1f9      	bne.n	8007844 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007850:	e246      	b.n	8007ce0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a5e      	ldr	r2, [pc, #376]	@ (80079d0 <HAL_ADC_ConfigChannel+0x910>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d12b      	bne.n	80078b4 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800785c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8007864:	2b00      	cmp	r3, #0
 8007866:	d125      	bne.n	80078b4 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a50      	ldr	r2, [pc, #320]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00a      	beq.n	8007888 <HAL_ADC_ConfigChannel+0x7c8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a4f      	ldr	r2, [pc, #316]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d005      	beq.n	8007888 <HAL_ADC_ConfigChannel+0x7c8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a4f      	ldr	r2, [pc, #316]	@ (80079c0 <HAL_ADC_ConfigChannel+0x900>)
 8007882:	4293      	cmp	r3, r2
 8007884:	f040 822e 	bne.w	8007ce4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a48      	ldr	r2, [pc, #288]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_ADC_ConfigChannel+0x7dc>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a47      	ldr	r2, [pc, #284]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d101      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x7e0>
 800789c:	4a46      	ldr	r2, [pc, #280]	@ (80079b8 <HAL_ADC_ConfigChannel+0x8f8>)
 800789e:	e000      	b.n	80078a2 <HAL_ADC_ConfigChannel+0x7e2>
 80078a0:	4a46      	ldr	r2, [pc, #280]	@ (80079bc <HAL_ADC_ConfigChannel+0x8fc>)
 80078a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7fe f99a 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80078b2:	e217      	b.n	8007ce4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a46      	ldr	r2, [pc, #280]	@ (80079d4 <HAL_ADC_ConfigChannel+0x914>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f040 8213 	bne.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80078c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f040 820c 	bne.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a37      	ldr	r2, [pc, #220]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00a      	beq.n	80078ee <HAL_ADC_ConfigChannel+0x82e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a35      	ldr	r2, [pc, #212]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d005      	beq.n	80078ee <HAL_ADC_ConfigChannel+0x82e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a36      	ldr	r2, [pc, #216]	@ (80079c0 <HAL_ADC_ConfigChannel+0x900>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	f040 81fc 	bne.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a2f      	ldr	r2, [pc, #188]	@ (80079b0 <HAL_ADC_ConfigChannel+0x8f0>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d004      	beq.n	8007902 <HAL_ADC_ConfigChannel+0x842>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a2d      	ldr	r2, [pc, #180]	@ (80079b4 <HAL_ADC_ConfigChannel+0x8f4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d101      	bne.n	8007906 <HAL_ADC_ConfigChannel+0x846>
 8007902:	4a2d      	ldr	r2, [pc, #180]	@ (80079b8 <HAL_ADC_ConfigChannel+0x8f8>)
 8007904:	e000      	b.n	8007908 <HAL_ADC_ConfigChannel+0x848>
 8007906:	4a2d      	ldr	r2, [pc, #180]	@ (80079bc <HAL_ADC_ConfigChannel+0x8fc>)
 8007908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800790c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f7fe f967 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
 8007918:	e1e5      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800791e:	f043 0220 	orr.w	r2, r3, #32
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800792c:	e1db      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b02      	cmp	r3, #2
 800793c:	f000 811b 	beq.w	8007b76 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007948:	d004      	beq.n	8007954 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800794e:	4a22      	ldr	r2, [pc, #136]	@ (80079d8 <HAL_ADC_ConfigChannel+0x918>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d107      	bne.n	8007964 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fac1 	bl	8005ee4 <LL_ADC_REG_SetSequencerChAdd>
 8007962:	e059      	b.n	8007a18 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	210f      	movs	r1, #15
 8007974:	fa01 f303 	lsl.w	r3, r1, r3
 8007978:	43db      	mvns	r3, r3
 800797a:	401a      	ands	r2, r3
 800797c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007980:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d105      	bne.n	8007994 <HAL_ADC_ConfigChannel+0x8d4>
 8007988:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800798c:	0e9b      	lsrs	r3, r3, #26
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	e027      	b.n	80079e4 <HAL_ADC_ConfigChannel+0x924>
 8007994:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007998:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	fa93 f3a3 	rbit	r3, r3
 80079a0:	60fb      	str	r3, [r7, #12]
  return result;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d117      	bne.n	80079dc <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80079ac:	2320      	movs	r3, #32
 80079ae:	e019      	b.n	80079e4 <HAL_ADC_ConfigChannel+0x924>
 80079b0:	42028000 	.word	0x42028000
 80079b4:	42028100 	.word	0x42028100
 80079b8:	42028300 	.word	0x42028300
 80079bc:	46021300 	.word	0x46021300
 80079c0:	46021000 	.word	0x46021000
 80079c4:	ce080000 	.word	0xce080000
 80079c8:	20000190 	.word	0x20000190
 80079cc:	053e2d63 	.word	0x053e2d63
 80079d0:	ca040000 	.word	0xca040000
 80079d4:	80000001 	.word	0x80000001
 80079d8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	fab3 f383 	clz	r3, r3
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6849      	ldr	r1, [r1, #4]
 80079e8:	f001 011f 	and.w	r1, r1, #31
 80079ec:	408b      	lsls	r3, r1
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	089b      	lsrs	r3, r3, #2
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d808      	bhi.n	8007a18 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a12:	4619      	mov	r1, r3
 8007a14:	f7fe fa06 	bl	8005e24 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	461a      	mov	r2, r3
 8007a22:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8007a26:	f7fe fac9 	bl	8005fbc <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f280 8159 	bge.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a9b      	ldr	r2, [pc, #620]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_ADC_ConfigChannel+0x988>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a9a      	ldr	r2, [pc, #616]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d101      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x98c>
 8007a48:	4b99      	ldr	r3, [pc, #612]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007a4a:	e000      	b.n	8007a4e <HAL_ADC_ConfigChannel+0x98e>
 8007a4c:	4b99      	ldr	r3, [pc, #612]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe f8dc 	bl	8005c0c <LL_ADC_GetCommonPathInternalCh>
 8007a54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a96      	ldr	r2, [pc, #600]	@ (8007cb8 <HAL_ADC_ConfigChannel+0xbf8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d12b      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d125      	bne.n	8007aba <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a8d      	ldr	r2, [pc, #564]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d004      	beq.n	8007a82 <HAL_ADC_ConfigChannel+0x9c2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a8b      	ldr	r2, [pc, #556]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d101      	bne.n	8007a86 <HAL_ADC_ConfigChannel+0x9c6>
 8007a82:	4a8b      	ldr	r2, [pc, #556]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007a84:	e000      	b.n	8007a88 <HAL_ADC_ConfigChannel+0x9c8>
 8007a86:	4a8b      	ldr	r2, [pc, #556]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007a88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f7fe f8a7 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007a98:	4b88      	ldr	r3, [pc, #544]	@ (8007cbc <HAL_ADC_ConfigChannel+0xbfc>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	4a88      	ldr	r2, [pc, #544]	@ (8007cc0 <HAL_ADC_ConfigChannel+0xc00>)
 8007aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa4:	099b      	lsrs	r3, r3, #6
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8007aaa:	e002      	b.n	8007ab2 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1f9      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007ab8:	e045      	b.n	8007b46 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a81      	ldr	r2, [pc, #516]	@ (8007cc4 <HAL_ADC_ConfigChannel+0xc04>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d11b      	bne.n	8007afc <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d115      	bne.n	8007afc <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a74      	ldr	r2, [pc, #464]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <HAL_ADC_ConfigChannel+0xa24>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a73      	ldr	r2, [pc, #460]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d101      	bne.n	8007ae8 <HAL_ADC_ConfigChannel+0xa28>
 8007ae4:	4a72      	ldr	r2, [pc, #456]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007ae6:	e000      	b.n	8007aea <HAL_ADC_ConfigChannel+0xa2a>
 8007ae8:	4a72      	ldr	r2, [pc, #456]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7fe f876 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
 8007afa:	e024      	b.n	8007b46 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a71      	ldr	r2, [pc, #452]	@ (8007cc8 <HAL_ADC_ConfigChannel+0xc08>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d11f      	bne.n	8007b46 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d115      	bne.n	8007b3e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a64      	ldr	r2, [pc, #400]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_ADC_ConfigChannel+0xa66>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a62      	ldr	r2, [pc, #392]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d101      	bne.n	8007b2a <HAL_ADC_ConfigChannel+0xa6a>
 8007b26:	4a62      	ldr	r2, [pc, #392]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007b28:	e000      	b.n	8007b2c <HAL_ADC_ConfigChannel+0xa6c>
 8007b2a:	4a62      	ldr	r2, [pc, #392]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f7fe f855 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
 8007b3c:	e003      	b.n	8007b46 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a62      	ldr	r2, [pc, #392]	@ (8007ccc <HAL_ADC_ConfigChannel+0xc0c>)
 8007b44:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a61      	ldr	r2, [pc, #388]	@ (8007cd0 <HAL_ADC_ConfigChannel+0xc10>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	f040 80ca 	bne.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 80c3 	bne.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007b74:	e0b7      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b7e:	d004      	beq.n	8007b8a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007b84:	4a53      	ldr	r2, [pc, #332]	@ (8007cd4 <HAL_ADC_ConfigChannel+0xc14>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d106      	bne.n	8007b98 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe f9d9 	bl	8005f4a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f280 80a2 	bge.w	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a40      	ldr	r2, [pc, #256]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_ADC_ConfigChannel+0xaf6>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d101      	bne.n	8007bba <HAL_ADC_ConfigChannel+0xafa>
 8007bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007bb8:	e000      	b.n	8007bbc <HAL_ADC_ConfigChannel+0xafc>
 8007bba:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe f825 	bl	8005c0c <LL_ADC_GetCommonPathInternalCh>
 8007bc2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a43      	ldr	r2, [pc, #268]	@ (8007cd8 <HAL_ADC_ConfigChannel+0xc18>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d115      	bne.n	8007bfc <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a34      	ldr	r2, [pc, #208]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <HAL_ADC_ConfigChannel+0xb24>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a33      	ldr	r2, [pc, #204]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d101      	bne.n	8007be8 <HAL_ADC_ConfigChannel+0xb28>
 8007be4:	4a32      	ldr	r2, [pc, #200]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007be6:	e000      	b.n	8007bea <HAL_ADC_ConfigChannel+0xb2a>
 8007be8:	4a32      	ldr	r2, [pc, #200]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007bea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fd fff6 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
 8007bfa:	e034      	b.n	8007c66 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a36      	ldr	r2, [pc, #216]	@ (8007cdc <HAL_ADC_ConfigChannel+0xc1c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d115      	bne.n	8007c32 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d004      	beq.n	8007c1a <HAL_ADC_ConfigChannel+0xb5a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a25      	ldr	r2, [pc, #148]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d101      	bne.n	8007c1e <HAL_ADC_ConfigChannel+0xb5e>
 8007c1a:	4a25      	ldr	r2, [pc, #148]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007c1c:	e000      	b.n	8007c20 <HAL_ADC_ConfigChannel+0xb60>
 8007c1e:	4a25      	ldr	r2, [pc, #148]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007c20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fd ffdb 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
 8007c30:	e019      	b.n	8007c66 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a24      	ldr	r2, [pc, #144]	@ (8007cc8 <HAL_ADC_ConfigChannel+0xc08>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d114      	bne.n	8007c66 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a19      	ldr	r2, [pc, #100]	@ (8007ca8 <HAL_ADC_ConfigChannel+0xbe8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_ADC_ConfigChannel+0xb90>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a18      	ldr	r2, [pc, #96]	@ (8007cac <HAL_ADC_ConfigChannel+0xbec>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d101      	bne.n	8007c54 <HAL_ADC_ConfigChannel+0xb94>
 8007c50:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <HAL_ADC_ConfigChannel+0xbf0>)
 8007c52:	e000      	b.n	8007c56 <HAL_ADC_ConfigChannel+0xb96>
 8007c54:	4a17      	ldr	r2, [pc, #92]	@ (8007cb4 <HAL_ADC_ConfigChannel+0xbf4>)
 8007c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c5a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f7fd ffc0 	bl	8005be6 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a19      	ldr	r2, [pc, #100]	@ (8007cd0 <HAL_ADC_ConfigChannel+0xc10>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d13a      	bne.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d134      	bne.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0201 	orr.w	r2, r2, #1
 8007c8c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007c90:	e029      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c96:	f043 0220 	orr.w	r2, r3, #32
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007ca4:	e01f      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
 8007ca6:	bf00      	nop
 8007ca8:	42028000 	.word	0x42028000
 8007cac:	42028100 	.word	0x42028100
 8007cb0:	42028300 	.word	0x42028300
 8007cb4:	46021300 	.word	0x46021300
 8007cb8:	b6002000 	.word	0xb6002000
 8007cbc:	20000190 	.word	0x20000190
 8007cc0:	053e2d63 	.word	0x053e2d63
 8007cc4:	ba004000 	.word	0xba004000
 8007cc8:	80000001 	.word	0x80000001
 8007ccc:	b2001000 	.word	0xb2001000
 8007cd0:	d7200000 	.word	0xd7200000
 8007cd4:	80000010 	.word	0x80000010
 8007cd8:	ce080000 	.word	0xce080000
 8007cdc:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007ce4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8007cee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	37dc      	adds	r7, #220	@ 0xdc
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop

08007cfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fa5d 	bl	80061c8 <LL_ADC_IsEnabled>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d17b      	bne.n	8007e0c <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e18 <ADC_Enable+0x11c>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00d      	beq.n	8007d3e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d26:	f043 0210 	orr.w	r2, r3, #16
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d32:	f043 0201 	orr.w	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e067      	b.n	8007e0e <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2201      	movs	r2, #1
 8007d44:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fa28 	bl	80061a0 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <ADC_Enable+0x66>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8007e1c <ADC_Enable+0x120>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d054      	beq.n	8007e0c <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007d62:	f7fd fefd 	bl	8005b60 <HAL_GetTick>
 8007d66:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e20 <ADC_Enable+0x124>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <ADC_Enable+0x80>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a2b      	ldr	r2, [pc, #172]	@ (8007e24 <ADC_Enable+0x128>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d101      	bne.n	8007d80 <ADC_Enable+0x84>
 8007d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007e28 <ADC_Enable+0x12c>)
 8007d7e:	e000      	b.n	8007d82 <ADC_Enable+0x86>
 8007d80:	4b2a      	ldr	r3, [pc, #168]	@ (8007e2c <ADC_Enable+0x130>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe f9a2 	bl	80060cc <LL_ADC_GetMultimode>
 8007d88:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a25      	ldr	r2, [pc, #148]	@ (8007e24 <ADC_Enable+0x128>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d002      	beq.n	8007d9a <ADC_Enable+0x9e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	e000      	b.n	8007d9c <ADC_Enable+0xa0>
 8007d9a:	4b21      	ldr	r3, [pc, #132]	@ (8007e20 <ADC_Enable+0x124>)
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d02c      	beq.n	8007dfe <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d130      	bne.n	8007e0c <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007daa:	e028      	b.n	8007dfe <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fa09 	bl	80061c8 <LL_ADC_IsEnabled>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe f9ed 	bl	80061a0 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007dc6:	f7fd fecb 	bl	8005b60 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d914      	bls.n	8007dfe <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d00d      	beq.n	8007dfe <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007de6:	f043 0210 	orr.w	r2, r3, #16
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007df2:	f043 0201 	orr.w	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e007      	b.n	8007e0e <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d1cf      	bne.n	8007dac <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	8000003f 	.word	0x8000003f
 8007e1c:	46021000 	.word	0x46021000
 8007e20:	42028000 	.word	0x42028000
 8007e24:	42028100 	.word	0x42028100
 8007e28:	42028300 	.word	0x42028300
 8007e2c:	46021300 	.word	0x46021300

08007e30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d14b      	bne.n	8007ee2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d021      	beq.n	8007ea8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fd ffc7 	bl	8005dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d032      	beq.n	8007eda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d12b      	bne.n	8007eda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d11f      	bne.n	8007eda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e9e:	f043 0201 	orr.w	r2, r3, #1
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	679a      	str	r2, [r3, #120]	@ 0x78
 8007ea6:	e018      	b.n	8007eda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d111      	bne.n	8007eda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ed2:	f043 0201 	orr.w	r2, r3, #1
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff f8aa 	bl	8007034 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007ee0:	e00e      	b.n	8007f00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff f8be 	bl	8007070 <HAL_ADC_ErrorCallback>
}
 8007ef4:	e004      	b.n	8007f00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff f896 	bl	8007048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f42:	f043 0204 	orr.w	r2, r3, #4
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff f890 	bl	8007070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8007fec <__NVIC_SetPriorityGrouping+0x44>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fda:	4a04      	ldr	r2, [pc, #16]	@ (8007fec <__NVIC_SetPriorityGrouping+0x44>)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	60d3      	str	r3, [r2, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ff4:	4b04      	ldr	r3, [pc, #16]	@ (8008008 <__NVIC_GetPriorityGrouping+0x18>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	f003 0307 	and.w	r3, r3, #7
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	e000ed00 	.word	0xe000ed00

0800800c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800801a:	2b00      	cmp	r3, #0
 800801c:	db0b      	blt.n	8008036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	f003 021f 	and.w	r2, r3, #31
 8008024:	4907      	ldr	r1, [pc, #28]	@ (8008044 <__NVIC_EnableIRQ+0x38>)
 8008026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	2001      	movs	r0, #1
 800802e:	fa00 f202 	lsl.w	r2, r0, r2
 8008032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	e000e100 	.word	0xe000e100

08008048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008058:	2b00      	cmp	r3, #0
 800805a:	db0a      	blt.n	8008072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	490c      	ldr	r1, [pc, #48]	@ (8008094 <__NVIC_SetPriority+0x4c>)
 8008062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008066:	0112      	lsls	r2, r2, #4
 8008068:	b2d2      	uxtb	r2, r2
 800806a:	440b      	add	r3, r1
 800806c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008070:	e00a      	b.n	8008088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4908      	ldr	r1, [pc, #32]	@ (8008098 <__NVIC_SetPriority+0x50>)
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	3b04      	subs	r3, #4
 8008080:	0112      	lsls	r2, r2, #4
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	440b      	add	r3, r1
 8008086:	761a      	strb	r2, [r3, #24]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	e000e100 	.word	0xe000e100
 8008098:	e000ed00 	.word	0xe000ed00

0800809c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800809c:	b480      	push	{r7}
 800809e:	b089      	sub	sp, #36	@ 0x24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f1c3 0307 	rsb	r3, r3, #7
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	bf28      	it	cs
 80080ba:	2304      	movcs	r3, #4
 80080bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2b06      	cmp	r3, #6
 80080c4:	d902      	bls.n	80080cc <NVIC_EncodePriority+0x30>
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	3b03      	subs	r3, #3
 80080ca:	e000      	b.n	80080ce <NVIC_EncodePriority+0x32>
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	43da      	mvns	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	401a      	ands	r2, r3
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080e4:	f04f 31ff 	mov.w	r1, #4294967295
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	fa01 f303 	lsl.w	r3, r1, r3
 80080ee:	43d9      	mvns	r1, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080f4:	4313      	orrs	r3, r2
         );
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3724      	adds	r7, #36	@ 0x24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008108:	f3bf 8f4f 	dsb	sy
}
 800810c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800810e:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <__NVIC_SystemReset+0x24>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008116:	4904      	ldr	r1, [pc, #16]	@ (8008128 <__NVIC_SystemReset+0x24>)
 8008118:	4b04      	ldr	r3, [pc, #16]	@ (800812c <__NVIC_SystemReset+0x28>)
 800811a:	4313      	orrs	r3, r2
 800811c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800811e:	f3bf 8f4f 	dsb	sy
}
 8008122:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <__NVIC_SystemReset+0x20>
 8008128:	e000ed00 	.word	0xe000ed00
 800812c:	05fa0004 	.word	0x05fa0004

08008130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff35 	bl	8007fa8 <__NVIC_SetPriorityGrouping>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af00      	add	r7, sp, #0
 800814c:	4603      	mov	r3, r0
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008154:	f7ff ff4c 	bl	8007ff0 <__NVIC_GetPriorityGrouping>
 8008158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	6978      	ldr	r0, [r7, #20]
 8008160:	f7ff ff9c 	bl	800809c <NVIC_EncodePriority>
 8008164:	4602      	mov	r2, r0
 8008166:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ff6b 	bl	8008048 <__NVIC_SetPriority>
}
 8008172:	bf00      	nop
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	4603      	mov	r3, r0
 8008182:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff ff3f 	bl	800800c <__NVIC_EnableIRQ>
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800819a:	f7ff ffb3 	bl	8008104 <__NVIC_SystemReset>
	...

080081a0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081b0:	d301      	bcc.n	80081b6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80081b2:	2301      	movs	r3, #1
 80081b4:	e00d      	b.n	80081d2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80081b6:	4a0a      	ldr	r2, [pc, #40]	@ (80081e0 <HAL_SYSTICK_Config+0x40>)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80081be:	4b08      	ldr	r3, [pc, #32]	@ (80081e0 <HAL_SYSTICK_Config+0x40>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80081c4:	4b06      	ldr	r3, [pc, #24]	@ (80081e0 <HAL_SYSTICK_Config+0x40>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a05      	ldr	r2, [pc, #20]	@ (80081e0 <HAL_SYSTICK_Config+0x40>)
 80081ca:	f043 0303 	orr.w	r3, r3, #3
 80081ce:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e010 	.word	0xe000e010

080081e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d844      	bhi.n	800827c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80081f2:	a201      	add	r2, pc, #4	@ (adr r2, 80081f8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	0800821b 	.word	0x0800821b
 80081fc:	08008239 	.word	0x08008239
 8008200:	0800825b 	.word	0x0800825b
 8008204:	0800827d 	.word	0x0800827d
 8008208:	0800820d 	.word	0x0800820d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800820c:	4b1f      	ldr	r3, [pc, #124]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a1e      	ldr	r2, [pc, #120]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008212:	f043 0304 	orr.w	r3, r3, #4
 8008216:	6013      	str	r3, [r2, #0]
      break;
 8008218:	e031      	b.n	800827e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800821a:	4b1c      	ldr	r3, [pc, #112]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1b      	ldr	r2, [pc, #108]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008220:	f023 0304 	bic.w	r3, r3, #4
 8008224:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8008226:	4b1a      	ldr	r3, [pc, #104]	@ (8008290 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800822c:	4a18      	ldr	r2, [pc, #96]	@ (8008290 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800822e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8008236:	e022      	b.n	800827e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008238:	4b14      	ldr	r3, [pc, #80]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a13      	ldr	r2, [pc, #76]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800823e:	f023 0304 	bic.w	r3, r3, #4
 8008242:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8008244:	4b12      	ldr	r3, [pc, #72]	@ (8008290 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800824a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800824e:	4a10      	ldr	r2, [pc, #64]	@ (8008290 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008250:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008254:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8008258:	e011      	b.n	800827e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800825a:	4b0c      	ldr	r3, [pc, #48]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a0b      	ldr	r2, [pc, #44]	@ (800828c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008260:	f023 0304 	bic.w	r3, r3, #4
 8008264:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8008266:	4b0a      	ldr	r3, [pc, #40]	@ (8008290 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800826c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008270:	4a07      	ldr	r2, [pc, #28]	@ (8008290 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008272:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008276:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800827a:	e000      	b.n	800827e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800827c:	bf00      	nop
  }
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	e000e010 	.word	0xe000e010
 8008290:	46020c00 	.word	0x46020c00

08008294 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800829a:	4b19      	ldr	r3, [pc, #100]	@ (8008300 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80082a6:	2304      	movs	r3, #4
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	e021      	b.n	80082f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80082ac:	4b15      	ldr	r3, [pc, #84]	@ (8008304 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80082ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082b2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80082b6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082be:	d011      	beq.n	80082e4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082c6:	d810      	bhi.n	80082ea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082d4:	d003      	beq.n	80082de <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80082d6:	e008      	b.n	80082ea <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80082d8:	2300      	movs	r3, #0
 80082da:	607b      	str	r3, [r7, #4]
        break;
 80082dc:	e008      	b.n	80082f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80082de:	2301      	movs	r3, #1
 80082e0:	607b      	str	r3, [r7, #4]
        break;
 80082e2:	e005      	b.n	80082f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80082e4:	2302      	movs	r3, #2
 80082e6:	607b      	str	r3, [r7, #4]
        break;
 80082e8:	e002      	b.n	80082f0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
        break;
 80082ee:	bf00      	nop
    }
  }
  return systick_source;
 80082f0:	687b      	ldr	r3, [r7, #4]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e010 	.word	0xe000e010
 8008304:	46020c00 	.word	0x46020c00

08008308 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8008310:	f7fd fc26 	bl	8005b60 <HAL_GetTick>
 8008314:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e0db      	b.n	80084d8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6e      	ldr	r2, [pc, #440]	@ (80084e0 <HAL_DMA_Init+0x1d8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	f000 809f 	beq.w	800846a <HAL_DMA_Init+0x162>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a6c      	ldr	r2, [pc, #432]	@ (80084e4 <HAL_DMA_Init+0x1dc>)
 8008332:	4293      	cmp	r3, r2
 8008334:	f000 8099 	beq.w	800846a <HAL_DMA_Init+0x162>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a6a      	ldr	r2, [pc, #424]	@ (80084e8 <HAL_DMA_Init+0x1e0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	f000 8093 	beq.w	800846a <HAL_DMA_Init+0x162>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a68      	ldr	r2, [pc, #416]	@ (80084ec <HAL_DMA_Init+0x1e4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	f000 808d 	beq.w	800846a <HAL_DMA_Init+0x162>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a66      	ldr	r2, [pc, #408]	@ (80084f0 <HAL_DMA_Init+0x1e8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	f000 8087 	beq.w	800846a <HAL_DMA_Init+0x162>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a64      	ldr	r2, [pc, #400]	@ (80084f4 <HAL_DMA_Init+0x1ec>)
 8008362:	4293      	cmp	r3, r2
 8008364:	f000 8081 	beq.w	800846a <HAL_DMA_Init+0x162>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a62      	ldr	r2, [pc, #392]	@ (80084f8 <HAL_DMA_Init+0x1f0>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d07b      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a61      	ldr	r2, [pc, #388]	@ (80084fc <HAL_DMA_Init+0x1f4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d076      	beq.n	800846a <HAL_DMA_Init+0x162>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a5f      	ldr	r2, [pc, #380]	@ (8008500 <HAL_DMA_Init+0x1f8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d071      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a5e      	ldr	r2, [pc, #376]	@ (8008504 <HAL_DMA_Init+0x1fc>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d06c      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a5c      	ldr	r2, [pc, #368]	@ (8008508 <HAL_DMA_Init+0x200>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d067      	beq.n	800846a <HAL_DMA_Init+0x162>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a5b      	ldr	r2, [pc, #364]	@ (800850c <HAL_DMA_Init+0x204>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d062      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a59      	ldr	r2, [pc, #356]	@ (8008510 <HAL_DMA_Init+0x208>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d05d      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a58      	ldr	r2, [pc, #352]	@ (8008514 <HAL_DMA_Init+0x20c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d058      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a56      	ldr	r2, [pc, #344]	@ (8008518 <HAL_DMA_Init+0x210>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d053      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a55      	ldr	r2, [pc, #340]	@ (800851c <HAL_DMA_Init+0x214>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d04e      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a53      	ldr	r2, [pc, #332]	@ (8008520 <HAL_DMA_Init+0x218>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d049      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a52      	ldr	r2, [pc, #328]	@ (8008524 <HAL_DMA_Init+0x21c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d044      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a50      	ldr	r2, [pc, #320]	@ (8008528 <HAL_DMA_Init+0x220>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d03f      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a4f      	ldr	r2, [pc, #316]	@ (800852c <HAL_DMA_Init+0x224>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d03a      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a4d      	ldr	r2, [pc, #308]	@ (8008530 <HAL_DMA_Init+0x228>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d035      	beq.n	800846a <HAL_DMA_Init+0x162>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a4c      	ldr	r2, [pc, #304]	@ (8008534 <HAL_DMA_Init+0x22c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d030      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a4a      	ldr	r2, [pc, #296]	@ (8008538 <HAL_DMA_Init+0x230>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d02b      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a49      	ldr	r2, [pc, #292]	@ (800853c <HAL_DMA_Init+0x234>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d026      	beq.n	800846a <HAL_DMA_Init+0x162>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a47      	ldr	r2, [pc, #284]	@ (8008540 <HAL_DMA_Init+0x238>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d021      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a46      	ldr	r2, [pc, #280]	@ (8008544 <HAL_DMA_Init+0x23c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d01c      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a44      	ldr	r2, [pc, #272]	@ (8008548 <HAL_DMA_Init+0x240>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d017      	beq.n	800846a <HAL_DMA_Init+0x162>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a43      	ldr	r2, [pc, #268]	@ (800854c <HAL_DMA_Init+0x244>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d012      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a41      	ldr	r2, [pc, #260]	@ (8008550 <HAL_DMA_Init+0x248>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00d      	beq.n	800846a <HAL_DMA_Init+0x162>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a40      	ldr	r2, [pc, #256]	@ (8008554 <HAL_DMA_Init+0x24c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d008      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a3e      	ldr	r2, [pc, #248]	@ (8008558 <HAL_DMA_Init+0x250>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <HAL_DMA_Init+0x162>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a3d      	ldr	r2, [pc, #244]	@ (800855c <HAL_DMA_Init+0x254>)
 8008468:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695a      	ldr	r2, [r3, #20]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0206 	orr.w	r2, r2, #6
 8008488:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800848a:	e00f      	b.n	80084ac <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800848c:	f7fd fb68 	bl	8005b60 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b05      	cmp	r3, #5
 8008498:	d908      	bls.n	80084ac <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2210      	movs	r2, #16
 800849e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2203      	movs	r2, #3
 80084a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e015      	b.n	80084d8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e8      	bne.n	800848c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb26 	bl	8008b0c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40020050 	.word	0x40020050
 80084e4:	50020050 	.word	0x50020050
 80084e8:	400200d0 	.word	0x400200d0
 80084ec:	500200d0 	.word	0x500200d0
 80084f0:	40020150 	.word	0x40020150
 80084f4:	50020150 	.word	0x50020150
 80084f8:	400201d0 	.word	0x400201d0
 80084fc:	500201d0 	.word	0x500201d0
 8008500:	40020250 	.word	0x40020250
 8008504:	50020250 	.word	0x50020250
 8008508:	400202d0 	.word	0x400202d0
 800850c:	500202d0 	.word	0x500202d0
 8008510:	40020350 	.word	0x40020350
 8008514:	50020350 	.word	0x50020350
 8008518:	400203d0 	.word	0x400203d0
 800851c:	500203d0 	.word	0x500203d0
 8008520:	40020450 	.word	0x40020450
 8008524:	50020450 	.word	0x50020450
 8008528:	400204d0 	.word	0x400204d0
 800852c:	500204d0 	.word	0x500204d0
 8008530:	40020550 	.word	0x40020550
 8008534:	50020550 	.word	0x50020550
 8008538:	400205d0 	.word	0x400205d0
 800853c:	500205d0 	.word	0x500205d0
 8008540:	40020650 	.word	0x40020650
 8008544:	50020650 	.word	0x50020650
 8008548:	400206d0 	.word	0x400206d0
 800854c:	500206d0 	.word	0x500206d0
 8008550:	40020750 	.word	0x40020750
 8008554:	50020750 	.word	0x50020750
 8008558:	400207d0 	.word	0x400207d0
 800855c:	500207d0 	.word	0x500207d0

08008560 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e04f      	b.n	8008618 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_DMA_Start_IT+0x26>
 8008582:	2302      	movs	r3, #2
 8008584:	e048      	b.n	8008618 <HAL_DMA_Start_IT+0xb8>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b01      	cmp	r3, #1
 8008598:	d136      	bne.n	8008608 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fa86 	bl	8008ac0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80085c2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695a      	ldr	r2, [r3, #20]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085da:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085f2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e007      	b.n	8008618 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2240      	movs	r2, #64	@ 0x40
 800860c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8008628:	f7fd fa9a 	bl	8005b60 <HAL_GetTick>
 800862c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e06b      	b.n	8008710 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d008      	beq.n	8008656 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e05c      	b.n	8008710 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f042 0204 	orr.w	r2, r2, #4
 8008664:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2205      	movs	r2, #5
 800866a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800866e:	e020      	b.n	80086b2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008670:	f7fd fa76 	bl	8005b60 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b05      	cmp	r3, #5
 800867c:	d919      	bls.n	80086b2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008682:	f043 0210 	orr.w	r2, r3, #16
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2203      	movs	r2, #3
 800868e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a2:	2201      	movs	r2, #1
 80086a4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e02e      	b.n	8008710 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0d7      	beq.n	8008670 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0202 	orr.w	r2, r2, #2
 80086ce:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2204      	movs	r2, #4
 80086d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80086e0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086fa:	2201      	movs	r2, #1
 80086fc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2200      	movs	r2, #0
 8008704:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e019      	b.n	800875e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d004      	beq.n	8008740 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2220      	movs	r2, #32
 800873a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e00e      	b.n	800875e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2204      	movs	r2, #4
 8008744:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008756:	f043 0304 	orr.w	r3, r3, #4
 800875a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800877a:	f023 030f 	bic.w	r3, r3, #15
 800877e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008788:	3b50      	subs	r3, #80	@ 0x50
 800878a:	09db      	lsrs	r3, r3, #7
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	2201      	movs	r2, #1
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	4013      	ands	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 813b 	beq.w	8008a20 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d011      	beq.n	80087dc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087ce:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d4:	f043 0201 	orr.w	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d011      	beq.n	800880e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008800:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008806:	f043 0202 	orr.w	r2, r3, #2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d011      	beq.n	8008840 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008832:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008838:	f043 0204 	orr.w	r2, r3, #4
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d011      	beq.n	8008872 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008864:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00c      	beq.n	80088a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008896:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04c      	beq.n	8008950 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d045      	beq.n	8008950 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80088cc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d12e      	bne.n	8008938 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695a      	ldr	r2, [r3, #20]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088e8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695a      	ldr	r2, [r3, #20]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f042 0202 	orr.w	r2, r2, #2
 80088f8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008912:	2201      	movs	r2, #1
 8008914:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2200      	movs	r2, #0
 800891c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d07a      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
        }

        return;
 8008936:	e075      	b.n	8008a24 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2205      	movs	r2, #5
 800893c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	d039      	beq.n	80089d2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008968:	2b00      	cmp	r3, #0
 800896a:	d032      	beq.n	80089d2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008974:	2b00      	cmp	r3, #0
 8008976:	d012      	beq.n	800899e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d116      	bne.n	80089b0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008988:	2b00      	cmp	r3, #0
 800898a:	d111      	bne.n	80089b0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008998:	2201      	movs	r2, #1
 800899a:	731a      	strb	r2, [r3, #12]
 800899c:	e008      	b.n	80089b0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80089b8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d025      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0202 	orr.w	r2, r2, #2
 80089e8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a02:	2201      	movs	r2, #1
 8008a04:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d007      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
 8008a1e:	e002      	b.n	8008a26 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8008a20:	bf00      	nop
 8008a22:	e000      	b.n	8008a26 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8008a24:	bf00      	nop
    }
  }
}
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008a3a:	b2db      	uxtb	r3, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e02b      	b.n	8008ab4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008a64:	f023 030f 	bic.w	r3, r3, #15
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a72:	3b50      	subs	r3, #80	@ 0x50
 8008a74:	09db      	lsrs	r3, r3, #7
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d012      	beq.n	8008ab2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	f003 0311 	and.w	r3, r3, #17
 8008a92:	2b11      	cmp	r3, #17
 8008a94:	d106      	bne.n	8008aa4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	605a      	str	r2, [r3, #4]
 8008aa2:	e006      	b.n	8008ab2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	401a      	ands	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad4:	0c1b      	lsrs	r3, r3, #16
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	b291      	uxth	r1, r2
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	6812      	ldr	r2, [r2, #0]
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8008aec:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695a      	ldr	r2, [r3, #20]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a53      	ldr	r2, [pc, #332]	@ (8008c98 <DMA_Init+0x18c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	f000 80a0 	beq.w	8008c92 <DMA_Init+0x186>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a51      	ldr	r2, [pc, #324]	@ (8008c9c <DMA_Init+0x190>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	f000 809a 	beq.w	8008c92 <DMA_Init+0x186>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a4f      	ldr	r2, [pc, #316]	@ (8008ca0 <DMA_Init+0x194>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	f000 8094 	beq.w	8008c92 <DMA_Init+0x186>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a4d      	ldr	r2, [pc, #308]	@ (8008ca4 <DMA_Init+0x198>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	f000 808e 	beq.w	8008c92 <DMA_Init+0x186>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8008ca8 <DMA_Init+0x19c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	f000 8088 	beq.w	8008c92 <DMA_Init+0x186>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a49      	ldr	r2, [pc, #292]	@ (8008cac <DMA_Init+0x1a0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	f000 8082 	beq.w	8008c92 <DMA_Init+0x186>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a47      	ldr	r2, [pc, #284]	@ (8008cb0 <DMA_Init+0x1a4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d07c      	beq.n	8008c92 <DMA_Init+0x186>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a45      	ldr	r2, [pc, #276]	@ (8008cb4 <DMA_Init+0x1a8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d077      	beq.n	8008c92 <DMA_Init+0x186>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a44      	ldr	r2, [pc, #272]	@ (8008cb8 <DMA_Init+0x1ac>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d072      	beq.n	8008c92 <DMA_Init+0x186>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a42      	ldr	r2, [pc, #264]	@ (8008cbc <DMA_Init+0x1b0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d06d      	beq.n	8008c92 <DMA_Init+0x186>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a41      	ldr	r2, [pc, #260]	@ (8008cc0 <DMA_Init+0x1b4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d068      	beq.n	8008c92 <DMA_Init+0x186>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8008cc4 <DMA_Init+0x1b8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d063      	beq.n	8008c92 <DMA_Init+0x186>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a3e      	ldr	r2, [pc, #248]	@ (8008cc8 <DMA_Init+0x1bc>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d05e      	beq.n	8008c92 <DMA_Init+0x186>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8008ccc <DMA_Init+0x1c0>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d059      	beq.n	8008c92 <DMA_Init+0x186>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a3b      	ldr	r2, [pc, #236]	@ (8008cd0 <DMA_Init+0x1c4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d054      	beq.n	8008c92 <DMA_Init+0x186>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a39      	ldr	r2, [pc, #228]	@ (8008cd4 <DMA_Init+0x1c8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d04f      	beq.n	8008c92 <DMA_Init+0x186>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a38      	ldr	r2, [pc, #224]	@ (8008cd8 <DMA_Init+0x1cc>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d04a      	beq.n	8008c92 <DMA_Init+0x186>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a36      	ldr	r2, [pc, #216]	@ (8008cdc <DMA_Init+0x1d0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d045      	beq.n	8008c92 <DMA_Init+0x186>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a35      	ldr	r2, [pc, #212]	@ (8008ce0 <DMA_Init+0x1d4>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d040      	beq.n	8008c92 <DMA_Init+0x186>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a33      	ldr	r2, [pc, #204]	@ (8008ce4 <DMA_Init+0x1d8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d03b      	beq.n	8008c92 <DMA_Init+0x186>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a32      	ldr	r2, [pc, #200]	@ (8008ce8 <DMA_Init+0x1dc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d036      	beq.n	8008c92 <DMA_Init+0x186>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a30      	ldr	r2, [pc, #192]	@ (8008cec <DMA_Init+0x1e0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d031      	beq.n	8008c92 <DMA_Init+0x186>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a2f      	ldr	r2, [pc, #188]	@ (8008cf0 <DMA_Init+0x1e4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d02c      	beq.n	8008c92 <DMA_Init+0x186>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8008cf4 <DMA_Init+0x1e8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d027      	beq.n	8008c92 <DMA_Init+0x186>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a2c      	ldr	r2, [pc, #176]	@ (8008cf8 <DMA_Init+0x1ec>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d022      	beq.n	8008c92 <DMA_Init+0x186>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a2a      	ldr	r2, [pc, #168]	@ (8008cfc <DMA_Init+0x1f0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01d      	beq.n	8008c92 <DMA_Init+0x186>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a29      	ldr	r2, [pc, #164]	@ (8008d00 <DMA_Init+0x1f4>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d018      	beq.n	8008c92 <DMA_Init+0x186>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a27      	ldr	r2, [pc, #156]	@ (8008d04 <DMA_Init+0x1f8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <DMA_Init+0x186>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a26      	ldr	r2, [pc, #152]	@ (8008d08 <DMA_Init+0x1fc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00e      	beq.n	8008c92 <DMA_Init+0x186>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a24      	ldr	r2, [pc, #144]	@ (8008d0c <DMA_Init+0x200>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d009      	beq.n	8008c92 <DMA_Init+0x186>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a23      	ldr	r2, [pc, #140]	@ (8008d10 <DMA_Init+0x204>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d004      	beq.n	8008c92 <DMA_Init+0x186>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a21      	ldr	r2, [pc, #132]	@ (8008d14 <DMA_Init+0x208>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d142      	bne.n	8008d18 <DMA_Init+0x20c>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e041      	b.n	8008d1a <DMA_Init+0x20e>
 8008c96:	bf00      	nop
 8008c98:	40020050 	.word	0x40020050
 8008c9c:	50020050 	.word	0x50020050
 8008ca0:	400200d0 	.word	0x400200d0
 8008ca4:	500200d0 	.word	0x500200d0
 8008ca8:	40020150 	.word	0x40020150
 8008cac:	50020150 	.word	0x50020150
 8008cb0:	400201d0 	.word	0x400201d0
 8008cb4:	500201d0 	.word	0x500201d0
 8008cb8:	40020250 	.word	0x40020250
 8008cbc:	50020250 	.word	0x50020250
 8008cc0:	400202d0 	.word	0x400202d0
 8008cc4:	500202d0 	.word	0x500202d0
 8008cc8:	40020350 	.word	0x40020350
 8008ccc:	50020350 	.word	0x50020350
 8008cd0:	400203d0 	.word	0x400203d0
 8008cd4:	500203d0 	.word	0x500203d0
 8008cd8:	40020450 	.word	0x40020450
 8008cdc:	50020450 	.word	0x50020450
 8008ce0:	400204d0 	.word	0x400204d0
 8008ce4:	500204d0 	.word	0x500204d0
 8008ce8:	40020550 	.word	0x40020550
 8008cec:	50020550 	.word	0x50020550
 8008cf0:	400205d0 	.word	0x400205d0
 8008cf4:	500205d0 	.word	0x500205d0
 8008cf8:	40020650 	.word	0x40020650
 8008cfc:	50020650 	.word	0x50020650
 8008d00:	400206d0 	.word	0x400206d0
 8008d04:	500206d0 	.word	0x500206d0
 8008d08:	40020750 	.word	0x40020750
 8008d0c:	50020750 	.word	0x50020750
 8008d10:	400207d0 	.word	0x400207d0
 8008d14:	500207d0 	.word	0x500207d0
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d012      	beq.n	8008d44 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	3b01      	subs	r3, #1
 8008d28:	051b      	lsls	r3, r3, #20
 8008d2a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008d2e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d34:	3b01      	subs	r3, #1
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008d3c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d64:	431a      	orrs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d76:	f040 80b0 	bne.w	8008eda <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a82      	ldr	r2, [pc, #520]	@ (8008f88 <DMA_Init+0x47c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	f000 80a0 	beq.w	8008ec6 <DMA_Init+0x3ba>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a80      	ldr	r2, [pc, #512]	@ (8008f8c <DMA_Init+0x480>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	f000 809a 	beq.w	8008ec6 <DMA_Init+0x3ba>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a7e      	ldr	r2, [pc, #504]	@ (8008f90 <DMA_Init+0x484>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	f000 8094 	beq.w	8008ec6 <DMA_Init+0x3ba>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a7c      	ldr	r2, [pc, #496]	@ (8008f94 <DMA_Init+0x488>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	f000 808e 	beq.w	8008ec6 <DMA_Init+0x3ba>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a7a      	ldr	r2, [pc, #488]	@ (8008f98 <DMA_Init+0x48c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	f000 8088 	beq.w	8008ec6 <DMA_Init+0x3ba>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a78      	ldr	r2, [pc, #480]	@ (8008f9c <DMA_Init+0x490>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	f000 8082 	beq.w	8008ec6 <DMA_Init+0x3ba>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a76      	ldr	r2, [pc, #472]	@ (8008fa0 <DMA_Init+0x494>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d07c      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a74      	ldr	r2, [pc, #464]	@ (8008fa4 <DMA_Init+0x498>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d077      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a73      	ldr	r2, [pc, #460]	@ (8008fa8 <DMA_Init+0x49c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d072      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a71      	ldr	r2, [pc, #452]	@ (8008fac <DMA_Init+0x4a0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d06d      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a70      	ldr	r2, [pc, #448]	@ (8008fb0 <DMA_Init+0x4a4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d068      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a6e      	ldr	r2, [pc, #440]	@ (8008fb4 <DMA_Init+0x4a8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d063      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a6d      	ldr	r2, [pc, #436]	@ (8008fb8 <DMA_Init+0x4ac>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d05e      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8008fbc <DMA_Init+0x4b0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d059      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a6a      	ldr	r2, [pc, #424]	@ (8008fc0 <DMA_Init+0x4b4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d054      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a68      	ldr	r2, [pc, #416]	@ (8008fc4 <DMA_Init+0x4b8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d04f      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a67      	ldr	r2, [pc, #412]	@ (8008fc8 <DMA_Init+0x4bc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d04a      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a65      	ldr	r2, [pc, #404]	@ (8008fcc <DMA_Init+0x4c0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d045      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a64      	ldr	r2, [pc, #400]	@ (8008fd0 <DMA_Init+0x4c4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d040      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a62      	ldr	r2, [pc, #392]	@ (8008fd4 <DMA_Init+0x4c8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d03b      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a61      	ldr	r2, [pc, #388]	@ (8008fd8 <DMA_Init+0x4cc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d036      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fdc <DMA_Init+0x4d0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d031      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a5e      	ldr	r2, [pc, #376]	@ (8008fe0 <DMA_Init+0x4d4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d02c      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a5c      	ldr	r2, [pc, #368]	@ (8008fe4 <DMA_Init+0x4d8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d027      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8008fe8 <DMA_Init+0x4dc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d022      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a59      	ldr	r2, [pc, #356]	@ (8008fec <DMA_Init+0x4e0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d01d      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a58      	ldr	r2, [pc, #352]	@ (8008ff0 <DMA_Init+0x4e4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d018      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a56      	ldr	r2, [pc, #344]	@ (8008ff4 <DMA_Init+0x4e8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d013      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a55      	ldr	r2, [pc, #340]	@ (8008ff8 <DMA_Init+0x4ec>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00e      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a53      	ldr	r2, [pc, #332]	@ (8008ffc <DMA_Init+0x4f0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d009      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a52      	ldr	r2, [pc, #328]	@ (8009000 <DMA_Init+0x4f4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d004      	beq.n	8008ec6 <DMA_Init+0x3ba>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a50      	ldr	r2, [pc, #320]	@ (8009004 <DMA_Init+0x4f8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d101      	bne.n	8008eca <DMA_Init+0x3be>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e000      	b.n	8008ecc <DMA_Init+0x3c0>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00d      	beq.n	8008eec <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	e008      	b.n	8008eec <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee2:	d103      	bne.n	8008eec <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008eea:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ef2:	4b45      	ldr	r3, [pc, #276]	@ (8009008 <DMA_Init+0x4fc>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2200      	movs	r2, #0
 8008f06:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a36      	ldr	r2, [pc, #216]	@ (8008fe8 <DMA_Init+0x4dc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d022      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a35      	ldr	r2, [pc, #212]	@ (8008fec <DMA_Init+0x4e0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d01d      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a33      	ldr	r2, [pc, #204]	@ (8008ff0 <DMA_Init+0x4e4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d018      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a32      	ldr	r2, [pc, #200]	@ (8008ff4 <DMA_Init+0x4e8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d013      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a30      	ldr	r2, [pc, #192]	@ (8008ff8 <DMA_Init+0x4ec>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00e      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8008ffc <DMA_Init+0x4f0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d009      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2d      	ldr	r2, [pc, #180]	@ (8009000 <DMA_Init+0x4f4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d004      	beq.n	8008f58 <DMA_Init+0x44c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a2c      	ldr	r2, [pc, #176]	@ (8009004 <DMA_Init+0x4f8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d101      	bne.n	8008f5c <DMA_Init+0x450>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e000      	b.n	8008f5e <DMA_Init+0x452>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d007      	beq.n	8008f72 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40020050 	.word	0x40020050
 8008f8c:	50020050 	.word	0x50020050
 8008f90:	400200d0 	.word	0x400200d0
 8008f94:	500200d0 	.word	0x500200d0
 8008f98:	40020150 	.word	0x40020150
 8008f9c:	50020150 	.word	0x50020150
 8008fa0:	400201d0 	.word	0x400201d0
 8008fa4:	500201d0 	.word	0x500201d0
 8008fa8:	40020250 	.word	0x40020250
 8008fac:	50020250 	.word	0x50020250
 8008fb0:	400202d0 	.word	0x400202d0
 8008fb4:	500202d0 	.word	0x500202d0
 8008fb8:	40020350 	.word	0x40020350
 8008fbc:	50020350 	.word	0x50020350
 8008fc0:	400203d0 	.word	0x400203d0
 8008fc4:	500203d0 	.word	0x500203d0
 8008fc8:	40020450 	.word	0x40020450
 8008fcc:	50020450 	.word	0x50020450
 8008fd0:	400204d0 	.word	0x400204d0
 8008fd4:	500204d0 	.word	0x500204d0
 8008fd8:	40020550 	.word	0x40020550
 8008fdc:	50020550 	.word	0x50020550
 8008fe0:	400205d0 	.word	0x400205d0
 8008fe4:	500205d0 	.word	0x500205d0
 8008fe8:	40020650 	.word	0x40020650
 8008fec:	50020650 	.word	0x50020650
 8008ff0:	400206d0 	.word	0x400206d0
 8008ff4:	500206d0 	.word	0x500206d0
 8008ff8:	40020750 	.word	0x40020750
 8008ffc:	50020750 	.word	0x50020750
 8009000:	400207d0 	.word	0x400207d0
 8009004:	500207d0 	.word	0x500207d0
 8009008:	3c803180 	.word	0x3c803180

0800900c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e053      	b.n	80090c6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fb fb60 	bl	80046f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800904a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6851      	ldr	r1, [r2, #4]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	69d2      	ldr	r2, [r2, #28]
 8009056:	4311      	orrs	r1, r2
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	430b      	orrs	r3, r1
 800905e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009066:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6891      	ldr	r1, [r2, #8]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6992      	ldr	r2, [r2, #24]
 8009076:	4311      	orrs	r1, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6812      	ldr	r2, [r2, #0]
 800907c:	430b      	orrs	r3, r1
 800907e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	041b      	lsls	r3, r3, #16
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68d1      	ldr	r1, [r2, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	430b      	orrs	r3, r1
 8009094:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	051a      	lsls	r2, r3, #20
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	055b      	lsls	r3, r3, #21
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	430a      	orrs	r2, r1
 80090b4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_DMA2D_ConfigLayer+0x24>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e092      	b.n	800921a <HAL_DMA2D_ConfigLayer+0x14a>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	4613      	mov	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	3328      	adds	r3, #40	@ 0x28
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	4413      	add	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	041b      	lsls	r3, r3, #16
 8009120:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009128:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8009134:	4b3c      	ldr	r3, [pc, #240]	@ (8009228 <HAL_DMA2D_ConfigLayer+0x158>)
 8009136:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b0a      	cmp	r3, #10
 800913e:	d003      	beq.n	8009148 <HAL_DMA2D_ConfigLayer+0x78>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b09      	cmp	r3, #9
 8009146:	d107      	bne.n	8009158 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	e005      	b.n	8009164 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	061b      	lsls	r3, r3, #24
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d120      	bne.n	80091ac <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	43db      	mvns	r3, r3
 8009174:	ea02 0103 	and.w	r1, r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	430a      	orrs	r2, r1
 8009180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	2b0a      	cmp	r3, #10
 8009192:	d003      	beq.n	800919c <HAL_DMA2D_ConfigLayer+0xcc>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	2b09      	cmp	r3, #9
 800919a:	d135      	bne.n	8009208 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80091a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80091aa:	e02d      	b.n	8009208 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b0b      	cmp	r3, #11
 80091b2:	d109      	bne.n	80091c8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	049b      	lsls	r3, r3, #18
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80091c6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	43db      	mvns	r3, r3
 80091d2:	ea02 0103 	and.w	r1, r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	430a      	orrs	r2, r1
 80091de:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	6812      	ldr	r2, [r2, #0]
 80091e8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2b0a      	cmp	r3, #10
 80091f0:	d003      	beq.n	80091fa <HAL_DMA2D_ConfigLayer+0x12a>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b09      	cmp	r3, #9
 80091f8:	d106      	bne.n	8009208 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8009206:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	371c      	adds	r7, #28
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	ff33000f 	.word	0xff33000f

0800922c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8009234:	f7fc fc94 	bl	8005b60 <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0db      	b.n	80093fc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a6e      	ldr	r2, [pc, #440]	@ (8009404 <HAL_DMAEx_List_Init+0x1d8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	f000 809f 	beq.w	800938e <HAL_DMAEx_List_Init+0x162>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a6c      	ldr	r2, [pc, #432]	@ (8009408 <HAL_DMAEx_List_Init+0x1dc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	f000 8099 	beq.w	800938e <HAL_DMAEx_List_Init+0x162>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a6a      	ldr	r2, [pc, #424]	@ (800940c <HAL_DMAEx_List_Init+0x1e0>)
 8009262:	4293      	cmp	r3, r2
 8009264:	f000 8093 	beq.w	800938e <HAL_DMAEx_List_Init+0x162>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a68      	ldr	r2, [pc, #416]	@ (8009410 <HAL_DMAEx_List_Init+0x1e4>)
 800926e:	4293      	cmp	r3, r2
 8009270:	f000 808d 	beq.w	800938e <HAL_DMAEx_List_Init+0x162>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a66      	ldr	r2, [pc, #408]	@ (8009414 <HAL_DMAEx_List_Init+0x1e8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f000 8087 	beq.w	800938e <HAL_DMAEx_List_Init+0x162>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a64      	ldr	r2, [pc, #400]	@ (8009418 <HAL_DMAEx_List_Init+0x1ec>)
 8009286:	4293      	cmp	r3, r2
 8009288:	f000 8081 	beq.w	800938e <HAL_DMAEx_List_Init+0x162>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a62      	ldr	r2, [pc, #392]	@ (800941c <HAL_DMAEx_List_Init+0x1f0>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d07b      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a61      	ldr	r2, [pc, #388]	@ (8009420 <HAL_DMAEx_List_Init+0x1f4>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d076      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a5f      	ldr	r2, [pc, #380]	@ (8009424 <HAL_DMAEx_List_Init+0x1f8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d071      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a5e      	ldr	r2, [pc, #376]	@ (8009428 <HAL_DMAEx_List_Init+0x1fc>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d06c      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a5c      	ldr	r2, [pc, #368]	@ (800942c <HAL_DMAEx_List_Init+0x200>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d067      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a5b      	ldr	r2, [pc, #364]	@ (8009430 <HAL_DMAEx_List_Init+0x204>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d062      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a59      	ldr	r2, [pc, #356]	@ (8009434 <HAL_DMAEx_List_Init+0x208>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d05d      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a58      	ldr	r2, [pc, #352]	@ (8009438 <HAL_DMAEx_List_Init+0x20c>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d058      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a56      	ldr	r2, [pc, #344]	@ (800943c <HAL_DMAEx_List_Init+0x210>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d053      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a55      	ldr	r2, [pc, #340]	@ (8009440 <HAL_DMAEx_List_Init+0x214>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d04e      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a53      	ldr	r2, [pc, #332]	@ (8009444 <HAL_DMAEx_List_Init+0x218>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d049      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a52      	ldr	r2, [pc, #328]	@ (8009448 <HAL_DMAEx_List_Init+0x21c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d044      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a50      	ldr	r2, [pc, #320]	@ (800944c <HAL_DMAEx_List_Init+0x220>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d03f      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a4f      	ldr	r2, [pc, #316]	@ (8009450 <HAL_DMAEx_List_Init+0x224>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d03a      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a4d      	ldr	r2, [pc, #308]	@ (8009454 <HAL_DMAEx_List_Init+0x228>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d035      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a4c      	ldr	r2, [pc, #304]	@ (8009458 <HAL_DMAEx_List_Init+0x22c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d030      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a4a      	ldr	r2, [pc, #296]	@ (800945c <HAL_DMAEx_List_Init+0x230>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d02b      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a49      	ldr	r2, [pc, #292]	@ (8009460 <HAL_DMAEx_List_Init+0x234>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d026      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a47      	ldr	r2, [pc, #284]	@ (8009464 <HAL_DMAEx_List_Init+0x238>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d021      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a46      	ldr	r2, [pc, #280]	@ (8009468 <HAL_DMAEx_List_Init+0x23c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d01c      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a44      	ldr	r2, [pc, #272]	@ (800946c <HAL_DMAEx_List_Init+0x240>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d017      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a43      	ldr	r2, [pc, #268]	@ (8009470 <HAL_DMAEx_List_Init+0x244>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d012      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a41      	ldr	r2, [pc, #260]	@ (8009474 <HAL_DMAEx_List_Init+0x248>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00d      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a40      	ldr	r2, [pc, #256]	@ (8009478 <HAL_DMAEx_List_Init+0x24c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d008      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a3e      	ldr	r2, [pc, #248]	@ (800947c <HAL_DMAEx_List_Init+0x250>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <HAL_DMAEx_List_Init+0x162>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a3d      	ldr	r2, [pc, #244]	@ (8009480 <HAL_DMAEx_List_Init+0x254>)
 800938c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695a      	ldr	r2, [r3, #20]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0206 	orr.w	r2, r2, #6
 80093ac:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80093ae:	e00f      	b.n	80093d0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80093b0:	f7fc fbd6 	bl	8005b60 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b05      	cmp	r3, #5
 80093bc:	d908      	bls.n	80093d0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2210      	movs	r2, #16
 80093c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2203      	movs	r2, #3
 80093c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e015      	b.n	80093fc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e8      	bne.n	80093b0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fae0 	bl	80099a4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	40020050 	.word	0x40020050
 8009408:	50020050 	.word	0x50020050
 800940c:	400200d0 	.word	0x400200d0
 8009410:	500200d0 	.word	0x500200d0
 8009414:	40020150 	.word	0x40020150
 8009418:	50020150 	.word	0x50020150
 800941c:	400201d0 	.word	0x400201d0
 8009420:	500201d0 	.word	0x500201d0
 8009424:	40020250 	.word	0x40020250
 8009428:	50020250 	.word	0x50020250
 800942c:	400202d0 	.word	0x400202d0
 8009430:	500202d0 	.word	0x500202d0
 8009434:	40020350 	.word	0x40020350
 8009438:	50020350 	.word	0x50020350
 800943c:	400203d0 	.word	0x400203d0
 8009440:	500203d0 	.word	0x500203d0
 8009444:	40020450 	.word	0x40020450
 8009448:	50020450 	.word	0x50020450
 800944c:	400204d0 	.word	0x400204d0
 8009450:	500204d0 	.word	0x500204d0
 8009454:	40020550 	.word	0x40020550
 8009458:	50020550 	.word	0x50020550
 800945c:	400205d0 	.word	0x400205d0
 8009460:	500205d0 	.word	0x500205d0
 8009464:	40020650 	.word	0x40020650
 8009468:	50020650 	.word	0x50020650
 800946c:	400206d0 	.word	0x400206d0
 8009470:	500206d0 	.word	0x500206d0
 8009474:	40020750 	.word	0x40020750
 8009478:	50020750 	.word	0x50020750
 800947c:	400207d0 	.word	0x400207d0
 8009480:	500207d0 	.word	0x500207d0

08009484 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_DMAEx_List_Start_IT+0x16>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e082      	b.n	80095a4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80094a4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094b0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d005      	beq.n	80094c4 <HAL_DMAEx_List_Start_IT+0x40>
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d16a      	bne.n	8009594 <HAL_DMAEx_List_Start_IT+0x110>
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d067      	beq.n	8009594 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d157      	bne.n	8009580 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_DMAEx_List_Start_IT+0x5a>
 80094da:	2302      	movs	r3, #2
 80094dc:	e062      	b.n	80095a4 <HAL_DMAEx_List_Start_IT+0x120>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094f2:	2202      	movs	r2, #2
 80094f4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009500:	2200      	movs	r2, #0
 8009502:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695a      	ldr	r2, [r3, #20]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8009512:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009518:	2b00      	cmp	r3, #0
 800951a:	d007      	beq.n	800952c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800952a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009530:	2b00      	cmp	r3, #0
 8009532:	d007      	beq.n	8009544 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695a      	ldr	r2, [r3, #20]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009542:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f107 010c 	add.w	r1, r7, #12
 800954e:	2200      	movs	r2, #0
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fe47 	bl	800a1e4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4619      	mov	r1, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	0c0b      	lsrs	r3, r1, #16
 8009564:	041b      	lsls	r3, r3, #16
 8009566:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009574:	4013      	ands	r3, r2
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	430b      	orrs	r3, r1
 800957e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	695a      	ldr	r2, [r3, #20]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0201 	orr.w	r2, r2, #1
 800958e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	e007      	b.n	80095a4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2240      	movs	r2, #64	@ 0x40
 8009598:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <HAL_DMAEx_List_BuildNode+0x16>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e004      	b.n	80095d0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fb43 	bl	8009c54 <DMA_List_BuildNode>

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <HAL_DMAEx_List_GetNodeConfig+0x16>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e004      	b.n	80095fc <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fc7f 	bl	8009ef8 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08c      	sub	sp, #48	@ 0x30
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <HAL_DMAEx_List_InsertNode+0x18>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e0b6      	b.n	800978e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d104      	bne.n	8009632 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2204      	movs	r2, #4
 800962c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e0ad      	b.n	800978e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fd66 	bl	800a10c <DMA_List_CheckNodesBaseAddresses>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2205      	movs	r2, #5
 800964a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e09e      	b.n	800978e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fd87 	bl	800a16c <DMA_List_CheckNodesTypes>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2204      	movs	r2, #4
 8009668:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e08f      	b.n	800978e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2202      	movs	r2, #2
 8009672:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800967a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800967e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fdad 	bl	800a1e4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d11a      	bne.n	80096c8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2201      	movs	r2, #1
 80096a2:	609a      	str	r2, [r3, #8]
 80096a4:	e06c      	b.n	8009780 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80096b2:	4013      	ands	r3, r2
 80096b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096b8:	4319      	orrs	r1, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2202      	movs	r2, #2
 80096c4:	609a      	str	r2, [r3, #8]
 80096c6:	e05b      	b.n	8009780 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10f      	bne.n	80096ee <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80096d8:	4013      	ands	r3, r2
 80096da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096de:	4319      	orrs	r1, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	e043      	b.n	8009776 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80096ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80096f2:	f107 0314 	add.w	r3, r7, #20
 80096f6:	461a      	mov	r2, r3
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 fda2 	bl	800a244 <DMA_List_FindNode>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d132      	bne.n	800976c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	429a      	cmp	r2, r3
 800970e:	d11a      	bne.n	8009746 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	461a      	mov	r2, r3
 800971e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009722:	4013      	ands	r3, r2
 8009724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009728:	4319      	orrs	r1, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009736:	4013      	ands	r3, r2
 8009738:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800973a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800973c:	4319      	orrs	r1, r3
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009744:	e017      	b.n	8009776 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8009746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800975c:	4013      	ands	r3, r2
 800975e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009762:	4319      	orrs	r1, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800976a:	e004      	b.n	8009776 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2206      	movs	r2, #6
 8009770:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e00b      	b.n	800978e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3730      	adds	r7, #48	@ 0x30
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b08a      	sub	sp, #40	@ 0x28
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e052      	b.n	800984e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e049      	b.n	800984e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00c      	beq.n	80097dc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d101      	bne.n	80097d2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e03d      	b.n	800984e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2204      	movs	r2, #4
 80097d6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e038      	b.n	800984e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d104      	bne.n	80097ee <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2204      	movs	r2, #4
 80097e8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e02f      	b.n	800984e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2202      	movs	r2, #2
 80097f2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f107 0220 	add.w	r2, r7, #32
 8009802:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fcec 	bl	800a1e4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8009810:	f107 030c 	add.w	r3, r7, #12
 8009814:	461a      	mov	r2, r3
 8009816:	2100      	movs	r1, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fd13 	bl	800a244 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009828:	4013      	ands	r3, r2
 800982a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	4610      	mov	r0, r2
 8009830:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009832:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009834:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3728      	adds	r7, #40	@ 0x28
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <HAL_DMAEx_List_LinkQ+0x16>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e072      	b.n	8009958 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009878:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b02      	cmp	r3, #2
 8009884:	d002      	beq.n	800988c <HAL_DMAEx_List_LinkQ+0x34>
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	2b05      	cmp	r3, #5
 800988a:	d108      	bne.n	800989e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2240      	movs	r2, #64	@ 0x40
 8009890:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e05c      	b.n	8009958 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	7b1b      	ldrb	r3, [r3, #12]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d104      	bne.n	80098b2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2201      	movs	r2, #1
 80098ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e052      	b.n	8009958 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009964 <HAL_DMAEx_List_LinkQ+0x10c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d022      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a29      	ldr	r2, [pc, #164]	@ (8009968 <HAL_DMAEx_List_LinkQ+0x110>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01d      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a28      	ldr	r2, [pc, #160]	@ (800996c <HAL_DMAEx_List_LinkQ+0x114>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d018      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <HAL_DMAEx_List_LinkQ+0x118>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d013      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a25      	ldr	r2, [pc, #148]	@ (8009974 <HAL_DMAEx_List_LinkQ+0x11c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d00e      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a23      	ldr	r2, [pc, #140]	@ (8009978 <HAL_DMAEx_List_LinkQ+0x120>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d009      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a22      	ldr	r2, [pc, #136]	@ (800997c <HAL_DMAEx_List_LinkQ+0x124>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d004      	beq.n	8009902 <HAL_DMAEx_List_LinkQ+0xaa>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a20      	ldr	r2, [pc, #128]	@ (8009980 <HAL_DMAEx_List_LinkQ+0x128>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d101      	bne.n	8009906 <HAL_DMAEx_List_LinkQ+0xae>
 8009902:	2301      	movs	r3, #1
 8009904:	e000      	b.n	8009908 <HAL_DMAEx_List_LinkQ+0xb0>
 8009906:	2300      	movs	r3, #0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10b      	bne.n	8009924 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009916:	2b00      	cmp	r3, #0
 8009918:	d004      	beq.n	8009924 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2203      	movs	r2, #3
 800991e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e019      	b.n	8009958 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009928:	2b81      	cmp	r3, #129	@ 0x81
 800992a:	d108      	bne.n	800993e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10d      	bne.n	8009950 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2204      	movs	r2, #4
 8009938:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e00c      	b.n	8009958 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d004      	beq.n	8009950 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2204      	movs	r2, #4
 800994a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e003      	b.n	8009958 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	40020650 	.word	0x40020650
 8009968:	50020650 	.word	0x50020650
 800996c:	400206d0 	.word	0x400206d0
 8009970:	500206d0 	.word	0x500206d0
 8009974:	40020750 	.word	0x40020750
 8009978:	50020750 	.word	0x50020750
 800997c:	400207d0 	.word	0x400207d0
 8009980:	500207d0 	.word	0x500207d0

08009984 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	b2db      	uxtb	r3, r3
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
	...

080099a4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b4:	4313      	orrs	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a85      	ldr	r2, [pc, #532]	@ (8009bd4 <DMA_List_Init+0x230>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	f000 80a0 	beq.w	8009b04 <DMA_List_Init+0x160>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a83      	ldr	r2, [pc, #524]	@ (8009bd8 <DMA_List_Init+0x234>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	f000 809a 	beq.w	8009b04 <DMA_List_Init+0x160>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a81      	ldr	r2, [pc, #516]	@ (8009bdc <DMA_List_Init+0x238>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f000 8094 	beq.w	8009b04 <DMA_List_Init+0x160>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a7f      	ldr	r2, [pc, #508]	@ (8009be0 <DMA_List_Init+0x23c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	f000 808e 	beq.w	8009b04 <DMA_List_Init+0x160>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a7d      	ldr	r2, [pc, #500]	@ (8009be4 <DMA_List_Init+0x240>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	f000 8088 	beq.w	8009b04 <DMA_List_Init+0x160>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a7b      	ldr	r2, [pc, #492]	@ (8009be8 <DMA_List_Init+0x244>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	f000 8082 	beq.w	8009b04 <DMA_List_Init+0x160>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a79      	ldr	r2, [pc, #484]	@ (8009bec <DMA_List_Init+0x248>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d07c      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a78      	ldr	r2, [pc, #480]	@ (8009bf0 <DMA_List_Init+0x24c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d077      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a76      	ldr	r2, [pc, #472]	@ (8009bf4 <DMA_List_Init+0x250>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d072      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a75      	ldr	r2, [pc, #468]	@ (8009bf8 <DMA_List_Init+0x254>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d06d      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a73      	ldr	r2, [pc, #460]	@ (8009bfc <DMA_List_Init+0x258>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d068      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a72      	ldr	r2, [pc, #456]	@ (8009c00 <DMA_List_Init+0x25c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d063      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a70      	ldr	r2, [pc, #448]	@ (8009c04 <DMA_List_Init+0x260>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d05e      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8009c08 <DMA_List_Init+0x264>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d059      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a6d      	ldr	r2, [pc, #436]	@ (8009c0c <DMA_List_Init+0x268>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d054      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8009c10 <DMA_List_Init+0x26c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d04f      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a6a      	ldr	r2, [pc, #424]	@ (8009c14 <DMA_List_Init+0x270>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d04a      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a69      	ldr	r2, [pc, #420]	@ (8009c18 <DMA_List_Init+0x274>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d045      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a67      	ldr	r2, [pc, #412]	@ (8009c1c <DMA_List_Init+0x278>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d040      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a66      	ldr	r2, [pc, #408]	@ (8009c20 <DMA_List_Init+0x27c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d03b      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a64      	ldr	r2, [pc, #400]	@ (8009c24 <DMA_List_Init+0x280>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d036      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a63      	ldr	r2, [pc, #396]	@ (8009c28 <DMA_List_Init+0x284>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d031      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a61      	ldr	r2, [pc, #388]	@ (8009c2c <DMA_List_Init+0x288>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d02c      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a60      	ldr	r2, [pc, #384]	@ (8009c30 <DMA_List_Init+0x28c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d027      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8009c34 <DMA_List_Init+0x290>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d022      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8009c38 <DMA_List_Init+0x294>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d01d      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a5b      	ldr	r2, [pc, #364]	@ (8009c3c <DMA_List_Init+0x298>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d018      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a5a      	ldr	r2, [pc, #360]	@ (8009c40 <DMA_List_Init+0x29c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d013      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a58      	ldr	r2, [pc, #352]	@ (8009c44 <DMA_List_Init+0x2a0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00e      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a57      	ldr	r2, [pc, #348]	@ (8009c48 <DMA_List_Init+0x2a4>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d009      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a55      	ldr	r2, [pc, #340]	@ (8009c4c <DMA_List_Init+0x2a8>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d004      	beq.n	8009b04 <DMA_List_Init+0x160>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a54      	ldr	r2, [pc, #336]	@ (8009c50 <DMA_List_Init+0x2ac>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d101      	bne.n	8009b08 <DMA_List_Init+0x164>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e000      	b.n	8009b0a <DMA_List_Init+0x166>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d004      	beq.n	8009b18 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2200      	movs	r2, #0
 8009b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009b3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2200      	movs	r2, #0
 8009b44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a36      	ldr	r2, [pc, #216]	@ (8009c34 <DMA_List_Init+0x290>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d022      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a34      	ldr	r2, [pc, #208]	@ (8009c38 <DMA_List_Init+0x294>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d01d      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a33      	ldr	r2, [pc, #204]	@ (8009c3c <DMA_List_Init+0x298>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d018      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a31      	ldr	r2, [pc, #196]	@ (8009c40 <DMA_List_Init+0x29c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d013      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a30      	ldr	r2, [pc, #192]	@ (8009c44 <DMA_List_Init+0x2a0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00e      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8009c48 <DMA_List_Init+0x2a4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d009      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a2d      	ldr	r2, [pc, #180]	@ (8009c4c <DMA_List_Init+0x2a8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d004      	beq.n	8009ba6 <DMA_List_Init+0x202>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8009c50 <DMA_List_Init+0x2ac>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d101      	bne.n	8009baa <DMA_List_Init+0x206>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <DMA_List_Init+0x208>
 8009baa:	2300      	movs	r3, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d007      	beq.n	8009bc0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	40020050 	.word	0x40020050
 8009bd8:	50020050 	.word	0x50020050
 8009bdc:	400200d0 	.word	0x400200d0
 8009be0:	500200d0 	.word	0x500200d0
 8009be4:	40020150 	.word	0x40020150
 8009be8:	50020150 	.word	0x50020150
 8009bec:	400201d0 	.word	0x400201d0
 8009bf0:	500201d0 	.word	0x500201d0
 8009bf4:	40020250 	.word	0x40020250
 8009bf8:	50020250 	.word	0x50020250
 8009bfc:	400202d0 	.word	0x400202d0
 8009c00:	500202d0 	.word	0x500202d0
 8009c04:	40020350 	.word	0x40020350
 8009c08:	50020350 	.word	0x50020350
 8009c0c:	400203d0 	.word	0x400203d0
 8009c10:	500203d0 	.word	0x500203d0
 8009c14:	40020450 	.word	0x40020450
 8009c18:	50020450 	.word	0x50020450
 8009c1c:	400204d0 	.word	0x400204d0
 8009c20:	500204d0 	.word	0x500204d0
 8009c24:	40020550 	.word	0x40020550
 8009c28:	50020550 	.word	0x50020550
 8009c2c:	400205d0 	.word	0x400205d0
 8009c30:	500205d0 	.word	0x500205d0
 8009c34:	40020650 	.word	0x40020650
 8009c38:	50020650 	.word	0x50020650
 8009c3c:	400206d0 	.word	0x400206d0
 8009c40:	500206d0 	.word	0x500206d0
 8009c44:	40020750 	.word	0x40020750
 8009c48:	50020750 	.word	0x50020750
 8009c4c:	400207d0 	.word	0x400207d0
 8009c50:	500207d0 	.word	0x500207d0

08009c54 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009c66:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009c6c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009c72:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8009c78:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d017      	beq.n	8009cba <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c96:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	051b      	lsls	r3, r3, #20
 8009ca0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009ca4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009caa:	3b01      	subs	r3, #1
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009cb2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6859      	ldr	r1, [r3, #4]
 8009cc2:	f240 237f 	movw	r3, #639	@ 0x27f
 8009cc6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cd6:	d10c      	bne.n	8009cf2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d011      	beq.n	8009d08 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	605a      	str	r2, [r3, #4]
 8009cf0:	e00a      	b.n	8009d08 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfa:	d105      	bne.n	8009d08 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00f      	beq.n	8009d30 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009d28:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d04e      	beq.n	8009de4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	0419      	lsls	r1, r3, #16
 8009d52:	4b67      	ldr	r3, [pc, #412]	@ (8009ef0 <DMA_List_BuildNode+0x29c>)
 8009d54:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009d56:	431a      	orrs	r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da06      	bge.n	8009d72 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	609a      	str	r2, [r3, #8]
 8009d70:	e005      	b.n	8009d7e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	da06      	bge.n	8009d94 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	609a      	str	r2, [r3, #8]
 8009d92:	e005      	b.n	8009da0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da06      	bge.n	8009db6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	609a      	str	r2, [r3, #8]
 8009db4:	e005      	b.n	8009dc2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da06      	bge.n	8009dd8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	609a      	str	r2, [r3, #8]
 8009dd6:	e005      	b.n	8009de4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d059      	beq.n	8009eb4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	da09      	bge.n	8009e1c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e0c:	425b      	negs	r3, r3
 8009e0e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	615a      	str	r2, [r3, #20]
 8009e1a:	e005      	b.n	8009e28 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e20:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	da0d      	bge.n	8009e4c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e34:	425b      	negs	r3, r3
 8009e36:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	695a      	ldr	r2, [r3, #20]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	0419      	lsls	r1, r3, #16
 8009e40:	4b2c      	ldr	r3, [pc, #176]	@ (8009ef4 <DMA_List_BuildNode+0x2a0>)
 8009e42:	400b      	ands	r3, r1
 8009e44:	431a      	orrs	r2, r3
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	615a      	str	r2, [r3, #20]
 8009e4a:	e009      	b.n	8009e60 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e54:	0419      	lsls	r1, r3, #16
 8009e56:	4b27      	ldr	r3, [pc, #156]	@ (8009ef4 <DMA_List_BuildNode+0x2a0>)
 8009e58:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da08      	bge.n	8009e7a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e6c:	425b      	negs	r3, r3
 8009e6e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	619a      	str	r2, [r3, #24]
 8009e78:	e004      	b.n	8009e84 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e7e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da0b      	bge.n	8009ea4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e90:	425b      	negs	r3, r3
 8009e92:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	619a      	str	r2, [r3, #24]
 8009ea2:	e007      	b.n	8009eb4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eac:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d006      	beq.n	8009ed6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8009ed4:	e005      	b.n	8009ee2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	07ff0000 	.word	0x07ff0000
 8009ef4:	1fff0000 	.word	0x1fff0000

08009ef8 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0208 	and.w	r2, r3, #8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0203 	and.w	r2, r3, #3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8009f40:	091b      	lsrs	r3, r3, #4
 8009f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f46:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8009f50:	0d1b      	lsrs	r3, r3, #20
 8009f52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f56:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	4b66      	ldr	r3, [pc, #408]	@ (800a108 <DMA_List_GetNodeConfig+0x210>)
 8009f6e:	4013      	ands	r3, r2
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f92:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f9a:	60da      	str	r2, [r3, #12]
 8009f9c:	e013      	b.n	8009fc6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d004      	beq.n	8009fc0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	e002      	b.n	8009fc6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8009fee:	0c1b      	lsrs	r3, r3, #16
 8009ff0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d008      	beq.n	800a02c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a024:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a02a:	e002      	b.n	800a032 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d04a      	beq.n	800a0e4 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	b29b      	uxth	r3, r3
 800a054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a058:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800a05a:	89fa      	ldrh	r2, [r7, #14]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	0c1b      	lsrs	r3, r3, #16
 800a066:	b29b      	uxth	r3, r3
 800a068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a06c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800a06e:	89fa      	ldrh	r2, [r7, #14]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d004      	beq.n	800a08a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a084:	425a      	negs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09a:	425a      	negs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800a0a6:	89fa      	ldrh	r2, [r7, #14]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	0c1b      	lsrs	r3, r3, #16
 800a0b2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800a0b4:	89fa      	ldrh	r2, [r7, #14]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d004      	beq.n	800a0d0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ca:	425a      	negs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	da11      	bge.n	800a0fc <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0dc:	425a      	negs	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800a0e2:	e00b      	b.n	800a0fc <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a0fc:	bf00      	nop
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	0c002000 	.word	0x0c002000

0800a10c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4313      	orrs	r3, r2
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	041b      	lsls	r3, r3, #16
 800a126:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e00a      	b.n	800a14e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e004      	b.n	800a14e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	0c1b      	lsrs	r3, r3, #16
 800a152:	041b      	lsls	r3, r3, #16
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	429a      	cmp	r2, r3
 800a158:	d001      	beq.n	800a15e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	b2db      	uxtb	r3, r3
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	e00e      	b.n	800a1aa <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	b2db      	uxtb	r3, r3
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e006      	b.n	800a1aa <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d007      	beq.n	800a1c0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d001      	beq.n	800a1c0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e00b      	b.n	800a1d8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d007      	beq.n	800a1d6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d001      	beq.n	800a1d6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e000      	b.n	800a1d8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4a0d      	ldr	r2, [pc, #52]	@ (800a23c <DMA_List_GetCLLRNodeInfo+0x58>)
 800a206:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00f      	beq.n	800a22e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2207      	movs	r2, #7
 800a212:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800a214:	e00b      	b.n	800a22e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4a08      	ldr	r2, [pc, #32]	@ (800a240 <DMA_List_GetCLLRNodeInfo+0x5c>)
 800a220:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2205      	movs	r2, #5
 800a22c:	601a      	str	r2, [r3, #0]
}
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	fe010000 	.word	0xfe010000
 800a240:	f8010000 	.word	0xf8010000

0800a244 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800a244:	b480      	push	{r7}
 800a246:	b089      	sub	sp, #36	@ 0x24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d142      	bne.n	800a2ee <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800a268:	e01d      	b.n	800a2a6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d107      	bne.n	800a280 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a27a:	4013      	ands	r3, r2
 800a27c:	61bb      	str	r3, [r7, #24]
 800a27e:	e00f      	b.n	800a2a0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	0c1b      	lsrs	r3, r3, #16
 800a28a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	4413      	add	r3, r2
 800a290:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a298:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a29c:	4013      	ands	r3, r2
 800a29e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3dc      	bcc.n	800a26a <DMA_List_FindNode+0x26>
 800a2b0:	e029      	b.n	800a306 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d107      	bne.n	800a2c8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	e00f      	b.n	800a2e8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	0c1b      	lsrs	r3, r3, #16
 800a2d2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a2e0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	69fa      	ldr	r2, [r7, #28]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d206      	bcs.n	800a306 <DMA_List_FindNode+0xc2>
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a2fe:	4013      	ands	r3, r2
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	429a      	cmp	r2, r3
 800a304:	d1d5      	bne.n	800a2b2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800a312:	4013      	ands	r3, r2
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	429a      	cmp	r2, r3
 800a318:	d001      	beq.n	800a31e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e02b      	b.n	800a376 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69fa      	ldr	r2, [r7, #28]
 800a322:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	0c1b      	lsrs	r3, r3, #16
 800a32a:	041b      	lsls	r3, r3, #16
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	041b      	lsls	r3, r3, #16
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	461a      	mov	r2, r3
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00f      	beq.n	800a374 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	461a      	mov	r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a360:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a364:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	0c1b      	lsrs	r3, r3, #16
 800a36c:	041b      	lsls	r3, r3, #16
 800a36e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3724      	adds	r7, #36	@ 0x24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
	...

0800a384 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a384:	b480      	push	{r7}
 800a386:	b089      	sub	sp, #36	@ 0x24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a396:	e1ba      	b.n	800a70e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	2101      	movs	r1, #1
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 81aa 	beq.w	800a708 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a55      	ldr	r2, [pc, #340]	@ (800a50c <HAL_GPIO_Init+0x188>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d15d      	bne.n	800a478 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ca:	43db      	mvns	r3, r3
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f003 0201 	and.w	r2, r3, #1
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69fa      	ldr	r2, [r7, #28]
 800a3ea:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a3ec:	4a48      	ldr	r2, [pc, #288]	@ (800a510 <HAL_GPIO_Init+0x18c>)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3f4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a3f6:	4a46      	ldr	r2, [pc, #280]	@ (800a510 <HAL_GPIO_Init+0x18c>)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	4413      	add	r3, r2
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	08da      	lsrs	r2, r3, #3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	3208      	adds	r2, #8
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	220f      	movs	r2, #15
 800a41a:	fa02 f303 	lsl.w	r3, r2, r3
 800a41e:	43db      	mvns	r3, r3
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	4013      	ands	r3, r2
 800a424:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	f003 0307 	and.w	r3, r3, #7
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	220b      	movs	r2, #11
 800a430:	fa02 f303 	lsl.w	r3, r2, r3
 800a434:	69fa      	ldr	r2, [r7, #28]
 800a436:	4313      	orrs	r3, r2
 800a438:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	08da      	lsrs	r2, r3, #3
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3208      	adds	r2, #8
 800a442:	69f9      	ldr	r1, [r7, #28]
 800a444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	2203      	movs	r2, #3
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	43db      	mvns	r3, r3
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	4013      	ands	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	2202      	movs	r2, #2
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	69fa      	ldr	r2, [r7, #28]
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	e067      	b.n	800a548 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d003      	beq.n	800a488 <HAL_GPIO_Init+0x104>
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b12      	cmp	r3, #18
 800a486:	d145      	bne.n	800a514 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	08da      	lsrs	r2, r3, #3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3208      	adds	r2, #8
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	220f      	movs	r2, #15
 800a4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a4:	43db      	mvns	r3, r3
 800a4a6:	69fa      	ldr	r2, [r7, #28]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f003 020f 	and.w	r2, r3, #15
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c0:	69fa      	ldr	r2, [r7, #28]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	08da      	lsrs	r2, r3, #3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3208      	adds	r2, #8
 800a4ce:	69f9      	ldr	r1, [r7, #28]
 800a4d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	2203      	movs	r2, #3
 800a4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e4:	43db      	mvns	r3, r3
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f003 0203 	and.w	r2, r3, #3
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fc:	69fa      	ldr	r2, [r7, #28]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e01e      	b.n	800a548 <HAL_GPIO_Init+0x1c4>
 800a50a:	bf00      	nop
 800a50c:	46020000 	.word	0x46020000
 800a510:	080189e0 	.word	0x080189e0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	2203      	movs	r2, #3
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	43db      	mvns	r3, r3
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	4013      	ands	r3, r2
 800a52a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f003 0203 	and.w	r2, r3, #3
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	fa02 f303 	lsl.w	r3, r2, r3
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	4313      	orrs	r3, r2
 800a540:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	69fa      	ldr	r2, [r7, #28]
 800a546:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d00b      	beq.n	800a568 <HAL_GPIO_Init+0x1e4>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d007      	beq.n	800a568 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a55c:	2b11      	cmp	r3, #17
 800a55e:	d003      	beq.n	800a568 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2b12      	cmp	r3, #18
 800a566:	d130      	bne.n	800a5ca <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	2203      	movs	r2, #3
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	43db      	mvns	r3, r3
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	4013      	ands	r3, r2
 800a57e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	fa02 f303 	lsl.w	r3, r2, r3
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	4313      	orrs	r3, r2
 800a590:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a59e:	2201      	movs	r2, #1
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a6:	43db      	mvns	r3, r3
 800a5a8:	69fa      	ldr	r2, [r7, #28]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	091b      	lsrs	r3, r3, #4
 800a5b4:	f003 0201 	and.w	r2, r3, #1
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d017      	beq.n	800a602 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	2203      	movs	r2, #3
 800a5de:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e2:	43db      	mvns	r3, r3
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d07c      	beq.n	800a708 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a60e:	4a47      	ldr	r2, [pc, #284]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	089b      	lsrs	r3, r3, #2
 800a614:	3318      	adds	r3, #24
 800a616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a61a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	220f      	movs	r2, #15
 800a626:	fa02 f303 	lsl.w	r3, r2, r3
 800a62a:	43db      	mvns	r3, r3
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	4013      	ands	r3, r2
 800a630:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	0a9a      	lsrs	r2, r3, #10
 800a636:	4b3e      	ldr	r3, [pc, #248]	@ (800a730 <HAL_GPIO_Init+0x3ac>)
 800a638:	4013      	ands	r3, r2
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	f002 0203 	and.w	r2, r2, #3
 800a640:	00d2      	lsls	r2, r2, #3
 800a642:	4093      	lsls	r3, r2
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	4313      	orrs	r3, r2
 800a648:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a64a:	4938      	ldr	r1, [pc, #224]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	089b      	lsrs	r3, r3, #2
 800a650:	3318      	adds	r3, #24
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a658:	4b34      	ldr	r3, [pc, #208]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	43db      	mvns	r3, r3
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	4013      	ands	r3, r2
 800a666:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a674:	69fa      	ldr	r2, [r7, #28]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	4313      	orrs	r3, r2
 800a67a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a67c:	4a2b      	ldr	r2, [pc, #172]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a682:	4b2a      	ldr	r3, [pc, #168]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	43db      	mvns	r3, r3
 800a68c:	69fa      	ldr	r2, [r7, #28]
 800a68e:	4013      	ands	r3, r2
 800a690:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a69e:	69fa      	ldr	r2, [r7, #28]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a6a6:	4a21      	ldr	r2, [pc, #132]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a6ac:	4b1f      	ldr	r3, [pc, #124]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	69fa      	ldr	r2, [r7, #28]
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a6d2:	4a16      	ldr	r2, [pc, #88]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800a6da:	4b14      	ldr	r3, [pc, #80]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	43db      	mvns	r3, r3
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a6f8:	69fa      	ldr	r2, [r7, #28]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a700:	4a0a      	ldr	r2, [pc, #40]	@ (800a72c <HAL_GPIO_Init+0x3a8>)
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	3301      	adds	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	fa22 f303 	lsr.w	r3, r2, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f47f ae3d 	bne.w	800a398 <HAL_GPIO_Init+0x14>
  }
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	3724      	adds	r7, #36	@ 0x24
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	46022000 	.word	0x46022000
 800a730:	002f7f7f 	.word	0x002f7f7f

0800a734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	807b      	strh	r3, [r7, #2]
 800a740:	4613      	mov	r3, r2
 800a742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a744:	787b      	ldrb	r3, [r7, #1]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a74a:	887a      	ldrh	r2, [r7, #2]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a750:	e002      	b.n	800a758 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a752:	887a      	ldrh	r2, [r7, #2]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a76e:	4b0f      	ldr	r3, [pc, #60]	@ (800a7ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a770:	68da      	ldr	r2, [r3, #12]
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	4013      	ands	r3, r2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d006      	beq.n	800a788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a77a:	4a0c      	ldr	r2, [pc, #48]	@ (800a7ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a77c:	88fb      	ldrh	r3, [r7, #6]
 800a77e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f814 	bl	800a7b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a788:	4b08      	ldr	r3, [pc, #32]	@ (800a7ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	88fb      	ldrh	r3, [r7, #6]
 800a78e:	4013      	ands	r3, r2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d006      	beq.n	800a7a2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a794:	4a05      	ldr	r2, [pc, #20]	@ (800a7ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a79a:	88fb      	ldrh	r3, [r7, #6]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f812 	bl	800a7c6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a7a2:	bf00      	nop
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	46022000 	.word	0x46022000

0800a7b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e08d      	b.n	800a90a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7fa f806 	bl	8004814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2224      	movs	r2, #36	@ 0x24
 800a80c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0201 	bic.w	r2, r2, #1
 800a81e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a82c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a83c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d107      	bne.n	800a856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689a      	ldr	r2, [r3, #8]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	e006      	b.n	800a864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d108      	bne.n	800a87e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a87a:	605a      	str	r2, [r3, #4]
 800a87c:	e007      	b.n	800a88e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a88c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6812      	ldr	r2, [r2, #0]
 800a898:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a89c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68da      	ldr	r2, [r3, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a8b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	691a      	ldr	r2, [r3, #16]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	69d9      	ldr	r1, [r3, #28]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a1a      	ldr	r2, [r3, #32]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0201 	orr.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af02      	add	r7, sp, #8
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	607a      	str	r2, [r7, #4]
 800a91e:	461a      	mov	r2, r3
 800a920:	460b      	mov	r3, r1
 800a922:	817b      	strh	r3, [r7, #10]
 800a924:	4613      	mov	r3, r2
 800a926:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b20      	cmp	r3, #32
 800a932:	f040 80da 	bne.w	800aaea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d101      	bne.n	800a944 <HAL_I2C_Master_Transmit+0x30>
 800a940:	2302      	movs	r3, #2
 800a942:	e0d3      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1d8>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a94c:	f7fb f908 	bl	8005b60 <HAL_GetTick>
 800a950:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	2319      	movs	r3, #25
 800a958:	2201      	movs	r2, #1
 800a95a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 ff73 	bl	800b84a <I2C_WaitOnFlagUntilTimeout>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e0be      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2221      	movs	r2, #33	@ 0x21
 800a972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2210      	movs	r2, #16
 800a97a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	893a      	ldrh	r2, [r7, #8]
 800a98e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2bff      	cmp	r3, #255	@ 0xff
 800a99e:	d90e      	bls.n	800a9be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	22ff      	movs	r2, #255	@ 0xff
 800a9a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	8979      	ldrh	r1, [r7, #10]
 800a9ae:	4b51      	ldr	r3, [pc, #324]	@ (800aaf4 <HAL_I2C_Master_Transmit+0x1e0>)
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f001 f996 	bl	800bce8 <I2C_TransferConfig>
 800a9bc:	e06c      	b.n	800aa98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	8979      	ldrh	r1, [r7, #10]
 800a9d0:	4b48      	ldr	r3, [pc, #288]	@ (800aaf4 <HAL_I2C_Master_Transmit+0x1e0>)
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f001 f985 	bl	800bce8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a9de:	e05b      	b.n	800aa98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	6a39      	ldr	r1, [r7, #32]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 ff89 	bl	800b8fc <I2C_WaitOnTXISFlagUntilTimeout>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e07b      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	3b01      	subs	r3, #1
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d034      	beq.n	800aa98 <HAL_I2C_Master_Transmit+0x184>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d130      	bne.n	800aa98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2180      	movs	r1, #128	@ 0x80
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 ff02 	bl	800b84a <I2C_WaitOnFlagUntilTimeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e04d      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2bff      	cmp	r3, #255	@ 0xff
 800aa58:	d90e      	bls.n	800aa78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	22ff      	movs	r2, #255	@ 0xff
 800aa5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	8979      	ldrh	r1, [r7, #10]
 800aa68:	2300      	movs	r3, #0
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f001 f939 	bl	800bce8 <I2C_TransferConfig>
 800aa76:	e00f      	b.n	800aa98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	8979      	ldrh	r1, [r7, #10]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f001 f928 	bl	800bce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d19e      	bne.n	800a9e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	6a39      	ldr	r1, [r7, #32]
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 ff6f 	bl	800b98a <I2C_WaitOnSTOPFlagUntilTimeout>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e01a      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2220      	movs	r2, #32
 800aabc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6859      	ldr	r1, [r3, #4]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf8 <HAL_I2C_Master_Transmit+0x1e4>)
 800aaca:	400b      	ands	r3, r1
 800aacc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	e000      	b.n	800aaec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800aaea:	2302      	movs	r3, #2
  }
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	80002000 	.word	0x80002000
 800aaf8:	fe00e800 	.word	0xfe00e800

0800aafc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	461a      	mov	r2, r3
 800ab08:	460b      	mov	r3, r1
 800ab0a:	817b      	strh	r3, [r7, #10]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b20      	cmp	r3, #32
 800ab1a:	f040 80db 	bne.w	800acd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_I2C_Master_Receive+0x30>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e0d4      	b.n	800acd6 <HAL_I2C_Master_Receive+0x1da>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab34:	f7fb f814 	bl	8005b60 <HAL_GetTick>
 800ab38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	2319      	movs	r3, #25
 800ab40:	2201      	movs	r2, #1
 800ab42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 fe7f 	bl	800b84a <I2C_WaitOnFlagUntilTimeout>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e0bf      	b.n	800acd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2222      	movs	r2, #34	@ 0x22
 800ab5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2210      	movs	r2, #16
 800ab62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	893a      	ldrh	r2, [r7, #8]
 800ab76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2bff      	cmp	r3, #255	@ 0xff
 800ab86:	d90e      	bls.n	800aba6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	22ff      	movs	r2, #255	@ 0xff
 800ab8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	8979      	ldrh	r1, [r7, #10]
 800ab96:	4b52      	ldr	r3, [pc, #328]	@ (800ace0 <HAL_I2C_Master_Receive+0x1e4>)
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f001 f8a2 	bl	800bce8 <I2C_TransferConfig>
 800aba4:	e06d      	b.n	800ac82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	8979      	ldrh	r1, [r7, #10]
 800abb8:	4b49      	ldr	r3, [pc, #292]	@ (800ace0 <HAL_I2C_Master_Receive+0x1e4>)
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f001 f891 	bl	800bce8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800abc6:	e05c      	b.n	800ac82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	6a39      	ldr	r1, [r7, #32]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 ff1f 	bl	800ba10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e07c      	b.n	800acd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe6:	b2d2      	uxtb	r2, r2
 800abe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d034      	beq.n	800ac82 <HAL_I2C_Master_Receive+0x186>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d130      	bne.n	800ac82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	2200      	movs	r2, #0
 800ac28:	2180      	movs	r1, #128	@ 0x80
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 fe0d 	bl	800b84a <I2C_WaitOnFlagUntilTimeout>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e04d      	b.n	800acd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	2bff      	cmp	r3, #255	@ 0xff
 800ac42:	d90e      	bls.n	800ac62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	22ff      	movs	r2, #255	@ 0xff
 800ac48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	8979      	ldrh	r1, [r7, #10]
 800ac52:	2300      	movs	r3, #0
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f001 f844 	bl	800bce8 <I2C_TransferConfig>
 800ac60:	e00f      	b.n	800ac82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	8979      	ldrh	r1, [r7, #10]
 800ac74:	2300      	movs	r3, #0
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f001 f833 	bl	800bce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d19d      	bne.n	800abc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	6a39      	ldr	r1, [r7, #32]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fe7a 	bl	800b98a <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e01a      	b.n	800acd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2220      	movs	r2, #32
 800aca6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6859      	ldr	r1, [r3, #4]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ace4 <HAL_I2C_Master_Receive+0x1e8>)
 800acb4:	400b      	ands	r3, r1
 800acb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2220      	movs	r2, #32
 800acbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	e000      	b.n	800acd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800acd4:	2302      	movs	r3, #2
  }
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	80002400 	.word	0x80002400
 800ace4:	fe00e800 	.word	0xfe00e800

0800ace8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	68f9      	ldr	r1, [r7, #12]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	4798      	blx	r3
  }
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00f      	beq.n	800ad5e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00a      	beq.n	800ad5e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad4c:	f043 0201 	orr.w	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00f      	beq.n	800ad88 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00a      	beq.n	800ad88 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad76:	f043 0208 	orr.w	r2, r3, #8
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ad86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00f      	beq.n	800adb2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada0:	f043 0202 	orr.w	r2, r3, #2
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adb0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f003 030b 	and.w	r3, r3, #11
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fbe7 	bl	800b598 <I2C_ITError>
  }
}
 800adca:	bf00      	nop
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800adee:	bf00      	nop
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
 800ae06:	4613      	mov	r3, r2
 800ae08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ae1e:	bf00      	nop
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ae32:	bf00      	nop
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b086      	sub	sp, #24
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae62:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d101      	bne.n	800ae76 <I2C_Slave_ISR_IT+0x24>
 800ae72:	2302      	movs	r3, #2
 800ae74:	e0e2      	b.n	800b03c <I2C_Slave_ISR_IT+0x1ea>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f003 0320 	and.w	r3, r3, #32
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d009      	beq.n	800ae9c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ae92:	6939      	ldr	r1, [r7, #16]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f9b5 	bl	800b204 <I2C_ITSlaveCplt>
 800ae9a:	e0ca      	b.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f003 0310 	and.w	r3, r3, #16
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d04b      	beq.n	800af3e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d046      	beq.n	800af3e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d128      	bne.n	800af0c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b28      	cmp	r3, #40	@ 0x28
 800aec4:	d108      	bne.n	800aed8 <I2C_Slave_ISR_IT+0x86>
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aecc:	d104      	bne.n	800aed8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800aece:	6939      	ldr	r1, [r7, #16]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 fb0d 	bl	800b4f0 <I2C_ITListenCplt>
 800aed6:	e031      	b.n	800af3c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b29      	cmp	r3, #41	@ 0x29
 800aee2:	d10e      	bne.n	800af02 <I2C_Slave_ISR_IT+0xb0>
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aeea:	d00a      	beq.n	800af02 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2210      	movs	r2, #16
 800aef2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 fc66 	bl	800b7c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 f926 	bl	800b14c <I2C_ITSlaveSeqCplt>
 800af00:	e01c      	b.n	800af3c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2210      	movs	r2, #16
 800af08:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800af0a:	e08f      	b.n	800b02c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2210      	movs	r2, #16
 800af12:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af18:	f043 0204 	orr.w	r2, r3, #4
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <I2C_Slave_ISR_IT+0xdc>
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af2c:	d17e      	bne.n	800b02c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 fb2f 	bl	800b598 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800af3a:	e077      	b.n	800b02c <I2C_Slave_ISR_IT+0x1da>
 800af3c:	e076      	b.n	800b02c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02f      	beq.n	800afa8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d02a      	beq.n	800afa8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af56:	b29b      	uxth	r3, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d018      	beq.n	800af8e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af78:	3b01      	subs	r3, #1
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af84:	b29b      	uxth	r3, r3
 800af86:	3b01      	subs	r3, #1
 800af88:	b29a      	uxth	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af92:	b29b      	uxth	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d14b      	bne.n	800b030 <I2C_Slave_ISR_IT+0x1de>
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af9e:	d047      	beq.n	800b030 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 f8d3 	bl	800b14c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800afa6:	e043      	b.n	800b030 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f003 0308 	and.w	r3, r3, #8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d004      	beq.n	800afc6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800afbc:	6939      	ldr	r1, [r7, #16]
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f000 f840 	bl	800b044 <I2C_ITAddrCplt>
 800afc4:	e035      	b.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d030      	beq.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d02b      	beq.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afde:	b29b      	uxth	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d018      	beq.n	800b016 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800affe:	b29b      	uxth	r3, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	b29a      	uxth	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b00c:	3b01      	subs	r3, #1
 800b00e:	b29a      	uxth	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b014:	e00d      	b.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b01c:	d002      	beq.n	800b024 <I2C_Slave_ISR_IT+0x1d2>
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d106      	bne.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 f891 	bl	800b14c <I2C_ITSlaveSeqCplt>
 800b02a:	e002      	b.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800b02c:	bf00      	nop
 800b02e:	e000      	b.n	800b032 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800b030:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b05a:	2b28      	cmp	r3, #40	@ 0x28
 800b05c:	d16a      	bne.n	800b134 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	0c1b      	lsrs	r3, r3, #16
 800b066:	b2db      	uxtb	r3, r3
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	0c1b      	lsrs	r3, r3, #16
 800b076:	b29b      	uxth	r3, r3
 800b078:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b07c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	b29b      	uxth	r3, r3
 800b086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b08a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	b29b      	uxth	r3, r3
 800b094:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b098:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d138      	bne.n	800b114 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b0a2:	897b      	ldrh	r3, [r7, #10]
 800b0a4:	09db      	lsrs	r3, r3, #7
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	89bb      	ldrh	r3, [r7, #12]
 800b0aa:	4053      	eors	r3, r2
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	f003 0306 	and.w	r3, r3, #6
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d11c      	bne.n	800b0f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b0b6:	897b      	ldrh	r3, [r7, #10]
 800b0b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d13b      	bne.n	800b144 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2208      	movs	r2, #8
 800b0d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b0e2:	89ba      	ldrh	r2, [r7, #12]
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff fe86 	bl	800adfa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b0ee:	e029      	b.n	800b144 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b0f0:	893b      	ldrh	r3, [r7, #8]
 800b0f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b0f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fe27 	bl	800bd4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b106:	89ba      	ldrh	r2, [r7, #12]
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff fe74 	bl	800adfa <HAL_I2C_AddrCallback>
}
 800b112:	e017      	b.n	800b144 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fe17 	bl	800bd4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b126:	89ba      	ldrh	r2, [r7, #12]
 800b128:	7bfb      	ldrb	r3, [r7, #15]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff fe64 	bl	800adfa <HAL_I2C_AddrCallback>
}
 800b132:	e007      	b.n	800b144 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2208      	movs	r2, #8
 800b13a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800b144:	bf00      	nop
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d008      	beq.n	800b180 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	e00c      	b.n	800b19a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d007      	beq.n	800b19a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b198:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b29      	cmp	r3, #41	@ 0x29
 800b1a4:	d112      	bne.n	800b1cc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2228      	movs	r2, #40	@ 0x28
 800b1aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2221      	movs	r2, #33	@ 0x21
 800b1b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fdc8 	bl	800bd4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff fe04 	bl	800add2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b1ca:	e017      	b.n	800b1fc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1d6:	d111      	bne.n	800b1fc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2228      	movs	r2, #40	@ 0x28
 800b1dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2222      	movs	r2, #34	@ 0x22
 800b1e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b1e6:	2102      	movs	r1, #2
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fdaf 	bl	800bd4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff fdf5 	bl	800ade6 <HAL_I2C_SlaveRxCpltCallback>
}
 800b1fc:	bf00      	nop
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b204:	b590      	push	{r4, r7, lr}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b226:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2220      	movs	r2, #32
 800b22e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b230:	7afb      	ldrb	r3, [r7, #11]
 800b232:	2b21      	cmp	r3, #33	@ 0x21
 800b234:	d002      	beq.n	800b23c <I2C_ITSlaveCplt+0x38>
 800b236:	7afb      	ldrb	r3, [r7, #11]
 800b238:	2b29      	cmp	r3, #41	@ 0x29
 800b23a:	d108      	bne.n	800b24e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b23c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fd83 	bl	800bd4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2221      	movs	r2, #33	@ 0x21
 800b24a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b24c:	e019      	b.n	800b282 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b24e:	7afb      	ldrb	r3, [r7, #11]
 800b250:	2b22      	cmp	r3, #34	@ 0x22
 800b252:	d002      	beq.n	800b25a <I2C_ITSlaveCplt+0x56>
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	2b2a      	cmp	r3, #42	@ 0x2a
 800b258:	d108      	bne.n	800b26c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b25a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fd74 	bl	800bd4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2222      	movs	r2, #34	@ 0x22
 800b268:	631a      	str	r2, [r3, #48]	@ 0x30
 800b26a:	e00a      	b.n	800b282 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	2b28      	cmp	r3, #40	@ 0x28
 800b270:	d107      	bne.n	800b282 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b272:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fd68 	bl	800bd4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b290:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6859      	ldr	r1, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	4b92      	ldr	r3, [pc, #584]	@ (800b4e8 <I2C_ITSlaveCplt+0x2e4>)
 800b29e:	400b      	ands	r3, r1
 800b2a0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa8f 	bl	800b7c6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01c      	beq.n	800b2ec <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b2c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d031      	beq.n	800b32e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2d2:	b29c      	uxth	r4, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fb53 	bl	8009984 <HAL_DMAEx_GetFifoLevel>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	4423      	add	r3, r4
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b2ea:	e020      	b.n	800b32e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d01b      	beq.n	800b32e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b304:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00f      	beq.n	800b32e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b316:	b29c      	uxth	r4, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fb31 	bl	8009984 <HAL_DMAEx_GetFifoLevel>
 800b322:	4603      	mov	r3, r0
 800b324:	b29b      	uxth	r3, r3
 800b326:	4423      	add	r3, r4
 800b328:	b29a      	uxth	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d020      	beq.n	800b37a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f023 0304 	bic.w	r3, r3, #4
 800b33e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00c      	beq.n	800b37a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b364:	3b01      	subs	r3, #1
 800b366:	b29a      	uxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b370:	b29b      	uxth	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b37e:	b29b      	uxth	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b388:	f043 0204 	orr.w	r2, r3, #4
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f003 0310 	and.w	r3, r3, #16
 800b396:	2b00      	cmp	r3, #0
 800b398:	d049      	beq.n	800b42e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d044      	beq.n	800b42e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d128      	bne.n	800b400 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b28      	cmp	r3, #40	@ 0x28
 800b3b8:	d108      	bne.n	800b3cc <I2C_ITSlaveCplt+0x1c8>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3c0:	d104      	bne.n	800b3cc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b3c2:	6979      	ldr	r1, [r7, #20]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f893 	bl	800b4f0 <I2C_ITListenCplt>
 800b3ca:	e030      	b.n	800b42e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b29      	cmp	r3, #41	@ 0x29
 800b3d6:	d10e      	bne.n	800b3f6 <I2C_ITSlaveCplt+0x1f2>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b3de:	d00a      	beq.n	800b3f6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2210      	movs	r2, #16
 800b3e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f9ec 	bl	800b7c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff feac 	bl	800b14c <I2C_ITSlaveSeqCplt>
 800b3f4:	e01b      	b.n	800b42e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2210      	movs	r2, #16
 800b3fc:	61da      	str	r2, [r3, #28]
 800b3fe:	e016      	b.n	800b42e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2210      	movs	r2, #16
 800b406:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b40c:	f043 0204 	orr.w	r2, r3, #4
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <I2C_ITSlaveCplt+0x21e>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b420:	d105      	bne.n	800b42e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f8b5 	bl	800b598 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b440:	2b00      	cmp	r3, #0
 800b442:	d010      	beq.n	800b466 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f8a4 	bl	800b598 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b28      	cmp	r3, #40	@ 0x28
 800b45a:	d141      	bne.n	800b4e0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b45c:	6979      	ldr	r1, [r7, #20]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f846 	bl	800b4f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b464:	e03c      	b.n	800b4e0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b46e:	d014      	beq.n	800b49a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fe6b 	bl	800b14c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a1c      	ldr	r2, [pc, #112]	@ (800b4ec <I2C_ITSlaveCplt+0x2e8>)
 800b47a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2220      	movs	r2, #32
 800b480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fcbf 	bl	800ae16 <HAL_I2C_ListenCpltCallback>
}
 800b498:	e022      	b.n	800b4e0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b22      	cmp	r3, #34	@ 0x22
 800b4a4:	d10e      	bne.n	800b4c4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff fc92 	bl	800ade6 <HAL_I2C_SlaveRxCpltCallback>
}
 800b4c2:	e00d      	b.n	800b4e0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff fc79 	bl	800add2 <HAL_I2C_SlaveTxCpltCallback>
}
 800b4e0:	bf00      	nop
 800b4e2:	371c      	adds	r7, #28
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd90      	pop	{r4, r7, pc}
 800b4e8:	fe00e800 	.word	0xfe00e800
 800b4ec:	ffff0000 	.word	0xffff0000

0800b4f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a25      	ldr	r2, [pc, #148]	@ (800b594 <I2C_ITListenCplt+0xa4>)
 800b4fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	f003 0304 	and.w	r3, r3, #4
 800b522:	2b00      	cmp	r3, #0
 800b524:	d022      	beq.n	800b56c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b530:	b2d2      	uxtb	r2, r2
 800b532:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b542:	2b00      	cmp	r3, #0
 800b544:	d012      	beq.n	800b56c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b54a:	3b01      	subs	r3, #1
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b556:	b29b      	uxth	r3, r3
 800b558:	3b01      	subs	r3, #1
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b564:	f043 0204 	orr.w	r2, r3, #4
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b56c:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fbeb 	bl	800bd4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2210      	movs	r2, #16
 800b57c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fc45 	bl	800ae16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	ffff0000 	.word	0xffff0000

0800b598 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5a8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a6d      	ldr	r2, [pc, #436]	@ (800b76c <I2C_ITError+0x1d4>)
 800b5b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	2b28      	cmp	r3, #40	@ 0x28
 800b5ce:	d005      	beq.n	800b5dc <I2C_ITError+0x44>
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	2b29      	cmp	r3, #41	@ 0x29
 800b5d4:	d002      	beq.n	800b5dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5da:	d10b      	bne.n	800b5f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b5dc:	2103      	movs	r1, #3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fbb4 	bl	800bd4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2228      	movs	r2, #40	@ 0x28
 800b5e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a60      	ldr	r2, [pc, #384]	@ (800b770 <I2C_ITError+0x1d8>)
 800b5f0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5f2:	e030      	b.n	800b656 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b5f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fba7 	bl	800bd4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f8e1 	bl	800b7c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b60      	cmp	r3, #96	@ 0x60
 800b60e:	d01f      	beq.n	800b650 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b20      	cmp	r3, #32
 800b624:	d114      	bne.n	800b650 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b10      	cmp	r3, #16
 800b632:	d109      	bne.n	800b648 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2210      	movs	r2, #16
 800b63a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b640:	f043 0204 	orr.w	r2, r3, #4
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2220      	movs	r2, #32
 800b64e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b660:	2b00      	cmp	r3, #0
 800b662:	d039      	beq.n	800b6d8 <I2C_ITError+0x140>
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b11      	cmp	r3, #17
 800b668:	d002      	beq.n	800b670 <I2C_ITError+0xd8>
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b21      	cmp	r3, #33	@ 0x21
 800b66e:	d133      	bne.n	800b6d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b67a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b67e:	d107      	bne.n	800b690 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b68e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b694:	4618      	mov	r0, r3
 800b696:	f7fd f9c9 	bl	8008a2c <HAL_DMA_GetState>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d017      	beq.n	800b6d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a4:	4a33      	ldr	r2, [pc, #204]	@ (800b774 <I2C_ITError+0x1dc>)
 800b6a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fd f82f 	bl	8008718 <HAL_DMA_Abort_IT>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d04d      	beq.n	800b75c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b6ce:	e045      	b.n	800b75c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f851 	bl	800b778 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b6d6:	e041      	b.n	800b75c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d039      	beq.n	800b754 <I2C_ITError+0x1bc>
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b12      	cmp	r3, #18
 800b6e4:	d002      	beq.n	800b6ec <I2C_ITError+0x154>
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b22      	cmp	r3, #34	@ 0x22
 800b6ea:	d133      	bne.n	800b754 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6fa:	d107      	bne.n	800b70c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b70a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b710:	4618      	mov	r0, r3
 800b712:	f7fd f98b 	bl	8008a2c <HAL_DMA_GetState>
 800b716:	4603      	mov	r3, r0
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d017      	beq.n	800b74c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b720:	4a14      	ldr	r2, [pc, #80]	@ (800b774 <I2C_ITError+0x1dc>)
 800b722:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b730:	4618      	mov	r0, r3
 800b732:	f7fc fff1 	bl	8008718 <HAL_DMA_Abort_IT>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d011      	beq.n	800b760 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b746:	4610      	mov	r0, r2
 800b748:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b74a:	e009      	b.n	800b760 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f813 	bl	800b778 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b752:	e005      	b.n	800b760 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f80f 	bl	800b778 <I2C_TreatErrorCallback>
  }
}
 800b75a:	e002      	b.n	800b762 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b75c:	bf00      	nop
 800b75e:	e000      	b.n	800b762 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b760:	bf00      	nop
}
 800b762:	bf00      	nop
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	ffff0000 	.word	0xffff0000
 800b770:	0800ae53 	.word	0x0800ae53
 800b774:	0800b80f 	.word	0x0800b80f

0800b778 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b60      	cmp	r3, #96	@ 0x60
 800b78a:	d10e      	bne.n	800b7aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2220      	movs	r2, #32
 800b790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff fb4b 	bl	800ae3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b7a8:	e009      	b.n	800b7be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fb36 	bl	800ae2a <HAL_I2C_ErrorCallback>
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d103      	bne.n	800b7e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d007      	beq.n	800b802 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	699a      	ldr	r2, [r3, #24]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0201 	orr.w	r2, r2, #1
 800b800:	619a      	str	r2, [r3, #24]
  }
}
 800b802:	bf00      	nop
 800b804:	370c      	adds	r7, #12
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b828:	2200      	movs	r2, #0
 800b82a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b838:	2200      	movs	r2, #0
 800b83a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f7ff ff9b 	bl	800b778 <I2C_TreatErrorCallback>
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	603b      	str	r3, [r7, #0]
 800b856:	4613      	mov	r3, r2
 800b858:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b85a:	e03b      	b.n	800b8d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b85c:	69ba      	ldr	r2, [r7, #24]
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f961 	bl	800bb28 <I2C_IsErrorOccurred>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e041      	b.n	800b8f4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b876:	d02d      	beq.n	800b8d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b878:	f7fa f972 	bl	8005b60 <HAL_GetTick>
 800b87c:	4602      	mov	r2, r0
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d302      	bcc.n	800b88e <I2C_WaitOnFlagUntilTimeout+0x44>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d122      	bne.n	800b8d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	699a      	ldr	r2, [r3, #24]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	4013      	ands	r3, r2
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	bf0c      	ite	eq
 800b89e:	2301      	moveq	r3, #1
 800b8a0:	2300      	movne	r3, #0
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d113      	bne.n	800b8d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8b0:	f043 0220 	orr.w	r2, r3, #32
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e00f      	b.n	800b8f4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	699a      	ldr	r2, [r3, #24]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	4013      	ands	r3, r2
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	bf0c      	ite	eq
 800b8e4:	2301      	moveq	r3, #1
 800b8e6:	2300      	movne	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d0b4      	beq.n	800b85c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b908:	e033      	b.n	800b972 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f90a 	bl	800bb28 <I2C_IsErrorOccurred>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e031      	b.n	800b982 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d025      	beq.n	800b972 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b926:	f7fa f91b 	bl	8005b60 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	429a      	cmp	r2, r3
 800b934:	d302      	bcc.n	800b93c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d11a      	bne.n	800b972 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0302 	and.w	r3, r3, #2
 800b946:	2b02      	cmp	r3, #2
 800b948:	d013      	beq.n	800b972 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b94e:	f043 0220 	orr.w	r2, r3, #32
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2220      	movs	r2, #32
 800b95a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e007      	b.n	800b982 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d1c4      	bne.n	800b90a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b996:	e02f      	b.n	800b9f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	68b9      	ldr	r1, [r7, #8]
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 f8c3 	bl	800bb28 <I2C_IsErrorOccurred>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e02d      	b.n	800ba08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ac:	f7fa f8d8 	bl	8005b60 <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d302      	bcc.n	800b9c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d11a      	bne.n	800b9f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b20      	cmp	r3, #32
 800b9ce:	d013      	beq.n	800b9f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9d4:	f043 0220 	orr.w	r2, r3, #32
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e007      	b.n	800ba08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	f003 0320 	and.w	r3, r3, #32
 800ba02:	2b20      	cmp	r3, #32
 800ba04:	d1c8      	bne.n	800b998 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ba20:	e071      	b.n	800bb06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	68b9      	ldr	r1, [r7, #8]
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 f87e 	bl	800bb28 <I2C_IsErrorOccurred>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	f003 0320 	and.w	r3, r3, #32
 800ba40:	2b20      	cmp	r3, #32
 800ba42:	d13b      	bne.n	800babc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d138      	bne.n	800babc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d105      	bne.n	800ba64 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	f003 0310 	and.w	r3, r3, #16
 800ba6e:	2b10      	cmp	r3, #16
 800ba70:	d121      	bne.n	800bab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2210      	movs	r2, #16
 800ba78:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2220      	movs	r2, #32
 800ba86:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6859      	ldr	r1, [r3, #4]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b24      	ldr	r3, [pc, #144]	@ (800bb24 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800ba94:	400b      	ands	r3, r1
 800ba96:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	75fb      	strb	r3, [r7, #23]
 800bab4:	e002      	b.n	800babc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800babc:	f7fa f850 	bl	8005b60 <HAL_GetTick>
 800bac0:	4602      	mov	r2, r0
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d302      	bcc.n	800bad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d119      	bne.n	800bb06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800bad2:	7dfb      	ldrb	r3, [r7, #23]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d116      	bne.n	800bb06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d00f      	beq.n	800bb06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baea:	f043 0220 	orr.w	r2, r3, #32
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2220      	movs	r2, #32
 800baf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	f003 0304 	and.w	r3, r3, #4
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d002      	beq.n	800bb1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d083      	beq.n	800ba22 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	fe00e800 	.word	0xfe00e800

0800bb28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b08a      	sub	sp, #40	@ 0x28
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	f003 0310 	and.w	r3, r3, #16
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d068      	beq.n	800bc26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2210      	movs	r2, #16
 800bb5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bb5c:	e049      	b.n	800bbf2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb64:	d045      	beq.n	800bbf2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb66:	f7f9 fffb 	bl	8005b60 <HAL_GetTick>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d302      	bcc.n	800bb7c <I2C_IsErrorOccurred+0x54>
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d13a      	bne.n	800bbf2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb9e:	d121      	bne.n	800bbe4 <I2C_IsErrorOccurred+0xbc>
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bba6:	d01d      	beq.n	800bbe4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bba8:	7cfb      	ldrb	r3, [r7, #19]
 800bbaa:	2b20      	cmp	r3, #32
 800bbac:	d01a      	beq.n	800bbe4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bbbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bbbe:	f7f9 ffcf 	bl	8005b60 <HAL_GetTick>
 800bbc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbc4:	e00e      	b.n	800bbe4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bbc6:	f7f9 ffcb 	bl	8005b60 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	2b19      	cmp	r3, #25
 800bbd2:	d907      	bls.n	800bbe4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	f043 0320 	orr.w	r3, r3, #32
 800bbda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800bbe2:	e006      	b.n	800bbf2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	f003 0320 	and.w	r3, r3, #32
 800bbee:	2b20      	cmp	r3, #32
 800bbf0:	d1e9      	bne.n	800bbc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	f003 0320 	and.w	r3, r3, #32
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	d003      	beq.n	800bc08 <I2C_IsErrorOccurred+0xe0>
 800bc00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0aa      	beq.n	800bb5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bc08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d103      	bne.n	800bc18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2220      	movs	r2, #32
 800bc16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	f043 0304 	orr.w	r3, r3, #4
 800bc1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00b      	beq.n	800bc50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	f043 0301 	orr.w	r3, r3, #1
 800bc3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00b      	beq.n	800bc72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f043 0308 	orr.w	r3, r3, #8
 800bc60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bc6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	f043 0302 	orr.w	r3, r3, #2
 800bc82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800bc94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01c      	beq.n	800bcd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff fd92 	bl	800b7c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6859      	ldr	r1, [r3, #4]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	4b0d      	ldr	r3, [pc, #52]	@ (800bce4 <I2C_IsErrorOccurred+0x1bc>)
 800bcae:	400b      	ands	r3, r1
 800bcb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800bcd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3728      	adds	r7, #40	@ 0x28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	fe00e800 	.word	0xfe00e800

0800bce8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	817b      	strh	r3, [r7, #10]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bcfa:	897b      	ldrh	r3, [r7, #10]
 800bcfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd00:	7a7b      	ldrb	r3, [r7, #9]
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	0d5b      	lsrs	r3, r3, #21
 800bd22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bd26:	4b08      	ldr	r3, [pc, #32]	@ (800bd48 <I2C_TransferConfig+0x60>)
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	43db      	mvns	r3, r3
 800bd2c:	ea02 0103 	and.w	r1, r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bd3a:	bf00      	nop
 800bd3c:	371c      	adds	r7, #28
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	03ff63ff 	.word	0x03ff63ff

0800bd4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bd5c:	887b      	ldrh	r3, [r7, #2]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800bd6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bd7a:	2b28      	cmp	r3, #40	@ 0x28
 800bd7c:	d003      	beq.n	800bd86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800bd84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bd86:	887b      	ldrh	r3, [r7, #2]
 800bd88:	f003 0302 	and.w	r3, r3, #2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00f      	beq.n	800bdb0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800bd96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bda4:	2b28      	cmp	r3, #40	@ 0x28
 800bda6:	d003      	beq.n	800bdb0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800bdae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bdb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	da03      	bge.n	800bdc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bdbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bdc0:	887b      	ldrh	r3, [r7, #2]
 800bdc2:	2b10      	cmp	r3, #16
 800bdc4:	d103      	bne.n	800bdce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800bdcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bdce:	887b      	ldrh	r3, [r7, #2]
 800bdd0:	2b20      	cmp	r3, #32
 800bdd2:	d103      	bne.n	800bddc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f043 0320 	orr.w	r3, r3, #32
 800bdda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bddc:	887b      	ldrh	r3, [r7, #2]
 800bdde:	2b40      	cmp	r3, #64	@ 0x40
 800bde0:	d103      	bne.n	800bdea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6819      	ldr	r1, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	43da      	mvns	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	400a      	ands	r2, r1
 800bdfa:	601a      	str	r2, [r3, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d138      	bne.n	800be90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800be24:	2b01      	cmp	r3, #1
 800be26:	d101      	bne.n	800be2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800be28:	2302      	movs	r3, #2
 800be2a:	e032      	b.n	800be92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2224      	movs	r2, #36	@ 0x24
 800be38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0201 	bic.w	r2, r2, #1
 800be4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800be5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6819      	ldr	r1, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	430a      	orrs	r2, r1
 800be6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f042 0201 	orr.w	r2, r2, #1
 800be7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2220      	movs	r2, #32
 800be80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	e000      	b.n	800be92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800be90:	2302      	movs	r3, #2
  }
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b20      	cmp	r3, #32
 800beb2:	d139      	bne.n	800bf28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e033      	b.n	800bf2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2224      	movs	r2, #36	@ 0x24
 800bece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0201 	bic.w	r2, r2, #1
 800bee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0201 	orr.w	r2, r2, #1
 800bf12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e000      	b.n	800bf2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bf28:	2302      	movs	r3, #2
  }
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
	...

0800bf38 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800bf44:	4b0b      	ldr	r3, [pc, #44]	@ (800bf74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	73fb      	strb	r3, [r7, #15]
 800bf54:	e007      	b.n	800bf66 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800bf56:	4b07      	ldr	r3, [pc, #28]	@ (800bf74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f023 0204 	bic.w	r2, r3, #4
 800bf5e:	4905      	ldr	r1, [pc, #20]	@ (800bf74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	600b      	str	r3, [r1, #0]
  }

  return status;
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	40030400 	.word	0x40030400

0800bf78 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800bf7c:	4b05      	ldr	r3, [pc, #20]	@ (800bf94 <HAL_ICACHE_Enable+0x1c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a04      	ldr	r2, [pc, #16]	@ (800bf94 <HAL_ICACHE_Enable+0x1c>)
 800bf82:	f043 0301 	orr.w	r3, r3, #1
 800bf86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	40030400 	.word	0x40030400

0800bf98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e0bf      	b.n	800c12a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7f8 fd16 	bl	80049f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	699a      	ldr	r2, [r3, #24]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800bfda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6999      	ldr	r1, [r3, #24]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bff0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	430a      	orrs	r2, r1
 800bffe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6899      	ldr	r1, [r3, #8]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	4b4a      	ldr	r3, [pc, #296]	@ (800c134 <HAL_LTDC_Init+0x19c>)
 800c00c:	400b      	ands	r3, r1
 800c00e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	041b      	lsls	r3, r3, #16
 800c016:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6899      	ldr	r1, [r3, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	431a      	orrs	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68d9      	ldr	r1, [r3, #12]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	4b3e      	ldr	r3, [pc, #248]	@ (800c134 <HAL_LTDC_Init+0x19c>)
 800c03a:	400b      	ands	r3, r1
 800c03c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	041b      	lsls	r3, r3, #16
 800c044:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68d9      	ldr	r1, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1a      	ldr	r2, [r3, #32]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	431a      	orrs	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	430a      	orrs	r2, r1
 800c05a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6919      	ldr	r1, [r3, #16]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	4b33      	ldr	r3, [pc, #204]	@ (800c134 <HAL_LTDC_Init+0x19c>)
 800c068:	400b      	ands	r3, r1
 800c06a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c070:	041b      	lsls	r3, r3, #16
 800c072:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6919      	ldr	r1, [r3, #16]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	431a      	orrs	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	430a      	orrs	r2, r1
 800c088:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6959      	ldr	r1, [r3, #20]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	4b27      	ldr	r3, [pc, #156]	@ (800c134 <HAL_LTDC_Init+0x19c>)
 800c096:	400b      	ands	r3, r1
 800c098:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09e:	041b      	lsls	r3, r3, #16
 800c0a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6959      	ldr	r1, [r3, #20]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800c0c8:	041b      	lsls	r3, r3, #16
 800c0ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800c0da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800c0ee:	431a      	orrs	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0206 	orr.w	r2, r2, #6
 800c106:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	f000f800 	.word	0xf000f800

0800c138 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c146:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b00      	cmp	r3, #0
 800c158:	d023      	beq.n	800c1a2 <HAL_LTDC_IRQHandler+0x6a>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d01e      	beq.n	800c1a2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 0204 	bic.w	r2, r2, #4
 800c172:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2204      	movs	r2, #4
 800c17a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c182:	f043 0201 	orr.w	r2, r3, #1
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2204      	movs	r2, #4
 800c190:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f86f 	bl	800c280 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d023      	beq.n	800c1f4 <HAL_LTDC_IRQHandler+0xbc>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f003 0302 	and.w	r3, r3, #2
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d01e      	beq.n	800c1f4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f022 0202 	bic.w	r2, r2, #2
 800c1c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c1d4:	f043 0202 	orr.w	r2, r3, #2
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2204      	movs	r2, #4
 800c1e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f846 	bl	800c280 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d01b      	beq.n	800c236 <HAL_LTDC_IRQHandler+0xfe>
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	d016      	beq.n	800c236 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f022 0201 	bic.w	r2, r2, #1
 800c216:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2201      	movs	r2, #1
 800c21e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f82f 	bl	800c294 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f003 0308 	and.w	r3, r3, #8
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d01b      	beq.n	800c278 <HAL_LTDC_IRQHandler+0x140>
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	f003 0308 	and.w	r3, r3, #8
 800c246:	2b00      	cmp	r3, #0
 800c248:	d016      	beq.n	800c278 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f022 0208 	bic.w	r2, r2, #8
 800c258:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2208      	movs	r2, #8
 800c260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f818 	bl	800c2a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c278:	bf00      	nop
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c2bc:	b5b0      	push	{r4, r5, r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d101      	bne.n	800c2d6 <HAL_LTDC_ConfigLayer+0x1a>
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	e02c      	b.n	800c330 <HAL_LTDC_ConfigLayer+0x74>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2134      	movs	r1, #52	@ 0x34
 800c2ec:	fb01 f303 	mul.w	r3, r1, r3
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	4614      	mov	r4, r2
 800c2fa:	461d      	mov	r5, r3
 800c2fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 f811 	bl	800c338 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2201      	movs	r2, #1
 800c31c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bdb0      	pop	{r4, r5, r7, pc}

0800c338 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c338:	b480      	push	{r7}
 800c33a:	b089      	sub	sp, #36	@ 0x24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	0c1b      	lsrs	r3, r3, #16
 800c350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c354:	4413      	add	r3, r2
 800c356:	041b      	lsls	r3, r3, #16
 800c358:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	01db      	lsls	r3, r3, #7
 800c364:	4413      	add	r3, r2
 800c366:	3384      	adds	r3, #132	@ 0x84
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	6812      	ldr	r2, [r2, #0]
 800c36e:	4611      	mov	r1, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	01d2      	lsls	r2, r2, #7
 800c374:	440a      	add	r2, r1
 800c376:	3284      	adds	r2, #132	@ 0x84
 800c378:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800c37c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	0c1b      	lsrs	r3, r3, #16
 800c38a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c38e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c390:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4619      	mov	r1, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	01db      	lsls	r3, r3, #7
 800c39c:	440b      	add	r3, r1
 800c39e:	3384      	adds	r3, #132	@ 0x84
 800c3a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c3a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	68da      	ldr	r2, [r3, #12]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3b6:	4413      	add	r3, r2
 800c3b8:	041b      	lsls	r3, r3, #16
 800c3ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	01db      	lsls	r3, r3, #7
 800c3c6:	4413      	add	r3, r2
 800c3c8:	3384      	adds	r3, #132	@ 0x84
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	6812      	ldr	r2, [r2, #0]
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	01d2      	lsls	r2, r2, #7
 800c3d6:	440a      	add	r2, r1
 800c3d8:	3284      	adds	r2, #132	@ 0x84
 800c3da:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800c3de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	689a      	ldr	r2, [r3, #8]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3ee:	4413      	add	r3, r2
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	01db      	lsls	r3, r3, #7
 800c3fc:	440b      	add	r3, r1
 800c3fe:	3384      	adds	r3, #132	@ 0x84
 800c400:	4619      	mov	r1, r3
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	4313      	orrs	r3, r2
 800c406:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	01db      	lsls	r3, r3, #7
 800c412:	4413      	add	r3, r2
 800c414:	3384      	adds	r3, #132	@ 0x84
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	6812      	ldr	r2, [r2, #0]
 800c41c:	4611      	mov	r1, r2
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	01d2      	lsls	r2, r2, #7
 800c422:	440a      	add	r2, r1
 800c424:	3284      	adds	r2, #132	@ 0x84
 800c426:	f023 0307 	bic.w	r3, r3, #7
 800c42a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	461a      	mov	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	01db      	lsls	r3, r3, #7
 800c436:	4413      	add	r3, r2
 800c438:	3384      	adds	r3, #132	@ 0x84
 800c43a:	461a      	mov	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c448:	021b      	lsls	r3, r3, #8
 800c44a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c452:	041b      	lsls	r3, r3, #16
 800c454:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	061b      	lsls	r3, r3, #24
 800c45c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c464:	461a      	mov	r2, r3
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	431a      	orrs	r2, r3
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	431a      	orrs	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4619      	mov	r1, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	01db      	lsls	r3, r3, #7
 800c478:	440b      	add	r3, r1
 800c47a:	3384      	adds	r3, #132	@ 0x84
 800c47c:	4619      	mov	r1, r3
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	4313      	orrs	r3, r2
 800c482:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	01db      	lsls	r3, r3, #7
 800c48e:	4413      	add	r3, r2
 800c490:	3384      	adds	r3, #132	@ 0x84
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	6812      	ldr	r2, [r2, #0]
 800c498:	4611      	mov	r1, r2
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	01d2      	lsls	r2, r2, #7
 800c49e:	440a      	add	r2, r1
 800c4a0:	3284      	adds	r2, #132	@ 0x84
 800c4a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c4a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	01db      	lsls	r3, r3, #7
 800c4b2:	4413      	add	r3, r2
 800c4b4:	3384      	adds	r3, #132	@ 0x84
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	01db      	lsls	r3, r3, #7
 800c4c8:	4413      	add	r3, r2
 800c4ca:	3384      	adds	r3, #132	@ 0x84
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	6812      	ldr	r2, [r2, #0]
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	01d2      	lsls	r2, r2, #7
 800c4d8:	440a      	add	r2, r1
 800c4da:	3284      	adds	r2, #132	@ 0x84
 800c4dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c4e0:	f023 0307 	bic.w	r3, r3, #7
 800c4e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	69da      	ldr	r2, [r3, #28]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	68f9      	ldr	r1, [r7, #12]
 800c4f0:	6809      	ldr	r1, [r1, #0]
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	6879      	ldr	r1, [r7, #4]
 800c4f6:	01c9      	lsls	r1, r1, #7
 800c4f8:	4401      	add	r1, r0
 800c4fa:	3184      	adds	r1, #132	@ 0x84
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	01db      	lsls	r3, r3, #7
 800c50a:	4413      	add	r3, r2
 800c50c:	3384      	adds	r3, #132	@ 0x84
 800c50e:	461a      	mov	r2, r3
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c514:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800c51e:	2304      	movs	r3, #4
 800c520:	61fb      	str	r3, [r7, #28]
 800c522:	e01b      	b.n	800c55c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d102      	bne.n	800c532 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800c52c:	2303      	movs	r3, #3
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	e014      	b.n	800c55c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d00b      	beq.n	800c552 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d007      	beq.n	800c552 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c546:	2b03      	cmp	r3, #3
 800c548:	d003      	beq.n	800c552 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c54e:	2b07      	cmp	r3, #7
 800c550:	d102      	bne.n	800c558 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800c552:	2302      	movs	r3, #2
 800c554:	61fb      	str	r3, [r7, #28]
 800c556:	e001      	b.n	800c55c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800c558:	2301      	movs	r3, #1
 800c55a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	461a      	mov	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	01db      	lsls	r3, r3, #7
 800c566:	4413      	add	r3, r2
 800c568:	3384      	adds	r3, #132	@ 0x84
 800c56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	6812      	ldr	r2, [r2, #0]
 800c570:	4611      	mov	r1, r2
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	01d2      	lsls	r2, r2, #7
 800c576:	440a      	add	r2, r1
 800c578:	3284      	adds	r2, #132	@ 0x84
 800c57a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800c57e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c584:	69fa      	ldr	r2, [r7, #28]
 800c586:	fb02 f303 	mul.w	r3, r2, r3
 800c58a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	6859      	ldr	r1, [r3, #4]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	1acb      	subs	r3, r1, r3
 800c596:	69f9      	ldr	r1, [r7, #28]
 800c598:	fb01 f303 	mul.w	r3, r1, r3
 800c59c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	6809      	ldr	r1, [r1, #0]
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	01c9      	lsls	r1, r1, #7
 800c5a8:	4401      	add	r1, r0
 800c5aa:	3184      	adds	r1, #132	@ 0x84
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	01db      	lsls	r3, r3, #7
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3384      	adds	r3, #132	@ 0x84
 800c5be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	6812      	ldr	r2, [r2, #0]
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	01d2      	lsls	r2, r2, #7
 800c5ca:	440a      	add	r2, r1
 800c5cc:	3284      	adds	r2, #132	@ 0x84
 800c5ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c5d2:	f023 0307 	bic.w	r3, r3, #7
 800c5d6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	01db      	lsls	r3, r3, #7
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3384      	adds	r3, #132	@ 0x84
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	01db      	lsls	r3, r3, #7
 800c5f8:	4413      	add	r3, r2
 800c5fa:	3384      	adds	r3, #132	@ 0x84
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	6812      	ldr	r2, [r2, #0]
 800c602:	4611      	mov	r1, r2
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	01d2      	lsls	r2, r2, #7
 800c608:	440a      	add	r2, r1
 800c60a:	3284      	adds	r2, #132	@ 0x84
 800c60c:	f043 0301 	orr.w	r3, r3, #1
 800c610:	6013      	str	r3, [r2, #0]
}
 800c612:	bf00      	nop
 800c614:	3724      	adds	r7, #36	@ 0x24
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
	...

0800c620 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c624:	4b05      	ldr	r3, [pc, #20]	@ (800c63c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c628:	4a04      	ldr	r2, [pc, #16]	@ (800c63c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c62a:	f043 0301 	orr.w	r3, r3, #1
 800c62e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800c630:	bf00      	nop
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	46020800 	.word	0x46020800

0800c640 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c648:	4b39      	ldr	r3, [pc, #228]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c650:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	429a      	cmp	r2, r3
 800c658:	d10b      	bne.n	800c672 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c660:	d905      	bls.n	800c66e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c662:	4b33      	ldr	r3, [pc, #204]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	4a32      	ldr	r2, [pc, #200]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c66c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	e057      	b.n	800c722 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c678:	d90a      	bls.n	800c690 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c67a:	4b2d      	ldr	r3, [pc, #180]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4313      	orrs	r3, r2
 800c686:	4a2a      	ldr	r2, [pc, #168]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c68c:	60d3      	str	r3, [r2, #12]
 800c68e:	e007      	b.n	800c6a0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c690:	4b27      	ldr	r3, [pc, #156]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800c698:	4925      	ldr	r1, [pc, #148]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c6a0:	4b24      	ldr	r3, [pc, #144]	@ (800c734 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a24      	ldr	r2, [pc, #144]	@ (800c738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6aa:	099b      	lsrs	r3, r3, #6
 800c6ac:	2232      	movs	r2, #50	@ 0x32
 800c6ae:	fb02 f303 	mul.w	r3, r2, r3
 800c6b2:	4a21      	ldr	r2, [pc, #132]	@ (800c738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b8:	099b      	lsrs	r3, r3, #6
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c6be:	e002      	b.n	800c6c6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c6c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d102      	bne.n	800c6d8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1f3      	bne.n	800c6c0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d01b      	beq.n	800c716 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c6de:	4b15      	ldr	r3, [pc, #84]	@ (800c734 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a15      	ldr	r2, [pc, #84]	@ (800c738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e8:	099b      	lsrs	r3, r3, #6
 800c6ea:	2232      	movs	r2, #50	@ 0x32
 800c6ec:	fb02 f303 	mul.w	r3, r2, r3
 800c6f0:	4a11      	ldr	r2, [pc, #68]	@ (800c738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	099b      	lsrs	r3, r3, #6
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c6fc:	e002      	b.n	800c704 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3b01      	subs	r3, #1
 800c702:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c704:	4b0a      	ldr	r3, [pc, #40]	@ (800c730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d102      	bne.n	800c716 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f3      	bne.n	800c6fe <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e000      	b.n	800c722 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	46020800 	.word	0x46020800
 800c734:	20000190 	.word	0x20000190
 800c738:	10624dd3 	.word	0x10624dd3

0800c73c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c73c:	b480      	push	{r7}
 800c73e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c740:	4b04      	ldr	r3, [pc, #16]	@ (800c754 <HAL_PWREx_GetVoltageRange+0x18>)
 800c742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800c748:	4618      	mov	r0, r3
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	46020800 	.word	0x46020800

0800c758 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c760:	4b22      	ldr	r3, [pc, #136]	@ (800c7ec <HAL_PWREx_ConfigSupply+0x94>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a22      	ldr	r2, [pc, #136]	@ (800c7f0 <HAL_PWREx_ConfigSupply+0x98>)
 800c766:	fba2 2303 	umull	r2, r3, r2, r3
 800c76a:	099b      	lsrs	r3, r3, #6
 800c76c:	2232      	movs	r2, #50	@ 0x32
 800c76e:	fb02 f303 	mul.w	r3, r2, r3
 800c772:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f0 <HAL_PWREx_ConfigSupply+0x98>)
 800c774:	fba2 2303 	umull	r2, r3, r2, r3
 800c778:	099b      	lsrs	r3, r3, #6
 800c77a:	3301      	adds	r3, #1
 800c77c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d113      	bne.n	800c7ac <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800c784:	4b1b      	ldr	r3, [pc, #108]	@ (800c7f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	4a1a      	ldr	r2, [pc, #104]	@ (800c7f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800c78a:	f023 0302 	bic.w	r3, r3, #2
 800c78e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c790:	e002      	b.n	800c798 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3b01      	subs	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c798:	4b16      	ldr	r3, [pc, #88]	@ (800c7f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800c79a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c79c:	f003 0302 	and.w	r3, r3, #2
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d116      	bne.n	800c7d2 <HAL_PWREx_ConfigSupply+0x7a>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f3      	bne.n	800c792 <HAL_PWREx_ConfigSupply+0x3a>
 800c7aa:	e012      	b.n	800c7d2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800c7ac:	4b11      	ldr	r3, [pc, #68]	@ (800c7f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	4a10      	ldr	r2, [pc, #64]	@ (800c7f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800c7b2:	f043 0302 	orr.w	r3, r3, #2
 800c7b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c7b8:	e002      	b.n	800c7c0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800c7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <HAL_PWREx_ConfigSupply+0x7a>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f3      	bne.n	800c7ba <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e000      	b.n	800c7de <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	20000190 	.word	0x20000190
 800c7f0:	10624dd3 	.word	0x10624dd3
 800c7f4:	46020800 	.word	0x46020800

0800c7f8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c7fc:	4b05      	ldr	r3, [pc, #20]	@ (800c814 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	4a04      	ldr	r2, [pc, #16]	@ (800c814 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c802:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c806:	6113      	str	r3, [r2, #16]
}
 800c808:	bf00      	nop
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	46020800 	.word	0x46020800

0800c818 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800c818:	b480      	push	{r7}
 800c81a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800c81c:	4b05      	ldr	r3, [pc, #20]	@ (800c834 <HAL_PWREx_EnableVddA+0x1c>)
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	4a04      	ldr	r2, [pc, #16]	@ (800c834 <HAL_PWREx_EnableVddA+0x1c>)
 800c822:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c826:	6113      	str	r3, [r2, #16]
}
 800c828:	bf00      	nop
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	46020800 	.word	0x46020800

0800c838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08e      	sub	sp, #56	@ 0x38
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c840:	2300      	movs	r3, #0
 800c842:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	f000 bec8 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c852:	4b99      	ldr	r3, [pc, #612]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c854:	69db      	ldr	r3, [r3, #28]
 800c856:	f003 030c 	and.w	r3, r3, #12
 800c85a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c85c:	4b96      	ldr	r3, [pc, #600]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c860:	f003 0303 	and.w	r3, r3, #3
 800c864:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 0310 	and.w	r3, r3, #16
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 816c 	beq.w	800cb4c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c876:	2b00      	cmp	r3, #0
 800c878:	d007      	beq.n	800c88a <HAL_RCC_OscConfig+0x52>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	2b0c      	cmp	r3, #12
 800c87e:	f040 80de 	bne.w	800ca3e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	2b01      	cmp	r3, #1
 800c886:	f040 80da 	bne.w	800ca3e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d102      	bne.n	800c898 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	f000 bea5 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c89c:	4b86      	ldr	r3, [pc, #536]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d004      	beq.n	800c8b2 <HAL_RCC_OscConfig+0x7a>
 800c8a8:	4b83      	ldr	r3, [pc, #524]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c8b0:	e005      	b.n	800c8be <HAL_RCC_OscConfig+0x86>
 800c8b2:	4b81      	ldr	r3, [pc, #516]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c8b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8b8:	041b      	lsls	r3, r3, #16
 800c8ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d255      	bcs.n	800c96e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10a      	bne.n	800c8de <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f001 f9d9 	bl	800dc84 <RCC_SetFlashLatencyFromMSIRange>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f000 be82 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c8de:	4b76      	ldr	r3, [pc, #472]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	4a75      	ldr	r2, [pc, #468]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c8e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c8e8:	6093      	str	r3, [r2, #8]
 800c8ea:	4b73      	ldr	r3, [pc, #460]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f6:	4970      	ldr	r1, [pc, #448]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c900:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c904:	d309      	bcc.n	800c91a <HAL_RCC_OscConfig+0xe2>
 800c906:	4b6c      	ldr	r3, [pc, #432]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f023 021f 	bic.w	r2, r3, #31
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	4969      	ldr	r1, [pc, #420]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c914:	4313      	orrs	r3, r2
 800c916:	60cb      	str	r3, [r1, #12]
 800c918:	e07e      	b.n	800ca18 <HAL_RCC_OscConfig+0x1e0>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91e:	2b00      	cmp	r3, #0
 800c920:	da0a      	bge.n	800c938 <HAL_RCC_OscConfig+0x100>
 800c922:	4b65      	ldr	r3, [pc, #404]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	015b      	lsls	r3, r3, #5
 800c930:	4961      	ldr	r1, [pc, #388]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c932:	4313      	orrs	r3, r2
 800c934:	60cb      	str	r3, [r1, #12]
 800c936:	e06f      	b.n	800ca18 <HAL_RCC_OscConfig+0x1e0>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c940:	d30a      	bcc.n	800c958 <HAL_RCC_OscConfig+0x120>
 800c942:	4b5d      	ldr	r3, [pc, #372]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	029b      	lsls	r3, r3, #10
 800c950:	4959      	ldr	r1, [pc, #356]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c952:	4313      	orrs	r3, r2
 800c954:	60cb      	str	r3, [r1, #12]
 800c956:	e05f      	b.n	800ca18 <HAL_RCC_OscConfig+0x1e0>
 800c958:	4b57      	ldr	r3, [pc, #348]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	03db      	lsls	r3, r3, #15
 800c966:	4954      	ldr	r1, [pc, #336]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c968:	4313      	orrs	r3, r2
 800c96a:	60cb      	str	r3, [r1, #12]
 800c96c:	e054      	b.n	800ca18 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c96e:	4b52      	ldr	r3, [pc, #328]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	4a51      	ldr	r2, [pc, #324]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c978:	6093      	str	r3, [r2, #8]
 800c97a:	4b4f      	ldr	r3, [pc, #316]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c986:	494c      	ldr	r1, [pc, #304]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c988:	4313      	orrs	r3, r2
 800c98a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c990:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c994:	d309      	bcc.n	800c9aa <HAL_RCC_OscConfig+0x172>
 800c996:	4b48      	ldr	r3, [pc, #288]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f023 021f 	bic.w	r2, r3, #31
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	4945      	ldr	r1, [pc, #276]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	60cb      	str	r3, [r1, #12]
 800c9a8:	e028      	b.n	800c9fc <HAL_RCC_OscConfig+0x1c4>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	da0a      	bge.n	800c9c8 <HAL_RCC_OscConfig+0x190>
 800c9b2:	4b41      	ldr	r3, [pc, #260]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	015b      	lsls	r3, r3, #5
 800c9c0:	493d      	ldr	r1, [pc, #244]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60cb      	str	r3, [r1, #12]
 800c9c6:	e019      	b.n	800c9fc <HAL_RCC_OscConfig+0x1c4>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9d0:	d30a      	bcc.n	800c9e8 <HAL_RCC_OscConfig+0x1b0>
 800c9d2:	4b39      	ldr	r3, [pc, #228]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	029b      	lsls	r3, r3, #10
 800c9e0:	4935      	ldr	r1, [pc, #212]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60cb      	str	r3, [r1, #12]
 800c9e6:	e009      	b.n	800c9fc <HAL_RCC_OscConfig+0x1c4>
 800c9e8:	4b33      	ldr	r3, [pc, #204]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	03db      	lsls	r3, r3, #15
 800c9f6:	4930      	ldr	r1, [pc, #192]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca06:	4618      	mov	r0, r3
 800ca08:	f001 f93c 	bl	800dc84 <RCC_SetFlashLatencyFromMSIRange>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d002      	beq.n	800ca18 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	f000 bde5 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800ca18:	f001 f8de 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ca1c:	4b27      	ldr	r3, [pc, #156]	@ (800cabc <HAL_RCC_OscConfig+0x284>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7f9 f813 	bl	8005a4c <HAL_InitTick>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800ca2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 808a 	beq.w	800cb4a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800ca36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca3a:	f000 bdd2 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d066      	beq.n	800cb14 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ca46:	4b1c      	ldr	r3, [pc, #112]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a1b      	ldr	r2, [pc, #108]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ca52:	f7f9 f885 	bl	8005b60 <HAL_GetTick>
 800ca56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ca58:	e009      	b.n	800ca6e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ca5a:	f7f9 f881 	bl	8005b60 <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d902      	bls.n	800ca6e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	f000 bdba 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ca6e:	4b12      	ldr	r3, [pc, #72]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 0304 	and.w	r3, r3, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0ef      	beq.n	800ca5a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	4a0e      	ldr	r2, [pc, #56]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca84:	6093      	str	r3, [r2, #8]
 800ca86:	4b0c      	ldr	r3, [pc, #48]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca92:	4909      	ldr	r1, [pc, #36]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800ca94:	4313      	orrs	r3, r2
 800ca96:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800caa0:	d30e      	bcc.n	800cac0 <HAL_RCC_OscConfig+0x288>
 800caa2:	4b05      	ldr	r3, [pc, #20]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	f023 021f 	bic.w	r2, r3, #31
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	4902      	ldr	r1, [pc, #8]	@ (800cab8 <HAL_RCC_OscConfig+0x280>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	60cb      	str	r3, [r1, #12]
 800cab4:	e04a      	b.n	800cb4c <HAL_RCC_OscConfig+0x314>
 800cab6:	bf00      	nop
 800cab8:	46020c00 	.word	0x46020c00
 800cabc:	200001a4 	.word	0x200001a4
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	da0a      	bge.n	800cade <HAL_RCC_OscConfig+0x2a6>
 800cac8:	4b98      	ldr	r3, [pc, #608]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	015b      	lsls	r3, r3, #5
 800cad6:	4995      	ldr	r1, [pc, #596]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cad8:	4313      	orrs	r3, r2
 800cada:	60cb      	str	r3, [r1, #12]
 800cadc:	e036      	b.n	800cb4c <HAL_RCC_OscConfig+0x314>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cae6:	d30a      	bcc.n	800cafe <HAL_RCC_OscConfig+0x2c6>
 800cae8:	4b90      	ldr	r3, [pc, #576]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	029b      	lsls	r3, r3, #10
 800caf6:	498d      	ldr	r1, [pc, #564]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60cb      	str	r3, [r1, #12]
 800cafc:	e026      	b.n	800cb4c <HAL_RCC_OscConfig+0x314>
 800cafe:	4b8b      	ldr	r3, [pc, #556]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	03db      	lsls	r3, r3, #15
 800cb0c:	4987      	ldr	r1, [pc, #540]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60cb      	str	r3, [r1, #12]
 800cb12:	e01b      	b.n	800cb4c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800cb14:	4b85      	ldr	r3, [pc, #532]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a84      	ldr	r2, [pc, #528]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb1a:	f023 0301 	bic.w	r3, r3, #1
 800cb1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cb20:	f7f9 f81e 	bl	8005b60 <HAL_GetTick>
 800cb24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cb26:	e009      	b.n	800cb3c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cb28:	f7f9 f81a 	bl	8005b60 <HAL_GetTick>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d902      	bls.n	800cb3c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800cb36:	2303      	movs	r3, #3
 800cb38:	f000 bd53 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cb3c:	4b7b      	ldr	r3, [pc, #492]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1ef      	bne.n	800cb28 <HAL_RCC_OscConfig+0x2f0>
 800cb48:	e000      	b.n	800cb4c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cb4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 808b 	beq.w	800cc70 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5c:	2b08      	cmp	r3, #8
 800cb5e:	d005      	beq.n	800cb6c <HAL_RCC_OscConfig+0x334>
 800cb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb62:	2b0c      	cmp	r3, #12
 800cb64:	d109      	bne.n	800cb7a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb68:	2b03      	cmp	r3, #3
 800cb6a:	d106      	bne.n	800cb7a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d17d      	bne.n	800cc70 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	f000 bd34 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb82:	d106      	bne.n	800cb92 <HAL_RCC_OscConfig+0x35a>
 800cb84:	4b69      	ldr	r3, [pc, #420]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a68      	ldr	r2, [pc, #416]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	e041      	b.n	800cc16 <HAL_RCC_OscConfig+0x3de>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb9a:	d112      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x38a>
 800cb9c:	4b63      	ldr	r3, [pc, #396]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a62      	ldr	r2, [pc, #392]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cba2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	4b60      	ldr	r3, [pc, #384]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a5f      	ldr	r2, [pc, #380]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	4b5d      	ldr	r3, [pc, #372]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a5c      	ldr	r2, [pc, #368]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	e029      	b.n	800cc16 <HAL_RCC_OscConfig+0x3de>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800cbca:	d112      	bne.n	800cbf2 <HAL_RCC_OscConfig+0x3ba>
 800cbcc:	4b57      	ldr	r3, [pc, #348]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a56      	ldr	r2, [pc, #344]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	4b54      	ldr	r3, [pc, #336]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a53      	ldr	r2, [pc, #332]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	4b51      	ldr	r3, [pc, #324]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a50      	ldr	r2, [pc, #320]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	e011      	b.n	800cc16 <HAL_RCC_OscConfig+0x3de>
 800cbf2:	4b4e      	ldr	r3, [pc, #312]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a4d      	ldr	r2, [pc, #308]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cbf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	4b4b      	ldr	r3, [pc, #300]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a4a      	ldr	r2, [pc, #296]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	4b48      	ldr	r3, [pc, #288]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a47      	ldr	r2, [pc, #284]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cc14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d014      	beq.n	800cc48 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800cc1e:	f7f8 ff9f 	bl	8005b60 <HAL_GetTick>
 800cc22:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc24:	e009      	b.n	800cc3a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc26:	f7f8 ff9b 	bl	8005b60 <HAL_GetTick>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	2b64      	cmp	r3, #100	@ 0x64
 800cc32:	d902      	bls.n	800cc3a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800cc34:	2303      	movs	r3, #3
 800cc36:	f000 bcd4 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc3a:	4b3c      	ldr	r3, [pc, #240]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0ef      	beq.n	800cc26 <HAL_RCC_OscConfig+0x3ee>
 800cc46:	e013      	b.n	800cc70 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800cc48:	f7f8 ff8a 	bl	8005b60 <HAL_GetTick>
 800cc4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc4e:	e009      	b.n	800cc64 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc50:	f7f8 ff86 	bl	8005b60 <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b64      	cmp	r3, #100	@ 0x64
 800cc5c:	d902      	bls.n	800cc64 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	f000 bcbf 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc64:	4b31      	ldr	r3, [pc, #196]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1ef      	bne.n	800cc50 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 0302 	and.w	r3, r3, #2
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d05f      	beq.n	800cd3c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	2b04      	cmp	r3, #4
 800cc80:	d005      	beq.n	800cc8e <HAL_RCC_OscConfig+0x456>
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	2b0c      	cmp	r3, #12
 800cc86:	d114      	bne.n	800ccb2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d111      	bne.n	800ccb2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d102      	bne.n	800cc9c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	f000 bca3 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800cc9c:	4b23      	ldr	r3, [pc, #140]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	041b      	lsls	r3, r3, #16
 800ccaa:	4920      	ldr	r1, [pc, #128]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ccb0:	e044      	b.n	800cd3c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d024      	beq.n	800cd04 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800ccba:	4b1c      	ldr	r3, [pc, #112]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a1b      	ldr	r2, [pc, #108]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800ccc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccc4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ccc6:	f7f8 ff4b 	bl	8005b60 <HAL_GetTick>
 800ccca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cccc:	e009      	b.n	800cce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccce:	f7f8 ff47 	bl	8005b60 <HAL_GetTick>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d902      	bls.n	800cce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	f000 bc80 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cce2:	4b12      	ldr	r3, [pc, #72]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0ef      	beq.n	800ccce <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800ccee:	4b0f      	ldr	r3, [pc, #60]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	041b      	lsls	r3, r3, #16
 800ccfc:	490b      	ldr	r1, [pc, #44]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	610b      	str	r3, [r1, #16]
 800cd02:	e01b      	b.n	800cd3c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800cd04:	4b09      	ldr	r3, [pc, #36]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a08      	ldr	r2, [pc, #32]	@ (800cd2c <HAL_RCC_OscConfig+0x4f4>)
 800cd0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cd10:	f7f8 ff26 	bl	8005b60 <HAL_GetTick>
 800cd14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd16:	e00b      	b.n	800cd30 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd18:	f7f8 ff22 	bl	8005b60 <HAL_GetTick>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d904      	bls.n	800cd30 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	f000 bc5b 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
 800cd2c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd30:	4baf      	ldr	r3, [pc, #700]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1ed      	bne.n	800cd18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f003 0308 	and.w	r3, r3, #8
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80c8 	beq.w	800ceda <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd50:	4ba7      	ldr	r3, [pc, #668]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cd52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd56:	f003 0304 	and.w	r3, r3, #4
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d111      	bne.n	800cd82 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd5e:	4ba4      	ldr	r3, [pc, #656]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cd60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd64:	4aa2      	ldr	r2, [pc, #648]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cd66:	f043 0304 	orr.w	r3, r3, #4
 800cd6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cd6e:	4ba0      	ldr	r3, [pc, #640]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cd70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	617b      	str	r3, [r7, #20]
 800cd7a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cd82:	4b9c      	ldr	r3, [pc, #624]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d119      	bne.n	800cdc2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cd8e:	4b99      	ldr	r3, [pc, #612]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd92:	4a98      	ldr	r2, [pc, #608]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cd94:	f043 0301 	orr.w	r3, r3, #1
 800cd98:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd9a:	f7f8 fee1 	bl	8005b60 <HAL_GetTick>
 800cd9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cda0:	e009      	b.n	800cdb6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cda2:	f7f8 fedd 	bl	8005b60 <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d902      	bls.n	800cdb6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	f000 bc16 	b.w	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cdb6:	4b8f      	ldr	r3, [pc, #572]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cdb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0ef      	beq.n	800cda2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d05f      	beq.n	800ce8a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800cdca:	4b89      	ldr	r3, [pc, #548]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cdcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cdd0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699a      	ldr	r2, [r3, #24]
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d037      	beq.n	800ce50 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d006      	beq.n	800cdf8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d101      	bne.n	800cdf8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e3f4      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d01b      	beq.n	800ce3a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800ce02:	4b7b      	ldr	r3, [pc, #492]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce08:	4a79      	ldr	r2, [pc, #484]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce0a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800ce0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800ce12:	f7f8 fea5 	bl	8005b60 <HAL_GetTick>
 800ce16:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ce18:	e008      	b.n	800ce2c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce1a:	f7f8 fea1 	bl	8005b60 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b05      	cmp	r3, #5
 800ce26:	d901      	bls.n	800ce2c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e3da      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ce2c:	4b70      	ldr	r3, [pc, #448]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1ef      	bne.n	800ce1a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800ce3a:	4b6d      	ldr	r3, [pc, #436]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	4969      	ldr	r1, [pc, #420]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800ce50:	4b67      	ldr	r3, [pc, #412]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce56:	4a66      	ldr	r2, [pc, #408]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ce60:	f7f8 fe7e 	bl	8005b60 <HAL_GetTick>
 800ce64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800ce66:	e008      	b.n	800ce7a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce68:	f7f8 fe7a 	bl	8005b60 <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	2b05      	cmp	r3, #5
 800ce74:	d901      	bls.n	800ce7a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e3b3      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800ce7a:	4b5d      	ldr	r3, [pc, #372]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0ef      	beq.n	800ce68 <HAL_RCC_OscConfig+0x630>
 800ce88:	e01b      	b.n	800cec2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800ce8a:	4b59      	ldr	r3, [pc, #356]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce90:	4a57      	ldr	r2, [pc, #348]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ce92:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800ce96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800ce9a:	f7f8 fe61 	bl	8005b60 <HAL_GetTick>
 800ce9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cea0:	e008      	b.n	800ceb4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cea2:	f7f8 fe5d 	bl	8005b60 <HAL_GetTick>
 800cea6:	4602      	mov	r2, r0
 800cea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	2b05      	cmp	r3, #5
 800ceae:	d901      	bls.n	800ceb4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e396      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ceb4:	4b4e      	ldr	r3, [pc, #312]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ceb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ceba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1ef      	bne.n	800cea2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cec2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d107      	bne.n	800ceda <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ceca:	4b49      	ldr	r3, [pc, #292]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ced0:	4a47      	ldr	r2, [pc, #284]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800ced2:	f023 0304 	bic.w	r3, r3, #4
 800ced6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0304 	and.w	r3, r3, #4
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 8111 	beq.w	800d10a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800cee8:	2300      	movs	r3, #0
 800ceea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ceee:	4b40      	ldr	r3, [pc, #256]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cef4:	f003 0304 	and.w	r3, r3, #4
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d111      	bne.n	800cf20 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cefc:	4b3c      	ldr	r3, [pc, #240]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cefe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf02:	4a3b      	ldr	r2, [pc, #236]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf04:	f043 0304 	orr.w	r3, r3, #4
 800cf08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800cf0c:	4b38      	ldr	r3, [pc, #224]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf12:	f003 0304 	and.w	r3, r3, #4
 800cf16:	613b      	str	r3, [r7, #16]
 800cf18:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cf20:	4b34      	ldr	r3, [pc, #208]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cf22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d118      	bne.n	800cf5e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cf2c:	4b31      	ldr	r3, [pc, #196]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf30:	4a30      	ldr	r2, [pc, #192]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cf32:	f043 0301 	orr.w	r3, r3, #1
 800cf36:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf38:	f7f8 fe12 	bl	8005b60 <HAL_GetTick>
 800cf3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cf3e:	e008      	b.n	800cf52 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf40:	f7f8 fe0e 	bl	8005b60 <HAL_GetTick>
 800cf44:	4602      	mov	r2, r0
 800cf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d901      	bls.n	800cf52 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	e347      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cf52:	4b28      	ldr	r3, [pc, #160]	@ (800cff4 <HAL_RCC_OscConfig+0x7bc>)
 800cf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0f0      	beq.n	800cf40 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d01f      	beq.n	800cfaa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	f003 0304 	and.w	r3, r3, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d010      	beq.n	800cf98 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cf76:	4b1e      	ldr	r3, [pc, #120]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf7c:	4a1c      	ldr	r2, [pc, #112]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf7e:	f043 0304 	orr.w	r3, r3, #4
 800cf82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cf86:	4b1a      	ldr	r3, [pc, #104]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf8c:	4a18      	ldr	r2, [pc, #96]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf8e:	f043 0301 	orr.w	r3, r3, #1
 800cf92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800cf96:	e018      	b.n	800cfca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cf98:	4b15      	ldr	r3, [pc, #84]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cf9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf9e:	4a14      	ldr	r2, [pc, #80]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cfa0:	f043 0301 	orr.w	r3, r3, #1
 800cfa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800cfa8:	e00f      	b.n	800cfca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cfaa:	4b11      	ldr	r3, [pc, #68]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cfac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfb0:	4a0f      	ldr	r2, [pc, #60]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cfb2:	f023 0301 	bic.w	r3, r3, #1
 800cfb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cfba:	4b0d      	ldr	r3, [pc, #52]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cfbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfc0:	4a0b      	ldr	r2, [pc, #44]	@ (800cff0 <HAL_RCC_OscConfig+0x7b8>)
 800cfc2:	f023 0304 	bic.w	r3, r3, #4
 800cfc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d057      	beq.n	800d082 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800cfd2:	f7f8 fdc5 	bl	8005b60 <HAL_GetTick>
 800cfd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfd8:	e00e      	b.n	800cff8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfda:	f7f8 fdc1 	bl	8005b60 <HAL_GetTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d905      	bls.n	800cff8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e2f8      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
 800cff0:	46020c00 	.word	0x46020c00
 800cff4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cff8:	4b9c      	ldr	r3, [pc, #624]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800cffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cffe:	f003 0302 	and.w	r3, r3, #2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0e9      	beq.n	800cfda <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d01b      	beq.n	800d04a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d012:	4b96      	ldr	r3, [pc, #600]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d018:	4a94      	ldr	r2, [pc, #592]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d01e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d022:	e00a      	b.n	800d03a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d024:	f7f8 fd9c 	bl	8005b60 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d032:	4293      	cmp	r3, r2
 800d034:	d901      	bls.n	800d03a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e2d3      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d03a:	4b8c      	ldr	r3, [pc, #560]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d03c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0ed      	beq.n	800d024 <HAL_RCC_OscConfig+0x7ec>
 800d048:	e053      	b.n	800d0f2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d04a:	4b88      	ldr	r3, [pc, #544]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d04c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d050:	4a86      	ldr	r2, [pc, #536]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d056:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d05a:	e00a      	b.n	800d072 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d05c:	f7f8 fd80 	bl	8005b60 <HAL_GetTick>
 800d060:	4602      	mov	r2, r0
 800d062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d901      	bls.n	800d072 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e2b7      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d072:	4b7e      	ldr	r3, [pc, #504]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1ed      	bne.n	800d05c <HAL_RCC_OscConfig+0x824>
 800d080:	e037      	b.n	800d0f2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800d082:	f7f8 fd6d 	bl	8005b60 <HAL_GetTick>
 800d086:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d088:	e00a      	b.n	800d0a0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d08a:	f7f8 fd69 	bl	8005b60 <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d098:	4293      	cmp	r3, r2
 800d09a:	d901      	bls.n	800d0a0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e2a0      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d0a0:	4b72      	ldr	r3, [pc, #456]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d0a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0a6:	f003 0302 	and.w	r3, r3, #2
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1ed      	bne.n	800d08a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800d0ae:	4b6f      	ldr	r3, [pc, #444]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d0b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d01a      	beq.n	800d0f2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d0bc:	4b6b      	ldr	r3, [pc, #428]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d0be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0c2:	4a6a      	ldr	r2, [pc, #424]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d0c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d0cc:	e00a      	b.n	800d0e4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0ce:	f7f8 fd47 	bl	8005b60 <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d901      	bls.n	800d0e4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e27e      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d0e4:	4b61      	ldr	r3, [pc, #388]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d0e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1ed      	bne.n	800d0ce <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d0f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d107      	bne.n	800d10a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0fa:	4b5c      	ldr	r3, [pc, #368]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d100:	4a5a      	ldr	r2, [pc, #360]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d102:	f023 0304 	bic.w	r3, r3, #4
 800d106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 0320 	and.w	r3, r3, #32
 800d112:	2b00      	cmp	r3, #0
 800d114:	d036      	beq.n	800d184 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d019      	beq.n	800d152 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800d11e:	4b53      	ldr	r3, [pc, #332]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a52      	ldr	r2, [pc, #328]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d128:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d12a:	f7f8 fd19 	bl	8005b60 <HAL_GetTick>
 800d12e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d130:	e008      	b.n	800d144 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d132:	f7f8 fd15 	bl	8005b60 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d901      	bls.n	800d144 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e24e      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d144:	4b49      	ldr	r3, [pc, #292]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0f0      	beq.n	800d132 <HAL_RCC_OscConfig+0x8fa>
 800d150:	e018      	b.n	800d184 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800d152:	4b46      	ldr	r3, [pc, #280]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a45      	ldr	r2, [pc, #276]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d15c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d15e:	f7f8 fcff 	bl	8005b60 <HAL_GetTick>
 800d162:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d164:	e008      	b.n	800d178 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d166:	f7f8 fcfb 	bl	8005b60 <HAL_GetTick>
 800d16a:	4602      	mov	r2, r0
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	2b02      	cmp	r3, #2
 800d172:	d901      	bls.n	800d178 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800d174:	2303      	movs	r3, #3
 800d176:	e234      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d178:	4b3c      	ldr	r3, [pc, #240]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1f0      	bne.n	800d166 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d036      	beq.n	800d1fe <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d194:	2b00      	cmp	r3, #0
 800d196:	d019      	beq.n	800d1cc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800d198:	4b34      	ldr	r3, [pc, #208]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a33      	ldr	r2, [pc, #204]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d19e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d1a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d1a4:	f7f8 fcdc 	bl	8005b60 <HAL_GetTick>
 800d1a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d1aa:	e008      	b.n	800d1be <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d1ac:	f7f8 fcd8 	bl	8005b60 <HAL_GetTick>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d901      	bls.n	800d1be <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e211      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d1be:	4b2b      	ldr	r3, [pc, #172]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0f0      	beq.n	800d1ac <HAL_RCC_OscConfig+0x974>
 800d1ca:	e018      	b.n	800d1fe <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800d1cc:	4b27      	ldr	r3, [pc, #156]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a26      	ldr	r2, [pc, #152]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d1d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d1d8:	f7f8 fcc2 	bl	8005b60 <HAL_GetTick>
 800d1dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d1de:	e008      	b.n	800d1f2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d1e0:	f7f8 fcbe 	bl	8005b60 <HAL_GetTick>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d901      	bls.n	800d1f2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e1f7      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1f0      	bne.n	800d1e0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d07f      	beq.n	800d30a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d062      	beq.n	800d2d8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800d212:	4b16      	ldr	r3, [pc, #88]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	4a15      	ldr	r2, [pc, #84]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d218:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d21c:	6093      	str	r3, [r2, #8]
 800d21e:	4b13      	ldr	r3, [pc, #76]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d22a:	4910      	ldr	r1, [pc, #64]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d22c:	4313      	orrs	r3, r2
 800d22e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d234:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d238:	d309      	bcc.n	800d24e <HAL_RCC_OscConfig+0xa16>
 800d23a:	4b0c      	ldr	r3, [pc, #48]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	f023 021f 	bic.w	r2, r3, #31
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	4909      	ldr	r1, [pc, #36]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	60cb      	str	r3, [r1, #12]
 800d24c:	e02a      	b.n	800d2a4 <HAL_RCC_OscConfig+0xa6c>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d252:	2b00      	cmp	r3, #0
 800d254:	da0c      	bge.n	800d270 <HAL_RCC_OscConfig+0xa38>
 800d256:	4b05      	ldr	r3, [pc, #20]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	015b      	lsls	r3, r3, #5
 800d264:	4901      	ldr	r1, [pc, #4]	@ (800d26c <HAL_RCC_OscConfig+0xa34>)
 800d266:	4313      	orrs	r3, r2
 800d268:	60cb      	str	r3, [r1, #12]
 800d26a:	e01b      	b.n	800d2a4 <HAL_RCC_OscConfig+0xa6c>
 800d26c:	46020c00 	.word	0x46020c00
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d278:	d30a      	bcc.n	800d290 <HAL_RCC_OscConfig+0xa58>
 800d27a:	4ba1      	ldr	r3, [pc, #644]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	029b      	lsls	r3, r3, #10
 800d288:	499d      	ldr	r1, [pc, #628]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60cb      	str	r3, [r1, #12]
 800d28e:	e009      	b.n	800d2a4 <HAL_RCC_OscConfig+0xa6c>
 800d290:	4b9b      	ldr	r3, [pc, #620]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a1b      	ldr	r3, [r3, #32]
 800d29c:	03db      	lsls	r3, r3, #15
 800d29e:	4998      	ldr	r1, [pc, #608]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800d2a4:	4b96      	ldr	r3, [pc, #600]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a95      	ldr	r2, [pc, #596]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d2aa:	f043 0310 	orr.w	r3, r3, #16
 800d2ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d2b0:	f7f8 fc56 	bl	8005b60 <HAL_GetTick>
 800d2b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d2b6:	e008      	b.n	800d2ca <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d2b8:	f7f8 fc52 	bl	8005b60 <HAL_GetTick>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d901      	bls.n	800d2ca <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	e18b      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d2ca:	4b8d      	ldr	r3, [pc, #564]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 0320 	and.w	r3, r3, #32
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0f0      	beq.n	800d2b8 <HAL_RCC_OscConfig+0xa80>
 800d2d6:	e018      	b.n	800d30a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800d2d8:	4b89      	ldr	r3, [pc, #548]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a88      	ldr	r2, [pc, #544]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d2de:	f023 0310 	bic.w	r3, r3, #16
 800d2e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d2e4:	f7f8 fc3c 	bl	8005b60 <HAL_GetTick>
 800d2e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d2ea:	e008      	b.n	800d2fe <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d2ec:	f7f8 fc38 	bl	8005b60 <HAL_GetTick>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d901      	bls.n	800d2fe <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e171      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d2fe:	4b80      	ldr	r3, [pc, #512]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1f0      	bne.n	800d2ec <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 8166 	beq.w	800d5e0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800d314:	2300      	movs	r3, #0
 800d316:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d31a:	4b79      	ldr	r3, [pc, #484]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d31c:	69db      	ldr	r3, [r3, #28]
 800d31e:	f003 030c 	and.w	r3, r3, #12
 800d322:	2b0c      	cmp	r3, #12
 800d324:	f000 80f2 	beq.w	800d50c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	f040 80c5 	bne.w	800d4bc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d332:	4b73      	ldr	r3, [pc, #460]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a72      	ldr	r2, [pc, #456]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d338:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d33c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d33e:	f7f8 fc0f 	bl	8005b60 <HAL_GetTick>
 800d342:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d344:	e008      	b.n	800d358 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d346:	f7f8 fc0b 	bl	8005b60 <HAL_GetTick>
 800d34a:	4602      	mov	r2, r0
 800d34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	2b02      	cmp	r3, #2
 800d352:	d901      	bls.n	800d358 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e144      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d358:	4b69      	ldr	r3, [pc, #420]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1f0      	bne.n	800d346 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d364:	4b66      	ldr	r3, [pc, #408]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d36a:	f003 0304 	and.w	r3, r3, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d111      	bne.n	800d396 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800d372:	4b63      	ldr	r3, [pc, #396]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d378:	4a61      	ldr	r2, [pc, #388]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d37a:	f043 0304 	orr.w	r3, r3, #4
 800d37e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d382:	4b5f      	ldr	r3, [pc, #380]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	60fb      	str	r3, [r7, #12]
 800d38e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800d390:	2301      	movs	r3, #1
 800d392:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800d396:	4b5b      	ldr	r3, [pc, #364]	@ (800d504 <HAL_RCC_OscConfig+0xccc>)
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d39e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d3a2:	d102      	bne.n	800d3aa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d3aa:	4b56      	ldr	r3, [pc, #344]	@ (800d504 <HAL_RCC_OscConfig+0xccc>)
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	4a55      	ldr	r2, [pc, #340]	@ (800d504 <HAL_RCC_OscConfig+0xccc>)
 800d3b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d3b4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800d3b6:	4b52      	ldr	r3, [pc, #328]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800d3ca:	3a01      	subs	r2, #1
 800d3cc:	0212      	lsls	r2, r2, #8
 800d3ce:	4311      	orrs	r1, r2
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	494a      	ldr	r1, [pc, #296]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	628b      	str	r3, [r1, #40]	@ 0x28
 800d3dc:	4b48      	ldr	r3, [pc, #288]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d3de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3e0:	4b49      	ldr	r3, [pc, #292]	@ (800d508 <HAL_RCC_OscConfig+0xcd0>)
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d3e8:	3a01      	subs	r2, #1
 800d3ea:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d3f2:	3a01      	subs	r2, #1
 800d3f4:	0252      	lsls	r2, r2, #9
 800d3f6:	b292      	uxth	r2, r2
 800d3f8:	4311      	orrs	r1, r2
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d3fe:	3a01      	subs	r2, #1
 800d400:	0412      	lsls	r2, r2, #16
 800d402:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d406:	4311      	orrs	r1, r2
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d40c:	3a01      	subs	r2, #1
 800d40e:	0612      	lsls	r2, r2, #24
 800d410:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d414:	430a      	orrs	r2, r1
 800d416:	493a      	ldr	r1, [pc, #232]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d418:	4313      	orrs	r3, r2
 800d41a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d41c:	4b38      	ldr	r3, [pc, #224]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d420:	4a37      	ldr	r2, [pc, #220]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d422:	f023 0310 	bic.w	r3, r3, #16
 800d426:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d42c:	4a34      	ldr	r2, [pc, #208]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d432:	4b33      	ldr	r3, [pc, #204]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d436:	4a32      	ldr	r2, [pc, #200]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d438:	f043 0310 	orr.w	r3, r3, #16
 800d43c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d43e:	4b30      	ldr	r3, [pc, #192]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d442:	f023 020c 	bic.w	r2, r3, #12
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d44a:	492d      	ldr	r1, [pc, #180]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d44c:	4313      	orrs	r3, r2
 800d44e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800d450:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d454:	2b01      	cmp	r3, #1
 800d456:	d105      	bne.n	800d464 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d458:	4b2a      	ldr	r3, [pc, #168]	@ (800d504 <HAL_RCC_OscConfig+0xccc>)
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	4a29      	ldr	r2, [pc, #164]	@ (800d504 <HAL_RCC_OscConfig+0xccc>)
 800d45e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d462:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d464:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d107      	bne.n	800d47c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d46c:	4b24      	ldr	r3, [pc, #144]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d46e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d472:	4a23      	ldr	r2, [pc, #140]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d474:	f023 0304 	bic.w	r3, r3, #4
 800d478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d47c:	4b20      	ldr	r3, [pc, #128]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a1f      	ldr	r2, [pc, #124]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d486:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d488:	f7f8 fb6a 	bl	8005b60 <HAL_GetTick>
 800d48c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d48e:	e008      	b.n	800d4a2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d490:	f7f8 fb66 	bl	8005b60 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d901      	bls.n	800d4a2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e09f      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d4a2:	4b17      	ldr	r3, [pc, #92]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0f0      	beq.n	800d490 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d4ae:	4b14      	ldr	r3, [pc, #80]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b2:	4a13      	ldr	r2, [pc, #76]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d4b8:	6293      	str	r3, [r2, #40]	@ 0x28
 800d4ba:	e091      	b.n	800d5e0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d4bc:	4b10      	ldr	r3, [pc, #64]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a0f      	ldr	r2, [pc, #60]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d4c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d4c8:	f7f8 fb4a 	bl	8005b60 <HAL_GetTick>
 800d4cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d4ce:	e008      	b.n	800d4e2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4d0:	f7f8 fb46 	bl	8005b60 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d901      	bls.n	800d4e2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	e07f      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d4e2:	4b07      	ldr	r3, [pc, #28]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1f0      	bne.n	800d4d0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d4ee:	4b04      	ldr	r3, [pc, #16]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f2:	4a03      	ldr	r2, [pc, #12]	@ (800d500 <HAL_RCC_OscConfig+0xcc8>)
 800d4f4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800d4f8:	f023 0303 	bic.w	r3, r3, #3
 800d4fc:	6293      	str	r3, [r2, #40]	@ 0x28
 800d4fe:	e06f      	b.n	800d5e0 <HAL_RCC_OscConfig+0xda8>
 800d500:	46020c00 	.word	0x46020c00
 800d504:	46020800 	.word	0x46020800
 800d508:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d50c:	4b37      	ldr	r3, [pc, #220]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d510:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d512:	4b36      	ldr	r3, [pc, #216]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d516:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d039      	beq.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	f003 0203 	and.w	r2, r3, #3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d132      	bne.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	0a1b      	lsrs	r3, r3, #8
 800d532:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d53a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d129      	bne.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d122      	bne.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d558:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d11a      	bne.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	0a5b      	lsrs	r3, r3, #9
 800d562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d56a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d111      	bne.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	0c1b      	lsrs	r3, r3, #16
 800d574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d57c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d57e:	429a      	cmp	r2, r3
 800d580:	d108      	bne.n	800d594 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	0e1b      	lsrs	r3, r3, #24
 800d586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d58e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d590:	429a      	cmp	r2, r3
 800d592:	d001      	beq.n	800d598 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800d594:	2301      	movs	r3, #1
 800d596:	e024      	b.n	800d5e2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d598:	4b14      	ldr	r3, [pc, #80]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d59c:	08db      	lsrs	r3, r3, #3
 800d59e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d01a      	beq.n	800d5e0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d5aa:	4b10      	ldr	r3, [pc, #64]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ae:	4a0f      	ldr	r2, [pc, #60]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d5b0:	f023 0310 	bic.w	r3, r3, #16
 800d5b4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5b6:	f7f8 fad3 	bl	8005b60 <HAL_GetTick>
 800d5ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800d5bc:	bf00      	nop
 800d5be:	f7f8 facf 	bl	8005b60 <HAL_GetTick>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d0f9      	beq.n	800d5be <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5ce:	4a07      	ldr	r2, [pc, #28]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d5d4:	4b05      	ldr	r3, [pc, #20]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d8:	4a04      	ldr	r2, [pc, #16]	@ (800d5ec <HAL_RCC_OscConfig+0xdb4>)
 800d5da:	f043 0310 	orr.w	r3, r3, #16
 800d5de:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3738      	adds	r7, #56	@ 0x38
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	46020c00 	.word	0x46020c00

0800d5f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	e1d9      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d604:	4b9b      	ldr	r3, [pc, #620]	@ (800d874 <HAL_RCC_ClockConfig+0x284>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 030f 	and.w	r3, r3, #15
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d910      	bls.n	800d634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d612:	4b98      	ldr	r3, [pc, #608]	@ (800d874 <HAL_RCC_ClockConfig+0x284>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f023 020f 	bic.w	r2, r3, #15
 800d61a:	4996      	ldr	r1, [pc, #600]	@ (800d874 <HAL_RCC_ClockConfig+0x284>)
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	4313      	orrs	r3, r2
 800d620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d622:	4b94      	ldr	r3, [pc, #592]	@ (800d874 <HAL_RCC_ClockConfig+0x284>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 030f 	and.w	r3, r3, #15
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d001      	beq.n	800d634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e1c1      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 0310 	and.w	r3, r3, #16
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d010      	beq.n	800d662 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	695a      	ldr	r2, [r3, #20]
 800d644:	4b8c      	ldr	r3, [pc, #560]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d908      	bls.n	800d662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800d650:	4b89      	ldr	r3, [pc, #548]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	4986      	ldr	r1, [pc, #536]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d65e:	4313      	orrs	r3, r2
 800d660:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f003 0308 	and.w	r3, r3, #8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d012      	beq.n	800d694 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	691a      	ldr	r2, [r3, #16]
 800d672:	4b81      	ldr	r3, [pc, #516]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	091b      	lsrs	r3, r3, #4
 800d678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d909      	bls.n	800d694 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d680:	4b7d      	ldr	r3, [pc, #500]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	011b      	lsls	r3, r3, #4
 800d68e:	497a      	ldr	r1, [pc, #488]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d690:	4313      	orrs	r3, r2
 800d692:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f003 0304 	and.w	r3, r3, #4
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d010      	beq.n	800d6c2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	68da      	ldr	r2, [r3, #12]
 800d6a4:	4b74      	ldr	r3, [pc, #464]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d908      	bls.n	800d6c2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d6b0:	4b71      	ldr	r3, [pc, #452]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	496e      	ldr	r1, [pc, #440]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d010      	beq.n	800d6f0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689a      	ldr	r2, [r3, #8]
 800d6d2:	4b69      	ldr	r3, [pc, #420]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	f003 030f 	and.w	r3, r3, #15
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d908      	bls.n	800d6f0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d6de:	4b66      	ldr	r3, [pc, #408]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	f023 020f 	bic.w	r2, r3, #15
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	4963      	ldr	r1, [pc, #396]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f000 80d2 	beq.w	800d8a2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d6fe:	2300      	movs	r3, #0
 800d700:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	2b03      	cmp	r3, #3
 800d708:	d143      	bne.n	800d792 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d70a:	4b5b      	ldr	r3, [pc, #364]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d70c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d110      	bne.n	800d73a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d718:	4b57      	ldr	r3, [pc, #348]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d71e:	4a56      	ldr	r2, [pc, #344]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d720:	f043 0304 	orr.w	r3, r3, #4
 800d724:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d728:	4b53      	ldr	r3, [pc, #332]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d72a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d72e:	f003 0304 	and.w	r3, r3, #4
 800d732:	60bb      	str	r3, [r7, #8]
 800d734:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d736:	2301      	movs	r3, #1
 800d738:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d73a:	f7f8 fa11 	bl	8005b60 <HAL_GetTick>
 800d73e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d740:	4b4e      	ldr	r3, [pc, #312]	@ (800d87c <HAL_RCC_ClockConfig+0x28c>)
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00f      	beq.n	800d76c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d74c:	e008      	b.n	800d760 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d74e:	f7f8 fa07 	bl	8005b60 <HAL_GetTick>
 800d752:	4602      	mov	r2, r0
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d901      	bls.n	800d760 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d75c:	2303      	movs	r3, #3
 800d75e:	e12b      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d760:	4b46      	ldr	r3, [pc, #280]	@ (800d87c <HAL_RCC_ClockConfig+0x28c>)
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d0f0      	beq.n	800d74e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d107      	bne.n	800d782 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d772:	4b41      	ldr	r3, [pc, #260]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d778:	4a3f      	ldr	r2, [pc, #252]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d77a:	f023 0304 	bic.w	r3, r3, #4
 800d77e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d782:	4b3d      	ldr	r3, [pc, #244]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d121      	bne.n	800d7d2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	e112      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	2b02      	cmp	r3, #2
 800d798:	d107      	bne.n	800d7aa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d79a:	4b37      	ldr	r3, [pc, #220]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d115      	bne.n	800d7d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e106      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d107      	bne.n	800d7c2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d7b2:	4b31      	ldr	r3, [pc, #196]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 0304 	and.w	r3, r3, #4
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d109      	bne.n	800d7d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e0fa      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7c2:	4b2d      	ldr	r3, [pc, #180]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e0f2      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d7d2:	4b29      	ldr	r3, [pc, #164]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d7d4:	69db      	ldr	r3, [r3, #28]
 800d7d6:	f023 0203 	bic.w	r2, r3, #3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	4926      	ldr	r1, [pc, #152]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d7e4:	f7f8 f9bc 	bl	8005b60 <HAL_GetTick>
 800d7e8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d112      	bne.n	800d818 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7f2:	e00a      	b.n	800d80a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7f4:	f7f8 f9b4 	bl	8005b60 <HAL_GetTick>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d802:	4293      	cmp	r3, r2
 800d804:	d901      	bls.n	800d80a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e0d6      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d80a:	4b1b      	ldr	r3, [pc, #108]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	f003 030c 	and.w	r3, r3, #12
 800d812:	2b0c      	cmp	r3, #12
 800d814:	d1ee      	bne.n	800d7f4 <HAL_RCC_ClockConfig+0x204>
 800d816:	e044      	b.n	800d8a2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d112      	bne.n	800d846 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d820:	e00a      	b.n	800d838 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d822:	f7f8 f99d 	bl	8005b60 <HAL_GetTick>
 800d826:	4602      	mov	r2, r0
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d830:	4293      	cmp	r3, r2
 800d832:	d901      	bls.n	800d838 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e0bf      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d838:	4b0f      	ldr	r3, [pc, #60]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d83a:	69db      	ldr	r3, [r3, #28]
 800d83c:	f003 030c 	and.w	r3, r3, #12
 800d840:	2b08      	cmp	r3, #8
 800d842:	d1ee      	bne.n	800d822 <HAL_RCC_ClockConfig+0x232>
 800d844:	e02d      	b.n	800d8a2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d123      	bne.n	800d896 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d84e:	e00a      	b.n	800d866 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d850:	f7f8 f986 	bl	8005b60 <HAL_GetTick>
 800d854:	4602      	mov	r2, r0
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d85e:	4293      	cmp	r3, r2
 800d860:	d901      	bls.n	800d866 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e0a8      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d866:	4b04      	ldr	r3, [pc, #16]	@ (800d878 <HAL_RCC_ClockConfig+0x288>)
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	f003 030c 	and.w	r3, r3, #12
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1ee      	bne.n	800d850 <HAL_RCC_ClockConfig+0x260>
 800d872:	e016      	b.n	800d8a2 <HAL_RCC_ClockConfig+0x2b2>
 800d874:	40022000 	.word	0x40022000
 800d878:	46020c00 	.word	0x46020c00
 800d87c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d880:	f7f8 f96e 	bl	8005b60 <HAL_GetTick>
 800d884:	4602      	mov	r2, r0
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d88e:	4293      	cmp	r3, r2
 800d890:	d901      	bls.n	800d896 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e090      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d896:	4b4a      	ldr	r3, [pc, #296]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	f003 030c 	and.w	r3, r3, #12
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	d1ee      	bne.n	800d880 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f003 0302 	and.w	r3, r3, #2
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d010      	beq.n	800d8d0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	689a      	ldr	r2, [r3, #8]
 800d8b2:	4b43      	ldr	r3, [pc, #268]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	f003 030f 	and.w	r3, r3, #15
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d208      	bcs.n	800d8d0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d8be:	4b40      	ldr	r3, [pc, #256]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	f023 020f 	bic.w	r2, r3, #15
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	493d      	ldr	r1, [pc, #244]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d8d0:	4b3c      	ldr	r3, [pc, #240]	@ (800d9c4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 030f 	and.w	r3, r3, #15
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d210      	bcs.n	800d900 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8de:	4b39      	ldr	r3, [pc, #228]	@ (800d9c4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f023 020f 	bic.w	r2, r3, #15
 800d8e6:	4937      	ldr	r1, [pc, #220]	@ (800d9c4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8ee:	4b35      	ldr	r3, [pc, #212]	@ (800d9c4 <HAL_RCC_ClockConfig+0x3d4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 030f 	and.w	r3, r3, #15
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d001      	beq.n	800d900 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e05b      	b.n	800d9b8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f003 0304 	and.w	r3, r3, #4
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d010      	beq.n	800d92e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68da      	ldr	r2, [r3, #12]
 800d910:	4b2b      	ldr	r3, [pc, #172]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d912:	6a1b      	ldr	r3, [r3, #32]
 800d914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d918:	429a      	cmp	r2, r3
 800d91a:	d208      	bcs.n	800d92e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d91c:	4b28      	ldr	r3, [pc, #160]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d91e:	6a1b      	ldr	r3, [r3, #32]
 800d920:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	4925      	ldr	r1, [pc, #148]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d92a:	4313      	orrs	r3, r2
 800d92c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 0308 	and.w	r3, r3, #8
 800d936:	2b00      	cmp	r3, #0
 800d938:	d012      	beq.n	800d960 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	691a      	ldr	r2, [r3, #16]
 800d93e:	4b20      	ldr	r3, [pc, #128]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	091b      	lsrs	r3, r3, #4
 800d944:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d948:	429a      	cmp	r2, r3
 800d94a:	d209      	bcs.n	800d960 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d94c:	4b1c      	ldr	r3, [pc, #112]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	011b      	lsls	r3, r3, #4
 800d95a:	4919      	ldr	r1, [pc, #100]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d010      	beq.n	800d98e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	695a      	ldr	r2, [r3, #20]
 800d970:	4b13      	ldr	r3, [pc, #76]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d978:	429a      	cmp	r2, r3
 800d97a:	d208      	bcs.n	800d98e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d97c:	4b10      	ldr	r3, [pc, #64]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d980:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	695b      	ldr	r3, [r3, #20]
 800d988:	490d      	ldr	r1, [pc, #52]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d98a:	4313      	orrs	r3, r2
 800d98c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d98e:	f000 f821 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800d992:	4602      	mov	r2, r0
 800d994:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c0 <HAL_RCC_ClockConfig+0x3d0>)
 800d996:	6a1b      	ldr	r3, [r3, #32]
 800d998:	f003 030f 	and.w	r3, r3, #15
 800d99c:	490a      	ldr	r1, [pc, #40]	@ (800d9c8 <HAL_RCC_ClockConfig+0x3d8>)
 800d99e:	5ccb      	ldrb	r3, [r1, r3]
 800d9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d9a4:	4a09      	ldr	r2, [pc, #36]	@ (800d9cc <HAL_RCC_ClockConfig+0x3dc>)
 800d9a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d9a8:	4b09      	ldr	r3, [pc, #36]	@ (800d9d0 <HAL_RCC_ClockConfig+0x3e0>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f8 f84d 	bl	8005a4c <HAL_InitTick>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	73fb      	strb	r3, [r7, #15]

  return status;
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3718      	adds	r7, #24
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	46020c00 	.word	0x46020c00
 800d9c4:	40022000 	.word	0x40022000
 800d9c8:	0801894c 	.word	0x0801894c
 800d9cc:	20000190 	.word	0x20000190
 800d9d0:	200001a4 	.word	0x200001a4

0800d9d4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b08b      	sub	sp, #44	@ 0x2c
 800d9d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9e2:	4b78      	ldr	r3, [pc, #480]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	f003 030c 	and.w	r3, r3, #12
 800d9ea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9ec:	4b75      	ldr	r3, [pc, #468]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f0:	f003 0303 	and.w	r3, r3, #3
 800d9f4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d005      	beq.n	800da08 <HAL_RCC_GetSysClockFreq+0x34>
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	2b0c      	cmp	r3, #12
 800da00:	d121      	bne.n	800da46 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d11e      	bne.n	800da46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800da08:	4b6e      	ldr	r3, [pc, #440]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da10:	2b00      	cmp	r3, #0
 800da12:	d107      	bne.n	800da24 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800da14:	4b6b      	ldr	r3, [pc, #428]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da1a:	0b1b      	lsrs	r3, r3, #12
 800da1c:	f003 030f 	and.w	r3, r3, #15
 800da20:	627b      	str	r3, [r7, #36]	@ 0x24
 800da22:	e005      	b.n	800da30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800da24:	4b67      	ldr	r3, [pc, #412]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	0f1b      	lsrs	r3, r3, #28
 800da2a:	f003 030f 	and.w	r3, r3, #15
 800da2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800da30:	4a65      	ldr	r2, [pc, #404]	@ (800dbc8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800da32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da38:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d110      	bne.n	800da62 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800da40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da42:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800da44:	e00d      	b.n	800da62 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800da46:	4b5f      	ldr	r3, [pc, #380]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da48:	69db      	ldr	r3, [r3, #28]
 800da4a:	f003 030c 	and.w	r3, r3, #12
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d102      	bne.n	800da58 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800da52:	4b5e      	ldr	r3, [pc, #376]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x1f8>)
 800da54:	623b      	str	r3, [r7, #32]
 800da56:	e004      	b.n	800da62 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	2b08      	cmp	r3, #8
 800da5c:	d101      	bne.n	800da62 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800da5e:	4b5b      	ldr	r3, [pc, #364]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x1f8>)
 800da60:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b0c      	cmp	r3, #12
 800da66:	f040 80a5 	bne.w	800dbb4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800da6a:	4b56      	ldr	r3, [pc, #344]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800da74:	4b53      	ldr	r3, [pc, #332]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da78:	0a1b      	lsrs	r3, r3, #8
 800da7a:	f003 030f 	and.w	r3, r3, #15
 800da7e:	3301      	adds	r3, #1
 800da80:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800da82:	4b50      	ldr	r3, [pc, #320]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da86:	091b      	lsrs	r3, r3, #4
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800da8e:	4b4d      	ldr	r3, [pc, #308]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800da90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da92:	08db      	lsrs	r3, r3, #3
 800da94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	fb02 f303 	mul.w	r3, r2, r3
 800da9e:	ee07 3a90 	vmov	s15, r3
 800daa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d003      	beq.n	800dab8 <HAL_RCC_GetSysClockFreq+0xe4>
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	2b03      	cmp	r3, #3
 800dab4:	d022      	beq.n	800dafc <HAL_RCC_GetSysClockFreq+0x128>
 800dab6:	e043      	b.n	800db40 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	ee07 3a90 	vmov	s15, r3
 800dabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800dbd0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800dac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daca:	4b3e      	ldr	r3, [pc, #248]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dada:	ed97 6a01 	vldr	s12, [r7, #4]
 800dade:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800dbd4 <HAL_RCC_GetSysClockFreq+0x200>
 800dae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800daea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800daf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dafa:	e046      	b.n	800db8a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	ee07 3a90 	vmov	s15, r3
 800db02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db06:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800dbd0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800db0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db0e:	4b2d      	ldr	r3, [pc, #180]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800db10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db16:	ee07 3a90 	vmov	s15, r3
 800db1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db1e:	ed97 6a01 	vldr	s12, [r7, #4]
 800db22:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800dbd4 <HAL_RCC_GetSysClockFreq+0x200>
 800db26:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db32:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db3e:	e024      	b.n	800db8a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db42:	ee07 3a90 	vmov	s15, r3
 800db46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	ee07 3a90 	vmov	s15, r3
 800db50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db58:	4b1a      	ldr	r3, [pc, #104]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800db5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db60:	ee07 3a90 	vmov	s15, r3
 800db64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db68:	ed97 6a01 	vldr	s12, [r7, #4]
 800db6c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800dbd4 <HAL_RCC_GetSysClockFreq+0x200>
 800db70:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800db78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800db80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db88:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800db8a:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800db8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db8e:	0e1b      	lsrs	r3, r3, #24
 800db90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db94:	3301      	adds	r3, #1
 800db96:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	ee07 3a90 	vmov	s15, r3
 800db9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dba2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbae:	ee17 3a90 	vmov	r3, s15
 800dbb2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800dbb4:	6a3b      	ldr	r3, [r7, #32]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	372c      	adds	r7, #44	@ 0x2c
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	46020c00 	.word	0x46020c00
 800dbc8:	08018964 	.word	0x08018964
 800dbcc:	00f42400 	.word	0x00f42400
 800dbd0:	4b742400 	.word	0x4b742400
 800dbd4:	46000000 	.word	0x46000000

0800dbd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800dbdc:	f7ff fefa 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	4b07      	ldr	r3, [pc, #28]	@ (800dc00 <HAL_RCC_GetHCLKFreq+0x28>)
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	f003 030f 	and.w	r3, r3, #15
 800dbea:	4906      	ldr	r1, [pc, #24]	@ (800dc04 <HAL_RCC_GetHCLKFreq+0x2c>)
 800dbec:	5ccb      	ldrb	r3, [r1, r3]
 800dbee:	fa22 f303 	lsr.w	r3, r2, r3
 800dbf2:	4a05      	ldr	r2, [pc, #20]	@ (800dc08 <HAL_RCC_GetHCLKFreq+0x30>)
 800dbf4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800dbf6:	4b04      	ldr	r3, [pc, #16]	@ (800dc08 <HAL_RCC_GetHCLKFreq+0x30>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	46020c00 	.word	0x46020c00
 800dc04:	0801894c 	.word	0x0801894c
 800dc08:	20000190 	.word	0x20000190

0800dc0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800dc10:	f7ff ffe2 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800dc14:	4602      	mov	r2, r0
 800dc16:	4b05      	ldr	r3, [pc, #20]	@ (800dc2c <HAL_RCC_GetPCLK1Freq+0x20>)
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	091b      	lsrs	r3, r3, #4
 800dc1c:	f003 0307 	and.w	r3, r3, #7
 800dc20:	4903      	ldr	r1, [pc, #12]	@ (800dc30 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc22:	5ccb      	ldrb	r3, [r1, r3]
 800dc24:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	46020c00 	.word	0x46020c00
 800dc30:	0801895c 	.word	0x0801895c

0800dc34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800dc38:	f7ff ffce 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	f003 0307 	and.w	r3, r3, #7
 800dc48:	4903      	ldr	r1, [pc, #12]	@ (800dc58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc4a:	5ccb      	ldrb	r3, [r1, r3]
 800dc4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	46020c00 	.word	0x46020c00
 800dc58:	0801895c 	.word	0x0801895c

0800dc5c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800dc60:	f7ff ffba 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800dc64:	4602      	mov	r2, r0
 800dc66:	4b05      	ldr	r3, [pc, #20]	@ (800dc7c <HAL_RCC_GetPCLK3Freq+0x20>)
 800dc68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc6a:	091b      	lsrs	r3, r3, #4
 800dc6c:	f003 0307 	and.w	r3, r3, #7
 800dc70:	4903      	ldr	r1, [pc, #12]	@ (800dc80 <HAL_RCC_GetPCLK3Freq+0x24>)
 800dc72:	5ccb      	ldrb	r3, [r1, r3]
 800dc74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	46020c00 	.word	0x46020c00
 800dc80:	0801895c 	.word	0x0801895c

0800dc84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800dc8c:	4b3e      	ldr	r3, [pc, #248]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dc8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc92:	f003 0304 	and.w	r3, r3, #4
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d003      	beq.n	800dca2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800dc9a:	f7fe fd4f 	bl	800c73c <HAL_PWREx_GetVoltageRange>
 800dc9e:	6178      	str	r0, [r7, #20]
 800dca0:	e019      	b.n	800dcd6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800dca2:	4b39      	ldr	r3, [pc, #228]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dca8:	4a37      	ldr	r2, [pc, #220]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dcaa:	f043 0304 	orr.w	r3, r3, #4
 800dcae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800dcb2:	4b35      	ldr	r3, [pc, #212]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dcb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcb8:	f003 0304 	and.w	r3, r3, #4
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800dcc0:	f7fe fd3c 	bl	800c73c <HAL_PWREx_GetVoltageRange>
 800dcc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800dcc6:	4b30      	ldr	r3, [pc, #192]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dcc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dccc:	4a2e      	ldr	r2, [pc, #184]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800dcce:	f023 0304 	bic.w	r3, r3, #4
 800dcd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dcdc:	d003      	beq.n	800dce6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dce4:	d109      	bne.n	800dcfa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcec:	d202      	bcs.n	800dcf4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800dcee:	2301      	movs	r3, #1
 800dcf0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800dcf2:	e033      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800dcf8:	e030      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd00:	d208      	bcs.n	800dd14 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd08:	d102      	bne.n	800dd10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	613b      	str	r3, [r7, #16]
 800dd0e:	e025      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	e035      	b.n	800dd80 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd1a:	d90f      	bls.n	800dd3c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d109      	bne.n	800dd36 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd28:	d902      	bls.n	800dd30 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	613b      	str	r3, [r7, #16]
 800dd2e:	e015      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800dd30:	2301      	movs	r3, #1
 800dd32:	613b      	str	r3, [r7, #16]
 800dd34:	e012      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800dd36:	2300      	movs	r3, #0
 800dd38:	613b      	str	r3, [r7, #16]
 800dd3a:	e00f      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd42:	d109      	bne.n	800dd58 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd4a:	d102      	bne.n	800dd52 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]
 800dd50:	e004      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800dd52:	2302      	movs	r3, #2
 800dd54:	613b      	str	r3, [r7, #16]
 800dd56:	e001      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800dd58:	2301      	movs	r3, #1
 800dd5a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd8c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f023 020f 	bic.w	r2, r3, #15
 800dd64:	4909      	ldr	r1, [pc, #36]	@ (800dd8c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800dd6c:	4b07      	ldr	r3, [pc, #28]	@ (800dd8c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f003 030f 	and.w	r3, r3, #15
 800dd74:	693a      	ldr	r2, [r7, #16]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d001      	beq.n	800dd7e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e000      	b.n	800dd80 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	46020c00 	.word	0x46020c00
 800dd8c:	40022000 	.word	0x40022000

0800dd90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800dd90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd94:	b0c8      	sub	sp, #288	@ 0x120
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dda2:	2300      	movs	r3, #0
 800dda4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dda8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	f002 0401 	and.w	r4, r2, #1
 800ddb4:	2500      	movs	r5, #0
 800ddb6:	ea54 0305 	orrs.w	r3, r4, r5
 800ddba:	d00b      	beq.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ddbc:	4bd5      	ldr	r3, [pc, #852]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ddbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddc2:	f023 0103 	bic.w	r1, r3, #3
 800ddc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddcc:	4ad1      	ldr	r2, [pc, #836]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ddce:	430b      	orrs	r3, r1
 800ddd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ddd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	f002 0802 	and.w	r8, r2, #2
 800dde0:	f04f 0900 	mov.w	r9, #0
 800dde4:	ea58 0309 	orrs.w	r3, r8, r9
 800dde8:	d00b      	beq.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800ddea:	4bca      	ldr	r3, [pc, #808]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ddec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddf0:	f023 010c 	bic.w	r1, r3, #12
 800ddf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddfa:	4ac6      	ldr	r2, [pc, #792]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ddfc:	430b      	orrs	r3, r1
 800ddfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800de02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	f002 0a04 	and.w	sl, r2, #4
 800de0e:	f04f 0b00 	mov.w	fp, #0
 800de12:	ea5a 030b 	orrs.w	r3, sl, fp
 800de16:	d00b      	beq.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800de18:	4bbe      	ldr	r3, [pc, #760]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800de1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de1e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800de22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de28:	4aba      	ldr	r2, [pc, #744]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800de2a:	430b      	orrs	r3, r1
 800de2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800de30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f002 0308 	and.w	r3, r2, #8
 800de3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de40:	2300      	movs	r3, #0
 800de42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800de46:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800de4a:	460b      	mov	r3, r1
 800de4c:	4313      	orrs	r3, r2
 800de4e:	d00b      	beq.n	800de68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800de50:	4bb0      	ldr	r3, [pc, #704]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800de52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800de5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de60:	4aac      	ldr	r2, [pc, #688]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800de62:	430b      	orrs	r3, r1
 800de64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800de68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	f002 0310 	and.w	r3, r2, #16
 800de74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800de78:	2300      	movs	r3, #0
 800de7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800de7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800de82:	460b      	mov	r3, r1
 800de84:	4313      	orrs	r3, r2
 800de86:	d00b      	beq.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800de88:	4ba2      	ldr	r3, [pc, #648]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800de8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800de92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de98:	4a9e      	ldr	r2, [pc, #632]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800de9a:	430b      	orrs	r3, r1
 800de9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800deac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800deb0:	2300      	movs	r3, #0
 800deb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800deb6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800deba:	460b      	mov	r3, r1
 800debc:	4313      	orrs	r3, r2
 800debe:	d00b      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800dec0:	4b94      	ldr	r3, [pc, #592]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dec6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800deca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ded0:	4a90      	ldr	r2, [pc, #576]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ded2:	430b      	orrs	r3, r1
 800ded4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ded8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f002 0320 	and.w	r3, r2, #32
 800dee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dee8:	2300      	movs	r3, #0
 800deea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800deee:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800def2:	460b      	mov	r3, r1
 800def4:	4313      	orrs	r3, r2
 800def6:	d00b      	beq.n	800df10 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800def8:	4b86      	ldr	r3, [pc, #536]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800defa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800defe:	f023 0107 	bic.w	r1, r3, #7
 800df02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df08:	4a82      	ldr	r2, [pc, #520]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800df0a:	430b      	orrs	r3, r1
 800df0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800df10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df18:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800df1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800df20:	2300      	movs	r3, #0
 800df22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800df26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4313      	orrs	r3, r2
 800df2e:	d00b      	beq.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800df30:	4b78      	ldr	r3, [pc, #480]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800df32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df36:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800df3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df40:	4a74      	ldr	r2, [pc, #464]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800df42:	430b      	orrs	r3, r1
 800df44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800df48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800df54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df58:	2300      	movs	r3, #0
 800df5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800df62:	460b      	mov	r3, r1
 800df64:	4313      	orrs	r3, r2
 800df66:	d00b      	beq.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800df68:	4b6a      	ldr	r3, [pc, #424]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800df6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df78:	4a66      	ldr	r2, [pc, #408]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800df7a:	430b      	orrs	r3, r1
 800df7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800df80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800df8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800df90:	2300      	movs	r3, #0
 800df92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4313      	orrs	r3, r2
 800df9e:	d00b      	beq.n	800dfb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800dfa0:	4b5c      	ldr	r3, [pc, #368]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dfa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dfa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800dfaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dfae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfb0:	4a58      	ldr	r2, [pc, #352]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dfb2:	430b      	orrs	r3, r1
 800dfb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dfb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800dfc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dfce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	d00b      	beq.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800dfd8:	4b4e      	ldr	r3, [pc, #312]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dfda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dfde:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800dfe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dfe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dfe8:	4a4a      	ldr	r2, [pc, #296]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dfea:	430b      	orrs	r3, r1
 800dfec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800dff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800dffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e000:	2300      	movs	r3, #0
 800e002:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e006:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e00a:	460b      	mov	r3, r1
 800e00c:	4313      	orrs	r3, r2
 800e00e:	d00b      	beq.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800e010:	4b40      	ldr	r3, [pc, #256]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e016:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800e01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e01e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e020:	4a3c      	ldr	r2, [pc, #240]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e022:	430b      	orrs	r3, r1
 800e024:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800e028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e038:	2300      	movs	r3, #0
 800e03a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e03e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e042:	460b      	mov	r3, r1
 800e044:	4313      	orrs	r3, r2
 800e046:	d00c      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800e048:	4b32      	ldr	r3, [pc, #200]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e04a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e04e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800e052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e05a:	4a2e      	ldr	r2, [pc, #184]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e05c:	430b      	orrs	r3, r1
 800e05e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800e06e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e072:	2300      	movs	r3, #0
 800e074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e078:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4313      	orrs	r3, r2
 800e080:	d00c      	beq.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800e082:	4b24      	ldr	r3, [pc, #144]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e088:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800e08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e094:	4a1f      	ldr	r2, [pc, #124]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e096:	430b      	orrs	r3, r1
 800e098:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e0a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e0b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	d00c      	beq.n	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800e0bc:	4b15      	ldr	r3, [pc, #84]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e0be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e0c2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800e0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0ce:	4a11      	ldr	r2, [pc, #68]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e0d0:	430b      	orrs	r3, r1
 800e0d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800e0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e0ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	d010      	beq.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800e0f6:	4b07      	ldr	r3, [pc, #28]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e0f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e0fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e108:	4a02      	ldr	r2, [pc, #8]	@ (800e114 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e10a:	430b      	orrs	r3, r1
 800e10c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e110:	e002      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800e112:	bf00      	nop
 800e114:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e128:	2300      	movs	r3, #0
 800e12a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e12e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e132:	460b      	mov	r3, r1
 800e134:	4313      	orrs	r3, r2
 800e136:	d04c      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800e138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e13c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e140:	2b80      	cmp	r3, #128	@ 0x80
 800e142:	d02d      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e144:	2b80      	cmp	r3, #128	@ 0x80
 800e146:	d827      	bhi.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e148:	2b60      	cmp	r3, #96	@ 0x60
 800e14a:	d02b      	beq.n	800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e14c:	2b60      	cmp	r3, #96	@ 0x60
 800e14e:	d823      	bhi.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e150:	2b40      	cmp	r3, #64	@ 0x40
 800e152:	d006      	beq.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800e154:	2b40      	cmp	r3, #64	@ 0x40
 800e156:	d81f      	bhi.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d009      	beq.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800e15c:	2b20      	cmp	r3, #32
 800e15e:	d011      	beq.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e160:	e01a      	b.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e162:	4bc0      	ldr	r3, [pc, #768]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e166:	4abf      	ldr	r2, [pc, #764]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e16c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e16e:	e01a      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e174:	3308      	adds	r3, #8
 800e176:	4618      	mov	r0, r3
 800e178:	f002 fcd6 	bl	8010b28 <RCCEx_PLL2_Config>
 800e17c:	4603      	mov	r3, r0
 800e17e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e182:	e010      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e188:	332c      	adds	r3, #44	@ 0x2c
 800e18a:	4618      	mov	r0, r3
 800e18c:	f002 fd64 	bl	8010c58 <RCCEx_PLL3_Config>
 800e190:	4603      	mov	r3, r0
 800e192:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e196:	e006      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e19e:	e002      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800e1a0:	bf00      	nop
 800e1a2:	e000      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800e1a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d10d      	bne.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800e1ae:	4bad      	ldr	r3, [pc, #692]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e1b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e1b4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800e1b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e1c0:	4aa8      	ldr	r2, [pc, #672]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e1c2:	430b      	orrs	r3, r1
 800e1c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e1c8:	e003      	b.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ca:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e1ce:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1da:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e1de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e1e8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	d053      	beq.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800e1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e1fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1fe:	d033      	beq.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800e200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e204:	d82c      	bhi.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e20a:	d02f      	beq.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800e20c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e210:	d826      	bhi.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e216:	d008      	beq.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800e218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e21c:	d820      	bhi.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00a      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e226:	d011      	beq.n	800e24c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e228:	e01a      	b.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e22a:	4b8e      	ldr	r3, [pc, #568]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e22e:	4a8d      	ldr	r2, [pc, #564]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e234:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e236:	e01a      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e23c:	3308      	adds	r3, #8
 800e23e:	4618      	mov	r0, r3
 800e240:	f002 fc72 	bl	8010b28 <RCCEx_PLL2_Config>
 800e244:	4603      	mov	r3, r0
 800e246:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e24a:	e010      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e250:	332c      	adds	r3, #44	@ 0x2c
 800e252:	4618      	mov	r0, r3
 800e254:	f002 fd00 	bl	8010c58 <RCCEx_PLL3_Config>
 800e258:	4603      	mov	r3, r0
 800e25a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e25e:	e006      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e266:	e002      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800e268:	bf00      	nop
 800e26a:	e000      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800e26c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e26e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10d      	bne.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800e276:	4b7b      	ldr	r3, [pc, #492]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e278:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e27c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800e280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e288:	4a76      	ldr	r2, [pc, #472]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e28a:	430b      	orrs	r3, r1
 800e28c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e290:	e003      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e292:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e296:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800e29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e2a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e2b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	d046      	beq.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800e2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e2be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e2c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e2c6:	d028      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e2c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e2cc:	d821      	bhi.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e2ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e2d2:	d022      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e2d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e2d8:	d81b      	bhi.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e2da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e2de:	d01c      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e2e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e2e4:	d815      	bhi.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e2e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2ea:	d008      	beq.n	800e2fe <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800e2ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2f0:	d80f      	bhi.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d011      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2fa:	d00e      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e2fc:	e009      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e302:	3308      	adds	r3, #8
 800e304:	4618      	mov	r0, r3
 800e306:	f002 fc0f 	bl	8010b28 <RCCEx_PLL2_Config>
 800e30a:	4603      	mov	r3, r0
 800e30c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e310:	e004      	b.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e318:	e000      	b.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800e31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e31c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10d      	bne.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800e324:	4b4f      	ldr	r3, [pc, #316]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e32a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e336:	4a4b      	ldr	r2, [pc, #300]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e338:	430b      	orrs	r3, r1
 800e33a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e33e:	e003      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e340:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e344:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800e348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e358:	2300      	movs	r3, #0
 800e35a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e35e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e362:	460b      	mov	r3, r1
 800e364:	4313      	orrs	r3, r2
 800e366:	d03f      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800e368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e370:	2b04      	cmp	r3, #4
 800e372:	d81e      	bhi.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800e374:	a201      	add	r2, pc, #4	@ (adr r2, 800e37c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800e376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37a:	bf00      	nop
 800e37c:	0800e3bb 	.word	0x0800e3bb
 800e380:	0800e391 	.word	0x0800e391
 800e384:	0800e39f 	.word	0x0800e39f
 800e388:	0800e3bb 	.word	0x0800e3bb
 800e38c:	0800e3bb 	.word	0x0800e3bb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e390:	4b34      	ldr	r3, [pc, #208]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e394:	4a33      	ldr	r2, [pc, #204]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e39a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e39c:	e00e      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e39e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3a2:	332c      	adds	r3, #44	@ 0x2c
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f002 fc57 	bl	8010c58 <RCCEx_PLL3_Config>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e3b0:	e004      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e3b8:	e000      	b.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800e3ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e3bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10d      	bne.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800e3c4:	4b27      	ldr	r3, [pc, #156]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e3c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e3ca:	f023 0107 	bic.w	r1, r3, #7
 800e3ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3d6:	4a23      	ldr	r2, [pc, #140]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e3d8:	430b      	orrs	r3, r1
 800e3da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e3de:	e003      	b.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e3e4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800e3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e3f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e3fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e3fe:	460b      	mov	r3, r1
 800e400:	4313      	orrs	r3, r2
 800e402:	d04c      	beq.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800e404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e40c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e410:	d02a      	beq.n	800e468 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800e412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e416:	d821      	bhi.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e41c:	d026      	beq.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800e41e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e422:	d81b      	bhi.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e428:	d00e      	beq.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800e42a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e42e:	d815      	bhi.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e430:	2b00      	cmp	r3, #0
 800e432:	d01d      	beq.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800e434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e438:	d110      	bne.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e43a:	4b0a      	ldr	r3, [pc, #40]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e43e:	4a09      	ldr	r2, [pc, #36]	@ (800e464 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e444:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e446:	e014      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e44c:	332c      	adds	r3, #44	@ 0x2c
 800e44e:	4618      	mov	r0, r3
 800e450:	f002 fc02 	bl	8010c58 <RCCEx_PLL3_Config>
 800e454:	4603      	mov	r3, r0
 800e456:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e45a:	e00a      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e462:	e006      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800e464:	46020c00 	.word	0x46020c00
        break;
 800e468:	bf00      	nop
 800e46a:	e002      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800e46c:	bf00      	nop
 800e46e:	e000      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800e470:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e472:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e476:	2b00      	cmp	r3, #0
 800e478:	d10d      	bne.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e47a:	4baf      	ldr	r3, [pc, #700]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e47c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e480:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e488:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e48c:	4aaa      	ldr	r2, [pc, #680]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e48e:	430b      	orrs	r3, r1
 800e490:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800e494:	e003      	b.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e496:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e49a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e4aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800e4b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	f000 80b5 	beq.w	800e626 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e4c2:	4b9d      	ldr	r3, [pc, #628]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4c8:	f003 0304 	and.w	r3, r3, #4
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d113      	bne.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e4d0:	4b99      	ldr	r3, [pc, #612]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e4d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4d6:	4a98      	ldr	r2, [pc, #608]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e4d8:	f043 0304 	orr.w	r3, r3, #4
 800e4dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800e4e0:	4b95      	ldr	r3, [pc, #596]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e4e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800e4ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e4f8:	4b90      	ldr	r3, [pc, #576]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4fc:	4a8f      	ldr	r2, [pc, #572]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e4fe:	f043 0301 	orr.w	r3, r3, #1
 800e502:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e504:	f7f7 fb2c 	bl	8005b60 <HAL_GetTick>
 800e508:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e50c:	e00b      	b.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e50e:	f7f7 fb27 	bl	8005b60 <HAL_GetTick>
 800e512:	4602      	mov	r2, r0
 800e514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d903      	bls.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800e51e:	2303      	movs	r3, #3
 800e520:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e524:	e005      	b.n	800e532 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e526:	4b85      	ldr	r3, [pc, #532]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d0ed      	beq.n	800e50e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800e532:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e536:	2b00      	cmp	r3, #0
 800e538:	d165      	bne.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e53a:	4b7f      	ldr	r3, [pc, #508]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e53c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e544:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d023      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800e550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e554:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d01b      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e560:	4b75      	ldr	r3, [pc, #468]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e56a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e56e:	4b72      	ldr	r3, [pc, #456]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e574:	4a70      	ldr	r2, [pc, #448]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e57a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e57e:	4b6e      	ldr	r3, [pc, #440]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e584:	4a6c      	ldr	r2, [pc, #432]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e58a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e58e:	4a6a      	ldr	r2, [pc, #424]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d019      	beq.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5a4:	f7f7 fadc 	bl	8005b60 <HAL_GetTick>
 800e5a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e5ac:	e00d      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5ae:	f7f7 fad7 	bl	8005b60 <HAL_GetTick>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5b8:	1ad2      	subs	r2, r2, r3
 800e5ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d903      	bls.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800e5c8:	e006      	b.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e5ca:	4b5b      	ldr	r3, [pc, #364]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e5d0:	f003 0302 	and.w	r3, r3, #2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0ea      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800e5d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10d      	bne.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800e5e0:	4b55      	ldr	r3, [pc, #340]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e5e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e5e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e5ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800e5f2:	4a51      	ldr	r2, [pc, #324]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e5f4:	430b      	orrs	r3, r1
 800e5f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e5fa:	e008      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e5fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e600:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800e604:	e003      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e606:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e60a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e60e:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800e612:	2b01      	cmp	r3, #1
 800e614:	d107      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e616:	4b48      	ldr	r3, [pc, #288]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e61c:	4a46      	ldr	r2, [pc, #280]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e61e:	f023 0304 	bic.w	r3, r3, #4
 800e622:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800e626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e632:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e634:	2300      	movs	r3, #0
 800e636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e638:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e63c:	460b      	mov	r3, r1
 800e63e:	4313      	orrs	r3, r2
 800e640:	d042      	beq.n	800e6c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800e642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e64a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e64e:	d022      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800e650:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e654:	d81b      	bhi.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800e656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e65a:	d011      	beq.n	800e680 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800e65c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e660:	d815      	bhi.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800e662:	2b00      	cmp	r3, #0
 800e664:	d019      	beq.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800e666:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e66a:	d110      	bne.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e670:	3308      	adds	r3, #8
 800e672:	4618      	mov	r0, r3
 800e674:	f002 fa58 	bl	8010b28 <RCCEx_PLL2_Config>
 800e678:	4603      	mov	r3, r0
 800e67a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e67e:	e00d      	b.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e680:	4b2d      	ldr	r3, [pc, #180]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e684:	4a2c      	ldr	r2, [pc, #176]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e68a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800e68c:	e006      	b.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e694:	e002      	b.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800e696:	bf00      	nop
 800e698:	e000      	b.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800e69a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e69c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10d      	bne.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800e6a4:	4b24      	ldr	r3, [pc, #144]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e6a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e6aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800e6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e6b6:	4a20      	ldr	r2, [pc, #128]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e6b8:	430b      	orrs	r3, r1
 800e6ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e6be:	e003      	b.n	800e6c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e6c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e6c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e6d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e6da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e6de:	460b      	mov	r3, r1
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	d031      	beq.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e6ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6f0:	d00b      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800e6f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6f6:	d804      	bhi.n	800e702 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d008      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800e6fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e700:	d007      	beq.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e708:	e004      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e70a:	bf00      	nop
 800e70c:	e002      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e70e:	bf00      	nop
 800e710:	e000      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e712:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e714:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d111      	bne.n	800e740 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e71c:	4b06      	ldr	r3, [pc, #24]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e71e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e72a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e72e:	4a02      	ldr	r2, [pc, #8]	@ (800e738 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e730:	430b      	orrs	r3, r1
 800e732:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e736:	e007      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800e738:	46020c00 	.word	0x46020c00
 800e73c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e740:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e744:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e754:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e756:	2300      	movs	r3, #0
 800e758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e75a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e75e:	460b      	mov	r3, r1
 800e760:	4313      	orrs	r3, r2
 800e762:	d00c      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e764:	4bb2      	ldr	r3, [pc, #712]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e76a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800e76e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e772:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e776:	4aae      	ldr	r2, [pc, #696]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e778:	430b      	orrs	r3, r1
 800e77a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e77e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e78a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e78c:	2300      	movs	r3, #0
 800e78e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e790:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e794:	460b      	mov	r3, r1
 800e796:	4313      	orrs	r3, r2
 800e798:	d019      	beq.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e79e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e7a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e7a6:	d105      	bne.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e7a8:	4ba1      	ldr	r3, [pc, #644]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7ac:	4aa0      	ldr	r2, [pc, #640]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7b2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e7b4:	4b9e      	ldr	r3, [pc, #632]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e7ba:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e7be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e7c6:	4a9a      	ldr	r2, [pc, #616]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7c8:	430b      	orrs	r3, r1
 800e7ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e7da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e7dc:	2300      	movs	r3, #0
 800e7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	d00c      	beq.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e7ea:	4b91      	ldr	r3, [pc, #580]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e7f0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e7fc:	4a8c      	ldr	r2, [pc, #560]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7fe:	430b      	orrs	r3, r1
 800e800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e810:	643b      	str	r3, [r7, #64]	@ 0x40
 800e812:	2300      	movs	r3, #0
 800e814:	647b      	str	r3, [r7, #68]	@ 0x44
 800e816:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e81a:	460b      	mov	r3, r1
 800e81c:	4313      	orrs	r3, r2
 800e81e:	d00c      	beq.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e820:	4b83      	ldr	r3, [pc, #524]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e826:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e82e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e832:	4a7f      	ldr	r2, [pc, #508]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e834:	430b      	orrs	r3, r1
 800e836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e842:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e846:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e848:	2300      	movs	r3, #0
 800e84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e84c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e850:	460b      	mov	r3, r1
 800e852:	4313      	orrs	r3, r2
 800e854:	d00c      	beq.n	800e870 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e856:	4b76      	ldr	r3, [pc, #472]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e85c:	f023 0118 	bic.w	r1, r3, #24
 800e860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e864:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e868:	4a71      	ldr	r2, [pc, #452]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e86a:	430b      	orrs	r3, r1
 800e86c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e878:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800e87c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e87e:	2300      	movs	r3, #0
 800e880:	637b      	str	r3, [r7, #52]	@ 0x34
 800e882:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e886:	460b      	mov	r3, r1
 800e888:	4313      	orrs	r3, r2
 800e88a:	d032      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e890:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e898:	d105      	bne.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e89a:	4b65      	ldr	r3, [pc, #404]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e89e:	4a64      	ldr	r2, [pc, #400]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e8a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8a4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e8ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e8b2:	d108      	bne.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f002 f934 	bl	8010b28 <RCCEx_PLL2_Config>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800e8c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10d      	bne.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e8ce:	4b58      	ldr	r3, [pc, #352]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e8d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e8d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e8d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e8e0:	4a53      	ldr	r2, [pc, #332]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e8e2:	430b      	orrs	r3, r1
 800e8e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800e8e8:	e003      	b.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8ea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e8ee:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800e8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e904:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e908:	460b      	mov	r3, r1
 800e90a:	4313      	orrs	r3, r2
 800e90c:	d04a      	beq.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800e90e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e912:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e916:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e91a:	d01e      	beq.n	800e95a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800e91c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e920:	d825      	bhi.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e926:	d00e      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800e928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e92c:	d81f      	bhi.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d021      	beq.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800e932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e936:	d11a      	bne.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e938:	4b3d      	ldr	r3, [pc, #244]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e93c:	4a3c      	ldr	r2, [pc, #240]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e93e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e942:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e944:	e018      	b.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e94a:	3308      	adds	r3, #8
 800e94c:	4618      	mov	r0, r3
 800e94e:	f002 f8eb 	bl	8010b28 <RCCEx_PLL2_Config>
 800e952:	4603      	mov	r3, r0
 800e954:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e958:	e00e      	b.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e95e:	332c      	adds	r3, #44	@ 0x2c
 800e960:	4618      	mov	r0, r3
 800e962:	f002 f979 	bl	8010c58 <RCCEx_PLL3_Config>
 800e966:	4603      	mov	r3, r0
 800e968:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e96c:	e004      	b.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e974:	e000      	b.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800e976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e978:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10d      	bne.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800e980:	4b2b      	ldr	r3, [pc, #172]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e98a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e98e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e992:	4927      	ldr	r1, [pc, #156]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e994:	4313      	orrs	r3, r2
 800e996:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e99a:	e003      	b.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e99c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e9a0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ac:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800e9b0:	623b      	str	r3, [r7, #32]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	d03d      	beq.n	800ea3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9cc:	d00e      	beq.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800e9ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9d2:	d815      	bhi.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d017      	beq.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e9d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e9dc:	d110      	bne.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9de:	4b14      	ldr	r3, [pc, #80]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9e2:	4a13      	ldr	r2, [pc, #76]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e9e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e9e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e9ea:	e00e      	b.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e9f0:	3308      	adds	r3, #8
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f002 f898 	bl	8010b28 <RCCEx_PLL2_Config>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e9fe:	e004      	b.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ea06:	e000      	b.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ea08:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ea0a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d110      	bne.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800ea12:	4b07      	ldr	r3, [pc, #28]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ea14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ea1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea24:	4902      	ldr	r1, [pc, #8]	@ (800ea30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ea26:	4313      	orrs	r3, r2
 800ea28:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800ea2c:	e006      	b.n	800ea3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800ea2e:	bf00      	nop
 800ea30:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ea38:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800ea3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ea48:	61bb      	str	r3, [r7, #24]
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	61fb      	str	r3, [r7, #28]
 800ea4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ea52:	460b      	mov	r3, r1
 800ea54:	4313      	orrs	r3, r2
 800ea56:	d00c      	beq.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800ea58:	4b68      	ldr	r3, [pc, #416]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ea5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ea5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800ea62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ea6a:	4964      	ldr	r1, [pc, #400]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ea72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	6139      	str	r1, [r7, #16]
 800ea7e:	f003 0302 	and.w	r3, r3, #2
 800ea82:	617b      	str	r3, [r7, #20]
 800ea84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	d036      	beq.n	800eafc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800ea8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00c      	beq.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800ea9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ea9e:	d113      	bne.n	800eac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800eaa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eaa4:	3308      	adds	r3, #8
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f002 f83e 	bl	8010b28 <RCCEx_PLL2_Config>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800eab2:	e00d      	b.n	800ead0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800eab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eab8:	332c      	adds	r3, #44	@ 0x2c
 800eaba:	4618      	mov	r0, r3
 800eabc:	f002 f8cc 	bl	8010c58 <RCCEx_PLL3_Config>
 800eac0:	4603      	mov	r3, r0
 800eac2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800eac6:	e003      	b.n	800ead0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800eace:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ead0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10d      	bne.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800ead8:	4b48      	ldr	r3, [pc, #288]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800eada:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eade:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800eae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800eaea:	4944      	ldr	r1, [pc, #272]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800eaec:	4313      	orrs	r3, r2
 800eaee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800eaf2:	e003      	b.n	800eafc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaf4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800eaf8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800eafc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb04:	2100      	movs	r1, #0
 800eb06:	60b9      	str	r1, [r7, #8]
 800eb08:	f003 0304 	and.w	r3, r3, #4
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eb12:	460b      	mov	r3, r1
 800eb14:	4313      	orrs	r3, r2
 800eb16:	d024      	beq.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800eb18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d108      	bne.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800eb24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb28:	332c      	adds	r3, #44	@ 0x2c
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f002 f894 	bl	8010c58 <RCCEx_PLL3_Config>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800eb36:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d10d      	bne.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800eb3e:	4b2f      	ldr	r3, [pc, #188]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800eb40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eb44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800eb48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800eb50:	492a      	ldr	r1, [pc, #168]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800eb52:	4313      	orrs	r3, r2
 800eb54:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800eb58:	e003      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb5a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800eb5e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800eb62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	6039      	str	r1, [r7, #0]
 800eb6e:	f003 0308 	and.w	r3, r3, #8
 800eb72:	607b      	str	r3, [r7, #4]
 800eb74:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	d036      	beq.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800eb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800eb86:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800eb8a:	d00d      	beq.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800eb8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800eb90:	d811      	bhi.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800eb92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb96:	d012      	beq.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800eb98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb9c:	d80b      	bhi.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00d      	beq.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800eba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eba6:	d106      	bne.n	800ebb6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800eba8:	4b14      	ldr	r3, [pc, #80]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ebaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebac:	4a13      	ldr	r2, [pc, #76]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ebae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ebb2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800ebb4:	e004      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ebbc:	e000      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800ebbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebc0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10d      	bne.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800ebc8:	4b0c      	ldr	r3, [pc, #48]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ebca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ebce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ebd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ebd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ebda:	4908      	ldr	r1, [pc, #32]	@ (800ebfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800ebe2:	e003      	b.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebe4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ebe8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800ebec:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ebfc:	46020c00 	.word	0x46020c00

0800ec00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b089      	sub	sp, #36	@ 0x24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800ec08:	4ba6      	ldr	r3, [pc, #664]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec10:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ec12:	4ba4      	ldr	r3, [pc, #656]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec16:	f003 0303 	and.w	r3, r3, #3
 800ec1a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ec1c:	4ba1      	ldr	r3, [pc, #644]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec20:	0a1b      	lsrs	r3, r3, #8
 800ec22:	f003 030f 	and.w	r3, r3, #15
 800ec26:	3301      	adds	r3, #1
 800ec28:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ec2a:	4b9e      	ldr	r3, [pc, #632]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec2e:	091b      	lsrs	r3, r3, #4
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ec36:	4b9b      	ldr	r3, [pc, #620]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec3a:	08db      	lsrs	r3, r3, #3
 800ec3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	fb02 f303 	mul.w	r3, r2, r3
 800ec46:	ee07 3a90 	vmov	s15, r3
 800ec4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec4e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d062      	beq.n	800ed1e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	2b03      	cmp	r3, #3
 800ec5c:	f200 8081 	bhi.w	800ed62 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d024      	beq.n	800ecb0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d17a      	bne.n	800ed62 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	ee07 3a90 	vmov	s15, r3
 800ec72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec76:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800eea8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800ec7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec7e:	4b89      	ldr	r3, [pc, #548]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ec80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec86:	ee07 3a90 	vmov	s15, r3
 800ec8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec92:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800eeac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ec96:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ec9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800eca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ecae:	e08f      	b.n	800edd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ecb0:	4b7c      	ldr	r3, [pc, #496]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800ecbc:	4b79      	ldr	r3, [pc, #484]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	0f1b      	lsrs	r3, r3, #28
 800ecc2:	f003 030f 	and.w	r3, r3, #15
 800ecc6:	e006      	b.n	800ecd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800ecc8:	4b76      	ldr	r3, [pc, #472]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ecca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ecce:	041b      	lsls	r3, r3, #16
 800ecd0:	0f1b      	lsrs	r3, r3, #28
 800ecd2:	f003 030f 	and.w	r3, r3, #15
 800ecd6:	4a76      	ldr	r2, [pc, #472]	@ (800eeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecdc:	ee07 3a90 	vmov	s15, r3
 800ece0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	ee07 3a90 	vmov	s15, r3
 800ecea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	ee07 3a90 	vmov	s15, r3
 800ecf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecfc:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed00:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800eeac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ed04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ed14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ed1c:	e058      	b.n	800edd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	ee07 3a90 	vmov	s15, r3
 800ed24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed28:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800eea8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800ed2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed30:	4b5c      	ldr	r3, [pc, #368]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed38:	ee07 3a90 	vmov	s15, r3
 800ed3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed40:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed44:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800eeac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ed48:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ed4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ed58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ed60:	e036      	b.n	800edd0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ed62:	4b50      	ldr	r3, [pc, #320]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d005      	beq.n	800ed7a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800ed6e:	4b4d      	ldr	r3, [pc, #308]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	0f1b      	lsrs	r3, r3, #28
 800ed74:	f003 030f 	and.w	r3, r3, #15
 800ed78:	e006      	b.n	800ed88 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800ed7a:	4b4a      	ldr	r3, [pc, #296]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ed7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ed80:	041b      	lsls	r3, r3, #16
 800ed82:	0f1b      	lsrs	r3, r3, #28
 800ed84:	f003 030f 	and.w	r3, r3, #15
 800ed88:	4a49      	ldr	r2, [pc, #292]	@ (800eeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800ed8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed8e:	ee07 3a90 	vmov	s15, r3
 800ed92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	ee07 3a90 	vmov	s15, r3
 800ed9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eda0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	ee07 3a90 	vmov	s15, r3
 800edaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edae:	ed97 6a02 	vldr	s12, [r7, #8]
 800edb2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800eeac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800edb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800edc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800edc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800edce:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800edd0:	4b34      	ldr	r3, [pc, #208]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800edd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d017      	beq.n	800ee0c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eddc:	4b31      	ldr	r3, [pc, #196]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800edde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ede0:	0a5b      	lsrs	r3, r3, #9
 800ede2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ede6:	ee07 3a90 	vmov	s15, r3
 800edea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800edee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800edf2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800edf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee02:	ee17 2a90 	vmov	r2, s15
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	e002      	b.n	800ee12 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800ee12:	4b24      	ldr	r3, [pc, #144]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ee14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d017      	beq.n	800ee4e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ee1e:	4b21      	ldr	r3, [pc, #132]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ee20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee22:	0c1b      	lsrs	r3, r3, #16
 800ee24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee28:	ee07 3a90 	vmov	s15, r3
 800ee2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800ee30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee34:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ee38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee44:	ee17 2a90 	vmov	r2, s15
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	605a      	str	r2, [r3, #4]
 800ee4c:	e002      	b.n	800ee54 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ee54:	4b13      	ldr	r3, [pc, #76]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ee56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d017      	beq.n	800ee90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ee60:	4b10      	ldr	r3, [pc, #64]	@ (800eea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ee62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee64:	0e1b      	lsrs	r3, r3, #24
 800ee66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee6a:	ee07 3a90 	vmov	s15, r3
 800ee6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ee72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee76:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ee7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee86:	ee17 2a90 	vmov	r2, s15
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ee8e:	e002      	b.n	800ee96 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	609a      	str	r2, [r3, #8]
}
 800ee96:	bf00      	nop
 800ee98:	3724      	adds	r7, #36	@ 0x24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	46020c00 	.word	0x46020c00
 800eea8:	4b742400 	.word	0x4b742400
 800eeac:	46000000 	.word	0x46000000
 800eeb0:	08018964 	.word	0x08018964

0800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b089      	sub	sp, #36	@ 0x24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800eebc:	4ba6      	ldr	r3, [pc, #664]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800eec6:	4ba4      	ldr	r3, [pc, #656]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeca:	f003 0303 	and.w	r3, r3, #3
 800eece:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800eed0:	4ba1      	ldr	r3, [pc, #644]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed4:	0a1b      	lsrs	r3, r3, #8
 800eed6:	f003 030f 	and.w	r3, r3, #15
 800eeda:	3301      	adds	r3, #1
 800eedc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800eede:	4b9e      	ldr	r3, [pc, #632]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee2:	091b      	lsrs	r3, r3, #4
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800eeea:	4b9b      	ldr	r3, [pc, #620]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800eeec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeee:	08db      	lsrs	r3, r3, #3
 800eef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	fb02 f303 	mul.w	r3, r2, r3
 800eefa:	ee07 3a90 	vmov	s15, r3
 800eefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2b03      	cmp	r3, #3
 800ef0a:	d062      	beq.n	800efd2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	f200 8081 	bhi.w	800f016 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d024      	beq.n	800ef64 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d17a      	bne.n	800f016 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	ee07 3a90 	vmov	s15, r3
 800ef26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800f15c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ef2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef32:	4b89      	ldr	r3, [pc, #548]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef3a:	ee07 3a90 	vmov	s15, r3
 800ef3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef42:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800f160 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ef4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ef4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ef5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ef62:	e08f      	b.n	800f084 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ef64:	4b7c      	ldr	r3, [pc, #496]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d005      	beq.n	800ef7c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ef70:	4b79      	ldr	r3, [pc, #484]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	0f1b      	lsrs	r3, r3, #28
 800ef76:	f003 030f 	and.w	r3, r3, #15
 800ef7a:	e006      	b.n	800ef8a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ef7c:	4b76      	ldr	r3, [pc, #472]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ef7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ef82:	041b      	lsls	r3, r3, #16
 800ef84:	0f1b      	lsrs	r3, r3, #28
 800ef86:	f003 030f 	and.w	r3, r3, #15
 800ef8a:	4a76      	ldr	r2, [pc, #472]	@ (800f164 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ef8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef90:	ee07 3a90 	vmov	s15, r3
 800ef94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	ee07 3a90 	vmov	s15, r3
 800ef9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	ee07 3a90 	vmov	s15, r3
 800efac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efb0:	ed97 6a02 	vldr	s12, [r7, #8]
 800efb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800f160 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800efb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800efc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800efd0:	e058      	b.n	800f084 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	ee07 3a90 	vmov	s15, r3
 800efd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efdc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f15c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800efe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efe4:	4b5c      	ldr	r3, [pc, #368]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800efe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efec:	ee07 3a90 	vmov	s15, r3
 800eff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800eff4:	ed97 6a02 	vldr	s12, [r7, #8]
 800eff8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f160 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800effc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f000:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800f004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f008:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f010:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f014:	e036      	b.n	800f084 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800f016:	4b50      	ldr	r3, [pc, #320]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d005      	beq.n	800f02e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800f022:	4b4d      	ldr	r3, [pc, #308]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	0f1b      	lsrs	r3, r3, #28
 800f028:	f003 030f 	and.w	r3, r3, #15
 800f02c:	e006      	b.n	800f03c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800f02e:	4b4a      	ldr	r3, [pc, #296]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f034:	041b      	lsls	r3, r3, #16
 800f036:	0f1b      	lsrs	r3, r3, #28
 800f038:	f003 030f 	and.w	r3, r3, #15
 800f03c:	4a49      	ldr	r2, [pc, #292]	@ (800f164 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800f03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f042:	ee07 3a90 	vmov	s15, r3
 800f046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	ee07 3a90 	vmov	s15, r3
 800f050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	ee07 3a90 	vmov	s15, r3
 800f05e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f062:	ed97 6a02 	vldr	s12, [r7, #8]
 800f066:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800f160 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800f06a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f06e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f076:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800f07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f07e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f082:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800f084:	4b34      	ldr	r3, [pc, #208]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d017      	beq.n	800f0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f090:	4b31      	ldr	r3, [pc, #196]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f094:	0a5b      	lsrs	r3, r3, #9
 800f096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f09a:	ee07 3a90 	vmov	s15, r3
 800f09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800f0a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f0aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0b6:	ee17 2a90 	vmov	r2, s15
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	e002      	b.n	800f0c6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800f0c6:	4b24      	ldr	r3, [pc, #144]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d017      	beq.n	800f102 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f0d2:	4b21      	ldr	r3, [pc, #132]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0d6:	0c1b      	lsrs	r3, r3, #16
 800f0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0dc:	ee07 3a90 	vmov	s15, r3
 800f0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800f0e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f0ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0f8:	ee17 2a90 	vmov	r2, s15
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	605a      	str	r2, [r3, #4]
 800f100:	e002      	b.n	800f108 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800f108:	4b13      	ldr	r3, [pc, #76]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f10c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f110:	2b00      	cmp	r3, #0
 800f112:	d017      	beq.n	800f144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f114:	4b10      	ldr	r3, [pc, #64]	@ (800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f118:	0e1b      	lsrs	r3, r3, #24
 800f11a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f11e:	ee07 3a90 	vmov	s15, r3
 800f122:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800f126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f12a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f12e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f13a:	ee17 2a90 	vmov	r2, s15
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f142:	e002      	b.n	800f14a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	609a      	str	r2, [r3, #8]
}
 800f14a:	bf00      	nop
 800f14c:	3724      	adds	r7, #36	@ 0x24
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	46020c00 	.word	0x46020c00
 800f15c:	4b742400 	.word	0x4b742400
 800f160:	46000000 	.word	0x46000000
 800f164:	08018964 	.word	0x08018964

0800f168 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f168:	b480      	push	{r7}
 800f16a:	b089      	sub	sp, #36	@ 0x24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800f170:	4ba6      	ldr	r3, [pc, #664]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f178:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800f17a:	4ba4      	ldr	r3, [pc, #656]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f17e:	f003 0303 	and.w	r3, r3, #3
 800f182:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800f184:	4ba1      	ldr	r3, [pc, #644]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f188:	0a1b      	lsrs	r3, r3, #8
 800f18a:	f003 030f 	and.w	r3, r3, #15
 800f18e:	3301      	adds	r3, #1
 800f190:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800f192:	4b9e      	ldr	r3, [pc, #632]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f196:	091b      	lsrs	r3, r3, #4
 800f198:	f003 0301 	and.w	r3, r3, #1
 800f19c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800f19e:	4b9b      	ldr	r3, [pc, #620]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f1a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1a2:	08db      	lsrs	r3, r3, #3
 800f1a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	fb02 f303 	mul.w	r3, r2, r3
 800f1ae:	ee07 3a90 	vmov	s15, r3
 800f1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1b6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2b03      	cmp	r3, #3
 800f1be:	d062      	beq.n	800f286 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	f200 8081 	bhi.w	800f2ca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d024      	beq.n	800f218 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d17a      	bne.n	800f2ca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	ee07 3a90 	vmov	s15, r3
 800f1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1de:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800f410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800f1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1e6:	4b89      	ldr	r3, [pc, #548]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ee:	ee07 3a90 	vmov	s15, r3
 800f1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f1f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1fa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800f414 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f202:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f212:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800f216:	e08f      	b.n	800f338 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f218:	4b7c      	ldr	r3, [pc, #496]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d005      	beq.n	800f230 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800f224:	4b79      	ldr	r3, [pc, #484]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	0f1b      	lsrs	r3, r3, #28
 800f22a:	f003 030f 	and.w	r3, r3, #15
 800f22e:	e006      	b.n	800f23e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800f230:	4b76      	ldr	r3, [pc, #472]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f236:	041b      	lsls	r3, r3, #16
 800f238:	0f1b      	lsrs	r3, r3, #28
 800f23a:	f003 030f 	and.w	r3, r3, #15
 800f23e:	4a76      	ldr	r2, [pc, #472]	@ (800f418 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800f240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f244:	ee07 3a90 	vmov	s15, r3
 800f248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	ee07 3a90 	vmov	s15, r3
 800f252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	ee07 3a90 	vmov	s15, r3
 800f260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f264:	ed97 6a02 	vldr	s12, [r7, #8]
 800f268:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800f414 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f26c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f278:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f284:	e058      	b.n	800f338 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	ee07 3a90 	vmov	s15, r3
 800f28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f290:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800f294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f298:	4b5c      	ldr	r3, [pc, #368]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2a0:	ee07 3a90 	vmov	s15, r3
 800f2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f2a8:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f414 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f2b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f2c8:	e036      	b.n	800f338 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f2ca:	4b50      	ldr	r3, [pc, #320]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d005      	beq.n	800f2e2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800f2d6:	4b4d      	ldr	r3, [pc, #308]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	0f1b      	lsrs	r3, r3, #28
 800f2dc:	f003 030f 	and.w	r3, r3, #15
 800f2e0:	e006      	b.n	800f2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800f2e2:	4b4a      	ldr	r3, [pc, #296]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f2e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f2e8:	041b      	lsls	r3, r3, #16
 800f2ea:	0f1b      	lsrs	r3, r3, #28
 800f2ec:	f003 030f 	and.w	r3, r3, #15
 800f2f0:	4a49      	ldr	r2, [pc, #292]	@ (800f418 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800f2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2f6:	ee07 3a90 	vmov	s15, r3
 800f2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	ee07 3a90 	vmov	s15, r3
 800f304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	ee07 3a90 	vmov	s15, r3
 800f312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f316:	ed97 6a02 	vldr	s12, [r7, #8]
 800f31a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800f414 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f336:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800f338:	4b34      	ldr	r3, [pc, #208]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f33c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f340:	2b00      	cmp	r3, #0
 800f342:	d017      	beq.n	800f374 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f344:	4b31      	ldr	r3, [pc, #196]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f348:	0a5b      	lsrs	r3, r3, #9
 800f34a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f34e:	ee07 3a90 	vmov	s15, r3
 800f352:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800f356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f35a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f35e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f36a:	ee17 2a90 	vmov	r2, s15
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	e002      	b.n	800f37a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800f37a:	4b24      	ldr	r3, [pc, #144]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f37e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d017      	beq.n	800f3b6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f386:	4b21      	ldr	r3, [pc, #132]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f38a:	0c1b      	lsrs	r3, r3, #16
 800f38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f390:	ee07 3a90 	vmov	s15, r3
 800f394:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800f398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f39c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f3a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3ac:	ee17 2a90 	vmov	r2, s15
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	605a      	str	r2, [r3, #4]
 800f3b4:	e002      	b.n	800f3bc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800f3bc:	4b13      	ldr	r3, [pc, #76]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d017      	beq.n	800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f3c8:	4b10      	ldr	r3, [pc, #64]	@ (800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f3ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3cc:	0e1b      	lsrs	r3, r3, #24
 800f3ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3d2:	ee07 3a90 	vmov	s15, r3
 800f3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800f3da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f3e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3ee:	ee17 2a90 	vmov	r2, s15
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f3f6:	e002      	b.n	800f3fe <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	609a      	str	r2, [r3, #8]
}
 800f3fe:	bf00      	nop
 800f400:	3724      	adds	r7, #36	@ 0x24
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	46020c00 	.word	0x46020c00
 800f410:	4b742400 	.word	0x4b742400
 800f414:	46000000 	.word	0x46000000
 800f418:	08018964 	.word	0x08018964

0800f41c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b08e      	sub	sp, #56	@ 0x38
 800f420:	af00      	add	r7, sp, #0
 800f422:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800f426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f42a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800f42e:	430b      	orrs	r3, r1
 800f430:	d145      	bne.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f432:	4ba7      	ldr	r3, [pc, #668]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f43c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f43e:	4ba4      	ldr	r3, [pc, #656]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b02      	cmp	r3, #2
 800f44a:	d108      	bne.n	800f45e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f452:	d104      	bne.n	800f45e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f458:	637b      	str	r3, [r7, #52]	@ 0x34
 800f45a:	f001 bb5a 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f45e:	4b9c      	ldr	r3, [pc, #624]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f46c:	d114      	bne.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800f46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f474:	d110      	bne.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f476:	4b96      	ldr	r3, [pc, #600]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f47c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f484:	d103      	bne.n	800f48e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800f486:	23fa      	movs	r3, #250	@ 0xfa
 800f488:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f48a:	f001 bb42 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800f48e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f492:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f494:	f001 bb3d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800f498:	4b8d      	ldr	r3, [pc, #564]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f4a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f4a4:	d107      	bne.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4ac:	d103      	bne.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800f4ae:	4b89      	ldr	r3, [pc, #548]	@ (800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800f4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4b2:	f001 bb2e 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ba:	f001 bb2a 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4c2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f4c6:	430b      	orrs	r3, r1
 800f4c8:	d151      	bne.n	800f56e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f4ca:	4b81      	ldr	r3, [pc, #516]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f4cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f4d0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800f4d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d8:	2b80      	cmp	r3, #128	@ 0x80
 800f4da:	d035      	beq.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4de:	2b80      	cmp	r3, #128	@ 0x80
 800f4e0:	d841      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e4:	2b60      	cmp	r3, #96	@ 0x60
 800f4e6:	d02a      	beq.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800f4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ea:	2b60      	cmp	r3, #96	@ 0x60
 800f4ec:	d83b      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f0:	2b40      	cmp	r3, #64	@ 0x40
 800f4f2:	d009      	beq.n	800f508 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f6:	2b40      	cmp	r3, #64	@ 0x40
 800f4f8:	d835      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00c      	beq.n	800f51a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800f500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f502:	2b20      	cmp	r3, #32
 800f504:	d012      	beq.n	800f52c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f506:	e02e      	b.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff fb77 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f516:	f001 bafc 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f51a:	f107 0318 	add.w	r3, r7, #24
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff fcc8 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f528:	f001 baf3 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f52c:	f107 030c 	add.w	r3, r7, #12
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fe19 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f53a:	f001 baea 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f53e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f542:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f544:	f001 bae5 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f548:	4b61      	ldr	r3, [pc, #388]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f554:	d103      	bne.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800f556:	4b60      	ldr	r3, [pc, #384]	@ (800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f558:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f55a:	f001 bada 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f55e:	2300      	movs	r3, #0
 800f560:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f562:	f001 bad6 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800f566:	2300      	movs	r3, #0
 800f568:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f56a:	f001 bad2 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800f56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f572:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f576:	430b      	orrs	r3, r1
 800f578:	d158      	bne.n	800f62c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f57a:	4b55      	ldr	r3, [pc, #340]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f57c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f584:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f58c:	d03b      	beq.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f594:	d846      	bhi.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f59c:	d02e      	beq.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800f59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5a4:	d83e      	bhi.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5ac:	d00b      	beq.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5b4:	d836      	bhi.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00d      	beq.n	800f5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5c2:	d012      	beq.n	800f5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800f5c4:	e02e      	b.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7ff fb18 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f5d4:	f001 ba9d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5d8:	f107 0318 	add.w	r3, r7, #24
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7ff fc69 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f5e6:	f001 ba94 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ea:	f107 030c 	add.w	r3, r7, #12
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff fdba 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f5f8:	f001 ba8b 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f5fc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f602:	f001 ba86 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f606:	4b32      	ldr	r3, [pc, #200]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f60e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f612:	d103      	bne.n	800f61c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800f614:	4b30      	ldr	r3, [pc, #192]	@ (800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f616:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f618:	f001 ba7b 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f61c:	2300      	movs	r3, #0
 800f61e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f620:	f001 ba77 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800f624:	2300      	movs	r3, #0
 800f626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f628:	f001 ba73 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800f62c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f630:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f634:	430b      	orrs	r3, r1
 800f636:	d126      	bne.n	800f686 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800f638:	4b25      	ldr	r3, [pc, #148]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f63a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f63e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f642:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800f644:	4b22      	ldr	r3, [pc, #136]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f64c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f650:	d106      	bne.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800f652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f654:	2b00      	cmp	r3, #0
 800f656:	d103      	bne.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800f658:	4b1f      	ldr	r3, [pc, #124]	@ (800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f65c:	f001 ba59 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800f660:	4b1b      	ldr	r3, [pc, #108]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f66c:	d107      	bne.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800f66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f674:	d103      	bne.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800f676:	4b19      	ldr	r3, [pc, #100]	@ (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800f678:	637b      	str	r3, [r7, #52]	@ 0x34
 800f67a:	f001 ba4a 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800f67e:	2300      	movs	r3, #0
 800f680:	637b      	str	r3, [r7, #52]	@ 0x34
 800f682:	f001 ba46 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800f686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f68a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800f68e:	430b      	orrs	r3, r1
 800f690:	d16e      	bne.n	800f770 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f692:	4b0f      	ldr	r3, [pc, #60]	@ (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f698:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800f69c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f6a4:	d03d      	beq.n	800f722 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f6ac:	d85c      	bhi.n	800f768 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f6b4:	d014      	beq.n	800f6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f6bc:	d854      	bhi.n	800f768 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d01f      	beq.n	800f704 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800f6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6ca:	d012      	beq.n	800f6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f6cc:	e04c      	b.n	800f768 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f6ce:	bf00      	nop
 800f6d0:	46020c00 	.word	0x46020c00
 800f6d4:	0007a120 	.word	0x0007a120
 800f6d8:	00f42400 	.word	0x00f42400
 800f6dc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff fa8b 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f6ee:	f001 ba10 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6f2:	f107 0318 	add.w	r3, r7, #24
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7ff fbdc 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f700:	f001 ba07 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f704:	4ba7      	ldr	r3, [pc, #668]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f70c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f710:	d103      	bne.n	800f71a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800f712:	4ba5      	ldr	r3, [pc, #660]	@ (800f9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f714:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f716:	f001 b9fc 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f71a:	2300      	movs	r3, #0
 800f71c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f71e:	f001 b9f8 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f722:	4ba0      	ldr	r3, [pc, #640]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0320 	and.w	r3, r3, #32
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	d118      	bne.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f72e:	4b9d      	ldr	r3, [pc, #628]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f736:	2b00      	cmp	r3, #0
 800f738:	d005      	beq.n	800f746 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f73a:	4b9a      	ldr	r3, [pc, #616]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	0e1b      	lsrs	r3, r3, #24
 800f740:	f003 030f 	and.w	r3, r3, #15
 800f744:	e006      	b.n	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f746:	4b97      	ldr	r3, [pc, #604]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f74c:	041b      	lsls	r3, r3, #16
 800f74e:	0e1b      	lsrs	r3, r3, #24
 800f750:	f003 030f 	and.w	r3, r3, #15
 800f754:	4a95      	ldr	r2, [pc, #596]	@ (800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f75a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f75c:	f001 b9d9 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f760:	2300      	movs	r3, #0
 800f762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f764:	f001 b9d5 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800f768:	2300      	movs	r3, #0
 800f76a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f76c:	f001 b9d1 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f774:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800f778:	430b      	orrs	r3, r1
 800f77a:	d17f      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f77c:	4b89      	ldr	r3, [pc, #548]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f77e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f786:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800f788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d165      	bne.n	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f78e:	4b85      	ldr	r3, [pc, #532]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f794:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800f798:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800f79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f7a0:	d034      	beq.n	800f80c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f7a8:	d853      	bhi.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f7b0:	d00b      	beq.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f7b8:	d84b      	bhi.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d016      	beq.n	800f7ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f7c6:	d009      	beq.n	800f7dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800f7c8:	e043      	b.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f7ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff fa16 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f7d8:	f001 b99b 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7dc:	f107 0318 	add.w	r3, r7, #24
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fb67 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f7ea:	f001 b992 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f7ee:	4b6d      	ldr	r3, [pc, #436]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f7f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f7fa:	d103      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800f7fc:	4b6a      	ldr	r3, [pc, #424]	@ (800f9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f7fe:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f800:	f001 b987 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800f804:	2300      	movs	r3, #0
 800f806:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f808:	f001 b983 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f80c:	4b65      	ldr	r3, [pc, #404]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f003 0320 	and.w	r3, r3, #32
 800f814:	2b20      	cmp	r3, #32
 800f816:	d118      	bne.n	800f84a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f818:	4b62      	ldr	r3, [pc, #392]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f820:	2b00      	cmp	r3, #0
 800f822:	d005      	beq.n	800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800f824:	4b5f      	ldr	r3, [pc, #380]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	0e1b      	lsrs	r3, r3, #24
 800f82a:	f003 030f 	and.w	r3, r3, #15
 800f82e:	e006      	b.n	800f83e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800f830:	4b5c      	ldr	r3, [pc, #368]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f836:	041b      	lsls	r3, r3, #16
 800f838:	0e1b      	lsrs	r3, r3, #24
 800f83a:	f003 030f 	and.w	r3, r3, #15
 800f83e:	4a5b      	ldr	r2, [pc, #364]	@ (800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f844:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f846:	f001 b964 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800f84a:	2300      	movs	r3, #0
 800f84c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f84e:	f001 b960 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800f852:	2300      	movs	r3, #0
 800f854:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f856:	f001 b95c 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f860:	d108      	bne.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff f9ca 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f870:	f001 b94f 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800f874:	2300      	movs	r3, #0
 800f876:	637b      	str	r3, [r7, #52]	@ 0x34
 800f878:	f001 b94b 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f880:	1e51      	subs	r1, r2, #1
 800f882:	430b      	orrs	r3, r1
 800f884:	d136      	bne.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f886:	4b47      	ldr	r3, [pc, #284]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f88c:	f003 0303 	and.w	r3, r3, #3
 800f890:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f894:	2b00      	cmp	r3, #0
 800f896:	d104      	bne.n	800f8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f898:	f7fe f9cc 	bl	800dc34 <HAL_RCC_GetPCLK2Freq>
 800f89c:	6378      	str	r0, [r7, #52]	@ 0x34
 800f89e:	f001 b938 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d104      	bne.n	800f8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f8a8:	f7fe f894 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800f8ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800f8ae:	f001 b930 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f8b2:	4b3c      	ldr	r3, [pc, #240]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f8ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8be:	d106      	bne.n	800f8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8c2:	2b02      	cmp	r3, #2
 800f8c4:	d103      	bne.n	800f8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800f8c6:	4b3a      	ldr	r3, [pc, #232]	@ (800f9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8ca:	f001 b922 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f8ce:	4b35      	ldr	r3, [pc, #212]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f8d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f8d4:	f003 0302 	and.w	r3, r3, #2
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d107      	bne.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8de:	2b03      	cmp	r3, #3
 800f8e0:	d104      	bne.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800f8e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8e8:	f001 b913 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8f0:	f001 b90f 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8f8:	1e91      	subs	r1, r2, #2
 800f8fa:	430b      	orrs	r3, r1
 800f8fc:	d136      	bne.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f8fe:	4b29      	ldr	r3, [pc, #164]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f904:	f003 030c 	and.w	r3, r3, #12
 800f908:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d104      	bne.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f910:	f7fe f97c 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800f914:	6378      	str	r0, [r7, #52]	@ 0x34
 800f916:	f001 b8fc 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91c:	2b04      	cmp	r3, #4
 800f91e:	d104      	bne.n	800f92a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f920:	f7fe f858 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800f924:	6378      	str	r0, [r7, #52]	@ 0x34
 800f926:	f001 b8f4 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f92a:	4b1e      	ldr	r3, [pc, #120]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f936:	d106      	bne.n	800f946 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93a:	2b08      	cmp	r3, #8
 800f93c:	d103      	bne.n	800f946 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800f93e:	4b1c      	ldr	r3, [pc, #112]	@ (800f9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f940:	637b      	str	r3, [r7, #52]	@ 0x34
 800f942:	f001 b8e6 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f946:	4b17      	ldr	r3, [pc, #92]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f94c:	f003 0302 	and.w	r3, r3, #2
 800f950:	2b02      	cmp	r3, #2
 800f952:	d107      	bne.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f956:	2b0c      	cmp	r3, #12
 800f958:	d104      	bne.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800f95a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f95e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f960:	f001 b8d7 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f964:	2300      	movs	r3, #0
 800f966:	637b      	str	r3, [r7, #52]	@ 0x34
 800f968:	f001 b8d3 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f970:	1f11      	subs	r1, r2, #4
 800f972:	430b      	orrs	r3, r1
 800f974:	d13f      	bne.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f976:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f97c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f980:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f984:	2b00      	cmp	r3, #0
 800f986:	d104      	bne.n	800f992 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f988:	f7fe f940 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800f98c:	6378      	str	r0, [r7, #52]	@ 0x34
 800f98e:	f001 b8c0 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f994:	2b10      	cmp	r3, #16
 800f996:	d10d      	bne.n	800f9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f998:	f7fe f81c 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800f99c:	6378      	str	r0, [r7, #52]	@ 0x34
 800f99e:	f001 b8b8 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800f9a2:	bf00      	nop
 800f9a4:	46020c00 	.word	0x46020c00
 800f9a8:	02dc6c00 	.word	0x02dc6c00
 800f9ac:	08018964 	.word	0x08018964
 800f9b0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f9b4:	4ba8      	ldr	r3, [pc, #672]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9c0:	d106      	bne.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c4:	2b20      	cmp	r3, #32
 800f9c6:	d103      	bne.n	800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800f9c8:	4ba4      	ldr	r3, [pc, #656]	@ (800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9cc:	f001 b8a1 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f9d0:	4ba1      	ldr	r3, [pc, #644]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f9d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f9d6:	f003 0302 	and.w	r3, r3, #2
 800f9da:	2b02      	cmp	r3, #2
 800f9dc:	d107      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e0:	2b30      	cmp	r3, #48	@ 0x30
 800f9e2:	d104      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800f9e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f9e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9ea:	f001 b892 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9f2:	f001 b88e 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9fa:	f1a2 0108 	sub.w	r1, r2, #8
 800f9fe:	430b      	orrs	r3, r1
 800fa00:	d136      	bne.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800fa02:	4b95      	ldr	r3, [pc, #596]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fa04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fa0c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d104      	bne.n	800fa1e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa14:	f7fe f8fa 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800fa18:	6378      	str	r0, [r7, #52]	@ 0x34
 800fa1a:	f001 b87a 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa20:	2b40      	cmp	r3, #64	@ 0x40
 800fa22:	d104      	bne.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fa24:	f7fd ffd6 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800fa28:	6378      	str	r0, [r7, #52]	@ 0x34
 800fa2a:	f001 b872 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800fa2e:	4b8a      	ldr	r3, [pc, #552]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa3a:	d106      	bne.n	800fa4a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3e:	2b80      	cmp	r3, #128	@ 0x80
 800fa40:	d103      	bne.n	800fa4a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800fa42:	4b86      	ldr	r3, [pc, #536]	@ (800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800fa44:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa46:	f001 b864 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800fa4a:	4b83      	ldr	r3, [pc, #524]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fa4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fa50:	f003 0302 	and.w	r3, r3, #2
 800fa54:	2b02      	cmp	r3, #2
 800fa56:	d107      	bne.n	800fa68 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800fa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5a:	2bc0      	cmp	r3, #192	@ 0xc0
 800fa5c:	d104      	bne.n	800fa68 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800fa5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa62:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa64:	f001 b855 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa6c:	f001 b851 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800fa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa74:	f1a2 0110 	sub.w	r1, r2, #16
 800fa78:	430b      	orrs	r3, r1
 800fa7a:	d139      	bne.n	800faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800fa7c:	4b76      	ldr	r3, [pc, #472]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fa7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fa86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800fa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d104      	bne.n	800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa8e:	f7fe f8bd 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800fa92:	6378      	str	r0, [r7, #52]	@ 0x34
 800fa94:	f001 b83d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800fa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa9e:	d104      	bne.n	800faaa <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800faa0:	f7fd ff98 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800faa4:	6378      	str	r0, [r7, #52]	@ 0x34
 800faa6:	f001 b834 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800faaa:	4b6b      	ldr	r3, [pc, #428]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fab6:	d107      	bne.n	800fac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800fab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fabe:	d103      	bne.n	800fac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800fac0:	4b66      	ldr	r3, [pc, #408]	@ (800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800fac2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fac4:	f001 b825 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800fac8:	4b63      	ldr	r3, [pc, #396]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800faca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d108      	bne.n	800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800fad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fadc:	d104      	bne.n	800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800fade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fae2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fae4:	f001 b815 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800fae8:	2300      	movs	r3, #0
 800faea:	637b      	str	r3, [r7, #52]	@ 0x34
 800faec:	f001 b811 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800faf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faf4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800faf8:	430b      	orrs	r3, r1
 800fafa:	d139      	bne.n	800fb70 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800fafc:	4b56      	ldr	r3, [pc, #344]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fafe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fb02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fb06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800fb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d104      	bne.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fb0e:	f7fe f87d 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800fb12:	6378      	str	r0, [r7, #52]	@ 0x34
 800fb14:	f000 bffd 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800fb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb1e:	d104      	bne.n	800fb2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fb20:	f7fd ff58 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800fb24:	6378      	str	r0, [r7, #52]	@ 0x34
 800fb26:	f000 bff4 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800fb2a:	4b4b      	ldr	r3, [pc, #300]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb36:	d107      	bne.n	800fb48 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800fb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb3e:	d103      	bne.n	800fb48 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800fb40:	4b46      	ldr	r3, [pc, #280]	@ (800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800fb42:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb44:	f000 bfe5 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800fb48:	4b43      	ldr	r3, [pc, #268]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fb4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fb4e:	f003 0302 	and.w	r3, r3, #2
 800fb52:	2b02      	cmp	r3, #2
 800fb54:	d108      	bne.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800fb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fb5c:	d104      	bne.n	800fb68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800fb5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb62:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb64:	f000 bfd5 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb6c:	f000 bfd1 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800fb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb74:	f1a2 0120 	sub.w	r1, r2, #32
 800fb78:	430b      	orrs	r3, r1
 800fb7a:	d158      	bne.n	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800fb7c:	4b36      	ldr	r3, [pc, #216]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fb7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800fb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d104      	bne.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800fb8e:	f7fe f865 	bl	800dc5c <HAL_RCC_GetPCLK3Freq>
 800fb92:	6378      	str	r0, [r7, #52]	@ 0x34
 800fb94:	f000 bfbd 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800fb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d104      	bne.n	800fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fb9e:	f7fd ff19 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800fba2:	6378      	str	r0, [r7, #52]	@ 0x34
 800fba4:	f000 bfb5 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800fba8:	4b2b      	ldr	r3, [pc, #172]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fbb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fbb4:	d106      	bne.n	800fbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d103      	bne.n	800fbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800fbbc:	4b27      	ldr	r3, [pc, #156]	@ (800fc5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800fbbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbc0:	f000 bfa7 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800fbc4:	4b24      	ldr	r3, [pc, #144]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fbc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fbca:	f003 0302 	and.w	r3, r3, #2
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d107      	bne.n	800fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	d104      	bne.n	800fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800fbd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbde:	f000 bf98 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800fbe2:	4b1d      	ldr	r3, [pc, #116]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f003 0320 	and.w	r3, r3, #32
 800fbea:	2b20      	cmp	r3, #32
 800fbec:	d11b      	bne.n	800fc26 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800fbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf0:	2b04      	cmp	r3, #4
 800fbf2:	d118      	bne.n	800fc26 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fbf4:	4b18      	ldr	r3, [pc, #96]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d005      	beq.n	800fc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800fc00:	4b15      	ldr	r3, [pc, #84]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	0e1b      	lsrs	r3, r3, #24
 800fc06:	f003 030f 	and.w	r3, r3, #15
 800fc0a:	e006      	b.n	800fc1a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800fc0c:	4b12      	ldr	r3, [pc, #72]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fc0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fc12:	041b      	lsls	r3, r3, #16
 800fc14:	0e1b      	lsrs	r3, r3, #24
 800fc16:	f003 030f 	and.w	r3, r3, #15
 800fc1a:	4a11      	ldr	r2, [pc, #68]	@ (800fc60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc20:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc22:	f000 bf76 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800fc26:	2300      	movs	r3, #0
 800fc28:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc2a:	f000 bf72 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800fc2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc32:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800fc36:	430b      	orrs	r3, r1
 800fc38:	d172      	bne.n	800fd20 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800fc3a:	4b07      	ldr	r3, [pc, #28]	@ (800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fc3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fc40:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800fc44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800fc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc4c:	d10a      	bne.n	800fc64 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fc4e:	f7fd fec1 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800fc52:	6378      	str	r0, [r7, #52]	@ 0x34
 800fc54:	f000 bf5d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800fc58:	46020c00 	.word	0x46020c00
 800fc5c:	00f42400 	.word	0x00f42400
 800fc60:	08018964 	.word	0x08018964
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800fc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc6a:	d108      	bne.n	800fc7e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc6c:	f107 0318 	add.w	r3, r7, #24
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff f91f 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800fc76:	6a3b      	ldr	r3, [r7, #32]
 800fc78:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc7a:	f000 bf4a 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d104      	bne.n	800fc8e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800fc84:	f7fd ffa8 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800fc88:	6378      	str	r0, [r7, #52]	@ 0x34
 800fc8a:	f000 bf42 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc90:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800fc94:	d122      	bne.n	800fcdc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fc96:	4bb0      	ldr	r3, [pc, #704]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f003 0320 	and.w	r3, r3, #32
 800fc9e:	2b20      	cmp	r3, #32
 800fca0:	d118      	bne.n	800fcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fca2:	4bad      	ldr	r3, [pc, #692]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d005      	beq.n	800fcba <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800fcae:	4baa      	ldr	r3, [pc, #680]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	0e1b      	lsrs	r3, r3, #24
 800fcb4:	f003 030f 	and.w	r3, r3, #15
 800fcb8:	e006      	b.n	800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800fcba:	4ba7      	ldr	r3, [pc, #668]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fcbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fcc0:	041b      	lsls	r3, r3, #16
 800fcc2:	0e1b      	lsrs	r3, r3, #24
 800fcc4:	f003 030f 	and.w	r3, r3, #15
 800fcc8:	4aa4      	ldr	r2, [pc, #656]	@ (800ff5c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800fcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcce:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcd0:	f000 bf1f 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcd8:	f000 bf1b 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800fcdc:	4b9e      	ldr	r3, [pc, #632]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fce8:	d107      	bne.n	800fcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800fcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fcf0:	d103      	bne.n	800fcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800fcf2:	4b9b      	ldr	r3, [pc, #620]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800fcf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcf6:	f000 bf0c 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800fcfa:	4b97      	ldr	r3, [pc, #604]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd06:	d107      	bne.n	800fd18 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800fd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd0e:	d103      	bne.n	800fd18 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800fd10:	4b93      	ldr	r3, [pc, #588]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800fd12:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd14:	f000 befd 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd1c:	f000 bef9 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800fd20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd24:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800fd28:	430b      	orrs	r3, r1
 800fd2a:	d158      	bne.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800fd2c:	4b8a      	ldr	r3, [pc, #552]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fd2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fd32:	f003 0307 	and.w	r3, r3, #7
 800fd36:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800fd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3a:	2b04      	cmp	r3, #4
 800fd3c:	d84b      	bhi.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800fd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd44 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800fd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd44:	0800fd7d 	.word	0x0800fd7d
 800fd48:	0800fd59 	.word	0x0800fd59
 800fd4c:	0800fd6b 	.word	0x0800fd6b
 800fd50:	0800fd87 	.word	0x0800fd87
 800fd54:	0800fd91 	.word	0x0800fd91
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fe ff4f 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fd66:	f000 bed4 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd6a:	f107 030c 	add.w	r3, r7, #12
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff f9fa 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fd78:	f000 becb 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800fd7c:	f7fd ff2c 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800fd80:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fd82:	f000 bec6 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fd86:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800fd8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fd8c:	f000 bec1 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fd90:	4b71      	ldr	r3, [pc, #452]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f003 0320 	and.w	r3, r3, #32
 800fd98:	2b20      	cmp	r3, #32
 800fd9a:	d118      	bne.n	800fdce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd9c:	4b6e      	ldr	r3, [pc, #440]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d005      	beq.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800fda8:	4b6b      	ldr	r3, [pc, #428]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	0e1b      	lsrs	r3, r3, #24
 800fdae:	f003 030f 	and.w	r3, r3, #15
 800fdb2:	e006      	b.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800fdb4:	4b68      	ldr	r3, [pc, #416]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fdb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fdba:	041b      	lsls	r3, r3, #16
 800fdbc:	0e1b      	lsrs	r3, r3, #24
 800fdbe:	f003 030f 	and.w	r3, r3, #15
 800fdc2:	4a66      	ldr	r2, [pc, #408]	@ (800ff5c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800fdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fdca:	f000 bea2 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fdd2:	f000 be9e 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fdda:	f000 be9a 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800fdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fde2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800fde6:	430b      	orrs	r3, r1
 800fde8:	d167      	bne.n	800feba <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800fdea:	4b5b      	ldr	r3, [pc, #364]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fdec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fdf0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800fdf4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fdfc:	d036      	beq.n	800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fe04:	d855      	bhi.n	800feb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800fe06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fe0c:	d029      	beq.n	800fe62 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800fe0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fe14:	d84d      	bhi.n	800feb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800fe16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe1c:	d013      	beq.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe24:	d845      	bhi.n	800feb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800fe26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d015      	beq.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe32:	d13e      	bne.n	800feb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7fe fee1 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe42:	f000 be66 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe46:	f107 030c 	add.w	r3, r7, #12
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7ff f98c 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe54:	f000 be5d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800fe58:	f7fd febe 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800fe5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fe5e:	f000 be58 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fe62:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800fe66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe68:	f000 be53 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fe6c:	4b3a      	ldr	r3, [pc, #232]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f003 0320 	and.w	r3, r3, #32
 800fe74:	2b20      	cmp	r3, #32
 800fe76:	d118      	bne.n	800feaa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fe78:	4b37      	ldr	r3, [pc, #220]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d005      	beq.n	800fe90 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800fe84:	4b34      	ldr	r3, [pc, #208]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	0e1b      	lsrs	r3, r3, #24
 800fe8a:	f003 030f 	and.w	r3, r3, #15
 800fe8e:	e006      	b.n	800fe9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800fe90:	4b31      	ldr	r3, [pc, #196]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fe92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fe96:	041b      	lsls	r3, r3, #16
 800fe98:	0e1b      	lsrs	r3, r3, #24
 800fe9a:	f003 030f 	and.w	r3, r3, #15
 800fe9e:	4a2f      	ldr	r2, [pc, #188]	@ (800ff5c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800fea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fea6:	f000 be34 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800feaa:	2300      	movs	r3, #0
 800feac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800feae:	f000 be30 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800feb2:	2300      	movs	r3, #0
 800feb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800feb6:	f000 be2c 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800feba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800febe:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800fec2:	430b      	orrs	r3, r1
 800fec4:	d152      	bne.n	800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800fec6:	4b24      	ldr	r3, [pc, #144]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fed0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800fed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d104      	bne.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fed8:	f7fd fe98 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800fedc:	6378      	str	r0, [r7, #52]	@ 0x34
 800fede:	f000 be18 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800fee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fee8:	d104      	bne.n	800fef4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800feea:	f7fd fd73 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800feee:	6378      	str	r0, [r7, #52]	@ 0x34
 800fef0:	f000 be0f 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800fef4:	4b18      	ldr	r3, [pc, #96]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fefc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff00:	d107      	bne.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ff02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff08:	d103      	bne.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ff0a:	4b15      	ldr	r3, [pc, #84]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ff0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff0e:	f000 be00 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ff12:	4b11      	ldr	r3, [pc, #68]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f003 0320 	and.w	r3, r3, #32
 800ff1a:	2b20      	cmp	r3, #32
 800ff1c:	d122      	bne.n	800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ff1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ff24:	d11e      	bne.n	800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ff26:	4b0c      	ldr	r3, [pc, #48]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ff28:	689b      	ldr	r3, [r3, #8]
 800ff2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d005      	beq.n	800ff3e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ff32:	4b09      	ldr	r3, [pc, #36]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	0e1b      	lsrs	r3, r3, #24
 800ff38:	f003 030f 	and.w	r3, r3, #15
 800ff3c:	e006      	b.n	800ff4c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ff3e:	4b06      	ldr	r3, [pc, #24]	@ (800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ff40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ff44:	041b      	lsls	r3, r3, #16
 800ff46:	0e1b      	lsrs	r3, r3, #24
 800ff48:	f003 030f 	and.w	r3, r3, #15
 800ff4c:	4a03      	ldr	r2, [pc, #12]	@ (800ff5c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ff4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff54:	f000 bddd 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ff58:	46020c00 	.word	0x46020c00
 800ff5c:	08018964 	.word	0x08018964
 800ff60:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ff64:	2300      	movs	r3, #0
 800ff66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff68:	f000 bdd3 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ff6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff70:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ff74:	430b      	orrs	r3, r1
 800ff76:	d14c      	bne.n	8010012 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ff78:	4ba8      	ldr	r3, [pc, #672]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ff7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ff7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ff82:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ff84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d104      	bne.n	800ff94 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ff8a:	f7fd fe3f 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 800ff8e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ff90:	f000 bdbf 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ff94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff9a:	d104      	bne.n	800ffa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ff9c:	f7fd fd1a 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 800ffa0:	6378      	str	r0, [r7, #52]	@ 0x34
 800ffa2:	f000 bdb6 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ffa6:	4b9d      	ldr	r3, [pc, #628]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ffae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ffb2:	d107      	bne.n	800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffba:	d103      	bne.n	800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ffbc:	4b98      	ldr	r3, [pc, #608]	@ (8010220 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ffbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffc0:	f000 bda7 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ffc4:	4b95      	ldr	r3, [pc, #596]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f003 0320 	and.w	r3, r3, #32
 800ffcc:	2b20      	cmp	r3, #32
 800ffce:	d11c      	bne.n	801000a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800ffd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ffd6:	d118      	bne.n	801000a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ffd8:	4b90      	ldr	r3, [pc, #576]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d005      	beq.n	800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ffe4:	4b8d      	ldr	r3, [pc, #564]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	0e1b      	lsrs	r3, r3, #24
 800ffea:	f003 030f 	and.w	r3, r3, #15
 800ffee:	e006      	b.n	800fffe <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800fff0:	4b8a      	ldr	r3, [pc, #552]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800fff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fff6:	041b      	lsls	r3, r3, #16
 800fff8:	0e1b      	lsrs	r3, r3, #24
 800fffa:	f003 030f 	and.w	r3, r3, #15
 800fffe:	4a89      	ldr	r2, [pc, #548]	@ (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8010000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010004:	637b      	str	r3, [r7, #52]	@ 0x34
 8010006:	f000 bd84 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 801000a:	2300      	movs	r3, #0
 801000c:	637b      	str	r3, [r7, #52]	@ 0x34
 801000e:	f000 bd80 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8010012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010016:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801001a:	430b      	orrs	r3, r1
 801001c:	d158      	bne.n	80100d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801001e:	4b7f      	ldr	r3, [pc, #508]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010024:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010028:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 801002a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002c:	2bc0      	cmp	r3, #192	@ 0xc0
 801002e:	d028      	beq.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8010030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010032:	2bc0      	cmp	r3, #192	@ 0xc0
 8010034:	d848      	bhi.n	80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8010036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010038:	2b80      	cmp	r3, #128	@ 0x80
 801003a:	d00e      	beq.n	801005a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 801003c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801003e:	2b80      	cmp	r3, #128	@ 0x80
 8010040:	d842      	bhi.n	80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8010042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010044:	2b00      	cmp	r3, #0
 8010046:	d003      	beq.n	8010050 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8010048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801004a:	2b40      	cmp	r3, #64	@ 0x40
 801004c:	d014      	beq.n	8010078 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 801004e:	e03b      	b.n	80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8010050:	f7fd fe04 	bl	800dc5c <HAL_RCC_GetPCLK3Freq>
 8010054:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8010056:	f000 bd5c 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801005a:	4b70      	ldr	r3, [pc, #448]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010066:	d103      	bne.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8010068:	4b6d      	ldr	r3, [pc, #436]	@ (8010220 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 801006a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801006c:	f000 bd51 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010070:	2300      	movs	r3, #0
 8010072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010074:	f000 bd4d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8010078:	f7fd fcac 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 801007c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801007e:	f000 bd48 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010082:	4b66      	ldr	r3, [pc, #408]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f003 0320 	and.w	r3, r3, #32
 801008a:	2b20      	cmp	r3, #32
 801008c:	d118      	bne.n	80100c0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801008e:	4b63      	ldr	r3, [pc, #396]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010096:	2b00      	cmp	r3, #0
 8010098:	d005      	beq.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 801009a:	4b60      	ldr	r3, [pc, #384]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801009c:	689b      	ldr	r3, [r3, #8]
 801009e:	0e1b      	lsrs	r3, r3, #24
 80100a0:	f003 030f 	and.w	r3, r3, #15
 80100a4:	e006      	b.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80100a6:	4b5d      	ldr	r3, [pc, #372]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80100a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80100ac:	041b      	lsls	r3, r3, #16
 80100ae:	0e1b      	lsrs	r3, r3, #24
 80100b0:	f003 030f 	and.w	r3, r3, #15
 80100b4:	4a5b      	ldr	r2, [pc, #364]	@ (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80100b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80100bc:	f000 bd29 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80100c0:	2300      	movs	r3, #0
 80100c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80100c4:	f000 bd25 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 80100c8:	2300      	movs	r3, #0
 80100ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80100cc:	f000 bd21 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80100d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100d4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80100d8:	430b      	orrs	r3, r1
 80100da:	d14c      	bne.n	8010176 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80100dc:	4b4f      	ldr	r3, [pc, #316]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80100de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80100e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80100e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80100e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d104      	bne.n	80100f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80100ee:	f7fd fd8d 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 80100f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80100f4:	f000 bd0d 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80100f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80100fe:	d104      	bne.n	801010a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8010100:	f7fd fc68 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 8010104:	6378      	str	r0, [r7, #52]	@ 0x34
 8010106:	f000 bd04 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 801010a:	4b44      	ldr	r3, [pc, #272]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010116:	d107      	bne.n	8010128 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8010118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801011e:	d103      	bne.n	8010128 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8010120:	4b3f      	ldr	r3, [pc, #252]	@ (8010220 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8010122:	637b      	str	r3, [r7, #52]	@ 0x34
 8010124:	f000 bcf5 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8010128:	4b3c      	ldr	r3, [pc, #240]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 0320 	and.w	r3, r3, #32
 8010130:	2b20      	cmp	r3, #32
 8010132:	d11c      	bne.n	801016e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8010134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010136:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801013a:	d118      	bne.n	801016e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801013c:	4b37      	ldr	r3, [pc, #220]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801013e:	689b      	ldr	r3, [r3, #8]
 8010140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d005      	beq.n	8010154 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8010148:	4b34      	ldr	r3, [pc, #208]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	0e1b      	lsrs	r3, r3, #24
 801014e:	f003 030f 	and.w	r3, r3, #15
 8010152:	e006      	b.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8010154:	4b31      	ldr	r3, [pc, #196]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801015a:	041b      	lsls	r3, r3, #16
 801015c:	0e1b      	lsrs	r3, r3, #24
 801015e:	f003 030f 	and.w	r3, r3, #15
 8010162:	4a30      	ldr	r2, [pc, #192]	@ (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8010164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010168:	637b      	str	r3, [r7, #52]	@ 0x34
 801016a:	f000 bcd2 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 801016e:	2300      	movs	r3, #0
 8010170:	637b      	str	r3, [r7, #52]	@ 0x34
 8010172:	f000 bcce 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8010176:	e9d7 2300 	ldrd	r2, r3, [r7]
 801017a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 801017e:	430b      	orrs	r3, r1
 8010180:	d152      	bne.n	8010228 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8010182:	4b26      	ldr	r3, [pc, #152]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010188:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 801018c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 801018e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010190:	2b00      	cmp	r3, #0
 8010192:	d104      	bne.n	801019e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010194:	f7fd fd3a 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 8010198:	6378      	str	r0, [r7, #52]	@ 0x34
 801019a:	f000 bcba 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 801019e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80101a4:	d104      	bne.n	80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80101a6:	f7fd fc15 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 80101aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80101ac:	f000 bcb1 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80101b0:	4b1a      	ldr	r3, [pc, #104]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80101b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80101bc:	d107      	bne.n	80101ce <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80101be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80101c4:	d103      	bne.n	80101ce <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80101c6:	4b16      	ldr	r3, [pc, #88]	@ (8010220 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80101c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80101ca:	f000 bca2 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80101ce:	4b13      	ldr	r3, [pc, #76]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f003 0320 	and.w	r3, r3, #32
 80101d6:	2b20      	cmp	r3, #32
 80101d8:	d11c      	bne.n	8010214 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80101da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80101e0:	d118      	bne.n	8010214 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80101e2:	4b0e      	ldr	r3, [pc, #56]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d005      	beq.n	80101fa <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80101ee:	4b0b      	ldr	r3, [pc, #44]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	0e1b      	lsrs	r3, r3, #24
 80101f4:	f003 030f 	and.w	r3, r3, #15
 80101f8:	e006      	b.n	8010208 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80101fa:	4b08      	ldr	r3, [pc, #32]	@ (801021c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80101fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010200:	041b      	lsls	r3, r3, #16
 8010202:	0e1b      	lsrs	r3, r3, #24
 8010204:	f003 030f 	and.w	r3, r3, #15
 8010208:	4a06      	ldr	r2, [pc, #24]	@ (8010224 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 801020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801020e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010210:	f000 bc7f 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8010214:	2300      	movs	r3, #0
 8010216:	637b      	str	r3, [r7, #52]	@ 0x34
 8010218:	f000 bc7b 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 801021c:	46020c00 	.word	0x46020c00
 8010220:	00f42400 	.word	0x00f42400
 8010224:	08018964 	.word	0x08018964
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8010228:	e9d7 2300 	ldrd	r2, r3, [r7]
 801022c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8010230:	430b      	orrs	r3, r1
 8010232:	d14c      	bne.n	80102ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8010234:	4ba6      	ldr	r3, [pc, #664]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801023a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801023e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8010240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010242:	2b00      	cmp	r3, #0
 8010244:	d104      	bne.n	8010250 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010246:	f7fd fce1 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 801024a:	6378      	str	r0, [r7, #52]	@ 0x34
 801024c:	f000 bc61 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8010250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010252:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010256:	d104      	bne.n	8010262 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8010258:	f7fd fbbc 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 801025c:	6378      	str	r0, [r7, #52]	@ 0x34
 801025e:	f000 bc58 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8010262:	4b9b      	ldr	r3, [pc, #620]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801026a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801026e:	d107      	bne.n	8010280 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8010270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010276:	d103      	bne.n	8010280 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8010278:	4b96      	ldr	r3, [pc, #600]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 801027a:	637b      	str	r3, [r7, #52]	@ 0x34
 801027c:	f000 bc49 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8010280:	4b93      	ldr	r3, [pc, #588]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f003 0320 	and.w	r3, r3, #32
 8010288:	2b20      	cmp	r3, #32
 801028a:	d11c      	bne.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 801028c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8010292:	d118      	bne.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010294:	4b8e      	ldr	r3, [pc, #568]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801029c:	2b00      	cmp	r3, #0
 801029e:	d005      	beq.n	80102ac <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80102a0:	4b8b      	ldr	r3, [pc, #556]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	0e1b      	lsrs	r3, r3, #24
 80102a6:	f003 030f 	and.w	r3, r3, #15
 80102aa:	e006      	b.n	80102ba <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80102ac:	4b88      	ldr	r3, [pc, #544]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80102ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80102b2:	041b      	lsls	r3, r3, #16
 80102b4:	0e1b      	lsrs	r3, r3, #24
 80102b6:	f003 030f 	and.w	r3, r3, #15
 80102ba:	4a87      	ldr	r2, [pc, #540]	@ (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80102bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80102c2:	f000 bc26 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80102c6:	2300      	movs	r3, #0
 80102c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80102ca:	f000 bc22 	b.w	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80102ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80102d6:	430b      	orrs	r3, r1
 80102d8:	d164      	bne.n	80103a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80102da:	4b7d      	ldr	r3, [pc, #500]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80102dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80102e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80102e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80102e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d120      	bne.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80102ec:	4b78      	ldr	r3, [pc, #480]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f003 0320 	and.w	r3, r3, #32
 80102f4:	2b20      	cmp	r3, #32
 80102f6:	d117      	bne.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80102f8:	4b75      	ldr	r3, [pc, #468]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010300:	2b00      	cmp	r3, #0
 8010302:	d005      	beq.n	8010310 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8010304:	4b72      	ldr	r3, [pc, #456]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	0e1b      	lsrs	r3, r3, #24
 801030a:	f003 030f 	and.w	r3, r3, #15
 801030e:	e006      	b.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8010310:	4b6f      	ldr	r3, [pc, #444]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010316:	041b      	lsls	r3, r3, #16
 8010318:	0e1b      	lsrs	r3, r3, #24
 801031a:	f003 030f 	and.w	r3, r3, #15
 801031e:	4a6e      	ldr	r2, [pc, #440]	@ (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8010320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010324:	637b      	str	r3, [r7, #52]	@ 0x34
 8010326:	e3f4      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8010328:	2300      	movs	r3, #0
 801032a:	637b      	str	r3, [r7, #52]	@ 0x34
 801032c:	e3f1      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 801032e:	4b68      	ldr	r3, [pc, #416]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010338:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801033c:	d112      	bne.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 801033e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010344:	d10e      	bne.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010346:	4b62      	ldr	r3, [pc, #392]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801034c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010354:	d102      	bne.n	801035c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8010356:	23fa      	movs	r3, #250	@ 0xfa
 8010358:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801035a:	e3da      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 801035c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010360:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010362:	e3d6      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8010364:	4b5a      	ldr	r3, [pc, #360]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801036c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010370:	d106      	bne.n	8010380 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 8010372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010378:	d102      	bne.n	8010380 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 801037a:	4b56      	ldr	r3, [pc, #344]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 801037c:	637b      	str	r3, [r7, #52]	@ 0x34
 801037e:	e3c8      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8010380:	4b53      	ldr	r3, [pc, #332]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010386:	f003 0302 	and.w	r3, r3, #2
 801038a:	2b02      	cmp	r3, #2
 801038c:	d107      	bne.n	801039e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 801038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010390:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010394:	d103      	bne.n	801039e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8010396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801039a:	637b      	str	r3, [r7, #52]	@ 0x34
 801039c:	e3b9      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 801039e:	2300      	movs	r3, #0
 80103a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80103a2:	e3b6      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80103a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80103ac:	430b      	orrs	r3, r1
 80103ae:	d164      	bne.n	801047a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80103b0:	4b47      	ldr	r3, [pc, #284]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80103b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80103b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80103ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80103bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d120      	bne.n	8010404 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80103c2:	4b43      	ldr	r3, [pc, #268]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f003 0320 	and.w	r3, r3, #32
 80103ca:	2b20      	cmp	r3, #32
 80103cc:	d117      	bne.n	80103fe <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80103ce:	4b40      	ldr	r3, [pc, #256]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d005      	beq.n	80103e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 80103da:	4b3d      	ldr	r3, [pc, #244]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	0e1b      	lsrs	r3, r3, #24
 80103e0:	f003 030f 	and.w	r3, r3, #15
 80103e4:	e006      	b.n	80103f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80103e6:	4b3a      	ldr	r3, [pc, #232]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80103e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80103ec:	041b      	lsls	r3, r3, #16
 80103ee:	0e1b      	lsrs	r3, r3, #24
 80103f0:	f003 030f 	and.w	r3, r3, #15
 80103f4:	4a38      	ldr	r2, [pc, #224]	@ (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80103f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80103fc:	e389      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 80103fe:	2300      	movs	r3, #0
 8010400:	637b      	str	r3, [r7, #52]	@ 0x34
 8010402:	e386      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8010404:	4b32      	ldr	r3, [pc, #200]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801040a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801040e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010412:	d112      	bne.n	801043a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8010414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801041a:	d10e      	bne.n	801043a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801041c:	4b2c      	ldr	r3, [pc, #176]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801041e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801042a:	d102      	bne.n	8010432 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 801042c:	23fa      	movs	r3, #250	@ 0xfa
 801042e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010430:	e36f      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8010432:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8010436:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010438:	e36b      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 801043a:	4b25      	ldr	r3, [pc, #148]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010446:	d106      	bne.n	8010456 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8010448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801044a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801044e:	d102      	bne.n	8010456 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8010450:	4b20      	ldr	r3, [pc, #128]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8010452:	637b      	str	r3, [r7, #52]	@ 0x34
 8010454:	e35d      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8010456:	4b1e      	ldr	r3, [pc, #120]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	2b02      	cmp	r3, #2
 8010462:	d107      	bne.n	8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8010464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010466:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801046a:	d103      	bne.n	8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 801046c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010470:	637b      	str	r3, [r7, #52]	@ 0x34
 8010472:	e34e      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8010474:	2300      	movs	r3, #0
 8010476:	637b      	str	r3, [r7, #52]	@ 0x34
 8010478:	e34b      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 801047a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801047e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8010482:	430b      	orrs	r3, r1
 8010484:	d14e      	bne.n	8010524 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8010486:	4b12      	ldr	r3, [pc, #72]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801048c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8010490:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8010492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010494:	2b00      	cmp	r3, #0
 8010496:	d103      	bne.n	80104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010498:	f7fd fbb8 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 801049c:	6378      	str	r0, [r7, #52]	@ 0x34
 801049e:	e338      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80104a0:	4b0b      	ldr	r3, [pc, #44]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80104a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80104a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80104aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80104ae:	d119      	bne.n	80104e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 80104b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80104b6:	d115      	bne.n	80104e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80104b8:	4b05      	ldr	r3, [pc, #20]	@ (80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80104ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80104be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104c6:	d109      	bne.n	80104dc <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 80104c8:	23fa      	movs	r3, #250	@ 0xfa
 80104ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80104cc:	e321      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 80104ce:	bf00      	nop
 80104d0:	46020c00 	.word	0x46020c00
 80104d4:	00f42400 	.word	0x00f42400
 80104d8:	08018964 	.word	0x08018964
      }
      else
      {
        frequency = LSI_VALUE;
 80104dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80104e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80104e2:	e316      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80104e4:	4ba8      	ldr	r3, [pc, #672]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80104ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80104f0:	d106      	bne.n	8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 80104f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80104f8:	d102      	bne.n	8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 80104fa:	4ba4      	ldr	r3, [pc, #656]	@ (801078c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80104fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80104fe:	e308      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8010500:	4ba1      	ldr	r3, [pc, #644]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010506:	f003 0302 	and.w	r3, r3, #2
 801050a:	2b02      	cmp	r3, #2
 801050c:	d107      	bne.n	801051e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 801050e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010510:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8010514:	d103      	bne.n	801051e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8010516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801051a:	637b      	str	r3, [r7, #52]	@ 0x34
 801051c:	e2f9      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 801051e:	2300      	movs	r3, #0
 8010520:	637b      	str	r3, [r7, #52]	@ 0x34
 8010522:	e2f6      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8010524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010528:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 801052c:	430b      	orrs	r3, r1
 801052e:	d12d      	bne.n	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8010530:	4b95      	ldr	r3, [pc, #596]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010536:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 801053a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 801053c:	4b92      	ldr	r3, [pc, #584]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010548:	d105      	bne.n	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 801054a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8010550:	4b8e      	ldr	r3, [pc, #568]	@ (801078c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8010552:	637b      	str	r3, [r7, #52]	@ 0x34
 8010554:	e2dd      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8010556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801055c:	d107      	bne.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801055e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe fb4c 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8010568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801056a:	637b      	str	r3, [r7, #52]	@ 0x34
 801056c:	e2d1      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 801056e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010574:	d107      	bne.n	8010586 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010576:	f107 0318 	add.w	r3, r7, #24
 801057a:	4618      	mov	r0, r3
 801057c:	f7fe fc9a 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	637b      	str	r3, [r7, #52]	@ 0x34
 8010584:	e2c5      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8010586:	2300      	movs	r3, #0
 8010588:	637b      	str	r3, [r7, #52]	@ 0x34
 801058a:	e2c2      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 801058c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010590:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8010594:	430b      	orrs	r3, r1
 8010596:	d156      	bne.n	8010646 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8010598:	4b7b      	ldr	r3, [pc, #492]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 801059a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801059e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80105a2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80105a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80105aa:	d028      	beq.n	80105fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80105ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80105b2:	d845      	bhi.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80105b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80105ba:	d013      	beq.n	80105e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80105bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80105c2:	d83d      	bhi.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80105c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d004      	beq.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 80105ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105d0:	d004      	beq.n	80105dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80105d2:	e035      	b.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80105d4:	f7fd fb2e 	bl	800dc34 <HAL_RCC_GetPCLK2Freq>
 80105d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80105da:	e29a      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80105dc:	f7fd f9fa 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 80105e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80105e2:	e296      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80105e4:	4b68      	ldr	r3, [pc, #416]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80105ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105f0:	d102      	bne.n	80105f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 80105f2:	4b66      	ldr	r3, [pc, #408]	@ (801078c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80105f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80105f6:	e28c      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80105f8:	2300      	movs	r3, #0
 80105fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80105fc:	e289      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80105fe:	4b62      	ldr	r3, [pc, #392]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f003 0320 	and.w	r3, r3, #32
 8010606:	2b20      	cmp	r3, #32
 8010608:	d117      	bne.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801060a:	4b5f      	ldr	r3, [pc, #380]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010612:	2b00      	cmp	r3, #0
 8010614:	d005      	beq.n	8010622 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8010616:	4b5c      	ldr	r3, [pc, #368]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	0e1b      	lsrs	r3, r3, #24
 801061c:	f003 030f 	and.w	r3, r3, #15
 8010620:	e006      	b.n	8010630 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8010622:	4b59      	ldr	r3, [pc, #356]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010624:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010628:	041b      	lsls	r3, r3, #16
 801062a:	0e1b      	lsrs	r3, r3, #24
 801062c:	f003 030f 	and.w	r3, r3, #15
 8010630:	4a57      	ldr	r2, [pc, #348]	@ (8010790 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8010632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010636:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010638:	e26b      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 801063a:	2300      	movs	r3, #0
 801063c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801063e:	e268      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010640:	2300      	movs	r3, #0
 8010642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010644:	e265      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8010646:	e9d7 2300 	ldrd	r2, r3, [r7]
 801064a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 801064e:	430b      	orrs	r3, r1
 8010650:	d156      	bne.n	8010700 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8010652:	4b4d      	ldr	r3, [pc, #308]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801065c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 801065e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010660:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010664:	d028      	beq.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8010666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010668:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801066c:	d845      	bhi.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 801066e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010674:	d013      	beq.n	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8010676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801067c:	d83d      	bhi.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 801067e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010680:	2b00      	cmp	r3, #0
 8010682:	d004      	beq.n	801068e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8010684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801068a:	d004      	beq.n	8010696 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 801068c:	e035      	b.n	80106fa <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 801068e:	f7fd fabd 	bl	800dc0c <HAL_RCC_GetPCLK1Freq>
 8010692:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8010694:	e23d      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010696:	f7fd f99d 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 801069a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801069c:	e239      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801069e:	4b3a      	ldr	r3, [pc, #232]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80106a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80106aa:	d102      	bne.n	80106b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 80106ac:	4b37      	ldr	r3, [pc, #220]	@ (801078c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80106ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80106b0:	e22f      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80106b2:	2300      	movs	r3, #0
 80106b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80106b6:	e22c      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80106b8:	4b33      	ldr	r3, [pc, #204]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f003 0320 	and.w	r3, r3, #32
 80106c0:	2b20      	cmp	r3, #32
 80106c2:	d117      	bne.n	80106f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80106c4:	4b30      	ldr	r3, [pc, #192]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d005      	beq.n	80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 80106d0:	4b2d      	ldr	r3, [pc, #180]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	0e1b      	lsrs	r3, r3, #24
 80106d6:	f003 030f 	and.w	r3, r3, #15
 80106da:	e006      	b.n	80106ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80106dc:	4b2a      	ldr	r3, [pc, #168]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80106de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80106e2:	041b      	lsls	r3, r3, #16
 80106e4:	0e1b      	lsrs	r3, r3, #24
 80106e6:	f003 030f 	and.w	r3, r3, #15
 80106ea:	4a29      	ldr	r2, [pc, #164]	@ (8010790 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 80106ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80106f2:	e20e      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80106f4:	2300      	movs	r3, #0
 80106f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80106f8:	e20b      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80106fa:	2300      	movs	r3, #0
 80106fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80106fe:	e208      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8010700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010704:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8010708:	430b      	orrs	r3, r1
 801070a:	d17c      	bne.n	8010806 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 801070c:	4b1e      	ldr	r3, [pc, #120]	@ (8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 801070e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010712:	f003 0318 	and.w	r3, r3, #24
 8010716:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8010718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801071a:	2b18      	cmp	r3, #24
 801071c:	d870      	bhi.n	8010800 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 801071e:	a201      	add	r2, pc, #4	@ (adr r2, 8010724 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8010720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010724:	08010795 	.word	0x08010795
 8010728:	08010801 	.word	0x08010801
 801072c:	08010801 	.word	0x08010801
 8010730:	08010801 	.word	0x08010801
 8010734:	08010801 	.word	0x08010801
 8010738:	08010801 	.word	0x08010801
 801073c:	08010801 	.word	0x08010801
 8010740:	08010801 	.word	0x08010801
 8010744:	0801079d 	.word	0x0801079d
 8010748:	08010801 	.word	0x08010801
 801074c:	08010801 	.word	0x08010801
 8010750:	08010801 	.word	0x08010801
 8010754:	08010801 	.word	0x08010801
 8010758:	08010801 	.word	0x08010801
 801075c:	08010801 	.word	0x08010801
 8010760:	08010801 	.word	0x08010801
 8010764:	080107a5 	.word	0x080107a5
 8010768:	08010801 	.word	0x08010801
 801076c:	08010801 	.word	0x08010801
 8010770:	08010801 	.word	0x08010801
 8010774:	08010801 	.word	0x08010801
 8010778:	08010801 	.word	0x08010801
 801077c:	08010801 	.word	0x08010801
 8010780:	08010801 	.word	0x08010801
 8010784:	080107bf 	.word	0x080107bf
 8010788:	46020c00 	.word	0x46020c00
 801078c:	00f42400 	.word	0x00f42400
 8010790:	08018964 	.word	0x08018964
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8010794:	f7fd fa62 	bl	800dc5c <HAL_RCC_GetPCLK3Freq>
 8010798:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801079a:	e1ba      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 801079c:	f7fd f91a 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 80107a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80107a2:	e1b6      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80107a4:	4b9f      	ldr	r3, [pc, #636]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80107ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107b0:	d102      	bne.n	80107b8 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 80107b2:	4b9d      	ldr	r3, [pc, #628]	@ (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80107b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80107b6:	e1ac      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80107b8:	2300      	movs	r3, #0
 80107ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80107bc:	e1a9      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80107be:	4b99      	ldr	r3, [pc, #612]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f003 0320 	and.w	r3, r3, #32
 80107c6:	2b20      	cmp	r3, #32
 80107c8:	d117      	bne.n	80107fa <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80107ca:	4b96      	ldr	r3, [pc, #600]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d005      	beq.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 80107d6:	4b93      	ldr	r3, [pc, #588]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	0e1b      	lsrs	r3, r3, #24
 80107dc:	f003 030f 	and.w	r3, r3, #15
 80107e0:	e006      	b.n	80107f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 80107e2:	4b90      	ldr	r3, [pc, #576]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80107e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80107e8:	041b      	lsls	r3, r3, #16
 80107ea:	0e1b      	lsrs	r3, r3, #24
 80107ec:	f003 030f 	and.w	r3, r3, #15
 80107f0:	4a8e      	ldr	r2, [pc, #568]	@ (8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80107f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80107f8:	e18b      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80107fa:	2300      	movs	r3, #0
 80107fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80107fe:	e188      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010800:	2300      	movs	r3, #0
 8010802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010804:	e185      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8010806:	e9d7 2300 	ldrd	r2, r3, [r7]
 801080a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 801080e:	430b      	orrs	r3, r1
 8010810:	d155      	bne.n	80108be <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8010812:	4b84      	ldr	r3, [pc, #528]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010818:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 801081c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 801081e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010824:	d013      	beq.n	801084e <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 8010826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010828:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801082c:	d844      	bhi.n	80108b8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 801082e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010830:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010834:	d013      	beq.n	801085e <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 8010836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010838:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801083c:	d83c      	bhi.n	80108b8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 801083e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010840:	2b00      	cmp	r3, #0
 8010842:	d014      	beq.n	801086e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8010844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010846:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801084a:	d014      	beq.n	8010876 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 801084c:	e034      	b.n	80108b8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801084e:	f107 0318 	add.w	r3, r7, #24
 8010852:	4618      	mov	r0, r3
 8010854:	f7fe fb2e 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801085c:	e159      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010862:	4618      	mov	r0, r3
 8010864:	f7fe f9cc 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801086a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801086c:	e151      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 801086e:	f7fd f8b1 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 8010872:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8010874:	e14d      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010876:	4b6b      	ldr	r3, [pc, #428]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f003 0320 	and.w	r3, r3, #32
 801087e:	2b20      	cmp	r3, #32
 8010880:	d117      	bne.n	80108b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010882:	4b68      	ldr	r3, [pc, #416]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801088a:	2b00      	cmp	r3, #0
 801088c:	d005      	beq.n	801089a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 801088e:	4b65      	ldr	r3, [pc, #404]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	0e1b      	lsrs	r3, r3, #24
 8010894:	f003 030f 	and.w	r3, r3, #15
 8010898:	e006      	b.n	80108a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 801089a:	4b62      	ldr	r3, [pc, #392]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 801089c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80108a0:	041b      	lsls	r3, r3, #16
 80108a2:	0e1b      	lsrs	r3, r3, #24
 80108a4:	f003 030f 	and.w	r3, r3, #15
 80108a8:	4a60      	ldr	r2, [pc, #384]	@ (8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80108aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80108b0:	e12f      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80108b2:	2300      	movs	r3, #0
 80108b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80108b6:	e12c      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80108b8:	2300      	movs	r3, #0
 80108ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80108bc:	e129      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80108be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108c2:	1e59      	subs	r1, r3, #1
 80108c4:	ea52 0301 	orrs.w	r3, r2, r1
 80108c8:	d13c      	bne.n	8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80108ca:	4b56      	ldr	r3, [pc, #344]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80108cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80108d0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80108d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80108d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80108dc:	d027      	beq.n	801092e <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 80108de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80108e4:	d82b      	bhi.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 80108e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80108ec:	d017      	beq.n	801091e <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 80108ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80108f4:	d823      	bhi.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d004      	beq.n	8010906 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 80108fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010902:	d004      	beq.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8010904:	e01b      	b.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010906:	f7fd f865 	bl	800d9d4 <HAL_RCC_GetSysClockFreq>
 801090a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 801090c:	e101      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe f974 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801091a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801091c:	e0f9      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801091e:	f107 0318 	add.w	r3, r7, #24
 8010922:	4618      	mov	r0, r3
 8010924:	f7fe fac6 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801092c:	e0f1      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801092e:	f107 030c 	add.w	r3, r7, #12
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe fc18 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801093c:	e0e9      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 801093e:	2300      	movs	r3, #0
 8010940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010942:	e0e6      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8010944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010948:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 801094c:	430b      	orrs	r3, r1
 801094e:	d131      	bne.n	80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8010950:	4b34      	ldr	r3, [pc, #208]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010956:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801095a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 801095c:	4b31      	ldr	r3, [pc, #196]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 801095e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010962:	f003 0302 	and.w	r3, r3, #2
 8010966:	2b02      	cmp	r3, #2
 8010968:	d106      	bne.n	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 801096a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801096c:	2b00      	cmp	r3, #0
 801096e:	d103      	bne.n	8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 8010970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010974:	637b      	str	r3, [r7, #52]	@ 0x34
 8010976:	e0cc      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8010978:	4b2a      	ldr	r3, [pc, #168]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 801097a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801097e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010986:	d112      	bne.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 8010988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801098e:	d10e      	bne.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010990:	4b24      	ldr	r3, [pc, #144]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801099a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801099e:	d102      	bne.n	80109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 80109a0:	23fa      	movs	r3, #250	@ 0xfa
 80109a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80109a4:	e0b5      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80109a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80109aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80109ac:	e0b1      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80109ae:	2300      	movs	r3, #0
 80109b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80109b2:	e0ae      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80109b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109b8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80109bc:	430b      	orrs	r3, r1
 80109be:	d13b      	bne.n	8010a38 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80109c0:	4b18      	ldr	r3, [pc, #96]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80109c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80109c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80109ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80109cc:	4b15      	ldr	r3, [pc, #84]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80109d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80109d8:	d105      	bne.n	80109e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 80109da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d102      	bne.n	80109e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 80109e0:	4b13      	ldr	r3, [pc, #76]	@ (8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80109e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80109e4:	e095      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80109e6:	4b0f      	ldr	r3, [pc, #60]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80109ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80109f2:	d106      	bne.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 80109f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109fa:	d102      	bne.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 80109fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 80109fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a00:	e087      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8010a02:	4b08      	ldr	r3, [pc, #32]	@ (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010a0e:	d106      	bne.n	8010a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 8010a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a16:	d102      	bne.n	8010a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 8010a18:	4b03      	ldr	r3, [pc, #12]	@ (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8010a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a1c:	e079      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a22:	e076      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8010a24:	46020c00 	.word	0x46020c00
 8010a28:	00f42400 	.word	0x00f42400
 8010a2c:	08018964 	.word	0x08018964
 8010a30:	02dc6c00 	.word	0x02dc6c00
 8010a34:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8010a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a3c:	1e99      	subs	r1, r3, #2
 8010a3e:	ea52 0301 	orrs.w	r3, r2, r1
 8010a42:	d120      	bne.n	8010a86 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 8010a44:	4b35      	ldr	r3, [pc, #212]	@ (8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010a46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010a4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8010a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d004      	beq.n	8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 8010a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010a5c:	d008      	beq.n	8010a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8010a5e:	e00f      	b.n	8010a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a60:	f107 030c 	add.w	r3, r7, #12
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fe fb7f 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010a6e:	e050      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a70:	f107 0318 	add.w	r3, r7, #24
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fe fa1d 	bl	800eeb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8010a7a:	6a3b      	ldr	r3, [r7, #32]
 8010a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010a7e:	e048      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010a80:	2300      	movs	r3, #0
 8010a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010a84:	e045      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8010a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a8a:	f1a3 0108 	sub.w	r1, r3, #8
 8010a8e:	ea52 0301 	orrs.w	r3, r2, r1
 8010a92:	d13c      	bne.n	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8010a94:	4b21      	ldr	r3, [pc, #132]	@ (8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010a96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010a9a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010a9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8010aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010aac:	d105      	bne.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 8010aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d102      	bne.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 8010ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8010b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 8010ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ab8:	e02b      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8010aba:	4b18      	ldr	r3, [pc, #96]	@ (8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010ac6:	d106      	bne.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010ace:	d102      	bne.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 8010ad0:	4b14      	ldr	r3, [pc, #80]	@ (8010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 8010ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ad4:	e01d      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010adc:	d107      	bne.n	8010aee <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fe f88c 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8010aec:	e011      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8010aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8010af4:	d108      	bne.n	8010b08 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe f880 	bl	800ec00 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8010b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b02:	085b      	lsrs	r3, r3, #1
 8010b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b06:	e004      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b0c:	e001      	b.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8010b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3738      	adds	r7, #56	@ 0x38
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	46020c00 	.word	0x46020c00
 8010b20:	00f42400 	.word	0x00f42400
 8010b24:	007a1200 	.word	0x007a1200

08010b28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010b30:	4b47      	ldr	r3, [pc, #284]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a46      	ldr	r2, [pc, #280]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010b3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010b3c:	f7f5 f810 	bl	8005b60 <HAL_GetTick>
 8010b40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010b42:	e008      	b.n	8010b56 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010b44:	f7f5 f80c 	bl	8005b60 <HAL_GetTick>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	1ad3      	subs	r3, r2, r3
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	d901      	bls.n	8010b56 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010b52:	2303      	movs	r3, #3
 8010b54:	e077      	b.n	8010c46 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010b56:	4b3e      	ldr	r3, [pc, #248]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1f0      	bne.n	8010b44 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8010b62:	4b3b      	ldr	r3, [pc, #236]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010b6a:	f023 0303 	bic.w	r3, r3, #3
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	6811      	ldr	r1, [r2, #0]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	6852      	ldr	r2, [r2, #4]
 8010b76:	3a01      	subs	r2, #1
 8010b78:	0212      	lsls	r2, r2, #8
 8010b7a:	430a      	orrs	r2, r1
 8010b7c:	4934      	ldr	r1, [pc, #208]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010b82:	4b33      	ldr	r3, [pc, #204]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010b86:	4b33      	ldr	r3, [pc, #204]	@ (8010c54 <RCCEx_PLL2_Config+0x12c>)
 8010b88:	4013      	ands	r3, r2
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	6892      	ldr	r2, [r2, #8]
 8010b8e:	3a01      	subs	r2, #1
 8010b90:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	68d2      	ldr	r2, [r2, #12]
 8010b98:	3a01      	subs	r2, #1
 8010b9a:	0252      	lsls	r2, r2, #9
 8010b9c:	b292      	uxth	r2, r2
 8010b9e:	4311      	orrs	r1, r2
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	6912      	ldr	r2, [r2, #16]
 8010ba4:	3a01      	subs	r2, #1
 8010ba6:	0412      	lsls	r2, r2, #16
 8010ba8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8010bac:	4311      	orrs	r1, r2
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	6952      	ldr	r2, [r2, #20]
 8010bb2:	3a01      	subs	r2, #1
 8010bb4:	0612      	lsls	r2, r2, #24
 8010bb6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8010bba:	430a      	orrs	r2, r1
 8010bbc:	4924      	ldr	r1, [pc, #144]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8010bc2:	4b23      	ldr	r3, [pc, #140]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bc6:	f023 020c 	bic.w	r2, r3, #12
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	699b      	ldr	r3, [r3, #24]
 8010bce:	4920      	ldr	r1, [pc, #128]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8010bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6a1b      	ldr	r3, [r3, #32]
 8010bdc:	491c      	ldr	r1, [pc, #112]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010bde:	4313      	orrs	r3, r2
 8010be0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8010be2:	4b1b      	ldr	r3, [pc, #108]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010be6:	4a1a      	ldr	r2, [pc, #104]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010be8:	f023 0310 	bic.w	r3, r3, #16
 8010bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010bee:	4b18      	ldr	r3, [pc, #96]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010bf6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	69d2      	ldr	r2, [r2, #28]
 8010bfe:	00d2      	lsls	r2, r2, #3
 8010c00:	4913      	ldr	r1, [pc, #76]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010c02:	4313      	orrs	r3, r2
 8010c04:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8010c06:	4b12      	ldr	r3, [pc, #72]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c0a:	4a11      	ldr	r2, [pc, #68]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010c0c:	f043 0310 	orr.w	r3, r3, #16
 8010c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8010c12:	4b0f      	ldr	r3, [pc, #60]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a0e      	ldr	r2, [pc, #56]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010c18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010c1c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010c1e:	f7f4 ff9f 	bl	8005b60 <HAL_GetTick>
 8010c22:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010c24:	e008      	b.n	8010c38 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010c26:	f7f4 ff9b 	bl	8005b60 <HAL_GetTick>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	1ad3      	subs	r3, r2, r3
 8010c30:	2b02      	cmp	r3, #2
 8010c32:	d901      	bls.n	8010c38 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010c34:	2303      	movs	r3, #3
 8010c36:	e006      	b.n	8010c46 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010c38:	4b05      	ldr	r3, [pc, #20]	@ (8010c50 <RCCEx_PLL2_Config+0x128>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d0f0      	beq.n	8010c26 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8010c44:	2300      	movs	r3, #0

}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	46020c00 	.word	0x46020c00
 8010c54:	80800000 	.word	0x80800000

08010c58 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8010c60:	4b47      	ldr	r3, [pc, #284]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a46      	ldr	r2, [pc, #280]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010c6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010c6c:	f7f4 ff78 	bl	8005b60 <HAL_GetTick>
 8010c70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010c72:	e008      	b.n	8010c86 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010c74:	f7f4 ff74 	bl	8005b60 <HAL_GetTick>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d901      	bls.n	8010c86 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010c82:	2303      	movs	r3, #3
 8010c84:	e077      	b.n	8010d76 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010c86:	4b3e      	ldr	r3, [pc, #248]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1f0      	bne.n	8010c74 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8010c92:	4b3b      	ldr	r3, [pc, #236]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c96:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010c9a:	f023 0303 	bic.w	r3, r3, #3
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	6811      	ldr	r1, [r2, #0]
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	6852      	ldr	r2, [r2, #4]
 8010ca6:	3a01      	subs	r2, #1
 8010ca8:	0212      	lsls	r2, r2, #8
 8010caa:	430a      	orrs	r2, r1
 8010cac:	4934      	ldr	r1, [pc, #208]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	630b      	str	r3, [r1, #48]	@ 0x30
 8010cb2:	4b33      	ldr	r3, [pc, #204]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cb6:	4b33      	ldr	r3, [pc, #204]	@ (8010d84 <RCCEx_PLL3_Config+0x12c>)
 8010cb8:	4013      	ands	r3, r2
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	6892      	ldr	r2, [r2, #8]
 8010cbe:	3a01      	subs	r2, #1
 8010cc0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	68d2      	ldr	r2, [r2, #12]
 8010cc8:	3a01      	subs	r2, #1
 8010cca:	0252      	lsls	r2, r2, #9
 8010ccc:	b292      	uxth	r2, r2
 8010cce:	4311      	orrs	r1, r2
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	6912      	ldr	r2, [r2, #16]
 8010cd4:	3a01      	subs	r2, #1
 8010cd6:	0412      	lsls	r2, r2, #16
 8010cd8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8010cdc:	4311      	orrs	r1, r2
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	6952      	ldr	r2, [r2, #20]
 8010ce2:	3a01      	subs	r2, #1
 8010ce4:	0612      	lsls	r2, r2, #24
 8010ce6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8010cea:	430a      	orrs	r2, r1
 8010cec:	4924      	ldr	r1, [pc, #144]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8010cf2:	4b23      	ldr	r3, [pc, #140]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cf6:	f023 020c 	bic.w	r2, r3, #12
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	699b      	ldr	r3, [r3, #24]
 8010cfe:	4920      	ldr	r1, [pc, #128]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d00:	4313      	orrs	r3, r2
 8010d02:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8010d04:	4b1e      	ldr	r3, [pc, #120]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a1b      	ldr	r3, [r3, #32]
 8010d0c:	491c      	ldr	r1, [pc, #112]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8010d12:	4b1b      	ldr	r3, [pc, #108]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d16:	4a1a      	ldr	r2, [pc, #104]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d18:	f023 0310 	bic.w	r3, r3, #16
 8010d1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010d1e:	4b18      	ldr	r3, [pc, #96]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010d26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	69d2      	ldr	r2, [r2, #28]
 8010d2e:	00d2      	lsls	r2, r2, #3
 8010d30:	4913      	ldr	r1, [pc, #76]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d32:	4313      	orrs	r3, r2
 8010d34:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8010d36:	4b12      	ldr	r3, [pc, #72]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d3a:	4a11      	ldr	r2, [pc, #68]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d3c:	f043 0310 	orr.w	r3, r3, #16
 8010d40:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010d42:	4b0f      	ldr	r3, [pc, #60]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4a0e      	ldr	r2, [pc, #56]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010d4c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010d4e:	f7f4 ff07 	bl	8005b60 <HAL_GetTick>
 8010d52:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010d54:	e008      	b.n	8010d68 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010d56:	f7f4 ff03 	bl	8005b60 <HAL_GetTick>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	2b02      	cmp	r3, #2
 8010d62:	d901      	bls.n	8010d68 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010d64:	2303      	movs	r3, #3
 8010d66:	e006      	b.n	8010d76 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010d68:	4b05      	ldr	r3, [pc, #20]	@ (8010d80 <RCCEx_PLL3_Config+0x128>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d0f0      	beq.n	8010d56 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3710      	adds	r7, #16
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	46020c00 	.word	0x46020c00
 8010d84:	80800000 	.word	0x80800000

08010d88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010d90:	2301      	movs	r3, #1
 8010d92:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d071      	beq.n	8010e7e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7f3 ff6c 	bl	8004c8c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2202      	movs	r2, #2
 8010db8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010dbc:	4b32      	ldr	r3, [pc, #200]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	f003 0310 	and.w	r3, r3, #16
 8010dc4:	2b10      	cmp	r3, #16
 8010dc6:	d051      	beq.n	8010e6c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010dca:	22ca      	movs	r2, #202	@ 0xca
 8010dcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010dce:	4b2e      	ldr	r3, [pc, #184]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010dd0:	2253      	movs	r2, #83	@ 0x53
 8010dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 f88b 	bl	8010ef0 <RTC_EnterInitMode>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010dde:	7bfb      	ldrb	r3, [r7, #15]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d13f      	bne.n	8010e64 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8010de4:	4b28      	ldr	r3, [pc, #160]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010de6:	699b      	ldr	r3, [r3, #24]
 8010de8:	4a27      	ldr	r2, [pc, #156]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010dea:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8010dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010df2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8010df4:	4b24      	ldr	r3, [pc, #144]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010df6:	699a      	ldr	r2, [r3, #24]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6859      	ldr	r1, [r3, #4]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	691b      	ldr	r3, [r3, #16]
 8010e00:	4319      	orrs	r1, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	699b      	ldr	r3, [r3, #24]
 8010e06:	430b      	orrs	r3, r1
 8010e08:	491f      	ldr	r1, [pc, #124]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	68da      	ldr	r2, [r3, #12]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	041b      	lsls	r3, r3, #16
 8010e18:	491b      	ldr	r1, [pc, #108]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e2e:	430b      	orrs	r3, r1
 8010e30:	4915      	ldr	r1, [pc, #84]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e32:	4313      	orrs	r3, r2
 8010e34:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 f896 	bl	8010f68 <RTC_ExitInitMode>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8010e40:	7bfb      	ldrb	r3, [r7, #15]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10e      	bne.n	8010e64 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8010e46:	4b10      	ldr	r3, [pc, #64]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e48:	699b      	ldr	r3, [r3, #24]
 8010e4a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a19      	ldr	r1, [r3, #32]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	4319      	orrs	r1, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	695b      	ldr	r3, [r3, #20]
 8010e5c:	430b      	orrs	r3, r1
 8010e5e:	490a      	ldr	r1, [pc, #40]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e60:	4313      	orrs	r3, r2
 8010e62:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e64:	4b08      	ldr	r3, [pc, #32]	@ (8010e88 <HAL_RTC_Init+0x100>)
 8010e66:	22ff      	movs	r2, #255	@ 0xff
 8010e68:	625a      	str	r2, [r3, #36]	@ 0x24
 8010e6a:	e001      	b.n	8010e70 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d103      	bne.n	8010e7e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2201      	movs	r2, #1
 8010e7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	46007800 	.word	0x46007800

08010e8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8010e94:	4b15      	ldr	r3, [pc, #84]	@ (8010eec <HAL_RTC_WaitForSynchro+0x60>)
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	4a14      	ldr	r2, [pc, #80]	@ (8010eec <HAL_RTC_WaitForSynchro+0x60>)
 8010e9a:	f023 0320 	bic.w	r3, r3, #32
 8010e9e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010ea0:	f7f4 fe5e 	bl	8005b60 <HAL_GetTick>
 8010ea4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010ea6:	e013      	b.n	8010ed0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010ea8:	f7f4 fe5a 	bl	8005b60 <HAL_GetTick>
 8010eac:	4602      	mov	r2, r0
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	1ad3      	subs	r3, r2, r3
 8010eb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010eb6:	d90b      	bls.n	8010ed0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010eec <HAL_RTC_WaitForSynchro+0x60>)
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	f003 0320 	and.w	r3, r3, #32
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d10c      	bne.n	8010ede <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2203      	movs	r2, #3
 8010ec8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8010ecc:	2303      	movs	r3, #3
 8010ece:	e008      	b.n	8010ee2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010ed0:	4b06      	ldr	r3, [pc, #24]	@ (8010eec <HAL_RTC_WaitForSynchro+0x60>)
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	f003 0320 	and.w	r3, r3, #32
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d0e5      	beq.n	8010ea8 <HAL_RTC_WaitForSynchro+0x1c>
 8010edc:	e000      	b.n	8010ee0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8010ede:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3710      	adds	r7, #16
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	46007800 	.word	0x46007800

08010ef0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010efc:	4b19      	ldr	r3, [pc, #100]	@ (8010f64 <RTC_EnterInitMode+0x74>)
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d128      	bne.n	8010f5a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010f08:	4b16      	ldr	r3, [pc, #88]	@ (8010f64 <RTC_EnterInitMode+0x74>)
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	4a15      	ldr	r2, [pc, #84]	@ (8010f64 <RTC_EnterInitMode+0x74>)
 8010f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f12:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8010f14:	f7f4 fe24 	bl	8005b60 <HAL_GetTick>
 8010f18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010f1a:	e013      	b.n	8010f44 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010f1c:	f7f4 fe20 	bl	8005b60 <HAL_GetTick>
 8010f20:	4602      	mov	r2, r0
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010f2a:	d90b      	bls.n	8010f44 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <RTC_EnterInitMode+0x74>)
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d10f      	bne.n	8010f58 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8010f38:	2303      	movs	r3, #3
 8010f3a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2203      	movs	r2, #3
 8010f40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010f44:	4b07      	ldr	r3, [pc, #28]	@ (8010f64 <RTC_EnterInitMode+0x74>)
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d104      	bne.n	8010f5a <RTC_EnterInitMode+0x6a>
 8010f50:	7bfb      	ldrb	r3, [r7, #15]
 8010f52:	2b03      	cmp	r3, #3
 8010f54:	d1e2      	bne.n	8010f1c <RTC_EnterInitMode+0x2c>
 8010f56:	e000      	b.n	8010f5a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8010f58:	bf00      	nop
        }
      }
    }
  }

  return status;
 8010f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3710      	adds	r7, #16
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	46007800 	.word	0x46007800

08010f68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010f74:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	4a19      	ldr	r2, [pc, #100]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f7e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010f80:	4b17      	ldr	r3, [pc, #92]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010f82:	699b      	ldr	r3, [r3, #24]
 8010f84:	f003 0320 	and.w	r3, r3, #32
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10c      	bne.n	8010fa6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7ff ff7d 	bl	8010e8c <HAL_RTC_WaitForSynchro>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d01e      	beq.n	8010fd6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2203      	movs	r2, #3
 8010f9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8010fa0:	2303      	movs	r3, #3
 8010fa2:	73fb      	strb	r3, [r7, #15]
 8010fa4:	e017      	b.n	8010fd6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010fa8:	699b      	ldr	r3, [r3, #24]
 8010faa:	4a0d      	ldr	r2, [pc, #52]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010fac:	f023 0320 	bic.w	r3, r3, #32
 8010fb0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7ff ff6a 	bl	8010e8c <HAL_RTC_WaitForSynchro>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d005      	beq.n	8010fca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2203      	movs	r2, #3
 8010fc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8010fc6:	2303      	movs	r3, #3
 8010fc8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010fca:	4b05      	ldr	r3, [pc, #20]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010fcc:	699b      	ldr	r3, [r3, #24]
 8010fce:	4a04      	ldr	r2, [pc, #16]	@ (8010fe0 <RTC_ExitInitMode+0x78>)
 8010fd0:	f043 0320 	orr.w	r3, r3, #32
 8010fd4:	6193      	str	r3, [r2, #24]
  }
  return status;
 8010fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3710      	adds	r7, #16
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	46007800 	.word	0x46007800

08010fe4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	4910      	ldr	r1, [pc, #64]	@ (8011038 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	689a      	ldr	r2, [r3, #8]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	431a      	orrs	r2, r3
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	490c      	ldr	r1, [pc, #48]	@ (801103c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801100c:	4313      	orrs	r3, r2
 801100e:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8011010:	4b0a      	ldr	r3, [pc, #40]	@ (801103c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8011012:	6a1b      	ldr	r3, [r3, #32]
 8011014:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	6919      	ldr	r1, [r3, #16]
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	695b      	ldr	r3, [r3, #20]
 8011020:	041b      	lsls	r3, r3, #16
 8011022:	430b      	orrs	r3, r1
 8011024:	4905      	ldr	r1, [pc, #20]	@ (801103c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8011026:	4313      	orrs	r3, r2
 8011028:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 801102a:	2300      	movs	r3, #0
}
 801102c:	4618      	mov	r0, r3
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr
 8011038:	46007800 	.word	0x46007800
 801103c:	46007c00 	.word	0x46007c00

08011040 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b086      	sub	sp, #24
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	2b02      	cmp	r3, #2
 8011052:	d904      	bls.n	801105e <HAL_SAI_InitProtocol+0x1e>
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	3b03      	subs	r3, #3
 8011058:	2b01      	cmp	r3, #1
 801105a:	d812      	bhi.n	8011082 <HAL_SAI_InitProtocol+0x42>
 801105c:	e008      	b.n	8011070 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	687a      	ldr	r2, [r7, #4]
 8011062:	68b9      	ldr	r1, [r7, #8]
 8011064:	68f8      	ldr	r0, [r7, #12]
 8011066:	f000 faff 	bl	8011668 <SAI_InitI2S>
 801106a:	4603      	mov	r3, r0
 801106c:	75fb      	strb	r3, [r7, #23]
      break;
 801106e:	e00b      	b.n	8011088 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	68b9      	ldr	r1, [r7, #8]
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f000 fba8 	bl	80117cc <SAI_InitPCM>
 801107c:	4603      	mov	r3, r0
 801107e:	75fb      	strb	r3, [r7, #23]
      break;
 8011080:	e002      	b.n	8011088 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	75fb      	strb	r3, [r7, #23]
      break;
 8011086:	bf00      	nop
  }

  if (status == HAL_OK)
 8011088:	7dfb      	ldrb	r3, [r7, #23]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d104      	bne.n	8011098 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 f808 	bl	80110a4 <HAL_SAI_Init>
 8011094:	4603      	mov	r3, r0
 8011096:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8011098:	7dfb      	ldrb	r3, [r7, #23]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3718      	adds	r7, #24
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
	...

080110a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b08a      	sub	sp, #40	@ 0x28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e1ce      	b.n	8011454 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d10e      	bne.n	80110de <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a83      	ldr	r2, [pc, #524]	@ (80112d4 <HAL_SAI_Init+0x230>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d107      	bne.n	80110da <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d103      	bne.n	80110da <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80110da:	2301      	movs	r3, #1
 80110dc:	e1ba      	b.n	8011454 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f7f3 fef4 	bl	8004ee0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 fc21 	bl	8011940 <SAI_Disable>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8011104:	2301      	movs	r3, #1
 8011106:	e1a5      	b.n	8011454 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2202      	movs	r2, #2
 801110c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	2b02      	cmp	r3, #2
 8011116:	d00c      	beq.n	8011132 <HAL_SAI_Init+0x8e>
 8011118:	2b02      	cmp	r3, #2
 801111a:	d80d      	bhi.n	8011138 <HAL_SAI_Init+0x94>
 801111c:	2b00      	cmp	r3, #0
 801111e:	d002      	beq.n	8011126 <HAL_SAI_Init+0x82>
 8011120:	2b01      	cmp	r3, #1
 8011122:	d003      	beq.n	801112c <HAL_SAI_Init+0x88>
 8011124:	e008      	b.n	8011138 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8011126:	2300      	movs	r3, #0
 8011128:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801112a:	e008      	b.n	801113e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 801112c:	2310      	movs	r3, #16
 801112e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011130:	e005      	b.n	801113e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8011132:	2320      	movs	r3, #32
 8011134:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011136:	e002      	b.n	801113e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8011138:	2300      	movs	r3, #0
 801113a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801113c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	689b      	ldr	r3, [r3, #8]
 8011142:	2b03      	cmp	r3, #3
 8011144:	d81d      	bhi.n	8011182 <HAL_SAI_Init+0xde>
 8011146:	a201      	add	r2, pc, #4	@ (adr r2, 801114c <HAL_SAI_Init+0xa8>)
 8011148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801114c:	0801115d 	.word	0x0801115d
 8011150:	08011163 	.word	0x08011163
 8011154:	0801116b 	.word	0x0801116b
 8011158:	08011173 	.word	0x08011173
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	61fb      	str	r3, [r7, #28]
      break;
 8011160:	e012      	b.n	8011188 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8011162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011166:	61fb      	str	r3, [r7, #28]
      break;
 8011168:	e00e      	b.n	8011188 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801116a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801116e:	61fb      	str	r3, [r7, #28]
      break;
 8011170:	e00a      	b.n	8011188 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011172:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011176:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8011178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801117a:	f043 0301 	orr.w	r3, r3, #1
 801117e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011180:	e002      	b.n	8011188 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8011182:	2300      	movs	r3, #0
 8011184:	61fb      	str	r3, [r7, #28]
      break;
 8011186:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a51      	ldr	r2, [pc, #324]	@ (80112d4 <HAL_SAI_Init+0x230>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d004      	beq.n	801119c <HAL_SAI_Init+0xf8>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	4a50      	ldr	r2, [pc, #320]	@ (80112d8 <HAL_SAI_Init+0x234>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d103      	bne.n	80111a4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 801119c:	4a4f      	ldr	r2, [pc, #316]	@ (80112dc <HAL_SAI_Init+0x238>)
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	6013      	str	r3, [r2, #0]
 80111a2:	e002      	b.n	80111aa <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80111a4:	4a4e      	ldr	r2, [pc, #312]	@ (80112e0 <HAL_SAI_Init+0x23c>)
 80111a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a8:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d077      	beq.n	80112a2 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	4a47      	ldr	r2, [pc, #284]	@ (80112d4 <HAL_SAI_Init+0x230>)
 80111b8:	4293      	cmp	r3, r2
 80111ba:	d004      	beq.n	80111c6 <HAL_SAI_Init+0x122>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4a45      	ldr	r2, [pc, #276]	@ (80112d8 <HAL_SAI_Init+0x234>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d107      	bne.n	80111d6 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80111c6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80111ca:	f04f 0100 	mov.w	r1, #0
 80111ce:	f7fe f925 	bl	800f41c <HAL_RCCEx_GetPeriphCLKFreq>
 80111d2:	61b8      	str	r0, [r7, #24]
 80111d4:	e006      	b.n	80111e4 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80111d6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80111da:	f04f 0100 	mov.w	r1, #0
 80111de:	f7fe f91d 	bl	800f41c <HAL_RCCEx_GetPeriphCLKFreq>
 80111e2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	699b      	ldr	r3, [r3, #24]
 80111e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80111ec:	d120      	bne.n	8011230 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111f2:	2b04      	cmp	r3, #4
 80111f4:	d102      	bne.n	80111fc <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80111f6:	2340      	movs	r3, #64	@ 0x40
 80111f8:	613b      	str	r3, [r7, #16]
 80111fa:	e00a      	b.n	8011212 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011200:	2b08      	cmp	r3, #8
 8011202:	d103      	bne.n	801120c <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8011204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011208:	613b      	str	r3, [r7, #16]
 801120a:	e002      	b.n	8011212 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011210:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8011212:	69ba      	ldr	r2, [r7, #24]
 8011214:	4613      	mov	r3, r2
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	4413      	add	r3, r2
 801121a:	005b      	lsls	r3, r3, #1
 801121c:	4619      	mov	r1, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6a1b      	ldr	r3, [r3, #32]
 8011222:	693a      	ldr	r2, [r7, #16]
 8011224:	fb02 f303 	mul.w	r3, r2, r3
 8011228:	fbb1 f3f3 	udiv	r3, r1, r3
 801122c:	617b      	str	r3, [r7, #20]
 801122e:	e017      	b.n	8011260 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011238:	d101      	bne.n	801123e <HAL_SAI_Init+0x19a>
 801123a:	2302      	movs	r3, #2
 801123c:	e000      	b.n	8011240 <HAL_SAI_Init+0x19c>
 801123e:	2301      	movs	r3, #1
 8011240:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8011242:	69ba      	ldr	r2, [r7, #24]
 8011244:	4613      	mov	r3, r2
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	4413      	add	r3, r2
 801124a:	005b      	lsls	r3, r3, #1
 801124c:	4619      	mov	r1, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a1b      	ldr	r3, [r3, #32]
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	fb02 f303 	mul.w	r3, r2, r3
 8011258:	021b      	lsls	r3, r3, #8
 801125a:	fbb1 f3f3 	udiv	r3, r1, r3
 801125e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	4a20      	ldr	r2, [pc, #128]	@ (80112e4 <HAL_SAI_Init+0x240>)
 8011264:	fba2 2303 	umull	r2, r3, r2, r3
 8011268:	08da      	lsrs	r2, r3, #3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 801126e:	6979      	ldr	r1, [r7, #20]
 8011270:	4b1c      	ldr	r3, [pc, #112]	@ (80112e4 <HAL_SAI_Init+0x240>)
 8011272:	fba3 2301 	umull	r2, r3, r3, r1
 8011276:	08da      	lsrs	r2, r3, #3
 8011278:	4613      	mov	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	005b      	lsls	r3, r3, #1
 8011280:	1aca      	subs	r2, r1, r3
 8011282:	2a08      	cmp	r2, #8
 8011284:	d904      	bls.n	8011290 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128a:	1c5a      	adds	r2, r3, #1
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011294:	2b04      	cmp	r3, #4
 8011296:	d104      	bne.n	80112a2 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129c:	085a      	lsrs	r2, r3, #1
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <HAL_SAI_Init+0x20e>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	d109      	bne.n	80112c6 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d101      	bne.n	80112be <HAL_SAI_Init+0x21a>
 80112ba:	2300      	movs	r3, #0
 80112bc:	e001      	b.n	80112c2 <HAL_SAI_Init+0x21e>
 80112be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112c2:	623b      	str	r3, [r7, #32]
 80112c4:	e012      	b.n	80112ec <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	d10c      	bne.n	80112e8 <HAL_SAI_Init+0x244>
 80112ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112d2:	e00a      	b.n	80112ea <HAL_SAI_Init+0x246>
 80112d4:	40015404 	.word	0x40015404
 80112d8:	40015424 	.word	0x40015424
 80112dc:	40015400 	.word	0x40015400
 80112e0:	40015800 	.word	0x40015800
 80112e4:	cccccccd 	.word	0xcccccccd
 80112e8:	2300      	movs	r3, #0
 80112ea:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6819      	ldr	r1, [r3, #0]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	4b59      	ldr	r3, [pc, #356]	@ (801145c <HAL_SAI_Init+0x3b8>)
 80112f8:	400b      	ands	r3, r1
 80112fa:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	6819      	ldr	r1, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	685a      	ldr	r2, [r3, #4]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801130a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011310:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011316:	431a      	orrs	r2, r3
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8011324:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	695b      	ldr	r3, [r3, #20]
 801132a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011330:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011336:	051b      	lsls	r3, r3, #20
 8011338:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801133e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	691b      	ldr	r3, [r3, #16]
 8011344:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	430a      	orrs	r2, r1
 801134c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	6812      	ldr	r2, [r2, #0]
 8011358:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801135c:	f023 030f 	bic.w	r3, r3, #15
 8011360:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	6859      	ldr	r1, [r3, #4]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	69da      	ldr	r2, [r3, #28]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011370:	431a      	orrs	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011376:	431a      	orrs	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	430a      	orrs	r2, r1
 801137e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	6899      	ldr	r1, [r3, #8]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	4b35      	ldr	r3, [pc, #212]	@ (8011460 <HAL_SAI_Init+0x3bc>)
 801138c:	400b      	ands	r3, r1
 801138e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6899      	ldr	r1, [r3, #8]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801139a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80113a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 80113a6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 80113ac:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113b2:	3b01      	subs	r3, #1
 80113b4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80113b6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	430a      	orrs	r2, r1
 80113be:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	68d9      	ldr	r1, [r3, #12]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80113ce:	400b      	ands	r3, r1
 80113d0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	68d9      	ldr	r1, [r3, #12]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113e0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113e6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80113e8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113ee:	3b01      	subs	r3, #1
 80113f0:	021b      	lsls	r3, r3, #8
 80113f2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	430a      	orrs	r2, r1
 80113fa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4a18      	ldr	r2, [pc, #96]	@ (8011464 <HAL_SAI_Init+0x3c0>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d119      	bne.n	801143a <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8011406:	4b18      	ldr	r3, [pc, #96]	@ (8011468 <HAL_SAI_Init+0x3c4>)
 8011408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801140a:	4a17      	ldr	r2, [pc, #92]	@ (8011468 <HAL_SAI_Init+0x3c4>)
 801140c:	f023 0301 	bic.w	r3, r3, #1
 8011410:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011418:	2b01      	cmp	r3, #1
 801141a:	d10e      	bne.n	801143a <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011424:	3b01      	subs	r3, #1
 8011426:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8011428:	490f      	ldr	r1, [pc, #60]	@ (8011468 <HAL_SAI_Init+0x3c4>)
 801142a:	4313      	orrs	r3, r2
 801142c:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 801142e:	4b0e      	ldr	r3, [pc, #56]	@ (8011468 <HAL_SAI_Init+0x3c4>)
 8011430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011432:	4a0d      	ldr	r2, [pc, #52]	@ (8011468 <HAL_SAI_Init+0x3c4>)
 8011434:	f043 0301 	orr.w	r3, r3, #1
 8011438:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2201      	movs	r2, #1
 8011446:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2200      	movs	r2, #0
 801144e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8011452:	2300      	movs	r3, #0
}
 8011454:	4618      	mov	r0, r3
 8011456:	3728      	adds	r7, #40	@ 0x28
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	f005c010 	.word	0xf005c010
 8011460:	fff88000 	.word	0xfff88000
 8011464:	40015404 	.word	0x40015404
 8011468:	40015400 	.word	0x40015400

0801146c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	4613      	mov	r3, r2
 8011478:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d002      	beq.n	8011486 <HAL_SAI_Receive_DMA+0x1a>
 8011480:	88fb      	ldrh	r3, [r7, #6]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8011486:	2301      	movs	r3, #1
 8011488:	e0c6      	b.n	8011618 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8011490:	b2db      	uxtb	r3, r3
 8011492:	2b01      	cmp	r3, #1
 8011494:	f040 80bf 	bne.w	8011616 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d101      	bne.n	80114a6 <HAL_SAI_Receive_DMA+0x3a>
 80114a2:	2302      	movs	r3, #2
 80114a4:	e0b8      	b.n	8011618 <HAL_SAI_Receive_DMA+0x1ac>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2201      	movs	r2, #1
 80114aa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	88fa      	ldrh	r2, [r7, #6]
 80114b8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	88fa      	ldrh	r2, [r7, #6]
 80114c0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2200      	movs	r2, #0
 80114c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2222      	movs	r2, #34	@ 0x22
 80114d0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114da:	4a51      	ldr	r2, [pc, #324]	@ (8011620 <HAL_SAI_Receive_DMA+0x1b4>)
 80114dc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114e4:	4a4f      	ldr	r2, [pc, #316]	@ (8011624 <HAL_SAI_Receive_DMA+0x1b8>)
 80114e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114ee:	4a4e      	ldr	r2, [pc, #312]	@ (8011628 <HAL_SAI_Receive_DMA+0x1bc>)
 80114f0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114f8:	2200      	movs	r2, #0
 80114fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011500:	2b40      	cmp	r3, #64	@ 0x40
 8011502:	d106      	bne.n	8011512 <HAL_SAI_Receive_DMA+0xa6>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011508:	2b00      	cmp	r3, #0
 801150a:	d102      	bne.n	8011512 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 801150c:	88fb      	ldrh	r3, [r7, #6]
 801150e:	613b      	str	r3, [r7, #16]
 8011510:	e00a      	b.n	8011528 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011516:	2b80      	cmp	r3, #128	@ 0x80
 8011518:	d803      	bhi.n	8011522 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 801151a:	88fb      	ldrh	r3, [r7, #6]
 801151c:	005b      	lsls	r3, r3, #1
 801151e:	613b      	str	r3, [r7, #16]
 8011520:	e002      	b.n	8011528 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 8011522:	88fb      	ldrh	r3, [r7, #6]
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011534:	2b00      	cmp	r3, #0
 8011536:	d02d      	beq.n	8011594 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801153e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011540:	2b00      	cmp	r3, #0
 8011542:	d021      	beq.n	8011588 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801154a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	693a      	ldr	r2, [r7, #16]
 8011550:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	f103 021c 	add.w	r2, r3, #28
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801157c:	4618      	mov	r0, r3
 801157e:	f7f7 ff81 	bl	8009484 <HAL_DMAEx_List_Start_IT>
 8011582:	4603      	mov	r3, r0
 8011584:	75fb      	strb	r3, [r7, #23]
 8011586:	e014      	b.n	80115b2 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 8011590:	2301      	movs	r3, #1
 8011592:	e041      	b.n	8011618 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	331c      	adds	r3, #28
 80115a0:	4619      	mov	r1, r3
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80115a6:	461a      	mov	r2, r3
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	f7f6 ffd9 	bl	8008560 <HAL_DMA_Start_IT>
 80115ae:	4603      	mov	r3, r0
 80115b0:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 80115b2:	7dfb      	ldrb	r3, [r7, #23]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d005      	beq.n	80115c4 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2200      	movs	r2, #0
 80115bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80115c0:	2301      	movs	r3, #1
 80115c2:	e029      	b.n	8011618 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80115c4:	2100      	movs	r1, #0
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f000 f982 	bl	80118d0 <SAI_InterruptFlag>
 80115cc:	4601      	mov	r1, r0
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	691a      	ldr	r2, [r3, #16]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	430a      	orrs	r2, r1
 80115da:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80115ea:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d107      	bne.n	801160a <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8011608:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2200      	movs	r2, #0
 801160e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	e000      	b.n	8011618 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 8011616:	2302      	movs	r3, #2
  }
}
 8011618:	4618      	mov	r0, r3
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	08011a13 	.word	0x08011a13
 8011624:	080119b5 	.word	0x080119b5
 8011628:	08011a2f 	.word	0x08011a2f

0801162c <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8011634:	bf00      	nop
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 801165c:	bf00      	nop
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8011668:	b480      	push	{r7}
 801166a:	b087      	sub	sp, #28
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011676:	2300      	movs	r3, #0
 8011678:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2200      	movs	r2, #0
 801167e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2200      	movs	r2, #0
 8011684:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d003      	beq.n	8011696 <SAI_InitI2S+0x2e>
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	2b02      	cmp	r3, #2
 8011694:	d103      	bne.n	801169e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2200      	movs	r2, #0
 801169a:	651a      	str	r2, [r3, #80]	@ 0x50
 801169c:	e002      	b.n	80116a4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2201      	movs	r2, #1
 80116a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80116aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116b2:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2200      	movs	r2, #0
 80116b8:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	683a      	ldr	r2, [r7, #0]
 80116be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	f003 0301 	and.w	r3, r3, #1
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d001      	beq.n	80116ce <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80116ca:	2301      	movs	r3, #1
 80116cc:	e077      	b.n	80117be <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d107      	bne.n	80116e4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2200      	movs	r2, #0
 80116d8:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80116e0:	665a      	str	r2, [r3, #100]	@ 0x64
 80116e2:	e006      	b.n	80116f2 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80116ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	d84f      	bhi.n	8011798 <SAI_InitI2S+0x130>
 80116f8:	a201      	add	r2, pc, #4	@ (adr r2, 8011700 <SAI_InitI2S+0x98>)
 80116fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116fe:	bf00      	nop
 8011700:	08011711 	.word	0x08011711
 8011704:	08011733 	.word	0x08011733
 8011708:	08011755 	.word	0x08011755
 801170c:	08011777 	.word	0x08011777
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2280      	movs	r2, #128	@ 0x80
 8011714:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	085b      	lsrs	r3, r3, #1
 801171a:	015a      	lsls	r2, r3, #5
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	085b      	lsrs	r3, r3, #1
 8011724:	011a      	lsls	r2, r3, #4
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2240      	movs	r2, #64	@ 0x40
 801172e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8011730:	e035      	b.n	801179e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2280      	movs	r2, #128	@ 0x80
 8011736:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	085b      	lsrs	r3, r3, #1
 801173c:	019a      	lsls	r2, r3, #6
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	085b      	lsrs	r3, r3, #1
 8011746:	015a      	lsls	r2, r3, #5
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2280      	movs	r2, #128	@ 0x80
 8011750:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8011752:	e024      	b.n	801179e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	22c0      	movs	r2, #192	@ 0xc0
 8011758:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	085b      	lsrs	r3, r3, #1
 801175e:	019a      	lsls	r2, r3, #6
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	085b      	lsrs	r3, r3, #1
 8011768:	015a      	lsls	r2, r3, #5
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2280      	movs	r2, #128	@ 0x80
 8011772:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8011774:	e013      	b.n	801179e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	22e0      	movs	r2, #224	@ 0xe0
 801177a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	085b      	lsrs	r3, r3, #1
 8011780:	019a      	lsls	r2, r3, #6
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	085b      	lsrs	r3, r3, #1
 801178a:	015a      	lsls	r2, r3, #5
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2280      	movs	r2, #128	@ 0x80
 8011794:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8011796:	e002      	b.n	801179e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8011798:	2301      	movs	r3, #1
 801179a:	75fb      	strb	r3, [r7, #23]
      break;
 801179c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2b02      	cmp	r3, #2
 80117a2:	d10b      	bne.n	80117bc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d102      	bne.n	80117b0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2210      	movs	r2, #16
 80117ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b02      	cmp	r3, #2
 80117b4:	d102      	bne.n	80117bc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2208      	movs	r2, #8
 80117ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	371c      	adds	r7, #28
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop

080117cc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b087      	sub	sp, #28
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80117da:	2300      	movs	r3, #0
 80117dc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2200      	movs	r2, #0
 80117e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2200      	movs	r2, #0
 80117e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d003      	beq.n	80117fa <SAI_InitPCM+0x2e>
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d103      	bne.n	8011802 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2201      	movs	r2, #1
 80117fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8011800:	e002      	b.n	8011808 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2200      	movs	r2, #0
 8011806:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2200      	movs	r2, #0
 801180c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8011814:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801181c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2200      	movs	r2, #0
 8011822:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	683a      	ldr	r2, [r7, #0]
 8011828:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011830:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	2b04      	cmp	r3, #4
 8011836:	d103      	bne.n	8011840 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2201      	movs	r2, #1
 801183c:	659a      	str	r2, [r3, #88]	@ 0x58
 801183e:	e002      	b.n	8011846 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	220d      	movs	r2, #13
 8011844:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b03      	cmp	r3, #3
 801184a:	d837      	bhi.n	80118bc <SAI_InitPCM+0xf0>
 801184c:	a201      	add	r2, pc, #4	@ (adr r2, 8011854 <SAI_InitPCM+0x88>)
 801184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011852:	bf00      	nop
 8011854:	08011865 	.word	0x08011865
 8011858:	0801187b 	.word	0x0801187b
 801185c:	08011891 	.word	0x08011891
 8011860:	080118a7 	.word	0x080118a7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2280      	movs	r2, #128	@ 0x80
 8011868:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	011a      	lsls	r2, r3, #4
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2240      	movs	r2, #64	@ 0x40
 8011876:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8011878:	e023      	b.n	80118c2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2280      	movs	r2, #128	@ 0x80
 801187e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	015a      	lsls	r2, r3, #5
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2280      	movs	r2, #128	@ 0x80
 801188c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 801188e:	e018      	b.n	80118c2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	22c0      	movs	r2, #192	@ 0xc0
 8011894:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	015a      	lsls	r2, r3, #5
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2280      	movs	r2, #128	@ 0x80
 80118a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80118a4:	e00d      	b.n	80118c2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	22e0      	movs	r2, #224	@ 0xe0
 80118aa:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	015a      	lsls	r2, r3, #5
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2280      	movs	r2, #128	@ 0x80
 80118b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80118ba:	e002      	b.n	80118c2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	75fb      	strb	r3, [r7, #23]
      break;
 80118c0:	bf00      	nop
  }

  return status;
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	371c      	adds	r7, #28
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr

080118d0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b085      	sub	sp, #20
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	460b      	mov	r3, r1
 80118da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80118dc:	2301      	movs	r3, #1
 80118de:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80118e0:	78fb      	ldrb	r3, [r7, #3]
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d103      	bne.n	80118ee <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f043 0308 	orr.w	r3, r3, #8
 80118ec:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118f2:	2b08      	cmp	r3, #8
 80118f4:	d10b      	bne.n	801190e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80118fa:	2b03      	cmp	r3, #3
 80118fc:	d003      	beq.n	8011906 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d103      	bne.n	801190e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	f043 0310 	orr.w	r3, r3, #16
 801190c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2b03      	cmp	r3, #3
 8011914:	d003      	beq.n	801191e <SAI_InterruptFlag+0x4e>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	2b02      	cmp	r3, #2
 801191c:	d104      	bne.n	8011928 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011924:	60fb      	str	r3, [r7, #12]
 8011926:	e003      	b.n	8011930 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f043 0304 	orr.w	r3, r3, #4
 801192e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8011930:	68fb      	ldr	r3, [r7, #12]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3714      	adds	r7, #20
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
	...

08011940 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011948:	4b18      	ldr	r3, [pc, #96]	@ (80119ac <SAI_Disable+0x6c>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a18      	ldr	r2, [pc, #96]	@ (80119b0 <SAI_Disable+0x70>)
 801194e:	fba2 2303 	umull	r2, r3, r2, r3
 8011952:	0b1b      	lsrs	r3, r3, #12
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011958:	2300      	movs	r3, #0
 801195a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801196a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d10a      	bne.n	8011988 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011978:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8011982:	2303      	movs	r3, #3
 8011984:	72fb      	strb	r3, [r7, #11]
      break;
 8011986:	e009      	b.n	801199c <SAI_Disable+0x5c>
    }
    count--;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	3b01      	subs	r3, #1
 801198c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011998:	2b00      	cmp	r3, #0
 801199a:	d1e7      	bne.n	801196c <SAI_Disable+0x2c>

  return status;
 801199c:	7afb      	ldrb	r3, [r7, #11]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	20000190 	.word	0x20000190
 80119b0:	95cbec1b 	.word	0x95cbec1b

080119b4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119c0:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119c6:	2b81      	cmp	r3, #129	@ 0x81
 80119c8:	d01c      	beq.n	8011a04 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80119d8:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2200      	movs	r2, #0
 80119de:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80119e2:	2100      	movs	r1, #0
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f7ff ff73 	bl	80118d0 <SAI_InterruptFlag>
 80119ea:	4603      	mov	r3, r0
 80119ec:	43d9      	mvns	r1, r3
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	691a      	ldr	r2, [r3, #16]
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	400a      	ands	r2, r1
 80119fa:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2201      	movs	r2, #1
 8011a00:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f7ff fe11 	bl	801162c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8011a0a:	bf00      	nop
 8011a0c:	3710      	adds	r7, #16
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b084      	sub	sp, #16
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a1e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f7ff fe0d 	bl	8011640 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8011a26:	bf00      	nop
 8011a28:	3710      	adds	r7, #16
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}

08011a2e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a2e:	b580      	push	{r7, lr}
 8011a30:	b084      	sub	sp, #16
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a3a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011a42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8011a5a:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f7ff ff6f 	bl	8011940 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2201      	movs	r2, #1
 8011a66:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	f7ff fdee 	bl	8011654 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8011a78:	bf00      	nop
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d101      	bne.n	8011a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e049      	b.n	8011b26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f7f3 f93c 	bl	8004d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2202      	movs	r2, #2
 8011ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	3304      	adds	r3, #4
 8011abc:	4619      	mov	r1, r3
 8011abe:	4610      	mov	r0, r2
 8011ac0:	f000 f94a 	bl	8011d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2201      	movs	r2, #1
 8011af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2201      	movs	r2, #1
 8011af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2201      	movs	r2, #1
 8011b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2201      	movs	r2, #1
 8011b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2201      	movs	r2, #1
 8011b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011b24:	2300      	movs	r3, #0
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3708      	adds	r7, #8
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
	...

08011b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d101      	bne.n	8011b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011b4a:	2302      	movs	r3, #2
 8011b4c:	e0ff      	b.n	8011d4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2201      	movs	r2, #1
 8011b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2b14      	cmp	r3, #20
 8011b5a:	f200 80f0 	bhi.w	8011d3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b64:	08011bb9 	.word	0x08011bb9
 8011b68:	08011d3f 	.word	0x08011d3f
 8011b6c:	08011d3f 	.word	0x08011d3f
 8011b70:	08011d3f 	.word	0x08011d3f
 8011b74:	08011bf9 	.word	0x08011bf9
 8011b78:	08011d3f 	.word	0x08011d3f
 8011b7c:	08011d3f 	.word	0x08011d3f
 8011b80:	08011d3f 	.word	0x08011d3f
 8011b84:	08011c3b 	.word	0x08011c3b
 8011b88:	08011d3f 	.word	0x08011d3f
 8011b8c:	08011d3f 	.word	0x08011d3f
 8011b90:	08011d3f 	.word	0x08011d3f
 8011b94:	08011c7b 	.word	0x08011c7b
 8011b98:	08011d3f 	.word	0x08011d3f
 8011b9c:	08011d3f 	.word	0x08011d3f
 8011ba0:	08011d3f 	.word	0x08011d3f
 8011ba4:	08011cbd 	.word	0x08011cbd
 8011ba8:	08011d3f 	.word	0x08011d3f
 8011bac:	08011d3f 	.word	0x08011d3f
 8011bb0:	08011d3f 	.word	0x08011d3f
 8011bb4:	08011cfd 	.word	0x08011cfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	68b9      	ldr	r1, [r7, #8]
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f000 f9d0 	bl	8011f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	699a      	ldr	r2, [r3, #24]
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f042 0208 	orr.w	r2, r2, #8
 8011bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	699a      	ldr	r2, [r3, #24]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f022 0204 	bic.w	r2, r2, #4
 8011be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	6999      	ldr	r1, [r3, #24]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	691a      	ldr	r2, [r3, #16]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	430a      	orrs	r2, r1
 8011bf4:	619a      	str	r2, [r3, #24]
      break;
 8011bf6:	e0a5      	b.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	68b9      	ldr	r1, [r7, #8]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f000 fa72 	bl	80120e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	699a      	ldr	r2, [r3, #24]
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	699a      	ldr	r2, [r3, #24]
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	6999      	ldr	r1, [r3, #24]
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	691b      	ldr	r3, [r3, #16]
 8011c2e:	021a      	lsls	r2, r3, #8
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	430a      	orrs	r2, r1
 8011c36:	619a      	str	r2, [r3, #24]
      break;
 8011c38:	e084      	b.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	68b9      	ldr	r1, [r7, #8]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f000 fb01 	bl	8012248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	69da      	ldr	r2, [r3, #28]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f042 0208 	orr.w	r2, r2, #8
 8011c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	69da      	ldr	r2, [r3, #28]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f022 0204 	bic.w	r2, r2, #4
 8011c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	69d9      	ldr	r1, [r3, #28]
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	691a      	ldr	r2, [r3, #16]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	430a      	orrs	r2, r1
 8011c76:	61da      	str	r2, [r3, #28]
      break;
 8011c78:	e064      	b.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	68b9      	ldr	r1, [r7, #8]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f000 fb8f 	bl	80123a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	69da      	ldr	r2, [r3, #28]
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	69da      	ldr	r2, [r3, #28]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	69d9      	ldr	r1, [r3, #28]
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	691b      	ldr	r3, [r3, #16]
 8011cb0:	021a      	lsls	r2, r3, #8
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	430a      	orrs	r2, r1
 8011cb8:	61da      	str	r2, [r3, #28]
      break;
 8011cba:	e043      	b.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	68b9      	ldr	r1, [r7, #8]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f000 fc1e 	bl	8012504 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f042 0208 	orr.w	r2, r2, #8
 8011cd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f022 0204 	bic.w	r2, r2, #4
 8011ce6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	691a      	ldr	r2, [r3, #16]
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	430a      	orrs	r2, r1
 8011cf8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8011cfa:	e023      	b.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	68b9      	ldr	r1, [r7, #8]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f000 fc80 	bl	8012608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011d16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011d26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	691b      	ldr	r3, [r3, #16]
 8011d32:	021a      	lsls	r2, r3, #8
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	430a      	orrs	r2, r1
 8011d3a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8011d3c:	e002      	b.n	8011d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	75fb      	strb	r3, [r7, #23]
      break;
 8011d42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3718      	adds	r7, #24
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop

08011d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8011f24 <TIM_Base_SetConfig+0x1cc>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d02b      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	4a6d      	ldr	r2, [pc, #436]	@ (8011f28 <TIM_Base_SetConfig+0x1d0>)
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d027      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d7e:	d023      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011d86:	d01f      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	4a68      	ldr	r2, [pc, #416]	@ (8011f2c <TIM_Base_SetConfig+0x1d4>)
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	d01b      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	4a67      	ldr	r2, [pc, #412]	@ (8011f30 <TIM_Base_SetConfig+0x1d8>)
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d017      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4a66      	ldr	r2, [pc, #408]	@ (8011f34 <TIM_Base_SetConfig+0x1dc>)
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	d013      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4a65      	ldr	r2, [pc, #404]	@ (8011f38 <TIM_Base_SetConfig+0x1e0>)
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d00f      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	4a64      	ldr	r2, [pc, #400]	@ (8011f3c <TIM_Base_SetConfig+0x1e4>)
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d00b      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	4a63      	ldr	r2, [pc, #396]	@ (8011f40 <TIM_Base_SetConfig+0x1e8>)
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d007      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	4a62      	ldr	r2, [pc, #392]	@ (8011f44 <TIM_Base_SetConfig+0x1ec>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d003      	beq.n	8011dc8 <TIM_Base_SetConfig+0x70>
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	4a61      	ldr	r2, [pc, #388]	@ (8011f48 <TIM_Base_SetConfig+0x1f0>)
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d108      	bne.n	8011dda <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	68fa      	ldr	r2, [r7, #12]
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4a51      	ldr	r2, [pc, #324]	@ (8011f24 <TIM_Base_SetConfig+0x1cc>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d043      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4a50      	ldr	r2, [pc, #320]	@ (8011f28 <TIM_Base_SetConfig+0x1d0>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d03f      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011df0:	d03b      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011df8:	d037      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8011f2c <TIM_Base_SetConfig+0x1d4>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d033      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4a4a      	ldr	r2, [pc, #296]	@ (8011f30 <TIM_Base_SetConfig+0x1d8>)
 8011e06:	4293      	cmp	r3, r2
 8011e08:	d02f      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	4a49      	ldr	r2, [pc, #292]	@ (8011f34 <TIM_Base_SetConfig+0x1dc>)
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	d02b      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	4a48      	ldr	r2, [pc, #288]	@ (8011f38 <TIM_Base_SetConfig+0x1e0>)
 8011e16:	4293      	cmp	r3, r2
 8011e18:	d027      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4a47      	ldr	r2, [pc, #284]	@ (8011f3c <TIM_Base_SetConfig+0x1e4>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d023      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4a46      	ldr	r2, [pc, #280]	@ (8011f40 <TIM_Base_SetConfig+0x1e8>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d01f      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4a45      	ldr	r2, [pc, #276]	@ (8011f44 <TIM_Base_SetConfig+0x1ec>)
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	d01b      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4a44      	ldr	r2, [pc, #272]	@ (8011f48 <TIM_Base_SetConfig+0x1f0>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d017      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a43      	ldr	r2, [pc, #268]	@ (8011f4c <TIM_Base_SetConfig+0x1f4>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d013      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4a42      	ldr	r2, [pc, #264]	@ (8011f50 <TIM_Base_SetConfig+0x1f8>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d00f      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4a41      	ldr	r2, [pc, #260]	@ (8011f54 <TIM_Base_SetConfig+0x1fc>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d00b      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4a40      	ldr	r2, [pc, #256]	@ (8011f58 <TIM_Base_SetConfig+0x200>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d007      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8011f5c <TIM_Base_SetConfig+0x204>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d003      	beq.n	8011e6a <TIM_Base_SetConfig+0x112>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	4a3e      	ldr	r2, [pc, #248]	@ (8011f60 <TIM_Base_SetConfig+0x208>)
 8011e66:	4293      	cmp	r3, r2
 8011e68:	d108      	bne.n	8011e7c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	695b      	ldr	r3, [r3, #20]
 8011e86:	4313      	orrs	r3, r2
 8011e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	68fa      	ldr	r2, [r7, #12]
 8011e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	689a      	ldr	r2, [r3, #8]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4a20      	ldr	r2, [pc, #128]	@ (8011f24 <TIM_Base_SetConfig+0x1cc>)
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d023      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8011f28 <TIM_Base_SetConfig+0x1d0>)
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d01f      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	4a24      	ldr	r2, [pc, #144]	@ (8011f44 <TIM_Base_SetConfig+0x1ec>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d01b      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	4a23      	ldr	r2, [pc, #140]	@ (8011f48 <TIM_Base_SetConfig+0x1f0>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d017      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	4a22      	ldr	r2, [pc, #136]	@ (8011f4c <TIM_Base_SetConfig+0x1f4>)
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d013      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	4a21      	ldr	r2, [pc, #132]	@ (8011f50 <TIM_Base_SetConfig+0x1f8>)
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	d00f      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	4a20      	ldr	r2, [pc, #128]	@ (8011f54 <TIM_Base_SetConfig+0x1fc>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d00b      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	4a1f      	ldr	r2, [pc, #124]	@ (8011f58 <TIM_Base_SetConfig+0x200>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d007      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8011f5c <TIM_Base_SetConfig+0x204>)
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d003      	beq.n	8011ef0 <TIM_Base_SetConfig+0x198>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	4a1d      	ldr	r2, [pc, #116]	@ (8011f60 <TIM_Base_SetConfig+0x208>)
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d103      	bne.n	8011ef8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	691a      	ldr	r2, [r3, #16]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2201      	movs	r2, #1
 8011efc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	691b      	ldr	r3, [r3, #16]
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d105      	bne.n	8011f16 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	691b      	ldr	r3, [r3, #16]
 8011f0e:	f023 0201 	bic.w	r2, r3, #1
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	611a      	str	r2, [r3, #16]
  }
}
 8011f16:	bf00      	nop
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	40012c00 	.word	0x40012c00
 8011f28:	50012c00 	.word	0x50012c00
 8011f2c:	40000400 	.word	0x40000400
 8011f30:	50000400 	.word	0x50000400
 8011f34:	40000800 	.word	0x40000800
 8011f38:	50000800 	.word	0x50000800
 8011f3c:	40000c00 	.word	0x40000c00
 8011f40:	50000c00 	.word	0x50000c00
 8011f44:	40013400 	.word	0x40013400
 8011f48:	50013400 	.word	0x50013400
 8011f4c:	40014000 	.word	0x40014000
 8011f50:	50014000 	.word	0x50014000
 8011f54:	40014400 	.word	0x40014400
 8011f58:	50014400 	.word	0x50014400
 8011f5c:	40014800 	.word	0x40014800
 8011f60:	50014800 	.word	0x50014800

08011f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b087      	sub	sp, #28
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6a1b      	ldr	r3, [r3, #32]
 8011f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6a1b      	ldr	r3, [r3, #32]
 8011f78:	f023 0201 	bic.w	r2, r3, #1
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	699b      	ldr	r3, [r3, #24]
 8011f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f023 0303 	bic.w	r3, r3, #3
 8011f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	68fa      	ldr	r2, [r7, #12]
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	f023 0302 	bic.w	r3, r3, #2
 8011fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	697a      	ldr	r2, [r7, #20]
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	4a40      	ldr	r2, [pc, #256]	@ (80120c0 <TIM_OC1_SetConfig+0x15c>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d023      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80120c4 <TIM_OC1_SetConfig+0x160>)
 8011fc8:	4293      	cmp	r3, r2
 8011fca:	d01f      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	4a3e      	ldr	r2, [pc, #248]	@ (80120c8 <TIM_OC1_SetConfig+0x164>)
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	d01b      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80120cc <TIM_OC1_SetConfig+0x168>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d017      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	4a3c      	ldr	r2, [pc, #240]	@ (80120d0 <TIM_OC1_SetConfig+0x16c>)
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	d013      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80120d4 <TIM_OC1_SetConfig+0x170>)
 8011fe8:	4293      	cmp	r3, r2
 8011fea:	d00f      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	4a3a      	ldr	r2, [pc, #232]	@ (80120d8 <TIM_OC1_SetConfig+0x174>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d00b      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	4a39      	ldr	r2, [pc, #228]	@ (80120dc <TIM_OC1_SetConfig+0x178>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d007      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	4a38      	ldr	r2, [pc, #224]	@ (80120e0 <TIM_OC1_SetConfig+0x17c>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d003      	beq.n	801200c <TIM_OC1_SetConfig+0xa8>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	4a37      	ldr	r2, [pc, #220]	@ (80120e4 <TIM_OC1_SetConfig+0x180>)
 8012008:	4293      	cmp	r3, r2
 801200a:	d10c      	bne.n	8012026 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	f023 0308 	bic.w	r3, r3, #8
 8012012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	68db      	ldr	r3, [r3, #12]
 8012018:	697a      	ldr	r2, [r7, #20]
 801201a:	4313      	orrs	r3, r2
 801201c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	f023 0304 	bic.w	r3, r3, #4
 8012024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4a25      	ldr	r2, [pc, #148]	@ (80120c0 <TIM_OC1_SetConfig+0x15c>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d023      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4a24      	ldr	r2, [pc, #144]	@ (80120c4 <TIM_OC1_SetConfig+0x160>)
 8012032:	4293      	cmp	r3, r2
 8012034:	d01f      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4a23      	ldr	r2, [pc, #140]	@ (80120c8 <TIM_OC1_SetConfig+0x164>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d01b      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4a22      	ldr	r2, [pc, #136]	@ (80120cc <TIM_OC1_SetConfig+0x168>)
 8012042:	4293      	cmp	r3, r2
 8012044:	d017      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	4a21      	ldr	r2, [pc, #132]	@ (80120d0 <TIM_OC1_SetConfig+0x16c>)
 801204a:	4293      	cmp	r3, r2
 801204c:	d013      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4a20      	ldr	r2, [pc, #128]	@ (80120d4 <TIM_OC1_SetConfig+0x170>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d00f      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	4a1f      	ldr	r2, [pc, #124]	@ (80120d8 <TIM_OC1_SetConfig+0x174>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d00b      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4a1e      	ldr	r2, [pc, #120]	@ (80120dc <TIM_OC1_SetConfig+0x178>)
 8012062:	4293      	cmp	r3, r2
 8012064:	d007      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	4a1d      	ldr	r2, [pc, #116]	@ (80120e0 <TIM_OC1_SetConfig+0x17c>)
 801206a:	4293      	cmp	r3, r2
 801206c:	d003      	beq.n	8012076 <TIM_OC1_SetConfig+0x112>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	4a1c      	ldr	r2, [pc, #112]	@ (80120e4 <TIM_OC1_SetConfig+0x180>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d111      	bne.n	801209a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801207c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	695b      	ldr	r3, [r3, #20]
 801208a:	693a      	ldr	r2, [r7, #16]
 801208c:	4313      	orrs	r3, r2
 801208e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	699b      	ldr	r3, [r3, #24]
 8012094:	693a      	ldr	r2, [r7, #16]
 8012096:	4313      	orrs	r3, r2
 8012098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	693a      	ldr	r2, [r7, #16]
 801209e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	685a      	ldr	r2, [r3, #4]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	697a      	ldr	r2, [r7, #20]
 80120b2:	621a      	str	r2, [r3, #32]
}
 80120b4:	bf00      	nop
 80120b6:	371c      	adds	r7, #28
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	40012c00 	.word	0x40012c00
 80120c4:	50012c00 	.word	0x50012c00
 80120c8:	40013400 	.word	0x40013400
 80120cc:	50013400 	.word	0x50013400
 80120d0:	40014000 	.word	0x40014000
 80120d4:	50014000 	.word	0x50014000
 80120d8:	40014400 	.word	0x40014400
 80120dc:	50014400 	.word	0x50014400
 80120e0:	40014800 	.word	0x40014800
 80120e4:	50014800 	.word	0x50014800

080120e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b087      	sub	sp, #28
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6a1b      	ldr	r3, [r3, #32]
 80120f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a1b      	ldr	r3, [r3, #32]
 80120fc:	f023 0210 	bic.w	r2, r3, #16
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	699b      	ldr	r3, [r3, #24]
 801210e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801211a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	021b      	lsls	r3, r3, #8
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	4313      	orrs	r3, r2
 801212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f023 0320 	bic.w	r3, r3, #32
 8012136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	689b      	ldr	r3, [r3, #8]
 801213c:	011b      	lsls	r3, r3, #4
 801213e:	697a      	ldr	r2, [r7, #20]
 8012140:	4313      	orrs	r3, r2
 8012142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4a36      	ldr	r2, [pc, #216]	@ (8012220 <TIM_OC2_SetConfig+0x138>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d00b      	beq.n	8012164 <TIM_OC2_SetConfig+0x7c>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	4a35      	ldr	r2, [pc, #212]	@ (8012224 <TIM_OC2_SetConfig+0x13c>)
 8012150:	4293      	cmp	r3, r2
 8012152:	d007      	beq.n	8012164 <TIM_OC2_SetConfig+0x7c>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	4a34      	ldr	r2, [pc, #208]	@ (8012228 <TIM_OC2_SetConfig+0x140>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d003      	beq.n	8012164 <TIM_OC2_SetConfig+0x7c>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	4a33      	ldr	r2, [pc, #204]	@ (801222c <TIM_OC2_SetConfig+0x144>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d10d      	bne.n	8012180 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801216a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	011b      	lsls	r3, r3, #4
 8012172:	697a      	ldr	r2, [r7, #20]
 8012174:	4313      	orrs	r3, r2
 8012176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801217e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4a27      	ldr	r2, [pc, #156]	@ (8012220 <TIM_OC2_SetConfig+0x138>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d023      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4a26      	ldr	r2, [pc, #152]	@ (8012224 <TIM_OC2_SetConfig+0x13c>)
 801218c:	4293      	cmp	r3, r2
 801218e:	d01f      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	4a25      	ldr	r2, [pc, #148]	@ (8012228 <TIM_OC2_SetConfig+0x140>)
 8012194:	4293      	cmp	r3, r2
 8012196:	d01b      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4a24      	ldr	r2, [pc, #144]	@ (801222c <TIM_OC2_SetConfig+0x144>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d017      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	4a23      	ldr	r2, [pc, #140]	@ (8012230 <TIM_OC2_SetConfig+0x148>)
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d013      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	4a22      	ldr	r2, [pc, #136]	@ (8012234 <TIM_OC2_SetConfig+0x14c>)
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d00f      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	4a21      	ldr	r2, [pc, #132]	@ (8012238 <TIM_OC2_SetConfig+0x150>)
 80121b4:	4293      	cmp	r3, r2
 80121b6:	d00b      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	4a20      	ldr	r2, [pc, #128]	@ (801223c <TIM_OC2_SetConfig+0x154>)
 80121bc:	4293      	cmp	r3, r2
 80121be:	d007      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	4a1f      	ldr	r2, [pc, #124]	@ (8012240 <TIM_OC2_SetConfig+0x158>)
 80121c4:	4293      	cmp	r3, r2
 80121c6:	d003      	beq.n	80121d0 <TIM_OC2_SetConfig+0xe8>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	4a1e      	ldr	r2, [pc, #120]	@ (8012244 <TIM_OC2_SetConfig+0x15c>)
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d113      	bne.n	80121f8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80121d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80121de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	693a      	ldr	r2, [r7, #16]
 80121e8:	4313      	orrs	r3, r2
 80121ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	699b      	ldr	r3, [r3, #24]
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	693a      	ldr	r2, [r7, #16]
 80121f4:	4313      	orrs	r3, r2
 80121f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	693a      	ldr	r2, [r7, #16]
 80121fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	68fa      	ldr	r2, [r7, #12]
 8012202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	697a      	ldr	r2, [r7, #20]
 8012210:	621a      	str	r2, [r3, #32]
}
 8012212:	bf00      	nop
 8012214:	371c      	adds	r7, #28
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	40012c00 	.word	0x40012c00
 8012224:	50012c00 	.word	0x50012c00
 8012228:	40013400 	.word	0x40013400
 801222c:	50013400 	.word	0x50013400
 8012230:	40014000 	.word	0x40014000
 8012234:	50014000 	.word	0x50014000
 8012238:	40014400 	.word	0x40014400
 801223c:	50014400 	.word	0x50014400
 8012240:	40014800 	.word	0x40014800
 8012244:	50014800 	.word	0x50014800

08012248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012248:	b480      	push	{r7}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6a1b      	ldr	r3, [r3, #32]
 8012256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6a1b      	ldr	r3, [r3, #32]
 801225c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	69db      	ldr	r3, [r3, #28]
 801226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801227a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f023 0303 	bic.w	r3, r3, #3
 8012282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	68fa      	ldr	r2, [r7, #12]
 801228a:	4313      	orrs	r3, r2
 801228c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	021b      	lsls	r3, r3, #8
 801229c:	697a      	ldr	r2, [r7, #20]
 801229e:	4313      	orrs	r3, r2
 80122a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4a35      	ldr	r2, [pc, #212]	@ (801237c <TIM_OC3_SetConfig+0x134>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d00b      	beq.n	80122c2 <TIM_OC3_SetConfig+0x7a>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4a34      	ldr	r2, [pc, #208]	@ (8012380 <TIM_OC3_SetConfig+0x138>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d007      	beq.n	80122c2 <TIM_OC3_SetConfig+0x7a>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4a33      	ldr	r2, [pc, #204]	@ (8012384 <TIM_OC3_SetConfig+0x13c>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d003      	beq.n	80122c2 <TIM_OC3_SetConfig+0x7a>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4a32      	ldr	r2, [pc, #200]	@ (8012388 <TIM_OC3_SetConfig+0x140>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d10d      	bne.n	80122de <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80122c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	021b      	lsls	r3, r3, #8
 80122d0:	697a      	ldr	r2, [r7, #20]
 80122d2:	4313      	orrs	r3, r2
 80122d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80122dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4a26      	ldr	r2, [pc, #152]	@ (801237c <TIM_OC3_SetConfig+0x134>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d023      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4a25      	ldr	r2, [pc, #148]	@ (8012380 <TIM_OC3_SetConfig+0x138>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d01f      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4a24      	ldr	r2, [pc, #144]	@ (8012384 <TIM_OC3_SetConfig+0x13c>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d01b      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	4a23      	ldr	r2, [pc, #140]	@ (8012388 <TIM_OC3_SetConfig+0x140>)
 80122fa:	4293      	cmp	r3, r2
 80122fc:	d017      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4a22      	ldr	r2, [pc, #136]	@ (801238c <TIM_OC3_SetConfig+0x144>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d013      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4a21      	ldr	r2, [pc, #132]	@ (8012390 <TIM_OC3_SetConfig+0x148>)
 801230a:	4293      	cmp	r3, r2
 801230c:	d00f      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4a20      	ldr	r2, [pc, #128]	@ (8012394 <TIM_OC3_SetConfig+0x14c>)
 8012312:	4293      	cmp	r3, r2
 8012314:	d00b      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	4a1f      	ldr	r2, [pc, #124]	@ (8012398 <TIM_OC3_SetConfig+0x150>)
 801231a:	4293      	cmp	r3, r2
 801231c:	d007      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	4a1e      	ldr	r2, [pc, #120]	@ (801239c <TIM_OC3_SetConfig+0x154>)
 8012322:	4293      	cmp	r3, r2
 8012324:	d003      	beq.n	801232e <TIM_OC3_SetConfig+0xe6>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	4a1d      	ldr	r2, [pc, #116]	@ (80123a0 <TIM_OC3_SetConfig+0x158>)
 801232a:	4293      	cmp	r3, r2
 801232c:	d113      	bne.n	8012356 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801233c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	695b      	ldr	r3, [r3, #20]
 8012342:	011b      	lsls	r3, r3, #4
 8012344:	693a      	ldr	r2, [r7, #16]
 8012346:	4313      	orrs	r3, r2
 8012348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	699b      	ldr	r3, [r3, #24]
 801234e:	011b      	lsls	r3, r3, #4
 8012350:	693a      	ldr	r2, [r7, #16]
 8012352:	4313      	orrs	r3, r2
 8012354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	693a      	ldr	r2, [r7, #16]
 801235a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	685a      	ldr	r2, [r3, #4]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	697a      	ldr	r2, [r7, #20]
 801236e:	621a      	str	r2, [r3, #32]
}
 8012370:	bf00      	nop
 8012372:	371c      	adds	r7, #28
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	40012c00 	.word	0x40012c00
 8012380:	50012c00 	.word	0x50012c00
 8012384:	40013400 	.word	0x40013400
 8012388:	50013400 	.word	0x50013400
 801238c:	40014000 	.word	0x40014000
 8012390:	50014000 	.word	0x50014000
 8012394:	40014400 	.word	0x40014400
 8012398:	50014400 	.word	0x50014400
 801239c:	40014800 	.word	0x40014800
 80123a0:	50014800 	.word	0x50014800

080123a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b087      	sub	sp, #28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6a1b      	ldr	r3, [r3, #32]
 80123b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a1b      	ldr	r3, [r3, #32]
 80123b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	69db      	ldr	r3, [r3, #28]
 80123ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80123d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80123d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80123de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	021b      	lsls	r3, r3, #8
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	4313      	orrs	r3, r2
 80123ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80123f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	689b      	ldr	r3, [r3, #8]
 80123f8:	031b      	lsls	r3, r3, #12
 80123fa:	697a      	ldr	r2, [r7, #20]
 80123fc:	4313      	orrs	r3, r2
 80123fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	4a36      	ldr	r2, [pc, #216]	@ (80124dc <TIM_OC4_SetConfig+0x138>)
 8012404:	4293      	cmp	r3, r2
 8012406:	d00b      	beq.n	8012420 <TIM_OC4_SetConfig+0x7c>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	4a35      	ldr	r2, [pc, #212]	@ (80124e0 <TIM_OC4_SetConfig+0x13c>)
 801240c:	4293      	cmp	r3, r2
 801240e:	d007      	beq.n	8012420 <TIM_OC4_SetConfig+0x7c>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	4a34      	ldr	r2, [pc, #208]	@ (80124e4 <TIM_OC4_SetConfig+0x140>)
 8012414:	4293      	cmp	r3, r2
 8012416:	d003      	beq.n	8012420 <TIM_OC4_SetConfig+0x7c>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4a33      	ldr	r2, [pc, #204]	@ (80124e8 <TIM_OC4_SetConfig+0x144>)
 801241c:	4293      	cmp	r3, r2
 801241e:	d10d      	bne.n	801243c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	031b      	lsls	r3, r3, #12
 801242e:	697a      	ldr	r2, [r7, #20]
 8012430:	4313      	orrs	r3, r2
 8012432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801243a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4a27      	ldr	r2, [pc, #156]	@ (80124dc <TIM_OC4_SetConfig+0x138>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d023      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	4a26      	ldr	r2, [pc, #152]	@ (80124e0 <TIM_OC4_SetConfig+0x13c>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d01f      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4a25      	ldr	r2, [pc, #148]	@ (80124e4 <TIM_OC4_SetConfig+0x140>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d01b      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	4a24      	ldr	r2, [pc, #144]	@ (80124e8 <TIM_OC4_SetConfig+0x144>)
 8012458:	4293      	cmp	r3, r2
 801245a:	d017      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	4a23      	ldr	r2, [pc, #140]	@ (80124ec <TIM_OC4_SetConfig+0x148>)
 8012460:	4293      	cmp	r3, r2
 8012462:	d013      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	4a22      	ldr	r2, [pc, #136]	@ (80124f0 <TIM_OC4_SetConfig+0x14c>)
 8012468:	4293      	cmp	r3, r2
 801246a:	d00f      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	4a21      	ldr	r2, [pc, #132]	@ (80124f4 <TIM_OC4_SetConfig+0x150>)
 8012470:	4293      	cmp	r3, r2
 8012472:	d00b      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	4a20      	ldr	r2, [pc, #128]	@ (80124f8 <TIM_OC4_SetConfig+0x154>)
 8012478:	4293      	cmp	r3, r2
 801247a:	d007      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	4a1f      	ldr	r2, [pc, #124]	@ (80124fc <TIM_OC4_SetConfig+0x158>)
 8012480:	4293      	cmp	r3, r2
 8012482:	d003      	beq.n	801248c <TIM_OC4_SetConfig+0xe8>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	4a1e      	ldr	r2, [pc, #120]	@ (8012500 <TIM_OC4_SetConfig+0x15c>)
 8012488:	4293      	cmp	r3, r2
 801248a:	d113      	bne.n	80124b4 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012492:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801249a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	695b      	ldr	r3, [r3, #20]
 80124a0:	019b      	lsls	r3, r3, #6
 80124a2:	693a      	ldr	r2, [r7, #16]
 80124a4:	4313      	orrs	r3, r2
 80124a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	699b      	ldr	r3, [r3, #24]
 80124ac:	019b      	lsls	r3, r3, #6
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	4313      	orrs	r3, r2
 80124b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	693a      	ldr	r2, [r7, #16]
 80124b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	685a      	ldr	r2, [r3, #4]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	697a      	ldr	r2, [r7, #20]
 80124cc:	621a      	str	r2, [r3, #32]
}
 80124ce:	bf00      	nop
 80124d0:	371c      	adds	r7, #28
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	40012c00 	.word	0x40012c00
 80124e0:	50012c00 	.word	0x50012c00
 80124e4:	40013400 	.word	0x40013400
 80124e8:	50013400 	.word	0x50013400
 80124ec:	40014000 	.word	0x40014000
 80124f0:	50014000 	.word	0x50014000
 80124f4:	40014400 	.word	0x40014400
 80124f8:	50014400 	.word	0x50014400
 80124fc:	40014800 	.word	0x40014800
 8012500:	50014800 	.word	0x50014800

08012504 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012504:	b480      	push	{r7}
 8012506:	b087      	sub	sp, #28
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6a1b      	ldr	r3, [r3, #32]
 8012512:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6a1b      	ldr	r3, [r3, #32]
 8012518:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	68fa      	ldr	r2, [r7, #12]
 801253e:	4313      	orrs	r3, r2
 8012540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8012548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	041b      	lsls	r3, r3, #16
 8012550:	693a      	ldr	r2, [r7, #16]
 8012552:	4313      	orrs	r3, r2
 8012554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4a21      	ldr	r2, [pc, #132]	@ (80125e0 <TIM_OC5_SetConfig+0xdc>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d023      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a20      	ldr	r2, [pc, #128]	@ (80125e4 <TIM_OC5_SetConfig+0xe0>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d01f      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	4a1f      	ldr	r2, [pc, #124]	@ (80125e8 <TIM_OC5_SetConfig+0xe4>)
 801256a:	4293      	cmp	r3, r2
 801256c:	d01b      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4a1e      	ldr	r2, [pc, #120]	@ (80125ec <TIM_OC5_SetConfig+0xe8>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d017      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a1d      	ldr	r2, [pc, #116]	@ (80125f0 <TIM_OC5_SetConfig+0xec>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d013      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a1c      	ldr	r2, [pc, #112]	@ (80125f4 <TIM_OC5_SetConfig+0xf0>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d00f      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4a1b      	ldr	r2, [pc, #108]	@ (80125f8 <TIM_OC5_SetConfig+0xf4>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d00b      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4a1a      	ldr	r2, [pc, #104]	@ (80125fc <TIM_OC5_SetConfig+0xf8>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d007      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a19      	ldr	r2, [pc, #100]	@ (8012600 <TIM_OC5_SetConfig+0xfc>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d003      	beq.n	80125a6 <TIM_OC5_SetConfig+0xa2>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a18      	ldr	r2, [pc, #96]	@ (8012604 <TIM_OC5_SetConfig+0x100>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d109      	bne.n	80125ba <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80125ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	695b      	ldr	r3, [r3, #20]
 80125b2:	021b      	lsls	r3, r3, #8
 80125b4:	697a      	ldr	r2, [r7, #20]
 80125b6:	4313      	orrs	r3, r2
 80125b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	697a      	ldr	r2, [r7, #20]
 80125be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	685a      	ldr	r2, [r3, #4]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	693a      	ldr	r2, [r7, #16]
 80125d2:	621a      	str	r2, [r3, #32]
}
 80125d4:	bf00      	nop
 80125d6:	371c      	adds	r7, #28
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr
 80125e0:	40012c00 	.word	0x40012c00
 80125e4:	50012c00 	.word	0x50012c00
 80125e8:	40013400 	.word	0x40013400
 80125ec:	50013400 	.word	0x50013400
 80125f0:	40014000 	.word	0x40014000
 80125f4:	50014000 	.word	0x50014000
 80125f8:	40014400 	.word	0x40014400
 80125fc:	50014400 	.word	0x50014400
 8012600:	40014800 	.word	0x40014800
 8012604:	50014800 	.word	0x50014800

08012608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012608:	b480      	push	{r7}
 801260a:	b087      	sub	sp, #28
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6a1b      	ldr	r3, [r3, #32]
 8012616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a1b      	ldr	r3, [r3, #32]
 801261c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801263a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	021b      	lsls	r3, r3, #8
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	4313      	orrs	r3, r2
 8012646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801264e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	689b      	ldr	r3, [r3, #8]
 8012654:	051b      	lsls	r3, r3, #20
 8012656:	693a      	ldr	r2, [r7, #16]
 8012658:	4313      	orrs	r3, r2
 801265a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4a22      	ldr	r2, [pc, #136]	@ (80126e8 <TIM_OC6_SetConfig+0xe0>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d023      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4a21      	ldr	r2, [pc, #132]	@ (80126ec <TIM_OC6_SetConfig+0xe4>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d01f      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4a20      	ldr	r2, [pc, #128]	@ (80126f0 <TIM_OC6_SetConfig+0xe8>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d01b      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4a1f      	ldr	r2, [pc, #124]	@ (80126f4 <TIM_OC6_SetConfig+0xec>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d017      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4a1e      	ldr	r2, [pc, #120]	@ (80126f8 <TIM_OC6_SetConfig+0xf0>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d013      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	4a1d      	ldr	r2, [pc, #116]	@ (80126fc <TIM_OC6_SetConfig+0xf4>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d00f      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4a1c      	ldr	r2, [pc, #112]	@ (8012700 <TIM_OC6_SetConfig+0xf8>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d00b      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4a1b      	ldr	r2, [pc, #108]	@ (8012704 <TIM_OC6_SetConfig+0xfc>)
 8012698:	4293      	cmp	r3, r2
 801269a:	d007      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4a1a      	ldr	r2, [pc, #104]	@ (8012708 <TIM_OC6_SetConfig+0x100>)
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d003      	beq.n	80126ac <TIM_OC6_SetConfig+0xa4>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	4a19      	ldr	r2, [pc, #100]	@ (801270c <TIM_OC6_SetConfig+0x104>)
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d109      	bne.n	80126c0 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80126b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	695b      	ldr	r3, [r3, #20]
 80126b8:	029b      	lsls	r3, r3, #10
 80126ba:	697a      	ldr	r2, [r7, #20]
 80126bc:	4313      	orrs	r3, r2
 80126be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	697a      	ldr	r2, [r7, #20]
 80126c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	693a      	ldr	r2, [r7, #16]
 80126d8:	621a      	str	r2, [r3, #32]
}
 80126da:	bf00      	nop
 80126dc:	371c      	adds	r7, #28
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	40012c00 	.word	0x40012c00
 80126ec:	50012c00 	.word	0x50012c00
 80126f0:	40013400 	.word	0x40013400
 80126f4:	50013400 	.word	0x50013400
 80126f8:	40014000 	.word	0x40014000
 80126fc:	50014000 	.word	0x50014000
 8012700:	40014400 	.word	0x40014400
 8012704:	50014400 	.word	0x50014400
 8012708:	40014800 	.word	0x40014800
 801270c:	50014800 	.word	0x50014800

08012710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012710:	b480      	push	{r7}
 8012712:	b085      	sub	sp, #20
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012720:	2b01      	cmp	r3, #1
 8012722:	d101      	bne.n	8012728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012724:	2302      	movs	r3, #2
 8012726:	e097      	b.n	8012858 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2201      	movs	r2, #1
 801272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2202      	movs	r2, #2
 8012734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4a45      	ldr	r2, [pc, #276]	@ (8012864 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 801274e:	4293      	cmp	r3, r2
 8012750:	d00e      	beq.n	8012770 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4a44      	ldr	r2, [pc, #272]	@ (8012868 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8012758:	4293      	cmp	r3, r2
 801275a:	d009      	beq.n	8012770 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	4a42      	ldr	r2, [pc, #264]	@ (801286c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8012762:	4293      	cmp	r3, r2
 8012764:	d004      	beq.n	8012770 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a41      	ldr	r2, [pc, #260]	@ (8012870 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d108      	bne.n	8012782 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	4313      	orrs	r3, r2
 8012780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8012788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801278c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	68fa      	ldr	r2, [r7, #12]
 8012794:	4313      	orrs	r3, r2
 8012796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	68fa      	ldr	r2, [r7, #12]
 801279e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a2f      	ldr	r2, [pc, #188]	@ (8012864 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d040      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	4a2e      	ldr	r2, [pc, #184]	@ (8012868 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d03b      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127bc:	d036      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80127c6:	d031      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a29      	ldr	r2, [pc, #164]	@ (8012874 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d02c      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4a28      	ldr	r2, [pc, #160]	@ (8012878 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d027      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4a26      	ldr	r2, [pc, #152]	@ (801287c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d022      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	4a25      	ldr	r2, [pc, #148]	@ (8012880 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d01d      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4a23      	ldr	r2, [pc, #140]	@ (8012884 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d018      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4a22      	ldr	r2, [pc, #136]	@ (8012888 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d013      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4a18      	ldr	r2, [pc, #96]	@ (801286c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d00e      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a17      	ldr	r2, [pc, #92]	@ (8012870 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d009      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4a1b      	ldr	r2, [pc, #108]	@ (801288c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801281e:	4293      	cmp	r3, r2
 8012820:	d004      	beq.n	801282c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	4a1a      	ldr	r2, [pc, #104]	@ (8012890 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8012828:	4293      	cmp	r3, r2
 801282a:	d10c      	bne.n	8012846 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	68ba      	ldr	r2, [r7, #8]
 801283a:	4313      	orrs	r3, r2
 801283c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	68ba      	ldr	r2, [r7, #8]
 8012844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2201      	movs	r2, #1
 801284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2200      	movs	r2, #0
 8012852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012856:	2300      	movs	r3, #0
}
 8012858:	4618      	mov	r0, r3
 801285a:	3714      	adds	r7, #20
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr
 8012864:	40012c00 	.word	0x40012c00
 8012868:	50012c00 	.word	0x50012c00
 801286c:	40013400 	.word	0x40013400
 8012870:	50013400 	.word	0x50013400
 8012874:	40000400 	.word	0x40000400
 8012878:	50000400 	.word	0x50000400
 801287c:	40000800 	.word	0x40000800
 8012880:	50000800 	.word	0x50000800
 8012884:	40000c00 	.word	0x40000c00
 8012888:	50000c00 	.word	0x50000c00
 801288c:	40014000 	.word	0x40014000
 8012890:	50014000 	.word	0x50014000

08012894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80128a2:	2301      	movs	r3, #1
 80128a4:	e042      	b.n	801292c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d106      	bne.n	80128be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2200      	movs	r2, #0
 80128b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7f2 fa8f 	bl	8004ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2224      	movs	r2, #36	@ 0x24
 80128c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f022 0201 	bic.w	r2, r2, #1
 80128d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d002      	beq.n	80128e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 fde2 	bl	80134a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f000 fc31 	bl	801314c <UART_SetConfig>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d101      	bne.n	80128f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80128f0:	2301      	movs	r3, #1
 80128f2:	e01b      	b.n	801292c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	685a      	ldr	r2, [r3, #4]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	689a      	ldr	r2, [r3, #8]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f042 0201 	orr.w	r2, r2, #1
 8012922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f000 fe61 	bl	80135ec <UART_CheckIdleState>
 801292a:	4603      	mov	r3, r0
}
 801292c:	4618      	mov	r0, r3
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b08a      	sub	sp, #40	@ 0x28
 8012938:	af02      	add	r7, sp, #8
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	603b      	str	r3, [r7, #0]
 8012940:	4613      	mov	r3, r2
 8012942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801294a:	2b20      	cmp	r3, #32
 801294c:	d17b      	bne.n	8012a46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <HAL_UART_Transmit+0x26>
 8012954:	88fb      	ldrh	r3, [r7, #6]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d101      	bne.n	801295e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801295a:	2301      	movs	r3, #1
 801295c:	e074      	b.n	8012a48 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2200      	movs	r2, #0
 8012962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2221      	movs	r2, #33	@ 0x21
 801296a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801296e:	f7f3 f8f7 	bl	8005b60 <HAL_GetTick>
 8012972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	88fa      	ldrh	r2, [r7, #6]
 8012978:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	88fa      	ldrh	r2, [r7, #6]
 8012980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801298c:	d108      	bne.n	80129a0 <HAL_UART_Transmit+0x6c>
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	691b      	ldr	r3, [r3, #16]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d104      	bne.n	80129a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012996:	2300      	movs	r3, #0
 8012998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	61bb      	str	r3, [r7, #24]
 801299e:	e003      	b.n	80129a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80129a4:	2300      	movs	r3, #0
 80129a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80129a8:	e030      	b.n	8012a0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	2200      	movs	r2, #0
 80129b2:	2180      	movs	r1, #128	@ 0x80
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f000 fec3 	bl	8013740 <UART_WaitOnFlagUntilTimeout>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d005      	beq.n	80129cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2220      	movs	r2, #32
 80129c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80129c8:	2303      	movs	r3, #3
 80129ca:	e03d      	b.n	8012a48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80129cc:	69fb      	ldr	r3, [r7, #28]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d10b      	bne.n	80129ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80129d2:	69bb      	ldr	r3, [r7, #24]
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	461a      	mov	r2, r3
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80129e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	3302      	adds	r3, #2
 80129e6:	61bb      	str	r3, [r7, #24]
 80129e8:	e007      	b.n	80129fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	781a      	ldrb	r2, [r3, #0]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	3301      	adds	r3, #1
 80129f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	3b01      	subs	r3, #1
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1c8      	bne.n	80129aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	9300      	str	r3, [sp, #0]
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	2140      	movs	r1, #64	@ 0x40
 8012a22:	68f8      	ldr	r0, [r7, #12]
 8012a24:	f000 fe8c 	bl	8013740 <UART_WaitOnFlagUntilTimeout>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d005      	beq.n	8012a3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2220      	movs	r2, #32
 8012a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8012a36:	2303      	movs	r3, #3
 8012a38:	e006      	b.n	8012a48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2220      	movs	r2, #32
 8012a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	e000      	b.n	8012a48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012a46:	2302      	movs	r3, #2
  }
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3720      	adds	r7, #32
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08a      	sub	sp, #40	@ 0x28
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012a64:	2b20      	cmp	r3, #32
 8012a66:	d13c      	bne.n	8012ae2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <HAL_UART_Receive_IT+0x24>
 8012a6e:	88fb      	ldrh	r3, [r7, #6]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d101      	bne.n	8012a78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012a74:	2301      	movs	r3, #1
 8012a76:	e035      	b.n	8012ae4 <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	66da      	str	r2, [r3, #108]	@ 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	4a1a      	ldr	r2, [pc, #104]	@ (8012aec <HAL_UART_Receive_IT+0x9c>)
 8012a84:	4293      	cmp	r3, r2
 8012a86:	d024      	beq.n	8012ad2 <HAL_UART_Receive_IT+0x82>
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	4a18      	ldr	r2, [pc, #96]	@ (8012af0 <HAL_UART_Receive_IT+0xa0>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	d01f      	beq.n	8012ad2 <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d018      	beq.n	8012ad2 <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	e853 3f00 	ldrex	r3, [r3]
 8012aac:	613b      	str	r3, [r7, #16]
   return(result);
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	461a      	mov	r2, r3
 8012abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012abe:	623b      	str	r3, [r7, #32]
 8012ac0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ac2:	69f9      	ldr	r1, [r7, #28]
 8012ac4:	6a3a      	ldr	r2, [r7, #32]
 8012ac6:	e841 2300 	strex	r3, r2, [r1]
 8012aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d1e6      	bne.n	8012aa0 <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012ad2:	88fb      	ldrh	r3, [r7, #6]
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	68b9      	ldr	r1, [r7, #8]
 8012ad8:	68f8      	ldr	r0, [r7, #12]
 8012ada:	f000 fe9f 	bl	801381c <UART_Start_Receive_IT>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	e000      	b.n	8012ae4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012ae2:	2302      	movs	r3, #2
  }
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3728      	adds	r7, #40	@ 0x28
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	46002400 	.word	0x46002400
 8012af0:	56002400 	.word	0x56002400

08012af4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b0ba      	sub	sp, #232	@ 0xe8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	69db      	ldr	r3, [r3, #28]
 8012b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012b1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012b1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8012b22:	4013      	ands	r3, r2
 8012b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d11b      	bne.n	8012b68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b34:	f003 0320 	and.w	r3, r3, #32
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d015      	beq.n	8012b68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012b40:	f003 0320 	and.w	r3, r3, #32
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d105      	bne.n	8012b54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d009      	beq.n	8012b68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	f000 82cb 	beq.w	80130f4 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	4798      	blx	r3
      }
      return;
 8012b66:	e2c5      	b.n	80130f4 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f000 8123 	beq.w	8012db8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012b72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012b76:	4b8d      	ldr	r3, [pc, #564]	@ (8012dac <HAL_UART_IRQHandler+0x2b8>)
 8012b78:	4013      	ands	r3, r2
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d106      	bne.n	8012b8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012b7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012b82:	4b8b      	ldr	r3, [pc, #556]	@ (8012db0 <HAL_UART_IRQHandler+0x2bc>)
 8012b84:	4013      	ands	r3, r2
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f000 8116 	beq.w	8012db8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d011      	beq.n	8012bbc <HAL_UART_IRQHandler+0xc8>
 8012b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00b      	beq.n	8012bbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bb2:	f043 0201 	orr.w	r2, r3, #1
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bc0:	f003 0302 	and.w	r3, r3, #2
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d011      	beq.n	8012bec <HAL_UART_IRQHandler+0xf8>
 8012bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012bcc:	f003 0301 	and.w	r3, r3, #1
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00b      	beq.n	8012bec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2202      	movs	r2, #2
 8012bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012be2:	f043 0204 	orr.w	r2, r3, #4
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bf0:	f003 0304 	and.w	r3, r3, #4
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d011      	beq.n	8012c1c <HAL_UART_IRQHandler+0x128>
 8012bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d00b      	beq.n	8012c1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	2204      	movs	r2, #4
 8012c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c12:	f043 0202 	orr.w	r2, r3, #2
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c20:	f003 0308 	and.w	r3, r3, #8
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d017      	beq.n	8012c58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c2c:	f003 0320 	and.w	r3, r3, #32
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d105      	bne.n	8012c40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012c34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012c38:	4b5c      	ldr	r3, [pc, #368]	@ (8012dac <HAL_UART_IRQHandler+0x2b8>)
 8012c3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00b      	beq.n	8012c58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2208      	movs	r2, #8
 8012c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c4e:	f043 0208 	orr.w	r2, r3, #8
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d012      	beq.n	8012c8a <HAL_UART_IRQHandler+0x196>
 8012c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00c      	beq.n	8012c8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c80:	f043 0220 	orr.w	r2, r3, #32
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	f000 8231 	beq.w	80130f8 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c9a:	f003 0320 	and.w	r3, r3, #32
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d013      	beq.n	8012cca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ca6:	f003 0320 	and.w	r3, r3, #32
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d105      	bne.n	8012cba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d007      	beq.n	8012cca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d003      	beq.n	8012cca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cde:	2b40      	cmp	r3, #64	@ 0x40
 8012ce0:	d005      	beq.n	8012cee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012ce6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d054      	beq.n	8012d98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 feb6 	bl	8013a60 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cfe:	2b40      	cmp	r3, #64	@ 0x40
 8012d00:	d146      	bne.n	8012d90 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	3308      	adds	r3, #8
 8012d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012d10:	e853 3f00 	ldrex	r3, [r3]
 8012d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	3308      	adds	r3, #8
 8012d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012d3e:	e841 2300 	strex	r3, r2, [r1]
 8012d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d1d9      	bne.n	8012d02 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d017      	beq.n	8012d88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d5e:	4a15      	ldr	r2, [pc, #84]	@ (8012db4 <HAL_UART_IRQHandler+0x2c0>)
 8012d60:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7f5 fcd5 	bl	8008718 <HAL_DMA_Abort_IT>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d019      	beq.n	8012da8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012d82:	4610      	mov	r0, r2
 8012d84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d86:	e00f      	b.n	8012da8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 f9c9 	bl	8013120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d8e:	e00b      	b.n	8012da8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 f9c5 	bl	8013120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012d96:	e007      	b.n	8012da8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 f9c1 	bl	8013120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2200      	movs	r2, #0
 8012da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012da6:	e1a7      	b.n	80130f8 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012da8:	bf00      	nop
    return;
 8012daa:	e1a5      	b.n	80130f8 <HAL_UART_IRQHandler+0x604>
 8012dac:	10000001 	.word	0x10000001
 8012db0:	04000120 	.word	0x04000120
 8012db4:	08013b2d 	.word	0x08013b2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	f040 8150 	bne.w	8013062 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012dc6:	f003 0310 	and.w	r3, r3, #16
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	f000 8149 	beq.w	8013062 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012dd4:	f003 0310 	and.w	r3, r3, #16
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 8142 	beq.w	8013062 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2210      	movs	r2, #16
 8012de4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012df0:	2b40      	cmp	r3, #64	@ 0x40
 8012df2:	f040 80b8 	bne.w	8012f66 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012e04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f000 8177 	beq.w	80130fc <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	f080 816f 	bcs.w	80130fc <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012e24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e30:	2b81      	cmp	r3, #129	@ 0x81
 8012e32:	f000 8087 	beq.w	8012f44 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012e42:	e853 3f00 	ldrex	r3, [r3]
 8012e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012e52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012e64:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012e6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012e70:	e841 2300 	strex	r3, r2, [r1]
 8012e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1da      	bne.n	8012e36 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	3308      	adds	r3, #8
 8012e86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012e8a:	e853 3f00 	ldrex	r3, [r3]
 8012e8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012e90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012e92:	f023 0301 	bic.w	r3, r3, #1
 8012e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3308      	adds	r3, #8
 8012ea0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012ea4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012eaa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012eac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012eb0:	e841 2300 	strex	r3, r2, [r1]
 8012eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d1e1      	bne.n	8012e80 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	3308      	adds	r3, #8
 8012ec2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ec4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012ec6:	e853 3f00 	ldrex	r3, [r3]
 8012eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	3308      	adds	r3, #8
 8012edc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012ee0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ee4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012ee6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012ee8:	e841 2300 	strex	r3, r2, [r1]
 8012eec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1e3      	bne.n	8012ebc <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2220      	movs	r2, #32
 8012ef8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f0a:	e853 3f00 	ldrex	r3, [r3]
 8012f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f12:	f023 0310 	bic.w	r3, r3, #16
 8012f16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012f24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012f26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012f2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012f2c:	e841 2300 	strex	r3, r2, [r1]
 8012f30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1e4      	bne.n	8012f02 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7f5 fb6e 	bl	8008620 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2202      	movs	r2, #2
 8012f48:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f000 f8e8 	bl	8013134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012f64:	e0ca      	b.n	80130fc <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f000 80bc 	beq.w	8013100 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8012f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f000 80b7 	beq.w	8013100 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f9a:	e853 3f00 	ldrex	r3, [r3]
 8012f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8012fb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012fbc:	e841 2300 	strex	r3, r2, [r1]
 8012fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d1e4      	bne.n	8012f92 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	3308      	adds	r3, #8
 8012fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fd2:	e853 3f00 	ldrex	r3, [r3]
 8012fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8012fd8:	6a3b      	ldr	r3, [r7, #32]
 8012fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012fde:	f023 0301 	bic.w	r3, r3, #1
 8012fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	3308      	adds	r3, #8
 8012fec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012ff0:	633a      	str	r2, [r7, #48]	@ 0x30
 8012ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ff4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ff8:	e841 2300 	strex	r3, r2, [r1]
 8012ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013000:	2b00      	cmp	r3, #0
 8013002:	d1e1      	bne.n	8012fc8 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2220      	movs	r2, #32
 8013008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2200      	movs	r2, #0
 8013010:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	e853 3f00 	ldrex	r3, [r3]
 8013024:	60fb      	str	r3, [r7, #12]
   return(result);
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f023 0310 	bic.w	r3, r3, #16
 801302c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	461a      	mov	r2, r3
 8013036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801303a:	61fb      	str	r3, [r7, #28]
 801303c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801303e:	69b9      	ldr	r1, [r7, #24]
 8013040:	69fa      	ldr	r2, [r7, #28]
 8013042:	e841 2300 	strex	r3, r2, [r1]
 8013046:	617b      	str	r3, [r7, #20]
   return(result);
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1e4      	bne.n	8013018 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2202      	movs	r2, #2
 8013052:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013058:	4619      	mov	r1, r3
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 f86a 	bl	8013134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013060:	e04e      	b.n	8013100 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801306a:	2b00      	cmp	r3, #0
 801306c:	d014      	beq.n	8013098 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013076:	2b00      	cmp	r3, #0
 8013078:	d105      	bne.n	8013086 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801307a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801307e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013082:	2b00      	cmp	r3, #0
 8013084:	d008      	beq.n	8013098 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801308a:	2b00      	cmp	r3, #0
 801308c:	d03a      	beq.n	8013104 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	4798      	blx	r3
    }
    return;
 8013096:	e035      	b.n	8013104 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801309c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d009      	beq.n	80130b8 <HAL_UART_IRQHandler+0x5c4>
 80130a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80130a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d003      	beq.n	80130b8 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 fd51 	bl	8013b58 <UART_EndTransmit_IT>
    return;
 80130b6:	e026      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80130b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80130bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d009      	beq.n	80130d8 <HAL_UART_IRQHandler+0x5e4>
 80130c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80130c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d003      	beq.n	80130d8 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f001 faaf 	bl	8014634 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80130d6:	e016      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80130d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80130dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d010      	beq.n	8013106 <HAL_UART_IRQHandler+0x612>
 80130e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	da0c      	bge.n	8013106 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f001 fa97 	bl	8014620 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80130f2:	e008      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
      return;
 80130f4:	bf00      	nop
 80130f6:	e006      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
    return;
 80130f8:	bf00      	nop
 80130fa:	e004      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
      return;
 80130fc:	bf00      	nop
 80130fe:	e002      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
      return;
 8013100:	bf00      	nop
 8013102:	e000      	b.n	8013106 <HAL_UART_IRQHandler+0x612>
    return;
 8013104:	bf00      	nop
  }
}
 8013106:	37e8      	adds	r7, #232	@ 0xe8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801310c:	b480      	push	{r7}
 801310e:	b083      	sub	sp, #12
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013114:	bf00      	nop
 8013116:	370c      	adds	r7, #12
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr

08013120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013128:	bf00      	nop
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	460b      	mov	r3, r1
 801313e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013140:	bf00      	nop
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013150:	b094      	sub	sp, #80	@ 0x50
 8013152:	af00      	add	r7, sp, #0
 8013154:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013156:	2300      	movs	r3, #0
 8013158:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	4b83      	ldr	r3, [pc, #524]	@ (8013370 <UART_SetConfig+0x224>)
 8013162:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013166:	689a      	ldr	r2, [r3, #8]
 8013168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316a:	691b      	ldr	r3, [r3, #16]
 801316c:	431a      	orrs	r2, r3
 801316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013170:	695b      	ldr	r3, [r3, #20]
 8013172:	431a      	orrs	r2, r3
 8013174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013176:	69db      	ldr	r3, [r3, #28]
 8013178:	4313      	orrs	r3, r2
 801317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	497c      	ldr	r1, [pc, #496]	@ (8013374 <UART_SetConfig+0x228>)
 8013184:	4019      	ands	r1, r3
 8013186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801318c:	430b      	orrs	r3, r1
 801318e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319c:	68d9      	ldr	r1, [r3, #12]
 801319e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	ea40 0301 	orr.w	r3, r0, r1
 80131a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80131a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131aa:	699b      	ldr	r3, [r3, #24]
 80131ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80131ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	4b6f      	ldr	r3, [pc, #444]	@ (8013370 <UART_SetConfig+0x224>)
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d009      	beq.n	80131cc <UART_SetConfig+0x80>
 80131b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	4b6e      	ldr	r3, [pc, #440]	@ (8013378 <UART_SetConfig+0x22c>)
 80131be:	429a      	cmp	r2, r3
 80131c0:	d004      	beq.n	80131cc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80131c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131c4:	6a1a      	ldr	r2, [r3, #32]
 80131c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131c8:	4313      	orrs	r3, r2
 80131ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80131cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80131d6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80131da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131e0:	430b      	orrs	r3, r1
 80131e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80131e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ea:	f023 000f 	bic.w	r0, r3, #15
 80131ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80131f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	ea40 0301 	orr.w	r3, r0, r1
 80131fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	4b5e      	ldr	r3, [pc, #376]	@ (801337c <UART_SetConfig+0x230>)
 8013202:	429a      	cmp	r2, r3
 8013204:	d102      	bne.n	801320c <UART_SetConfig+0xc0>
 8013206:	2301      	movs	r3, #1
 8013208:	64bb      	str	r3, [r7, #72]	@ 0x48
 801320a:	e032      	b.n	8013272 <UART_SetConfig+0x126>
 801320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	4b5b      	ldr	r3, [pc, #364]	@ (8013380 <UART_SetConfig+0x234>)
 8013212:	429a      	cmp	r2, r3
 8013214:	d102      	bne.n	801321c <UART_SetConfig+0xd0>
 8013216:	2302      	movs	r3, #2
 8013218:	64bb      	str	r3, [r7, #72]	@ 0x48
 801321a:	e02a      	b.n	8013272 <UART_SetConfig+0x126>
 801321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	4b58      	ldr	r3, [pc, #352]	@ (8013384 <UART_SetConfig+0x238>)
 8013222:	429a      	cmp	r2, r3
 8013224:	d102      	bne.n	801322c <UART_SetConfig+0xe0>
 8013226:	2304      	movs	r3, #4
 8013228:	64bb      	str	r3, [r7, #72]	@ 0x48
 801322a:	e022      	b.n	8013272 <UART_SetConfig+0x126>
 801322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	4b55      	ldr	r3, [pc, #340]	@ (8013388 <UART_SetConfig+0x23c>)
 8013232:	429a      	cmp	r2, r3
 8013234:	d102      	bne.n	801323c <UART_SetConfig+0xf0>
 8013236:	2308      	movs	r3, #8
 8013238:	64bb      	str	r3, [r7, #72]	@ 0x48
 801323a:	e01a      	b.n	8013272 <UART_SetConfig+0x126>
 801323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	4b52      	ldr	r3, [pc, #328]	@ (801338c <UART_SetConfig+0x240>)
 8013242:	429a      	cmp	r2, r3
 8013244:	d102      	bne.n	801324c <UART_SetConfig+0x100>
 8013246:	2310      	movs	r3, #16
 8013248:	64bb      	str	r3, [r7, #72]	@ 0x48
 801324a:	e012      	b.n	8013272 <UART_SetConfig+0x126>
 801324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	4b4f      	ldr	r3, [pc, #316]	@ (8013390 <UART_SetConfig+0x244>)
 8013252:	429a      	cmp	r2, r3
 8013254:	d103      	bne.n	801325e <UART_SetConfig+0x112>
 8013256:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801325a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801325c:	e009      	b.n	8013272 <UART_SetConfig+0x126>
 801325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	4b43      	ldr	r3, [pc, #268]	@ (8013370 <UART_SetConfig+0x224>)
 8013264:	429a      	cmp	r2, r3
 8013266:	d102      	bne.n	801326e <UART_SetConfig+0x122>
 8013268:	2320      	movs	r3, #32
 801326a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801326c:	e001      	b.n	8013272 <UART_SetConfig+0x126>
 801326e:	2300      	movs	r3, #0
 8013270:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	4b3e      	ldr	r3, [pc, #248]	@ (8013370 <UART_SetConfig+0x224>)
 8013278:	429a      	cmp	r2, r3
 801327a:	d005      	beq.n	8013288 <UART_SetConfig+0x13c>
 801327c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327e:	681a      	ldr	r2, [r3, #0]
 8013280:	4b3d      	ldr	r3, [pc, #244]	@ (8013378 <UART_SetConfig+0x22c>)
 8013282:	429a      	cmp	r2, r3
 8013284:	f040 8088 	bne.w	8013398 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801328a:	2200      	movs	r2, #0
 801328c:	623b      	str	r3, [r7, #32]
 801328e:	627a      	str	r2, [r7, #36]	@ 0x24
 8013290:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013294:	f7fc f8c2 	bl	800f41c <HAL_RCCEx_GetPeriphCLKFreq>
 8013298:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801329a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801329c:	2b00      	cmp	r3, #0
 801329e:	f000 80eb 	beq.w	8013478 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80132a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132a6:	4a3b      	ldr	r2, [pc, #236]	@ (8013394 <UART_SetConfig+0x248>)
 80132a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132ac:	461a      	mov	r2, r3
 80132ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80132b4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80132b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b8:	685a      	ldr	r2, [r3, #4]
 80132ba:	4613      	mov	r3, r2
 80132bc:	005b      	lsls	r3, r3, #1
 80132be:	4413      	add	r3, r2
 80132c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d305      	bcc.n	80132d2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80132c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80132cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d903      	bls.n	80132da <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80132d2:	2301      	movs	r3, #1
 80132d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80132d8:	e048      	b.n	801336c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80132da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132dc:	2200      	movs	r2, #0
 80132de:	61bb      	str	r3, [r7, #24]
 80132e0:	61fa      	str	r2, [r7, #28]
 80132e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132e6:	4a2b      	ldr	r2, [pc, #172]	@ (8013394 <UART_SetConfig+0x248>)
 80132e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	2200      	movs	r2, #0
 80132f0:	613b      	str	r3, [r7, #16]
 80132f2:	617a      	str	r2, [r7, #20]
 80132f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80132f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80132fc:	f7ed fc82 	bl	8000c04 <__aeabi_uldivmod>
 8013300:	4602      	mov	r2, r0
 8013302:	460b      	mov	r3, r1
 8013304:	4610      	mov	r0, r2
 8013306:	4619      	mov	r1, r3
 8013308:	f04f 0200 	mov.w	r2, #0
 801330c:	f04f 0300 	mov.w	r3, #0
 8013310:	020b      	lsls	r3, r1, #8
 8013312:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013316:	0202      	lsls	r2, r0, #8
 8013318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801331a:	6849      	ldr	r1, [r1, #4]
 801331c:	0849      	lsrs	r1, r1, #1
 801331e:	2000      	movs	r0, #0
 8013320:	460c      	mov	r4, r1
 8013322:	4605      	mov	r5, r0
 8013324:	eb12 0804 	adds.w	r8, r2, r4
 8013328:	eb43 0905 	adc.w	r9, r3, r5
 801332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	60bb      	str	r3, [r7, #8]
 8013334:	60fa      	str	r2, [r7, #12]
 8013336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801333a:	4640      	mov	r0, r8
 801333c:	4649      	mov	r1, r9
 801333e:	f7ed fc61 	bl	8000c04 <__aeabi_uldivmod>
 8013342:	4602      	mov	r2, r0
 8013344:	460b      	mov	r3, r1
 8013346:	4613      	mov	r3, r2
 8013348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801334a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801334c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013350:	d308      	bcc.n	8013364 <UART_SetConfig+0x218>
 8013352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013358:	d204      	bcs.n	8013364 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 801335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013360:	60da      	str	r2, [r3, #12]
 8013362:	e003      	b.n	801336c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8013364:	2301      	movs	r3, #1
 8013366:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801336a:	e085      	b.n	8013478 <UART_SetConfig+0x32c>
 801336c:	e084      	b.n	8013478 <UART_SetConfig+0x32c>
 801336e:	bf00      	nop
 8013370:	46002400 	.word	0x46002400
 8013374:	cfff69f3 	.word	0xcfff69f3
 8013378:	56002400 	.word	0x56002400
 801337c:	40013800 	.word	0x40013800
 8013380:	40004400 	.word	0x40004400
 8013384:	40004800 	.word	0x40004800
 8013388:	40004c00 	.word	0x40004c00
 801338c:	40005000 	.word	0x40005000
 8013390:	40006400 	.word	0x40006400
 8013394:	08018a60 	.word	0x08018a60
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801339a:	69db      	ldr	r3, [r3, #28]
 801339c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80133a0:	d13c      	bne.n	801341c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80133a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133a4:	2200      	movs	r2, #0
 80133a6:	603b      	str	r3, [r7, #0]
 80133a8:	607a      	str	r2, [r7, #4]
 80133aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80133ae:	f7fc f835 	bl	800f41c <HAL_RCCEx_GetPeriphCLKFreq>
 80133b2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80133b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d05e      	beq.n	8013478 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133be:	4a39      	ldr	r2, [pc, #228]	@ (80134a4 <UART_SetConfig+0x358>)
 80133c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133c4:	461a      	mov	r2, r3
 80133c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133cc:	005a      	lsls	r2, r3, #1
 80133ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	085b      	lsrs	r3, r3, #1
 80133d4:	441a      	add	r2, r3
 80133d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	fbb2 f3f3 	udiv	r3, r2, r3
 80133de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80133e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133e2:	2b0f      	cmp	r3, #15
 80133e4:	d916      	bls.n	8013414 <UART_SetConfig+0x2c8>
 80133e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133ec:	d212      	bcs.n	8013414 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80133ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	f023 030f 	bic.w	r3, r3, #15
 80133f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133fa:	085b      	lsrs	r3, r3, #1
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	f003 0307 	and.w	r3, r3, #7
 8013402:	b29a      	uxth	r2, r3
 8013404:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013406:	4313      	orrs	r3, r2
 8013408:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013410:	60da      	str	r2, [r3, #12]
 8013412:	e031      	b.n	8013478 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8013414:	2301      	movs	r3, #1
 8013416:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801341a:	e02d      	b.n	8013478 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801341c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801341e:	2200      	movs	r2, #0
 8013420:	469a      	mov	sl, r3
 8013422:	4693      	mov	fp, r2
 8013424:	4650      	mov	r0, sl
 8013426:	4659      	mov	r1, fp
 8013428:	f7fb fff8 	bl	800f41c <HAL_RCCEx_GetPeriphCLKFreq>
 801342c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013430:	2b00      	cmp	r3, #0
 8013432:	d021      	beq.n	8013478 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013438:	4a1a      	ldr	r2, [pc, #104]	@ (80134a4 <UART_SetConfig+0x358>)
 801343a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801343e:	461a      	mov	r2, r3
 8013440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013442:	fbb3 f2f2 	udiv	r2, r3, r2
 8013446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	085b      	lsrs	r3, r3, #1
 801344c:	441a      	add	r2, r3
 801344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	fbb2 f3f3 	udiv	r3, r2, r3
 8013456:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801345a:	2b0f      	cmp	r3, #15
 801345c:	d909      	bls.n	8013472 <UART_SetConfig+0x326>
 801345e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013464:	d205      	bcs.n	8013472 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013468:	b29a      	uxth	r2, r3
 801346a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	60da      	str	r2, [r3, #12]
 8013470:	e002      	b.n	8013478 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8013472:	2301      	movs	r3, #1
 8013474:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801347a:	2201      	movs	r2, #1
 801347c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013482:	2201      	movs	r2, #1
 8013484:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348a:	2200      	movs	r2, #0
 801348c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013490:	2200      	movs	r2, #0
 8013492:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013494:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013498:	4618      	mov	r0, r3
 801349a:	3750      	adds	r7, #80	@ 0x50
 801349c:	46bd      	mov	sp, r7
 801349e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80134a2:	bf00      	nop
 80134a4:	08018a60 	.word	0x08018a60

080134a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134b4:	f003 0308 	and.w	r3, r3, #8
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d00a      	beq.n	80134d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	430a      	orrs	r2, r1
 80134d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d00a      	beq.n	80134f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	430a      	orrs	r2, r1
 80134f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134f8:	f003 0302 	and.w	r3, r3, #2
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00a      	beq.n	8013516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	430a      	orrs	r2, r1
 8013514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801351a:	f003 0304 	and.w	r3, r3, #4
 801351e:	2b00      	cmp	r3, #0
 8013520:	d00a      	beq.n	8013538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	430a      	orrs	r2, r1
 8013536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801353c:	f003 0310 	and.w	r3, r3, #16
 8013540:	2b00      	cmp	r3, #0
 8013542:	d00a      	beq.n	801355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	430a      	orrs	r2, r1
 8013558:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801355e:	f003 0320 	and.w	r3, r3, #32
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00a      	beq.n	801357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	689b      	ldr	r3, [r3, #8]
 801356c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	430a      	orrs	r2, r1
 801357a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013584:	2b00      	cmp	r3, #0
 8013586:	d01a      	beq.n	80135be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	430a      	orrs	r2, r1
 801359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80135a6:	d10a      	bne.n	80135be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	430a      	orrs	r2, r1
 80135bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00a      	beq.n	80135e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	430a      	orrs	r2, r1
 80135de:	605a      	str	r2, [r3, #4]
  }
}
 80135e0:	bf00      	nop
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b098      	sub	sp, #96	@ 0x60
 80135f0:	af02      	add	r7, sp, #8
 80135f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2200      	movs	r2, #0
 80135f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80135fc:	f7f2 fab0 	bl	8005b60 <HAL_GetTick>
 8013600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f003 0308 	and.w	r3, r3, #8
 801360c:	2b08      	cmp	r3, #8
 801360e:	d12f      	bne.n	8013670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013618:	2200      	movs	r2, #0
 801361a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f000 f88e 	bl	8013740 <UART_WaitOnFlagUntilTimeout>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d022      	beq.n	8013670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013632:	e853 3f00 	ldrex	r3, [r3]
 8013636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801363a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801363e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	461a      	mov	r2, r3
 8013646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013648:	647b      	str	r3, [r7, #68]	@ 0x44
 801364a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801364c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801364e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013650:	e841 2300 	strex	r3, r2, [r1]
 8013654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1e6      	bne.n	801362a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2220      	movs	r2, #32
 8013660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801366c:	2303      	movs	r3, #3
 801366e:	e063      	b.n	8013738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f003 0304 	and.w	r3, r3, #4
 801367a:	2b04      	cmp	r3, #4
 801367c:	d149      	bne.n	8013712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801367e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013686:	2200      	movs	r2, #0
 8013688:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f000 f857 	bl	8013740 <UART_WaitOnFlagUntilTimeout>
 8013692:	4603      	mov	r3, r0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d03c      	beq.n	8013712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a0:	e853 3f00 	ldrex	r3, [r3]
 80136a4:	623b      	str	r3, [r7, #32]
   return(result);
 80136a6:	6a3b      	ldr	r3, [r7, #32]
 80136a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80136ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	461a      	mov	r2, r3
 80136b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80136b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80136bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136be:	e841 2300 	strex	r3, r2, [r1]
 80136c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80136c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1e6      	bne.n	8013698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	3308      	adds	r3, #8
 80136d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	e853 3f00 	ldrex	r3, [r3]
 80136d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	f023 0301 	bic.w	r3, r3, #1
 80136e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	3308      	adds	r3, #8
 80136e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80136ea:	61fa      	str	r2, [r7, #28]
 80136ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ee:	69b9      	ldr	r1, [r7, #24]
 80136f0:	69fa      	ldr	r2, [r7, #28]
 80136f2:	e841 2300 	strex	r3, r2, [r1]
 80136f6:	617b      	str	r3, [r7, #20]
   return(result);
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d1e5      	bne.n	80136ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2220      	movs	r2, #32
 8013702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2200      	movs	r2, #0
 801370a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801370e:	2303      	movs	r3, #3
 8013710:	e012      	b.n	8013738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2220      	movs	r2, #32
 8013716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2220      	movs	r2, #32
 801371e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2200      	movs	r2, #0
 801372c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2200      	movs	r2, #0
 8013732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013736:	2300      	movs	r3, #0
}
 8013738:	4618      	mov	r0, r3
 801373a:	3758      	adds	r7, #88	@ 0x58
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	60f8      	str	r0, [r7, #12]
 8013748:	60b9      	str	r1, [r7, #8]
 801374a:	603b      	str	r3, [r7, #0]
 801374c:	4613      	mov	r3, r2
 801374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013750:	e04f      	b.n	80137f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013758:	d04b      	beq.n	80137f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801375a:	f7f2 fa01 	bl	8005b60 <HAL_GetTick>
 801375e:	4602      	mov	r2, r0
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	1ad3      	subs	r3, r2, r3
 8013764:	69ba      	ldr	r2, [r7, #24]
 8013766:	429a      	cmp	r2, r3
 8013768:	d302      	bcc.n	8013770 <UART_WaitOnFlagUntilTimeout+0x30>
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d101      	bne.n	8013774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013770:	2303      	movs	r3, #3
 8013772:	e04e      	b.n	8013812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f003 0304 	and.w	r3, r3, #4
 801377e:	2b00      	cmp	r3, #0
 8013780:	d037      	beq.n	80137f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2b80      	cmp	r3, #128	@ 0x80
 8013786:	d034      	beq.n	80137f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b40      	cmp	r3, #64	@ 0x40
 801378c:	d031      	beq.n	80137f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	69db      	ldr	r3, [r3, #28]
 8013794:	f003 0308 	and.w	r3, r3, #8
 8013798:	2b08      	cmp	r3, #8
 801379a:	d110      	bne.n	80137be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2208      	movs	r2, #8
 80137a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f000 f95b 	bl	8013a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	2208      	movs	r2, #8
 80137ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	2200      	movs	r2, #0
 80137b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80137ba:	2301      	movs	r3, #1
 80137bc:	e029      	b.n	8013812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	69db      	ldr	r3, [r3, #28]
 80137c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80137c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80137cc:	d111      	bne.n	80137f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80137d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f000 f941 	bl	8013a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	2220      	movs	r2, #32
 80137e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2200      	movs	r2, #0
 80137ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80137ee:	2303      	movs	r3, #3
 80137f0:	e00f      	b.n	8013812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	69da      	ldr	r2, [r3, #28]
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	4013      	ands	r3, r2
 80137fc:	68ba      	ldr	r2, [r7, #8]
 80137fe:	429a      	cmp	r2, r3
 8013800:	bf0c      	ite	eq
 8013802:	2301      	moveq	r3, #1
 8013804:	2300      	movne	r3, #0
 8013806:	b2db      	uxtb	r3, r3
 8013808:	461a      	mov	r2, r3
 801380a:	79fb      	ldrb	r3, [r7, #7]
 801380c:	429a      	cmp	r2, r3
 801380e:	d0a0      	beq.n	8013752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013810:	2300      	movs	r3, #0
}
 8013812:	4618      	mov	r0, r3
 8013814:	3710      	adds	r7, #16
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
	...

0801381c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801381c:	b480      	push	{r7}
 801381e:	b0a3      	sub	sp, #140	@ 0x8c
 8013820:	af00      	add	r7, sp, #0
 8013822:	60f8      	str	r0, [r7, #12]
 8013824:	60b9      	str	r1, [r7, #8]
 8013826:	4613      	mov	r3, r2
 8013828:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	68ba      	ldr	r2, [r7, #8]
 801382e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	88fa      	ldrh	r2, [r7, #6]
 8013834:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	88fa      	ldrh	r2, [r7, #6]
 801383c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	2200      	movs	r2, #0
 8013844:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	689b      	ldr	r3, [r3, #8]
 801384a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801384e:	d10e      	bne.n	801386e <UART_Start_Receive_IT+0x52>
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	691b      	ldr	r3, [r3, #16]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d105      	bne.n	8013864 <UART_Start_Receive_IT+0x48>
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801385e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013862:	e02d      	b.n	80138c0 <UART_Start_Receive_IT+0xa4>
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	22ff      	movs	r2, #255	@ 0xff
 8013868:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801386c:	e028      	b.n	80138c0 <UART_Start_Receive_IT+0xa4>
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d10d      	bne.n	8013892 <UART_Start_Receive_IT+0x76>
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d104      	bne.n	8013888 <UART_Start_Receive_IT+0x6c>
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	22ff      	movs	r2, #255	@ 0xff
 8013882:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013886:	e01b      	b.n	80138c0 <UART_Start_Receive_IT+0xa4>
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	227f      	movs	r2, #127	@ 0x7f
 801388c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8013890:	e016      	b.n	80138c0 <UART_Start_Receive_IT+0xa4>
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801389a:	d10d      	bne.n	80138b8 <UART_Start_Receive_IT+0x9c>
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	691b      	ldr	r3, [r3, #16]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d104      	bne.n	80138ae <UART_Start_Receive_IT+0x92>
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	227f      	movs	r2, #127	@ 0x7f
 80138a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80138ac:	e008      	b.n	80138c0 <UART_Start_Receive_IT+0xa4>
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	223f      	movs	r2, #63	@ 0x3f
 80138b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80138b6:	e003      	b.n	80138c0 <UART_Start_Receive_IT+0xa4>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2200      	movs	r2, #0
 80138bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	2200      	movs	r2, #0
 80138c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2222      	movs	r2, #34	@ 0x22
 80138cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	3308      	adds	r3, #8
 80138d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80138da:	e853 3f00 	ldrex	r3, [r3]
 80138de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80138e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80138e2:	f043 0301 	orr.w	r3, r3, #1
 80138e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	3308      	adds	r3, #8
 80138f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80138f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80138f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80138fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80138fc:	e841 2300 	strex	r3, r2, [r1]
 8013900:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8013902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013904:	2b00      	cmp	r3, #0
 8013906:	d1e3      	bne.n	80138d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801390c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013910:	d14f      	bne.n	80139b2 <UART_Start_Receive_IT+0x196>
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013918:	88fa      	ldrh	r2, [r7, #6]
 801391a:	429a      	cmp	r2, r3
 801391c:	d349      	bcc.n	80139b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013926:	d107      	bne.n	8013938 <UART_Start_Receive_IT+0x11c>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	691b      	ldr	r3, [r3, #16]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d103      	bne.n	8013938 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	4a47      	ldr	r2, [pc, #284]	@ (8013a50 <UART_Start_Receive_IT+0x234>)
 8013934:	675a      	str	r2, [r3, #116]	@ 0x74
 8013936:	e002      	b.n	801393e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	4a46      	ldr	r2, [pc, #280]	@ (8013a54 <UART_Start_Receive_IT+0x238>)
 801393c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	691b      	ldr	r3, [r3, #16]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d01a      	beq.n	801397c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801394c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801394e:	e853 3f00 	ldrex	r3, [r3]
 8013952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8013954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801395a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	461a      	mov	r2, r3
 8013964:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801396a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801396c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801396e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013970:	e841 2300 	strex	r3, r2, [r1]
 8013974:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8013976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013978:	2b00      	cmp	r3, #0
 801397a:	d1e4      	bne.n	8013946 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	3308      	adds	r3, #8
 8013982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013986:	e853 3f00 	ldrex	r3, [r3]
 801398a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013992:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	3308      	adds	r3, #8
 801399a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801399c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801399e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80139a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139a4:	e841 2300 	strex	r3, r2, [r1]
 80139a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80139aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1e5      	bne.n	801397c <UART_Start_Receive_IT+0x160>
 80139b0:	e046      	b.n	8013a40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80139ba:	d107      	bne.n	80139cc <UART_Start_Receive_IT+0x1b0>
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	691b      	ldr	r3, [r3, #16]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d103      	bne.n	80139cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	4a24      	ldr	r2, [pc, #144]	@ (8013a58 <UART_Start_Receive_IT+0x23c>)
 80139c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80139ca:	e002      	b.n	80139d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	4a23      	ldr	r2, [pc, #140]	@ (8013a5c <UART_Start_Receive_IT+0x240>)
 80139d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	691b      	ldr	r3, [r3, #16]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d019      	beq.n	8013a0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e2:	e853 3f00 	ldrex	r3, [r3]
 80139e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80139e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80139ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	461a      	mov	r2, r3
 80139f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80139f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80139fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80139fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a00:	e841 2300 	strex	r3, r2, [r1]
 8013a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d1e6      	bne.n	80139da <UART_Start_Receive_IT+0x1be>
 8013a0c:	e018      	b.n	8013a40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	e853 3f00 	ldrex	r3, [r3]
 8013a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	f043 0320 	orr.w	r3, r3, #32
 8013a22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	461a      	mov	r2, r3
 8013a2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013a2c:	623b      	str	r3, [r7, #32]
 8013a2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a30:	69f9      	ldr	r1, [r7, #28]
 8013a32:	6a3a      	ldr	r2, [r7, #32]
 8013a34:	e841 2300 	strex	r3, r2, [r1]
 8013a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1e6      	bne.n	8013a0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	378c      	adds	r7, #140	@ 0x8c
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop
 8013a50:	080142a9 	.word	0x080142a9
 8013a54:	08013f39 	.word	0x08013f39
 8013a58:	08013d75 	.word	0x08013d75
 8013a5c:	08013bb1 	.word	0x08013bb1

08013a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b095      	sub	sp, #84	@ 0x54
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a70:	e853 3f00 	ldrex	r3, [r3]
 8013a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	461a      	mov	r2, r3
 8013a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8013a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013a8e:	e841 2300 	strex	r3, r2, [r1]
 8013a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d1e6      	bne.n	8013a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	3308      	adds	r3, #8
 8013aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	e853 3f00 	ldrex	r3, [r3]
 8013aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013ab0:	f023 0301 	bic.w	r3, r3, #1
 8013ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	3308      	adds	r3, #8
 8013abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ac6:	e841 2300 	strex	r3, r2, [r1]
 8013aca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d1e3      	bne.n	8013a9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d118      	bne.n	8013b0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	e853 3f00 	ldrex	r3, [r3]
 8013ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	f023 0310 	bic.w	r3, r3, #16
 8013aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	461a      	mov	r2, r3
 8013af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013af8:	61bb      	str	r3, [r7, #24]
 8013afa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013afc:	6979      	ldr	r1, [r7, #20]
 8013afe:	69ba      	ldr	r2, [r7, #24]
 8013b00:	e841 2300 	strex	r3, r2, [r1]
 8013b04:	613b      	str	r3, [r7, #16]
   return(result);
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1e6      	bne.n	8013ada <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2220      	movs	r2, #32
 8013b10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2200      	movs	r2, #0
 8013b18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013b20:	bf00      	nop
 8013b22:	3754      	adds	r7, #84	@ 0x54
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2200      	movs	r2, #0
 8013b46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013b4a:	68f8      	ldr	r0, [r7, #12]
 8013b4c:	f7ff fae8 	bl	8013120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013b50:	bf00      	nop
 8013b52:	3710      	adds	r7, #16
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b088      	sub	sp, #32
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	e853 3f00 	ldrex	r3, [r3]
 8013b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013b74:	61fb      	str	r3, [r7, #28]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	61bb      	str	r3, [r7, #24]
 8013b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b82:	6979      	ldr	r1, [r7, #20]
 8013b84:	69ba      	ldr	r2, [r7, #24]
 8013b86:	e841 2300 	strex	r3, r2, [r1]
 8013b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d1e6      	bne.n	8013b60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2220      	movs	r2, #32
 8013b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7ff fab3 	bl	801310c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013ba6:	bf00      	nop
 8013ba8:	3720      	adds	r7, #32
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
	...

08013bb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b09c      	sub	sp, #112	@ 0x70
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013bbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013bc8:	2b22      	cmp	r3, #34	@ 0x22
 8013bca:	f040 80c3 	bne.w	8013d54 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013bd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8013bdc:	b2d9      	uxtb	r1, r3
 8013bde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013be8:	400a      	ands	r2, r1
 8013bea:	b2d2      	uxtb	r2, r2
 8013bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	3b01      	subs	r3, #1
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f040 80a6 	bne.w	8013d64 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c20:	e853 3f00 	ldrex	r3, [r3]
 8013c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	461a      	mov	r2, r3
 8013c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c3e:	e841 2300 	strex	r3, r2, [r1]
 8013c42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1e6      	bne.n	8013c18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	3308      	adds	r3, #8
 8013c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c54:	e853 3f00 	ldrex	r3, [r3]
 8013c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c5c:	f023 0301 	bic.w	r3, r3, #1
 8013c60:	667b      	str	r3, [r7, #100]	@ 0x64
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	3308      	adds	r3, #8
 8013c68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8013c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c72:	e841 2300 	strex	r3, r2, [r1]
 8013c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d1e5      	bne.n	8013c4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2220      	movs	r2, #32
 8013c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a35      	ldr	r2, [pc, #212]	@ (8013d6c <UART_RxISR_8BIT+0x1bc>)
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d024      	beq.n	8013ce6 <UART_RxISR_8BIT+0x136>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4a33      	ldr	r2, [pc, #204]	@ (8013d70 <UART_RxISR_8BIT+0x1c0>)
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d01f      	beq.n	8013ce6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d018      	beq.n	8013ce6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cbc:	e853 3f00 	ldrex	r3, [r3]
 8013cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8013cc2:	6a3b      	ldr	r3, [r7, #32]
 8013cc4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	461a      	mov	r2, r3
 8013cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8013cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cda:	e841 2300 	strex	r3, r2, [r1]
 8013cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1e6      	bne.n	8013cb4 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d12e      	bne.n	8013d4c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	e853 3f00 	ldrex	r3, [r3]
 8013d00:	60fb      	str	r3, [r7, #12]
   return(result);
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	f023 0310 	bic.w	r3, r3, #16
 8013d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	461a      	mov	r2, r3
 8013d10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d12:	61fb      	str	r3, [r7, #28]
 8013d14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d16:	69b9      	ldr	r1, [r7, #24]
 8013d18:	69fa      	ldr	r2, [r7, #28]
 8013d1a:	e841 2300 	strex	r3, r2, [r1]
 8013d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d1e6      	bne.n	8013cf4 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	69db      	ldr	r3, [r3, #28]
 8013d2c:	f003 0310 	and.w	r3, r3, #16
 8013d30:	2b10      	cmp	r3, #16
 8013d32:	d103      	bne.n	8013d3c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	2210      	movs	r2, #16
 8013d3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013d42:	4619      	mov	r1, r3
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff f9f5 	bl	8013134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013d4a:	e00b      	b.n	8013d64 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f7ed f901 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 8013d52:	e007      	b.n	8013d64 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	699a      	ldr	r2, [r3, #24]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f042 0208 	orr.w	r2, r2, #8
 8013d62:	619a      	str	r2, [r3, #24]
}
 8013d64:	bf00      	nop
 8013d66:	3770      	adds	r7, #112	@ 0x70
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	46002400 	.word	0x46002400
 8013d70:	56002400 	.word	0x56002400

08013d74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b09c      	sub	sp, #112	@ 0x70
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013d82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013d8c:	2b22      	cmp	r3, #34	@ 0x22
 8013d8e:	f040 80c3 	bne.w	8013f18 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013da0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8013da2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8013da6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8013daa:	4013      	ands	r3, r2
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013db0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013db6:	1c9a      	adds	r2, r3, #2
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	3b01      	subs	r3, #1
 8013dc6:	b29a      	uxth	r2, r3
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	f040 80a6 	bne.w	8013f28 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013de4:	e853 3f00 	ldrex	r3, [r3]
 8013de8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8013dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013df0:	667b      	str	r3, [r7, #100]	@ 0x64
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	461a      	mov	r2, r3
 8013df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013dfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8013dfc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013e00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e02:	e841 2300 	strex	r3, r2, [r1]
 8013e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8013e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d1e6      	bne.n	8013ddc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	3308      	adds	r3, #8
 8013e14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e18:	e853 3f00 	ldrex	r3, [r3]
 8013e1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e20:	f023 0301 	bic.w	r3, r3, #1
 8013e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	3308      	adds	r3, #8
 8013e2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8013e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013e36:	e841 2300 	strex	r3, r2, [r1]
 8013e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d1e5      	bne.n	8013e0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2220      	movs	r2, #32
 8013e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2200      	movs	r2, #0
 8013e54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4a35      	ldr	r2, [pc, #212]	@ (8013f30 <UART_RxISR_16BIT+0x1bc>)
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d024      	beq.n	8013eaa <UART_RxISR_16BIT+0x136>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4a33      	ldr	r2, [pc, #204]	@ (8013f34 <UART_RxISR_16BIT+0x1c0>)
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d01f      	beq.n	8013eaa <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	685b      	ldr	r3, [r3, #4]
 8013e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d018      	beq.n	8013eaa <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e7e:	6a3b      	ldr	r3, [r7, #32]
 8013e80:	e853 3f00 	ldrex	r3, [r3]
 8013e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e86:	69fb      	ldr	r3, [r7, #28]
 8013e88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	461a      	mov	r2, r3
 8013e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013e98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e9e:	e841 2300 	strex	r3, r2, [r1]
 8013ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1e6      	bne.n	8013e78 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d12e      	bne.n	8013f10 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	e853 3f00 	ldrex	r3, [r3]
 8013ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	f023 0310 	bic.w	r3, r3, #16
 8013ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ed6:	61bb      	str	r3, [r7, #24]
 8013ed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eda:	6979      	ldr	r1, [r7, #20]
 8013edc:	69ba      	ldr	r2, [r7, #24]
 8013ede:	e841 2300 	strex	r3, r2, [r1]
 8013ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d1e6      	bne.n	8013eb8 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	69db      	ldr	r3, [r3, #28]
 8013ef0:	f003 0310 	and.w	r3, r3, #16
 8013ef4:	2b10      	cmp	r3, #16
 8013ef6:	d103      	bne.n	8013f00 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2210      	movs	r2, #16
 8013efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013f06:	4619      	mov	r1, r3
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f7ff f913 	bl	8013134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013f0e:	e00b      	b.n	8013f28 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f7ed f81f 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 8013f16:	e007      	b.n	8013f28 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	699a      	ldr	r2, [r3, #24]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f042 0208 	orr.w	r2, r2, #8
 8013f26:	619a      	str	r2, [r3, #24]
}
 8013f28:	bf00      	nop
 8013f2a:	3770      	adds	r7, #112	@ 0x70
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	46002400 	.word	0x46002400
 8013f34:	56002400 	.word	0x56002400

08013f38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b0ac      	sub	sp, #176	@ 0xb0
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013f46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	69db      	ldr	r3, [r3, #28]
 8013f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013f6e:	2b22      	cmp	r3, #34	@ 0x22
 8013f70:	f040 8187 	bne.w	8014282 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013f7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013f7e:	e12a      	b.n	80141d6 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013f8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8013f8e:	b2d9      	uxtb	r1, r3
 8013f90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8013f94:	b2da      	uxtb	r2, r3
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013f9a:	400a      	ands	r2, r1
 8013f9c:	b2d2      	uxtb	r2, r2
 8013f9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013fa4:	1c5a      	adds	r2, r3, #1
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013fb0:	b29b      	uxth	r3, r3
 8013fb2:	3b01      	subs	r3, #1
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	69db      	ldr	r3, [r3, #28]
 8013fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013fca:	f003 0307 	and.w	r3, r3, #7
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d053      	beq.n	801407a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013fd6:	f003 0301 	and.w	r3, r3, #1
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d011      	beq.n	8014002 <UART_RxISR_8BIT_FIFOEN+0xca>
 8013fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00b      	beq.n	8014002 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2201      	movs	r2, #1
 8013ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ff8:	f043 0201 	orr.w	r2, r3, #1
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014006:	f003 0302 	and.w	r3, r3, #2
 801400a:	2b00      	cmp	r3, #0
 801400c:	d011      	beq.n	8014032 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801400e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014012:	f003 0301 	and.w	r3, r3, #1
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00b      	beq.n	8014032 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2202      	movs	r2, #2
 8014020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014028:	f043 0204 	orr.w	r2, r3, #4
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014036:	f003 0304 	and.w	r3, r3, #4
 801403a:	2b00      	cmp	r3, #0
 801403c:	d011      	beq.n	8014062 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801403e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014042:	f003 0301 	and.w	r3, r3, #1
 8014046:	2b00      	cmp	r3, #0
 8014048:	d00b      	beq.n	8014062 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2204      	movs	r2, #4
 8014050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014058:	f043 0202 	orr.w	r2, r3, #2
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014068:	2b00      	cmp	r3, #0
 801406a:	d006      	beq.n	801407a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7ff f857 	bl	8013120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2200      	movs	r2, #0
 8014076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014080:	b29b      	uxth	r3, r3
 8014082:	2b00      	cmp	r3, #0
 8014084:	f040 80a7 	bne.w	80141d6 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801408e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014090:	e853 3f00 	ldrex	r3, [r3]
 8014094:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8014096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801409c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	461a      	mov	r2, r3
 80140a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80140aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80140ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80140b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80140b2:	e841 2300 	strex	r3, r2, [r1]
 80140b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80140b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d1e4      	bne.n	8014088 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	3308      	adds	r3, #8
 80140c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140c8:	e853 3f00 	ldrex	r3, [r3]
 80140cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80140ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80140d4:	f023 0301 	bic.w	r3, r3, #1
 80140d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	3308      	adds	r3, #8
 80140e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80140e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80140e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80140ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80140ee:	e841 2300 	strex	r3, r2, [r1]
 80140f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80140f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1e1      	bne.n	80140be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2220      	movs	r2, #32
 80140fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2200      	movs	r2, #0
 801410c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	4a62      	ldr	r2, [pc, #392]	@ (801429c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8014114:	4293      	cmp	r3, r2
 8014116:	d026      	beq.n	8014166 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4a60      	ldr	r2, [pc, #384]	@ (80142a0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d021      	beq.n	8014166 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	685b      	ldr	r3, [r3, #4]
 8014128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801412c:	2b00      	cmp	r3, #0
 801412e:	d01a      	beq.n	8014166 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014138:	e853 3f00 	ldrex	r3, [r3]
 801413c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801413e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014140:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	461a      	mov	r2, r3
 801414e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014152:	657b      	str	r3, [r7, #84]	@ 0x54
 8014154:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801415a:	e841 2300 	strex	r3, r2, [r1]
 801415e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8014160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014162:	2b00      	cmp	r3, #0
 8014164:	d1e4      	bne.n	8014130 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801416a:	2b01      	cmp	r3, #1
 801416c:	d130      	bne.n	80141d0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2200      	movs	r2, #0
 8014172:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801417c:	e853 3f00 	ldrex	r3, [r3]
 8014180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014184:	f023 0310 	bic.w	r3, r3, #16
 8014188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	461a      	mov	r2, r3
 8014192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014196:	643b      	str	r3, [r7, #64]	@ 0x40
 8014198:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801419a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801419c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801419e:	e841 2300 	strex	r3, r2, [r1]
 80141a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80141a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d1e4      	bne.n	8014174 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	69db      	ldr	r3, [r3, #28]
 80141b0:	f003 0310 	and.w	r3, r3, #16
 80141b4:	2b10      	cmp	r3, #16
 80141b6:	d103      	bne.n	80141c0 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2210      	movs	r2, #16
 80141be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80141c6:	4619      	mov	r1, r3
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f7fe ffb3 	bl	8013134 <HAL_UARTEx_RxEventCallback>
 80141ce:	e002      	b.n	80141d6 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f7ec febf 	bl	8000f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80141d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d006      	beq.n	80141ec <UART_RxISR_8BIT_FIFOEN+0x2b4>
 80141de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80141e2:	f003 0320 	and.w	r3, r3, #32
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f47f aeca 	bne.w	8013f80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80141f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80141f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d049      	beq.n	8014292 <UART_RxISR_8BIT_FIFOEN+0x35a>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014204:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8014208:	429a      	cmp	r2, r3
 801420a:	d242      	bcs.n	8014292 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	3308      	adds	r3, #8
 8014212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014214:	6a3b      	ldr	r3, [r7, #32]
 8014216:	e853 3f00 	ldrex	r3, [r3]
 801421a:	61fb      	str	r3, [r7, #28]
   return(result);
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	3308      	adds	r3, #8
 801422c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8014230:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014232:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014238:	e841 2300 	strex	r3, r2, [r1]
 801423c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014240:	2b00      	cmp	r3, #0
 8014242:	d1e3      	bne.n	801420c <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	4a17      	ldr	r2, [pc, #92]	@ (80142a4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8014248:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	e853 3f00 	ldrex	r3, [r3]
 8014256:	60bb      	str	r3, [r7, #8]
   return(result);
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	f043 0320 	orr.w	r3, r3, #32
 801425e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	461a      	mov	r2, r3
 8014268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801426c:	61bb      	str	r3, [r7, #24]
 801426e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014270:	6979      	ldr	r1, [r7, #20]
 8014272:	69ba      	ldr	r2, [r7, #24]
 8014274:	e841 2300 	strex	r3, r2, [r1]
 8014278:	613b      	str	r3, [r7, #16]
   return(result);
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d1e4      	bne.n	801424a <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014280:	e007      	b.n	8014292 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	699a      	ldr	r2, [r3, #24]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f042 0208 	orr.w	r2, r2, #8
 8014290:	619a      	str	r2, [r3, #24]
}
 8014292:	bf00      	nop
 8014294:	37b0      	adds	r7, #176	@ 0xb0
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	46002400 	.word	0x46002400
 80142a0:	56002400 	.word	0x56002400
 80142a4:	08013bb1 	.word	0x08013bb1

080142a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b0ae      	sub	sp, #184	@ 0xb8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80142b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	69db      	ldr	r3, [r3, #28]
 80142c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80142de:	2b22      	cmp	r3, #34	@ 0x22
 80142e0:	f040 818b 	bne.w	80145fa <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80142ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80142ee:	e12e      	b.n	801454e <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80142fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8014302:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8014306:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801430a:	4013      	ands	r3, r2
 801430c:	b29a      	uxth	r2, r3
 801430e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014312:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014318:	1c9a      	adds	r2, r3, #2
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014324:	b29b      	uxth	r3, r3
 8014326:	3b01      	subs	r3, #1
 8014328:	b29a      	uxth	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	69db      	ldr	r3, [r3, #28]
 8014336:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801433a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801433e:	f003 0307 	and.w	r3, r3, #7
 8014342:	2b00      	cmp	r3, #0
 8014344:	d053      	beq.n	80143ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801434a:	f003 0301 	and.w	r3, r3, #1
 801434e:	2b00      	cmp	r3, #0
 8014350:	d011      	beq.n	8014376 <UART_RxISR_16BIT_FIFOEN+0xce>
 8014352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00b      	beq.n	8014376 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2201      	movs	r2, #1
 8014364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801436c:	f043 0201 	orr.w	r2, r3, #1
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801437a:	f003 0302 	and.w	r3, r3, #2
 801437e:	2b00      	cmp	r3, #0
 8014380:	d011      	beq.n	80143a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014386:	f003 0301 	and.w	r3, r3, #1
 801438a:	2b00      	cmp	r3, #0
 801438c:	d00b      	beq.n	80143a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2202      	movs	r2, #2
 8014394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801439c:	f043 0204 	orr.w	r2, r3, #4
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80143a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80143aa:	f003 0304 	and.w	r3, r3, #4
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d011      	beq.n	80143d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80143b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80143b6:	f003 0301 	and.w	r3, r3, #1
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00b      	beq.n	80143d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2204      	movs	r2, #4
 80143c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80143cc:	f043 0202 	orr.w	r2, r3, #2
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d006      	beq.n	80143ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7fe fe9d 	bl	8013120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	f040 80a9 	bne.w	801454e <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014404:	e853 3f00 	ldrex	r3, [r3]
 8014408:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801440a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801440c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	461a      	mov	r2, r3
 801441a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801441e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014422:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014424:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014426:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801442a:	e841 2300 	strex	r3, r2, [r1]
 801442e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014432:	2b00      	cmp	r3, #0
 8014434:	d1e2      	bne.n	80143fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	3308      	adds	r3, #8
 801443c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801443e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014440:	e853 3f00 	ldrex	r3, [r3]
 8014444:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801444c:	f023 0301 	bic.w	r3, r3, #1
 8014450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	3308      	adds	r3, #8
 801445a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801445e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014466:	e841 2300 	strex	r3, r2, [r1]
 801446a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801446c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801446e:	2b00      	cmp	r3, #0
 8014470:	d1e1      	bne.n	8014436 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2220      	movs	r2, #32
 8014476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2200      	movs	r2, #0
 801447e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2200      	movs	r2, #0
 8014484:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	4a62      	ldr	r2, [pc, #392]	@ (8014614 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 801448c:	4293      	cmp	r3, r2
 801448e:	d026      	beq.n	80144de <UART_RxISR_16BIT_FIFOEN+0x236>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a60      	ldr	r2, [pc, #384]	@ (8014618 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d021      	beq.n	80144de <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d01a      	beq.n	80144de <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144b0:	e853 3f00 	ldrex	r3, [r3]
 80144b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80144b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80144b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80144bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	461a      	mov	r2, r3
 80144c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80144ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80144cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80144d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80144d2:	e841 2300 	strex	r3, r2, [r1]
 80144d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80144d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d1e4      	bne.n	80144a8 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144e2:	2b01      	cmp	r3, #1
 80144e4:	d130      	bne.n	8014548 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144f4:	e853 3f00 	ldrex	r3, [r3]
 80144f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80144fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144fc:	f023 0310 	bic.w	r3, r3, #16
 8014500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	461a      	mov	r2, r3
 801450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801450e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014510:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014512:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014516:	e841 2300 	strex	r3, r2, [r1]
 801451a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801451c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801451e:	2b00      	cmp	r3, #0
 8014520:	d1e4      	bne.n	80144ec <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	69db      	ldr	r3, [r3, #28]
 8014528:	f003 0310 	and.w	r3, r3, #16
 801452c:	2b10      	cmp	r3, #16
 801452e:	d103      	bne.n	8014538 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2210      	movs	r2, #16
 8014536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801453e:	4619      	mov	r1, r3
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7fe fdf7 	bl	8013134 <HAL_UARTEx_RxEventCallback>
 8014546:	e002      	b.n	801454e <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f7ec fd03 	bl	8000f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801454e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8014552:	2b00      	cmp	r3, #0
 8014554:	d006      	beq.n	8014564 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8014556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801455a:	f003 0320 	and.w	r3, r3, #32
 801455e:	2b00      	cmp	r3, #0
 8014560:	f47f aec6 	bne.w	80142f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801456a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801456e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8014572:	2b00      	cmp	r3, #0
 8014574:	d049      	beq.n	801460a <UART_RxISR_16BIT_FIFOEN+0x362>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801457c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8014580:	429a      	cmp	r2, r3
 8014582:	d242      	bcs.n	801460a <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	3308      	adds	r3, #8
 801458a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801458e:	e853 3f00 	ldrex	r3, [r3]
 8014592:	623b      	str	r3, [r7, #32]
   return(result);
 8014594:	6a3b      	ldr	r3, [r7, #32]
 8014596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801459a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	3308      	adds	r3, #8
 80145a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80145a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80145aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80145ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145b0:	e841 2300 	strex	r3, r2, [r1]
 80145b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80145b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d1e3      	bne.n	8014584 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	4a17      	ldr	r2, [pc, #92]	@ (801461c <UART_RxISR_16BIT_FIFOEN+0x374>)
 80145c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	e853 3f00 	ldrex	r3, [r3]
 80145ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f043 0320 	orr.w	r3, r3, #32
 80145d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	461a      	mov	r2, r3
 80145e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80145e4:	61fb      	str	r3, [r7, #28]
 80145e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145e8:	69b9      	ldr	r1, [r7, #24]
 80145ea:	69fa      	ldr	r2, [r7, #28]
 80145ec:	e841 2300 	strex	r3, r2, [r1]
 80145f0:	617b      	str	r3, [r7, #20]
   return(result);
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d1e4      	bne.n	80145c2 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80145f8:	e007      	b.n	801460a <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	699a      	ldr	r2, [r3, #24]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f042 0208 	orr.w	r2, r2, #8
 8014608:	619a      	str	r2, [r3, #24]
}
 801460a:	bf00      	nop
 801460c:	37b8      	adds	r7, #184	@ 0xb8
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	46002400 	.word	0x46002400
 8014618:	56002400 	.word	0x56002400
 801461c:	08013d75 	.word	0x08013d75

08014620 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014620:	b480      	push	{r7}
 8014622:	b083      	sub	sp, #12
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014628:	bf00      	nop
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr

08014634 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014634:	b480      	push	{r7}
 8014636:	b083      	sub	sp, #12
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801463c:	bf00      	nop
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr

08014648 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014656:	2b01      	cmp	r3, #1
 8014658:	d101      	bne.n	801465e <HAL_UARTEx_DisableFifoMode+0x16>
 801465a:	2302      	movs	r3, #2
 801465c:	e027      	b.n	80146ae <HAL_UARTEx_DisableFifoMode+0x66>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2201      	movs	r2, #1
 8014662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2224      	movs	r2, #36	@ 0x24
 801466a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	681a      	ldr	r2, [r3, #0]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f022 0201 	bic.w	r2, r2, #1
 8014684:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801468c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2200      	movs	r2, #0
 8014692:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2220      	movs	r2, #32
 80146a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80146ac:	2300      	movs	r3, #0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3714      	adds	r7, #20
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr

080146ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b084      	sub	sp, #16
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
 80146c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	d101      	bne.n	80146d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80146ce:	2302      	movs	r3, #2
 80146d0:	e02d      	b.n	801472e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2201      	movs	r2, #1
 80146d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2224      	movs	r2, #36	@ 0x24
 80146de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f022 0201 	bic.w	r2, r2, #1
 80146f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	683a      	ldr	r2, [r7, #0]
 801470a:	430a      	orrs	r2, r1
 801470c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f000 f850 	bl	80147b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2220      	movs	r2, #32
 8014720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	3710      	adds	r7, #16
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}

08014736 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014736:	b580      	push	{r7, lr}
 8014738:	b084      	sub	sp, #16
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
 801473e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014746:	2b01      	cmp	r3, #1
 8014748:	d101      	bne.n	801474e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801474a:	2302      	movs	r3, #2
 801474c:	e02d      	b.n	80147aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2201      	movs	r2, #1
 8014752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2224      	movs	r2, #36	@ 0x24
 801475a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f022 0201 	bic.w	r2, r2, #1
 8014774:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	689b      	ldr	r3, [r3, #8]
 801477c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	683a      	ldr	r2, [r7, #0]
 8014786:	430a      	orrs	r2, r1
 8014788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 f812 	bl	80147b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	68fa      	ldr	r2, [r7, #12]
 8014796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2220      	movs	r2, #32
 801479c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80147a8:	2300      	movs	r3, #0
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3710      	adds	r7, #16
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
	...

080147b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80147b4:	b480      	push	{r7}
 80147b6:	b085      	sub	sp, #20
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d108      	bne.n	80147d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2201      	movs	r2, #1
 80147c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2201      	movs	r2, #1
 80147d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80147d4:	e031      	b.n	801483a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80147d6:	2308      	movs	r3, #8
 80147d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80147da:	2308      	movs	r3, #8
 80147dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	0e5b      	lsrs	r3, r3, #25
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	f003 0307 	and.w	r3, r3, #7
 80147ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	689b      	ldr	r3, [r3, #8]
 80147f4:	0f5b      	lsrs	r3, r3, #29
 80147f6:	b2db      	uxtb	r3, r3
 80147f8:	f003 0307 	and.w	r3, r3, #7
 80147fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80147fe:	7bbb      	ldrb	r3, [r7, #14]
 8014800:	7b3a      	ldrb	r2, [r7, #12]
 8014802:	4911      	ldr	r1, [pc, #68]	@ (8014848 <UARTEx_SetNbDataToProcess+0x94>)
 8014804:	5c8a      	ldrb	r2, [r1, r2]
 8014806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801480a:	7b3a      	ldrb	r2, [r7, #12]
 801480c:	490f      	ldr	r1, [pc, #60]	@ (801484c <UARTEx_SetNbDataToProcess+0x98>)
 801480e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014810:	fb93 f3f2 	sdiv	r3, r3, r2
 8014814:	b29a      	uxth	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801481c:	7bfb      	ldrb	r3, [r7, #15]
 801481e:	7b7a      	ldrb	r2, [r7, #13]
 8014820:	4909      	ldr	r1, [pc, #36]	@ (8014848 <UARTEx_SetNbDataToProcess+0x94>)
 8014822:	5c8a      	ldrb	r2, [r1, r2]
 8014824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014828:	7b7a      	ldrb	r2, [r7, #13]
 801482a:	4908      	ldr	r1, [pc, #32]	@ (801484c <UARTEx_SetNbDataToProcess+0x98>)
 801482c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801482e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014832:	b29a      	uxth	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801483a:	bf00      	nop
 801483c:	3714      	adds	r7, #20
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	08018a78 	.word	0x08018a78
 801484c:	08018a80 	.word	0x08018a80

08014850 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b086      	sub	sp, #24
 8014854:	af02      	add	r7, sp, #8
 8014856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014858:	2300      	movs	r3, #0
 801485a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 801485c:	f7f1 f980 	bl	8005b60 <HAL_GetTick>
 8014860:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d102      	bne.n	801486e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8014868:	2301      	movs	r3, #1
 801486a:	73fb      	strb	r3, [r7, #15]
 801486c:	e137      	b.n	8014ade <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	4a76      	ldr	r2, [pc, #472]	@ (8014a4c <HAL_XSPI_Init+0x1fc>)
 8014874:	4293      	cmp	r3, r2
 8014876:	d008      	beq.n	801488a <HAL_XSPI_Init+0x3a>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4a74      	ldr	r2, [pc, #464]	@ (8014a50 <HAL_XSPI_Init+0x200>)
 801487e:	4293      	cmp	r3, r2
 8014880:	d003      	beq.n	801488a <HAL_XSPI_Init+0x3a>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	4a73      	ldr	r2, [pc, #460]	@ (8014a54 <HAL_XSPI_Init+0x204>)
 8014888:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4a72      	ldr	r2, [pc, #456]	@ (8014a58 <HAL_XSPI_Init+0x208>)
 8014890:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	4a6d      	ldr	r2, [pc, #436]	@ (8014a4c <HAL_XSPI_Init+0x1fc>)
 8014898:	4293      	cmp	r3, r2
 801489a:	d008      	beq.n	80148ae <HAL_XSPI_Init+0x5e>
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	4a6b      	ldr	r2, [pc, #428]	@ (8014a50 <HAL_XSPI_Init+0x200>)
 80148a2:	4293      	cmp	r3, r2
 80148a4:	d003      	beq.n	80148ae <HAL_XSPI_Init+0x5e>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	4a6a      	ldr	r2, [pc, #424]	@ (8014a54 <HAL_XSPI_Init+0x204>)
 80148ac:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	4a66      	ldr	r2, [pc, #408]	@ (8014a4c <HAL_XSPI_Init+0x1fc>)
 80148b4:	4293      	cmp	r3, r2
 80148b6:	d008      	beq.n	80148ca <HAL_XSPI_Init+0x7a>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	4a64      	ldr	r2, [pc, #400]	@ (8014a50 <HAL_XSPI_Init+0x200>)
 80148be:	4293      	cmp	r3, r2
 80148c0:	d003      	beq.n	80148ca <HAL_XSPI_Init+0x7a>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4a63      	ldr	r2, [pc, #396]	@ (8014a54 <HAL_XSPI_Init+0x204>)
 80148c8:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2200      	movs	r2, #0
 80148ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f040 8102 	bne.w	8014ade <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f7ef ff2e 	bl	800473c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80148e0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 f8ff 	bl	8014ae8 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	689a      	ldr	r2, [r3, #8]
 80148f0:	4b5a      	ldr	r3, [pc, #360]	@ (8014a5c <HAL_XSPI_Init+0x20c>)
 80148f2:	4013      	ands	r3, r2
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	68d1      	ldr	r1, [r2, #12]
 80148f8:	687a      	ldr	r2, [r7, #4]
 80148fa:	6912      	ldr	r2, [r2, #16]
 80148fc:	0412      	lsls	r2, r2, #16
 80148fe:	4311      	orrs	r1, r2
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	6952      	ldr	r2, [r2, #20]
 8014904:	3a01      	subs	r2, #1
 8014906:	0212      	lsls	r2, r2, #8
 8014908:	4311      	orrs	r1, r2
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	69d2      	ldr	r2, [r2, #28]
 801490e:	4311      	orrs	r1, r2
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	6812      	ldr	r2, [r2, #0]
 8014914:	430b      	orrs	r3, r1
 8014916:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4a4b      	ldr	r2, [pc, #300]	@ (8014a4c <HAL_XSPI_Init+0x1fc>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d00e      	beq.n	8014940 <HAL_XSPI_Init+0xf0>
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	4a4a      	ldr	r2, [pc, #296]	@ (8014a50 <HAL_XSPI_Init+0x200>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d009      	beq.n	8014940 <HAL_XSPI_Init+0xf0>
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	4a48      	ldr	r2, [pc, #288]	@ (8014a54 <HAL_XSPI_Init+0x204>)
 8014932:	4293      	cmp	r3, r2
 8014934:	d004      	beq.n	8014940 <HAL_XSPI_Init+0xf0>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4a49      	ldr	r2, [pc, #292]	@ (8014a60 <HAL_XSPI_Init+0x210>)
 801493c:	4293      	cmp	r3, r2
 801493e:	d10a      	bne.n	8014956 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	689b      	ldr	r3, [r3, #8]
 8014946:	f023 0108 	bic.w	r1, r3, #8
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	430a      	orrs	r2, r1
 8014954:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6a1a      	ldr	r2, [r3, #32]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	430a      	orrs	r2, r1
 801496a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	691b      	ldr	r3, [r3, #16]
 8014972:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801497a:	041a      	lsls	r2, r3, #16
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	430a      	orrs	r2, r1
 8014982:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a30      	ldr	r2, [pc, #192]	@ (8014a4c <HAL_XSPI_Init+0x1fc>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d00e      	beq.n	80149ac <HAL_XSPI_Init+0x15c>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a2f      	ldr	r2, [pc, #188]	@ (8014a50 <HAL_XSPI_Init+0x200>)
 8014994:	4293      	cmp	r3, r2
 8014996:	d009      	beq.n	80149ac <HAL_XSPI_Init+0x15c>
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	4a2d      	ldr	r2, [pc, #180]	@ (8014a54 <HAL_XSPI_Init+0x204>)
 801499e:	4293      	cmp	r3, r2
 80149a0:	d004      	beq.n	80149ac <HAL_XSPI_Init+0x15c>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	4a2e      	ldr	r2, [pc, #184]	@ (8014a60 <HAL_XSPI_Init+0x210>)
 80149a8:	4293      	cmp	r3, r2
 80149aa:	d10a      	bne.n	80149c2 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	691b      	ldr	r3, [r3, #16]
 80149b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	430a      	orrs	r2, r1
 80149c0:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80149ca:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	3b01      	subs	r3, #1
 80149dc:	021a      	lsls	r2, r3, #8
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	430a      	orrs	r2, r1
 80149e4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	2200      	movs	r2, #0
 80149f0:	2120      	movs	r1, #32
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 f887 	bl	8014b06 <XSPI_WaitFlagStateUntilTimeout>
 80149f8:	4603      	mov	r3, r0
 80149fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80149fc:	7bfb      	ldrb	r3, [r7, #15]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d16d      	bne.n	8014ade <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	430a      	orrs	r2, r1
 8014a16:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8014a58 <HAL_XSPI_Init+0x208>)
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d004      	beq.n	8014a2c <HAL_XSPI_Init+0x1dc>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	4a0f      	ldr	r2, [pc, #60]	@ (8014a64 <HAL_XSPI_Init+0x214>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d11d      	bne.n	8014a68 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	2200      	movs	r2, #0
 8014a36:	2120      	movs	r1, #32
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f000 f864 	bl	8014b06 <XSPI_WaitFlagStateUntilTimeout>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8014a42:	7bfb      	ldrb	r3, [r7, #15]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d00f      	beq.n	8014a68 <HAL_XSPI_Init+0x218>
          {
            return status;
 8014a48:	7bfb      	ldrb	r3, [r7, #15]
 8014a4a:	e049      	b.n	8014ae0 <HAL_XSPI_Init+0x290>
 8014a4c:	420d1400 	.word	0x420d1400
 8014a50:	520d1400 	.word	0x520d1400
 8014a54:	420d2400 	.word	0x420d2400
 8014a58:	420d3400 	.word	0x420d3400
 8014a5c:	f8e0c0fc 	.word	0xf8e0c0fc
 8014a60:	520d2400 	.word	0x520d2400
 8014a64:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	689a      	ldr	r2, [r3, #8]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	430a      	orrs	r2, r1
 8014a7c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8014a86:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a92:	431a      	orrs	r2, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	430a      	orrs	r2, r1
 8014a9a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	681a      	ldr	r2, [r3, #0]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	f042 0201 	orr.w	r2, r2, #1
 8014aac:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	699b      	ldr	r3, [r3, #24]
 8014ab2:	2b02      	cmp	r3, #2
 8014ab4:	d107      	bne.n	8014ac6 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	689a      	ldr	r2, [r3, #8]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f042 0202 	orr.w	r2, r2, #2
 8014ac4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014ace:	d103      	bne.n	8014ad8 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	655a      	str	r2, [r3, #84]	@ 0x54
 8014ad6:	e002      	b.n	8014ade <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2202      	movs	r2, #2
 8014adc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8014ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3710      	adds	r7, #16
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	683a      	ldr	r2, [r7, #0]
 8014af6:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8014af8:	2300      	movs	r3, #0
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr

08014b06 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8014b06:	b580      	push	{r7, lr}
 8014b08:	b084      	sub	sp, #16
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	60f8      	str	r0, [r7, #12]
 8014b0e:	60b9      	str	r1, [r7, #8]
 8014b10:	603b      	str	r3, [r7, #0]
 8014b12:	4613      	mov	r3, r2
 8014b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8014b16:	e01a      	b.n	8014b4e <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b1e:	d016      	beq.n	8014b4e <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b20:	f7f1 f81e 	bl	8005b60 <HAL_GetTick>
 8014b24:	4602      	mov	r2, r0
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	1ad3      	subs	r3, r2, r3
 8014b2a:	69ba      	ldr	r2, [r7, #24]
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d302      	bcc.n	8014b36 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d10b      	bne.n	8014b4e <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b3c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b42:	f043 0201 	orr.w	r2, r3, #1
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8014b4a:	2303      	movs	r3, #3
 8014b4c:	e00e      	b.n	8014b6c <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	6a1a      	ldr	r2, [r3, #32]
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	4013      	ands	r3, r2
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	bf14      	ite	ne
 8014b5c:	2301      	movne	r3, #1
 8014b5e:	2300      	moveq	r3, #0
 8014b60:	b2db      	uxtb	r3, r3
 8014b62:	461a      	mov	r2, r3
 8014b64:	79fb      	ldrb	r3, [r7, #7]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d1d6      	bne.n	8014b18 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3710      	adds	r7, #16
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}

08014b74 <_strtol_l.constprop.0>:
 8014b74:	2b24      	cmp	r3, #36	@ 0x24
 8014b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b7a:	4686      	mov	lr, r0
 8014b7c:	4690      	mov	r8, r2
 8014b7e:	d801      	bhi.n	8014b84 <_strtol_l.constprop.0+0x10>
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d106      	bne.n	8014b92 <_strtol_l.constprop.0+0x1e>
 8014b84:	f001 f8c8 	bl	8015d18 <__errno>
 8014b88:	2316      	movs	r3, #22
 8014b8a:	6003      	str	r3, [r0, #0]
 8014b8c:	2000      	movs	r0, #0
 8014b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b92:	460d      	mov	r5, r1
 8014b94:	4833      	ldr	r0, [pc, #204]	@ (8014c64 <_strtol_l.constprop.0+0xf0>)
 8014b96:	462a      	mov	r2, r5
 8014b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b9c:	5d06      	ldrb	r6, [r0, r4]
 8014b9e:	f016 0608 	ands.w	r6, r6, #8
 8014ba2:	d1f8      	bne.n	8014b96 <_strtol_l.constprop.0+0x22>
 8014ba4:	2c2d      	cmp	r4, #45	@ 0x2d
 8014ba6:	d12d      	bne.n	8014c04 <_strtol_l.constprop.0+0x90>
 8014ba8:	782c      	ldrb	r4, [r5, #0]
 8014baa:	2601      	movs	r6, #1
 8014bac:	1c95      	adds	r5, r2, #2
 8014bae:	f033 0210 	bics.w	r2, r3, #16
 8014bb2:	d109      	bne.n	8014bc8 <_strtol_l.constprop.0+0x54>
 8014bb4:	2c30      	cmp	r4, #48	@ 0x30
 8014bb6:	d12a      	bne.n	8014c0e <_strtol_l.constprop.0+0x9a>
 8014bb8:	782a      	ldrb	r2, [r5, #0]
 8014bba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014bbe:	2a58      	cmp	r2, #88	@ 0x58
 8014bc0:	d125      	bne.n	8014c0e <_strtol_l.constprop.0+0x9a>
 8014bc2:	786c      	ldrb	r4, [r5, #1]
 8014bc4:	2310      	movs	r3, #16
 8014bc6:	3502      	adds	r5, #2
 8014bc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014bd2:	4610      	mov	r0, r2
 8014bd4:	fbbc f9f3 	udiv	r9, ip, r3
 8014bd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8014bdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014be0:	2f09      	cmp	r7, #9
 8014be2:	d81b      	bhi.n	8014c1c <_strtol_l.constprop.0+0xa8>
 8014be4:	463c      	mov	r4, r7
 8014be6:	42a3      	cmp	r3, r4
 8014be8:	dd27      	ble.n	8014c3a <_strtol_l.constprop.0+0xc6>
 8014bea:	1c57      	adds	r7, r2, #1
 8014bec:	d007      	beq.n	8014bfe <_strtol_l.constprop.0+0x8a>
 8014bee:	4581      	cmp	r9, r0
 8014bf0:	d320      	bcc.n	8014c34 <_strtol_l.constprop.0+0xc0>
 8014bf2:	d101      	bne.n	8014bf8 <_strtol_l.constprop.0+0x84>
 8014bf4:	45a2      	cmp	sl, r4
 8014bf6:	db1d      	blt.n	8014c34 <_strtol_l.constprop.0+0xc0>
 8014bf8:	fb00 4003 	mla	r0, r0, r3, r4
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c02:	e7eb      	b.n	8014bdc <_strtol_l.constprop.0+0x68>
 8014c04:	2c2b      	cmp	r4, #43	@ 0x2b
 8014c06:	bf04      	itt	eq
 8014c08:	782c      	ldrbeq	r4, [r5, #0]
 8014c0a:	1c95      	addeq	r5, r2, #2
 8014c0c:	e7cf      	b.n	8014bae <_strtol_l.constprop.0+0x3a>
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1da      	bne.n	8014bc8 <_strtol_l.constprop.0+0x54>
 8014c12:	2c30      	cmp	r4, #48	@ 0x30
 8014c14:	bf0c      	ite	eq
 8014c16:	2308      	moveq	r3, #8
 8014c18:	230a      	movne	r3, #10
 8014c1a:	e7d5      	b.n	8014bc8 <_strtol_l.constprop.0+0x54>
 8014c1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014c20:	2f19      	cmp	r7, #25
 8014c22:	d801      	bhi.n	8014c28 <_strtol_l.constprop.0+0xb4>
 8014c24:	3c37      	subs	r4, #55	@ 0x37
 8014c26:	e7de      	b.n	8014be6 <_strtol_l.constprop.0+0x72>
 8014c28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014c2c:	2f19      	cmp	r7, #25
 8014c2e:	d804      	bhi.n	8014c3a <_strtol_l.constprop.0+0xc6>
 8014c30:	3c57      	subs	r4, #87	@ 0x57
 8014c32:	e7d8      	b.n	8014be6 <_strtol_l.constprop.0+0x72>
 8014c34:	f04f 32ff 	mov.w	r2, #4294967295
 8014c38:	e7e1      	b.n	8014bfe <_strtol_l.constprop.0+0x8a>
 8014c3a:	1c53      	adds	r3, r2, #1
 8014c3c:	d108      	bne.n	8014c50 <_strtol_l.constprop.0+0xdc>
 8014c3e:	2322      	movs	r3, #34	@ 0x22
 8014c40:	4660      	mov	r0, ip
 8014c42:	f8ce 3000 	str.w	r3, [lr]
 8014c46:	f1b8 0f00 	cmp.w	r8, #0
 8014c4a:	d0a0      	beq.n	8014b8e <_strtol_l.constprop.0+0x1a>
 8014c4c:	1e69      	subs	r1, r5, #1
 8014c4e:	e006      	b.n	8014c5e <_strtol_l.constprop.0+0xea>
 8014c50:	b106      	cbz	r6, 8014c54 <_strtol_l.constprop.0+0xe0>
 8014c52:	4240      	negs	r0, r0
 8014c54:	f1b8 0f00 	cmp.w	r8, #0
 8014c58:	d099      	beq.n	8014b8e <_strtol_l.constprop.0+0x1a>
 8014c5a:	2a00      	cmp	r2, #0
 8014c5c:	d1f6      	bne.n	8014c4c <_strtol_l.constprop.0+0xd8>
 8014c5e:	f8c8 1000 	str.w	r1, [r8]
 8014c62:	e794      	b.n	8014b8e <_strtol_l.constprop.0+0x1a>
 8014c64:	08018a89 	.word	0x08018a89

08014c68 <strtol>:
 8014c68:	4613      	mov	r3, r2
 8014c6a:	460a      	mov	r2, r1
 8014c6c:	4601      	mov	r1, r0
 8014c6e:	4802      	ldr	r0, [pc, #8]	@ (8014c78 <strtol+0x10>)
 8014c70:	6800      	ldr	r0, [r0, #0]
 8014c72:	f7ff bf7f 	b.w	8014b74 <_strtol_l.constprop.0>
 8014c76:	bf00      	nop
 8014c78:	200001b8 	.word	0x200001b8

08014c7c <__cvt>:
 8014c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c80:	ec57 6b10 	vmov	r6, r7, d0
 8014c84:	2f00      	cmp	r7, #0
 8014c86:	460c      	mov	r4, r1
 8014c88:	4619      	mov	r1, r3
 8014c8a:	463b      	mov	r3, r7
 8014c8c:	bfb4      	ite	lt
 8014c8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014c92:	2300      	movge	r3, #0
 8014c94:	4691      	mov	r9, r2
 8014c96:	bfbf      	itttt	lt
 8014c98:	4632      	movlt	r2, r6
 8014c9a:	461f      	movlt	r7, r3
 8014c9c:	232d      	movlt	r3, #45	@ 0x2d
 8014c9e:	4616      	movlt	r6, r2
 8014ca0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014ca4:	700b      	strb	r3, [r1, #0]
 8014ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ca8:	f023 0820 	bic.w	r8, r3, #32
 8014cac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014cb0:	d005      	beq.n	8014cbe <__cvt+0x42>
 8014cb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014cb6:	d100      	bne.n	8014cba <__cvt+0x3e>
 8014cb8:	3401      	adds	r4, #1
 8014cba:	2102      	movs	r1, #2
 8014cbc:	e000      	b.n	8014cc0 <__cvt+0x44>
 8014cbe:	2103      	movs	r1, #3
 8014cc0:	ab03      	add	r3, sp, #12
 8014cc2:	4622      	mov	r2, r4
 8014cc4:	9301      	str	r3, [sp, #4]
 8014cc6:	ab02      	add	r3, sp, #8
 8014cc8:	ec47 6b10 	vmov	d0, r6, r7
 8014ccc:	9300      	str	r3, [sp, #0]
 8014cce:	4653      	mov	r3, sl
 8014cd0:	f001 f916 	bl	8015f00 <_dtoa_r>
 8014cd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014cd8:	4605      	mov	r5, r0
 8014cda:	d119      	bne.n	8014d10 <__cvt+0x94>
 8014cdc:	f019 0f01 	tst.w	r9, #1
 8014ce0:	d00e      	beq.n	8014d00 <__cvt+0x84>
 8014ce2:	eb00 0904 	add.w	r9, r0, r4
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2300      	movs	r3, #0
 8014cea:	4630      	mov	r0, r6
 8014cec:	4639      	mov	r1, r7
 8014cee:	f7eb ff19 	bl	8000b24 <__aeabi_dcmpeq>
 8014cf2:	b108      	cbz	r0, 8014cf8 <__cvt+0x7c>
 8014cf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8014cf8:	2230      	movs	r2, #48	@ 0x30
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	454b      	cmp	r3, r9
 8014cfe:	d31e      	bcc.n	8014d3e <__cvt+0xc2>
 8014d00:	9b03      	ldr	r3, [sp, #12]
 8014d02:	4628      	mov	r0, r5
 8014d04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d06:	1b5b      	subs	r3, r3, r5
 8014d08:	6013      	str	r3, [r2, #0]
 8014d0a:	b004      	add	sp, #16
 8014d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014d14:	eb00 0904 	add.w	r9, r0, r4
 8014d18:	d1e5      	bne.n	8014ce6 <__cvt+0x6a>
 8014d1a:	7803      	ldrb	r3, [r0, #0]
 8014d1c:	2b30      	cmp	r3, #48	@ 0x30
 8014d1e:	d10a      	bne.n	8014d36 <__cvt+0xba>
 8014d20:	2200      	movs	r2, #0
 8014d22:	2300      	movs	r3, #0
 8014d24:	4630      	mov	r0, r6
 8014d26:	4639      	mov	r1, r7
 8014d28:	f7eb fefc 	bl	8000b24 <__aeabi_dcmpeq>
 8014d2c:	b918      	cbnz	r0, 8014d36 <__cvt+0xba>
 8014d2e:	f1c4 0401 	rsb	r4, r4, #1
 8014d32:	f8ca 4000 	str.w	r4, [sl]
 8014d36:	f8da 3000 	ldr.w	r3, [sl]
 8014d3a:	4499      	add	r9, r3
 8014d3c:	e7d3      	b.n	8014ce6 <__cvt+0x6a>
 8014d3e:	1c59      	adds	r1, r3, #1
 8014d40:	9103      	str	r1, [sp, #12]
 8014d42:	701a      	strb	r2, [r3, #0]
 8014d44:	e7d9      	b.n	8014cfa <__cvt+0x7e>

08014d46 <__exponent>:
 8014d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d48:	2900      	cmp	r1, #0
 8014d4a:	7002      	strb	r2, [r0, #0]
 8014d4c:	bfba      	itte	lt
 8014d4e:	4249      	neglt	r1, r1
 8014d50:	232d      	movlt	r3, #45	@ 0x2d
 8014d52:	232b      	movge	r3, #43	@ 0x2b
 8014d54:	2909      	cmp	r1, #9
 8014d56:	7043      	strb	r3, [r0, #1]
 8014d58:	dd28      	ble.n	8014dac <__exponent+0x66>
 8014d5a:	f10d 0307 	add.w	r3, sp, #7
 8014d5e:	270a      	movs	r7, #10
 8014d60:	461d      	mov	r5, r3
 8014d62:	461a      	mov	r2, r3
 8014d64:	3b01      	subs	r3, #1
 8014d66:	fbb1 f6f7 	udiv	r6, r1, r7
 8014d6a:	fb07 1416 	mls	r4, r7, r6, r1
 8014d6e:	3430      	adds	r4, #48	@ 0x30
 8014d70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014d74:	460c      	mov	r4, r1
 8014d76:	4631      	mov	r1, r6
 8014d78:	2c63      	cmp	r4, #99	@ 0x63
 8014d7a:	dcf2      	bgt.n	8014d62 <__exponent+0x1c>
 8014d7c:	3130      	adds	r1, #48	@ 0x30
 8014d7e:	1e94      	subs	r4, r2, #2
 8014d80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014d84:	1c41      	adds	r1, r0, #1
 8014d86:	4623      	mov	r3, r4
 8014d88:	42ab      	cmp	r3, r5
 8014d8a:	d30a      	bcc.n	8014da2 <__exponent+0x5c>
 8014d8c:	f10d 0309 	add.w	r3, sp, #9
 8014d90:	1a9b      	subs	r3, r3, r2
 8014d92:	42ac      	cmp	r4, r5
 8014d94:	bf88      	it	hi
 8014d96:	2300      	movhi	r3, #0
 8014d98:	3302      	adds	r3, #2
 8014d9a:	4403      	add	r3, r0
 8014d9c:	1a18      	subs	r0, r3, r0
 8014d9e:	b003      	add	sp, #12
 8014da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014da2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014da6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014daa:	e7ed      	b.n	8014d88 <__exponent+0x42>
 8014dac:	2330      	movs	r3, #48	@ 0x30
 8014dae:	3130      	adds	r1, #48	@ 0x30
 8014db0:	7083      	strb	r3, [r0, #2]
 8014db2:	1d03      	adds	r3, r0, #4
 8014db4:	70c1      	strb	r1, [r0, #3]
 8014db6:	e7f1      	b.n	8014d9c <__exponent+0x56>

08014db8 <_printf_float>:
 8014db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	b08d      	sub	sp, #52	@ 0x34
 8014dbe:	460c      	mov	r4, r1
 8014dc0:	4616      	mov	r6, r2
 8014dc2:	461f      	mov	r7, r3
 8014dc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014dc8:	4605      	mov	r5, r0
 8014dca:	f000 ff5b 	bl	8015c84 <_localeconv_r>
 8014dce:	6803      	ldr	r3, [r0, #0]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	9304      	str	r3, [sp, #16]
 8014dd4:	f7eb fa7a 	bl	80002cc <strlen>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	9005      	str	r0, [sp, #20]
 8014ddc:	930a      	str	r3, [sp, #40]	@ 0x28
 8014dde:	f8d8 3000 	ldr.w	r3, [r8]
 8014de2:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014de6:	3307      	adds	r3, #7
 8014de8:	f8d4 b000 	ldr.w	fp, [r4]
 8014dec:	f023 0307 	bic.w	r3, r3, #7
 8014df0:	f103 0208 	add.w	r2, r3, #8
 8014df4:	f8c8 2000 	str.w	r2, [r8]
 8014df8:	f04f 32ff 	mov.w	r2, #4294967295
 8014dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014e00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014e04:	f8cd 8018 	str.w	r8, [sp, #24]
 8014e08:	9307      	str	r3, [sp, #28]
 8014e0a:	4b9d      	ldr	r3, [pc, #628]	@ (8015080 <_printf_float+0x2c8>)
 8014e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e10:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014e14:	f7eb feb8 	bl	8000b88 <__aeabi_dcmpun>
 8014e18:	bb70      	cbnz	r0, 8014e78 <_printf_float+0xc0>
 8014e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e1e:	4b98      	ldr	r3, [pc, #608]	@ (8015080 <_printf_float+0x2c8>)
 8014e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e24:	f7eb fe92 	bl	8000b4c <__aeabi_dcmple>
 8014e28:	bb30      	cbnz	r0, 8014e78 <_printf_float+0xc0>
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	4640      	mov	r0, r8
 8014e30:	4649      	mov	r1, r9
 8014e32:	f7eb fe81 	bl	8000b38 <__aeabi_dcmplt>
 8014e36:	b110      	cbz	r0, 8014e3e <_printf_float+0x86>
 8014e38:	232d      	movs	r3, #45	@ 0x2d
 8014e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e3e:	4a91      	ldr	r2, [pc, #580]	@ (8015084 <_printf_float+0x2cc>)
 8014e40:	4b91      	ldr	r3, [pc, #580]	@ (8015088 <_printf_float+0x2d0>)
 8014e42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014e46:	bf94      	ite	ls
 8014e48:	4690      	movls	r8, r2
 8014e4a:	4698      	movhi	r8, r3
 8014e4c:	2303      	movs	r3, #3
 8014e4e:	f04f 0900 	mov.w	r9, #0
 8014e52:	6123      	str	r3, [r4, #16]
 8014e54:	f02b 0304 	bic.w	r3, fp, #4
 8014e58:	6023      	str	r3, [r4, #0]
 8014e5a:	4633      	mov	r3, r6
 8014e5c:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014e5e:	4621      	mov	r1, r4
 8014e60:	4628      	mov	r0, r5
 8014e62:	9700      	str	r7, [sp, #0]
 8014e64:	f000 f9d2 	bl	801520c <_printf_common>
 8014e68:	3001      	adds	r0, #1
 8014e6a:	f040 808d 	bne.w	8014f88 <_printf_float+0x1d0>
 8014e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e72:	b00d      	add	sp, #52	@ 0x34
 8014e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e78:	4642      	mov	r2, r8
 8014e7a:	464b      	mov	r3, r9
 8014e7c:	4640      	mov	r0, r8
 8014e7e:	4649      	mov	r1, r9
 8014e80:	f7eb fe82 	bl	8000b88 <__aeabi_dcmpun>
 8014e84:	b140      	cbz	r0, 8014e98 <_printf_float+0xe0>
 8014e86:	464b      	mov	r3, r9
 8014e88:	4a80      	ldr	r2, [pc, #512]	@ (801508c <_printf_float+0x2d4>)
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	bfbc      	itt	lt
 8014e8e:	232d      	movlt	r3, #45	@ 0x2d
 8014e90:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014e94:	4b7e      	ldr	r3, [pc, #504]	@ (8015090 <_printf_float+0x2d8>)
 8014e96:	e7d4      	b.n	8014e42 <_printf_float+0x8a>
 8014e98:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014e9c:	6863      	ldr	r3, [r4, #4]
 8014e9e:	9206      	str	r2, [sp, #24]
 8014ea0:	1c5a      	adds	r2, r3, #1
 8014ea2:	d13b      	bne.n	8014f1c <_printf_float+0x164>
 8014ea4:	2306      	movs	r3, #6
 8014ea6:	6063      	str	r3, [r4, #4]
 8014ea8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014eac:	2300      	movs	r3, #0
 8014eae:	4628      	mov	r0, r5
 8014eb0:	6022      	str	r2, [r4, #0]
 8014eb2:	9303      	str	r3, [sp, #12]
 8014eb4:	ab0a      	add	r3, sp, #40	@ 0x28
 8014eb6:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014eba:	ab09      	add	r3, sp, #36	@ 0x24
 8014ebc:	ec49 8b10 	vmov	d0, r8, r9
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014ec6:	6861      	ldr	r1, [r4, #4]
 8014ec8:	f7ff fed8 	bl	8014c7c <__cvt>
 8014ecc:	9b06      	ldr	r3, [sp, #24]
 8014ece:	4680      	mov	r8, r0
 8014ed0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014ed2:	2b47      	cmp	r3, #71	@ 0x47
 8014ed4:	d129      	bne.n	8014f2a <_printf_float+0x172>
 8014ed6:	1cc8      	adds	r0, r1, #3
 8014ed8:	db02      	blt.n	8014ee0 <_printf_float+0x128>
 8014eda:	6863      	ldr	r3, [r4, #4]
 8014edc:	4299      	cmp	r1, r3
 8014ede:	dd41      	ble.n	8014f64 <_printf_float+0x1ac>
 8014ee0:	f1aa 0a02 	sub.w	sl, sl, #2
 8014ee4:	fa5f fa8a 	uxtb.w	sl, sl
 8014ee8:	3901      	subs	r1, #1
 8014eea:	4652      	mov	r2, sl
 8014eec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014ef0:	9109      	str	r1, [sp, #36]	@ 0x24
 8014ef2:	f7ff ff28 	bl	8014d46 <__exponent>
 8014ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ef8:	4681      	mov	r9, r0
 8014efa:	1813      	adds	r3, r2, r0
 8014efc:	2a01      	cmp	r2, #1
 8014efe:	6123      	str	r3, [r4, #16]
 8014f00:	dc02      	bgt.n	8014f08 <_printf_float+0x150>
 8014f02:	6822      	ldr	r2, [r4, #0]
 8014f04:	07d2      	lsls	r2, r2, #31
 8014f06:	d501      	bpl.n	8014f0c <_printf_float+0x154>
 8014f08:	3301      	adds	r3, #1
 8014f0a:	6123      	str	r3, [r4, #16]
 8014f0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d0a2      	beq.n	8014e5a <_printf_float+0xa2>
 8014f14:	232d      	movs	r3, #45	@ 0x2d
 8014f16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f1a:	e79e      	b.n	8014e5a <_printf_float+0xa2>
 8014f1c:	9a06      	ldr	r2, [sp, #24]
 8014f1e:	2a47      	cmp	r2, #71	@ 0x47
 8014f20:	d1c2      	bne.n	8014ea8 <_printf_float+0xf0>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d1c0      	bne.n	8014ea8 <_printf_float+0xf0>
 8014f26:	2301      	movs	r3, #1
 8014f28:	e7bd      	b.n	8014ea6 <_printf_float+0xee>
 8014f2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014f2e:	d9db      	bls.n	8014ee8 <_printf_float+0x130>
 8014f30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014f34:	d118      	bne.n	8014f68 <_printf_float+0x1b0>
 8014f36:	2900      	cmp	r1, #0
 8014f38:	6863      	ldr	r3, [r4, #4]
 8014f3a:	dd0b      	ble.n	8014f54 <_printf_float+0x19c>
 8014f3c:	6121      	str	r1, [r4, #16]
 8014f3e:	b913      	cbnz	r3, 8014f46 <_printf_float+0x18e>
 8014f40:	6822      	ldr	r2, [r4, #0]
 8014f42:	07d0      	lsls	r0, r2, #31
 8014f44:	d502      	bpl.n	8014f4c <_printf_float+0x194>
 8014f46:	3301      	adds	r3, #1
 8014f48:	440b      	add	r3, r1
 8014f4a:	6123      	str	r3, [r4, #16]
 8014f4c:	f04f 0900 	mov.w	r9, #0
 8014f50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014f52:	e7db      	b.n	8014f0c <_printf_float+0x154>
 8014f54:	b913      	cbnz	r3, 8014f5c <_printf_float+0x1a4>
 8014f56:	6822      	ldr	r2, [r4, #0]
 8014f58:	07d2      	lsls	r2, r2, #31
 8014f5a:	d501      	bpl.n	8014f60 <_printf_float+0x1a8>
 8014f5c:	3302      	adds	r3, #2
 8014f5e:	e7f4      	b.n	8014f4a <_printf_float+0x192>
 8014f60:	2301      	movs	r3, #1
 8014f62:	e7f2      	b.n	8014f4a <_printf_float+0x192>
 8014f64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f6a:	4299      	cmp	r1, r3
 8014f6c:	db05      	blt.n	8014f7a <_printf_float+0x1c2>
 8014f6e:	6823      	ldr	r3, [r4, #0]
 8014f70:	6121      	str	r1, [r4, #16]
 8014f72:	07d8      	lsls	r0, r3, #31
 8014f74:	d5ea      	bpl.n	8014f4c <_printf_float+0x194>
 8014f76:	1c4b      	adds	r3, r1, #1
 8014f78:	e7e7      	b.n	8014f4a <_printf_float+0x192>
 8014f7a:	2900      	cmp	r1, #0
 8014f7c:	bfd4      	ite	le
 8014f7e:	f1c1 0202 	rsble	r2, r1, #2
 8014f82:	2201      	movgt	r2, #1
 8014f84:	4413      	add	r3, r2
 8014f86:	e7e0      	b.n	8014f4a <_printf_float+0x192>
 8014f88:	6823      	ldr	r3, [r4, #0]
 8014f8a:	055a      	lsls	r2, r3, #21
 8014f8c:	d407      	bmi.n	8014f9e <_printf_float+0x1e6>
 8014f8e:	6923      	ldr	r3, [r4, #16]
 8014f90:	4642      	mov	r2, r8
 8014f92:	4631      	mov	r1, r6
 8014f94:	4628      	mov	r0, r5
 8014f96:	47b8      	blx	r7
 8014f98:	3001      	adds	r0, #1
 8014f9a:	d12b      	bne.n	8014ff4 <_printf_float+0x23c>
 8014f9c:	e767      	b.n	8014e6e <_printf_float+0xb6>
 8014f9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014fa2:	f240 80dd 	bls.w	8015160 <_printf_float+0x3a8>
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	2300      	movs	r3, #0
 8014faa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014fae:	f7eb fdb9 	bl	8000b24 <__aeabi_dcmpeq>
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d033      	beq.n	801501e <_printf_float+0x266>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	4a36      	ldr	r2, [pc, #216]	@ (8015094 <_printf_float+0x2dc>)
 8014fba:	4631      	mov	r1, r6
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	47b8      	blx	r7
 8014fc0:	3001      	adds	r0, #1
 8014fc2:	f43f af54 	beq.w	8014e6e <_printf_float+0xb6>
 8014fc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014fca:	4543      	cmp	r3, r8
 8014fcc:	db02      	blt.n	8014fd4 <_printf_float+0x21c>
 8014fce:	6823      	ldr	r3, [r4, #0]
 8014fd0:	07d8      	lsls	r0, r3, #31
 8014fd2:	d50f      	bpl.n	8014ff4 <_printf_float+0x23c>
 8014fd4:	4631      	mov	r1, r6
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fdc:	47b8      	blx	r7
 8014fde:	3001      	adds	r0, #1
 8014fe0:	f43f af45 	beq.w	8014e6e <_printf_float+0xb6>
 8014fe4:	f04f 0900 	mov.w	r9, #0
 8014fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fec:	f104 0a1a 	add.w	sl, r4, #26
 8014ff0:	45c8      	cmp	r8, r9
 8014ff2:	dc09      	bgt.n	8015008 <_printf_float+0x250>
 8014ff4:	6823      	ldr	r3, [r4, #0]
 8014ff6:	079b      	lsls	r3, r3, #30
 8014ff8:	f100 8103 	bmi.w	8015202 <_printf_float+0x44a>
 8014ffc:	68e0      	ldr	r0, [r4, #12]
 8014ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015000:	4298      	cmp	r0, r3
 8015002:	bfb8      	it	lt
 8015004:	4618      	movlt	r0, r3
 8015006:	e734      	b.n	8014e72 <_printf_float+0xba>
 8015008:	2301      	movs	r3, #1
 801500a:	4652      	mov	r2, sl
 801500c:	4631      	mov	r1, r6
 801500e:	4628      	mov	r0, r5
 8015010:	47b8      	blx	r7
 8015012:	3001      	adds	r0, #1
 8015014:	f43f af2b 	beq.w	8014e6e <_printf_float+0xb6>
 8015018:	f109 0901 	add.w	r9, r9, #1
 801501c:	e7e8      	b.n	8014ff0 <_printf_float+0x238>
 801501e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015020:	2b00      	cmp	r3, #0
 8015022:	dc39      	bgt.n	8015098 <_printf_float+0x2e0>
 8015024:	2301      	movs	r3, #1
 8015026:	4a1b      	ldr	r2, [pc, #108]	@ (8015094 <_printf_float+0x2dc>)
 8015028:	4631      	mov	r1, r6
 801502a:	4628      	mov	r0, r5
 801502c:	47b8      	blx	r7
 801502e:	3001      	adds	r0, #1
 8015030:	f43f af1d 	beq.w	8014e6e <_printf_float+0xb6>
 8015034:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015038:	ea59 0303 	orrs.w	r3, r9, r3
 801503c:	d102      	bne.n	8015044 <_printf_float+0x28c>
 801503e:	6823      	ldr	r3, [r4, #0]
 8015040:	07d9      	lsls	r1, r3, #31
 8015042:	d5d7      	bpl.n	8014ff4 <_printf_float+0x23c>
 8015044:	4631      	mov	r1, r6
 8015046:	4628      	mov	r0, r5
 8015048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801504c:	47b8      	blx	r7
 801504e:	3001      	adds	r0, #1
 8015050:	f43f af0d 	beq.w	8014e6e <_printf_float+0xb6>
 8015054:	f04f 0a00 	mov.w	sl, #0
 8015058:	f104 0b1a 	add.w	fp, r4, #26
 801505c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801505e:	425b      	negs	r3, r3
 8015060:	4553      	cmp	r3, sl
 8015062:	dc01      	bgt.n	8015068 <_printf_float+0x2b0>
 8015064:	464b      	mov	r3, r9
 8015066:	e793      	b.n	8014f90 <_printf_float+0x1d8>
 8015068:	2301      	movs	r3, #1
 801506a:	465a      	mov	r2, fp
 801506c:	4631      	mov	r1, r6
 801506e:	4628      	mov	r0, r5
 8015070:	47b8      	blx	r7
 8015072:	3001      	adds	r0, #1
 8015074:	f43f aefb 	beq.w	8014e6e <_printf_float+0xb6>
 8015078:	f10a 0a01 	add.w	sl, sl, #1
 801507c:	e7ee      	b.n	801505c <_printf_float+0x2a4>
 801507e:	bf00      	nop
 8015080:	7fefffff 	.word	0x7fefffff
 8015084:	08018b89 	.word	0x08018b89
 8015088:	08018b8d 	.word	0x08018b8d
 801508c:	08018b91 	.word	0x08018b91
 8015090:	08018b95 	.word	0x08018b95
 8015094:	08018b99 	.word	0x08018b99
 8015098:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801509a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801509e:	4553      	cmp	r3, sl
 80150a0:	bfa8      	it	ge
 80150a2:	4653      	movge	r3, sl
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	4699      	mov	r9, r3
 80150a8:	dc36      	bgt.n	8015118 <_printf_float+0x360>
 80150aa:	f04f 0b00 	mov.w	fp, #0
 80150ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150b2:	f104 021a 	add.w	r2, r4, #26
 80150b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80150b8:	9306      	str	r3, [sp, #24]
 80150ba:	eba3 0309 	sub.w	r3, r3, r9
 80150be:	455b      	cmp	r3, fp
 80150c0:	dc31      	bgt.n	8015126 <_printf_float+0x36e>
 80150c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150c4:	459a      	cmp	sl, r3
 80150c6:	dc3a      	bgt.n	801513e <_printf_float+0x386>
 80150c8:	6823      	ldr	r3, [r4, #0]
 80150ca:	07da      	lsls	r2, r3, #31
 80150cc:	d437      	bmi.n	801513e <_printf_float+0x386>
 80150ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150d0:	ebaa 0903 	sub.w	r9, sl, r3
 80150d4:	9b06      	ldr	r3, [sp, #24]
 80150d6:	ebaa 0303 	sub.w	r3, sl, r3
 80150da:	4599      	cmp	r9, r3
 80150dc:	bfa8      	it	ge
 80150de:	4699      	movge	r9, r3
 80150e0:	f1b9 0f00 	cmp.w	r9, #0
 80150e4:	dc33      	bgt.n	801514e <_printf_float+0x396>
 80150e6:	f04f 0800 	mov.w	r8, #0
 80150ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ee:	f104 0b1a 	add.w	fp, r4, #26
 80150f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150f4:	ebaa 0303 	sub.w	r3, sl, r3
 80150f8:	eba3 0309 	sub.w	r3, r3, r9
 80150fc:	4543      	cmp	r3, r8
 80150fe:	f77f af79 	ble.w	8014ff4 <_printf_float+0x23c>
 8015102:	2301      	movs	r3, #1
 8015104:	465a      	mov	r2, fp
 8015106:	4631      	mov	r1, r6
 8015108:	4628      	mov	r0, r5
 801510a:	47b8      	blx	r7
 801510c:	3001      	adds	r0, #1
 801510e:	f43f aeae 	beq.w	8014e6e <_printf_float+0xb6>
 8015112:	f108 0801 	add.w	r8, r8, #1
 8015116:	e7ec      	b.n	80150f2 <_printf_float+0x33a>
 8015118:	4642      	mov	r2, r8
 801511a:	4631      	mov	r1, r6
 801511c:	4628      	mov	r0, r5
 801511e:	47b8      	blx	r7
 8015120:	3001      	adds	r0, #1
 8015122:	d1c2      	bne.n	80150aa <_printf_float+0x2f2>
 8015124:	e6a3      	b.n	8014e6e <_printf_float+0xb6>
 8015126:	2301      	movs	r3, #1
 8015128:	4631      	mov	r1, r6
 801512a:	4628      	mov	r0, r5
 801512c:	9206      	str	r2, [sp, #24]
 801512e:	47b8      	blx	r7
 8015130:	3001      	adds	r0, #1
 8015132:	f43f ae9c 	beq.w	8014e6e <_printf_float+0xb6>
 8015136:	f10b 0b01 	add.w	fp, fp, #1
 801513a:	9a06      	ldr	r2, [sp, #24]
 801513c:	e7bb      	b.n	80150b6 <_printf_float+0x2fe>
 801513e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015142:	4631      	mov	r1, r6
 8015144:	4628      	mov	r0, r5
 8015146:	47b8      	blx	r7
 8015148:	3001      	adds	r0, #1
 801514a:	d1c0      	bne.n	80150ce <_printf_float+0x316>
 801514c:	e68f      	b.n	8014e6e <_printf_float+0xb6>
 801514e:	9a06      	ldr	r2, [sp, #24]
 8015150:	464b      	mov	r3, r9
 8015152:	4631      	mov	r1, r6
 8015154:	4628      	mov	r0, r5
 8015156:	4442      	add	r2, r8
 8015158:	47b8      	blx	r7
 801515a:	3001      	adds	r0, #1
 801515c:	d1c3      	bne.n	80150e6 <_printf_float+0x32e>
 801515e:	e686      	b.n	8014e6e <_printf_float+0xb6>
 8015160:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015164:	f1ba 0f01 	cmp.w	sl, #1
 8015168:	dc01      	bgt.n	801516e <_printf_float+0x3b6>
 801516a:	07db      	lsls	r3, r3, #31
 801516c:	d536      	bpl.n	80151dc <_printf_float+0x424>
 801516e:	2301      	movs	r3, #1
 8015170:	4642      	mov	r2, r8
 8015172:	4631      	mov	r1, r6
 8015174:	4628      	mov	r0, r5
 8015176:	47b8      	blx	r7
 8015178:	3001      	adds	r0, #1
 801517a:	f43f ae78 	beq.w	8014e6e <_printf_float+0xb6>
 801517e:	4631      	mov	r1, r6
 8015180:	4628      	mov	r0, r5
 8015182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015186:	47b8      	blx	r7
 8015188:	3001      	adds	r0, #1
 801518a:	f43f ae70 	beq.w	8014e6e <_printf_float+0xb6>
 801518e:	2200      	movs	r2, #0
 8015190:	2300      	movs	r3, #0
 8015192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015196:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801519a:	f7eb fcc3 	bl	8000b24 <__aeabi_dcmpeq>
 801519e:	b9c0      	cbnz	r0, 80151d2 <_printf_float+0x41a>
 80151a0:	4653      	mov	r3, sl
 80151a2:	f108 0201 	add.w	r2, r8, #1
 80151a6:	4631      	mov	r1, r6
 80151a8:	4628      	mov	r0, r5
 80151aa:	47b8      	blx	r7
 80151ac:	3001      	adds	r0, #1
 80151ae:	d10c      	bne.n	80151ca <_printf_float+0x412>
 80151b0:	e65d      	b.n	8014e6e <_printf_float+0xb6>
 80151b2:	2301      	movs	r3, #1
 80151b4:	465a      	mov	r2, fp
 80151b6:	4631      	mov	r1, r6
 80151b8:	4628      	mov	r0, r5
 80151ba:	47b8      	blx	r7
 80151bc:	3001      	adds	r0, #1
 80151be:	f43f ae56 	beq.w	8014e6e <_printf_float+0xb6>
 80151c2:	f108 0801 	add.w	r8, r8, #1
 80151c6:	45d0      	cmp	r8, sl
 80151c8:	dbf3      	blt.n	80151b2 <_printf_float+0x3fa>
 80151ca:	464b      	mov	r3, r9
 80151cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80151d0:	e6df      	b.n	8014f92 <_printf_float+0x1da>
 80151d2:	f04f 0800 	mov.w	r8, #0
 80151d6:	f104 0b1a 	add.w	fp, r4, #26
 80151da:	e7f4      	b.n	80151c6 <_printf_float+0x40e>
 80151dc:	2301      	movs	r3, #1
 80151de:	4642      	mov	r2, r8
 80151e0:	e7e1      	b.n	80151a6 <_printf_float+0x3ee>
 80151e2:	2301      	movs	r3, #1
 80151e4:	464a      	mov	r2, r9
 80151e6:	4631      	mov	r1, r6
 80151e8:	4628      	mov	r0, r5
 80151ea:	47b8      	blx	r7
 80151ec:	3001      	adds	r0, #1
 80151ee:	f43f ae3e 	beq.w	8014e6e <_printf_float+0xb6>
 80151f2:	f108 0801 	add.w	r8, r8, #1
 80151f6:	68e3      	ldr	r3, [r4, #12]
 80151f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80151fa:	1a5b      	subs	r3, r3, r1
 80151fc:	4543      	cmp	r3, r8
 80151fe:	dcf0      	bgt.n	80151e2 <_printf_float+0x42a>
 8015200:	e6fc      	b.n	8014ffc <_printf_float+0x244>
 8015202:	f04f 0800 	mov.w	r8, #0
 8015206:	f104 0919 	add.w	r9, r4, #25
 801520a:	e7f4      	b.n	80151f6 <_printf_float+0x43e>

0801520c <_printf_common>:
 801520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015210:	4616      	mov	r6, r2
 8015212:	4698      	mov	r8, r3
 8015214:	688a      	ldr	r2, [r1, #8]
 8015216:	4607      	mov	r7, r0
 8015218:	690b      	ldr	r3, [r1, #16]
 801521a:	460c      	mov	r4, r1
 801521c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015220:	4293      	cmp	r3, r2
 8015222:	bfb8      	it	lt
 8015224:	4613      	movlt	r3, r2
 8015226:	6033      	str	r3, [r6, #0]
 8015228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801522c:	b10a      	cbz	r2, 8015232 <_printf_common+0x26>
 801522e:	3301      	adds	r3, #1
 8015230:	6033      	str	r3, [r6, #0]
 8015232:	6823      	ldr	r3, [r4, #0]
 8015234:	0699      	lsls	r1, r3, #26
 8015236:	bf42      	ittt	mi
 8015238:	6833      	ldrmi	r3, [r6, #0]
 801523a:	3302      	addmi	r3, #2
 801523c:	6033      	strmi	r3, [r6, #0]
 801523e:	6825      	ldr	r5, [r4, #0]
 8015240:	f015 0506 	ands.w	r5, r5, #6
 8015244:	d106      	bne.n	8015254 <_printf_common+0x48>
 8015246:	f104 0a19 	add.w	sl, r4, #25
 801524a:	68e3      	ldr	r3, [r4, #12]
 801524c:	6832      	ldr	r2, [r6, #0]
 801524e:	1a9b      	subs	r3, r3, r2
 8015250:	42ab      	cmp	r3, r5
 8015252:	dc2b      	bgt.n	80152ac <_printf_common+0xa0>
 8015254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015258:	6822      	ldr	r2, [r4, #0]
 801525a:	3b00      	subs	r3, #0
 801525c:	bf18      	it	ne
 801525e:	2301      	movne	r3, #1
 8015260:	0692      	lsls	r2, r2, #26
 8015262:	d430      	bmi.n	80152c6 <_printf_common+0xba>
 8015264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015268:	4641      	mov	r1, r8
 801526a:	4638      	mov	r0, r7
 801526c:	47c8      	blx	r9
 801526e:	3001      	adds	r0, #1
 8015270:	d023      	beq.n	80152ba <_printf_common+0xae>
 8015272:	6823      	ldr	r3, [r4, #0]
 8015274:	341a      	adds	r4, #26
 8015276:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801527a:	f003 0306 	and.w	r3, r3, #6
 801527e:	2b04      	cmp	r3, #4
 8015280:	bf0a      	itet	eq
 8015282:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8015286:	2500      	movne	r5, #0
 8015288:	6833      	ldreq	r3, [r6, #0]
 801528a:	f04f 0600 	mov.w	r6, #0
 801528e:	bf08      	it	eq
 8015290:	1aed      	subeq	r5, r5, r3
 8015292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015296:	bf08      	it	eq
 8015298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801529c:	4293      	cmp	r3, r2
 801529e:	bfc4      	itt	gt
 80152a0:	1a9b      	subgt	r3, r3, r2
 80152a2:	18ed      	addgt	r5, r5, r3
 80152a4:	42b5      	cmp	r5, r6
 80152a6:	d11a      	bne.n	80152de <_printf_common+0xd2>
 80152a8:	2000      	movs	r0, #0
 80152aa:	e008      	b.n	80152be <_printf_common+0xb2>
 80152ac:	2301      	movs	r3, #1
 80152ae:	4652      	mov	r2, sl
 80152b0:	4641      	mov	r1, r8
 80152b2:	4638      	mov	r0, r7
 80152b4:	47c8      	blx	r9
 80152b6:	3001      	adds	r0, #1
 80152b8:	d103      	bne.n	80152c2 <_printf_common+0xb6>
 80152ba:	f04f 30ff 	mov.w	r0, #4294967295
 80152be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152c2:	3501      	adds	r5, #1
 80152c4:	e7c1      	b.n	801524a <_printf_common+0x3e>
 80152c6:	18e1      	adds	r1, r4, r3
 80152c8:	1c5a      	adds	r2, r3, #1
 80152ca:	2030      	movs	r0, #48	@ 0x30
 80152cc:	3302      	adds	r3, #2
 80152ce:	4422      	add	r2, r4
 80152d0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80152d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80152d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80152dc:	e7c2      	b.n	8015264 <_printf_common+0x58>
 80152de:	2301      	movs	r3, #1
 80152e0:	4622      	mov	r2, r4
 80152e2:	4641      	mov	r1, r8
 80152e4:	4638      	mov	r0, r7
 80152e6:	47c8      	blx	r9
 80152e8:	3001      	adds	r0, #1
 80152ea:	d0e6      	beq.n	80152ba <_printf_common+0xae>
 80152ec:	3601      	adds	r6, #1
 80152ee:	e7d9      	b.n	80152a4 <_printf_common+0x98>

080152f0 <_printf_i>:
 80152f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152f4:	7e0f      	ldrb	r7, [r1, #24]
 80152f6:	4691      	mov	r9, r2
 80152f8:	4680      	mov	r8, r0
 80152fa:	460c      	mov	r4, r1
 80152fc:	2f78      	cmp	r7, #120	@ 0x78
 80152fe:	469a      	mov	sl, r3
 8015300:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015306:	d807      	bhi.n	8015318 <_printf_i+0x28>
 8015308:	2f62      	cmp	r7, #98	@ 0x62
 801530a:	d80a      	bhi.n	8015322 <_printf_i+0x32>
 801530c:	2f00      	cmp	r7, #0
 801530e:	f000 80d2 	beq.w	80154b6 <_printf_i+0x1c6>
 8015312:	2f58      	cmp	r7, #88	@ 0x58
 8015314:	f000 80b9 	beq.w	801548a <_printf_i+0x19a>
 8015318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801531c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015320:	e03a      	b.n	8015398 <_printf_i+0xa8>
 8015322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015326:	2b15      	cmp	r3, #21
 8015328:	d8f6      	bhi.n	8015318 <_printf_i+0x28>
 801532a:	a101      	add	r1, pc, #4	@ (adr r1, 8015330 <_printf_i+0x40>)
 801532c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015330:	08015389 	.word	0x08015389
 8015334:	0801539d 	.word	0x0801539d
 8015338:	08015319 	.word	0x08015319
 801533c:	08015319 	.word	0x08015319
 8015340:	08015319 	.word	0x08015319
 8015344:	08015319 	.word	0x08015319
 8015348:	0801539d 	.word	0x0801539d
 801534c:	08015319 	.word	0x08015319
 8015350:	08015319 	.word	0x08015319
 8015354:	08015319 	.word	0x08015319
 8015358:	08015319 	.word	0x08015319
 801535c:	0801549d 	.word	0x0801549d
 8015360:	080153c7 	.word	0x080153c7
 8015364:	08015457 	.word	0x08015457
 8015368:	08015319 	.word	0x08015319
 801536c:	08015319 	.word	0x08015319
 8015370:	080154bf 	.word	0x080154bf
 8015374:	08015319 	.word	0x08015319
 8015378:	080153c7 	.word	0x080153c7
 801537c:	08015319 	.word	0x08015319
 8015380:	08015319 	.word	0x08015319
 8015384:	0801545f 	.word	0x0801545f
 8015388:	6833      	ldr	r3, [r6, #0]
 801538a:	1d1a      	adds	r2, r3, #4
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	6032      	str	r2, [r6, #0]
 8015390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015398:	2301      	movs	r3, #1
 801539a:	e09d      	b.n	80154d8 <_printf_i+0x1e8>
 801539c:	6833      	ldr	r3, [r6, #0]
 801539e:	6820      	ldr	r0, [r4, #0]
 80153a0:	1d19      	adds	r1, r3, #4
 80153a2:	6031      	str	r1, [r6, #0]
 80153a4:	0606      	lsls	r6, r0, #24
 80153a6:	d501      	bpl.n	80153ac <_printf_i+0xbc>
 80153a8:	681d      	ldr	r5, [r3, #0]
 80153aa:	e003      	b.n	80153b4 <_printf_i+0xc4>
 80153ac:	0645      	lsls	r5, r0, #25
 80153ae:	d5fb      	bpl.n	80153a8 <_printf_i+0xb8>
 80153b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80153b4:	2d00      	cmp	r5, #0
 80153b6:	da03      	bge.n	80153c0 <_printf_i+0xd0>
 80153b8:	232d      	movs	r3, #45	@ 0x2d
 80153ba:	426d      	negs	r5, r5
 80153bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80153c0:	4859      	ldr	r0, [pc, #356]	@ (8015528 <_printf_i+0x238>)
 80153c2:	230a      	movs	r3, #10
 80153c4:	e011      	b.n	80153ea <_printf_i+0xfa>
 80153c6:	6821      	ldr	r1, [r4, #0]
 80153c8:	6833      	ldr	r3, [r6, #0]
 80153ca:	0608      	lsls	r0, r1, #24
 80153cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80153d0:	d402      	bmi.n	80153d8 <_printf_i+0xe8>
 80153d2:	0649      	lsls	r1, r1, #25
 80153d4:	bf48      	it	mi
 80153d6:	b2ad      	uxthmi	r5, r5
 80153d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80153da:	6033      	str	r3, [r6, #0]
 80153dc:	4852      	ldr	r0, [pc, #328]	@ (8015528 <_printf_i+0x238>)
 80153de:	bf14      	ite	ne
 80153e0:	230a      	movne	r3, #10
 80153e2:	2308      	moveq	r3, #8
 80153e4:	2100      	movs	r1, #0
 80153e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80153ea:	6866      	ldr	r6, [r4, #4]
 80153ec:	2e00      	cmp	r6, #0
 80153ee:	60a6      	str	r6, [r4, #8]
 80153f0:	bfa2      	ittt	ge
 80153f2:	6821      	ldrge	r1, [r4, #0]
 80153f4:	f021 0104 	bicge.w	r1, r1, #4
 80153f8:	6021      	strge	r1, [r4, #0]
 80153fa:	b90d      	cbnz	r5, 8015400 <_printf_i+0x110>
 80153fc:	2e00      	cmp	r6, #0
 80153fe:	d04b      	beq.n	8015498 <_printf_i+0x1a8>
 8015400:	4616      	mov	r6, r2
 8015402:	fbb5 f1f3 	udiv	r1, r5, r3
 8015406:	fb03 5711 	mls	r7, r3, r1, r5
 801540a:	5dc7      	ldrb	r7, [r0, r7]
 801540c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015410:	462f      	mov	r7, r5
 8015412:	460d      	mov	r5, r1
 8015414:	42bb      	cmp	r3, r7
 8015416:	d9f4      	bls.n	8015402 <_printf_i+0x112>
 8015418:	2b08      	cmp	r3, #8
 801541a:	d10b      	bne.n	8015434 <_printf_i+0x144>
 801541c:	6823      	ldr	r3, [r4, #0]
 801541e:	07df      	lsls	r7, r3, #31
 8015420:	d508      	bpl.n	8015434 <_printf_i+0x144>
 8015422:	6923      	ldr	r3, [r4, #16]
 8015424:	6861      	ldr	r1, [r4, #4]
 8015426:	4299      	cmp	r1, r3
 8015428:	bfde      	ittt	le
 801542a:	2330      	movle	r3, #48	@ 0x30
 801542c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015434:	1b92      	subs	r2, r2, r6
 8015436:	6122      	str	r2, [r4, #16]
 8015438:	464b      	mov	r3, r9
 801543a:	aa03      	add	r2, sp, #12
 801543c:	4621      	mov	r1, r4
 801543e:	4640      	mov	r0, r8
 8015440:	f8cd a000 	str.w	sl, [sp]
 8015444:	f7ff fee2 	bl	801520c <_printf_common>
 8015448:	3001      	adds	r0, #1
 801544a:	d14a      	bne.n	80154e2 <_printf_i+0x1f2>
 801544c:	f04f 30ff 	mov.w	r0, #4294967295
 8015450:	b004      	add	sp, #16
 8015452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015456:	6823      	ldr	r3, [r4, #0]
 8015458:	f043 0320 	orr.w	r3, r3, #32
 801545c:	6023      	str	r3, [r4, #0]
 801545e:	2778      	movs	r7, #120	@ 0x78
 8015460:	4832      	ldr	r0, [pc, #200]	@ (801552c <_printf_i+0x23c>)
 8015462:	6823      	ldr	r3, [r4, #0]
 8015464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015468:	061f      	lsls	r7, r3, #24
 801546a:	6831      	ldr	r1, [r6, #0]
 801546c:	f851 5b04 	ldr.w	r5, [r1], #4
 8015470:	d402      	bmi.n	8015478 <_printf_i+0x188>
 8015472:	065f      	lsls	r7, r3, #25
 8015474:	bf48      	it	mi
 8015476:	b2ad      	uxthmi	r5, r5
 8015478:	6031      	str	r1, [r6, #0]
 801547a:	07d9      	lsls	r1, r3, #31
 801547c:	bf44      	itt	mi
 801547e:	f043 0320 	orrmi.w	r3, r3, #32
 8015482:	6023      	strmi	r3, [r4, #0]
 8015484:	b11d      	cbz	r5, 801548e <_printf_i+0x19e>
 8015486:	2310      	movs	r3, #16
 8015488:	e7ac      	b.n	80153e4 <_printf_i+0xf4>
 801548a:	4827      	ldr	r0, [pc, #156]	@ (8015528 <_printf_i+0x238>)
 801548c:	e7e9      	b.n	8015462 <_printf_i+0x172>
 801548e:	6823      	ldr	r3, [r4, #0]
 8015490:	f023 0320 	bic.w	r3, r3, #32
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	e7f6      	b.n	8015486 <_printf_i+0x196>
 8015498:	4616      	mov	r6, r2
 801549a:	e7bd      	b.n	8015418 <_printf_i+0x128>
 801549c:	6833      	ldr	r3, [r6, #0]
 801549e:	6825      	ldr	r5, [r4, #0]
 80154a0:	1d18      	adds	r0, r3, #4
 80154a2:	6961      	ldr	r1, [r4, #20]
 80154a4:	6030      	str	r0, [r6, #0]
 80154a6:	062e      	lsls	r6, r5, #24
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	d501      	bpl.n	80154b0 <_printf_i+0x1c0>
 80154ac:	6019      	str	r1, [r3, #0]
 80154ae:	e002      	b.n	80154b6 <_printf_i+0x1c6>
 80154b0:	0668      	lsls	r0, r5, #25
 80154b2:	d5fb      	bpl.n	80154ac <_printf_i+0x1bc>
 80154b4:	8019      	strh	r1, [r3, #0]
 80154b6:	2300      	movs	r3, #0
 80154b8:	4616      	mov	r6, r2
 80154ba:	6123      	str	r3, [r4, #16]
 80154bc:	e7bc      	b.n	8015438 <_printf_i+0x148>
 80154be:	6833      	ldr	r3, [r6, #0]
 80154c0:	2100      	movs	r1, #0
 80154c2:	1d1a      	adds	r2, r3, #4
 80154c4:	6032      	str	r2, [r6, #0]
 80154c6:	681e      	ldr	r6, [r3, #0]
 80154c8:	6862      	ldr	r2, [r4, #4]
 80154ca:	4630      	mov	r0, r6
 80154cc:	f000 fc51 	bl	8015d72 <memchr>
 80154d0:	b108      	cbz	r0, 80154d6 <_printf_i+0x1e6>
 80154d2:	1b80      	subs	r0, r0, r6
 80154d4:	6060      	str	r0, [r4, #4]
 80154d6:	6863      	ldr	r3, [r4, #4]
 80154d8:	6123      	str	r3, [r4, #16]
 80154da:	2300      	movs	r3, #0
 80154dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80154e0:	e7aa      	b.n	8015438 <_printf_i+0x148>
 80154e2:	6923      	ldr	r3, [r4, #16]
 80154e4:	4632      	mov	r2, r6
 80154e6:	4649      	mov	r1, r9
 80154e8:	4640      	mov	r0, r8
 80154ea:	47d0      	blx	sl
 80154ec:	3001      	adds	r0, #1
 80154ee:	d0ad      	beq.n	801544c <_printf_i+0x15c>
 80154f0:	6823      	ldr	r3, [r4, #0]
 80154f2:	079b      	lsls	r3, r3, #30
 80154f4:	d413      	bmi.n	801551e <_printf_i+0x22e>
 80154f6:	68e0      	ldr	r0, [r4, #12]
 80154f8:	9b03      	ldr	r3, [sp, #12]
 80154fa:	4298      	cmp	r0, r3
 80154fc:	bfb8      	it	lt
 80154fe:	4618      	movlt	r0, r3
 8015500:	e7a6      	b.n	8015450 <_printf_i+0x160>
 8015502:	2301      	movs	r3, #1
 8015504:	4632      	mov	r2, r6
 8015506:	4649      	mov	r1, r9
 8015508:	4640      	mov	r0, r8
 801550a:	47d0      	blx	sl
 801550c:	3001      	adds	r0, #1
 801550e:	d09d      	beq.n	801544c <_printf_i+0x15c>
 8015510:	3501      	adds	r5, #1
 8015512:	68e3      	ldr	r3, [r4, #12]
 8015514:	9903      	ldr	r1, [sp, #12]
 8015516:	1a5b      	subs	r3, r3, r1
 8015518:	42ab      	cmp	r3, r5
 801551a:	dcf2      	bgt.n	8015502 <_printf_i+0x212>
 801551c:	e7eb      	b.n	80154f6 <_printf_i+0x206>
 801551e:	2500      	movs	r5, #0
 8015520:	f104 0619 	add.w	r6, r4, #25
 8015524:	e7f5      	b.n	8015512 <_printf_i+0x222>
 8015526:	bf00      	nop
 8015528:	08018b9b 	.word	0x08018b9b
 801552c:	08018bac 	.word	0x08018bac

08015530 <std>:
 8015530:	2300      	movs	r3, #0
 8015532:	b510      	push	{r4, lr}
 8015534:	4604      	mov	r4, r0
 8015536:	6083      	str	r3, [r0, #8]
 8015538:	8181      	strh	r1, [r0, #12]
 801553a:	4619      	mov	r1, r3
 801553c:	6643      	str	r3, [r0, #100]	@ 0x64
 801553e:	81c2      	strh	r2, [r0, #14]
 8015540:	2208      	movs	r2, #8
 8015542:	6183      	str	r3, [r0, #24]
 8015544:	e9c0 3300 	strd	r3, r3, [r0]
 8015548:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801554c:	305c      	adds	r0, #92	@ 0x5c
 801554e:	f000 fb0f 	bl	8015b70 <memset>
 8015552:	4b0d      	ldr	r3, [pc, #52]	@ (8015588 <std+0x58>)
 8015554:	6224      	str	r4, [r4, #32]
 8015556:	6263      	str	r3, [r4, #36]	@ 0x24
 8015558:	4b0c      	ldr	r3, [pc, #48]	@ (801558c <std+0x5c>)
 801555a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801555c:	4b0c      	ldr	r3, [pc, #48]	@ (8015590 <std+0x60>)
 801555e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015560:	4b0c      	ldr	r3, [pc, #48]	@ (8015594 <std+0x64>)
 8015562:	6323      	str	r3, [r4, #48]	@ 0x30
 8015564:	4b0c      	ldr	r3, [pc, #48]	@ (8015598 <std+0x68>)
 8015566:	429c      	cmp	r4, r3
 8015568:	d006      	beq.n	8015578 <std+0x48>
 801556a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801556e:	4294      	cmp	r4, r2
 8015570:	d002      	beq.n	8015578 <std+0x48>
 8015572:	33d0      	adds	r3, #208	@ 0xd0
 8015574:	429c      	cmp	r4, r3
 8015576:	d105      	bne.n	8015584 <std+0x54>
 8015578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015580:	f000 bbf4 	b.w	8015d6c <__retarget_lock_init_recursive>
 8015584:	bd10      	pop	{r4, pc}
 8015586:	bf00      	nop
 8015588:	08015951 	.word	0x08015951
 801558c:	08015973 	.word	0x08015973
 8015590:	080159ab 	.word	0x080159ab
 8015594:	080159cf 	.word	0x080159cf
 8015598:	20004464 	.word	0x20004464

0801559c <stdio_exit_handler>:
 801559c:	4a02      	ldr	r2, [pc, #8]	@ (80155a8 <stdio_exit_handler+0xc>)
 801559e:	4903      	ldr	r1, [pc, #12]	@ (80155ac <stdio_exit_handler+0x10>)
 80155a0:	4803      	ldr	r0, [pc, #12]	@ (80155b0 <stdio_exit_handler+0x14>)
 80155a2:	f000 b869 	b.w	8015678 <_fwalk_sglue>
 80155a6:	bf00      	nop
 80155a8:	200001ac 	.word	0x200001ac
 80155ac:	08017751 	.word	0x08017751
 80155b0:	200001bc 	.word	0x200001bc

080155b4 <cleanup_stdio>:
 80155b4:	6841      	ldr	r1, [r0, #4]
 80155b6:	4b0c      	ldr	r3, [pc, #48]	@ (80155e8 <cleanup_stdio+0x34>)
 80155b8:	4299      	cmp	r1, r3
 80155ba:	b510      	push	{r4, lr}
 80155bc:	4604      	mov	r4, r0
 80155be:	d001      	beq.n	80155c4 <cleanup_stdio+0x10>
 80155c0:	f002 f8c6 	bl	8017750 <_fflush_r>
 80155c4:	68a1      	ldr	r1, [r4, #8]
 80155c6:	4b09      	ldr	r3, [pc, #36]	@ (80155ec <cleanup_stdio+0x38>)
 80155c8:	4299      	cmp	r1, r3
 80155ca:	d002      	beq.n	80155d2 <cleanup_stdio+0x1e>
 80155cc:	4620      	mov	r0, r4
 80155ce:	f002 f8bf 	bl	8017750 <_fflush_r>
 80155d2:	68e1      	ldr	r1, [r4, #12]
 80155d4:	4b06      	ldr	r3, [pc, #24]	@ (80155f0 <cleanup_stdio+0x3c>)
 80155d6:	4299      	cmp	r1, r3
 80155d8:	d004      	beq.n	80155e4 <cleanup_stdio+0x30>
 80155da:	4620      	mov	r0, r4
 80155dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155e0:	f002 b8b6 	b.w	8017750 <_fflush_r>
 80155e4:	bd10      	pop	{r4, pc}
 80155e6:	bf00      	nop
 80155e8:	20004464 	.word	0x20004464
 80155ec:	200044cc 	.word	0x200044cc
 80155f0:	20004534 	.word	0x20004534

080155f4 <global_stdio_init.part.0>:
 80155f4:	b510      	push	{r4, lr}
 80155f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015624 <global_stdio_init.part.0+0x30>)
 80155f8:	2104      	movs	r1, #4
 80155fa:	4c0b      	ldr	r4, [pc, #44]	@ (8015628 <global_stdio_init.part.0+0x34>)
 80155fc:	4a0b      	ldr	r2, [pc, #44]	@ (801562c <global_stdio_init.part.0+0x38>)
 80155fe:	4620      	mov	r0, r4
 8015600:	601a      	str	r2, [r3, #0]
 8015602:	2200      	movs	r2, #0
 8015604:	f7ff ff94 	bl	8015530 <std>
 8015608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801560c:	2201      	movs	r2, #1
 801560e:	2109      	movs	r1, #9
 8015610:	f7ff ff8e 	bl	8015530 <std>
 8015614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015618:	2202      	movs	r2, #2
 801561a:	2112      	movs	r1, #18
 801561c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015620:	f7ff bf86 	b.w	8015530 <std>
 8015624:	2000459c 	.word	0x2000459c
 8015628:	20004464 	.word	0x20004464
 801562c:	0801559d 	.word	0x0801559d

08015630 <__sfp_lock_acquire>:
 8015630:	4801      	ldr	r0, [pc, #4]	@ (8015638 <__sfp_lock_acquire+0x8>)
 8015632:	f000 bb9c 	b.w	8015d6e <__retarget_lock_acquire_recursive>
 8015636:	bf00      	nop
 8015638:	200045a5 	.word	0x200045a5

0801563c <__sfp_lock_release>:
 801563c:	4801      	ldr	r0, [pc, #4]	@ (8015644 <__sfp_lock_release+0x8>)
 801563e:	f000 bb97 	b.w	8015d70 <__retarget_lock_release_recursive>
 8015642:	bf00      	nop
 8015644:	200045a5 	.word	0x200045a5

08015648 <__sinit>:
 8015648:	b510      	push	{r4, lr}
 801564a:	4604      	mov	r4, r0
 801564c:	f7ff fff0 	bl	8015630 <__sfp_lock_acquire>
 8015650:	6a23      	ldr	r3, [r4, #32]
 8015652:	b11b      	cbz	r3, 801565c <__sinit+0x14>
 8015654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015658:	f7ff bff0 	b.w	801563c <__sfp_lock_release>
 801565c:	4b04      	ldr	r3, [pc, #16]	@ (8015670 <__sinit+0x28>)
 801565e:	6223      	str	r3, [r4, #32]
 8015660:	4b04      	ldr	r3, [pc, #16]	@ (8015674 <__sinit+0x2c>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d1f5      	bne.n	8015654 <__sinit+0xc>
 8015668:	f7ff ffc4 	bl	80155f4 <global_stdio_init.part.0>
 801566c:	e7f2      	b.n	8015654 <__sinit+0xc>
 801566e:	bf00      	nop
 8015670:	080155b5 	.word	0x080155b5
 8015674:	2000459c 	.word	0x2000459c

08015678 <_fwalk_sglue>:
 8015678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801567c:	4607      	mov	r7, r0
 801567e:	4688      	mov	r8, r1
 8015680:	4614      	mov	r4, r2
 8015682:	2600      	movs	r6, #0
 8015684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015688:	f1b9 0901 	subs.w	r9, r9, #1
 801568c:	d505      	bpl.n	801569a <_fwalk_sglue+0x22>
 801568e:	6824      	ldr	r4, [r4, #0]
 8015690:	2c00      	cmp	r4, #0
 8015692:	d1f7      	bne.n	8015684 <_fwalk_sglue+0xc>
 8015694:	4630      	mov	r0, r6
 8015696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801569a:	89ab      	ldrh	r3, [r5, #12]
 801569c:	2b01      	cmp	r3, #1
 801569e:	d907      	bls.n	80156b0 <_fwalk_sglue+0x38>
 80156a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80156a4:	3301      	adds	r3, #1
 80156a6:	d003      	beq.n	80156b0 <_fwalk_sglue+0x38>
 80156a8:	4629      	mov	r1, r5
 80156aa:	4638      	mov	r0, r7
 80156ac:	47c0      	blx	r8
 80156ae:	4306      	orrs	r6, r0
 80156b0:	3568      	adds	r5, #104	@ 0x68
 80156b2:	e7e9      	b.n	8015688 <_fwalk_sglue+0x10>

080156b4 <putchar>:
 80156b4:	4b02      	ldr	r3, [pc, #8]	@ (80156c0 <putchar+0xc>)
 80156b6:	4601      	mov	r1, r0
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	6882      	ldr	r2, [r0, #8]
 80156bc:	f002 b8e3 	b.w	8017886 <_putc_r>
 80156c0:	200001b8 	.word	0x200001b8

080156c4 <_puts_r>:
 80156c4:	6a03      	ldr	r3, [r0, #32]
 80156c6:	b570      	push	{r4, r5, r6, lr}
 80156c8:	4605      	mov	r5, r0
 80156ca:	460e      	mov	r6, r1
 80156cc:	6884      	ldr	r4, [r0, #8]
 80156ce:	b90b      	cbnz	r3, 80156d4 <_puts_r+0x10>
 80156d0:	f7ff ffba 	bl	8015648 <__sinit>
 80156d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80156d6:	07db      	lsls	r3, r3, #31
 80156d8:	d405      	bmi.n	80156e6 <_puts_r+0x22>
 80156da:	89a3      	ldrh	r3, [r4, #12]
 80156dc:	0598      	lsls	r0, r3, #22
 80156de:	d402      	bmi.n	80156e6 <_puts_r+0x22>
 80156e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156e2:	f000 fb44 	bl	8015d6e <__retarget_lock_acquire_recursive>
 80156e6:	89a3      	ldrh	r3, [r4, #12]
 80156e8:	0719      	lsls	r1, r3, #28
 80156ea:	d502      	bpl.n	80156f2 <_puts_r+0x2e>
 80156ec:	6923      	ldr	r3, [r4, #16]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d135      	bne.n	801575e <_puts_r+0x9a>
 80156f2:	4621      	mov	r1, r4
 80156f4:	4628      	mov	r0, r5
 80156f6:	f000 f9e5 	bl	8015ac4 <__swsetup_r>
 80156fa:	b380      	cbz	r0, 801575e <_puts_r+0x9a>
 80156fc:	f04f 35ff 	mov.w	r5, #4294967295
 8015700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015702:	07da      	lsls	r2, r3, #31
 8015704:	d405      	bmi.n	8015712 <_puts_r+0x4e>
 8015706:	89a3      	ldrh	r3, [r4, #12]
 8015708:	059b      	lsls	r3, r3, #22
 801570a:	d402      	bmi.n	8015712 <_puts_r+0x4e>
 801570c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801570e:	f000 fb2f 	bl	8015d70 <__retarget_lock_release_recursive>
 8015712:	4628      	mov	r0, r5
 8015714:	bd70      	pop	{r4, r5, r6, pc}
 8015716:	2b00      	cmp	r3, #0
 8015718:	da04      	bge.n	8015724 <_puts_r+0x60>
 801571a:	69a2      	ldr	r2, [r4, #24]
 801571c:	429a      	cmp	r2, r3
 801571e:	dc17      	bgt.n	8015750 <_puts_r+0x8c>
 8015720:	290a      	cmp	r1, #10
 8015722:	d015      	beq.n	8015750 <_puts_r+0x8c>
 8015724:	6823      	ldr	r3, [r4, #0]
 8015726:	1c5a      	adds	r2, r3, #1
 8015728:	6022      	str	r2, [r4, #0]
 801572a:	7019      	strb	r1, [r3, #0]
 801572c:	68a3      	ldr	r3, [r4, #8]
 801572e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015732:	3b01      	subs	r3, #1
 8015734:	60a3      	str	r3, [r4, #8]
 8015736:	2900      	cmp	r1, #0
 8015738:	d1ed      	bne.n	8015716 <_puts_r+0x52>
 801573a:	2b00      	cmp	r3, #0
 801573c:	da11      	bge.n	8015762 <_puts_r+0x9e>
 801573e:	4622      	mov	r2, r4
 8015740:	210a      	movs	r1, #10
 8015742:	4628      	mov	r0, r5
 8015744:	f000 f980 	bl	8015a48 <__swbuf_r>
 8015748:	3001      	adds	r0, #1
 801574a:	d0d7      	beq.n	80156fc <_puts_r+0x38>
 801574c:	250a      	movs	r5, #10
 801574e:	e7d7      	b.n	8015700 <_puts_r+0x3c>
 8015750:	4622      	mov	r2, r4
 8015752:	4628      	mov	r0, r5
 8015754:	f000 f978 	bl	8015a48 <__swbuf_r>
 8015758:	3001      	adds	r0, #1
 801575a:	d1e7      	bne.n	801572c <_puts_r+0x68>
 801575c:	e7ce      	b.n	80156fc <_puts_r+0x38>
 801575e:	3e01      	subs	r6, #1
 8015760:	e7e4      	b.n	801572c <_puts_r+0x68>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	1c5a      	adds	r2, r3, #1
 8015766:	6022      	str	r2, [r4, #0]
 8015768:	220a      	movs	r2, #10
 801576a:	701a      	strb	r2, [r3, #0]
 801576c:	e7ee      	b.n	801574c <_puts_r+0x88>
	...

08015770 <puts>:
 8015770:	4b02      	ldr	r3, [pc, #8]	@ (801577c <puts+0xc>)
 8015772:	4601      	mov	r1, r0
 8015774:	6818      	ldr	r0, [r3, #0]
 8015776:	f7ff bfa5 	b.w	80156c4 <_puts_r>
 801577a:	bf00      	nop
 801577c:	200001b8 	.word	0x200001b8

08015780 <setvbuf>:
 8015780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015784:	461d      	mov	r5, r3
 8015786:	4b57      	ldr	r3, [pc, #348]	@ (80158e4 <setvbuf+0x164>)
 8015788:	4604      	mov	r4, r0
 801578a:	460e      	mov	r6, r1
 801578c:	681f      	ldr	r7, [r3, #0]
 801578e:	4690      	mov	r8, r2
 8015790:	b127      	cbz	r7, 801579c <setvbuf+0x1c>
 8015792:	6a3b      	ldr	r3, [r7, #32]
 8015794:	b913      	cbnz	r3, 801579c <setvbuf+0x1c>
 8015796:	4638      	mov	r0, r7
 8015798:	f7ff ff56 	bl	8015648 <__sinit>
 801579c:	f1b8 0f02 	cmp.w	r8, #2
 80157a0:	d006      	beq.n	80157b0 <setvbuf+0x30>
 80157a2:	f1b8 0f01 	cmp.w	r8, #1
 80157a6:	f200 8099 	bhi.w	80158dc <setvbuf+0x15c>
 80157aa:	2d00      	cmp	r5, #0
 80157ac:	f2c0 8096 	blt.w	80158dc <setvbuf+0x15c>
 80157b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157b2:	07d9      	lsls	r1, r3, #31
 80157b4:	d405      	bmi.n	80157c2 <setvbuf+0x42>
 80157b6:	89a3      	ldrh	r3, [r4, #12]
 80157b8:	059a      	lsls	r2, r3, #22
 80157ba:	d402      	bmi.n	80157c2 <setvbuf+0x42>
 80157bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157be:	f000 fad6 	bl	8015d6e <__retarget_lock_acquire_recursive>
 80157c2:	4621      	mov	r1, r4
 80157c4:	4638      	mov	r0, r7
 80157c6:	f001 ffc3 	bl	8017750 <_fflush_r>
 80157ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80157cc:	b141      	cbz	r1, 80157e0 <setvbuf+0x60>
 80157ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80157d2:	4299      	cmp	r1, r3
 80157d4:	d002      	beq.n	80157dc <setvbuf+0x5c>
 80157d6:	4638      	mov	r0, r7
 80157d8:	f001 f956 	bl	8016a88 <_free_r>
 80157dc:	2300      	movs	r3, #0
 80157de:	6363      	str	r3, [r4, #52]	@ 0x34
 80157e0:	2300      	movs	r3, #0
 80157e2:	61a3      	str	r3, [r4, #24]
 80157e4:	6063      	str	r3, [r4, #4]
 80157e6:	89a3      	ldrh	r3, [r4, #12]
 80157e8:	061b      	lsls	r3, r3, #24
 80157ea:	d503      	bpl.n	80157f4 <setvbuf+0x74>
 80157ec:	6921      	ldr	r1, [r4, #16]
 80157ee:	4638      	mov	r0, r7
 80157f0:	f001 f94a 	bl	8016a88 <_free_r>
 80157f4:	89a3      	ldrh	r3, [r4, #12]
 80157f6:	f1b8 0f02 	cmp.w	r8, #2
 80157fa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80157fe:	f023 0303 	bic.w	r3, r3, #3
 8015802:	81a3      	strh	r3, [r4, #12]
 8015804:	d060      	beq.n	80158c8 <setvbuf+0x148>
 8015806:	ab01      	add	r3, sp, #4
 8015808:	466a      	mov	r2, sp
 801580a:	4621      	mov	r1, r4
 801580c:	4638      	mov	r0, r7
 801580e:	f001 ffd9 	bl	80177c4 <__swhatbuf_r>
 8015812:	89a3      	ldrh	r3, [r4, #12]
 8015814:	4318      	orrs	r0, r3
 8015816:	81a0      	strh	r0, [r4, #12]
 8015818:	bb2d      	cbnz	r5, 8015866 <setvbuf+0xe6>
 801581a:	9d00      	ldr	r5, [sp, #0]
 801581c:	4628      	mov	r0, r5
 801581e:	f001 f97d 	bl	8016b1c <malloc>
 8015822:	4606      	mov	r6, r0
 8015824:	2800      	cmp	r0, #0
 8015826:	d151      	bne.n	80158cc <setvbuf+0x14c>
 8015828:	f8dd 9000 	ldr.w	r9, [sp]
 801582c:	45a9      	cmp	r9, r5
 801582e:	d13f      	bne.n	80158b0 <setvbuf+0x130>
 8015830:	f04f 35ff 	mov.w	r5, #4294967295
 8015834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015838:	f043 0202 	orr.w	r2, r3, #2
 801583c:	81a2      	strh	r2, [r4, #12]
 801583e:	2200      	movs	r2, #0
 8015840:	60a2      	str	r2, [r4, #8]
 8015842:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8015846:	6022      	str	r2, [r4, #0]
 8015848:	6122      	str	r2, [r4, #16]
 801584a:	2201      	movs	r2, #1
 801584c:	6162      	str	r2, [r4, #20]
 801584e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015850:	07d6      	lsls	r6, r2, #31
 8015852:	d404      	bmi.n	801585e <setvbuf+0xde>
 8015854:	0598      	lsls	r0, r3, #22
 8015856:	d402      	bmi.n	801585e <setvbuf+0xde>
 8015858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801585a:	f000 fa89 	bl	8015d70 <__retarget_lock_release_recursive>
 801585e:	4628      	mov	r0, r5
 8015860:	b003      	add	sp, #12
 8015862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015866:	2e00      	cmp	r6, #0
 8015868:	d0d8      	beq.n	801581c <setvbuf+0x9c>
 801586a:	6a3b      	ldr	r3, [r7, #32]
 801586c:	b913      	cbnz	r3, 8015874 <setvbuf+0xf4>
 801586e:	4638      	mov	r0, r7
 8015870:	f7ff feea 	bl	8015648 <__sinit>
 8015874:	f1b8 0f01 	cmp.w	r8, #1
 8015878:	6026      	str	r6, [r4, #0]
 801587a:	bf02      	ittt	eq
 801587c:	89a3      	ldrheq	r3, [r4, #12]
 801587e:	f043 0301 	orreq.w	r3, r3, #1
 8015882:	81a3      	strheq	r3, [r4, #12]
 8015884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015888:	f013 0208 	ands.w	r2, r3, #8
 801588c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8015890:	d01e      	beq.n	80158d0 <setvbuf+0x150>
 8015892:	07d9      	lsls	r1, r3, #31
 8015894:	bf45      	ittet	mi
 8015896:	2200      	movmi	r2, #0
 8015898:	426d      	negmi	r5, r5
 801589a:	60a5      	strpl	r5, [r4, #8]
 801589c:	60a2      	strmi	r2, [r4, #8]
 801589e:	bf48      	it	mi
 80158a0:	61a5      	strmi	r5, [r4, #24]
 80158a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80158a4:	07d2      	lsls	r2, r2, #31
 80158a6:	d401      	bmi.n	80158ac <setvbuf+0x12c>
 80158a8:	059b      	lsls	r3, r3, #22
 80158aa:	d513      	bpl.n	80158d4 <setvbuf+0x154>
 80158ac:	2500      	movs	r5, #0
 80158ae:	e7d6      	b.n	801585e <setvbuf+0xde>
 80158b0:	4648      	mov	r0, r9
 80158b2:	f001 f933 	bl	8016b1c <malloc>
 80158b6:	4606      	mov	r6, r0
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d0b9      	beq.n	8015830 <setvbuf+0xb0>
 80158bc:	89a3      	ldrh	r3, [r4, #12]
 80158be:	464d      	mov	r5, r9
 80158c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158c4:	81a3      	strh	r3, [r4, #12]
 80158c6:	e7d0      	b.n	801586a <setvbuf+0xea>
 80158c8:	2500      	movs	r5, #0
 80158ca:	e7b3      	b.n	8015834 <setvbuf+0xb4>
 80158cc:	46a9      	mov	r9, r5
 80158ce:	e7f5      	b.n	80158bc <setvbuf+0x13c>
 80158d0:	60a2      	str	r2, [r4, #8]
 80158d2:	e7e6      	b.n	80158a2 <setvbuf+0x122>
 80158d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80158d6:	f000 fa4b 	bl	8015d70 <__retarget_lock_release_recursive>
 80158da:	e7e7      	b.n	80158ac <setvbuf+0x12c>
 80158dc:	f04f 35ff 	mov.w	r5, #4294967295
 80158e0:	e7bd      	b.n	801585e <setvbuf+0xde>
 80158e2:	bf00      	nop
 80158e4:	200001b8 	.word	0x200001b8

080158e8 <sniprintf>:
 80158e8:	b40c      	push	{r2, r3}
 80158ea:	4b18      	ldr	r3, [pc, #96]	@ (801594c <sniprintf+0x64>)
 80158ec:	b530      	push	{r4, r5, lr}
 80158ee:	1e0c      	subs	r4, r1, #0
 80158f0:	b09d      	sub	sp, #116	@ 0x74
 80158f2:	681d      	ldr	r5, [r3, #0]
 80158f4:	da08      	bge.n	8015908 <sniprintf+0x20>
 80158f6:	238b      	movs	r3, #139	@ 0x8b
 80158f8:	f04f 30ff 	mov.w	r0, #4294967295
 80158fc:	602b      	str	r3, [r5, #0]
 80158fe:	b01d      	add	sp, #116	@ 0x74
 8015900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015904:	b002      	add	sp, #8
 8015906:	4770      	bx	lr
 8015908:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801590c:	9002      	str	r0, [sp, #8]
 801590e:	9006      	str	r0, [sp, #24]
 8015910:	a902      	add	r1, sp, #8
 8015912:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015916:	bf14      	ite	ne
 8015918:	f104 33ff 	addne.w	r3, r4, #4294967295
 801591c:	4623      	moveq	r3, r4
 801591e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015920:	4628      	mov	r0, r5
 8015922:	9304      	str	r3, [sp, #16]
 8015924:	9307      	str	r3, [sp, #28]
 8015926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801592a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801592e:	ab21      	add	r3, sp, #132	@ 0x84
 8015930:	9301      	str	r3, [sp, #4]
 8015932:	f001 fd8d 	bl	8017450 <_svfiprintf_r>
 8015936:	1c43      	adds	r3, r0, #1
 8015938:	bfbc      	itt	lt
 801593a:	238b      	movlt	r3, #139	@ 0x8b
 801593c:	602b      	strlt	r3, [r5, #0]
 801593e:	2c00      	cmp	r4, #0
 8015940:	d0dd      	beq.n	80158fe <sniprintf+0x16>
 8015942:	9b02      	ldr	r3, [sp, #8]
 8015944:	2200      	movs	r2, #0
 8015946:	701a      	strb	r2, [r3, #0]
 8015948:	e7d9      	b.n	80158fe <sniprintf+0x16>
 801594a:	bf00      	nop
 801594c:	200001b8 	.word	0x200001b8

08015950 <__sread>:
 8015950:	b510      	push	{r4, lr}
 8015952:	460c      	mov	r4, r1
 8015954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015958:	f000 f9ba 	bl	8015cd0 <_read_r>
 801595c:	2800      	cmp	r0, #0
 801595e:	bfab      	itete	ge
 8015960:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015962:	89a3      	ldrhlt	r3, [r4, #12]
 8015964:	181b      	addge	r3, r3, r0
 8015966:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801596a:	bfac      	ite	ge
 801596c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801596e:	81a3      	strhlt	r3, [r4, #12]
 8015970:	bd10      	pop	{r4, pc}

08015972 <__swrite>:
 8015972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015976:	461f      	mov	r7, r3
 8015978:	898b      	ldrh	r3, [r1, #12]
 801597a:	4605      	mov	r5, r0
 801597c:	460c      	mov	r4, r1
 801597e:	05db      	lsls	r3, r3, #23
 8015980:	4616      	mov	r6, r2
 8015982:	d505      	bpl.n	8015990 <__swrite+0x1e>
 8015984:	2302      	movs	r3, #2
 8015986:	2200      	movs	r2, #0
 8015988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801598c:	f000 f98e 	bl	8015cac <_lseek_r>
 8015990:	89a3      	ldrh	r3, [r4, #12]
 8015992:	4632      	mov	r2, r6
 8015994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015998:	4628      	mov	r0, r5
 801599a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801599e:	81a3      	strh	r3, [r4, #12]
 80159a0:	463b      	mov	r3, r7
 80159a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159a6:	f000 b9a5 	b.w	8015cf4 <_write_r>

080159aa <__sseek>:
 80159aa:	b510      	push	{r4, lr}
 80159ac:	460c      	mov	r4, r1
 80159ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159b2:	f000 f97b 	bl	8015cac <_lseek_r>
 80159b6:	1c43      	adds	r3, r0, #1
 80159b8:	89a3      	ldrh	r3, [r4, #12]
 80159ba:	bf15      	itete	ne
 80159bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80159be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80159c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80159c6:	81a3      	strheq	r3, [r4, #12]
 80159c8:	bf18      	it	ne
 80159ca:	81a3      	strhne	r3, [r4, #12]
 80159cc:	bd10      	pop	{r4, pc}

080159ce <__sclose>:
 80159ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159d2:	f000 b95b 	b.w	8015c8c <_close_r>

080159d6 <_vsniprintf_r>:
 80159d6:	b530      	push	{r4, r5, lr}
 80159d8:	4614      	mov	r4, r2
 80159da:	b09b      	sub	sp, #108	@ 0x6c
 80159dc:	4605      	mov	r5, r0
 80159de:	461a      	mov	r2, r3
 80159e0:	2c00      	cmp	r4, #0
 80159e2:	da05      	bge.n	80159f0 <_vsniprintf_r+0x1a>
 80159e4:	238b      	movs	r3, #139	@ 0x8b
 80159e6:	6003      	str	r3, [r0, #0]
 80159e8:	f04f 30ff 	mov.w	r0, #4294967295
 80159ec:	b01b      	add	sp, #108	@ 0x6c
 80159ee:	bd30      	pop	{r4, r5, pc}
 80159f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80159f4:	9100      	str	r1, [sp, #0]
 80159f6:	9104      	str	r1, [sp, #16]
 80159f8:	4669      	mov	r1, sp
 80159fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80159fe:	bf14      	ite	ne
 8015a00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015a04:	4623      	moveq	r3, r4
 8015a06:	9302      	str	r3, [sp, #8]
 8015a08:	9305      	str	r3, [sp, #20]
 8015a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015a0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015a14:	f001 fd1c 	bl	8017450 <_svfiprintf_r>
 8015a18:	1c43      	adds	r3, r0, #1
 8015a1a:	bfbc      	itt	lt
 8015a1c:	238b      	movlt	r3, #139	@ 0x8b
 8015a1e:	602b      	strlt	r3, [r5, #0]
 8015a20:	2c00      	cmp	r4, #0
 8015a22:	d0e3      	beq.n	80159ec <_vsniprintf_r+0x16>
 8015a24:	9b00      	ldr	r3, [sp, #0]
 8015a26:	2200      	movs	r2, #0
 8015a28:	701a      	strb	r2, [r3, #0]
 8015a2a:	e7df      	b.n	80159ec <_vsniprintf_r+0x16>

08015a2c <vsniprintf>:
 8015a2c:	b507      	push	{r0, r1, r2, lr}
 8015a2e:	9300      	str	r3, [sp, #0]
 8015a30:	4613      	mov	r3, r2
 8015a32:	460a      	mov	r2, r1
 8015a34:	4601      	mov	r1, r0
 8015a36:	4803      	ldr	r0, [pc, #12]	@ (8015a44 <vsniprintf+0x18>)
 8015a38:	6800      	ldr	r0, [r0, #0]
 8015a3a:	f7ff ffcc 	bl	80159d6 <_vsniprintf_r>
 8015a3e:	b003      	add	sp, #12
 8015a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a44:	200001b8 	.word	0x200001b8

08015a48 <__swbuf_r>:
 8015a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a4a:	460e      	mov	r6, r1
 8015a4c:	4614      	mov	r4, r2
 8015a4e:	4605      	mov	r5, r0
 8015a50:	b118      	cbz	r0, 8015a5a <__swbuf_r+0x12>
 8015a52:	6a03      	ldr	r3, [r0, #32]
 8015a54:	b90b      	cbnz	r3, 8015a5a <__swbuf_r+0x12>
 8015a56:	f7ff fdf7 	bl	8015648 <__sinit>
 8015a5a:	69a3      	ldr	r3, [r4, #24]
 8015a5c:	60a3      	str	r3, [r4, #8]
 8015a5e:	89a3      	ldrh	r3, [r4, #12]
 8015a60:	071a      	lsls	r2, r3, #28
 8015a62:	d501      	bpl.n	8015a68 <__swbuf_r+0x20>
 8015a64:	6923      	ldr	r3, [r4, #16]
 8015a66:	b943      	cbnz	r3, 8015a7a <__swbuf_r+0x32>
 8015a68:	4621      	mov	r1, r4
 8015a6a:	4628      	mov	r0, r5
 8015a6c:	f000 f82a 	bl	8015ac4 <__swsetup_r>
 8015a70:	b118      	cbz	r0, 8015a7a <__swbuf_r+0x32>
 8015a72:	f04f 37ff 	mov.w	r7, #4294967295
 8015a76:	4638      	mov	r0, r7
 8015a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a7a:	6823      	ldr	r3, [r4, #0]
 8015a7c:	b2f6      	uxtb	r6, r6
 8015a7e:	6922      	ldr	r2, [r4, #16]
 8015a80:	4637      	mov	r7, r6
 8015a82:	1a98      	subs	r0, r3, r2
 8015a84:	6963      	ldr	r3, [r4, #20]
 8015a86:	4283      	cmp	r3, r0
 8015a88:	dc05      	bgt.n	8015a96 <__swbuf_r+0x4e>
 8015a8a:	4621      	mov	r1, r4
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	f001 fe5f 	bl	8017750 <_fflush_r>
 8015a92:	2800      	cmp	r0, #0
 8015a94:	d1ed      	bne.n	8015a72 <__swbuf_r+0x2a>
 8015a96:	68a3      	ldr	r3, [r4, #8]
 8015a98:	3b01      	subs	r3, #1
 8015a9a:	60a3      	str	r3, [r4, #8]
 8015a9c:	6823      	ldr	r3, [r4, #0]
 8015a9e:	1c5a      	adds	r2, r3, #1
 8015aa0:	6022      	str	r2, [r4, #0]
 8015aa2:	701e      	strb	r6, [r3, #0]
 8015aa4:	1c43      	adds	r3, r0, #1
 8015aa6:	6962      	ldr	r2, [r4, #20]
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d004      	beq.n	8015ab6 <__swbuf_r+0x6e>
 8015aac:	89a3      	ldrh	r3, [r4, #12]
 8015aae:	07db      	lsls	r3, r3, #31
 8015ab0:	d5e1      	bpl.n	8015a76 <__swbuf_r+0x2e>
 8015ab2:	2e0a      	cmp	r6, #10
 8015ab4:	d1df      	bne.n	8015a76 <__swbuf_r+0x2e>
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	4628      	mov	r0, r5
 8015aba:	f001 fe49 	bl	8017750 <_fflush_r>
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d0d9      	beq.n	8015a76 <__swbuf_r+0x2e>
 8015ac2:	e7d6      	b.n	8015a72 <__swbuf_r+0x2a>

08015ac4 <__swsetup_r>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	4b29      	ldr	r3, [pc, #164]	@ (8015b6c <__swsetup_r+0xa8>)
 8015ac8:	4605      	mov	r5, r0
 8015aca:	460c      	mov	r4, r1
 8015acc:	6818      	ldr	r0, [r3, #0]
 8015ace:	b118      	cbz	r0, 8015ad8 <__swsetup_r+0x14>
 8015ad0:	6a03      	ldr	r3, [r0, #32]
 8015ad2:	b90b      	cbnz	r3, 8015ad8 <__swsetup_r+0x14>
 8015ad4:	f7ff fdb8 	bl	8015648 <__sinit>
 8015ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015adc:	0719      	lsls	r1, r3, #28
 8015ade:	d422      	bmi.n	8015b26 <__swsetup_r+0x62>
 8015ae0:	06da      	lsls	r2, r3, #27
 8015ae2:	d407      	bmi.n	8015af4 <__swsetup_r+0x30>
 8015ae4:	2209      	movs	r2, #9
 8015ae6:	602a      	str	r2, [r5, #0]
 8015ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015aec:	f04f 30ff 	mov.w	r0, #4294967295
 8015af0:	81a3      	strh	r3, [r4, #12]
 8015af2:	e033      	b.n	8015b5c <__swsetup_r+0x98>
 8015af4:	0758      	lsls	r0, r3, #29
 8015af6:	d512      	bpl.n	8015b1e <__swsetup_r+0x5a>
 8015af8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015afa:	b141      	cbz	r1, 8015b0e <__swsetup_r+0x4a>
 8015afc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015b00:	4299      	cmp	r1, r3
 8015b02:	d002      	beq.n	8015b0a <__swsetup_r+0x46>
 8015b04:	4628      	mov	r0, r5
 8015b06:	f000 ffbf 	bl	8016a88 <_free_r>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b0e:	89a3      	ldrh	r3, [r4, #12]
 8015b10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015b14:	81a3      	strh	r3, [r4, #12]
 8015b16:	2300      	movs	r3, #0
 8015b18:	6063      	str	r3, [r4, #4]
 8015b1a:	6923      	ldr	r3, [r4, #16]
 8015b1c:	6023      	str	r3, [r4, #0]
 8015b1e:	89a3      	ldrh	r3, [r4, #12]
 8015b20:	f043 0308 	orr.w	r3, r3, #8
 8015b24:	81a3      	strh	r3, [r4, #12]
 8015b26:	6923      	ldr	r3, [r4, #16]
 8015b28:	b94b      	cbnz	r3, 8015b3e <__swsetup_r+0x7a>
 8015b2a:	89a3      	ldrh	r3, [r4, #12]
 8015b2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b34:	d003      	beq.n	8015b3e <__swsetup_r+0x7a>
 8015b36:	4621      	mov	r1, r4
 8015b38:	4628      	mov	r0, r5
 8015b3a:	f001 fe68 	bl	801780e <__smakebuf_r>
 8015b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b42:	f013 0201 	ands.w	r2, r3, #1
 8015b46:	d00a      	beq.n	8015b5e <__swsetup_r+0x9a>
 8015b48:	2200      	movs	r2, #0
 8015b4a:	60a2      	str	r2, [r4, #8]
 8015b4c:	6962      	ldr	r2, [r4, #20]
 8015b4e:	4252      	negs	r2, r2
 8015b50:	61a2      	str	r2, [r4, #24]
 8015b52:	6922      	ldr	r2, [r4, #16]
 8015b54:	b942      	cbnz	r2, 8015b68 <__swsetup_r+0xa4>
 8015b56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015b5a:	d1c5      	bne.n	8015ae8 <__swsetup_r+0x24>
 8015b5c:	bd38      	pop	{r3, r4, r5, pc}
 8015b5e:	0799      	lsls	r1, r3, #30
 8015b60:	bf58      	it	pl
 8015b62:	6962      	ldrpl	r2, [r4, #20]
 8015b64:	60a2      	str	r2, [r4, #8]
 8015b66:	e7f4      	b.n	8015b52 <__swsetup_r+0x8e>
 8015b68:	2000      	movs	r0, #0
 8015b6a:	e7f7      	b.n	8015b5c <__swsetup_r+0x98>
 8015b6c:	200001b8 	.word	0x200001b8

08015b70 <memset>:
 8015b70:	4402      	add	r2, r0
 8015b72:	4603      	mov	r3, r0
 8015b74:	4293      	cmp	r3, r2
 8015b76:	d100      	bne.n	8015b7a <memset+0xa>
 8015b78:	4770      	bx	lr
 8015b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8015b7e:	e7f9      	b.n	8015b74 <memset+0x4>

08015b80 <strncat>:
 8015b80:	b530      	push	{r4, r5, lr}
 8015b82:	4604      	mov	r4, r0
 8015b84:	7825      	ldrb	r5, [r4, #0]
 8015b86:	4623      	mov	r3, r4
 8015b88:	3401      	adds	r4, #1
 8015b8a:	2d00      	cmp	r5, #0
 8015b8c:	d1fa      	bne.n	8015b84 <strncat+0x4>
 8015b8e:	3a01      	subs	r2, #1
 8015b90:	d304      	bcc.n	8015b9c <strncat+0x1c>
 8015b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b96:	f803 4b01 	strb.w	r4, [r3], #1
 8015b9a:	b904      	cbnz	r4, 8015b9e <strncat+0x1e>
 8015b9c:	bd30      	pop	{r4, r5, pc}
 8015b9e:	2a00      	cmp	r2, #0
 8015ba0:	d1f5      	bne.n	8015b8e <strncat+0xe>
 8015ba2:	701a      	strb	r2, [r3, #0]
 8015ba4:	e7f3      	b.n	8015b8e <strncat+0xe>

08015ba6 <strncpy>:
 8015ba6:	3901      	subs	r1, #1
 8015ba8:	4603      	mov	r3, r0
 8015baa:	b510      	push	{r4, lr}
 8015bac:	b132      	cbz	r2, 8015bbc <strncpy+0x16>
 8015bae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015bb2:	3a01      	subs	r2, #1
 8015bb4:	f803 4b01 	strb.w	r4, [r3], #1
 8015bb8:	2c00      	cmp	r4, #0
 8015bba:	d1f7      	bne.n	8015bac <strncpy+0x6>
 8015bbc:	441a      	add	r2, r3
 8015bbe:	2100      	movs	r1, #0
 8015bc0:	4293      	cmp	r3, r2
 8015bc2:	d100      	bne.n	8015bc6 <strncpy+0x20>
 8015bc4:	bd10      	pop	{r4, pc}
 8015bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8015bca:	e7f9      	b.n	8015bc0 <strncpy+0x1a>

08015bcc <strtok>:
 8015bcc:	4b16      	ldr	r3, [pc, #88]	@ (8015c28 <strtok+0x5c>)
 8015bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd2:	681f      	ldr	r7, [r3, #0]
 8015bd4:	4605      	mov	r5, r0
 8015bd6:	460e      	mov	r6, r1
 8015bd8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8015bda:	b9ec      	cbnz	r4, 8015c18 <strtok+0x4c>
 8015bdc:	2050      	movs	r0, #80	@ 0x50
 8015bde:	f000 ff9d 	bl	8016b1c <malloc>
 8015be2:	4602      	mov	r2, r0
 8015be4:	6478      	str	r0, [r7, #68]	@ 0x44
 8015be6:	b920      	cbnz	r0, 8015bf2 <strtok+0x26>
 8015be8:	4b10      	ldr	r3, [pc, #64]	@ (8015c2c <strtok+0x60>)
 8015bea:	215b      	movs	r1, #91	@ 0x5b
 8015bec:	4810      	ldr	r0, [pc, #64]	@ (8015c30 <strtok+0x64>)
 8015bee:	f000 f8db 	bl	8015da8 <__assert_func>
 8015bf2:	e9c0 4400 	strd	r4, r4, [r0]
 8015bf6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8015bfa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8015bfe:	6184      	str	r4, [r0, #24]
 8015c00:	7704      	strb	r4, [r0, #28]
 8015c02:	6244      	str	r4, [r0, #36]	@ 0x24
 8015c04:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8015c08:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8015c0c:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8015c10:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8015c14:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8015c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015c1a:	4631      	mov	r1, r6
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c24:	f000 b806 	b.w	8015c34 <__strtok_r>
 8015c28:	200001b8 	.word	0x200001b8
 8015c2c:	08018bbd 	.word	0x08018bbd
 8015c30:	08018bd4 	.word	0x08018bd4

08015c34 <__strtok_r>:
 8015c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c36:	4604      	mov	r4, r0
 8015c38:	b908      	cbnz	r0, 8015c3e <__strtok_r+0xa>
 8015c3a:	6814      	ldr	r4, [r2, #0]
 8015c3c:	b144      	cbz	r4, 8015c50 <__strtok_r+0x1c>
 8015c3e:	4620      	mov	r0, r4
 8015c40:	460f      	mov	r7, r1
 8015c42:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015c46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015c4a:	b91e      	cbnz	r6, 8015c54 <__strtok_r+0x20>
 8015c4c:	b965      	cbnz	r5, 8015c68 <__strtok_r+0x34>
 8015c4e:	6015      	str	r5, [r2, #0]
 8015c50:	2000      	movs	r0, #0
 8015c52:	e005      	b.n	8015c60 <__strtok_r+0x2c>
 8015c54:	42b5      	cmp	r5, r6
 8015c56:	d1f6      	bne.n	8015c46 <__strtok_r+0x12>
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d1f0      	bne.n	8015c3e <__strtok_r+0xa>
 8015c5c:	6014      	str	r4, [r2, #0]
 8015c5e:	7003      	strb	r3, [r0, #0]
 8015c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c62:	461c      	mov	r4, r3
 8015c64:	e00c      	b.n	8015c80 <__strtok_r+0x4c>
 8015c66:	b915      	cbnz	r5, 8015c6e <__strtok_r+0x3a>
 8015c68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015c6c:	460e      	mov	r6, r1
 8015c6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015c72:	42ab      	cmp	r3, r5
 8015c74:	d1f7      	bne.n	8015c66 <__strtok_r+0x32>
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d0f3      	beq.n	8015c62 <__strtok_r+0x2e>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015c80:	6014      	str	r4, [r2, #0]
 8015c82:	e7ed      	b.n	8015c60 <__strtok_r+0x2c>

08015c84 <_localeconv_r>:
 8015c84:	4800      	ldr	r0, [pc, #0]	@ (8015c88 <_localeconv_r+0x4>)
 8015c86:	4770      	bx	lr
 8015c88:	200002f8 	.word	0x200002f8

08015c8c <_close_r>:
 8015c8c:	b538      	push	{r3, r4, r5, lr}
 8015c8e:	2300      	movs	r3, #0
 8015c90:	4d05      	ldr	r5, [pc, #20]	@ (8015ca8 <_close_r+0x1c>)
 8015c92:	4604      	mov	r4, r0
 8015c94:	4608      	mov	r0, r1
 8015c96:	602b      	str	r3, [r5, #0]
 8015c98:	f7ef fb9e 	bl	80053d8 <_close>
 8015c9c:	1c43      	adds	r3, r0, #1
 8015c9e:	d102      	bne.n	8015ca6 <_close_r+0x1a>
 8015ca0:	682b      	ldr	r3, [r5, #0]
 8015ca2:	b103      	cbz	r3, 8015ca6 <_close_r+0x1a>
 8015ca4:	6023      	str	r3, [r4, #0]
 8015ca6:	bd38      	pop	{r3, r4, r5, pc}
 8015ca8:	200045a0 	.word	0x200045a0

08015cac <_lseek_r>:
 8015cac:	b538      	push	{r3, r4, r5, lr}
 8015cae:	4604      	mov	r4, r0
 8015cb0:	4d06      	ldr	r5, [pc, #24]	@ (8015ccc <_lseek_r+0x20>)
 8015cb2:	4608      	mov	r0, r1
 8015cb4:	4611      	mov	r1, r2
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	602a      	str	r2, [r5, #0]
 8015cba:	461a      	mov	r2, r3
 8015cbc:	f7ef fbb3 	bl	8005426 <_lseek>
 8015cc0:	1c43      	adds	r3, r0, #1
 8015cc2:	d102      	bne.n	8015cca <_lseek_r+0x1e>
 8015cc4:	682b      	ldr	r3, [r5, #0]
 8015cc6:	b103      	cbz	r3, 8015cca <_lseek_r+0x1e>
 8015cc8:	6023      	str	r3, [r4, #0]
 8015cca:	bd38      	pop	{r3, r4, r5, pc}
 8015ccc:	200045a0 	.word	0x200045a0

08015cd0 <_read_r>:
 8015cd0:	b538      	push	{r3, r4, r5, lr}
 8015cd2:	4604      	mov	r4, r0
 8015cd4:	4d06      	ldr	r5, [pc, #24]	@ (8015cf0 <_read_r+0x20>)
 8015cd6:	4608      	mov	r0, r1
 8015cd8:	4611      	mov	r1, r2
 8015cda:	2200      	movs	r2, #0
 8015cdc:	602a      	str	r2, [r5, #0]
 8015cde:	461a      	mov	r2, r3
 8015ce0:	f7ef fb41 	bl	8005366 <_read>
 8015ce4:	1c43      	adds	r3, r0, #1
 8015ce6:	d102      	bne.n	8015cee <_read_r+0x1e>
 8015ce8:	682b      	ldr	r3, [r5, #0]
 8015cea:	b103      	cbz	r3, 8015cee <_read_r+0x1e>
 8015cec:	6023      	str	r3, [r4, #0]
 8015cee:	bd38      	pop	{r3, r4, r5, pc}
 8015cf0:	200045a0 	.word	0x200045a0

08015cf4 <_write_r>:
 8015cf4:	b538      	push	{r3, r4, r5, lr}
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	4d06      	ldr	r5, [pc, #24]	@ (8015d14 <_write_r+0x20>)
 8015cfa:	4608      	mov	r0, r1
 8015cfc:	4611      	mov	r1, r2
 8015cfe:	2200      	movs	r2, #0
 8015d00:	602a      	str	r2, [r5, #0]
 8015d02:	461a      	mov	r2, r3
 8015d04:	f7ef fb4c 	bl	80053a0 <_write>
 8015d08:	1c43      	adds	r3, r0, #1
 8015d0a:	d102      	bne.n	8015d12 <_write_r+0x1e>
 8015d0c:	682b      	ldr	r3, [r5, #0]
 8015d0e:	b103      	cbz	r3, 8015d12 <_write_r+0x1e>
 8015d10:	6023      	str	r3, [r4, #0]
 8015d12:	bd38      	pop	{r3, r4, r5, pc}
 8015d14:	200045a0 	.word	0x200045a0

08015d18 <__errno>:
 8015d18:	4b01      	ldr	r3, [pc, #4]	@ (8015d20 <__errno+0x8>)
 8015d1a:	6818      	ldr	r0, [r3, #0]
 8015d1c:	4770      	bx	lr
 8015d1e:	bf00      	nop
 8015d20:	200001b8 	.word	0x200001b8

08015d24 <__libc_init_array>:
 8015d24:	b570      	push	{r4, r5, r6, lr}
 8015d26:	4d0d      	ldr	r5, [pc, #52]	@ (8015d5c <__libc_init_array+0x38>)
 8015d28:	2600      	movs	r6, #0
 8015d2a:	4c0d      	ldr	r4, [pc, #52]	@ (8015d60 <__libc_init_array+0x3c>)
 8015d2c:	1b64      	subs	r4, r4, r5
 8015d2e:	10a4      	asrs	r4, r4, #2
 8015d30:	42a6      	cmp	r6, r4
 8015d32:	d109      	bne.n	8015d48 <__libc_init_array+0x24>
 8015d34:	4d0b      	ldr	r5, [pc, #44]	@ (8015d64 <__libc_init_array+0x40>)
 8015d36:	2600      	movs	r6, #0
 8015d38:	4c0b      	ldr	r4, [pc, #44]	@ (8015d68 <__libc_init_array+0x44>)
 8015d3a:	f002 f81b 	bl	8017d74 <_init>
 8015d3e:	1b64      	subs	r4, r4, r5
 8015d40:	10a4      	asrs	r4, r4, #2
 8015d42:	42a6      	cmp	r6, r4
 8015d44:	d105      	bne.n	8015d52 <__libc_init_array+0x2e>
 8015d46:	bd70      	pop	{r4, r5, r6, pc}
 8015d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d4c:	3601      	adds	r6, #1
 8015d4e:	4798      	blx	r3
 8015d50:	e7ee      	b.n	8015d30 <__libc_init_array+0xc>
 8015d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d56:	3601      	adds	r6, #1
 8015d58:	4798      	blx	r3
 8015d5a:	e7f2      	b.n	8015d42 <__libc_init_array+0x1e>
 8015d5c:	08018e5c 	.word	0x08018e5c
 8015d60:	08018e5c 	.word	0x08018e5c
 8015d64:	08018e5c 	.word	0x08018e5c
 8015d68:	08018e60 	.word	0x08018e60

08015d6c <__retarget_lock_init_recursive>:
 8015d6c:	4770      	bx	lr

08015d6e <__retarget_lock_acquire_recursive>:
 8015d6e:	4770      	bx	lr

08015d70 <__retarget_lock_release_recursive>:
 8015d70:	4770      	bx	lr

08015d72 <memchr>:
 8015d72:	b2c9      	uxtb	r1, r1
 8015d74:	4603      	mov	r3, r0
 8015d76:	4402      	add	r2, r0
 8015d78:	b510      	push	{r4, lr}
 8015d7a:	4293      	cmp	r3, r2
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	d101      	bne.n	8015d84 <memchr+0x12>
 8015d80:	2000      	movs	r0, #0
 8015d82:	e003      	b.n	8015d8c <memchr+0x1a>
 8015d84:	7804      	ldrb	r4, [r0, #0]
 8015d86:	3301      	adds	r3, #1
 8015d88:	428c      	cmp	r4, r1
 8015d8a:	d1f6      	bne.n	8015d7a <memchr+0x8>
 8015d8c:	bd10      	pop	{r4, pc}

08015d8e <memcpy>:
 8015d8e:	440a      	add	r2, r1
 8015d90:	1e43      	subs	r3, r0, #1
 8015d92:	4291      	cmp	r1, r2
 8015d94:	d100      	bne.n	8015d98 <memcpy+0xa>
 8015d96:	4770      	bx	lr
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d9e:	4291      	cmp	r1, r2
 8015da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015da4:	d1f9      	bne.n	8015d9a <memcpy+0xc>
 8015da6:	bd10      	pop	{r4, pc}

08015da8 <__assert_func>:
 8015da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015daa:	4614      	mov	r4, r2
 8015dac:	461a      	mov	r2, r3
 8015dae:	4b09      	ldr	r3, [pc, #36]	@ (8015dd4 <__assert_func+0x2c>)
 8015db0:	4605      	mov	r5, r0
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	68d8      	ldr	r0, [r3, #12]
 8015db6:	b954      	cbnz	r4, 8015dce <__assert_func+0x26>
 8015db8:	4b07      	ldr	r3, [pc, #28]	@ (8015dd8 <__assert_func+0x30>)
 8015dba:	461c      	mov	r4, r3
 8015dbc:	9100      	str	r1, [sp, #0]
 8015dbe:	4907      	ldr	r1, [pc, #28]	@ (8015ddc <__assert_func+0x34>)
 8015dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015dc4:	462b      	mov	r3, r5
 8015dc6:	f001 fceb 	bl	80177a0 <fiprintf>
 8015dca:	f001 fddd 	bl	8017988 <abort>
 8015dce:	4b04      	ldr	r3, [pc, #16]	@ (8015de0 <__assert_func+0x38>)
 8015dd0:	e7f4      	b.n	8015dbc <__assert_func+0x14>
 8015dd2:	bf00      	nop
 8015dd4:	200001b8 	.word	0x200001b8
 8015dd8:	08018c69 	.word	0x08018c69
 8015ddc:	08018c3b 	.word	0x08018c3b
 8015de0:	08018c2e 	.word	0x08018c2e

08015de4 <quorem>:
 8015de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de8:	6903      	ldr	r3, [r0, #16]
 8015dea:	4607      	mov	r7, r0
 8015dec:	690c      	ldr	r4, [r1, #16]
 8015dee:	42a3      	cmp	r3, r4
 8015df0:	f2c0 8083 	blt.w	8015efa <quorem+0x116>
 8015df4:	3c01      	subs	r4, #1
 8015df6:	f100 0514 	add.w	r5, r0, #20
 8015dfa:	f101 0814 	add.w	r8, r1, #20
 8015dfe:	00a3      	lsls	r3, r4, #2
 8015e00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015e0e:	9301      	str	r3, [sp, #4]
 8015e10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015e14:	3301      	adds	r3, #1
 8015e16:	429a      	cmp	r2, r3
 8015e18:	fbb2 f6f3 	udiv	r6, r2, r3
 8015e1c:	d331      	bcc.n	8015e82 <quorem+0x9e>
 8015e1e:	f04f 0a00 	mov.w	sl, #0
 8015e22:	46c4      	mov	ip, r8
 8015e24:	46ae      	mov	lr, r5
 8015e26:	46d3      	mov	fp, sl
 8015e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015e2c:	b298      	uxth	r0, r3
 8015e2e:	45e1      	cmp	r9, ip
 8015e30:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8015e34:	fb06 a000 	mla	r0, r6, r0, sl
 8015e38:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8015e3c:	b280      	uxth	r0, r0
 8015e3e:	fb06 2303 	mla	r3, r6, r3, r2
 8015e42:	f8de 2000 	ldr.w	r2, [lr]
 8015e46:	b292      	uxth	r2, r2
 8015e48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e4c:	eba2 0200 	sub.w	r2, r2, r0
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	f8de 0000 	ldr.w	r0, [lr]
 8015e56:	445a      	add	r2, fp
 8015e58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015e5c:	b292      	uxth	r2, r2
 8015e5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015e62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015e66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015e6a:	f84e 2b04 	str.w	r2, [lr], #4
 8015e6e:	d2db      	bcs.n	8015e28 <quorem+0x44>
 8015e70:	9b00      	ldr	r3, [sp, #0]
 8015e72:	58eb      	ldr	r3, [r5, r3]
 8015e74:	b92b      	cbnz	r3, 8015e82 <quorem+0x9e>
 8015e76:	9b01      	ldr	r3, [sp, #4]
 8015e78:	3b04      	subs	r3, #4
 8015e7a:	429d      	cmp	r5, r3
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	d330      	bcc.n	8015ee2 <quorem+0xfe>
 8015e80:	613c      	str	r4, [r7, #16]
 8015e82:	4638      	mov	r0, r7
 8015e84:	f001 f97c 	bl	8017180 <__mcmp>
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	db26      	blt.n	8015eda <quorem+0xf6>
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	2000      	movs	r0, #0
 8015e90:	f858 2b04 	ldr.w	r2, [r8], #4
 8015e94:	f8d1 c000 	ldr.w	ip, [r1]
 8015e98:	fa1f fe82 	uxth.w	lr, r2
 8015e9c:	45c1      	cmp	r9, r8
 8015e9e:	fa1f f38c 	uxth.w	r3, ip
 8015ea2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8015ea6:	eba3 030e 	sub.w	r3, r3, lr
 8015eaa:	4403      	add	r3, r0
 8015eac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015eba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015ebe:	f841 3b04 	str.w	r3, [r1], #4
 8015ec2:	d2e5      	bcs.n	8015e90 <quorem+0xac>
 8015ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015ecc:	b922      	cbnz	r2, 8015ed8 <quorem+0xf4>
 8015ece:	3b04      	subs	r3, #4
 8015ed0:	429d      	cmp	r5, r3
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	d30b      	bcc.n	8015eee <quorem+0x10a>
 8015ed6:	613c      	str	r4, [r7, #16]
 8015ed8:	3601      	adds	r6, #1
 8015eda:	4630      	mov	r0, r6
 8015edc:	b003      	add	sp, #12
 8015ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ee2:	6812      	ldr	r2, [r2, #0]
 8015ee4:	3b04      	subs	r3, #4
 8015ee6:	2a00      	cmp	r2, #0
 8015ee8:	d1ca      	bne.n	8015e80 <quorem+0x9c>
 8015eea:	3c01      	subs	r4, #1
 8015eec:	e7c5      	b.n	8015e7a <quorem+0x96>
 8015eee:	6812      	ldr	r2, [r2, #0]
 8015ef0:	3b04      	subs	r3, #4
 8015ef2:	2a00      	cmp	r2, #0
 8015ef4:	d1ef      	bne.n	8015ed6 <quorem+0xf2>
 8015ef6:	3c01      	subs	r4, #1
 8015ef8:	e7ea      	b.n	8015ed0 <quorem+0xec>
 8015efa:	2000      	movs	r0, #0
 8015efc:	e7ee      	b.n	8015edc <quorem+0xf8>
	...

08015f00 <_dtoa_r>:
 8015f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f04:	69c7      	ldr	r7, [r0, #28]
 8015f06:	b099      	sub	sp, #100	@ 0x64
 8015f08:	4683      	mov	fp, r0
 8015f0a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8015f0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8015f0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015f10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015f12:	ec55 4b10 	vmov	r4, r5, d0
 8015f16:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015f1a:	b97f      	cbnz	r7, 8015f3c <_dtoa_r+0x3c>
 8015f1c:	2010      	movs	r0, #16
 8015f1e:	f000 fdfd 	bl	8016b1c <malloc>
 8015f22:	4602      	mov	r2, r0
 8015f24:	f8cb 001c 	str.w	r0, [fp, #28]
 8015f28:	b920      	cbnz	r0, 8015f34 <_dtoa_r+0x34>
 8015f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80161c8 <_dtoa_r+0x2c8>)
 8015f2c:	21ef      	movs	r1, #239	@ 0xef
 8015f2e:	48a7      	ldr	r0, [pc, #668]	@ (80161cc <_dtoa_r+0x2cc>)
 8015f30:	f7ff ff3a 	bl	8015da8 <__assert_func>
 8015f34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015f38:	6007      	str	r7, [r0, #0]
 8015f3a:	60c7      	str	r7, [r0, #12]
 8015f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015f40:	6819      	ldr	r1, [r3, #0]
 8015f42:	b159      	cbz	r1, 8015f5c <_dtoa_r+0x5c>
 8015f44:	685a      	ldr	r2, [r3, #4]
 8015f46:	2301      	movs	r3, #1
 8015f48:	4658      	mov	r0, fp
 8015f4a:	4093      	lsls	r3, r2
 8015f4c:	604a      	str	r2, [r1, #4]
 8015f4e:	608b      	str	r3, [r1, #8]
 8015f50:	f000 feda 	bl	8016d08 <_Bfree>
 8015f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	601a      	str	r2, [r3, #0]
 8015f5c:	1e2b      	subs	r3, r5, #0
 8015f5e:	bfb7      	itett	lt
 8015f60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015f64:	2300      	movge	r3, #0
 8015f66:	2201      	movlt	r2, #1
 8015f68:	9303      	strlt	r3, [sp, #12]
 8015f6a:	bfa8      	it	ge
 8015f6c:	6033      	strge	r3, [r6, #0]
 8015f6e:	9f03      	ldr	r7, [sp, #12]
 8015f70:	4b97      	ldr	r3, [pc, #604]	@ (80161d0 <_dtoa_r+0x2d0>)
 8015f72:	bfb8      	it	lt
 8015f74:	6032      	strlt	r2, [r6, #0]
 8015f76:	43bb      	bics	r3, r7
 8015f78:	d112      	bne.n	8015fa0 <_dtoa_r+0xa0>
 8015f7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015f7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015f80:	6013      	str	r3, [r2, #0]
 8015f82:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015f86:	4323      	orrs	r3, r4
 8015f88:	f000 854c 	beq.w	8016a24 <_dtoa_r+0xb24>
 8015f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015f8e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80161e4 <_dtoa_r+0x2e4>
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	f000 854e 	beq.w	8016a34 <_dtoa_r+0xb34>
 8015f98:	f10a 0303 	add.w	r3, sl, #3
 8015f9c:	f000 bd48 	b.w	8016a30 <_dtoa_r+0xb30>
 8015fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	ec51 0b17 	vmov	r0, r1, d7
 8015fac:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015fb0:	f7ea fdb8 	bl	8000b24 <__aeabi_dcmpeq>
 8015fb4:	4680      	mov	r8, r0
 8015fb6:	b158      	cbz	r0, 8015fd0 <_dtoa_r+0xd0>
 8015fb8:	2301      	movs	r3, #1
 8015fba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015fbc:	6013      	str	r3, [r2, #0]
 8015fbe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015fc0:	b113      	cbz	r3, 8015fc8 <_dtoa_r+0xc8>
 8015fc2:	4b84      	ldr	r3, [pc, #528]	@ (80161d4 <_dtoa_r+0x2d4>)
 8015fc4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015fc6:	6013      	str	r3, [r2, #0]
 8015fc8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80161e8 <_dtoa_r+0x2e8>
 8015fcc:	f000 bd32 	b.w	8016a34 <_dtoa_r+0xb34>
 8015fd0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015fd4:	aa16      	add	r2, sp, #88	@ 0x58
 8015fd6:	a917      	add	r1, sp, #92	@ 0x5c
 8015fd8:	4658      	mov	r0, fp
 8015fda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015fde:	f001 f983 	bl	80172e8 <__d2b>
 8015fe2:	4681      	mov	r9, r0
 8015fe4:	2e00      	cmp	r6, #0
 8015fe6:	d075      	beq.n	80160d4 <_dtoa_r+0x1d4>
 8015fe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fea:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015fee:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ff6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015ffe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016002:	4619      	mov	r1, r3
 8016004:	2200      	movs	r2, #0
 8016006:	4b74      	ldr	r3, [pc, #464]	@ (80161d8 <_dtoa_r+0x2d8>)
 8016008:	f7ea f96c 	bl	80002e4 <__aeabi_dsub>
 801600c:	a368      	add	r3, pc, #416	@ (adr r3, 80161b0 <_dtoa_r+0x2b0>)
 801600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016012:	f7ea fb1f 	bl	8000654 <__aeabi_dmul>
 8016016:	a368      	add	r3, pc, #416	@ (adr r3, 80161b8 <_dtoa_r+0x2b8>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea f964 	bl	80002e8 <__adddf3>
 8016020:	4604      	mov	r4, r0
 8016022:	460d      	mov	r5, r1
 8016024:	4630      	mov	r0, r6
 8016026:	f7ea faab 	bl	8000580 <__aeabi_i2d>
 801602a:	a365      	add	r3, pc, #404	@ (adr r3, 80161c0 <_dtoa_r+0x2c0>)
 801602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016030:	f7ea fb10 	bl	8000654 <__aeabi_dmul>
 8016034:	4602      	mov	r2, r0
 8016036:	460b      	mov	r3, r1
 8016038:	4620      	mov	r0, r4
 801603a:	4629      	mov	r1, r5
 801603c:	f7ea f954 	bl	80002e8 <__adddf3>
 8016040:	4604      	mov	r4, r0
 8016042:	460d      	mov	r5, r1
 8016044:	f7ea fdb6 	bl	8000bb4 <__aeabi_d2iz>
 8016048:	2200      	movs	r2, #0
 801604a:	4607      	mov	r7, r0
 801604c:	2300      	movs	r3, #0
 801604e:	4620      	mov	r0, r4
 8016050:	4629      	mov	r1, r5
 8016052:	f7ea fd71 	bl	8000b38 <__aeabi_dcmplt>
 8016056:	b140      	cbz	r0, 801606a <_dtoa_r+0x16a>
 8016058:	4638      	mov	r0, r7
 801605a:	f7ea fa91 	bl	8000580 <__aeabi_i2d>
 801605e:	4622      	mov	r2, r4
 8016060:	462b      	mov	r3, r5
 8016062:	f7ea fd5f 	bl	8000b24 <__aeabi_dcmpeq>
 8016066:	b900      	cbnz	r0, 801606a <_dtoa_r+0x16a>
 8016068:	3f01      	subs	r7, #1
 801606a:	2f16      	cmp	r7, #22
 801606c:	d851      	bhi.n	8016112 <_dtoa_r+0x212>
 801606e:	4b5b      	ldr	r3, [pc, #364]	@ (80161dc <_dtoa_r+0x2dc>)
 8016070:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801607c:	f7ea fd5c 	bl	8000b38 <__aeabi_dcmplt>
 8016080:	2800      	cmp	r0, #0
 8016082:	d048      	beq.n	8016116 <_dtoa_r+0x216>
 8016084:	3f01      	subs	r7, #1
 8016086:	2300      	movs	r3, #0
 8016088:	9312      	str	r3, [sp, #72]	@ 0x48
 801608a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801608c:	1b9b      	subs	r3, r3, r6
 801608e:	1e5a      	subs	r2, r3, #1
 8016090:	bf46      	itte	mi
 8016092:	f1c3 0801 	rsbmi	r8, r3, #1
 8016096:	2300      	movmi	r3, #0
 8016098:	f04f 0800 	movpl.w	r8, #0
 801609c:	9208      	str	r2, [sp, #32]
 801609e:	bf48      	it	mi
 80160a0:	9308      	strmi	r3, [sp, #32]
 80160a2:	2f00      	cmp	r7, #0
 80160a4:	db39      	blt.n	801611a <_dtoa_r+0x21a>
 80160a6:	9b08      	ldr	r3, [sp, #32]
 80160a8:	970f      	str	r7, [sp, #60]	@ 0x3c
 80160aa:	443b      	add	r3, r7
 80160ac:	9308      	str	r3, [sp, #32]
 80160ae:	2300      	movs	r3, #0
 80160b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80160b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160b4:	2b09      	cmp	r3, #9
 80160b6:	d864      	bhi.n	8016182 <_dtoa_r+0x282>
 80160b8:	2b05      	cmp	r3, #5
 80160ba:	bfc5      	ittet	gt
 80160bc:	3b04      	subgt	r3, #4
 80160be:	2400      	movgt	r4, #0
 80160c0:	2401      	movle	r4, #1
 80160c2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80160c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160c6:	3b02      	subs	r3, #2
 80160c8:	2b03      	cmp	r3, #3
 80160ca:	d865      	bhi.n	8016198 <_dtoa_r+0x298>
 80160cc:	e8df f003 	tbb	[pc, r3]
 80160d0:	5737392c 	.word	0x5737392c
 80160d4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80160d8:	441e      	add	r6, r3
 80160da:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80160de:	2b20      	cmp	r3, #32
 80160e0:	bfc9      	itett	gt
 80160e2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80160e6:	f1c3 0320 	rsble	r3, r3, #32
 80160ea:	409f      	lslgt	r7, r3
 80160ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80160f0:	bfd8      	it	le
 80160f2:	fa04 f003 	lslle.w	r0, r4, r3
 80160f6:	f106 36ff 	add.w	r6, r6, #4294967295
 80160fa:	bfc4      	itt	gt
 80160fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8016100:	ea47 0003 	orrgt.w	r0, r7, r3
 8016104:	f7ea fa2c 	bl	8000560 <__aeabi_ui2d>
 8016108:	2201      	movs	r2, #1
 801610a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801610e:	9214      	str	r2, [sp, #80]	@ 0x50
 8016110:	e777      	b.n	8016002 <_dtoa_r+0x102>
 8016112:	2301      	movs	r3, #1
 8016114:	e7b8      	b.n	8016088 <_dtoa_r+0x188>
 8016116:	9012      	str	r0, [sp, #72]	@ 0x48
 8016118:	e7b7      	b.n	801608a <_dtoa_r+0x18a>
 801611a:	427b      	negs	r3, r7
 801611c:	eba8 0807 	sub.w	r8, r8, r7
 8016120:	930a      	str	r3, [sp, #40]	@ 0x28
 8016122:	2300      	movs	r3, #0
 8016124:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016126:	e7c4      	b.n	80160b2 <_dtoa_r+0x1b2>
 8016128:	2300      	movs	r3, #0
 801612a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801612c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801612e:	2b00      	cmp	r3, #0
 8016130:	dc35      	bgt.n	801619e <_dtoa_r+0x29e>
 8016132:	2301      	movs	r3, #1
 8016134:	461a      	mov	r2, r3
 8016136:	9300      	str	r3, [sp, #0]
 8016138:	9307      	str	r3, [sp, #28]
 801613a:	920e      	str	r2, [sp, #56]	@ 0x38
 801613c:	e00b      	b.n	8016156 <_dtoa_r+0x256>
 801613e:	2301      	movs	r3, #1
 8016140:	e7f3      	b.n	801612a <_dtoa_r+0x22a>
 8016142:	2300      	movs	r3, #0
 8016144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016148:	18fb      	adds	r3, r7, r3
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	3301      	adds	r3, #1
 801614e:	2b01      	cmp	r3, #1
 8016150:	9307      	str	r3, [sp, #28]
 8016152:	bfb8      	it	lt
 8016154:	2301      	movlt	r3, #1
 8016156:	f8db 001c 	ldr.w	r0, [fp, #28]
 801615a:	2100      	movs	r1, #0
 801615c:	2204      	movs	r2, #4
 801615e:	f102 0514 	add.w	r5, r2, #20
 8016162:	429d      	cmp	r5, r3
 8016164:	d91f      	bls.n	80161a6 <_dtoa_r+0x2a6>
 8016166:	6041      	str	r1, [r0, #4]
 8016168:	4658      	mov	r0, fp
 801616a:	f000 fd8d 	bl	8016c88 <_Balloc>
 801616e:	4682      	mov	sl, r0
 8016170:	2800      	cmp	r0, #0
 8016172:	d13b      	bne.n	80161ec <_dtoa_r+0x2ec>
 8016174:	4b1a      	ldr	r3, [pc, #104]	@ (80161e0 <_dtoa_r+0x2e0>)
 8016176:	4602      	mov	r2, r0
 8016178:	f240 11af 	movw	r1, #431	@ 0x1af
 801617c:	e6d7      	b.n	8015f2e <_dtoa_r+0x2e>
 801617e:	2301      	movs	r3, #1
 8016180:	e7e0      	b.n	8016144 <_dtoa_r+0x244>
 8016182:	2401      	movs	r4, #1
 8016184:	2300      	movs	r3, #0
 8016186:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016188:	9309      	str	r3, [sp, #36]	@ 0x24
 801618a:	f04f 33ff 	mov.w	r3, #4294967295
 801618e:	2200      	movs	r2, #0
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	9307      	str	r3, [sp, #28]
 8016194:	2312      	movs	r3, #18
 8016196:	e7d0      	b.n	801613a <_dtoa_r+0x23a>
 8016198:	2301      	movs	r3, #1
 801619a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801619c:	e7f5      	b.n	801618a <_dtoa_r+0x28a>
 801619e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	9307      	str	r3, [sp, #28]
 80161a4:	e7d7      	b.n	8016156 <_dtoa_r+0x256>
 80161a6:	3101      	adds	r1, #1
 80161a8:	0052      	lsls	r2, r2, #1
 80161aa:	e7d8      	b.n	801615e <_dtoa_r+0x25e>
 80161ac:	f3af 8000 	nop.w
 80161b0:	636f4361 	.word	0x636f4361
 80161b4:	3fd287a7 	.word	0x3fd287a7
 80161b8:	8b60c8b3 	.word	0x8b60c8b3
 80161bc:	3fc68a28 	.word	0x3fc68a28
 80161c0:	509f79fb 	.word	0x509f79fb
 80161c4:	3fd34413 	.word	0x3fd34413
 80161c8:	08018bbd 	.word	0x08018bbd
 80161cc:	08018c77 	.word	0x08018c77
 80161d0:	7ff00000 	.word	0x7ff00000
 80161d4:	08018b9a 	.word	0x08018b9a
 80161d8:	3ff80000 	.word	0x3ff80000
 80161dc:	08018d70 	.word	0x08018d70
 80161e0:	08018ccf 	.word	0x08018ccf
 80161e4:	08018c73 	.word	0x08018c73
 80161e8:	08018b99 	.word	0x08018b99
 80161ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80161f0:	6018      	str	r0, [r3, #0]
 80161f2:	9b07      	ldr	r3, [sp, #28]
 80161f4:	2b0e      	cmp	r3, #14
 80161f6:	f200 80a4 	bhi.w	8016342 <_dtoa_r+0x442>
 80161fa:	2c00      	cmp	r4, #0
 80161fc:	f000 80a1 	beq.w	8016342 <_dtoa_r+0x442>
 8016200:	2f00      	cmp	r7, #0
 8016202:	dd33      	ble.n	801626c <_dtoa_r+0x36c>
 8016204:	f007 020f 	and.w	r2, r7, #15
 8016208:	4bac      	ldr	r3, [pc, #688]	@ (80164bc <_dtoa_r+0x5bc>)
 801620a:	05f8      	lsls	r0, r7, #23
 801620c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8016210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016214:	ed93 7b00 	vldr	d7, [r3]
 8016218:	ed8d 7b04 	vstr	d7, [sp, #16]
 801621c:	d516      	bpl.n	801624c <_dtoa_r+0x34c>
 801621e:	4ba8      	ldr	r3, [pc, #672]	@ (80164c0 <_dtoa_r+0x5c0>)
 8016220:	f004 040f 	and.w	r4, r4, #15
 8016224:	2603      	movs	r6, #3
 8016226:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801622a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801622e:	f7ea fb3b 	bl	80008a8 <__aeabi_ddiv>
 8016232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016236:	4da2      	ldr	r5, [pc, #648]	@ (80164c0 <_dtoa_r+0x5c0>)
 8016238:	b954      	cbnz	r4, 8016250 <_dtoa_r+0x350>
 801623a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801623e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016242:	f7ea fb31 	bl	80008a8 <__aeabi_ddiv>
 8016246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801624a:	e028      	b.n	801629e <_dtoa_r+0x39e>
 801624c:	2602      	movs	r6, #2
 801624e:	e7f2      	b.n	8016236 <_dtoa_r+0x336>
 8016250:	07e1      	lsls	r1, r4, #31
 8016252:	d508      	bpl.n	8016266 <_dtoa_r+0x366>
 8016254:	3601      	adds	r6, #1
 8016256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801625a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801625e:	f7ea f9f9 	bl	8000654 <__aeabi_dmul>
 8016262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016266:	1064      	asrs	r4, r4, #1
 8016268:	3508      	adds	r5, #8
 801626a:	e7e5      	b.n	8016238 <_dtoa_r+0x338>
 801626c:	f000 80d2 	beq.w	8016414 <_dtoa_r+0x514>
 8016270:	427c      	negs	r4, r7
 8016272:	4b92      	ldr	r3, [pc, #584]	@ (80164bc <_dtoa_r+0x5bc>)
 8016274:	4d92      	ldr	r5, [pc, #584]	@ (80164c0 <_dtoa_r+0x5c0>)
 8016276:	2602      	movs	r6, #2
 8016278:	f004 020f 	and.w	r2, r4, #15
 801627c:	1124      	asrs	r4, r4, #4
 801627e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628a:	f7ea f9e3 	bl	8000654 <__aeabi_dmul>
 801628e:	2300      	movs	r3, #0
 8016290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016294:	2c00      	cmp	r4, #0
 8016296:	f040 80b2 	bne.w	80163fe <_dtoa_r+0x4fe>
 801629a:	2b00      	cmp	r3, #0
 801629c:	d1d3      	bne.n	8016246 <_dtoa_r+0x346>
 801629e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80162a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	f000 80b7 	beq.w	8016418 <_dtoa_r+0x518>
 80162aa:	2200      	movs	r2, #0
 80162ac:	4b85      	ldr	r3, [pc, #532]	@ (80164c4 <_dtoa_r+0x5c4>)
 80162ae:	4620      	mov	r0, r4
 80162b0:	4629      	mov	r1, r5
 80162b2:	f7ea fc41 	bl	8000b38 <__aeabi_dcmplt>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	f000 80ae 	beq.w	8016418 <_dtoa_r+0x518>
 80162bc:	9b07      	ldr	r3, [sp, #28]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f000 80aa 	beq.w	8016418 <_dtoa_r+0x518>
 80162c4:	9b00      	ldr	r3, [sp, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	dd37      	ble.n	801633a <_dtoa_r+0x43a>
 80162ca:	1e7b      	subs	r3, r7, #1
 80162cc:	4620      	mov	r0, r4
 80162ce:	2200      	movs	r2, #0
 80162d0:	4629      	mov	r1, r5
 80162d2:	9304      	str	r3, [sp, #16]
 80162d4:	3601      	adds	r6, #1
 80162d6:	4b7c      	ldr	r3, [pc, #496]	@ (80164c8 <_dtoa_r+0x5c8>)
 80162d8:	f7ea f9bc 	bl	8000654 <__aeabi_dmul>
 80162dc:	9c00      	ldr	r4, [sp, #0]
 80162de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162e2:	4630      	mov	r0, r6
 80162e4:	f7ea f94c 	bl	8000580 <__aeabi_i2d>
 80162e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80162ec:	f7ea f9b2 	bl	8000654 <__aeabi_dmul>
 80162f0:	2200      	movs	r2, #0
 80162f2:	4b76      	ldr	r3, [pc, #472]	@ (80164cc <_dtoa_r+0x5cc>)
 80162f4:	f7e9 fff8 	bl	80002e8 <__adddf3>
 80162f8:	4605      	mov	r5, r0
 80162fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80162fe:	2c00      	cmp	r4, #0
 8016300:	f040 808d 	bne.w	801641e <_dtoa_r+0x51e>
 8016304:	2200      	movs	r2, #0
 8016306:	4b72      	ldr	r3, [pc, #456]	@ (80164d0 <_dtoa_r+0x5d0>)
 8016308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801630c:	f7e9 ffea 	bl	80002e4 <__aeabi_dsub>
 8016310:	4602      	mov	r2, r0
 8016312:	460b      	mov	r3, r1
 8016314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016318:	462a      	mov	r2, r5
 801631a:	4633      	mov	r3, r6
 801631c:	f7ea fc2a 	bl	8000b74 <__aeabi_dcmpgt>
 8016320:	2800      	cmp	r0, #0
 8016322:	f040 828b 	bne.w	801683c <_dtoa_r+0x93c>
 8016326:	462a      	mov	r2, r5
 8016328:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801632c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016330:	f7ea fc02 	bl	8000b38 <__aeabi_dcmplt>
 8016334:	2800      	cmp	r0, #0
 8016336:	f040 8128 	bne.w	801658a <_dtoa_r+0x68a>
 801633a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801633e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016344:	2b00      	cmp	r3, #0
 8016346:	f2c0 815a 	blt.w	80165fe <_dtoa_r+0x6fe>
 801634a:	2f0e      	cmp	r7, #14
 801634c:	f300 8157 	bgt.w	80165fe <_dtoa_r+0x6fe>
 8016350:	4b5a      	ldr	r3, [pc, #360]	@ (80164bc <_dtoa_r+0x5bc>)
 8016352:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016356:	ed93 7b00 	vldr	d7, [r3]
 801635a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801635c:	2b00      	cmp	r3, #0
 801635e:	ed8d 7b00 	vstr	d7, [sp]
 8016362:	da03      	bge.n	801636c <_dtoa_r+0x46c>
 8016364:	9b07      	ldr	r3, [sp, #28]
 8016366:	2b00      	cmp	r3, #0
 8016368:	f340 8101 	ble.w	801656e <_dtoa_r+0x66e>
 801636c:	4656      	mov	r6, sl
 801636e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016376:	4620      	mov	r0, r4
 8016378:	4629      	mov	r1, r5
 801637a:	f7ea fa95 	bl	80008a8 <__aeabi_ddiv>
 801637e:	f7ea fc19 	bl	8000bb4 <__aeabi_d2iz>
 8016382:	4680      	mov	r8, r0
 8016384:	f7ea f8fc 	bl	8000580 <__aeabi_i2d>
 8016388:	e9dd 2300 	ldrd	r2, r3, [sp]
 801638c:	f7ea f962 	bl	8000654 <__aeabi_dmul>
 8016390:	4602      	mov	r2, r0
 8016392:	4620      	mov	r0, r4
 8016394:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8016398:	460b      	mov	r3, r1
 801639a:	4629      	mov	r1, r5
 801639c:	f7e9 ffa2 	bl	80002e4 <__aeabi_dsub>
 80163a0:	9d07      	ldr	r5, [sp, #28]
 80163a2:	f806 4b01 	strb.w	r4, [r6], #1
 80163a6:	eba6 040a 	sub.w	r4, r6, sl
 80163aa:	4602      	mov	r2, r0
 80163ac:	460b      	mov	r3, r1
 80163ae:	42a5      	cmp	r5, r4
 80163b0:	f040 8117 	bne.w	80165e2 <_dtoa_r+0x6e2>
 80163b4:	f7e9 ff98 	bl	80002e8 <__adddf3>
 80163b8:	4604      	mov	r4, r0
 80163ba:	460d      	mov	r5, r1
 80163bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163c0:	f7ea fbd8 	bl	8000b74 <__aeabi_dcmpgt>
 80163c4:	2800      	cmp	r0, #0
 80163c6:	f040 80f9 	bne.w	80165bc <_dtoa_r+0x6bc>
 80163ca:	4620      	mov	r0, r4
 80163cc:	4629      	mov	r1, r5
 80163ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163d2:	f7ea fba7 	bl	8000b24 <__aeabi_dcmpeq>
 80163d6:	b118      	cbz	r0, 80163e0 <_dtoa_r+0x4e0>
 80163d8:	f018 0f01 	tst.w	r8, #1
 80163dc:	f040 80ee 	bne.w	80165bc <_dtoa_r+0x6bc>
 80163e0:	4649      	mov	r1, r9
 80163e2:	4658      	mov	r0, fp
 80163e4:	f000 fc90 	bl	8016d08 <_Bfree>
 80163e8:	2300      	movs	r3, #0
 80163ea:	3701      	adds	r7, #1
 80163ec:	7033      	strb	r3, [r6, #0]
 80163ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80163f0:	601f      	str	r7, [r3, #0]
 80163f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	f000 831d 	beq.w	8016a34 <_dtoa_r+0xb34>
 80163fa:	601e      	str	r6, [r3, #0]
 80163fc:	e31a      	b.n	8016a34 <_dtoa_r+0xb34>
 80163fe:	07e2      	lsls	r2, r4, #31
 8016400:	d505      	bpl.n	801640e <_dtoa_r+0x50e>
 8016402:	3601      	adds	r6, #1
 8016404:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016408:	f7ea f924 	bl	8000654 <__aeabi_dmul>
 801640c:	2301      	movs	r3, #1
 801640e:	1064      	asrs	r4, r4, #1
 8016410:	3508      	adds	r5, #8
 8016412:	e73f      	b.n	8016294 <_dtoa_r+0x394>
 8016414:	2602      	movs	r6, #2
 8016416:	e742      	b.n	801629e <_dtoa_r+0x39e>
 8016418:	9c07      	ldr	r4, [sp, #28]
 801641a:	9704      	str	r7, [sp, #16]
 801641c:	e761      	b.n	80162e2 <_dtoa_r+0x3e2>
 801641e:	4b27      	ldr	r3, [pc, #156]	@ (80164bc <_dtoa_r+0x5bc>)
 8016420:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016426:	4454      	add	r4, sl
 8016428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801642c:	2900      	cmp	r1, #0
 801642e:	d053      	beq.n	80164d8 <_dtoa_r+0x5d8>
 8016430:	2000      	movs	r0, #0
 8016432:	4928      	ldr	r1, [pc, #160]	@ (80164d4 <_dtoa_r+0x5d4>)
 8016434:	f7ea fa38 	bl	80008a8 <__aeabi_ddiv>
 8016438:	4633      	mov	r3, r6
 801643a:	4656      	mov	r6, sl
 801643c:	462a      	mov	r2, r5
 801643e:	f7e9 ff51 	bl	80002e4 <__aeabi_dsub>
 8016442:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8016446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801644a:	f7ea fbb3 	bl	8000bb4 <__aeabi_d2iz>
 801644e:	4605      	mov	r5, r0
 8016450:	f7ea f896 	bl	8000580 <__aeabi_i2d>
 8016454:	4602      	mov	r2, r0
 8016456:	460b      	mov	r3, r1
 8016458:	3530      	adds	r5, #48	@ 0x30
 801645a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801645e:	f7e9 ff41 	bl	80002e4 <__aeabi_dsub>
 8016462:	4602      	mov	r2, r0
 8016464:	460b      	mov	r3, r1
 8016466:	f806 5b01 	strb.w	r5, [r6], #1
 801646a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801646e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8016472:	f7ea fb61 	bl	8000b38 <__aeabi_dcmplt>
 8016476:	2800      	cmp	r0, #0
 8016478:	d171      	bne.n	801655e <_dtoa_r+0x65e>
 801647a:	2000      	movs	r0, #0
 801647c:	4911      	ldr	r1, [pc, #68]	@ (80164c4 <_dtoa_r+0x5c4>)
 801647e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016482:	f7e9 ff2f 	bl	80002e4 <__aeabi_dsub>
 8016486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801648a:	f7ea fb55 	bl	8000b38 <__aeabi_dcmplt>
 801648e:	2800      	cmp	r0, #0
 8016490:	f040 8095 	bne.w	80165be <_dtoa_r+0x6be>
 8016494:	42a6      	cmp	r6, r4
 8016496:	f43f af50 	beq.w	801633a <_dtoa_r+0x43a>
 801649a:	2200      	movs	r2, #0
 801649c:	4b0a      	ldr	r3, [pc, #40]	@ (80164c8 <_dtoa_r+0x5c8>)
 801649e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80164a2:	f7ea f8d7 	bl	8000654 <__aeabi_dmul>
 80164a6:	2200      	movs	r2, #0
 80164a8:	4b07      	ldr	r3, [pc, #28]	@ (80164c8 <_dtoa_r+0x5c8>)
 80164aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80164ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80164b2:	f7ea f8cf 	bl	8000654 <__aeabi_dmul>
 80164b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164ba:	e7c4      	b.n	8016446 <_dtoa_r+0x546>
 80164bc:	08018d70 	.word	0x08018d70
 80164c0:	08018d48 	.word	0x08018d48
 80164c4:	3ff00000 	.word	0x3ff00000
 80164c8:	40240000 	.word	0x40240000
 80164cc:	401c0000 	.word	0x401c0000
 80164d0:	40140000 	.word	0x40140000
 80164d4:	3fe00000 	.word	0x3fe00000
 80164d8:	4631      	mov	r1, r6
 80164da:	4656      	mov	r6, sl
 80164dc:	4628      	mov	r0, r5
 80164de:	f7ea f8b9 	bl	8000654 <__aeabi_dmul>
 80164e2:	9415      	str	r4, [sp, #84]	@ 0x54
 80164e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80164e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80164ec:	f7ea fb62 	bl	8000bb4 <__aeabi_d2iz>
 80164f0:	4605      	mov	r5, r0
 80164f2:	f7ea f845 	bl	8000580 <__aeabi_i2d>
 80164f6:	4602      	mov	r2, r0
 80164f8:	3530      	adds	r5, #48	@ 0x30
 80164fa:	460b      	mov	r3, r1
 80164fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016500:	f7e9 fef0 	bl	80002e4 <__aeabi_dsub>
 8016504:	f806 5b01 	strb.w	r5, [r6], #1
 8016508:	4602      	mov	r2, r0
 801650a:	460b      	mov	r3, r1
 801650c:	42a6      	cmp	r6, r4
 801650e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016512:	f04f 0200 	mov.w	r2, #0
 8016516:	d124      	bne.n	8016562 <_dtoa_r+0x662>
 8016518:	4bac      	ldr	r3, [pc, #688]	@ (80167cc <_dtoa_r+0x8cc>)
 801651a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801651e:	f7e9 fee3 	bl	80002e8 <__adddf3>
 8016522:	4602      	mov	r2, r0
 8016524:	460b      	mov	r3, r1
 8016526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801652a:	f7ea fb23 	bl	8000b74 <__aeabi_dcmpgt>
 801652e:	2800      	cmp	r0, #0
 8016530:	d145      	bne.n	80165be <_dtoa_r+0x6be>
 8016532:	2000      	movs	r0, #0
 8016534:	49a5      	ldr	r1, [pc, #660]	@ (80167cc <_dtoa_r+0x8cc>)
 8016536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801653a:	f7e9 fed3 	bl	80002e4 <__aeabi_dsub>
 801653e:	4602      	mov	r2, r0
 8016540:	460b      	mov	r3, r1
 8016542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016546:	f7ea faf7 	bl	8000b38 <__aeabi_dcmplt>
 801654a:	2800      	cmp	r0, #0
 801654c:	f43f aef5 	beq.w	801633a <_dtoa_r+0x43a>
 8016550:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8016552:	1e73      	subs	r3, r6, #1
 8016554:	9315      	str	r3, [sp, #84]	@ 0x54
 8016556:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801655a:	2b30      	cmp	r3, #48	@ 0x30
 801655c:	d0f8      	beq.n	8016550 <_dtoa_r+0x650>
 801655e:	9f04      	ldr	r7, [sp, #16]
 8016560:	e73e      	b.n	80163e0 <_dtoa_r+0x4e0>
 8016562:	4b9b      	ldr	r3, [pc, #620]	@ (80167d0 <_dtoa_r+0x8d0>)
 8016564:	f7ea f876 	bl	8000654 <__aeabi_dmul>
 8016568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801656c:	e7bc      	b.n	80164e8 <_dtoa_r+0x5e8>
 801656e:	d10c      	bne.n	801658a <_dtoa_r+0x68a>
 8016570:	2200      	movs	r2, #0
 8016572:	4b98      	ldr	r3, [pc, #608]	@ (80167d4 <_dtoa_r+0x8d4>)
 8016574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016578:	f7ea f86c 	bl	8000654 <__aeabi_dmul>
 801657c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016580:	f7ea faee 	bl	8000b60 <__aeabi_dcmpge>
 8016584:	2800      	cmp	r0, #0
 8016586:	f000 8157 	beq.w	8016838 <_dtoa_r+0x938>
 801658a:	2400      	movs	r4, #0
 801658c:	4625      	mov	r5, r4
 801658e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016590:	4656      	mov	r6, sl
 8016592:	43db      	mvns	r3, r3
 8016594:	9304      	str	r3, [sp, #16]
 8016596:	2700      	movs	r7, #0
 8016598:	4621      	mov	r1, r4
 801659a:	4658      	mov	r0, fp
 801659c:	f000 fbb4 	bl	8016d08 <_Bfree>
 80165a0:	2d00      	cmp	r5, #0
 80165a2:	d0dc      	beq.n	801655e <_dtoa_r+0x65e>
 80165a4:	b12f      	cbz	r7, 80165b2 <_dtoa_r+0x6b2>
 80165a6:	42af      	cmp	r7, r5
 80165a8:	d003      	beq.n	80165b2 <_dtoa_r+0x6b2>
 80165aa:	4639      	mov	r1, r7
 80165ac:	4658      	mov	r0, fp
 80165ae:	f000 fbab 	bl	8016d08 <_Bfree>
 80165b2:	4629      	mov	r1, r5
 80165b4:	4658      	mov	r0, fp
 80165b6:	f000 fba7 	bl	8016d08 <_Bfree>
 80165ba:	e7d0      	b.n	801655e <_dtoa_r+0x65e>
 80165bc:	9704      	str	r7, [sp, #16]
 80165be:	4633      	mov	r3, r6
 80165c0:	461e      	mov	r6, r3
 80165c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80165c6:	2a39      	cmp	r2, #57	@ 0x39
 80165c8:	d107      	bne.n	80165da <_dtoa_r+0x6da>
 80165ca:	459a      	cmp	sl, r3
 80165cc:	d1f8      	bne.n	80165c0 <_dtoa_r+0x6c0>
 80165ce:	9a04      	ldr	r2, [sp, #16]
 80165d0:	3201      	adds	r2, #1
 80165d2:	9204      	str	r2, [sp, #16]
 80165d4:	2230      	movs	r2, #48	@ 0x30
 80165d6:	f88a 2000 	strb.w	r2, [sl]
 80165da:	781a      	ldrb	r2, [r3, #0]
 80165dc:	3201      	adds	r2, #1
 80165de:	701a      	strb	r2, [r3, #0]
 80165e0:	e7bd      	b.n	801655e <_dtoa_r+0x65e>
 80165e2:	2200      	movs	r2, #0
 80165e4:	4b7a      	ldr	r3, [pc, #488]	@ (80167d0 <_dtoa_r+0x8d0>)
 80165e6:	f7ea f835 	bl	8000654 <__aeabi_dmul>
 80165ea:	2200      	movs	r2, #0
 80165ec:	2300      	movs	r3, #0
 80165ee:	4604      	mov	r4, r0
 80165f0:	460d      	mov	r5, r1
 80165f2:	f7ea fa97 	bl	8000b24 <__aeabi_dcmpeq>
 80165f6:	2800      	cmp	r0, #0
 80165f8:	f43f aebb 	beq.w	8016372 <_dtoa_r+0x472>
 80165fc:	e6f0      	b.n	80163e0 <_dtoa_r+0x4e0>
 80165fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016600:	2a00      	cmp	r2, #0
 8016602:	f000 80db 	beq.w	80167bc <_dtoa_r+0x8bc>
 8016606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016608:	2a01      	cmp	r2, #1
 801660a:	f300 80bf 	bgt.w	801678c <_dtoa_r+0x88c>
 801660e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016610:	2a00      	cmp	r2, #0
 8016612:	f000 80b7 	beq.w	8016784 <_dtoa_r+0x884>
 8016616:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801661a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801661c:	4646      	mov	r6, r8
 801661e:	9a08      	ldr	r2, [sp, #32]
 8016620:	2101      	movs	r1, #1
 8016622:	4658      	mov	r0, fp
 8016624:	4498      	add	r8, r3
 8016626:	441a      	add	r2, r3
 8016628:	9208      	str	r2, [sp, #32]
 801662a:	f000 fc23 	bl	8016e74 <__i2b>
 801662e:	4605      	mov	r5, r0
 8016630:	b15e      	cbz	r6, 801664a <_dtoa_r+0x74a>
 8016632:	9b08      	ldr	r3, [sp, #32]
 8016634:	2b00      	cmp	r3, #0
 8016636:	dd08      	ble.n	801664a <_dtoa_r+0x74a>
 8016638:	42b3      	cmp	r3, r6
 801663a:	9a08      	ldr	r2, [sp, #32]
 801663c:	bfa8      	it	ge
 801663e:	4633      	movge	r3, r6
 8016640:	eba8 0803 	sub.w	r8, r8, r3
 8016644:	1af6      	subs	r6, r6, r3
 8016646:	1ad3      	subs	r3, r2, r3
 8016648:	9308      	str	r3, [sp, #32]
 801664a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801664c:	b1f3      	cbz	r3, 801668c <_dtoa_r+0x78c>
 801664e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016650:	2b00      	cmp	r3, #0
 8016652:	f000 80b7 	beq.w	80167c4 <_dtoa_r+0x8c4>
 8016656:	b18c      	cbz	r4, 801667c <_dtoa_r+0x77c>
 8016658:	4629      	mov	r1, r5
 801665a:	4622      	mov	r2, r4
 801665c:	4658      	mov	r0, fp
 801665e:	f000 fcc9 	bl	8016ff4 <__pow5mult>
 8016662:	464a      	mov	r2, r9
 8016664:	4601      	mov	r1, r0
 8016666:	4605      	mov	r5, r0
 8016668:	4658      	mov	r0, fp
 801666a:	f000 fc19 	bl	8016ea0 <__multiply>
 801666e:	4649      	mov	r1, r9
 8016670:	9004      	str	r0, [sp, #16]
 8016672:	4658      	mov	r0, fp
 8016674:	f000 fb48 	bl	8016d08 <_Bfree>
 8016678:	9b04      	ldr	r3, [sp, #16]
 801667a:	4699      	mov	r9, r3
 801667c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801667e:	1b1a      	subs	r2, r3, r4
 8016680:	d004      	beq.n	801668c <_dtoa_r+0x78c>
 8016682:	4649      	mov	r1, r9
 8016684:	4658      	mov	r0, fp
 8016686:	f000 fcb5 	bl	8016ff4 <__pow5mult>
 801668a:	4681      	mov	r9, r0
 801668c:	2101      	movs	r1, #1
 801668e:	4658      	mov	r0, fp
 8016690:	f000 fbf0 	bl	8016e74 <__i2b>
 8016694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016696:	4604      	mov	r4, r0
 8016698:	2b00      	cmp	r3, #0
 801669a:	f000 81cf 	beq.w	8016a3c <_dtoa_r+0xb3c>
 801669e:	461a      	mov	r2, r3
 80166a0:	4601      	mov	r1, r0
 80166a2:	4658      	mov	r0, fp
 80166a4:	f000 fca6 	bl	8016ff4 <__pow5mult>
 80166a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166aa:	4604      	mov	r4, r0
 80166ac:	2b01      	cmp	r3, #1
 80166ae:	f300 8095 	bgt.w	80167dc <_dtoa_r+0x8dc>
 80166b2:	9b02      	ldr	r3, [sp, #8]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	f040 8087 	bne.w	80167c8 <_dtoa_r+0x8c8>
 80166ba:	9b03      	ldr	r3, [sp, #12]
 80166bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	f040 8089 	bne.w	80167d8 <_dtoa_r+0x8d8>
 80166c6:	9b03      	ldr	r3, [sp, #12]
 80166c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80166cc:	0d1b      	lsrs	r3, r3, #20
 80166ce:	051b      	lsls	r3, r3, #20
 80166d0:	b12b      	cbz	r3, 80166de <_dtoa_r+0x7de>
 80166d2:	9b08      	ldr	r3, [sp, #32]
 80166d4:	f108 0801 	add.w	r8, r8, #1
 80166d8:	3301      	adds	r3, #1
 80166da:	9308      	str	r3, [sp, #32]
 80166dc:	2301      	movs	r3, #1
 80166de:	930a      	str	r3, [sp, #40]	@ 0x28
 80166e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	f000 81b0 	beq.w	8016a48 <_dtoa_r+0xb48>
 80166e8:	6923      	ldr	r3, [r4, #16]
 80166ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80166ee:	6918      	ldr	r0, [r3, #16]
 80166f0:	f000 fb74 	bl	8016ddc <__hi0bits>
 80166f4:	f1c0 0020 	rsb	r0, r0, #32
 80166f8:	9b08      	ldr	r3, [sp, #32]
 80166fa:	4418      	add	r0, r3
 80166fc:	f010 001f 	ands.w	r0, r0, #31
 8016700:	d077      	beq.n	80167f2 <_dtoa_r+0x8f2>
 8016702:	f1c0 0320 	rsb	r3, r0, #32
 8016706:	2b04      	cmp	r3, #4
 8016708:	dd6b      	ble.n	80167e2 <_dtoa_r+0x8e2>
 801670a:	f1c0 001c 	rsb	r0, r0, #28
 801670e:	9b08      	ldr	r3, [sp, #32]
 8016710:	4480      	add	r8, r0
 8016712:	4403      	add	r3, r0
 8016714:	4406      	add	r6, r0
 8016716:	9308      	str	r3, [sp, #32]
 8016718:	f1b8 0f00 	cmp.w	r8, #0
 801671c:	dd05      	ble.n	801672a <_dtoa_r+0x82a>
 801671e:	4649      	mov	r1, r9
 8016720:	4642      	mov	r2, r8
 8016722:	4658      	mov	r0, fp
 8016724:	f000 fcc0 	bl	80170a8 <__lshift>
 8016728:	4681      	mov	r9, r0
 801672a:	9b08      	ldr	r3, [sp, #32]
 801672c:	2b00      	cmp	r3, #0
 801672e:	dd05      	ble.n	801673c <_dtoa_r+0x83c>
 8016730:	4621      	mov	r1, r4
 8016732:	461a      	mov	r2, r3
 8016734:	4658      	mov	r0, fp
 8016736:	f000 fcb7 	bl	80170a8 <__lshift>
 801673a:	4604      	mov	r4, r0
 801673c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801673e:	2b00      	cmp	r3, #0
 8016740:	d059      	beq.n	80167f6 <_dtoa_r+0x8f6>
 8016742:	4621      	mov	r1, r4
 8016744:	4648      	mov	r0, r9
 8016746:	f000 fd1b 	bl	8017180 <__mcmp>
 801674a:	2800      	cmp	r0, #0
 801674c:	da53      	bge.n	80167f6 <_dtoa_r+0x8f6>
 801674e:	1e7b      	subs	r3, r7, #1
 8016750:	4649      	mov	r1, r9
 8016752:	220a      	movs	r2, #10
 8016754:	4658      	mov	r0, fp
 8016756:	9304      	str	r3, [sp, #16]
 8016758:	2300      	movs	r3, #0
 801675a:	f000 faf7 	bl	8016d4c <__multadd>
 801675e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016760:	4681      	mov	r9, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	f000 8172 	beq.w	8016a4c <_dtoa_r+0xb4c>
 8016768:	2300      	movs	r3, #0
 801676a:	4629      	mov	r1, r5
 801676c:	220a      	movs	r2, #10
 801676e:	4658      	mov	r0, fp
 8016770:	f000 faec 	bl	8016d4c <__multadd>
 8016774:	9b00      	ldr	r3, [sp, #0]
 8016776:	4605      	mov	r5, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	dc67      	bgt.n	801684c <_dtoa_r+0x94c>
 801677c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801677e:	2b02      	cmp	r3, #2
 8016780:	dc41      	bgt.n	8016806 <_dtoa_r+0x906>
 8016782:	e063      	b.n	801684c <_dtoa_r+0x94c>
 8016784:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016786:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801678a:	e746      	b.n	801661a <_dtoa_r+0x71a>
 801678c:	9b07      	ldr	r3, [sp, #28]
 801678e:	1e5c      	subs	r4, r3, #1
 8016790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016792:	42a3      	cmp	r3, r4
 8016794:	bfb7      	itett	lt
 8016796:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016798:	1b1c      	subge	r4, r3, r4
 801679a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801679c:	1ae3      	sublt	r3, r4, r3
 801679e:	bfbe      	ittt	lt
 80167a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80167a2:	2400      	movlt	r4, #0
 80167a4:	18d2      	addlt	r2, r2, r3
 80167a6:	9b07      	ldr	r3, [sp, #28]
 80167a8:	bfb8      	it	lt
 80167aa:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	bfb5      	itete	lt
 80167b0:	eba8 0603 	sublt.w	r6, r8, r3
 80167b4:	4646      	movge	r6, r8
 80167b6:	2300      	movlt	r3, #0
 80167b8:	9b07      	ldrge	r3, [sp, #28]
 80167ba:	e730      	b.n	801661e <_dtoa_r+0x71e>
 80167bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80167be:	4646      	mov	r6, r8
 80167c0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80167c2:	e735      	b.n	8016630 <_dtoa_r+0x730>
 80167c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80167c6:	e75c      	b.n	8016682 <_dtoa_r+0x782>
 80167c8:	2300      	movs	r3, #0
 80167ca:	e788      	b.n	80166de <_dtoa_r+0x7de>
 80167cc:	3fe00000 	.word	0x3fe00000
 80167d0:	40240000 	.word	0x40240000
 80167d4:	40140000 	.word	0x40140000
 80167d8:	9b02      	ldr	r3, [sp, #8]
 80167da:	e780      	b.n	80166de <_dtoa_r+0x7de>
 80167dc:	2300      	movs	r3, #0
 80167de:	930a      	str	r3, [sp, #40]	@ 0x28
 80167e0:	e782      	b.n	80166e8 <_dtoa_r+0x7e8>
 80167e2:	d099      	beq.n	8016718 <_dtoa_r+0x818>
 80167e4:	331c      	adds	r3, #28
 80167e6:	9a08      	ldr	r2, [sp, #32]
 80167e8:	441a      	add	r2, r3
 80167ea:	4498      	add	r8, r3
 80167ec:	441e      	add	r6, r3
 80167ee:	9208      	str	r2, [sp, #32]
 80167f0:	e792      	b.n	8016718 <_dtoa_r+0x818>
 80167f2:	4603      	mov	r3, r0
 80167f4:	e7f6      	b.n	80167e4 <_dtoa_r+0x8e4>
 80167f6:	9b07      	ldr	r3, [sp, #28]
 80167f8:	9704      	str	r7, [sp, #16]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	dc20      	bgt.n	8016840 <_dtoa_r+0x940>
 80167fe:	9300      	str	r3, [sp, #0]
 8016800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016802:	2b02      	cmp	r3, #2
 8016804:	dd1e      	ble.n	8016844 <_dtoa_r+0x944>
 8016806:	9b00      	ldr	r3, [sp, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	f47f aec0 	bne.w	801658e <_dtoa_r+0x68e>
 801680e:	4621      	mov	r1, r4
 8016810:	2205      	movs	r2, #5
 8016812:	4658      	mov	r0, fp
 8016814:	f000 fa9a 	bl	8016d4c <__multadd>
 8016818:	4601      	mov	r1, r0
 801681a:	4604      	mov	r4, r0
 801681c:	4648      	mov	r0, r9
 801681e:	f000 fcaf 	bl	8017180 <__mcmp>
 8016822:	2800      	cmp	r0, #0
 8016824:	f77f aeb3 	ble.w	801658e <_dtoa_r+0x68e>
 8016828:	2331      	movs	r3, #49	@ 0x31
 801682a:	4656      	mov	r6, sl
 801682c:	f806 3b01 	strb.w	r3, [r6], #1
 8016830:	9b04      	ldr	r3, [sp, #16]
 8016832:	3301      	adds	r3, #1
 8016834:	9304      	str	r3, [sp, #16]
 8016836:	e6ae      	b.n	8016596 <_dtoa_r+0x696>
 8016838:	9c07      	ldr	r4, [sp, #28]
 801683a:	9704      	str	r7, [sp, #16]
 801683c:	4625      	mov	r5, r4
 801683e:	e7f3      	b.n	8016828 <_dtoa_r+0x928>
 8016840:	9b07      	ldr	r3, [sp, #28]
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016846:	2b00      	cmp	r3, #0
 8016848:	f000 8104 	beq.w	8016a54 <_dtoa_r+0xb54>
 801684c:	2e00      	cmp	r6, #0
 801684e:	dd05      	ble.n	801685c <_dtoa_r+0x95c>
 8016850:	4629      	mov	r1, r5
 8016852:	4632      	mov	r2, r6
 8016854:	4658      	mov	r0, fp
 8016856:	f000 fc27 	bl	80170a8 <__lshift>
 801685a:	4605      	mov	r5, r0
 801685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801685e:	2b00      	cmp	r3, #0
 8016860:	d05a      	beq.n	8016918 <_dtoa_r+0xa18>
 8016862:	6869      	ldr	r1, [r5, #4]
 8016864:	4658      	mov	r0, fp
 8016866:	f000 fa0f 	bl	8016c88 <_Balloc>
 801686a:	4606      	mov	r6, r0
 801686c:	b928      	cbnz	r0, 801687a <_dtoa_r+0x97a>
 801686e:	4b84      	ldr	r3, [pc, #528]	@ (8016a80 <_dtoa_r+0xb80>)
 8016870:	4602      	mov	r2, r0
 8016872:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016876:	f7ff bb5a 	b.w	8015f2e <_dtoa_r+0x2e>
 801687a:	692a      	ldr	r2, [r5, #16]
 801687c:	f105 010c 	add.w	r1, r5, #12
 8016880:	300c      	adds	r0, #12
 8016882:	3202      	adds	r2, #2
 8016884:	0092      	lsls	r2, r2, #2
 8016886:	f7ff fa82 	bl	8015d8e <memcpy>
 801688a:	2201      	movs	r2, #1
 801688c:	4631      	mov	r1, r6
 801688e:	4658      	mov	r0, fp
 8016890:	f000 fc0a 	bl	80170a8 <__lshift>
 8016894:	f10a 0301 	add.w	r3, sl, #1
 8016898:	462f      	mov	r7, r5
 801689a:	4605      	mov	r5, r0
 801689c:	9307      	str	r3, [sp, #28]
 801689e:	9b00      	ldr	r3, [sp, #0]
 80168a0:	4453      	add	r3, sl
 80168a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168a4:	9b02      	ldr	r3, [sp, #8]
 80168a6:	f003 0301 	and.w	r3, r3, #1
 80168aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80168ac:	9b07      	ldr	r3, [sp, #28]
 80168ae:	4621      	mov	r1, r4
 80168b0:	4648      	mov	r0, r9
 80168b2:	3b01      	subs	r3, #1
 80168b4:	9300      	str	r3, [sp, #0]
 80168b6:	f7ff fa95 	bl	8015de4 <quorem>
 80168ba:	4639      	mov	r1, r7
 80168bc:	9002      	str	r0, [sp, #8]
 80168be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80168c2:	4648      	mov	r0, r9
 80168c4:	f000 fc5c 	bl	8017180 <__mcmp>
 80168c8:	462a      	mov	r2, r5
 80168ca:	9008      	str	r0, [sp, #32]
 80168cc:	4621      	mov	r1, r4
 80168ce:	4658      	mov	r0, fp
 80168d0:	f000 fc72 	bl	80171b8 <__mdiff>
 80168d4:	68c2      	ldr	r2, [r0, #12]
 80168d6:	4606      	mov	r6, r0
 80168d8:	bb02      	cbnz	r2, 801691c <_dtoa_r+0xa1c>
 80168da:	4601      	mov	r1, r0
 80168dc:	4648      	mov	r0, r9
 80168de:	f000 fc4f 	bl	8017180 <__mcmp>
 80168e2:	4602      	mov	r2, r0
 80168e4:	4631      	mov	r1, r6
 80168e6:	4658      	mov	r0, fp
 80168e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80168ea:	f000 fa0d 	bl	8016d08 <_Bfree>
 80168ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80168f2:	9e07      	ldr	r6, [sp, #28]
 80168f4:	ea43 0102 	orr.w	r1, r3, r2
 80168f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80168fa:	4319      	orrs	r1, r3
 80168fc:	d110      	bne.n	8016920 <_dtoa_r+0xa20>
 80168fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016902:	d029      	beq.n	8016958 <_dtoa_r+0xa58>
 8016904:	9b08      	ldr	r3, [sp, #32]
 8016906:	2b00      	cmp	r3, #0
 8016908:	dd02      	ble.n	8016910 <_dtoa_r+0xa10>
 801690a:	9b02      	ldr	r3, [sp, #8]
 801690c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016910:	9b00      	ldr	r3, [sp, #0]
 8016912:	f883 8000 	strb.w	r8, [r3]
 8016916:	e63f      	b.n	8016598 <_dtoa_r+0x698>
 8016918:	4628      	mov	r0, r5
 801691a:	e7bb      	b.n	8016894 <_dtoa_r+0x994>
 801691c:	2201      	movs	r2, #1
 801691e:	e7e1      	b.n	80168e4 <_dtoa_r+0x9e4>
 8016920:	9b08      	ldr	r3, [sp, #32]
 8016922:	2b00      	cmp	r3, #0
 8016924:	db04      	blt.n	8016930 <_dtoa_r+0xa30>
 8016926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016928:	430b      	orrs	r3, r1
 801692a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801692c:	430b      	orrs	r3, r1
 801692e:	d120      	bne.n	8016972 <_dtoa_r+0xa72>
 8016930:	2a00      	cmp	r2, #0
 8016932:	dded      	ble.n	8016910 <_dtoa_r+0xa10>
 8016934:	4649      	mov	r1, r9
 8016936:	2201      	movs	r2, #1
 8016938:	4658      	mov	r0, fp
 801693a:	f000 fbb5 	bl	80170a8 <__lshift>
 801693e:	4621      	mov	r1, r4
 8016940:	4681      	mov	r9, r0
 8016942:	f000 fc1d 	bl	8017180 <__mcmp>
 8016946:	2800      	cmp	r0, #0
 8016948:	dc03      	bgt.n	8016952 <_dtoa_r+0xa52>
 801694a:	d1e1      	bne.n	8016910 <_dtoa_r+0xa10>
 801694c:	f018 0f01 	tst.w	r8, #1
 8016950:	d0de      	beq.n	8016910 <_dtoa_r+0xa10>
 8016952:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016956:	d1d8      	bne.n	801690a <_dtoa_r+0xa0a>
 8016958:	2339      	movs	r3, #57	@ 0x39
 801695a:	9a00      	ldr	r2, [sp, #0]
 801695c:	7013      	strb	r3, [r2, #0]
 801695e:	4633      	mov	r3, r6
 8016960:	461e      	mov	r6, r3
 8016962:	3b01      	subs	r3, #1
 8016964:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016968:	2a39      	cmp	r2, #57	@ 0x39
 801696a:	d052      	beq.n	8016a12 <_dtoa_r+0xb12>
 801696c:	3201      	adds	r2, #1
 801696e:	701a      	strb	r2, [r3, #0]
 8016970:	e612      	b.n	8016598 <_dtoa_r+0x698>
 8016972:	2a00      	cmp	r2, #0
 8016974:	dd07      	ble.n	8016986 <_dtoa_r+0xa86>
 8016976:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801697a:	d0ed      	beq.n	8016958 <_dtoa_r+0xa58>
 801697c:	f108 0301 	add.w	r3, r8, #1
 8016980:	9a00      	ldr	r2, [sp, #0]
 8016982:	7013      	strb	r3, [r2, #0]
 8016984:	e608      	b.n	8016598 <_dtoa_r+0x698>
 8016986:	9b07      	ldr	r3, [sp, #28]
 8016988:	9a07      	ldr	r2, [sp, #28]
 801698a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801698e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016990:	4293      	cmp	r3, r2
 8016992:	d028      	beq.n	80169e6 <_dtoa_r+0xae6>
 8016994:	4649      	mov	r1, r9
 8016996:	2300      	movs	r3, #0
 8016998:	220a      	movs	r2, #10
 801699a:	4658      	mov	r0, fp
 801699c:	f000 f9d6 	bl	8016d4c <__multadd>
 80169a0:	42af      	cmp	r7, r5
 80169a2:	4681      	mov	r9, r0
 80169a4:	f04f 0300 	mov.w	r3, #0
 80169a8:	f04f 020a 	mov.w	r2, #10
 80169ac:	4639      	mov	r1, r7
 80169ae:	4658      	mov	r0, fp
 80169b0:	d107      	bne.n	80169c2 <_dtoa_r+0xac2>
 80169b2:	f000 f9cb 	bl	8016d4c <__multadd>
 80169b6:	4607      	mov	r7, r0
 80169b8:	4605      	mov	r5, r0
 80169ba:	9b07      	ldr	r3, [sp, #28]
 80169bc:	3301      	adds	r3, #1
 80169be:	9307      	str	r3, [sp, #28]
 80169c0:	e774      	b.n	80168ac <_dtoa_r+0x9ac>
 80169c2:	f000 f9c3 	bl	8016d4c <__multadd>
 80169c6:	4629      	mov	r1, r5
 80169c8:	4607      	mov	r7, r0
 80169ca:	2300      	movs	r3, #0
 80169cc:	220a      	movs	r2, #10
 80169ce:	4658      	mov	r0, fp
 80169d0:	f000 f9bc 	bl	8016d4c <__multadd>
 80169d4:	4605      	mov	r5, r0
 80169d6:	e7f0      	b.n	80169ba <_dtoa_r+0xaba>
 80169d8:	9b00      	ldr	r3, [sp, #0]
 80169da:	2700      	movs	r7, #0
 80169dc:	2b00      	cmp	r3, #0
 80169de:	bfcc      	ite	gt
 80169e0:	461e      	movgt	r6, r3
 80169e2:	2601      	movle	r6, #1
 80169e4:	4456      	add	r6, sl
 80169e6:	4649      	mov	r1, r9
 80169e8:	2201      	movs	r2, #1
 80169ea:	4658      	mov	r0, fp
 80169ec:	f000 fb5c 	bl	80170a8 <__lshift>
 80169f0:	4621      	mov	r1, r4
 80169f2:	4681      	mov	r9, r0
 80169f4:	f000 fbc4 	bl	8017180 <__mcmp>
 80169f8:	2800      	cmp	r0, #0
 80169fa:	dcb0      	bgt.n	801695e <_dtoa_r+0xa5e>
 80169fc:	d102      	bne.n	8016a04 <_dtoa_r+0xb04>
 80169fe:	f018 0f01 	tst.w	r8, #1
 8016a02:	d1ac      	bne.n	801695e <_dtoa_r+0xa5e>
 8016a04:	4633      	mov	r3, r6
 8016a06:	461e      	mov	r6, r3
 8016a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016a0c:	2a30      	cmp	r2, #48	@ 0x30
 8016a0e:	d0fa      	beq.n	8016a06 <_dtoa_r+0xb06>
 8016a10:	e5c2      	b.n	8016598 <_dtoa_r+0x698>
 8016a12:	459a      	cmp	sl, r3
 8016a14:	d1a4      	bne.n	8016960 <_dtoa_r+0xa60>
 8016a16:	9b04      	ldr	r3, [sp, #16]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	9304      	str	r3, [sp, #16]
 8016a1c:	2331      	movs	r3, #49	@ 0x31
 8016a1e:	f88a 3000 	strb.w	r3, [sl]
 8016a22:	e5b9      	b.n	8016598 <_dtoa_r+0x698>
 8016a24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016a26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8016a84 <_dtoa_r+0xb84>
 8016a2a:	b11b      	cbz	r3, 8016a34 <_dtoa_r+0xb34>
 8016a2c:	f10a 0308 	add.w	r3, sl, #8
 8016a30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016a32:	6013      	str	r3, [r2, #0]
 8016a34:	4650      	mov	r0, sl
 8016a36:	b019      	add	sp, #100	@ 0x64
 8016a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	f77f ae37 	ble.w	80166b2 <_dtoa_r+0x7b2>
 8016a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a48:	2001      	movs	r0, #1
 8016a4a:	e655      	b.n	80166f8 <_dtoa_r+0x7f8>
 8016a4c:	9b00      	ldr	r3, [sp, #0]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f77f aed6 	ble.w	8016800 <_dtoa_r+0x900>
 8016a54:	4656      	mov	r6, sl
 8016a56:	4621      	mov	r1, r4
 8016a58:	4648      	mov	r0, r9
 8016a5a:	f7ff f9c3 	bl	8015de4 <quorem>
 8016a5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016a62:	9b00      	ldr	r3, [sp, #0]
 8016a64:	f806 8b01 	strb.w	r8, [r6], #1
 8016a68:	eba6 020a 	sub.w	r2, r6, sl
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	ddb3      	ble.n	80169d8 <_dtoa_r+0xad8>
 8016a70:	4649      	mov	r1, r9
 8016a72:	2300      	movs	r3, #0
 8016a74:	220a      	movs	r2, #10
 8016a76:	4658      	mov	r0, fp
 8016a78:	f000 f968 	bl	8016d4c <__multadd>
 8016a7c:	4681      	mov	r9, r0
 8016a7e:	e7ea      	b.n	8016a56 <_dtoa_r+0xb56>
 8016a80:	08018ccf 	.word	0x08018ccf
 8016a84:	08018c6a 	.word	0x08018c6a

08016a88 <_free_r>:
 8016a88:	b538      	push	{r3, r4, r5, lr}
 8016a8a:	4605      	mov	r5, r0
 8016a8c:	2900      	cmp	r1, #0
 8016a8e:	d041      	beq.n	8016b14 <_free_r+0x8c>
 8016a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a94:	1f0c      	subs	r4, r1, #4
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	bfb8      	it	lt
 8016a9a:	18e4      	addlt	r4, r4, r3
 8016a9c:	f000 f8e8 	bl	8016c70 <__malloc_lock>
 8016aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8016b18 <_free_r+0x90>)
 8016aa2:	6813      	ldr	r3, [r2, #0]
 8016aa4:	b933      	cbnz	r3, 8016ab4 <_free_r+0x2c>
 8016aa6:	6063      	str	r3, [r4, #4]
 8016aa8:	6014      	str	r4, [r2, #0]
 8016aaa:	4628      	mov	r0, r5
 8016aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ab0:	f000 b8e4 	b.w	8016c7c <__malloc_unlock>
 8016ab4:	42a3      	cmp	r3, r4
 8016ab6:	d908      	bls.n	8016aca <_free_r+0x42>
 8016ab8:	6820      	ldr	r0, [r4, #0]
 8016aba:	1821      	adds	r1, r4, r0
 8016abc:	428b      	cmp	r3, r1
 8016abe:	bf01      	itttt	eq
 8016ac0:	6819      	ldreq	r1, [r3, #0]
 8016ac2:	685b      	ldreq	r3, [r3, #4]
 8016ac4:	1809      	addeq	r1, r1, r0
 8016ac6:	6021      	streq	r1, [r4, #0]
 8016ac8:	e7ed      	b.n	8016aa6 <_free_r+0x1e>
 8016aca:	461a      	mov	r2, r3
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	b10b      	cbz	r3, 8016ad4 <_free_r+0x4c>
 8016ad0:	42a3      	cmp	r3, r4
 8016ad2:	d9fa      	bls.n	8016aca <_free_r+0x42>
 8016ad4:	6811      	ldr	r1, [r2, #0]
 8016ad6:	1850      	adds	r0, r2, r1
 8016ad8:	42a0      	cmp	r0, r4
 8016ada:	d10b      	bne.n	8016af4 <_free_r+0x6c>
 8016adc:	6820      	ldr	r0, [r4, #0]
 8016ade:	4401      	add	r1, r0
 8016ae0:	1850      	adds	r0, r2, r1
 8016ae2:	6011      	str	r1, [r2, #0]
 8016ae4:	4283      	cmp	r3, r0
 8016ae6:	d1e0      	bne.n	8016aaa <_free_r+0x22>
 8016ae8:	6818      	ldr	r0, [r3, #0]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	4408      	add	r0, r1
 8016aee:	6053      	str	r3, [r2, #4]
 8016af0:	6010      	str	r0, [r2, #0]
 8016af2:	e7da      	b.n	8016aaa <_free_r+0x22>
 8016af4:	d902      	bls.n	8016afc <_free_r+0x74>
 8016af6:	230c      	movs	r3, #12
 8016af8:	602b      	str	r3, [r5, #0]
 8016afa:	e7d6      	b.n	8016aaa <_free_r+0x22>
 8016afc:	6820      	ldr	r0, [r4, #0]
 8016afe:	1821      	adds	r1, r4, r0
 8016b00:	428b      	cmp	r3, r1
 8016b02:	bf02      	ittt	eq
 8016b04:	6819      	ldreq	r1, [r3, #0]
 8016b06:	685b      	ldreq	r3, [r3, #4]
 8016b08:	1809      	addeq	r1, r1, r0
 8016b0a:	6063      	str	r3, [r4, #4]
 8016b0c:	bf08      	it	eq
 8016b0e:	6021      	streq	r1, [r4, #0]
 8016b10:	6054      	str	r4, [r2, #4]
 8016b12:	e7ca      	b.n	8016aaa <_free_r+0x22>
 8016b14:	bd38      	pop	{r3, r4, r5, pc}
 8016b16:	bf00      	nop
 8016b18:	200045ac 	.word	0x200045ac

08016b1c <malloc>:
 8016b1c:	4b02      	ldr	r3, [pc, #8]	@ (8016b28 <malloc+0xc>)
 8016b1e:	4601      	mov	r1, r0
 8016b20:	6818      	ldr	r0, [r3, #0]
 8016b22:	f000 b825 	b.w	8016b70 <_malloc_r>
 8016b26:	bf00      	nop
 8016b28:	200001b8 	.word	0x200001b8

08016b2c <sbrk_aligned>:
 8016b2c:	b570      	push	{r4, r5, r6, lr}
 8016b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8016b6c <sbrk_aligned+0x40>)
 8016b30:	460c      	mov	r4, r1
 8016b32:	4605      	mov	r5, r0
 8016b34:	6831      	ldr	r1, [r6, #0]
 8016b36:	b911      	cbnz	r1, 8016b3e <sbrk_aligned+0x12>
 8016b38:	f000 ff16 	bl	8017968 <_sbrk_r>
 8016b3c:	6030      	str	r0, [r6, #0]
 8016b3e:	4621      	mov	r1, r4
 8016b40:	4628      	mov	r0, r5
 8016b42:	f000 ff11 	bl	8017968 <_sbrk_r>
 8016b46:	1c43      	adds	r3, r0, #1
 8016b48:	d103      	bne.n	8016b52 <sbrk_aligned+0x26>
 8016b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8016b4e:	4620      	mov	r0, r4
 8016b50:	bd70      	pop	{r4, r5, r6, pc}
 8016b52:	1cc4      	adds	r4, r0, #3
 8016b54:	f024 0403 	bic.w	r4, r4, #3
 8016b58:	42a0      	cmp	r0, r4
 8016b5a:	d0f8      	beq.n	8016b4e <sbrk_aligned+0x22>
 8016b5c:	1a21      	subs	r1, r4, r0
 8016b5e:	4628      	mov	r0, r5
 8016b60:	f000 ff02 	bl	8017968 <_sbrk_r>
 8016b64:	3001      	adds	r0, #1
 8016b66:	d1f2      	bne.n	8016b4e <sbrk_aligned+0x22>
 8016b68:	e7ef      	b.n	8016b4a <sbrk_aligned+0x1e>
 8016b6a:	bf00      	nop
 8016b6c:	200045a8 	.word	0x200045a8

08016b70 <_malloc_r>:
 8016b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b74:	1ccd      	adds	r5, r1, #3
 8016b76:	4606      	mov	r6, r0
 8016b78:	f025 0503 	bic.w	r5, r5, #3
 8016b7c:	3508      	adds	r5, #8
 8016b7e:	2d0c      	cmp	r5, #12
 8016b80:	bf38      	it	cc
 8016b82:	250c      	movcc	r5, #12
 8016b84:	2d00      	cmp	r5, #0
 8016b86:	db01      	blt.n	8016b8c <_malloc_r+0x1c>
 8016b88:	42a9      	cmp	r1, r5
 8016b8a:	d904      	bls.n	8016b96 <_malloc_r+0x26>
 8016b8c:	230c      	movs	r3, #12
 8016b8e:	6033      	str	r3, [r6, #0]
 8016b90:	2000      	movs	r0, #0
 8016b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016c6c <_malloc_r+0xfc>
 8016b9a:	f000 f869 	bl	8016c70 <__malloc_lock>
 8016b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8016ba2:	461c      	mov	r4, r3
 8016ba4:	bb44      	cbnz	r4, 8016bf8 <_malloc_r+0x88>
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	4630      	mov	r0, r6
 8016baa:	f7ff ffbf 	bl	8016b2c <sbrk_aligned>
 8016bae:	1c43      	adds	r3, r0, #1
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	d158      	bne.n	8016c66 <_malloc_r+0xf6>
 8016bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8016bb8:	4627      	mov	r7, r4
 8016bba:	2f00      	cmp	r7, #0
 8016bbc:	d143      	bne.n	8016c46 <_malloc_r+0xd6>
 8016bbe:	2c00      	cmp	r4, #0
 8016bc0:	d04b      	beq.n	8016c5a <_malloc_r+0xea>
 8016bc2:	6823      	ldr	r3, [r4, #0]
 8016bc4:	4639      	mov	r1, r7
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	eb04 0903 	add.w	r9, r4, r3
 8016bcc:	f000 fecc 	bl	8017968 <_sbrk_r>
 8016bd0:	4581      	cmp	r9, r0
 8016bd2:	d142      	bne.n	8016c5a <_malloc_r+0xea>
 8016bd4:	6821      	ldr	r1, [r4, #0]
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	1a6d      	subs	r5, r5, r1
 8016bda:	4629      	mov	r1, r5
 8016bdc:	f7ff ffa6 	bl	8016b2c <sbrk_aligned>
 8016be0:	3001      	adds	r0, #1
 8016be2:	d03a      	beq.n	8016c5a <_malloc_r+0xea>
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	442b      	add	r3, r5
 8016be8:	6023      	str	r3, [r4, #0]
 8016bea:	f8d8 3000 	ldr.w	r3, [r8]
 8016bee:	685a      	ldr	r2, [r3, #4]
 8016bf0:	bb62      	cbnz	r2, 8016c4c <_malloc_r+0xdc>
 8016bf2:	f8c8 7000 	str.w	r7, [r8]
 8016bf6:	e00f      	b.n	8016c18 <_malloc_r+0xa8>
 8016bf8:	6822      	ldr	r2, [r4, #0]
 8016bfa:	1b52      	subs	r2, r2, r5
 8016bfc:	d420      	bmi.n	8016c40 <_malloc_r+0xd0>
 8016bfe:	2a0b      	cmp	r2, #11
 8016c00:	d917      	bls.n	8016c32 <_malloc_r+0xc2>
 8016c02:	1961      	adds	r1, r4, r5
 8016c04:	42a3      	cmp	r3, r4
 8016c06:	6025      	str	r5, [r4, #0]
 8016c08:	bf18      	it	ne
 8016c0a:	6059      	strne	r1, [r3, #4]
 8016c0c:	6863      	ldr	r3, [r4, #4]
 8016c0e:	bf08      	it	eq
 8016c10:	f8c8 1000 	streq.w	r1, [r8]
 8016c14:	5162      	str	r2, [r4, r5]
 8016c16:	604b      	str	r3, [r1, #4]
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f000 f82f 	bl	8016c7c <__malloc_unlock>
 8016c1e:	f104 000b 	add.w	r0, r4, #11
 8016c22:	1d23      	adds	r3, r4, #4
 8016c24:	f020 0007 	bic.w	r0, r0, #7
 8016c28:	1ac2      	subs	r2, r0, r3
 8016c2a:	bf1c      	itt	ne
 8016c2c:	1a1b      	subne	r3, r3, r0
 8016c2e:	50a3      	strne	r3, [r4, r2]
 8016c30:	e7af      	b.n	8016b92 <_malloc_r+0x22>
 8016c32:	6862      	ldr	r2, [r4, #4]
 8016c34:	42a3      	cmp	r3, r4
 8016c36:	bf0c      	ite	eq
 8016c38:	f8c8 2000 	streq.w	r2, [r8]
 8016c3c:	605a      	strne	r2, [r3, #4]
 8016c3e:	e7eb      	b.n	8016c18 <_malloc_r+0xa8>
 8016c40:	4623      	mov	r3, r4
 8016c42:	6864      	ldr	r4, [r4, #4]
 8016c44:	e7ae      	b.n	8016ba4 <_malloc_r+0x34>
 8016c46:	463c      	mov	r4, r7
 8016c48:	687f      	ldr	r7, [r7, #4]
 8016c4a:	e7b6      	b.n	8016bba <_malloc_r+0x4a>
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	42a3      	cmp	r3, r4
 8016c52:	d1fb      	bne.n	8016c4c <_malloc_r+0xdc>
 8016c54:	2300      	movs	r3, #0
 8016c56:	6053      	str	r3, [r2, #4]
 8016c58:	e7de      	b.n	8016c18 <_malloc_r+0xa8>
 8016c5a:	230c      	movs	r3, #12
 8016c5c:	4630      	mov	r0, r6
 8016c5e:	6033      	str	r3, [r6, #0]
 8016c60:	f000 f80c 	bl	8016c7c <__malloc_unlock>
 8016c64:	e794      	b.n	8016b90 <_malloc_r+0x20>
 8016c66:	6005      	str	r5, [r0, #0]
 8016c68:	e7d6      	b.n	8016c18 <_malloc_r+0xa8>
 8016c6a:	bf00      	nop
 8016c6c:	200045ac 	.word	0x200045ac

08016c70 <__malloc_lock>:
 8016c70:	4801      	ldr	r0, [pc, #4]	@ (8016c78 <__malloc_lock+0x8>)
 8016c72:	f7ff b87c 	b.w	8015d6e <__retarget_lock_acquire_recursive>
 8016c76:	bf00      	nop
 8016c78:	200045a4 	.word	0x200045a4

08016c7c <__malloc_unlock>:
 8016c7c:	4801      	ldr	r0, [pc, #4]	@ (8016c84 <__malloc_unlock+0x8>)
 8016c7e:	f7ff b877 	b.w	8015d70 <__retarget_lock_release_recursive>
 8016c82:	bf00      	nop
 8016c84:	200045a4 	.word	0x200045a4

08016c88 <_Balloc>:
 8016c88:	b570      	push	{r4, r5, r6, lr}
 8016c8a:	69c6      	ldr	r6, [r0, #28]
 8016c8c:	4604      	mov	r4, r0
 8016c8e:	460d      	mov	r5, r1
 8016c90:	b976      	cbnz	r6, 8016cb0 <_Balloc+0x28>
 8016c92:	2010      	movs	r0, #16
 8016c94:	f7ff ff42 	bl	8016b1c <malloc>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	61e0      	str	r0, [r4, #28]
 8016c9c:	b920      	cbnz	r0, 8016ca8 <_Balloc+0x20>
 8016c9e:	4b18      	ldr	r3, [pc, #96]	@ (8016d00 <_Balloc+0x78>)
 8016ca0:	216b      	movs	r1, #107	@ 0x6b
 8016ca2:	4818      	ldr	r0, [pc, #96]	@ (8016d04 <_Balloc+0x7c>)
 8016ca4:	f7ff f880 	bl	8015da8 <__assert_func>
 8016ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016cac:	6006      	str	r6, [r0, #0]
 8016cae:	60c6      	str	r6, [r0, #12]
 8016cb0:	69e6      	ldr	r6, [r4, #28]
 8016cb2:	68f3      	ldr	r3, [r6, #12]
 8016cb4:	b183      	cbz	r3, 8016cd8 <_Balloc+0x50>
 8016cb6:	69e3      	ldr	r3, [r4, #28]
 8016cb8:	68db      	ldr	r3, [r3, #12]
 8016cba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016cbe:	b9b8      	cbnz	r0, 8016cf0 <_Balloc+0x68>
 8016cc0:	2101      	movs	r1, #1
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	fa01 f605 	lsl.w	r6, r1, r5
 8016cc8:	1d72      	adds	r2, r6, #5
 8016cca:	0092      	lsls	r2, r2, #2
 8016ccc:	f000 fe63 	bl	8017996 <_calloc_r>
 8016cd0:	b160      	cbz	r0, 8016cec <_Balloc+0x64>
 8016cd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016cd6:	e00e      	b.n	8016cf6 <_Balloc+0x6e>
 8016cd8:	2221      	movs	r2, #33	@ 0x21
 8016cda:	2104      	movs	r1, #4
 8016cdc:	4620      	mov	r0, r4
 8016cde:	f000 fe5a 	bl	8017996 <_calloc_r>
 8016ce2:	69e3      	ldr	r3, [r4, #28]
 8016ce4:	60f0      	str	r0, [r6, #12]
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d1e4      	bne.n	8016cb6 <_Balloc+0x2e>
 8016cec:	2000      	movs	r0, #0
 8016cee:	bd70      	pop	{r4, r5, r6, pc}
 8016cf0:	6802      	ldr	r2, [r0, #0]
 8016cf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016cfc:	e7f7      	b.n	8016cee <_Balloc+0x66>
 8016cfe:	bf00      	nop
 8016d00:	08018bbd 	.word	0x08018bbd
 8016d04:	08018ce0 	.word	0x08018ce0

08016d08 <_Bfree>:
 8016d08:	b570      	push	{r4, r5, r6, lr}
 8016d0a:	69c6      	ldr	r6, [r0, #28]
 8016d0c:	4605      	mov	r5, r0
 8016d0e:	460c      	mov	r4, r1
 8016d10:	b976      	cbnz	r6, 8016d30 <_Bfree+0x28>
 8016d12:	2010      	movs	r0, #16
 8016d14:	f7ff ff02 	bl	8016b1c <malloc>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	61e8      	str	r0, [r5, #28]
 8016d1c:	b920      	cbnz	r0, 8016d28 <_Bfree+0x20>
 8016d1e:	4b09      	ldr	r3, [pc, #36]	@ (8016d44 <_Bfree+0x3c>)
 8016d20:	218f      	movs	r1, #143	@ 0x8f
 8016d22:	4809      	ldr	r0, [pc, #36]	@ (8016d48 <_Bfree+0x40>)
 8016d24:	f7ff f840 	bl	8015da8 <__assert_func>
 8016d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d2c:	6006      	str	r6, [r0, #0]
 8016d2e:	60c6      	str	r6, [r0, #12]
 8016d30:	b13c      	cbz	r4, 8016d42 <_Bfree+0x3a>
 8016d32:	69eb      	ldr	r3, [r5, #28]
 8016d34:	6862      	ldr	r2, [r4, #4]
 8016d36:	68db      	ldr	r3, [r3, #12]
 8016d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016d3c:	6021      	str	r1, [r4, #0]
 8016d3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016d42:	bd70      	pop	{r4, r5, r6, pc}
 8016d44:	08018bbd 	.word	0x08018bbd
 8016d48:	08018ce0 	.word	0x08018ce0

08016d4c <__multadd>:
 8016d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d50:	f101 0c14 	add.w	ip, r1, #20
 8016d54:	4607      	mov	r7, r0
 8016d56:	460c      	mov	r4, r1
 8016d58:	461e      	mov	r6, r3
 8016d5a:	690d      	ldr	r5, [r1, #16]
 8016d5c:	2000      	movs	r0, #0
 8016d5e:	f8dc 3000 	ldr.w	r3, [ip]
 8016d62:	3001      	adds	r0, #1
 8016d64:	b299      	uxth	r1, r3
 8016d66:	4285      	cmp	r5, r0
 8016d68:	fb02 6101 	mla	r1, r2, r1, r6
 8016d6c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016d70:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8016d74:	b289      	uxth	r1, r1
 8016d76:	fb02 3306 	mla	r3, r2, r6, r3
 8016d7a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016d7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016d82:	f84c 1b04 	str.w	r1, [ip], #4
 8016d86:	dcea      	bgt.n	8016d5e <__multadd+0x12>
 8016d88:	b30e      	cbz	r6, 8016dce <__multadd+0x82>
 8016d8a:	68a3      	ldr	r3, [r4, #8]
 8016d8c:	42ab      	cmp	r3, r5
 8016d8e:	dc19      	bgt.n	8016dc4 <__multadd+0x78>
 8016d90:	6861      	ldr	r1, [r4, #4]
 8016d92:	4638      	mov	r0, r7
 8016d94:	3101      	adds	r1, #1
 8016d96:	f7ff ff77 	bl	8016c88 <_Balloc>
 8016d9a:	4680      	mov	r8, r0
 8016d9c:	b928      	cbnz	r0, 8016daa <__multadd+0x5e>
 8016d9e:	4602      	mov	r2, r0
 8016da0:	4b0c      	ldr	r3, [pc, #48]	@ (8016dd4 <__multadd+0x88>)
 8016da2:	21ba      	movs	r1, #186	@ 0xba
 8016da4:	480c      	ldr	r0, [pc, #48]	@ (8016dd8 <__multadd+0x8c>)
 8016da6:	f7fe ffff 	bl	8015da8 <__assert_func>
 8016daa:	6922      	ldr	r2, [r4, #16]
 8016dac:	f104 010c 	add.w	r1, r4, #12
 8016db0:	300c      	adds	r0, #12
 8016db2:	3202      	adds	r2, #2
 8016db4:	0092      	lsls	r2, r2, #2
 8016db6:	f7fe ffea 	bl	8015d8e <memcpy>
 8016dba:	4621      	mov	r1, r4
 8016dbc:	4644      	mov	r4, r8
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	f7ff ffa2 	bl	8016d08 <_Bfree>
 8016dc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016dc8:	3501      	adds	r5, #1
 8016dca:	615e      	str	r6, [r3, #20]
 8016dcc:	6125      	str	r5, [r4, #16]
 8016dce:	4620      	mov	r0, r4
 8016dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dd4:	08018ccf 	.word	0x08018ccf
 8016dd8:	08018ce0 	.word	0x08018ce0

08016ddc <__hi0bits>:
 8016ddc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016de0:	4603      	mov	r3, r0
 8016de2:	bf36      	itet	cc
 8016de4:	0403      	lslcc	r3, r0, #16
 8016de6:	2000      	movcs	r0, #0
 8016de8:	2010      	movcc	r0, #16
 8016dea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016dee:	bf3c      	itt	cc
 8016df0:	021b      	lslcc	r3, r3, #8
 8016df2:	3008      	addcc	r0, #8
 8016df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016df8:	bf3c      	itt	cc
 8016dfa:	011b      	lslcc	r3, r3, #4
 8016dfc:	3004      	addcc	r0, #4
 8016dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e02:	bf3c      	itt	cc
 8016e04:	009b      	lslcc	r3, r3, #2
 8016e06:	3002      	addcc	r0, #2
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	db05      	blt.n	8016e18 <__hi0bits+0x3c>
 8016e0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016e10:	f100 0001 	add.w	r0, r0, #1
 8016e14:	bf08      	it	eq
 8016e16:	2020      	moveq	r0, #32
 8016e18:	4770      	bx	lr

08016e1a <__lo0bits>:
 8016e1a:	6803      	ldr	r3, [r0, #0]
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	f013 0007 	ands.w	r0, r3, #7
 8016e22:	d00b      	beq.n	8016e3c <__lo0bits+0x22>
 8016e24:	07d9      	lsls	r1, r3, #31
 8016e26:	d421      	bmi.n	8016e6c <__lo0bits+0x52>
 8016e28:	0798      	lsls	r0, r3, #30
 8016e2a:	bf47      	ittee	mi
 8016e2c:	085b      	lsrmi	r3, r3, #1
 8016e2e:	2001      	movmi	r0, #1
 8016e30:	089b      	lsrpl	r3, r3, #2
 8016e32:	2002      	movpl	r0, #2
 8016e34:	bf4c      	ite	mi
 8016e36:	6013      	strmi	r3, [r2, #0]
 8016e38:	6013      	strpl	r3, [r2, #0]
 8016e3a:	4770      	bx	lr
 8016e3c:	b299      	uxth	r1, r3
 8016e3e:	b909      	cbnz	r1, 8016e44 <__lo0bits+0x2a>
 8016e40:	0c1b      	lsrs	r3, r3, #16
 8016e42:	2010      	movs	r0, #16
 8016e44:	b2d9      	uxtb	r1, r3
 8016e46:	b909      	cbnz	r1, 8016e4c <__lo0bits+0x32>
 8016e48:	3008      	adds	r0, #8
 8016e4a:	0a1b      	lsrs	r3, r3, #8
 8016e4c:	0719      	lsls	r1, r3, #28
 8016e4e:	bf04      	itt	eq
 8016e50:	091b      	lsreq	r3, r3, #4
 8016e52:	3004      	addeq	r0, #4
 8016e54:	0799      	lsls	r1, r3, #30
 8016e56:	bf04      	itt	eq
 8016e58:	089b      	lsreq	r3, r3, #2
 8016e5a:	3002      	addeq	r0, #2
 8016e5c:	07d9      	lsls	r1, r3, #31
 8016e5e:	d403      	bmi.n	8016e68 <__lo0bits+0x4e>
 8016e60:	085b      	lsrs	r3, r3, #1
 8016e62:	f100 0001 	add.w	r0, r0, #1
 8016e66:	d003      	beq.n	8016e70 <__lo0bits+0x56>
 8016e68:	6013      	str	r3, [r2, #0]
 8016e6a:	4770      	bx	lr
 8016e6c:	2000      	movs	r0, #0
 8016e6e:	4770      	bx	lr
 8016e70:	2020      	movs	r0, #32
 8016e72:	4770      	bx	lr

08016e74 <__i2b>:
 8016e74:	b510      	push	{r4, lr}
 8016e76:	460c      	mov	r4, r1
 8016e78:	2101      	movs	r1, #1
 8016e7a:	f7ff ff05 	bl	8016c88 <_Balloc>
 8016e7e:	4602      	mov	r2, r0
 8016e80:	b928      	cbnz	r0, 8016e8e <__i2b+0x1a>
 8016e82:	4b05      	ldr	r3, [pc, #20]	@ (8016e98 <__i2b+0x24>)
 8016e84:	f240 1145 	movw	r1, #325	@ 0x145
 8016e88:	4804      	ldr	r0, [pc, #16]	@ (8016e9c <__i2b+0x28>)
 8016e8a:	f7fe ff8d 	bl	8015da8 <__assert_func>
 8016e8e:	2301      	movs	r3, #1
 8016e90:	6144      	str	r4, [r0, #20]
 8016e92:	6103      	str	r3, [r0, #16]
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	bf00      	nop
 8016e98:	08018ccf 	.word	0x08018ccf
 8016e9c:	08018ce0 	.word	0x08018ce0

08016ea0 <__multiply>:
 8016ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea4:	4614      	mov	r4, r2
 8016ea6:	690a      	ldr	r2, [r1, #16]
 8016ea8:	460f      	mov	r7, r1
 8016eaa:	b085      	sub	sp, #20
 8016eac:	6923      	ldr	r3, [r4, #16]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	bfa2      	ittt	ge
 8016eb2:	4623      	movge	r3, r4
 8016eb4:	460c      	movge	r4, r1
 8016eb6:	461f      	movge	r7, r3
 8016eb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016ebc:	68a3      	ldr	r3, [r4, #8]
 8016ebe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016ec2:	6861      	ldr	r1, [r4, #4]
 8016ec4:	eb0a 0609 	add.w	r6, sl, r9
 8016ec8:	42b3      	cmp	r3, r6
 8016eca:	bfb8      	it	lt
 8016ecc:	3101      	addlt	r1, #1
 8016ece:	f7ff fedb 	bl	8016c88 <_Balloc>
 8016ed2:	b930      	cbnz	r0, 8016ee2 <__multiply+0x42>
 8016ed4:	4602      	mov	r2, r0
 8016ed6:	4b45      	ldr	r3, [pc, #276]	@ (8016fec <__multiply+0x14c>)
 8016ed8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016edc:	4844      	ldr	r0, [pc, #272]	@ (8016ff0 <__multiply+0x150>)
 8016ede:	f7fe ff63 	bl	8015da8 <__assert_func>
 8016ee2:	f100 0514 	add.w	r5, r0, #20
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016eec:	462b      	mov	r3, r5
 8016eee:	4543      	cmp	r3, r8
 8016ef0:	d321      	bcc.n	8016f36 <__multiply+0x96>
 8016ef2:	f107 0114 	add.w	r1, r7, #20
 8016ef6:	f104 0214 	add.w	r2, r4, #20
 8016efa:	f104 0715 	add.w	r7, r4, #21
 8016efe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016f02:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016f06:	9302      	str	r3, [sp, #8]
 8016f08:	1b13      	subs	r3, r2, r4
 8016f0a:	3b15      	subs	r3, #21
 8016f0c:	f023 0303 	bic.w	r3, r3, #3
 8016f10:	3304      	adds	r3, #4
 8016f12:	42ba      	cmp	r2, r7
 8016f14:	bf38      	it	cc
 8016f16:	2304      	movcc	r3, #4
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	9b02      	ldr	r3, [sp, #8]
 8016f1c:	9103      	str	r1, [sp, #12]
 8016f1e:	428b      	cmp	r3, r1
 8016f20:	d80c      	bhi.n	8016f3c <__multiply+0x9c>
 8016f22:	2e00      	cmp	r6, #0
 8016f24:	dd03      	ble.n	8016f2e <__multiply+0x8e>
 8016f26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d05b      	beq.n	8016fe6 <__multiply+0x146>
 8016f2e:	6106      	str	r6, [r0, #16]
 8016f30:	b005      	add	sp, #20
 8016f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f36:	f843 2b04 	str.w	r2, [r3], #4
 8016f3a:	e7d8      	b.n	8016eee <__multiply+0x4e>
 8016f3c:	f8b1 a000 	ldrh.w	sl, [r1]
 8016f40:	f1ba 0f00 	cmp.w	sl, #0
 8016f44:	d024      	beq.n	8016f90 <__multiply+0xf0>
 8016f46:	f104 0e14 	add.w	lr, r4, #20
 8016f4a:	46a9      	mov	r9, r5
 8016f4c:	f04f 0c00 	mov.w	ip, #0
 8016f50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016f54:	f8d9 3000 	ldr.w	r3, [r9]
 8016f58:	fa1f fb87 	uxth.w	fp, r7
 8016f5c:	4572      	cmp	r2, lr
 8016f5e:	b29b      	uxth	r3, r3
 8016f60:	fb0a 330b 	mla	r3, sl, fp, r3
 8016f64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016f68:	f8d9 7000 	ldr.w	r7, [r9]
 8016f6c:	4463      	add	r3, ip
 8016f6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016f72:	fb0a c70b 	mla	r7, sl, fp, ip
 8016f76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016f80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016f84:	f849 3b04 	str.w	r3, [r9], #4
 8016f88:	d8e2      	bhi.n	8016f50 <__multiply+0xb0>
 8016f8a:	9b01      	ldr	r3, [sp, #4]
 8016f8c:	f845 c003 	str.w	ip, [r5, r3]
 8016f90:	9b03      	ldr	r3, [sp, #12]
 8016f92:	3104      	adds	r1, #4
 8016f94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016f98:	f1b9 0f00 	cmp.w	r9, #0
 8016f9c:	d021      	beq.n	8016fe2 <__multiply+0x142>
 8016f9e:	682b      	ldr	r3, [r5, #0]
 8016fa0:	f104 0c14 	add.w	ip, r4, #20
 8016fa4:	46ae      	mov	lr, r5
 8016fa6:	f04f 0a00 	mov.w	sl, #0
 8016faa:	f8bc b000 	ldrh.w	fp, [ip]
 8016fae:	b29b      	uxth	r3, r3
 8016fb0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016fb4:	fb09 770b 	mla	r7, r9, fp, r7
 8016fb8:	4457      	add	r7, sl
 8016fba:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016fbe:	f84e 3b04 	str.w	r3, [lr], #4
 8016fc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016fca:	f8be 3000 	ldrh.w	r3, [lr]
 8016fce:	4562      	cmp	r2, ip
 8016fd0:	fb09 330a 	mla	r3, r9, sl, r3
 8016fd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016fd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016fdc:	d8e5      	bhi.n	8016faa <__multiply+0x10a>
 8016fde:	9f01      	ldr	r7, [sp, #4]
 8016fe0:	51eb      	str	r3, [r5, r7]
 8016fe2:	3504      	adds	r5, #4
 8016fe4:	e799      	b.n	8016f1a <__multiply+0x7a>
 8016fe6:	3e01      	subs	r6, #1
 8016fe8:	e79b      	b.n	8016f22 <__multiply+0x82>
 8016fea:	bf00      	nop
 8016fec:	08018ccf 	.word	0x08018ccf
 8016ff0:	08018ce0 	.word	0x08018ce0

08016ff4 <__pow5mult>:
 8016ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ff8:	4615      	mov	r5, r2
 8016ffa:	f012 0203 	ands.w	r2, r2, #3
 8016ffe:	4607      	mov	r7, r0
 8017000:	460e      	mov	r6, r1
 8017002:	d007      	beq.n	8017014 <__pow5mult+0x20>
 8017004:	3a01      	subs	r2, #1
 8017006:	4c25      	ldr	r4, [pc, #148]	@ (801709c <__pow5mult+0xa8>)
 8017008:	2300      	movs	r3, #0
 801700a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801700e:	f7ff fe9d 	bl	8016d4c <__multadd>
 8017012:	4606      	mov	r6, r0
 8017014:	10ad      	asrs	r5, r5, #2
 8017016:	d03d      	beq.n	8017094 <__pow5mult+0xa0>
 8017018:	69fc      	ldr	r4, [r7, #28]
 801701a:	b97c      	cbnz	r4, 801703c <__pow5mult+0x48>
 801701c:	2010      	movs	r0, #16
 801701e:	f7ff fd7d 	bl	8016b1c <malloc>
 8017022:	4602      	mov	r2, r0
 8017024:	61f8      	str	r0, [r7, #28]
 8017026:	b928      	cbnz	r0, 8017034 <__pow5mult+0x40>
 8017028:	4b1d      	ldr	r3, [pc, #116]	@ (80170a0 <__pow5mult+0xac>)
 801702a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801702e:	481d      	ldr	r0, [pc, #116]	@ (80170a4 <__pow5mult+0xb0>)
 8017030:	f7fe feba 	bl	8015da8 <__assert_func>
 8017034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017038:	6004      	str	r4, [r0, #0]
 801703a:	60c4      	str	r4, [r0, #12]
 801703c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017044:	b94c      	cbnz	r4, 801705a <__pow5mult+0x66>
 8017046:	f240 2171 	movw	r1, #625	@ 0x271
 801704a:	4638      	mov	r0, r7
 801704c:	f7ff ff12 	bl	8016e74 <__i2b>
 8017050:	2300      	movs	r3, #0
 8017052:	4604      	mov	r4, r0
 8017054:	f8c8 0008 	str.w	r0, [r8, #8]
 8017058:	6003      	str	r3, [r0, #0]
 801705a:	f04f 0900 	mov.w	r9, #0
 801705e:	07eb      	lsls	r3, r5, #31
 8017060:	d50a      	bpl.n	8017078 <__pow5mult+0x84>
 8017062:	4631      	mov	r1, r6
 8017064:	4622      	mov	r2, r4
 8017066:	4638      	mov	r0, r7
 8017068:	f7ff ff1a 	bl	8016ea0 <__multiply>
 801706c:	4680      	mov	r8, r0
 801706e:	4631      	mov	r1, r6
 8017070:	4638      	mov	r0, r7
 8017072:	4646      	mov	r6, r8
 8017074:	f7ff fe48 	bl	8016d08 <_Bfree>
 8017078:	106d      	asrs	r5, r5, #1
 801707a:	d00b      	beq.n	8017094 <__pow5mult+0xa0>
 801707c:	6820      	ldr	r0, [r4, #0]
 801707e:	b938      	cbnz	r0, 8017090 <__pow5mult+0x9c>
 8017080:	4622      	mov	r2, r4
 8017082:	4621      	mov	r1, r4
 8017084:	4638      	mov	r0, r7
 8017086:	f7ff ff0b 	bl	8016ea0 <__multiply>
 801708a:	6020      	str	r0, [r4, #0]
 801708c:	f8c0 9000 	str.w	r9, [r0]
 8017090:	4604      	mov	r4, r0
 8017092:	e7e4      	b.n	801705e <__pow5mult+0x6a>
 8017094:	4630      	mov	r0, r6
 8017096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801709a:	bf00      	nop
 801709c:	08018d3c 	.word	0x08018d3c
 80170a0:	08018bbd 	.word	0x08018bbd
 80170a4:	08018ce0 	.word	0x08018ce0

080170a8 <__lshift>:
 80170a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170ac:	460c      	mov	r4, r1
 80170ae:	4607      	mov	r7, r0
 80170b0:	4691      	mov	r9, r2
 80170b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80170b6:	6923      	ldr	r3, [r4, #16]
 80170b8:	6849      	ldr	r1, [r1, #4]
 80170ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80170be:	68a3      	ldr	r3, [r4, #8]
 80170c0:	f108 0601 	add.w	r6, r8, #1
 80170c4:	42b3      	cmp	r3, r6
 80170c6:	db0b      	blt.n	80170e0 <__lshift+0x38>
 80170c8:	4638      	mov	r0, r7
 80170ca:	f7ff fddd 	bl	8016c88 <_Balloc>
 80170ce:	4605      	mov	r5, r0
 80170d0:	b948      	cbnz	r0, 80170e6 <__lshift+0x3e>
 80170d2:	4602      	mov	r2, r0
 80170d4:	4b28      	ldr	r3, [pc, #160]	@ (8017178 <__lshift+0xd0>)
 80170d6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80170da:	4828      	ldr	r0, [pc, #160]	@ (801717c <__lshift+0xd4>)
 80170dc:	f7fe fe64 	bl	8015da8 <__assert_func>
 80170e0:	3101      	adds	r1, #1
 80170e2:	005b      	lsls	r3, r3, #1
 80170e4:	e7ee      	b.n	80170c4 <__lshift+0x1c>
 80170e6:	2300      	movs	r3, #0
 80170e8:	f100 0114 	add.w	r1, r0, #20
 80170ec:	f100 0210 	add.w	r2, r0, #16
 80170f0:	4618      	mov	r0, r3
 80170f2:	4553      	cmp	r3, sl
 80170f4:	db33      	blt.n	801715e <__lshift+0xb6>
 80170f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80170fa:	f104 0314 	add.w	r3, r4, #20
 80170fe:	6920      	ldr	r0, [r4, #16]
 8017100:	f019 091f 	ands.w	r9, r9, #31
 8017104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017108:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801710c:	d02b      	beq.n	8017166 <__lshift+0xbe>
 801710e:	f1c9 0e20 	rsb	lr, r9, #32
 8017112:	468a      	mov	sl, r1
 8017114:	2200      	movs	r2, #0
 8017116:	6818      	ldr	r0, [r3, #0]
 8017118:	fa00 f009 	lsl.w	r0, r0, r9
 801711c:	4310      	orrs	r0, r2
 801711e:	f84a 0b04 	str.w	r0, [sl], #4
 8017122:	f853 2b04 	ldr.w	r2, [r3], #4
 8017126:	459c      	cmp	ip, r3
 8017128:	fa22 f20e 	lsr.w	r2, r2, lr
 801712c:	d8f3      	bhi.n	8017116 <__lshift+0x6e>
 801712e:	ebac 0304 	sub.w	r3, ip, r4
 8017132:	f104 0015 	add.w	r0, r4, #21
 8017136:	3b15      	subs	r3, #21
 8017138:	f023 0303 	bic.w	r3, r3, #3
 801713c:	3304      	adds	r3, #4
 801713e:	4584      	cmp	ip, r0
 8017140:	bf38      	it	cc
 8017142:	2304      	movcc	r3, #4
 8017144:	50ca      	str	r2, [r1, r3]
 8017146:	b10a      	cbz	r2, 801714c <__lshift+0xa4>
 8017148:	f108 0602 	add.w	r6, r8, #2
 801714c:	3e01      	subs	r6, #1
 801714e:	4638      	mov	r0, r7
 8017150:	4621      	mov	r1, r4
 8017152:	612e      	str	r6, [r5, #16]
 8017154:	f7ff fdd8 	bl	8016d08 <_Bfree>
 8017158:	4628      	mov	r0, r5
 801715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801715e:	3301      	adds	r3, #1
 8017160:	f842 0f04 	str.w	r0, [r2, #4]!
 8017164:	e7c5      	b.n	80170f2 <__lshift+0x4a>
 8017166:	3904      	subs	r1, #4
 8017168:	f853 2b04 	ldr.w	r2, [r3], #4
 801716c:	459c      	cmp	ip, r3
 801716e:	f841 2f04 	str.w	r2, [r1, #4]!
 8017172:	d8f9      	bhi.n	8017168 <__lshift+0xc0>
 8017174:	e7ea      	b.n	801714c <__lshift+0xa4>
 8017176:	bf00      	nop
 8017178:	08018ccf 	.word	0x08018ccf
 801717c:	08018ce0 	.word	0x08018ce0

08017180 <__mcmp>:
 8017180:	4603      	mov	r3, r0
 8017182:	690a      	ldr	r2, [r1, #16]
 8017184:	6900      	ldr	r0, [r0, #16]
 8017186:	1a80      	subs	r0, r0, r2
 8017188:	b530      	push	{r4, r5, lr}
 801718a:	d10e      	bne.n	80171aa <__mcmp+0x2a>
 801718c:	3314      	adds	r3, #20
 801718e:	3114      	adds	r1, #20
 8017190:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017194:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017198:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801719c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80171a0:	4295      	cmp	r5, r2
 80171a2:	d003      	beq.n	80171ac <__mcmp+0x2c>
 80171a4:	d205      	bcs.n	80171b2 <__mcmp+0x32>
 80171a6:	f04f 30ff 	mov.w	r0, #4294967295
 80171aa:	bd30      	pop	{r4, r5, pc}
 80171ac:	42a3      	cmp	r3, r4
 80171ae:	d3f3      	bcc.n	8017198 <__mcmp+0x18>
 80171b0:	e7fb      	b.n	80171aa <__mcmp+0x2a>
 80171b2:	2001      	movs	r0, #1
 80171b4:	e7f9      	b.n	80171aa <__mcmp+0x2a>
	...

080171b8 <__mdiff>:
 80171b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	4689      	mov	r9, r1
 80171be:	4606      	mov	r6, r0
 80171c0:	4611      	mov	r1, r2
 80171c2:	4614      	mov	r4, r2
 80171c4:	4648      	mov	r0, r9
 80171c6:	f7ff ffdb 	bl	8017180 <__mcmp>
 80171ca:	1e05      	subs	r5, r0, #0
 80171cc:	d112      	bne.n	80171f4 <__mdiff+0x3c>
 80171ce:	4629      	mov	r1, r5
 80171d0:	4630      	mov	r0, r6
 80171d2:	f7ff fd59 	bl	8016c88 <_Balloc>
 80171d6:	4602      	mov	r2, r0
 80171d8:	b928      	cbnz	r0, 80171e6 <__mdiff+0x2e>
 80171da:	4b41      	ldr	r3, [pc, #260]	@ (80172e0 <__mdiff+0x128>)
 80171dc:	f240 2137 	movw	r1, #567	@ 0x237
 80171e0:	4840      	ldr	r0, [pc, #256]	@ (80172e4 <__mdiff+0x12c>)
 80171e2:	f7fe fde1 	bl	8015da8 <__assert_func>
 80171e6:	2301      	movs	r3, #1
 80171e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80171ec:	4610      	mov	r0, r2
 80171ee:	b003      	add	sp, #12
 80171f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f4:	bfbc      	itt	lt
 80171f6:	464b      	movlt	r3, r9
 80171f8:	46a1      	movlt	r9, r4
 80171fa:	4630      	mov	r0, r6
 80171fc:	bfb8      	it	lt
 80171fe:	2501      	movlt	r5, #1
 8017200:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017204:	bfb4      	ite	lt
 8017206:	461c      	movlt	r4, r3
 8017208:	2500      	movge	r5, #0
 801720a:	f7ff fd3d 	bl	8016c88 <_Balloc>
 801720e:	4602      	mov	r2, r0
 8017210:	b918      	cbnz	r0, 801721a <__mdiff+0x62>
 8017212:	4b33      	ldr	r3, [pc, #204]	@ (80172e0 <__mdiff+0x128>)
 8017214:	f240 2145 	movw	r1, #581	@ 0x245
 8017218:	e7e2      	b.n	80171e0 <__mdiff+0x28>
 801721a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801721e:	f104 0e14 	add.w	lr, r4, #20
 8017222:	6926      	ldr	r6, [r4, #16]
 8017224:	f100 0b14 	add.w	fp, r0, #20
 8017228:	60c5      	str	r5, [r0, #12]
 801722a:	f109 0514 	add.w	r5, r9, #20
 801722e:	f109 0310 	add.w	r3, r9, #16
 8017232:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017236:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801723a:	46d9      	mov	r9, fp
 801723c:	f04f 0c00 	mov.w	ip, #0
 8017240:	9301      	str	r3, [sp, #4]
 8017242:	9b01      	ldr	r3, [sp, #4]
 8017244:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017248:	f853 af04 	ldr.w	sl, [r3, #4]!
 801724c:	4576      	cmp	r6, lr
 801724e:	9301      	str	r3, [sp, #4]
 8017250:	fa1f f38a 	uxth.w	r3, sl
 8017254:	4619      	mov	r1, r3
 8017256:	b283      	uxth	r3, r0
 8017258:	ea4f 4010 	mov.w	r0, r0, lsr #16
 801725c:	eba1 0303 	sub.w	r3, r1, r3
 8017260:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017264:	4463      	add	r3, ip
 8017266:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801726a:	b29b      	uxth	r3, r3
 801726c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017270:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017274:	f849 3b04 	str.w	r3, [r9], #4
 8017278:	d8e3      	bhi.n	8017242 <__mdiff+0x8a>
 801727a:	1b33      	subs	r3, r6, r4
 801727c:	3415      	adds	r4, #21
 801727e:	3b15      	subs	r3, #21
 8017280:	f023 0303 	bic.w	r3, r3, #3
 8017284:	3304      	adds	r3, #4
 8017286:	42a6      	cmp	r6, r4
 8017288:	bf38      	it	cc
 801728a:	2304      	movcc	r3, #4
 801728c:	441d      	add	r5, r3
 801728e:	445b      	add	r3, fp
 8017290:	462c      	mov	r4, r5
 8017292:	461e      	mov	r6, r3
 8017294:	4544      	cmp	r4, r8
 8017296:	d30e      	bcc.n	80172b6 <__mdiff+0xfe>
 8017298:	f108 0103 	add.w	r1, r8, #3
 801729c:	1b49      	subs	r1, r1, r5
 801729e:	3d03      	subs	r5, #3
 80172a0:	f021 0103 	bic.w	r1, r1, #3
 80172a4:	45a8      	cmp	r8, r5
 80172a6:	bf38      	it	cc
 80172a8:	2100      	movcc	r1, #0
 80172aa:	440b      	add	r3, r1
 80172ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80172b0:	b199      	cbz	r1, 80172da <__mdiff+0x122>
 80172b2:	6117      	str	r7, [r2, #16]
 80172b4:	e79a      	b.n	80171ec <__mdiff+0x34>
 80172b6:	f854 1b04 	ldr.w	r1, [r4], #4
 80172ba:	46e6      	mov	lr, ip
 80172bc:	fa1f fc81 	uxth.w	ip, r1
 80172c0:	0c08      	lsrs	r0, r1, #16
 80172c2:	4471      	add	r1, lr
 80172c4:	44f4      	add	ip, lr
 80172c6:	b289      	uxth	r1, r1
 80172c8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80172cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80172d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80172d4:	f846 1b04 	str.w	r1, [r6], #4
 80172d8:	e7dc      	b.n	8017294 <__mdiff+0xdc>
 80172da:	3f01      	subs	r7, #1
 80172dc:	e7e6      	b.n	80172ac <__mdiff+0xf4>
 80172de:	bf00      	nop
 80172e0:	08018ccf 	.word	0x08018ccf
 80172e4:	08018ce0 	.word	0x08018ce0

080172e8 <__d2b>:
 80172e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80172ec:	460f      	mov	r7, r1
 80172ee:	2101      	movs	r1, #1
 80172f0:	4616      	mov	r6, r2
 80172f2:	ec59 8b10 	vmov	r8, r9, d0
 80172f6:	f7ff fcc7 	bl	8016c88 <_Balloc>
 80172fa:	4604      	mov	r4, r0
 80172fc:	b930      	cbnz	r0, 801730c <__d2b+0x24>
 80172fe:	4602      	mov	r2, r0
 8017300:	4b23      	ldr	r3, [pc, #140]	@ (8017390 <__d2b+0xa8>)
 8017302:	f240 310f 	movw	r1, #783	@ 0x30f
 8017306:	4823      	ldr	r0, [pc, #140]	@ (8017394 <__d2b+0xac>)
 8017308:	f7fe fd4e 	bl	8015da8 <__assert_func>
 801730c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017314:	b10d      	cbz	r5, 801731a <__d2b+0x32>
 8017316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801731a:	9301      	str	r3, [sp, #4]
 801731c:	f1b8 0300 	subs.w	r3, r8, #0
 8017320:	d023      	beq.n	801736a <__d2b+0x82>
 8017322:	4668      	mov	r0, sp
 8017324:	9300      	str	r3, [sp, #0]
 8017326:	f7ff fd78 	bl	8016e1a <__lo0bits>
 801732a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801732e:	b1d0      	cbz	r0, 8017366 <__d2b+0x7e>
 8017330:	f1c0 0320 	rsb	r3, r0, #32
 8017334:	fa02 f303 	lsl.w	r3, r2, r3
 8017338:	40c2      	lsrs	r2, r0
 801733a:	430b      	orrs	r3, r1
 801733c:	9201      	str	r2, [sp, #4]
 801733e:	6163      	str	r3, [r4, #20]
 8017340:	9b01      	ldr	r3, [sp, #4]
 8017342:	2b00      	cmp	r3, #0
 8017344:	61a3      	str	r3, [r4, #24]
 8017346:	bf0c      	ite	eq
 8017348:	2201      	moveq	r2, #1
 801734a:	2202      	movne	r2, #2
 801734c:	6122      	str	r2, [r4, #16]
 801734e:	b1a5      	cbz	r5, 801737a <__d2b+0x92>
 8017350:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017354:	4405      	add	r5, r0
 8017356:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801735a:	603d      	str	r5, [r7, #0]
 801735c:	6030      	str	r0, [r6, #0]
 801735e:	4620      	mov	r0, r4
 8017360:	b003      	add	sp, #12
 8017362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017366:	6161      	str	r1, [r4, #20]
 8017368:	e7ea      	b.n	8017340 <__d2b+0x58>
 801736a:	a801      	add	r0, sp, #4
 801736c:	f7ff fd55 	bl	8016e1a <__lo0bits>
 8017370:	9b01      	ldr	r3, [sp, #4]
 8017372:	3020      	adds	r0, #32
 8017374:	2201      	movs	r2, #1
 8017376:	6163      	str	r3, [r4, #20]
 8017378:	e7e8      	b.n	801734c <__d2b+0x64>
 801737a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801737e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017382:	6038      	str	r0, [r7, #0]
 8017384:	6918      	ldr	r0, [r3, #16]
 8017386:	f7ff fd29 	bl	8016ddc <__hi0bits>
 801738a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801738e:	e7e5      	b.n	801735c <__d2b+0x74>
 8017390:	08018ccf 	.word	0x08018ccf
 8017394:	08018ce0 	.word	0x08018ce0

08017398 <__ssputs_r>:
 8017398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801739c:	461f      	mov	r7, r3
 801739e:	688e      	ldr	r6, [r1, #8]
 80173a0:	4682      	mov	sl, r0
 80173a2:	460c      	mov	r4, r1
 80173a4:	42be      	cmp	r6, r7
 80173a6:	4690      	mov	r8, r2
 80173a8:	680b      	ldr	r3, [r1, #0]
 80173aa:	d82d      	bhi.n	8017408 <__ssputs_r+0x70>
 80173ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80173b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80173b4:	d026      	beq.n	8017404 <__ssputs_r+0x6c>
 80173b6:	6965      	ldr	r5, [r4, #20]
 80173b8:	6909      	ldr	r1, [r1, #16]
 80173ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173be:	eba3 0901 	sub.w	r9, r3, r1
 80173c2:	1c7b      	adds	r3, r7, #1
 80173c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173c8:	444b      	add	r3, r9
 80173ca:	106d      	asrs	r5, r5, #1
 80173cc:	429d      	cmp	r5, r3
 80173ce:	bf38      	it	cc
 80173d0:	461d      	movcc	r5, r3
 80173d2:	0553      	lsls	r3, r2, #21
 80173d4:	d527      	bpl.n	8017426 <__ssputs_r+0x8e>
 80173d6:	4629      	mov	r1, r5
 80173d8:	f7ff fbca 	bl	8016b70 <_malloc_r>
 80173dc:	4606      	mov	r6, r0
 80173de:	b360      	cbz	r0, 801743a <__ssputs_r+0xa2>
 80173e0:	464a      	mov	r2, r9
 80173e2:	6921      	ldr	r1, [r4, #16]
 80173e4:	f7fe fcd3 	bl	8015d8e <memcpy>
 80173e8:	89a3      	ldrh	r3, [r4, #12]
 80173ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80173ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80173f2:	81a3      	strh	r3, [r4, #12]
 80173f4:	6126      	str	r6, [r4, #16]
 80173f6:	444e      	add	r6, r9
 80173f8:	6165      	str	r5, [r4, #20]
 80173fa:	eba5 0509 	sub.w	r5, r5, r9
 80173fe:	6026      	str	r6, [r4, #0]
 8017400:	463e      	mov	r6, r7
 8017402:	60a5      	str	r5, [r4, #8]
 8017404:	42be      	cmp	r6, r7
 8017406:	d900      	bls.n	801740a <__ssputs_r+0x72>
 8017408:	463e      	mov	r6, r7
 801740a:	4632      	mov	r2, r6
 801740c:	4641      	mov	r1, r8
 801740e:	6820      	ldr	r0, [r4, #0]
 8017410:	f000 fa6d 	bl	80178ee <memmove>
 8017414:	68a3      	ldr	r3, [r4, #8]
 8017416:	2000      	movs	r0, #0
 8017418:	1b9b      	subs	r3, r3, r6
 801741a:	60a3      	str	r3, [r4, #8]
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	4433      	add	r3, r6
 8017420:	6023      	str	r3, [r4, #0]
 8017422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017426:	462a      	mov	r2, r5
 8017428:	f000 fadb 	bl	80179e2 <_realloc_r>
 801742c:	4606      	mov	r6, r0
 801742e:	2800      	cmp	r0, #0
 8017430:	d1e0      	bne.n	80173f4 <__ssputs_r+0x5c>
 8017432:	6921      	ldr	r1, [r4, #16]
 8017434:	4650      	mov	r0, sl
 8017436:	f7ff fb27 	bl	8016a88 <_free_r>
 801743a:	230c      	movs	r3, #12
 801743c:	f04f 30ff 	mov.w	r0, #4294967295
 8017440:	f8ca 3000 	str.w	r3, [sl]
 8017444:	89a3      	ldrh	r3, [r4, #12]
 8017446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801744a:	81a3      	strh	r3, [r4, #12]
 801744c:	e7e9      	b.n	8017422 <__ssputs_r+0x8a>
	...

08017450 <_svfiprintf_r>:
 8017450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017454:	4698      	mov	r8, r3
 8017456:	898b      	ldrh	r3, [r1, #12]
 8017458:	b09d      	sub	sp, #116	@ 0x74
 801745a:	4607      	mov	r7, r0
 801745c:	061b      	lsls	r3, r3, #24
 801745e:	460d      	mov	r5, r1
 8017460:	4614      	mov	r4, r2
 8017462:	d510      	bpl.n	8017486 <_svfiprintf_r+0x36>
 8017464:	690b      	ldr	r3, [r1, #16]
 8017466:	b973      	cbnz	r3, 8017486 <_svfiprintf_r+0x36>
 8017468:	2140      	movs	r1, #64	@ 0x40
 801746a:	f7ff fb81 	bl	8016b70 <_malloc_r>
 801746e:	6028      	str	r0, [r5, #0]
 8017470:	6128      	str	r0, [r5, #16]
 8017472:	b930      	cbnz	r0, 8017482 <_svfiprintf_r+0x32>
 8017474:	230c      	movs	r3, #12
 8017476:	603b      	str	r3, [r7, #0]
 8017478:	f04f 30ff 	mov.w	r0, #4294967295
 801747c:	b01d      	add	sp, #116	@ 0x74
 801747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017482:	2340      	movs	r3, #64	@ 0x40
 8017484:	616b      	str	r3, [r5, #20]
 8017486:	2300      	movs	r3, #0
 8017488:	f8cd 800c 	str.w	r8, [sp, #12]
 801748c:	f04f 0901 	mov.w	r9, #1
 8017490:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8017634 <_svfiprintf_r+0x1e4>
 8017494:	9309      	str	r3, [sp, #36]	@ 0x24
 8017496:	2320      	movs	r3, #32
 8017498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801749c:	2330      	movs	r3, #48	@ 0x30
 801749e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80174a2:	4623      	mov	r3, r4
 80174a4:	469a      	mov	sl, r3
 80174a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174aa:	b10a      	cbz	r2, 80174b0 <_svfiprintf_r+0x60>
 80174ac:	2a25      	cmp	r2, #37	@ 0x25
 80174ae:	d1f9      	bne.n	80174a4 <_svfiprintf_r+0x54>
 80174b0:	ebba 0b04 	subs.w	fp, sl, r4
 80174b4:	d00b      	beq.n	80174ce <_svfiprintf_r+0x7e>
 80174b6:	465b      	mov	r3, fp
 80174b8:	4622      	mov	r2, r4
 80174ba:	4629      	mov	r1, r5
 80174bc:	4638      	mov	r0, r7
 80174be:	f7ff ff6b 	bl	8017398 <__ssputs_r>
 80174c2:	3001      	adds	r0, #1
 80174c4:	f000 80a7 	beq.w	8017616 <_svfiprintf_r+0x1c6>
 80174c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174ca:	445a      	add	r2, fp
 80174cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80174ce:	f89a 3000 	ldrb.w	r3, [sl]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	f000 809f 	beq.w	8017616 <_svfiprintf_r+0x1c6>
 80174d8:	2300      	movs	r3, #0
 80174da:	f04f 32ff 	mov.w	r2, #4294967295
 80174de:	f10a 0a01 	add.w	sl, sl, #1
 80174e2:	9304      	str	r3, [sp, #16]
 80174e4:	9307      	str	r3, [sp, #28]
 80174e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80174ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80174ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174f0:	4654      	mov	r4, sl
 80174f2:	2205      	movs	r2, #5
 80174f4:	484f      	ldr	r0, [pc, #316]	@ (8017634 <_svfiprintf_r+0x1e4>)
 80174f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174fa:	f7fe fc3a 	bl	8015d72 <memchr>
 80174fe:	9a04      	ldr	r2, [sp, #16]
 8017500:	b9d8      	cbnz	r0, 801753a <_svfiprintf_r+0xea>
 8017502:	06d0      	lsls	r0, r2, #27
 8017504:	bf44      	itt	mi
 8017506:	2320      	movmi	r3, #32
 8017508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801750c:	0711      	lsls	r1, r2, #28
 801750e:	bf44      	itt	mi
 8017510:	232b      	movmi	r3, #43	@ 0x2b
 8017512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017516:	f89a 3000 	ldrb.w	r3, [sl]
 801751a:	2b2a      	cmp	r3, #42	@ 0x2a
 801751c:	d015      	beq.n	801754a <_svfiprintf_r+0xfa>
 801751e:	9a07      	ldr	r2, [sp, #28]
 8017520:	4654      	mov	r4, sl
 8017522:	2000      	movs	r0, #0
 8017524:	f04f 0c0a 	mov.w	ip, #10
 8017528:	4621      	mov	r1, r4
 801752a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801752e:	3b30      	subs	r3, #48	@ 0x30
 8017530:	2b09      	cmp	r3, #9
 8017532:	d94b      	bls.n	80175cc <_svfiprintf_r+0x17c>
 8017534:	b1b0      	cbz	r0, 8017564 <_svfiprintf_r+0x114>
 8017536:	9207      	str	r2, [sp, #28]
 8017538:	e014      	b.n	8017564 <_svfiprintf_r+0x114>
 801753a:	eba0 0308 	sub.w	r3, r0, r8
 801753e:	46a2      	mov	sl, r4
 8017540:	fa09 f303 	lsl.w	r3, r9, r3
 8017544:	4313      	orrs	r3, r2
 8017546:	9304      	str	r3, [sp, #16]
 8017548:	e7d2      	b.n	80174f0 <_svfiprintf_r+0xa0>
 801754a:	9b03      	ldr	r3, [sp, #12]
 801754c:	1d19      	adds	r1, r3, #4
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	9103      	str	r1, [sp, #12]
 8017554:	bfbb      	ittet	lt
 8017556:	425b      	neglt	r3, r3
 8017558:	f042 0202 	orrlt.w	r2, r2, #2
 801755c:	9307      	strge	r3, [sp, #28]
 801755e:	9307      	strlt	r3, [sp, #28]
 8017560:	bfb8      	it	lt
 8017562:	9204      	strlt	r2, [sp, #16]
 8017564:	7823      	ldrb	r3, [r4, #0]
 8017566:	2b2e      	cmp	r3, #46	@ 0x2e
 8017568:	d10a      	bne.n	8017580 <_svfiprintf_r+0x130>
 801756a:	7863      	ldrb	r3, [r4, #1]
 801756c:	2b2a      	cmp	r3, #42	@ 0x2a
 801756e:	d132      	bne.n	80175d6 <_svfiprintf_r+0x186>
 8017570:	9b03      	ldr	r3, [sp, #12]
 8017572:	3402      	adds	r4, #2
 8017574:	1d1a      	adds	r2, r3, #4
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801757c:	9203      	str	r2, [sp, #12]
 801757e:	9305      	str	r3, [sp, #20]
 8017580:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017644 <_svfiprintf_r+0x1f4>
 8017584:	2203      	movs	r2, #3
 8017586:	7821      	ldrb	r1, [r4, #0]
 8017588:	4650      	mov	r0, sl
 801758a:	f7fe fbf2 	bl	8015d72 <memchr>
 801758e:	b138      	cbz	r0, 80175a0 <_svfiprintf_r+0x150>
 8017590:	eba0 000a 	sub.w	r0, r0, sl
 8017594:	2240      	movs	r2, #64	@ 0x40
 8017596:	9b04      	ldr	r3, [sp, #16]
 8017598:	3401      	adds	r4, #1
 801759a:	4082      	lsls	r2, r0
 801759c:	4313      	orrs	r3, r2
 801759e:	9304      	str	r3, [sp, #16]
 80175a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a4:	2206      	movs	r2, #6
 80175a6:	4824      	ldr	r0, [pc, #144]	@ (8017638 <_svfiprintf_r+0x1e8>)
 80175a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80175ac:	f7fe fbe1 	bl	8015d72 <memchr>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d036      	beq.n	8017622 <_svfiprintf_r+0x1d2>
 80175b4:	4b21      	ldr	r3, [pc, #132]	@ (801763c <_svfiprintf_r+0x1ec>)
 80175b6:	bb1b      	cbnz	r3, 8017600 <_svfiprintf_r+0x1b0>
 80175b8:	9b03      	ldr	r3, [sp, #12]
 80175ba:	3307      	adds	r3, #7
 80175bc:	f023 0307 	bic.w	r3, r3, #7
 80175c0:	3308      	adds	r3, #8
 80175c2:	9303      	str	r3, [sp, #12]
 80175c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175c6:	4433      	add	r3, r6
 80175c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80175ca:	e76a      	b.n	80174a2 <_svfiprintf_r+0x52>
 80175cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80175d0:	460c      	mov	r4, r1
 80175d2:	2001      	movs	r0, #1
 80175d4:	e7a8      	b.n	8017528 <_svfiprintf_r+0xd8>
 80175d6:	2300      	movs	r3, #0
 80175d8:	3401      	adds	r4, #1
 80175da:	f04f 0c0a 	mov.w	ip, #10
 80175de:	4619      	mov	r1, r3
 80175e0:	9305      	str	r3, [sp, #20]
 80175e2:	4620      	mov	r0, r4
 80175e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175e8:	3a30      	subs	r2, #48	@ 0x30
 80175ea:	2a09      	cmp	r2, #9
 80175ec:	d903      	bls.n	80175f6 <_svfiprintf_r+0x1a6>
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d0c6      	beq.n	8017580 <_svfiprintf_r+0x130>
 80175f2:	9105      	str	r1, [sp, #20]
 80175f4:	e7c4      	b.n	8017580 <_svfiprintf_r+0x130>
 80175f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80175fa:	4604      	mov	r4, r0
 80175fc:	2301      	movs	r3, #1
 80175fe:	e7f0      	b.n	80175e2 <_svfiprintf_r+0x192>
 8017600:	ab03      	add	r3, sp, #12
 8017602:	462a      	mov	r2, r5
 8017604:	a904      	add	r1, sp, #16
 8017606:	4638      	mov	r0, r7
 8017608:	9300      	str	r3, [sp, #0]
 801760a:	4b0d      	ldr	r3, [pc, #52]	@ (8017640 <_svfiprintf_r+0x1f0>)
 801760c:	f7fd fbd4 	bl	8014db8 <_printf_float>
 8017610:	1c42      	adds	r2, r0, #1
 8017612:	4606      	mov	r6, r0
 8017614:	d1d6      	bne.n	80175c4 <_svfiprintf_r+0x174>
 8017616:	89ab      	ldrh	r3, [r5, #12]
 8017618:	065b      	lsls	r3, r3, #25
 801761a:	f53f af2d 	bmi.w	8017478 <_svfiprintf_r+0x28>
 801761e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017620:	e72c      	b.n	801747c <_svfiprintf_r+0x2c>
 8017622:	ab03      	add	r3, sp, #12
 8017624:	462a      	mov	r2, r5
 8017626:	a904      	add	r1, sp, #16
 8017628:	4638      	mov	r0, r7
 801762a:	9300      	str	r3, [sp, #0]
 801762c:	4b04      	ldr	r3, [pc, #16]	@ (8017640 <_svfiprintf_r+0x1f0>)
 801762e:	f7fd fe5f 	bl	80152f0 <_printf_i>
 8017632:	e7ed      	b.n	8017610 <_svfiprintf_r+0x1c0>
 8017634:	08018e38 	.word	0x08018e38
 8017638:	08018e42 	.word	0x08018e42
 801763c:	08014db9 	.word	0x08014db9
 8017640:	08017399 	.word	0x08017399
 8017644:	08018e3e 	.word	0x08018e3e

08017648 <__sflush_r>:
 8017648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017650:	0716      	lsls	r6, r2, #28
 8017652:	4605      	mov	r5, r0
 8017654:	460c      	mov	r4, r1
 8017656:	d454      	bmi.n	8017702 <__sflush_r+0xba>
 8017658:	684b      	ldr	r3, [r1, #4]
 801765a:	2b00      	cmp	r3, #0
 801765c:	dc02      	bgt.n	8017664 <__sflush_r+0x1c>
 801765e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017660:	2b00      	cmp	r3, #0
 8017662:	dd48      	ble.n	80176f6 <__sflush_r+0xae>
 8017664:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017666:	2e00      	cmp	r6, #0
 8017668:	d045      	beq.n	80176f6 <__sflush_r+0xae>
 801766a:	2300      	movs	r3, #0
 801766c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017670:	682f      	ldr	r7, [r5, #0]
 8017672:	6a21      	ldr	r1, [r4, #32]
 8017674:	602b      	str	r3, [r5, #0]
 8017676:	d030      	beq.n	80176da <__sflush_r+0x92>
 8017678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801767a:	89a3      	ldrh	r3, [r4, #12]
 801767c:	0759      	lsls	r1, r3, #29
 801767e:	d505      	bpl.n	801768c <__sflush_r+0x44>
 8017680:	6863      	ldr	r3, [r4, #4]
 8017682:	1ad2      	subs	r2, r2, r3
 8017684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017686:	b10b      	cbz	r3, 801768c <__sflush_r+0x44>
 8017688:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801768a:	1ad2      	subs	r2, r2, r3
 801768c:	2300      	movs	r3, #0
 801768e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017690:	6a21      	ldr	r1, [r4, #32]
 8017692:	4628      	mov	r0, r5
 8017694:	47b0      	blx	r6
 8017696:	1c43      	adds	r3, r0, #1
 8017698:	89a3      	ldrh	r3, [r4, #12]
 801769a:	d106      	bne.n	80176aa <__sflush_r+0x62>
 801769c:	6829      	ldr	r1, [r5, #0]
 801769e:	291d      	cmp	r1, #29
 80176a0:	d82b      	bhi.n	80176fa <__sflush_r+0xb2>
 80176a2:	4a2a      	ldr	r2, [pc, #168]	@ (801774c <__sflush_r+0x104>)
 80176a4:	410a      	asrs	r2, r1
 80176a6:	07d6      	lsls	r6, r2, #31
 80176a8:	d427      	bmi.n	80176fa <__sflush_r+0xb2>
 80176aa:	2200      	movs	r2, #0
 80176ac:	04d9      	lsls	r1, r3, #19
 80176ae:	6062      	str	r2, [r4, #4]
 80176b0:	6922      	ldr	r2, [r4, #16]
 80176b2:	6022      	str	r2, [r4, #0]
 80176b4:	d504      	bpl.n	80176c0 <__sflush_r+0x78>
 80176b6:	1c42      	adds	r2, r0, #1
 80176b8:	d101      	bne.n	80176be <__sflush_r+0x76>
 80176ba:	682b      	ldr	r3, [r5, #0]
 80176bc:	b903      	cbnz	r3, 80176c0 <__sflush_r+0x78>
 80176be:	6560      	str	r0, [r4, #84]	@ 0x54
 80176c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176c2:	602f      	str	r7, [r5, #0]
 80176c4:	b1b9      	cbz	r1, 80176f6 <__sflush_r+0xae>
 80176c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80176ca:	4299      	cmp	r1, r3
 80176cc:	d002      	beq.n	80176d4 <__sflush_r+0x8c>
 80176ce:	4628      	mov	r0, r5
 80176d0:	f7ff f9da 	bl	8016a88 <_free_r>
 80176d4:	2300      	movs	r3, #0
 80176d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80176d8:	e00d      	b.n	80176f6 <__sflush_r+0xae>
 80176da:	2301      	movs	r3, #1
 80176dc:	4628      	mov	r0, r5
 80176de:	47b0      	blx	r6
 80176e0:	4602      	mov	r2, r0
 80176e2:	1c50      	adds	r0, r2, #1
 80176e4:	d1c9      	bne.n	801767a <__sflush_r+0x32>
 80176e6:	682b      	ldr	r3, [r5, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d0c6      	beq.n	801767a <__sflush_r+0x32>
 80176ec:	2b1d      	cmp	r3, #29
 80176ee:	d001      	beq.n	80176f4 <__sflush_r+0xac>
 80176f0:	2b16      	cmp	r3, #22
 80176f2:	d11d      	bne.n	8017730 <__sflush_r+0xe8>
 80176f4:	602f      	str	r7, [r5, #0]
 80176f6:	2000      	movs	r0, #0
 80176f8:	e021      	b.n	801773e <__sflush_r+0xf6>
 80176fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176fe:	b21b      	sxth	r3, r3
 8017700:	e01a      	b.n	8017738 <__sflush_r+0xf0>
 8017702:	690f      	ldr	r7, [r1, #16]
 8017704:	2f00      	cmp	r7, #0
 8017706:	d0f6      	beq.n	80176f6 <__sflush_r+0xae>
 8017708:	0793      	lsls	r3, r2, #30
 801770a:	680e      	ldr	r6, [r1, #0]
 801770c:	600f      	str	r7, [r1, #0]
 801770e:	bf0c      	ite	eq
 8017710:	694b      	ldreq	r3, [r1, #20]
 8017712:	2300      	movne	r3, #0
 8017714:	eba6 0807 	sub.w	r8, r6, r7
 8017718:	608b      	str	r3, [r1, #8]
 801771a:	f1b8 0f00 	cmp.w	r8, #0
 801771e:	ddea      	ble.n	80176f6 <__sflush_r+0xae>
 8017720:	4643      	mov	r3, r8
 8017722:	463a      	mov	r2, r7
 8017724:	6a21      	ldr	r1, [r4, #32]
 8017726:	4628      	mov	r0, r5
 8017728:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801772a:	47b0      	blx	r6
 801772c:	2800      	cmp	r0, #0
 801772e:	dc08      	bgt.n	8017742 <__sflush_r+0xfa>
 8017730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017738:	f04f 30ff 	mov.w	r0, #4294967295
 801773c:	81a3      	strh	r3, [r4, #12]
 801773e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017742:	4407      	add	r7, r0
 8017744:	eba8 0800 	sub.w	r8, r8, r0
 8017748:	e7e7      	b.n	801771a <__sflush_r+0xd2>
 801774a:	bf00      	nop
 801774c:	dfbffffe 	.word	0xdfbffffe

08017750 <_fflush_r>:
 8017750:	b538      	push	{r3, r4, r5, lr}
 8017752:	690b      	ldr	r3, [r1, #16]
 8017754:	4605      	mov	r5, r0
 8017756:	460c      	mov	r4, r1
 8017758:	b913      	cbnz	r3, 8017760 <_fflush_r+0x10>
 801775a:	2500      	movs	r5, #0
 801775c:	4628      	mov	r0, r5
 801775e:	bd38      	pop	{r3, r4, r5, pc}
 8017760:	b118      	cbz	r0, 801776a <_fflush_r+0x1a>
 8017762:	6a03      	ldr	r3, [r0, #32]
 8017764:	b90b      	cbnz	r3, 801776a <_fflush_r+0x1a>
 8017766:	f7fd ff6f 	bl	8015648 <__sinit>
 801776a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d0f3      	beq.n	801775a <_fflush_r+0xa>
 8017772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017774:	07d0      	lsls	r0, r2, #31
 8017776:	d404      	bmi.n	8017782 <_fflush_r+0x32>
 8017778:	0599      	lsls	r1, r3, #22
 801777a:	d402      	bmi.n	8017782 <_fflush_r+0x32>
 801777c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801777e:	f7fe faf6 	bl	8015d6e <__retarget_lock_acquire_recursive>
 8017782:	4628      	mov	r0, r5
 8017784:	4621      	mov	r1, r4
 8017786:	f7ff ff5f 	bl	8017648 <__sflush_r>
 801778a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801778c:	4605      	mov	r5, r0
 801778e:	07da      	lsls	r2, r3, #31
 8017790:	d4e4      	bmi.n	801775c <_fflush_r+0xc>
 8017792:	89a3      	ldrh	r3, [r4, #12]
 8017794:	059b      	lsls	r3, r3, #22
 8017796:	d4e1      	bmi.n	801775c <_fflush_r+0xc>
 8017798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801779a:	f7fe fae9 	bl	8015d70 <__retarget_lock_release_recursive>
 801779e:	e7dd      	b.n	801775c <_fflush_r+0xc>

080177a0 <fiprintf>:
 80177a0:	b40e      	push	{r1, r2, r3}
 80177a2:	b503      	push	{r0, r1, lr}
 80177a4:	ab03      	add	r3, sp, #12
 80177a6:	4601      	mov	r1, r0
 80177a8:	4805      	ldr	r0, [pc, #20]	@ (80177c0 <fiprintf+0x20>)
 80177aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80177ae:	6800      	ldr	r0, [r0, #0]
 80177b0:	9301      	str	r3, [sp, #4]
 80177b2:	f000 f97b 	bl	8017aac <_vfiprintf_r>
 80177b6:	b002      	add	sp, #8
 80177b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80177bc:	b003      	add	sp, #12
 80177be:	4770      	bx	lr
 80177c0:	200001b8 	.word	0x200001b8

080177c4 <__swhatbuf_r>:
 80177c4:	b570      	push	{r4, r5, r6, lr}
 80177c6:	460c      	mov	r4, r1
 80177c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177cc:	b096      	sub	sp, #88	@ 0x58
 80177ce:	4615      	mov	r5, r2
 80177d0:	2900      	cmp	r1, #0
 80177d2:	461e      	mov	r6, r3
 80177d4:	da0c      	bge.n	80177f0 <__swhatbuf_r+0x2c>
 80177d6:	89a3      	ldrh	r3, [r4, #12]
 80177d8:	2100      	movs	r1, #0
 80177da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80177de:	bf14      	ite	ne
 80177e0:	2340      	movne	r3, #64	@ 0x40
 80177e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80177e6:	2000      	movs	r0, #0
 80177e8:	6031      	str	r1, [r6, #0]
 80177ea:	602b      	str	r3, [r5, #0]
 80177ec:	b016      	add	sp, #88	@ 0x58
 80177ee:	bd70      	pop	{r4, r5, r6, pc}
 80177f0:	466a      	mov	r2, sp
 80177f2:	f000 f897 	bl	8017924 <_fstat_r>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	dbed      	blt.n	80177d6 <__swhatbuf_r+0x12>
 80177fa:	9901      	ldr	r1, [sp, #4]
 80177fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017800:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017804:	4259      	negs	r1, r3
 8017806:	4159      	adcs	r1, r3
 8017808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801780c:	e7eb      	b.n	80177e6 <__swhatbuf_r+0x22>

0801780e <__smakebuf_r>:
 801780e:	898b      	ldrh	r3, [r1, #12]
 8017810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017812:	079d      	lsls	r5, r3, #30
 8017814:	4606      	mov	r6, r0
 8017816:	460c      	mov	r4, r1
 8017818:	d507      	bpl.n	801782a <__smakebuf_r+0x1c>
 801781a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801781e:	6023      	str	r3, [r4, #0]
 8017820:	6123      	str	r3, [r4, #16]
 8017822:	2301      	movs	r3, #1
 8017824:	6163      	str	r3, [r4, #20]
 8017826:	b003      	add	sp, #12
 8017828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801782a:	ab01      	add	r3, sp, #4
 801782c:	466a      	mov	r2, sp
 801782e:	f7ff ffc9 	bl	80177c4 <__swhatbuf_r>
 8017832:	9f00      	ldr	r7, [sp, #0]
 8017834:	4605      	mov	r5, r0
 8017836:	4630      	mov	r0, r6
 8017838:	4639      	mov	r1, r7
 801783a:	f7ff f999 	bl	8016b70 <_malloc_r>
 801783e:	b948      	cbnz	r0, 8017854 <__smakebuf_r+0x46>
 8017840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017844:	059a      	lsls	r2, r3, #22
 8017846:	d4ee      	bmi.n	8017826 <__smakebuf_r+0x18>
 8017848:	f023 0303 	bic.w	r3, r3, #3
 801784c:	f043 0302 	orr.w	r3, r3, #2
 8017850:	81a3      	strh	r3, [r4, #12]
 8017852:	e7e2      	b.n	801781a <__smakebuf_r+0xc>
 8017854:	89a3      	ldrh	r3, [r4, #12]
 8017856:	6020      	str	r0, [r4, #0]
 8017858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801785c:	81a3      	strh	r3, [r4, #12]
 801785e:	9b01      	ldr	r3, [sp, #4]
 8017860:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017864:	b15b      	cbz	r3, 801787e <__smakebuf_r+0x70>
 8017866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801786a:	4630      	mov	r0, r6
 801786c:	f000 f86c 	bl	8017948 <_isatty_r>
 8017870:	b128      	cbz	r0, 801787e <__smakebuf_r+0x70>
 8017872:	89a3      	ldrh	r3, [r4, #12]
 8017874:	f023 0303 	bic.w	r3, r3, #3
 8017878:	f043 0301 	orr.w	r3, r3, #1
 801787c:	81a3      	strh	r3, [r4, #12]
 801787e:	89a3      	ldrh	r3, [r4, #12]
 8017880:	431d      	orrs	r5, r3
 8017882:	81a5      	strh	r5, [r4, #12]
 8017884:	e7cf      	b.n	8017826 <__smakebuf_r+0x18>

08017886 <_putc_r>:
 8017886:	b570      	push	{r4, r5, r6, lr}
 8017888:	460d      	mov	r5, r1
 801788a:	4614      	mov	r4, r2
 801788c:	4606      	mov	r6, r0
 801788e:	b118      	cbz	r0, 8017898 <_putc_r+0x12>
 8017890:	6a03      	ldr	r3, [r0, #32]
 8017892:	b90b      	cbnz	r3, 8017898 <_putc_r+0x12>
 8017894:	f7fd fed8 	bl	8015648 <__sinit>
 8017898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801789a:	07d8      	lsls	r0, r3, #31
 801789c:	d405      	bmi.n	80178aa <_putc_r+0x24>
 801789e:	89a3      	ldrh	r3, [r4, #12]
 80178a0:	0599      	lsls	r1, r3, #22
 80178a2:	d402      	bmi.n	80178aa <_putc_r+0x24>
 80178a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178a6:	f7fe fa62 	bl	8015d6e <__retarget_lock_acquire_recursive>
 80178aa:	68a3      	ldr	r3, [r4, #8]
 80178ac:	3b01      	subs	r3, #1
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	60a3      	str	r3, [r4, #8]
 80178b2:	da05      	bge.n	80178c0 <_putc_r+0x3a>
 80178b4:	69a2      	ldr	r2, [r4, #24]
 80178b6:	4293      	cmp	r3, r2
 80178b8:	db12      	blt.n	80178e0 <_putc_r+0x5a>
 80178ba:	b2eb      	uxtb	r3, r5
 80178bc:	2b0a      	cmp	r3, #10
 80178be:	d00f      	beq.n	80178e0 <_putc_r+0x5a>
 80178c0:	6823      	ldr	r3, [r4, #0]
 80178c2:	1c5a      	adds	r2, r3, #1
 80178c4:	6022      	str	r2, [r4, #0]
 80178c6:	701d      	strb	r5, [r3, #0]
 80178c8:	b2ed      	uxtb	r5, r5
 80178ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80178cc:	07da      	lsls	r2, r3, #31
 80178ce:	d405      	bmi.n	80178dc <_putc_r+0x56>
 80178d0:	89a3      	ldrh	r3, [r4, #12]
 80178d2:	059b      	lsls	r3, r3, #22
 80178d4:	d402      	bmi.n	80178dc <_putc_r+0x56>
 80178d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80178d8:	f7fe fa4a 	bl	8015d70 <__retarget_lock_release_recursive>
 80178dc:	4628      	mov	r0, r5
 80178de:	bd70      	pop	{r4, r5, r6, pc}
 80178e0:	4629      	mov	r1, r5
 80178e2:	4622      	mov	r2, r4
 80178e4:	4630      	mov	r0, r6
 80178e6:	f7fe f8af 	bl	8015a48 <__swbuf_r>
 80178ea:	4605      	mov	r5, r0
 80178ec:	e7ed      	b.n	80178ca <_putc_r+0x44>

080178ee <memmove>:
 80178ee:	4288      	cmp	r0, r1
 80178f0:	b510      	push	{r4, lr}
 80178f2:	eb01 0402 	add.w	r4, r1, r2
 80178f6:	d902      	bls.n	80178fe <memmove+0x10>
 80178f8:	4284      	cmp	r4, r0
 80178fa:	4623      	mov	r3, r4
 80178fc:	d807      	bhi.n	801790e <memmove+0x20>
 80178fe:	1e43      	subs	r3, r0, #1
 8017900:	42a1      	cmp	r1, r4
 8017902:	d008      	beq.n	8017916 <memmove+0x28>
 8017904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017908:	f803 2f01 	strb.w	r2, [r3, #1]!
 801790c:	e7f8      	b.n	8017900 <memmove+0x12>
 801790e:	4402      	add	r2, r0
 8017910:	4601      	mov	r1, r0
 8017912:	428a      	cmp	r2, r1
 8017914:	d100      	bne.n	8017918 <memmove+0x2a>
 8017916:	bd10      	pop	{r4, pc}
 8017918:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801791c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017920:	e7f7      	b.n	8017912 <memmove+0x24>
	...

08017924 <_fstat_r>:
 8017924:	b538      	push	{r3, r4, r5, lr}
 8017926:	2300      	movs	r3, #0
 8017928:	4d06      	ldr	r5, [pc, #24]	@ (8017944 <_fstat_r+0x20>)
 801792a:	4604      	mov	r4, r0
 801792c:	4608      	mov	r0, r1
 801792e:	4611      	mov	r1, r2
 8017930:	602b      	str	r3, [r5, #0]
 8017932:	f7ed fd5d 	bl	80053f0 <_fstat>
 8017936:	1c43      	adds	r3, r0, #1
 8017938:	d102      	bne.n	8017940 <_fstat_r+0x1c>
 801793a:	682b      	ldr	r3, [r5, #0]
 801793c:	b103      	cbz	r3, 8017940 <_fstat_r+0x1c>
 801793e:	6023      	str	r3, [r4, #0]
 8017940:	bd38      	pop	{r3, r4, r5, pc}
 8017942:	bf00      	nop
 8017944:	200045a0 	.word	0x200045a0

08017948 <_isatty_r>:
 8017948:	b538      	push	{r3, r4, r5, lr}
 801794a:	2300      	movs	r3, #0
 801794c:	4d05      	ldr	r5, [pc, #20]	@ (8017964 <_isatty_r+0x1c>)
 801794e:	4604      	mov	r4, r0
 8017950:	4608      	mov	r0, r1
 8017952:	602b      	str	r3, [r5, #0]
 8017954:	f7ed fd5c 	bl	8005410 <_isatty>
 8017958:	1c43      	adds	r3, r0, #1
 801795a:	d102      	bne.n	8017962 <_isatty_r+0x1a>
 801795c:	682b      	ldr	r3, [r5, #0]
 801795e:	b103      	cbz	r3, 8017962 <_isatty_r+0x1a>
 8017960:	6023      	str	r3, [r4, #0]
 8017962:	bd38      	pop	{r3, r4, r5, pc}
 8017964:	200045a0 	.word	0x200045a0

08017968 <_sbrk_r>:
 8017968:	b538      	push	{r3, r4, r5, lr}
 801796a:	2300      	movs	r3, #0
 801796c:	4d05      	ldr	r5, [pc, #20]	@ (8017984 <_sbrk_r+0x1c>)
 801796e:	4604      	mov	r4, r0
 8017970:	4608      	mov	r0, r1
 8017972:	602b      	str	r3, [r5, #0]
 8017974:	f7ed fd64 	bl	8005440 <_sbrk>
 8017978:	1c43      	adds	r3, r0, #1
 801797a:	d102      	bne.n	8017982 <_sbrk_r+0x1a>
 801797c:	682b      	ldr	r3, [r5, #0]
 801797e:	b103      	cbz	r3, 8017982 <_sbrk_r+0x1a>
 8017980:	6023      	str	r3, [r4, #0]
 8017982:	bd38      	pop	{r3, r4, r5, pc}
 8017984:	200045a0 	.word	0x200045a0

08017988 <abort>:
 8017988:	2006      	movs	r0, #6
 801798a:	b508      	push	{r3, lr}
 801798c:	f000 f9ce 	bl	8017d2c <raise>
 8017990:	2001      	movs	r0, #1
 8017992:	f7ed fcdd 	bl	8005350 <_exit>

08017996 <_calloc_r>:
 8017996:	b570      	push	{r4, r5, r6, lr}
 8017998:	fba1 5402 	umull	r5, r4, r1, r2
 801799c:	b93c      	cbnz	r4, 80179ae <_calloc_r+0x18>
 801799e:	4629      	mov	r1, r5
 80179a0:	f7ff f8e6 	bl	8016b70 <_malloc_r>
 80179a4:	4606      	mov	r6, r0
 80179a6:	b928      	cbnz	r0, 80179b4 <_calloc_r+0x1e>
 80179a8:	2600      	movs	r6, #0
 80179aa:	4630      	mov	r0, r6
 80179ac:	bd70      	pop	{r4, r5, r6, pc}
 80179ae:	220c      	movs	r2, #12
 80179b0:	6002      	str	r2, [r0, #0]
 80179b2:	e7f9      	b.n	80179a8 <_calloc_r+0x12>
 80179b4:	462a      	mov	r2, r5
 80179b6:	4621      	mov	r1, r4
 80179b8:	f7fe f8da 	bl	8015b70 <memset>
 80179bc:	e7f5      	b.n	80179aa <_calloc_r+0x14>

080179be <__ascii_mbtowc>:
 80179be:	b082      	sub	sp, #8
 80179c0:	b901      	cbnz	r1, 80179c4 <__ascii_mbtowc+0x6>
 80179c2:	a901      	add	r1, sp, #4
 80179c4:	b142      	cbz	r2, 80179d8 <__ascii_mbtowc+0x1a>
 80179c6:	b14b      	cbz	r3, 80179dc <__ascii_mbtowc+0x1e>
 80179c8:	7813      	ldrb	r3, [r2, #0]
 80179ca:	600b      	str	r3, [r1, #0]
 80179cc:	7812      	ldrb	r2, [r2, #0]
 80179ce:	1e10      	subs	r0, r2, #0
 80179d0:	bf18      	it	ne
 80179d2:	2001      	movne	r0, #1
 80179d4:	b002      	add	sp, #8
 80179d6:	4770      	bx	lr
 80179d8:	4610      	mov	r0, r2
 80179da:	e7fb      	b.n	80179d4 <__ascii_mbtowc+0x16>
 80179dc:	f06f 0001 	mvn.w	r0, #1
 80179e0:	e7f8      	b.n	80179d4 <__ascii_mbtowc+0x16>

080179e2 <_realloc_r>:
 80179e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e6:	4680      	mov	r8, r0
 80179e8:	4615      	mov	r5, r2
 80179ea:	460c      	mov	r4, r1
 80179ec:	b921      	cbnz	r1, 80179f8 <_realloc_r+0x16>
 80179ee:	4611      	mov	r1, r2
 80179f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179f4:	f7ff b8bc 	b.w	8016b70 <_malloc_r>
 80179f8:	b92a      	cbnz	r2, 8017a06 <_realloc_r+0x24>
 80179fa:	f7ff f845 	bl	8016a88 <_free_r>
 80179fe:	2400      	movs	r4, #0
 8017a00:	4620      	mov	r0, r4
 8017a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a06:	f000 f9ad 	bl	8017d64 <_malloc_usable_size_r>
 8017a0a:	4285      	cmp	r5, r0
 8017a0c:	4606      	mov	r6, r0
 8017a0e:	d802      	bhi.n	8017a16 <_realloc_r+0x34>
 8017a10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017a14:	d8f4      	bhi.n	8017a00 <_realloc_r+0x1e>
 8017a16:	4629      	mov	r1, r5
 8017a18:	4640      	mov	r0, r8
 8017a1a:	f7ff f8a9 	bl	8016b70 <_malloc_r>
 8017a1e:	4607      	mov	r7, r0
 8017a20:	2800      	cmp	r0, #0
 8017a22:	d0ec      	beq.n	80179fe <_realloc_r+0x1c>
 8017a24:	42b5      	cmp	r5, r6
 8017a26:	462a      	mov	r2, r5
 8017a28:	4621      	mov	r1, r4
 8017a2a:	bf28      	it	cs
 8017a2c:	4632      	movcs	r2, r6
 8017a2e:	f7fe f9ae 	bl	8015d8e <memcpy>
 8017a32:	4621      	mov	r1, r4
 8017a34:	4640      	mov	r0, r8
 8017a36:	463c      	mov	r4, r7
 8017a38:	f7ff f826 	bl	8016a88 <_free_r>
 8017a3c:	e7e0      	b.n	8017a00 <_realloc_r+0x1e>

08017a3e <__ascii_wctomb>:
 8017a3e:	4603      	mov	r3, r0
 8017a40:	4608      	mov	r0, r1
 8017a42:	b141      	cbz	r1, 8017a56 <__ascii_wctomb+0x18>
 8017a44:	2aff      	cmp	r2, #255	@ 0xff
 8017a46:	d904      	bls.n	8017a52 <__ascii_wctomb+0x14>
 8017a48:	228a      	movs	r2, #138	@ 0x8a
 8017a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a4e:	601a      	str	r2, [r3, #0]
 8017a50:	4770      	bx	lr
 8017a52:	2001      	movs	r0, #1
 8017a54:	700a      	strb	r2, [r1, #0]
 8017a56:	4770      	bx	lr

08017a58 <__sfputc_r>:
 8017a58:	6893      	ldr	r3, [r2, #8]
 8017a5a:	3b01      	subs	r3, #1
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	6093      	str	r3, [r2, #8]
 8017a60:	b410      	push	{r4}
 8017a62:	da08      	bge.n	8017a76 <__sfputc_r+0x1e>
 8017a64:	6994      	ldr	r4, [r2, #24]
 8017a66:	42a3      	cmp	r3, r4
 8017a68:	db01      	blt.n	8017a6e <__sfputc_r+0x16>
 8017a6a:	290a      	cmp	r1, #10
 8017a6c:	d103      	bne.n	8017a76 <__sfputc_r+0x1e>
 8017a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a72:	f7fd bfe9 	b.w	8015a48 <__swbuf_r>
 8017a76:	6813      	ldr	r3, [r2, #0]
 8017a78:	1c58      	adds	r0, r3, #1
 8017a7a:	6010      	str	r0, [r2, #0]
 8017a7c:	4608      	mov	r0, r1
 8017a7e:	7019      	strb	r1, [r3, #0]
 8017a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a84:	4770      	bx	lr

08017a86 <__sfputs_r>:
 8017a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a88:	4606      	mov	r6, r0
 8017a8a:	460f      	mov	r7, r1
 8017a8c:	4614      	mov	r4, r2
 8017a8e:	18d5      	adds	r5, r2, r3
 8017a90:	42ac      	cmp	r4, r5
 8017a92:	d101      	bne.n	8017a98 <__sfputs_r+0x12>
 8017a94:	2000      	movs	r0, #0
 8017a96:	e007      	b.n	8017aa8 <__sfputs_r+0x22>
 8017a98:	463a      	mov	r2, r7
 8017a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	f7ff ffda 	bl	8017a58 <__sfputc_r>
 8017aa4:	1c43      	adds	r3, r0, #1
 8017aa6:	d1f3      	bne.n	8017a90 <__sfputs_r+0xa>
 8017aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017aac <_vfiprintf_r>:
 8017aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab0:	460d      	mov	r5, r1
 8017ab2:	b09d      	sub	sp, #116	@ 0x74
 8017ab4:	4614      	mov	r4, r2
 8017ab6:	4698      	mov	r8, r3
 8017ab8:	4606      	mov	r6, r0
 8017aba:	b118      	cbz	r0, 8017ac4 <_vfiprintf_r+0x18>
 8017abc:	6a03      	ldr	r3, [r0, #32]
 8017abe:	b90b      	cbnz	r3, 8017ac4 <_vfiprintf_r+0x18>
 8017ac0:	f7fd fdc2 	bl	8015648 <__sinit>
 8017ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ac6:	07d9      	lsls	r1, r3, #31
 8017ac8:	d405      	bmi.n	8017ad6 <_vfiprintf_r+0x2a>
 8017aca:	89ab      	ldrh	r3, [r5, #12]
 8017acc:	059a      	lsls	r2, r3, #22
 8017ace:	d402      	bmi.n	8017ad6 <_vfiprintf_r+0x2a>
 8017ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ad2:	f7fe f94c 	bl	8015d6e <__retarget_lock_acquire_recursive>
 8017ad6:	89ab      	ldrh	r3, [r5, #12]
 8017ad8:	071b      	lsls	r3, r3, #28
 8017ada:	d501      	bpl.n	8017ae0 <_vfiprintf_r+0x34>
 8017adc:	692b      	ldr	r3, [r5, #16]
 8017ade:	b99b      	cbnz	r3, 8017b08 <_vfiprintf_r+0x5c>
 8017ae0:	4629      	mov	r1, r5
 8017ae2:	4630      	mov	r0, r6
 8017ae4:	f7fd ffee 	bl	8015ac4 <__swsetup_r>
 8017ae8:	b170      	cbz	r0, 8017b08 <_vfiprintf_r+0x5c>
 8017aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017aec:	07dc      	lsls	r4, r3, #31
 8017aee:	d504      	bpl.n	8017afa <_vfiprintf_r+0x4e>
 8017af0:	f04f 30ff 	mov.w	r0, #4294967295
 8017af4:	b01d      	add	sp, #116	@ 0x74
 8017af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017afa:	89ab      	ldrh	r3, [r5, #12]
 8017afc:	0598      	lsls	r0, r3, #22
 8017afe:	d4f7      	bmi.n	8017af0 <_vfiprintf_r+0x44>
 8017b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b02:	f7fe f935 	bl	8015d70 <__retarget_lock_release_recursive>
 8017b06:	e7f3      	b.n	8017af0 <_vfiprintf_r+0x44>
 8017b08:	2300      	movs	r3, #0
 8017b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b0e:	f04f 0901 	mov.w	r9, #1
 8017b12:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8017cc8 <_vfiprintf_r+0x21c>
 8017b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b18:	2320      	movs	r3, #32
 8017b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b1e:	2330      	movs	r3, #48	@ 0x30
 8017b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b24:	4623      	mov	r3, r4
 8017b26:	469a      	mov	sl, r3
 8017b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b2c:	b10a      	cbz	r2, 8017b32 <_vfiprintf_r+0x86>
 8017b2e:	2a25      	cmp	r2, #37	@ 0x25
 8017b30:	d1f9      	bne.n	8017b26 <_vfiprintf_r+0x7a>
 8017b32:	ebba 0b04 	subs.w	fp, sl, r4
 8017b36:	d00b      	beq.n	8017b50 <_vfiprintf_r+0xa4>
 8017b38:	465b      	mov	r3, fp
 8017b3a:	4622      	mov	r2, r4
 8017b3c:	4629      	mov	r1, r5
 8017b3e:	4630      	mov	r0, r6
 8017b40:	f7ff ffa1 	bl	8017a86 <__sfputs_r>
 8017b44:	3001      	adds	r0, #1
 8017b46:	f000 80a7 	beq.w	8017c98 <_vfiprintf_r+0x1ec>
 8017b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b4c:	445a      	add	r2, fp
 8017b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b50:	f89a 3000 	ldrb.w	r3, [sl]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	f000 809f 	beq.w	8017c98 <_vfiprintf_r+0x1ec>
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b60:	f10a 0a01 	add.w	sl, sl, #1
 8017b64:	9304      	str	r3, [sp, #16]
 8017b66:	9307      	str	r3, [sp, #28]
 8017b68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b72:	4654      	mov	r4, sl
 8017b74:	2205      	movs	r2, #5
 8017b76:	4854      	ldr	r0, [pc, #336]	@ (8017cc8 <_vfiprintf_r+0x21c>)
 8017b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b7c:	f7fe f8f9 	bl	8015d72 <memchr>
 8017b80:	9a04      	ldr	r2, [sp, #16]
 8017b82:	b9d8      	cbnz	r0, 8017bbc <_vfiprintf_r+0x110>
 8017b84:	06d1      	lsls	r1, r2, #27
 8017b86:	bf44      	itt	mi
 8017b88:	2320      	movmi	r3, #32
 8017b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b8e:	0713      	lsls	r3, r2, #28
 8017b90:	bf44      	itt	mi
 8017b92:	232b      	movmi	r3, #43	@ 0x2b
 8017b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b98:	f89a 3000 	ldrb.w	r3, [sl]
 8017b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b9e:	d015      	beq.n	8017bcc <_vfiprintf_r+0x120>
 8017ba0:	9a07      	ldr	r2, [sp, #28]
 8017ba2:	4654      	mov	r4, sl
 8017ba4:	2000      	movs	r0, #0
 8017ba6:	f04f 0c0a 	mov.w	ip, #10
 8017baa:	4621      	mov	r1, r4
 8017bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bb0:	3b30      	subs	r3, #48	@ 0x30
 8017bb2:	2b09      	cmp	r3, #9
 8017bb4:	d94b      	bls.n	8017c4e <_vfiprintf_r+0x1a2>
 8017bb6:	b1b0      	cbz	r0, 8017be6 <_vfiprintf_r+0x13a>
 8017bb8:	9207      	str	r2, [sp, #28]
 8017bba:	e014      	b.n	8017be6 <_vfiprintf_r+0x13a>
 8017bbc:	eba0 0308 	sub.w	r3, r0, r8
 8017bc0:	46a2      	mov	sl, r4
 8017bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8017bc6:	4313      	orrs	r3, r2
 8017bc8:	9304      	str	r3, [sp, #16]
 8017bca:	e7d2      	b.n	8017b72 <_vfiprintf_r+0xc6>
 8017bcc:	9b03      	ldr	r3, [sp, #12]
 8017bce:	1d19      	adds	r1, r3, #4
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	9103      	str	r1, [sp, #12]
 8017bd6:	bfbb      	ittet	lt
 8017bd8:	425b      	neglt	r3, r3
 8017bda:	f042 0202 	orrlt.w	r2, r2, #2
 8017bde:	9307      	strge	r3, [sp, #28]
 8017be0:	9307      	strlt	r3, [sp, #28]
 8017be2:	bfb8      	it	lt
 8017be4:	9204      	strlt	r2, [sp, #16]
 8017be6:	7823      	ldrb	r3, [r4, #0]
 8017be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bea:	d10a      	bne.n	8017c02 <_vfiprintf_r+0x156>
 8017bec:	7863      	ldrb	r3, [r4, #1]
 8017bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8017bf0:	d132      	bne.n	8017c58 <_vfiprintf_r+0x1ac>
 8017bf2:	9b03      	ldr	r3, [sp, #12]
 8017bf4:	3402      	adds	r4, #2
 8017bf6:	1d1a      	adds	r2, r3, #4
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017bfe:	9203      	str	r2, [sp, #12]
 8017c00:	9305      	str	r3, [sp, #20]
 8017c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017cd8 <_vfiprintf_r+0x22c>
 8017c06:	2203      	movs	r2, #3
 8017c08:	7821      	ldrb	r1, [r4, #0]
 8017c0a:	4650      	mov	r0, sl
 8017c0c:	f7fe f8b1 	bl	8015d72 <memchr>
 8017c10:	b138      	cbz	r0, 8017c22 <_vfiprintf_r+0x176>
 8017c12:	eba0 000a 	sub.w	r0, r0, sl
 8017c16:	2240      	movs	r2, #64	@ 0x40
 8017c18:	9b04      	ldr	r3, [sp, #16]
 8017c1a:	3401      	adds	r4, #1
 8017c1c:	4082      	lsls	r2, r0
 8017c1e:	4313      	orrs	r3, r2
 8017c20:	9304      	str	r3, [sp, #16]
 8017c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c26:	2206      	movs	r2, #6
 8017c28:	4828      	ldr	r0, [pc, #160]	@ (8017ccc <_vfiprintf_r+0x220>)
 8017c2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017c2e:	f7fe f8a0 	bl	8015d72 <memchr>
 8017c32:	2800      	cmp	r0, #0
 8017c34:	d03f      	beq.n	8017cb6 <_vfiprintf_r+0x20a>
 8017c36:	4b26      	ldr	r3, [pc, #152]	@ (8017cd0 <_vfiprintf_r+0x224>)
 8017c38:	bb1b      	cbnz	r3, 8017c82 <_vfiprintf_r+0x1d6>
 8017c3a:	9b03      	ldr	r3, [sp, #12]
 8017c3c:	3307      	adds	r3, #7
 8017c3e:	f023 0307 	bic.w	r3, r3, #7
 8017c42:	3308      	adds	r3, #8
 8017c44:	9303      	str	r3, [sp, #12]
 8017c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c48:	443b      	add	r3, r7
 8017c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c4c:	e76a      	b.n	8017b24 <_vfiprintf_r+0x78>
 8017c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c52:	460c      	mov	r4, r1
 8017c54:	2001      	movs	r0, #1
 8017c56:	e7a8      	b.n	8017baa <_vfiprintf_r+0xfe>
 8017c58:	2300      	movs	r3, #0
 8017c5a:	3401      	adds	r4, #1
 8017c5c:	f04f 0c0a 	mov.w	ip, #10
 8017c60:	4619      	mov	r1, r3
 8017c62:	9305      	str	r3, [sp, #20]
 8017c64:	4620      	mov	r0, r4
 8017c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c6a:	3a30      	subs	r2, #48	@ 0x30
 8017c6c:	2a09      	cmp	r2, #9
 8017c6e:	d903      	bls.n	8017c78 <_vfiprintf_r+0x1cc>
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d0c6      	beq.n	8017c02 <_vfiprintf_r+0x156>
 8017c74:	9105      	str	r1, [sp, #20]
 8017c76:	e7c4      	b.n	8017c02 <_vfiprintf_r+0x156>
 8017c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	2301      	movs	r3, #1
 8017c80:	e7f0      	b.n	8017c64 <_vfiprintf_r+0x1b8>
 8017c82:	ab03      	add	r3, sp, #12
 8017c84:	462a      	mov	r2, r5
 8017c86:	a904      	add	r1, sp, #16
 8017c88:	4630      	mov	r0, r6
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	4b11      	ldr	r3, [pc, #68]	@ (8017cd4 <_vfiprintf_r+0x228>)
 8017c8e:	f7fd f893 	bl	8014db8 <_printf_float>
 8017c92:	4607      	mov	r7, r0
 8017c94:	1c78      	adds	r0, r7, #1
 8017c96:	d1d6      	bne.n	8017c46 <_vfiprintf_r+0x19a>
 8017c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c9a:	07d9      	lsls	r1, r3, #31
 8017c9c:	d405      	bmi.n	8017caa <_vfiprintf_r+0x1fe>
 8017c9e:	89ab      	ldrh	r3, [r5, #12]
 8017ca0:	059a      	lsls	r2, r3, #22
 8017ca2:	d402      	bmi.n	8017caa <_vfiprintf_r+0x1fe>
 8017ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ca6:	f7fe f863 	bl	8015d70 <__retarget_lock_release_recursive>
 8017caa:	89ab      	ldrh	r3, [r5, #12]
 8017cac:	065b      	lsls	r3, r3, #25
 8017cae:	f53f af1f 	bmi.w	8017af0 <_vfiprintf_r+0x44>
 8017cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017cb4:	e71e      	b.n	8017af4 <_vfiprintf_r+0x48>
 8017cb6:	ab03      	add	r3, sp, #12
 8017cb8:	462a      	mov	r2, r5
 8017cba:	a904      	add	r1, sp, #16
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	4b04      	ldr	r3, [pc, #16]	@ (8017cd4 <_vfiprintf_r+0x228>)
 8017cc2:	f7fd fb15 	bl	80152f0 <_printf_i>
 8017cc6:	e7e4      	b.n	8017c92 <_vfiprintf_r+0x1e6>
 8017cc8:	08018e38 	.word	0x08018e38
 8017ccc:	08018e42 	.word	0x08018e42
 8017cd0:	08014db9 	.word	0x08014db9
 8017cd4:	08017a87 	.word	0x08017a87
 8017cd8:	08018e3e 	.word	0x08018e3e

08017cdc <_raise_r>:
 8017cdc:	291f      	cmp	r1, #31
 8017cde:	b538      	push	{r3, r4, r5, lr}
 8017ce0:	4605      	mov	r5, r0
 8017ce2:	460c      	mov	r4, r1
 8017ce4:	d904      	bls.n	8017cf0 <_raise_r+0x14>
 8017ce6:	2316      	movs	r3, #22
 8017ce8:	6003      	str	r3, [r0, #0]
 8017cea:	f04f 30ff 	mov.w	r0, #4294967295
 8017cee:	bd38      	pop	{r3, r4, r5, pc}
 8017cf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017cf2:	b112      	cbz	r2, 8017cfa <_raise_r+0x1e>
 8017cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cf8:	b94b      	cbnz	r3, 8017d0e <_raise_r+0x32>
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	f000 f830 	bl	8017d60 <_getpid_r>
 8017d00:	4622      	mov	r2, r4
 8017d02:	4601      	mov	r1, r0
 8017d04:	4628      	mov	r0, r5
 8017d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d0a:	f000 b817 	b.w	8017d3c <_kill_r>
 8017d0e:	2b01      	cmp	r3, #1
 8017d10:	d00a      	beq.n	8017d28 <_raise_r+0x4c>
 8017d12:	1c59      	adds	r1, r3, #1
 8017d14:	d103      	bne.n	8017d1e <_raise_r+0x42>
 8017d16:	2316      	movs	r3, #22
 8017d18:	6003      	str	r3, [r0, #0]
 8017d1a:	2001      	movs	r0, #1
 8017d1c:	e7e7      	b.n	8017cee <_raise_r+0x12>
 8017d1e:	2100      	movs	r1, #0
 8017d20:	4620      	mov	r0, r4
 8017d22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017d26:	4798      	blx	r3
 8017d28:	2000      	movs	r0, #0
 8017d2a:	e7e0      	b.n	8017cee <_raise_r+0x12>

08017d2c <raise>:
 8017d2c:	4b02      	ldr	r3, [pc, #8]	@ (8017d38 <raise+0xc>)
 8017d2e:	4601      	mov	r1, r0
 8017d30:	6818      	ldr	r0, [r3, #0]
 8017d32:	f7ff bfd3 	b.w	8017cdc <_raise_r>
 8017d36:	bf00      	nop
 8017d38:	200001b8 	.word	0x200001b8

08017d3c <_kill_r>:
 8017d3c:	b538      	push	{r3, r4, r5, lr}
 8017d3e:	2300      	movs	r3, #0
 8017d40:	4d06      	ldr	r5, [pc, #24]	@ (8017d5c <_kill_r+0x20>)
 8017d42:	4604      	mov	r4, r0
 8017d44:	4608      	mov	r0, r1
 8017d46:	4611      	mov	r1, r2
 8017d48:	602b      	str	r3, [r5, #0]
 8017d4a:	f7ed faf1 	bl	8005330 <_kill>
 8017d4e:	1c43      	adds	r3, r0, #1
 8017d50:	d102      	bne.n	8017d58 <_kill_r+0x1c>
 8017d52:	682b      	ldr	r3, [r5, #0]
 8017d54:	b103      	cbz	r3, 8017d58 <_kill_r+0x1c>
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	bd38      	pop	{r3, r4, r5, pc}
 8017d5a:	bf00      	nop
 8017d5c:	200045a0 	.word	0x200045a0

08017d60 <_getpid_r>:
 8017d60:	f7ed bade 	b.w	8005320 <_getpid>

08017d64 <_malloc_usable_size_r>:
 8017d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d68:	1f18      	subs	r0, r3, #4
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	bfbc      	itt	lt
 8017d6e:	580b      	ldrlt	r3, [r1, r0]
 8017d70:	18c0      	addlt	r0, r0, r3
 8017d72:	4770      	bx	lr

08017d74 <_init>:
 8017d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d76:	bf00      	nop
 8017d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d7a:	bc08      	pop	{r3}
 8017d7c:	469e      	mov	lr, r3
 8017d7e:	4770      	bx	lr

08017d80 <_fini>:
 8017d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d82:	bf00      	nop
 8017d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d86:	bc08      	pop	{r3}
 8017d88:	469e      	mov	lr, r3
 8017d8a:	4770      	bx	lr
