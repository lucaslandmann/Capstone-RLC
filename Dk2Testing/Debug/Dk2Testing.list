
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011190  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011404  08011404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011504  08011504  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  08011504  08011504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801150c  0801150c  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801150c  0801150c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011510  08011510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08011514  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  2000000c  08011520  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  08011520  00013d84  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000318ad  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d00  00000000  00000000  000448ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a78  00000000  00000000  000495f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002150  00000000  00000000  0004c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004729b  00000000  00000000  0004e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000358ff  00000000  00000000  00095453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc803  00000000  00000000  000cad52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc9c  00000000  00000000  00287598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00293234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	080113ec 	.word	0x080113ec

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	080113ec 	.word	0x080113ec

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 f911 	bl	80027f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8ab 	bl	8000730 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f91b 	bl	8000814 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f950 	bl	8000882 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fe6d 	bl	80012c0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb4b 	bl	8000c80 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb0b 	bl	8000c04 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fb7f 	bl	8000cf0 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fbfb 	bl	8000dec <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc39 	bl	8000e6c <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc4b 	bl	8000e94 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fcc9 	bl	8000f94 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fd81 	bl	8001108 <MX_TIM3_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000606:	f000 fe2d 	bl	8001264 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 800060a:	f000 f949 	bl	80008a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060e:	f000 fddd 	bl	80011cc <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000612:	f000 fd0d 	bl	8001030 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000616:	f000 fa7b 	bl	8000b10 <MX_ADC4_Init>
  MX_I2C1_Init();
 800061a:	f000 fba7 	bl	8000d6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f002 f9b0 	bl	8002984 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2104      	movs	r1, #4
 8000628:	4836      	ldr	r0, [pc, #216]	@ (8000704 <main+0x138>)
 800062a:	f006 ff95 	bl	8007558 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f002 f9a8 	bl	8002984 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Vals, DIM(adc1Vals));
 8000634:	220d      	movs	r2, #13
 8000636:	4934      	ldr	r1, [pc, #208]	@ (8000708 <main+0x13c>)
 8000638:	4834      	ldr	r0, [pc, #208]	@ (800070c <main+0x140>)
 800063a:	f003 f829 	bl	8003690 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Vals, DIM(adc4Vals));
 800063e:	2202      	movs	r2, #2
 8000640:	4933      	ldr	r1, [pc, #204]	@ (8000710 <main+0x144>)
 8000642:	4834      	ldr	r0, [pc, #208]	@ (8000714 <main+0x148>)
 8000644:	f003 f824 	bl	8003690 <HAL_ADC_Start_DMA>


  //Set to "Awake" state
  uint8_t awake[] = {0x02, 0x81};
 8000648:	f248 1302 	movw	r3, #33026	@ 0x8102
 800064c:	80bb      	strh	r3, [r7, #4]
  I2C_Transmit(ADCAddress, 0x02, 0x81);
 800064e:	2281      	movs	r2, #129	@ 0x81
 8000650:	2102      	movs	r1, #2
 8000652:	2090      	movs	r0, #144	@ 0x90
 8000654:	f000 ff6a 	bl	800152c <I2C_Transmit>

  //power down mic bias and ADC channels on fault
  I2C_Transmit(ADCAddress, 0x28, 0x10);
 8000658:	2210      	movs	r2, #16
 800065a:	2128      	movs	r1, #40	@ 0x28
 800065c:	2090      	movs	r0, #144	@ 0x90
 800065e:	f000 ff65 	bl	800152c <I2C_Transmit>

  //config channel 1
  I2C_Transmit(ADCAddress, 0x3C, 0x18);
 8000662:	2218      	movs	r2, #24
 8000664:	213c      	movs	r1, #60	@ 0x3c
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f000 ff60 	bl	800152c <I2C_Transmit>

  //config channel 2
  I2C_Transmit(ADCAddress, 0x41, 0x18);
 800066c:	2218      	movs	r2, #24
 800066e:	2141      	movs	r1, #65	@ 0x41
 8000670:	2090      	movs	r0, #144	@ 0x90
 8000672:	f000 ff5b 	bl	800152c <I2C_Transmit>

  //config channel 3
  I2C_Transmit(ADCAddress, 0x46, 0x18);
 8000676:	2218      	movs	r2, #24
 8000678:	2146      	movs	r1, #70	@ 0x46
 800067a:	2090      	movs	r0, #144	@ 0x90
 800067c:	f000 ff56 	bl	800152c <I2C_Transmit>

  //config channel 4
  I2C_Transmit(ADCAddress, 0x4B, 0x18);
 8000680:	2218      	movs	r2, #24
 8000682:	214b      	movs	r1, #75	@ 0x4b
 8000684:	2090      	movs	r0, #144	@ 0x90
 8000686:	f000 ff51 	bl	800152c <I2C_Transmit>

  //enable input channel 1 to 4 I2C
  I2C_Transmit(ADCAddress, 0x73, 0xF0);
 800068a:	22f0      	movs	r2, #240	@ 0xf0
 800068c:	2173      	movs	r1, #115	@ 0x73
 800068e:	2090      	movs	r0, #144	@ 0x90
 8000690:	f000 ff4c 	bl	800152c <I2C_Transmit>

  //enable output channel 1 to 4 ASI
  I2C_Transmit(ADCAddress, 0x74, 0xF0);
 8000694:	22f0      	movs	r2, #240	@ 0xf0
 8000696:	2174      	movs	r1, #116	@ 0x74
 8000698:	2090      	movs	r0, #144	@ 0x90
 800069a:	f000 ff47 	bl	800152c <I2C_Transmit>

  //power up mic bias
  I2C_Transmit(ADCAddress, 0x75, 0xE0);
 800069e:	22e0      	movs	r2, #224	@ 0xe0
 80006a0:	2175      	movs	r1, #117	@ 0x75
 80006a2:	2090      	movs	r0, #144	@ 0x90
 80006a4:	f000 ff42 	bl	800152c <I2C_Transmit>


  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t) pcmVals, DIM(pcmVals));
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <main+0x14c>)
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2220      	movs	r2, #32
 80006ae:	4619      	mov	r1, r3
 80006b0:	481a      	ldr	r0, [pc, #104]	@ (800071c <main+0x150>)
 80006b2:	f00d fecf 	bl	800e454 <HAL_SAI_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  signal[1] = adc1Vals[index % 6];
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <main+0x154>)
 80006b8:	881a      	ldrh	r2, [r3, #0]
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <main+0x158>)
 80006bc:	fba3 1302 	umull	r1, r3, r3, r2
 80006c0:	0899      	lsrs	r1, r3, #2
 80006c2:	460b      	mov	r3, r1
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	440b      	add	r3, r1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <main+0x13c>)
 80006d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <main+0x15c>)
 80006da:	605a      	str	r2, [r3, #4]
	  index++;
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <main+0x154>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <main+0x154>)
 80006e6:	801a      	strh	r2, [r3, #0]
	  if(index >= sizeof(adc1Vals))
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <main+0x154>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	2b19      	cmp	r3, #25
 80006ee:	d902      	bls.n	80006f6 <main+0x12a>
	  {
		  index = 0;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <main+0x154>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	801a      	strh	r2, [r3, #0]
	  }
	  //HAL_SAI_Receive(&hsai_BlockB2, (uint8_t *) pcmVals, DIM(pcmVals), 100);
	  HAL_SAI_Transmit(&hsai_BlockA2, (uint8_t *) pcmVals, DIM(pcmVals), 100);
 80006f6:	2364      	movs	r3, #100	@ 0x64
 80006f8:	2220      	movs	r2, #32
 80006fa:	4907      	ldr	r1, [pc, #28]	@ (8000718 <main+0x14c>)
 80006fc:	480b      	ldr	r0, [pc, #44]	@ (800072c <main+0x160>)
 80006fe:	f00d fda3 	bl	800e248 <HAL_SAI_Transmit>
	  signal[1] = adc1Vals[index % 6];
 8000702:	e7d8      	b.n	80006b6 <main+0xea>
 8000704:	42021000 	.word	0x42021000
 8000708:	20000cd4 	.word	0x20000cd4
 800070c:	20000028 	.word	0x20000028
 8000710:	20000cf0 	.word	0x20000cf0
 8000714:	200000b4 	.word	0x200000b4
 8000718:	20000cf4 	.word	0x20000cf4
 800071c:	2000054c 	.word	0x2000054c
 8000720:	20000d78 	.word	0x20000d78
 8000724:	aaaaaaab 	.word	0xaaaaaaab
 8000728:	20000d74 	.word	0x20000d74
 800072c:	200004b4 	.word	0x200004b4

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09e      	sub	sp, #120	@ 0x78
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	2260      	movs	r2, #96	@ 0x60
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f010 fe27 	bl	8011392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000754:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000758:	f008 fe32 	bl	80093c0 <HAL_PWREx_ControlVoltageScaling>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000762:	f000 ff03 	bl	800156c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000766:	f008 fe1b 	bl	80093a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemClock_Config+0xe0>)
 800076c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000770:	4a27      	ldr	r2, [pc, #156]	@ (8000810 <SystemClock_Config+0xe0>)
 8000772:	f023 0318 	bic.w	r3, r3, #24
 8000776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800077a:	2317      	movs	r3, #23
 800077c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000784:	2381      	movs	r3, #129	@ 0x81
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000796:	2310      	movs	r3, #16
 8000798:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	2303      	movs	r3, #3
 80007a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007ae:	2308      	movs	r3, #8
 80007b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80007b2:	2308      	movs	r3, #8
 80007b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80007be:	230c      	movs	r3, #12
 80007c0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 ff22 	bl	8009614 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007d6:	f000 fec9 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	231f      	movs	r3, #31
 80007dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2103      	movs	r1, #3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 fde8 	bl	800a3cc <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000802:	f000 feb3 	bl	800156c <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3778      	adds	r7, #120	@ 0x78
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	46020c00 	.word	0x46020c00

08000814 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0b8      	sub	sp, #224	@ 0xe0
 8000818:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	22e0      	movs	r2, #224	@ 0xe0
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f010 fdb6 	bl	8011392 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000826:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082a:	f04f 0301 	mov.w	r3, #1
 800082e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000838:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800083c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000840:	2303      	movs	r3, #3
 8000842:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000848:	230c      	movs	r3, #12
 800084a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000850:	2303      	movs	r3, #3
 8000852:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000858:	230c      	movs	r3, #12
 800085a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000862:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4618      	mov	r0, r3
 800086c:	f00a f97e 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000876:	f000 fe79 	bl	800156c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	37e0      	adds	r7, #224	@ 0xe0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000886:	f008 fe87 	bl	8009598 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088a:	2002      	movs	r0, #2
 800088c:	f008 fe24 	bl	80094d8 <HAL_PWREx_ConfigSupply>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000896:	f000 fe69 	bl	800156c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2220      	movs	r2, #32
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f010 fd70 	bl	8011392 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b2:	4b88      	ldr	r3, [pc, #544]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008b4:	4a88      	ldr	r2, [pc, #544]	@ (8000ad8 <MX_ADC1_Init+0x238>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b8:	4b86      	ldr	r3, [pc, #536]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80008be:	4b85      	ldr	r3, [pc, #532]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80008c4:	4b83      	ldr	r3, [pc, #524]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b82      	ldr	r3, [pc, #520]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008d0:	4b80      	ldr	r3, [pc, #512]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008d8:	2204      	movs	r2, #4
 80008da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80008dc:	4b7d      	ldr	r3, [pc, #500]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008de:	2201      	movs	r2, #1
 80008e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008e2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 80008ea:	4b7a      	ldr	r3, [pc, #488]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008ec:	220d      	movs	r2, #13
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b78      	ldr	r3, [pc, #480]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b76      	ldr	r3, [pc, #472]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b75      	ldr	r3, [pc, #468]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000900:	2200      	movs	r2, #0
 8000902:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000904:	4b73      	ldr	r3, [pc, #460]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000906:	2201      	movs	r2, #1
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800090c:	4b71      	ldr	r3, [pc, #452]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 800090e:	2200      	movs	r2, #0
 8000910:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000912:	4b70      	ldr	r3, [pc, #448]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000914:	2200      	movs	r2, #0
 8000916:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000918:	4b6e      	ldr	r3, [pc, #440]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 800091a:	2200      	movs	r2, #0
 800091c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800091e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000920:	2203      	movs	r2, #3
 8000922:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000924:	4b6b      	ldr	r3, [pc, #428]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	4869      	ldr	r0, [pc, #420]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 800092e:	f002 fbc7 	bl	80030c0 <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000938:	f000 fe18 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800093c:	4b67      	ldr	r3, [pc, #412]	@ (8000adc <MX_ADC1_Init+0x23c>)
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000940:	2306      	movs	r3, #6
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000948:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800094c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800094e:	2304      	movs	r3, #4
 8000950:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	485e      	ldr	r0, [pc, #376]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 800095c:	f003 fade 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000966:	f000 fe01 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800096a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ae0 <MX_ADC1_Init+0x240>)
 800096c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800096e:	230c      	movs	r3, #12
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4857      	ldr	r0, [pc, #348]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000978:	f003 fad0 	bl	8003f1c <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000982:	f000 fdf3 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000986:	4b57      	ldr	r3, [pc, #348]	@ (8000ae4 <MX_ADC1_Init+0x244>)
 8000988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800098a:	2312      	movs	r3, #18
 800098c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4850      	ldr	r0, [pc, #320]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000994:	f003 fac2 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800099e:	f000 fde5 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <MX_ADC1_Init+0x248>)
 80009a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009a6:	2318      	movs	r3, #24
 80009a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4849      	ldr	r0, [pc, #292]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80009b0:	f003 fab4 	bl	8003f1c <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80009ba:	f000 fdd7 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009be:	4b4b      	ldr	r3, [pc, #300]	@ (8000aec <MX_ADC1_Init+0x24c>)
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4841      	ldr	r0, [pc, #260]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80009ce:	f003 faa5 	bl	8003f1c <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80009d8:	f000 fdc8 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009dc:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <MX_ADC1_Init+0x250>)
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009e0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	4619      	mov	r1, r3
 80009ea:	483a      	ldr	r0, [pc, #232]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 80009ec:	f003 fa96 	bl	8003f1c <HAL_ADC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80009f6:	f000 fdb9 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009fa:	4b3e      	ldr	r3, [pc, #248]	@ (8000af4 <MX_ADC1_Init+0x254>)
 80009fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009fe:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4832      	ldr	r0, [pc, #200]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000a0a:	f003 fa87 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000a14:	f000 fdaa 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a18:	4b37      	ldr	r3, [pc, #220]	@ (8000af8 <MX_ADC1_Init+0x258>)
 8000a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a1c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	482b      	ldr	r0, [pc, #172]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000a28:	f003 fa78 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000a32:	f000 fd9b 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <MX_ADC1_Init+0x25c>)
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a3a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4823      	ldr	r0, [pc, #140]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000a46:	f003 fa69 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8000a50:	f000 fd8c 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_ADC1_Init+0x260>)
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000a64:	f003 fa5a 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000a6e:	f000 fd7d 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <MX_ADC1_Init+0x264>)
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000a76:	f240 2306 	movw	r3, #518	@ 0x206
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000a82:	f003 fa4b 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8000a8c:	f000 fd6e 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_ADC1_Init+0x268>)
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000a94:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000a98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000aa0:	f003 fa3c 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000aaa:	f000 fd5f 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_ADC1_Init+0x26c>)
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000ab2:	f240 2312 	movw	r3, #530	@ 0x212
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_ADC1_Init+0x234>)
 8000abe:	f003 fa2d 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8000ac8:	f000 fd50 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000028 	.word	0x20000028
 8000ad8:	42028000 	.word	0x42028000
 8000adc:	04000002 	.word	0x04000002
 8000ae0:	08000004 	.word	0x08000004
 8000ae4:	0c000008 	.word	0x0c000008
 8000ae8:	10000010 	.word	0x10000010
 8000aec:	14000020 	.word	0x14000020
 8000af0:	1c000080 	.word	0x1c000080
 8000af4:	20000100 	.word	0x20000100
 8000af8:	2a000400 	.word	0x2a000400
 8000afc:	2e000800 	.word	0x2e000800
 8000b00:	32001000 	.word	0x32001000
 8000b04:	3e008000 	.word	0x3e008000
 8000b08:	42010000 	.word	0x42010000
 8000b0c:	ce080000 	.word	0xce080000

08000b10 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2220      	movs	r2, #32
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f010 fc38 	bl	8011392 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b22:	4b34      	ldr	r3, [pc, #208]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b24:	4a34      	ldr	r2, [pc, #208]	@ (8000bf8 <MX_ADC4_Init+0xe8>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b28:	4b32      	ldr	r3, [pc, #200]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b31      	ldr	r3, [pc, #196]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b30:	2204      	movs	r2, #4
 8000b32:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b34:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b3c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b40:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b42:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b44:	2204      	movs	r2, #4
 8000b46:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000b5c:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b62:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b78:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b7c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000b98:	4816      	ldr	r0, [pc, #88]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000b9a:	f002 fa91 	bl	80030c0 <HAL_ADC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000ba4:	f000 fce2 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_ADC4_Init+0xec>)
 8000baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000bc2:	f003 f9ab 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000bcc:	f000 fcce 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_ADC4_Init+0xf0>)
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_ADC4_Init+0xe4>)
 8000bde:	f003 f99d 	bl	8003f1c <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000be8:	f000 fcc0 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000b4 	.word	0x200000b4
 8000bf8:	46021000 	.word	0x46021000
 8000bfc:	1c000080 	.word	0x1c000080
 8000c00:	20000100 	.word	0x20000100

08000c04 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <MX_DMA2D_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c50:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c52:	f005 f8ed 	bl	8005e30 <HAL_DMA2D_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000c5c:	f000 fc86 	bl	800156c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c60:	2101      	movs	r1, #1
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_DMA2D_Init+0x74>)
 8000c64:	f005 f946 	bl	8005ef4 <HAL_DMA2D_ConfigLayer>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fc7d 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000026c 	.word	0x2000026c
 8000c7c:	4002b000 	.word	0x4002b000

08000c80 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <MX_GPDMA1_Init+0x6c>)
 8000c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <MX_GPDMA1_Init+0x6c>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_GPDMA1_Init+0x6c>)
 8000c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	201d      	movs	r0, #29
 8000caa:	f004 f963 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000cae:	201d      	movs	r0, #29
 8000cb0:	f004 f97a 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	201e      	movs	r0, #30
 8000cba:	f004 f95b 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000cbe:	201e      	movs	r0, #30
 8000cc0:	f004 f972 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	201f      	movs	r0, #31
 8000cca:	f004 f953 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000cce:	201f      	movs	r0, #31
 8000cd0:	f004 f96a 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2020      	movs	r0, #32
 8000cda:	f004 f94b 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000cde:	2020      	movs	r0, #32
 8000ce0:	f004 f962 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	46020c00 	.word	0x46020c00

08000cf0 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <MX_HSPI1_Init+0x78>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d0c:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d10:	221a      	movs	r2, #26
 8000d12:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_HSPI1_Init+0x74>)
 8000d52:	f00f feb7 	bl	8010ac4 <HAL_XSPI_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000d5c:	f000 fc06 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200002d4 	.word	0x200002d4
 8000d68:	420d3400 	.word	0x420d3400

08000d6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_I2C1_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <MX_I2C1_Init+0x7c>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000da8:	f006 fc2a 	bl	8007600 <HAL_I2C_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000db2:	f000 fbdb 	bl	800156c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000dba:	f007 fdb5 	bl	8008928 <HAL_I2CEx_ConfigAnalogFilter>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 fbd2 	bl	800156c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000dcc:	f007 fdf7 	bl	80089be <HAL_I2CEx_ConfigDigitalFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 fbc9 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000334 	.word	0x20000334
 8000de4:	40005400 	.word	0x40005400
 8000de8:	20a0c4df 	.word	0x20a0c4df

08000dec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <MX_I2C2_Init+0x78>)
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000df8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <MX_I2C2_Init+0x7c>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e26:	480e      	ldr	r0, [pc, #56]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e28:	f006 fbea 	bl	8007600 <HAL_I2C_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e32:	f000 fb9b 	bl	800156c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4809      	ldr	r0, [pc, #36]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e3a:	f007 fd75 	bl	8008928 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e44:	f000 fb92 	bl	800156c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_I2C2_Init+0x74>)
 8000e4c:	f007 fdb7 	bl	80089be <HAL_I2CEx_ConfigDigitalFilter>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 fb89 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000388 	.word	0x20000388
 8000e64:	40005800 	.word	0x40005800
 8000e68:	20a0c4df 	.word	0x20a0c4df

08000e6c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f007 fdf1 	bl	8008a58 <HAL_ICACHE_ConfigAssociativityMode>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000e7c:	f000 fb76 	bl	800156c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e80:	f007 fe0a 	bl	8008a98 <HAL_ICACHE_Enable>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000e8a:	f000 fb6f 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08e      	sub	sp, #56	@ 0x38
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2234      	movs	r2, #52	@ 0x34
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f010 fa76 	bl	8011392 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ea8:	4a39      	ldr	r2, [pc, #228]	@ (8000f90 <MX_LTDC_Init+0xfc>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000eac:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000eb2:	4b36      	ldr	r3, [pc, #216]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000eb8:	4b34      	ldr	r3, [pc, #208]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ebe:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000ec4:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000eca:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ecc:	2203      	movs	r2, #3
 8000ece:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ed2:	220b      	movs	r2, #11
 8000ed4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ed8:	220b      	movs	r2, #11
 8000eda:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ede:	f240 322b 	movw	r2, #811	@ 0x32b
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ee6:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000eec:	4b27      	ldr	r3, [pc, #156]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000eee:	f240 3233 	movw	r2, #819	@ 0x333
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000ef4:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000ef6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f14:	481d      	ldr	r0, [pc, #116]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000f16:	f007 fdcf 	bl	8008ab8 <HAL_LTDC_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f20:	f000 fb24 	bl	800156c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000f28:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f2c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000f32:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000f36:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f3c:	23ff      	movs	r3, #255	@ 0xff
 8000f3e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f48:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <MX_LTDC_Init+0xf8>)
 8000f74:	f007 ff32 	bl	8008ddc <HAL_LTDC_ConfigLayer>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000f7e:	f000 faf5 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3738      	adds	r7, #56	@ 0x38
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200003dc 	.word	0x200003dc
 8000f90:	40016800 	.word	0x40016800

08000f94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fae:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <MX_RTC_Init+0x98>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fba:	227f      	movs	r2, #127	@ 0x7f
 8000fbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fdc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fea:	480f      	ldr	r0, [pc, #60]	@ (8001028 <MX_RTC_Init+0x94>)
 8000fec:	f00c fdba 	bl	800db64 <HAL_RTC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000ff6:	f000 fab9 	bl	800156c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	@ (8001028 <MX_RTC_Init+0x94>)
 8001010:	f00c fed6 	bl	800ddc0 <HAL_RTCEx_PrivilegeModeSet>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800101a:	f000 faa7 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000484 	.word	0x20000484
 800102c:	46007800 	.word	0x46007800

08001030 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001034:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001036:	4a30      	ldr	r2, [pc, #192]	@ (80010f8 <MX_SAI2_Init+0xc8>)
 8001038:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800103a:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001040:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800104c:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001052:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 800105a:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <MX_SAI2_Init+0xcc>)
 800105c:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001066:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800106a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800106c:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001074:	2200      	movs	r2, #0
 8001076:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800107e:	2302      	movs	r3, #2
 8001080:	2202      	movs	r2, #2
 8001082:	2101      	movs	r1, #1
 8001084:	481b      	ldr	r0, [pc, #108]	@ (80010f4 <MX_SAI2_Init+0xc4>)
 8001086:	f00c fec9 	bl	800de1c <HAL_SAI_InitProtocol>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001090:	f000 fa6c 	bl	800156c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_SAI2_Init+0xd0>)
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <MX_SAI2_Init+0xd4>)
 8001098:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_SAI2_Init+0xd0>)
 800109c:	2201      	movs	r2, #1
 800109e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010ba:	4a10      	ldr	r2, [pc, #64]	@ (80010fc <MX_SAI2_Init+0xcc>)
 80010bc:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ca:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 4) != HAL_OK)
 80010d8:	2304      	movs	r3, #4
 80010da:	2202      	movs	r2, #2
 80010dc:	2100      	movs	r1, #0
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <MX_SAI2_Init+0xd0>)
 80010e0:	f00c fe9c 	bl	800de1c <HAL_SAI_InitProtocol>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 80010ea:	f000 fa3f 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200004b4 	.word	0x200004b4
 80010f8:	40015804 	.word	0x40015804
 80010fc:	00017700 	.word	0x00017700
 8001100:	2000054c 	.word	0x2000054c
 8001104:	40015824 	.word	0x40015824

08001108 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 800112e:	4a26      	ldr	r2, [pc, #152]	@ (80011c8 <MX_TIM3_Init+0xc0>)
 8001130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001132:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 8001134:	22a0      	movs	r2, #160	@ 0xa0
 8001136:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 8001140:	2264      	movs	r2, #100	@ 0x64
 8001142:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001150:	481c      	ldr	r0, [pc, #112]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 8001152:	f00d fd0b 	bl	800eb6c <HAL_TIM_PWM_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 fa06 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4815      	ldr	r0, [pc, #84]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 8001170:	f00e fb44 	bl	800f7fc <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800117a:	f000 f9f7 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	@ 0x60
 8001180:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001182:	234b      	movs	r3, #75	@ 0x4b
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	220c      	movs	r2, #12
 8001192:	4619      	mov	r1, r3
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 8001196:	f00d fd41 	bl	800ec1c <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011a0:	f000 f9e4 	bl	800156c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011b2:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <MX_TIM3_Init+0xbc>)
 80011b6:	f000 ff5d 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000710 	.word	0x20000710
 80011c8:	40000400 	.word	0x40000400

080011cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011d2:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <MX_USART1_UART_Init+0x94>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_USART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001214:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001216:	f00e fbb3 	bl	800f980 <HAL_UART_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001220:	f000 f9a4 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_USART1_UART_Init+0x90>)
 8001228:	f00f fb81 	bl	801092e <HAL_UARTEx_SetTxFifoThreshold>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001232:	f000 f99b 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800123a:	f00f fbb6 	bl	80109aa <HAL_UARTEx_SetRxFifoThreshold>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001244:	f000 f992 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_USART1_UART_Init+0x90>)
 800124a:	f00f fb37 	bl	80108bc <HAL_UARTEx_DisableFifoMode>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 f98a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000075c 	.word	0x2000075c
 8001260:	40013800 	.word	0x40013800

08001264 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800126a:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <MX_USB_OTG_HS_PCD_Init+0x58>)
 800126c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001270:	2209      	movs	r2, #9
 8001272:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001276:	2200      	movs	r2, #0
 8001278:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800127c:	2203      	movs	r2, #3
 800127e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800128e:	2200      	movs	r2, #0
 8001290:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001294:	2200      	movs	r2, #0
 8001296:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800129a:	2200      	movs	r2, #0
 800129c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012a6:	f007 ff4a 	bl	800913e <HAL_PCD_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80012b0:	f000 f95c 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200007f0 	.word	0x200007f0
 80012bc:	42040000 	.word	0x42040000

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	@ 0x38
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001508 <MX_GPIO_Init+0x248>)
 80012d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012dc:	4a8a      	ldr	r2, [pc, #552]	@ (8001508 <MX_GPIO_Init+0x248>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012e6:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <MX_GPIO_Init+0x248>)
 80012e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	4b84      	ldr	r3, [pc, #528]	@ (8001508 <MX_GPIO_Init+0x248>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fa:	4a83      	ldr	r2, [pc, #524]	@ (8001508 <MX_GPIO_Init+0x248>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001304:	4b80      	ldr	r3, [pc, #512]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001312:	4b7d      	ldr	r3, [pc, #500]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001318:	4a7b      	ldr	r2, [pc, #492]	@ (8001508 <MX_GPIO_Init+0x248>)
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001322:	4b79      	ldr	r3, [pc, #484]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001330:	4b75      	ldr	r3, [pc, #468]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001336:	4a74      	ldr	r2, [pc, #464]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001340:	4b71      	ldr	r3, [pc, #452]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b6e      	ldr	r3, [pc, #440]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001354:	4a6c      	ldr	r2, [pc, #432]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800135e:	4b6a      	ldr	r3, [pc, #424]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b66      	ldr	r3, [pc, #408]	@ (8001508 <MX_GPIO_Init+0x248>)
 800136e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001372:	4a65      	ldr	r2, [pc, #404]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800137c:	4b62      	ldr	r3, [pc, #392]	@ (8001508 <MX_GPIO_Init+0x248>)
 800137e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <MX_GPIO_Init+0x248>)
 800138c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001390:	4a5d      	ldr	r2, [pc, #372]	@ (8001508 <MX_GPIO_Init+0x248>)
 8001392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001396:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800139a:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <MX_GPIO_Init+0x248>)
 800139c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a8:	4b57      	ldr	r3, [pc, #348]	@ (8001508 <MX_GPIO_Init+0x248>)
 80013aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ae:	4a56      	ldr	r2, [pc, #344]	@ (8001508 <MX_GPIO_Init+0x248>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b8:	4b53      	ldr	r3, [pc, #332]	@ (8001508 <MX_GPIO_Init+0x248>)
 80013ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013c6:	4b50      	ldr	r3, [pc, #320]	@ (8001508 <MX_GPIO_Init+0x248>)
 80013c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001508 <MX_GPIO_Init+0x248>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <MX_GPIO_Init+0x248>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2104      	movs	r1, #4
 80013e8:	4848      	ldr	r0, [pc, #288]	@ (800150c <MX_GPIO_Init+0x24c>)
 80013ea:	f006 f8b5 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2110      	movs	r1, #16
 80013f2:	4846      	ldr	r0, [pc, #280]	@ (800150c <MX_GPIO_Init+0x24c>)
 80013f4:	f006 f8b0 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2114      	movs	r1, #20
 80013fc:	4844      	ldr	r0, [pc, #272]	@ (8001510 <MX_GPIO_Init+0x250>)
 80013fe:	f006 f8ab 	bl	8007558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001402:	2314      	movs	r3, #20
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	483c      	ldr	r0, [pc, #240]	@ (800150c <MX_GPIO_Init+0x24c>)
 800141a:	f005 fec5 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800141e:	2320      	movs	r3, #32
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	4b3c      	ldr	r3, [pc, #240]	@ (8001514 <MX_GPIO_Init+0x254>)
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4836      	ldr	r0, [pc, #216]	@ (800150c <MX_GPIO_Init+0x24c>)
 8001432:	f005 feb9 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001436:	2302      	movs	r3, #2
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800143a:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <MX_GPIO_Init+0x258>)
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4834      	ldr	r0, [pc, #208]	@ (800151c <MX_GPIO_Init+0x25c>)
 800144a:	f005 fead 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <MX_GPIO_Init+0x260>)
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001456:	2301      	movs	r3, #1
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	482e      	ldr	r0, [pc, #184]	@ (800151c <MX_GPIO_Init+0x25c>)
 8001462:	f005 fea1 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001466:	2314      	movs	r3, #20
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4824      	ldr	r0, [pc, #144]	@ (8001510 <MX_GPIO_Init+0x250>)
 800147e:	f005 fe93 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	481e      	ldr	r0, [pc, #120]	@ (8001510 <MX_GPIO_Init+0x250>)
 8001496:	f005 fe87 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 800149a:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	481d      	ldr	r0, [pc, #116]	@ (8001524 <MX_GPIO_Init+0x264>)
 80014b0:	f005 fe7a 	bl	80071a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80014b4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4817      	ldr	r0, [pc, #92]	@ (8001528 <MX_GPIO_Init+0x268>)
 80014ca:	f005 fe6d 	bl	80071a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	200c      	movs	r0, #12
 80014d4:	f003 fd4e 	bl	8004f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014d8:	200c      	movs	r0, #12
 80014da:	f003 fd65 	bl	8004fa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	200f      	movs	r0, #15
 80014e4:	f003 fd46 	bl	8004f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014e8:	200f      	movs	r0, #15
 80014ea:	f003 fd5d 	bl	8004fa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2010      	movs	r0, #16
 80014f4:	f003 fd3e 	bl	8004f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80014f8:	2010      	movs	r0, #16
 80014fa:	f003 fd55 	bl	8004fa8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	@ 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	46020c00 	.word	0x46020c00
 800150c:	42021000 	.word	0x42021000
 8001510:	42020c00 	.word	0x42020c00
 8001514:	10110000 	.word	0x10110000
 8001518:	10310000 	.word	0x10310000
 800151c:	42020000 	.word	0x42020000
 8001520:	10210000 	.word	0x10210000
 8001524:	42021800 	.word	0x42021800
 8001528:	42020400 	.word	0x42020400

0800152c <I2C_Transmit>:

/* USER CODE BEGIN 4 */

static uint8_t I2C_Transmit(uint16_t DevAddress, uint8_t targetRegister, uint8_t command)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af02      	add	r7, sp, #8
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	460b      	mov	r3, r1
 8001538:	717b      	strb	r3, [r7, #5]
 800153a:	4613      	mov	r3, r2
 800153c:	713b      	strb	r3, [r7, #4]
	uint8_t pData[2] = {targetRegister, command};
 800153e:	797b      	ldrb	r3, [r7, #5]
 8001540:	733b      	strb	r3, [r7, #12]
 8001542:	793b      	ldrb	r3, [r7, #4]
 8001544:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData, DIM(pData), 100);
 8001546:	f107 020c 	add.w	r2, r7, #12
 800154a:	88f9      	ldrh	r1, [r7, #6]
 800154c:	2364      	movs	r3, #100	@ 0x64
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2302      	movs	r3, #2
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <I2C_Transmit+0x3c>)
 8001554:	f006 f8f0 	bl	8007738 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001558:	200a      	movs	r0, #10
 800155a:	f001 fa13 	bl	8002984 <HAL_Delay>
	return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000334 	.word	0x20000334

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_MspInit+0x30>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001584:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_MspInit+0x30>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_MspInit+0x30>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800159c:	f008 f80c 	bl	80095b8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	46020c00 	.word	0x46020c00

080015ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0e0      	sub	sp, #384	@ 0x180
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015b6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80015ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015cc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015d0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d4:	4618      	mov	r0, r3
 80015d6:	23e0      	movs	r3, #224	@ 0xe0
 80015d8:	461a      	mov	r2, r3
 80015da:	2100      	movs	r1, #0
 80015dc:	f00f fed9 	bl	8011392 <memset>
  if(hadc->Instance==ADC1)
 80015e0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015e4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a9d      	ldr	r2, [pc, #628]	@ (8001864 <HAL_ADC_MspInit+0x2b8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 814a 	bne.w	8001888 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80015f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015f8:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80015fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001608:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800160c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001610:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001614:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f009 faa5 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001628:	f7ff ffa0 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800162c:	4b8e      	ldr	r3, [pc, #568]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 800162e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001632:	4a8d      	ldr	r2, [pc, #564]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 8001634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001638:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800163c:	4b8a      	ldr	r3, [pc, #552]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 800163e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001642:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001646:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800164a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001654:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001658:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 800165c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001660:	4a81      	ldr	r2, [pc, #516]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800166a:	4b7f      	ldr	r3, [pc, #508]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 800166c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001670:	f003 0204 	and.w	r2, r3, #4
 8001674:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001678:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001682:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001686:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b77      	ldr	r3, [pc, #476]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 800168a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168e:	4a76      	ldr	r2, [pc, #472]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001698:	4b73      	ldr	r3, [pc, #460]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169e:	f003 0201 	and.w	r2, r3, #1
 80016a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016b4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c6:	4b68      	ldr	r3, [pc, #416]	@ (8001868 <HAL_ADC_MspInit+0x2bc>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016cc:	f003 0202 	and.w	r2, r3, #2
 80016d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016d4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80016e2:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80016e4:	230f      	movs	r3, #15
 80016e6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80016fa:	4619      	mov	r1, r3
 80016fc:	485b      	ldr	r0, [pc, #364]	@ (800186c <HAL_ADC_MspInit+0x2c0>)
 80016fe:	f005 fd53 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001702:	23ed      	movs	r3, #237	@ 0xed
 8001704:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001708:	2303      	movs	r3, #3
 800170a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001718:	4619      	mov	r1, r3
 800171a:	4855      	ldr	r0, [pc, #340]	@ (8001870 <HAL_ADC_MspInit+0x2c4>)
 800171c:	f005 fd44 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001720:	2303      	movs	r3, #3
 8001722:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001736:	4619      	mov	r1, r3
 8001738:	484e      	ldr	r0, [pc, #312]	@ (8001874 <HAL_ADC_MspInit+0x2c8>)
 800173a:	f005 fd35 	bl	80071a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800173e:	2321      	movs	r3, #33	@ 0x21
 8001740:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800175c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001760:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800176a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800176e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800177e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001782:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80017a4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80017a8:	4933      	ldr	r1, [pc, #204]	@ (8001878 <HAL_ADC_MspInit+0x2cc>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fe10 	bl	80063d0 <HAL_DMAEx_List_BuildNode>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 80017b6:	f7ff fed9 	bl	800156c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80017ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001878 <HAL_ADC_MspInit+0x2cc>)
 80017bc:	2100      	movs	r1, #0
 80017be:	482f      	ldr	r0, [pc, #188]	@ (800187c <HAL_ADC_MspInit+0x2d0>)
 80017c0:	f004 fe32 	bl	8006428 <HAL_DMAEx_List_InsertNode>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 80017ca:	f7ff fecf 	bl	800156c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80017ce:	482b      	ldr	r0, [pc, #172]	@ (800187c <HAL_ADC_MspInit+0x2d0>)
 80017d0:	f004 fef3 	bl	80065ba <HAL_DMAEx_List_SetCircularMode>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 80017da:	f7ff fec7 	bl	800156c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_ADC_MspInit+0x2d8>)
 80017e2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017e4:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80017ea:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017f0:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80017fc:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 80017fe:	2281      	movs	r2, #129	@ 0x81
 8001800:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001802:	481f      	ldr	r0, [pc, #124]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 8001804:	f004 fc24 	bl	8006050 <HAL_DMAEx_List_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 800180e:	f7ff fead 	bl	800156c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001812:	491a      	ldr	r1, [pc, #104]	@ (800187c <HAL_ADC_MspInit+0x2d0>)
 8001814:	481a      	ldr	r0, [pc, #104]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 8001816:	f004 ff31 	bl	800667c <HAL_DMAEx_List_LinkQ>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 8001820:	f7ff fea4 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001824:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001828:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 8001830:	671a      	str	r2, [r3, #112]	@ 0x70
 8001832:	4a13      	ldr	r2, [pc, #76]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 8001834:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001838:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001840:	2110      	movs	r1, #16
 8001842:	480f      	ldr	r0, [pc, #60]	@ (8001880 <HAL_ADC_MspInit+0x2d4>)
 8001844:	f004 f812 	bl	800586c <HAL_DMA_ConfigChannelAttributes>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 800184e:	f7ff fe8d 	bl	800156c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2025      	movs	r0, #37	@ 0x25
 8001858:	f003 fb8c 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800185c:	2025      	movs	r0, #37	@ 0x25
 800185e:	f003 fba3 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001862:	e0bf      	b.n	80019e4 <HAL_ADC_MspInit+0x438>
 8001864:	42028000 	.word	0x42028000
 8001868:	46020c00 	.word	0x46020c00
 800186c:	42020800 	.word	0x42020800
 8001870:	42020000 	.word	0x42020000
 8001874:	42020400 	.word	0x42020400
 8001878:	20000140 	.word	0x20000140
 800187c:	20000164 	.word	0x20000164
 8001880:	2000017c 	.word	0x2000017c
 8001884:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001888:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800188c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a56      	ldr	r2, [pc, #344]	@ (80019f0 <HAL_ADC_MspInit+0x444>)
 8001896:	4293      	cmp	r3, r2
 8001898:	f040 80a4 	bne.w	80019e4 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800189c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018a0:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80018a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80018b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 f951 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 80018d0:	f7ff fe4c 	bl	800156c <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 80018d4:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <HAL_ADC_MspInit+0x448>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018da:	4a46      	ldr	r2, [pc, #280]	@ (80019f4 <HAL_ADC_MspInit+0x448>)
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018e4:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_ADC_MspInit+0x448>)
 80018e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ea:	f003 0220 	and.w	r2, r3, #32
 80018ee:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018fc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001900:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001902:	4b3c      	ldr	r3, [pc, #240]	@ (80019f4 <HAL_ADC_MspInit+0x448>)
 8001904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001908:	4a3a      	ldr	r2, [pc, #232]	@ (80019f4 <HAL_ADC_MspInit+0x448>)
 800190a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <HAL_ADC_MspInit+0x448>)
 8001914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001918:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800191c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001920:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800192a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800192e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001930:	2303      	movs	r3, #3
 8001932:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001936:	2303      	movs	r3, #3
 8001938:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001942:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001946:	4619      	mov	r1, r3
 8001948:	482b      	ldr	r0, [pc, #172]	@ (80019f8 <HAL_ADC_MspInit+0x44c>)
 800194a:	f005 fc2d 	bl	80071a8 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001950:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <HAL_ADC_MspInit+0x454>)
 8001952:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001954:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001956:	2201      	movs	r2, #1
 8001958:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800195a:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001960:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001966:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800196c:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 800196e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001972:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001976:	2201      	movs	r2, #1
 8001978:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 800197c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001980:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001988:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 800198a:	2201      	movs	r2, #1
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800198e:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001990:	2201      	movs	r2, #1
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 8001996:	2200      	movs	r2, #0
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80019a6:	4815      	ldr	r0, [pc, #84]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 80019a8:	f003 fbc0 	bl	800512c <HAL_DMA_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 80019b2:	f7ff fddb 	bl	800156c <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80019b6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019ba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 80019c2:	671a      	str	r2, [r3, #112]	@ 0x70
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 80019c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019ca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80019d2:	2110      	movs	r1, #16
 80019d4:	4809      	ldr	r0, [pc, #36]	@ (80019fc <HAL_ADC_MspInit+0x450>)
 80019d6:	f003 ff49 	bl	800586c <HAL_DMA_ConfigChannelAttributes>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 80019e0:	f7ff fdc4 	bl	800156c <Error_Handler>
}
 80019e4:	bf00      	nop
 80019e6:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	46021000 	.word	0x46021000
 80019f4:	46020c00 	.word	0x46020c00
 80019f8:	42021800 	.word	0x42021800
 80019fc:	200001f4 	.word	0x200001f4
 8001a00:	40020150 	.word	0x40020150

08001a04 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <HAL_DMA2D_MspInit+0x3c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10e      	bne.n	8001a34 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_DMA2D_MspInit+0x40>)
 8001a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1c:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <HAL_DMA2D_MspInit+0x40>)
 8001a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <HAL_DMA2D_MspInit+0x40>)
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	4002b000 	.word	0x4002b000
 8001a44:	46020c00 	.word	0x46020c00

08001a48 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	@ 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2a      	ldr	r2, [pc, #168]	@ (8001b10 <HAL_XSPI_MspInit+0xc8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d14d      	bne.n	8001b06 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a70:	4a28      	ldr	r2, [pc, #160]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001a72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a8e:	4a21      	ldr	r2, [pc, #132]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a98:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aac:	4a19      	ldr	r2, [pc, #100]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <HAL_XSPI_MspInit+0xcc>)
 8001ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001ac4:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001ac8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <HAL_XSPI_MspInit+0xd0>)
 8001ae2:	f005 fb61 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001af6:	2308      	movs	r3, #8
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <HAL_XSPI_MspInit+0xd4>)
 8001b02:	f005 fb51 	bl	80071a8 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	@ 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	420d3400 	.word	0x420d3400
 8001b14:	46020c00 	.word	0x46020c00
 8001b18:	42021c00 	.word	0x42021c00
 8001b1c:	42022000 	.word	0x42022000

08001b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0c4      	sub	sp, #272	@ 0x110
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b2e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	22e0      	movs	r2, #224	@ 0xe0
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00f fc22 	bl	8011392 <memset>
  if(hi2c->Instance==I2C1)
 8001b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a63      	ldr	r2, [pc, #396]	@ (8001ce8 <HAL_I2C_MspInit+0x1c8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d14f      	bne.n	8001c00 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b60:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f008 fff8 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001b82:	f7ff fcf3 	bl	800156c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b86:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8c:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b96:	4b55      	ldr	r3, [pc, #340]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ba4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001ba8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4849      	ldr	r0, [pc, #292]	@ (8001cf0 <HAL_I2C_MspInit+0x1d0>)
 8001bcc:	f005 faec 	bl	80071a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd0:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bd6:	4a45      	ldr	r2, [pc, #276]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001bd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001be0:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001be6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bf8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bfc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bfe:	e06e      	b.n	8001cde <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001c00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a39      	ldr	r2, [pc, #228]	@ (8001cf4 <HAL_I2C_MspInit+0x1d4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d165      	bne.n	8001cde <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c12:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f008 ff9f 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001c34:	f7ff fc9a 	bl	800156c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c38:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	f003 0220 	and.w	r2, r3, #32
 8001c52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c64:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c66:	2303      	movs	r3, #3
 8001c68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6c:	2312      	movs	r3, #18
 8001c6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c84:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c88:	4619      	mov	r1, r3
 8001c8a:	481b      	ldr	r0, [pc, #108]	@ (8001cf8 <HAL_I2C_MspInit+0x1d8>)
 8001c8c:	f005 fa8c 	bl	80071a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c96:	4a15      	ldr	r2, [pc, #84]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_I2C_MspInit+0x1cc>)
 8001ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ca6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001caa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cbc:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2039      	movs	r0, #57	@ 0x39
 8001cc4:	f003 f956 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cc8:	2039      	movs	r0, #57	@ 0x39
 8001cca:	f003 f96d 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	203a      	movs	r0, #58	@ 0x3a
 8001cd4:	f003 f94e 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001cd8:	203a      	movs	r0, #58	@ 0x3a
 8001cda:	f003 f965 	bl	8004fa8 <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	46020c00 	.word	0x46020c00
 8001cf0:	42021800 	.word	0x42021800
 8001cf4:	40005800 	.word	0x40005800
 8001cf8:	42021400 	.word	0x42021400

08001cfc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0c6      	sub	sp, #280	@ 0x118
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	22e0      	movs	r2, #224	@ 0xe0
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00f fb34 	bl	8011392 <memset>
  if(hltdc->Instance==LTDC)
 8001d2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a92      	ldr	r2, [pc, #584]	@ (8001f80 <HAL_LTDC_MspInit+0x284>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	f040 811b 	bne.w	8001f74 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0302 	mov.w	r3, #2
 8001d46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001d50:	2303      	movs	r3, #3
 8001d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001d54:	2304      	movs	r3, #4
 8001d56:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001d58:	2332      	movs	r3, #50	@ 0x32
 8001d5a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001d64:	2308      	movs	r3, #8
 8001d66:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001d70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f008 fef6 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001d86:	f7ff fbf1 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d90:	4a7c      	ldr	r2, [pc, #496]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001d92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d96:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001da0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dae:	4a75      	ldr	r2, [pc, #468]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001db8:	4b72      	ldr	r3, [pc, #456]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dbe:	f003 0202 	and.w	r2, r3, #2
 8001dc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd6:	4b6b      	ldr	r3, [pc, #428]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ddc:	4a69      	ldr	r2, [pc, #420]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001dde:	f043 0310 	orr.w	r3, r3, #16
 8001de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001de6:	4b67      	ldr	r3, [pc, #412]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dec:	f003 0210 	and.w	r2, r3, #16
 8001df0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001df4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e02:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b5f      	ldr	r3, [pc, #380]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e14:	4b5b      	ldr	r3, [pc, #364]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e1a:	f003 0208 	and.w	r2, r3, #8
 8001e1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e30:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b54      	ldr	r3, [pc, #336]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e38:	4a52      	ldr	r2, [pc, #328]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e42:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <HAL_LTDC_MspInit+0x288>)
 8001e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e48:	f003 0204 	and.w	r2, r3, #4
 8001e4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e5e:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e60:	2304      	movs	r3, #4
 8001e62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e82:	4619      	mov	r1, r3
 8001e84:	4840      	ldr	r0, [pc, #256]	@ (8001f88 <HAL_LTDC_MspInit+0x28c>)
 8001e86:	f005 f98f 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e8a:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8001e8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eaa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4836      	ldr	r0, [pc, #216]	@ (8001f8c <HAL_LTDC_MspInit+0x290>)
 8001eb2:	f005 f979 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eb6:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8001eba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001eda:	4619      	mov	r1, r3
 8001edc:	482c      	ldr	r0, [pc, #176]	@ (8001f90 <HAL_LTDC_MspInit+0x294>)
 8001ede:	f005 f963 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee2:	23c0      	movs	r3, #192	@ 0xc0
 8001ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001efa:	2307      	movs	r3, #7
 8001efc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f04:	4619      	mov	r1, r3
 8001f06:	4823      	ldr	r0, [pc, #140]	@ (8001f94 <HAL_LTDC_MspInit+0x298>)
 8001f08:	f005 f94e 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001f26:	2308      	movs	r3, #8
 8001f28:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f30:	4619      	mov	r1, r3
 8001f32:	4818      	ldr	r0, [pc, #96]	@ (8001f94 <HAL_LTDC_MspInit+0x298>)
 8001f34:	f005 f938 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001f52:	2307      	movs	r3, #7
 8001f54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480a      	ldr	r0, [pc, #40]	@ (8001f88 <HAL_LTDC_MspInit+0x28c>)
 8001f60:	f005 f922 	bl	80071a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2087      	movs	r0, #135	@ 0x87
 8001f6a:	f003 f803 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f6e:	2087      	movs	r0, #135	@ 0x87
 8001f70:	f003 f81a 	bl	8004fa8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f74:	bf00      	nop
 8001f76:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40016800 	.word	0x40016800
 8001f84:	46020c00 	.word	0x46020c00
 8001f88:	42020400 	.word	0x42020400
 8001f8c:	42021000 	.word	0x42021000
 8001f90:	42020c00 	.word	0x42020c00
 8001f94:	42020800 	.word	0x42020800

08001f98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	22e0      	movs	r2, #224	@ 0xe0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00f f9f2 	bl	8011392 <memset>
  if(hrtc->Instance==RTC)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_RTC_MspInit+0x90>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d132      	bne.n	800201e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fb8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f008 fdcb 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001fdc:	f7ff fac6 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8001fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8001fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8001ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8002002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8002010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002014:	4a05      	ldr	r2, [pc, #20]	@ (800202c <HAL_RTC_MspInit+0x94>)
 8002016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800201a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800201e:	bf00      	nop
 8002020:	37f0      	adds	r7, #240	@ 0xf0
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	46007800 	.word	0x46007800
 800202c:	46020c00 	.word	0x46020c00

08002030 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0b      	ldr	r2, [pc, #44]	@ (800206c <HAL_TIM_PWM_MspInit+0x3c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_TIM_PWM_MspInit+0x40>)
 8002044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <HAL_TIM_PWM_MspInit+0x40>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_TIM_PWM_MspInit+0x40>)
 8002054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40000400 	.word	0x40000400
 8002070:	46020c00 	.word	0x46020c00

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d11e      	bne.n	80020d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209c:	4a10      	ldr	r2, [pc, #64]	@ (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a6:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80020b4:	2340      	movs	r3, #64	@ 0x40
 80020b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4619      	mov	r1, r3
 80020ce:	4805      	ldr	r0, [pc, #20]	@ (80020e4 <HAL_TIM_MspPostInit+0x70>)
 80020d0:	f005 f86a 	bl	80071a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40000400 	.word	0x40000400
 80020e0:	46020c00 	.word	0x46020c00
 80020e4:	42021000 	.word	0x42021000

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0c2      	sub	sp, #264	@ 0x108
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	22e0      	movs	r2, #224	@ 0xe0
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f00f f93e 	bl	8011392 <memset>
  if(huart->Instance==USART1)
 8002116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800211a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2f      	ldr	r2, [pc, #188]	@ (80021e0 <HAL_UART_MspInit+0xf8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d155      	bne.n	80021d4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002128:	f04f 0201 	mov.w	r2, #1
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002134:	2300      	movs	r3, #0
 8002136:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4618      	mov	r0, r3
 800213e:	f008 fd15 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002148:	f7ff fa10 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <HAL_UART_MspInit+0xfc>)
 800214e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002152:	4a24      	ldr	r2, [pc, #144]	@ (80021e4 <HAL_UART_MspInit+0xfc>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002158:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800215c:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <HAL_UART_MspInit+0xfc>)
 800215e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_UART_MspInit+0xfc>)
 800216c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002170:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_UART_MspInit+0xfc>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800217a:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_UART_MspInit+0xfc>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002180:	f003 0201 	and.w	r2, r3, #1
 8002184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002188:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002192:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002196:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002198:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800219c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b2:	2307      	movs	r3, #7
 80021b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021bc:	4619      	mov	r1, r3
 80021be:	480a      	ldr	r0, [pc, #40]	@ (80021e8 <HAL_UART_MspInit+0x100>)
 80021c0:	f004 fff2 	bl	80071a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	203d      	movs	r0, #61	@ 0x3d
 80021ca:	f002 fed3 	bl	8004f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ce:	203d      	movs	r0, #61	@ 0x3d
 80021d0:	f002 feea 	bl	8004fa8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80021d4:	bf00      	nop
 80021d6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40013800 	.word	0x40013800
 80021e4:	46020c00 	.word	0x46020c00
 80021e8:	42020000 	.word	0x42020000

080021ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0be      	sub	sp, #248	@ 0xf8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f4:	f107 0318 	add.w	r3, r7, #24
 80021f8:	22e0      	movs	r2, #224	@ 0xe0
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f00f f8c8 	bl	8011392 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a3a      	ldr	r2, [pc, #232]	@ (80022f0 <HAL_PCD_MspInit+0x104>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d16d      	bne.n	80022e8 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 800220e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002212:	4a38      	ldr	r2, [pc, #224]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800221c:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 800221e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0308 	mov.w	r3, #8
 8002232:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002236:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800223a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	4618      	mov	r0, r3
 8002244:	f008 fc92 	bl	800ab6c <HAL_RCCEx_PeriphCLKConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800224e:	f7ff f98d 	bl	800156c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002252:	200c      	movs	r0, #12
 8002254:	f000 fbce 	bl	80029f4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002258:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 800225a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800225e:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002268:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 800226a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002276:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 8002278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800227c:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 800227e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002282:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800228c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11b      	bne.n	80022da <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 80022a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a8:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 80022b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80022c0:	f007 f95a 	bl	8009578 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80022c4:	f007 f988 	bl	80095d8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <HAL_PCD_MspInit+0x108>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022d8:	e003      	b.n	80022e2 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80022da:	f007 f94d 	bl	8009578 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80022de:	f007 f97b 	bl	80095d8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 fb72 	bl	80029cc <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80022e8:	bf00      	nop
 80022ea:	37f8      	adds	r7, #248	@ 0xf8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	42040000 	.word	0x42040000
 80022f4:	46020c00 	.word	0x46020c00

080022f8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0a4      	sub	sp, #144	@ 0x90
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4aae      	ldr	r2, [pc, #696]	@ (80025c0 <HAL_SAI_MspInit+0x2c8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 8085 	bne.w	8002416 <HAL_SAI_MspInit+0x11e>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800230c:	4bad      	ldr	r3, [pc, #692]	@ (80025c4 <HAL_SAI_MspInit+0x2cc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10e      	bne.n	8002332 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002314:	4bac      	ldr	r3, [pc, #688]	@ (80025c8 <HAL_SAI_MspInit+0x2d0>)
 8002316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800231a:	4aab      	ldr	r2, [pc, #684]	@ (80025c8 <HAL_SAI_MspInit+0x2d0>)
 800231c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002320:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002324:	4ba8      	ldr	r3, [pc, #672]	@ (80025c8 <HAL_SAI_MspInit+0x2d0>)
 8002326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800232a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002332:	4ba4      	ldr	r3, [pc, #656]	@ (80025c4 <HAL_SAI_MspInit+0x2cc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4aa2      	ldr	r2, [pc, #648]	@ (80025c4 <HAL_SAI_MspInit+0x2cc>)
 800233a:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800233c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002340:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002354:	230d      	movs	r3, #13
 8002356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800235e:	4619      	mov	r1, r3
 8002360:	489a      	ldr	r0, [pc, #616]	@ (80025cc <HAL_SAI_MspInit+0x2d4>)
 8002362:	f004 ff21 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800237e:	230d      	movs	r3, #13
 8002380:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002384:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002388:	4619      	mov	r1, r3
 800238a:	4891      	ldr	r0, [pc, #580]	@ (80025d0 <HAL_SAI_MspInit+0x2d8>)
 800238c:	f004 ff0c 	bl	80071a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002390:	4b90      	ldr	r3, [pc, #576]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 8002392:	4a91      	ldr	r2, [pc, #580]	@ (80025d8 <HAL_SAI_MspInit+0x2e0>)
 8002394:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002396:	4b8f      	ldr	r3, [pc, #572]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 8002398:	2226      	movs	r2, #38	@ 0x26
 800239a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800239c:	4b8d      	ldr	r3, [pc, #564]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a2:	4b8c      	ldr	r3, [pc, #560]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023a8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 80023aa:	4b8a      	ldr	r3, [pc, #552]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023ac:	2208      	movs	r2, #8
 80023ae:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 80023b0:	4b88      	ldr	r3, [pc, #544]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80023b6:	4b87      	ldr	r3, [pc, #540]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023b8:	2202      	movs	r2, #2
 80023ba:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80023bc:	4b85      	ldr	r3, [pc, #532]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80023c2:	4b84      	ldr	r3, [pc, #528]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 80023c8:	4b82      	ldr	r3, [pc, #520]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 80023ce:	4b81      	ldr	r3, [pc, #516]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80023d4:	4b7f      	ldr	r3, [pc, #508]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80023da:	4b7e      	ldr	r3, [pc, #504]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 80023e0:	4b7c      	ldr	r3, [pc, #496]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80023e6:	487b      	ldr	r0, [pc, #492]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023e8:	f002 fea0 	bl	800512c <HAL_DMA_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_SAI_MspInit+0xfe>
    {
      Error_Handler();
 80023f2:	f7ff f8bb 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a76      	ldr	r2, [pc, #472]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 80023fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80023fe:	4a75      	ldr	r2, [pc, #468]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002404:	2110      	movs	r1, #16
 8002406:	4873      	ldr	r0, [pc, #460]	@ (80025d4 <HAL_SAI_MspInit+0x2dc>)
 8002408:	f003 fa30 	bl	800586c <HAL_DMA_ConfigChannelAttributes>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_SAI_MspInit+0x11e>
    {
      Error_Handler();
 8002412:	f7ff f8ab 	bl	800156c <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a70      	ldr	r2, [pc, #448]	@ (80025dc <HAL_SAI_MspInit+0x2e4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	f040 80ca 	bne.w	80025b6 <HAL_SAI_MspInit+0x2be>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002422:	4b68      	ldr	r3, [pc, #416]	@ (80025c4 <HAL_SAI_MspInit+0x2cc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <HAL_SAI_MspInit+0x150>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800242a:	4b67      	ldr	r3, [pc, #412]	@ (80025c8 <HAL_SAI_MspInit+0x2d0>)
 800242c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002430:	4a65      	ldr	r2, [pc, #404]	@ (80025c8 <HAL_SAI_MspInit+0x2d0>)
 8002432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002436:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800243a:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <HAL_SAI_MspInit+0x2d0>)
 800243c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <HAL_SAI_MspInit+0x2cc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a5d      	ldr	r2, [pc, #372]	@ (80025c4 <HAL_SAI_MspInit+0x2cc>)
 8002450:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002456:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800246a:	230d      	movs	r3, #13
 800246c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002474:	4619      	mov	r1, r3
 8002476:	485a      	ldr	r0, [pc, #360]	@ (80025e0 <HAL_SAI_MspInit+0x2e8>)
 8002478:	f004 fe96 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800247c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002480:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002494:	230d      	movs	r3, #13
 8002496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800249e:	4619      	mov	r1, r3
 80024a0:	4850      	ldr	r0, [pc, #320]	@ (80025e4 <HAL_SAI_MspInit+0x2ec>)
 80024a2:	f004 fe81 	bl	80071a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80024be:	230d      	movs	r3, #13
 80024c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80024c8:	4619      	mov	r1, r3
 80024ca:	4846      	ldr	r0, [pc, #280]	@ (80025e4 <HAL_SAI_MspInit+0x2ec>)
 80024cc:	f004 fe6c 	bl	80071a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80024d0:	2321      	movs	r3, #33	@ 0x21
 80024d2:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80024d4:	2327      	movs	r3, #39	@ 0x27
 80024d6:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80024e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80024ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002500:	2300      	movs	r3, #0
 8002502:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002504:	2300      	movs	r3, #0
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002508:	2300      	movs	r3, #0
 800250a:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4933      	ldr	r1, [pc, #204]	@ (80025e8 <HAL_SAI_MspInit+0x2f0>)
 800251a:	4618      	mov	r0, r3
 800251c:	f003 ff58 	bl	80063d0 <HAL_DMAEx_List_BuildNode>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_SAI_MspInit+0x232>
    {
      Error_Handler();
 8002526:	f7ff f821 	bl	800156c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800252a:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_SAI_MspInit+0x2f0>)
 800252c:	2100      	movs	r1, #0
 800252e:	482f      	ldr	r0, [pc, #188]	@ (80025ec <HAL_SAI_MspInit+0x2f4>)
 8002530:	f003 ff7a 	bl	8006428 <HAL_DMAEx_List_InsertNode>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_SAI_MspInit+0x246>
    {
      Error_Handler();
 800253a:	f7ff f817 	bl	800156c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800253e:	482b      	ldr	r0, [pc, #172]	@ (80025ec <HAL_SAI_MspInit+0x2f4>)
 8002540:	f004 f83b 	bl	80065ba <HAL_DMAEx_List_SetCircularMode>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_SAI_MspInit+0x256>
    {
      Error_Handler();
 800254a:	f7ff f80f 	bl	800156c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800254e:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 8002550:	4a28      	ldr	r2, [pc, #160]	@ (80025f4 <HAL_SAI_MspInit+0x2fc>)
 8002552:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002554:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 8002556:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800255a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 800255e:	2200      	movs	r2, #0
 8002560:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002562:	4b23      	ldr	r3, [pc, #140]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 8002570:	2281      	movs	r2, #129	@ 0x81
 8002572:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002574:	481e      	ldr	r0, [pc, #120]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 8002576:	f003 fd6b 	bl	8006050 <HAL_DMAEx_List_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_SAI_MspInit+0x28c>
    {
      Error_Handler();
 8002580:	f7fe fff4 	bl	800156c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002584:	4919      	ldr	r1, [pc, #100]	@ (80025ec <HAL_SAI_MspInit+0x2f4>)
 8002586:	481a      	ldr	r0, [pc, #104]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 8002588:	f004 f878 	bl	800667c <HAL_DMAEx_List_LinkQ>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_SAI_MspInit+0x29e>
    {
      Error_Handler();
 8002592:	f7fe ffeb 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 800259a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800259e:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80025a4:	2110      	movs	r1, #16
 80025a6:	4812      	ldr	r0, [pc, #72]	@ (80025f0 <HAL_SAI_MspInit+0x2f8>)
 80025a8:	f003 f960 	bl	800586c <HAL_DMA_ConfigChannelAttributes>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_SAI_MspInit+0x2be>
    {
      Error_Handler();
 80025b2:	f7fe ffdb 	bl	800156c <Error_Handler>
    }

    }
}
 80025b6:	bf00      	nop
 80025b8:	3790      	adds	r7, #144	@ 0x90
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40015804 	.word	0x40015804
 80025c4:	20000d7c 	.word	0x20000d7c
 80025c8:	46020c00 	.word	0x46020c00
 80025cc:	42020400 	.word	0x42020400
 80025d0:	42021800 	.word	0x42021800
 80025d4:	200005e4 	.word	0x200005e4
 80025d8:	400201d0 	.word	0x400201d0
 80025dc:	40015824 	.word	0x40015824
 80025e0:	42020000 	.word	0x42020000
 80025e4:	42020800 	.word	0x42020800
 80025e8:	2000065c 	.word	0x2000065c
 80025ec:	20000680 	.word	0x20000680
 80025f0:	20000698 	.word	0x20000698
 80025f4:	400200d0 	.word	0x400200d0

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <NMI_Handler+0x4>

08002600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <HardFault_Handler+0x4>

08002608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <MemManage_Handler+0x4>

08002610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <UsageFault_Handler+0x4>

08002620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264e:	f000 f979 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}

08002656 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800265a:	2002      	movs	r0, #2
 800265c:	f004 ff94 	bl	8007588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002668:	2010      	movs	r0, #16
 800266a:	f004 ff8d 	bl	8007588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}

08002672 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002676:	2020      	movs	r0, #32
 8002678:	f004 ff86 	bl	8007588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}

08002680 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002686:	f002 ff82 	bl	800558e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000017c 	.word	0x2000017c

08002694 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <GPDMA1_Channel1_IRQHandler+0x10>)
 800269a:	f002 ff78 	bl	800558e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000698 	.word	0x20000698

080026a8 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <GPDMA1_Channel2_IRQHandler+0x10>)
 80026ae:	f002 ff6e 	bl	800558e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200001f4 	.word	0x200001f4

080026bc <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <GPDMA1_Channel3_IRQHandler+0x10>)
 80026c2:	f002 ff64 	bl	800558e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200005e4 	.word	0x200005e4

080026d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <ADC1_2_IRQHandler+0x10>)
 80026d6:	f001 f925 	bl	8003924 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000028 	.word	0x20000028

080026e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80026e8:	4802      	ldr	r0, [pc, #8]	@ (80026f4 <I2C2_EV_IRQHandler+0x10>)
 80026ea:	f005 f919 	bl	8007920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000388 	.word	0x20000388

080026f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80026fc:	4802      	ldr	r0, [pc, #8]	@ (8002708 <I2C2_ER_IRQHandler+0x10>)
 80026fe:	f005 f929 	bl	8007954 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000388 	.word	0x20000388

0800270c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002710:	4802      	ldr	r0, [pc, #8]	@ (800271c <USART1_IRQHandler+0x10>)
 8002712:	f00d f985 	bl	800fa20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000075c 	.word	0x2000075c

08002720 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002724:	4802      	ldr	r0, [pc, #8]	@ (8002730 <LTDC_IRQHandler+0x10>)
 8002726:	f006 fa97 	bl	8008c58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200003dc 	.word	0x200003dc

08002734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <SystemInit+0x68>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	4a17      	ldr	r2, [pc, #92]	@ (800279c <SystemInit+0x68>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <SystemInit+0x6c>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <SystemInit+0x6c>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <SystemInit+0x6c>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <SystemInit+0x6c>)
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <SystemInit+0x6c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <SystemInit+0x6c>)
 8002766:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800276a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800276e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <SystemInit+0x6c>)
 8002772:	2200      	movs	r2, #0
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <SystemInit+0x6c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <SystemInit+0x6c>)
 800277c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002780:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <SystemInit+0x6c>)
 8002784:	2200      	movs	r2, #0
 8002786:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <SystemInit+0x68>)
 800278a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800278e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	46020c00 	.word	0x46020c00

080027a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027dc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027a8:	f7ff ffc4 	bl	8002734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027ae:	e003      	b.n	80027b8 <LoopCopyDataInit>

080027b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027b6:	3104      	adds	r1, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027b8:	480a      	ldr	r0, [pc, #40]	@ (80027e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027c0:	d3f6      	bcc.n	80027b0 <CopyDataInit>
	ldr	r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80027c4:	e002      	b.n	80027cc <LoopFillZerobss>

080027c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027c8:	f842 3b04 	str.w	r3, [r2], #4

080027cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <LoopForever+0x16>)
	cmp	r2, r3
 80027ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027d0:	d3f9      	bcc.n	80027c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d2:	f00e fde7 	bl	80113a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027d6:	f7fd fef9 	bl	80005cc <main>

080027da <LoopForever>:

LoopForever:
    b LoopForever
 80027da:	e7fe      	b.n	80027da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80027dc:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80027e0:	08011514 	.word	0x08011514
	ldr	r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027e8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80027ec:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80027f0:	20000d84 	.word	0x20000d84

080027f4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC4_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_Init+0x50>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_Init+0x50>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f002 fba8 	bl	8004f5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800280e:	f007 ffcf 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_Init+0x54>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <HAL_Init+0x58>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <HAL_Init+0x5c>)
 8002826:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002828:	2004      	movs	r0, #4
 800282a:	f002 fbed 	bl	8005008 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282e:	200f      	movs	r0, #15
 8002830:	f000 f812 	bl	8002858 <HAL_InitTick>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e002      	b.n	8002844 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800283e:	f7fe fe9b 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40022000 	.word	0x40022000
 800284c:	46020c00 	.word	0x46020c00
 8002850:	08011404 	.word	0x08011404
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002864:	4b33      	ldr	r3, [pc, #204]	@ (8002934 <HAL_InitTick+0xdc>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e05c      	b.n	800292a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002870:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <HAL_InitTick+0xe0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b04      	cmp	r3, #4
 800287a:	d10c      	bne.n	8002896 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800287c:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <HAL_InitTick+0xe4>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b2c      	ldr	r3, [pc, #176]	@ (8002934 <HAL_InitTick+0xdc>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e037      	b.n	8002906 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002896:	f002 fc0f 	bl	80050b8 <HAL_SYSTICK_GetCLKSourceConfig>
 800289a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d023      	beq.n	80028ea <HAL_InitTick+0x92>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d82d      	bhi.n	8002904 <HAL_InitTick+0xac>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_InitTick+0x5e>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d00d      	beq.n	80028d0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80028b4:	e026      	b.n	8002904 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80028b6:	4b21      	ldr	r3, [pc, #132]	@ (800293c <HAL_InitTick+0xe4>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <HAL_InitTick+0xdc>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80028c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	60fb      	str	r3, [r7, #12]
        break;
 80028ce:	e01a      	b.n	8002906 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <HAL_InitTick+0xdc>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028da:	fbb3 f3f2 	udiv	r3, r3, r2
 80028de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
        break;
 80028e8:	e00d      	b.n	8002906 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028ea:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <HAL_InitTick+0xdc>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	60fb      	str	r3, [r7, #12]
        break;
 8002902:	e000      	b.n	8002906 <HAL_InitTick+0xae>
        break;
 8002904:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f002 fb5c 	bl	8004fc4 <HAL_SYSTICK_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e009      	b.n	800292a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002916:	2200      	movs	r2, #0
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	f04f 30ff 	mov.w	r0, #4294967295
 800291e:	f002 fb29 	bl	8004f74 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002922:	4a07      	ldr	r2, [pc, #28]	@ (8002940 <HAL_InitTick+0xe8>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000008 	.word	0x20000008
 8002938:	e000e010 	.word	0xe000e010
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	@ (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000008 	.word	0x20000008
 8002968:	20000d80 	.word	0x20000d80

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000d80 	.word	0x20000d80

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000008 	.word	0x20000008

080029cc <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	f023 0201 	bic.w	r2, r3, #1
 80029dc:	4904      	ldr	r1, [pc, #16]	@ (80029f0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	46000400 	.word	0x46000400

080029f4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80029fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a00:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002a04:	4904      	ldr	r1, [pc, #16]	@ (8002a18 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	46000400 	.word	0x46000400

08002a1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac0 <LL_ADC_SetResolution+0x3c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d104      	bne.n	8002aa4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f023 020c 	bic.w	r2, r3, #12
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	46021000 	.word	0x46021000

08002ac4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3360      	adds	r3, #96	@ 0x60
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	431a      	orrs	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3360      	adds	r3, #96	@ 0x60
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3360      	adds	r3, #96	@ 0x60
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3360      	adds	r3, #96	@ 0x60
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3360      	adds	r3, #96	@ 0x60
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002be6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	2a00      	cmp	r2, #0
 8002bfe:	d002      	beq.n	8002c06 <LL_ADC_SetGainCompensation+0x32>
 8002c00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c04:	e000      	b.n	8002c08 <LL_ADC_SetGainCompensation+0x34>
 8002c06:	2200      	movs	r2, #0
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2107      	movs	r1, #7
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	@ 0x24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d020      	beq.n	8002cd6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3330      	adds	r3, #48	@ 0x30
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	4413      	add	r3, r2
 8002ca6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	211f      	movs	r1, #31
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 011f 	and.w	r1, r3, #31
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002cd4:	e02b      	b.n	8002d2e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	210f      	movs	r1, #15
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	401a      	ands	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	e010      	b.n	8002d20 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	613b      	str	r3, [r7, #16]
  return result;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	f001 011f 	and.w	r1, r1, #31
 8002d26:	408b      	lsls	r3, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	@ 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	46021000 	.word	0x46021000

08002d40 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	e015      	b.n	8002d90 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	60fb      	str	r3, [r7, #12]
  return result;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e003      	b.n	8002d86 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b08b      	sub	sp, #44	@ 0x2c
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d042      	beq.n	8002eb2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <LL_ADC_SetChannelSamplingTime+0x28>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 021f 	and.w	r2, r3, #31
 8002e3e:	e011      	b.n	8002e64 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  return result;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e003      	b.n	8002e62 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	0e5b      	lsrs	r3, r3, #25
 8002e68:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3314      	adds	r3, #20
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	0e5b      	lsrs	r3, r3, #25
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	4413      	add	r3, r2
 8002e90:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2107      	movs	r1, #7
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002eb0:	e00e      	b.n	8002ed0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0219      	lsls	r1, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	615a      	str	r2, [r3, #20]
}
 8002ed0:	bf00      	nop
 8002ed2:	372c      	adds	r7, #44	@ 0x2c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	46021000 	.word	0x46021000

08002ee0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0318 	and.w	r3, r3, #24
 8002f02:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f04:	40d9      	lsrs	r1, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	400b      	ands	r3, r1
 8002f0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	000fffff 	.word	0x000fffff

08002f28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 031f 	and.w	r3, r3, #31
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fe8:	d101      	bne.n	8002fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800300c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <LL_ADC_IsEnabled+0x18>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <LL_ADC_IsEnabled+0x1a>
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800305a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d101      	bne.n	800308a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d101      	bne.n	80030b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b08b      	sub	sp, #44	@ 0x2c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e2ce      	b.n	800367e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a95      	ldr	r2, [pc, #596]	@ (8003344 <HAL_ADC_Init+0x284>)
 80030ee:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fe fa57 	bl	80015ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff37 	bl	8002f84 <LL_ADC_IsDeepPowerDownEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff1d 	bl	8002f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff52 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ff36 	bl	8002fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003140:	4b81      	ldr	r3, [pc, #516]	@ (8003348 <HAL_ADC_Init+0x288>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	4a81      	ldr	r2, [pc, #516]	@ (800334c <HAL_ADC_Init+0x28c>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003154:	e002      	b.n	800315c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b01      	subs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff34 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10e      	bne.n	8003190 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff6c 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 800319a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 825f 	bne.w	8003668 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 825b 	bne.w	8003668 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff2c 	bl	8003024 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d14f      	bne.n	8003272 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003344 <HAL_ADC_Init+0x284>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d037      	beq.n	800324c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003350 <HAL_ADC_Init+0x290>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_ADC_Init+0x130>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003354 <HAL_ADC_Init+0x294>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d10e      	bne.n	800320e <HAL_ADC_Init+0x14e>
 80031f0:	4857      	ldr	r0, [pc, #348]	@ (8003350 <HAL_ADC_Init+0x290>)
 80031f2:	f7ff ff17 	bl	8003024 <LL_ADC_IsEnabled>
 80031f6:	4604      	mov	r4, r0
 80031f8:	4856      	ldr	r0, [pc, #344]	@ (8003354 <HAL_ADC_Init+0x294>)
 80031fa:	f7ff ff13 	bl	8003024 <LL_ADC_IsEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	4323      	orrs	r3, r4
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	e008      	b.n	8003220 <HAL_ADC_Init+0x160>
 800320e:	484d      	ldr	r0, [pc, #308]	@ (8003344 <HAL_ADC_Init+0x284>)
 8003210:	f7ff ff08 	bl	8003024 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d026      	beq.n	8003272 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a49      	ldr	r2, [pc, #292]	@ (8003350 <HAL_ADC_Init+0x290>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_ADC_Init+0x178>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a48      	ldr	r2, [pc, #288]	@ (8003354 <HAL_ADC_Init+0x294>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADC_Init+0x17c>
 8003238:	4a47      	ldr	r2, [pc, #284]	@ (8003358 <HAL_ADC_Init+0x298>)
 800323a:	e000      	b.n	800323e <HAL_ADC_Init+0x17e>
 800323c:	4a47      	ldr	r2, [pc, #284]	@ (800335c <HAL_ADC_Init+0x29c>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff fbe9 	bl	8002a1c <LL_ADC_SetCommonClock>
 800324a:	e012      	b.n	8003272 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f7ff fc14 	bl	8002a84 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800325c:	4b3f      	ldr	r3, [pc, #252]	@ (800335c <HAL_ADC_Init+0x29c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800326c:	493b      	ldr	r1, [pc, #236]	@ (800335c <HAL_ADC_Init+0x29c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a33      	ldr	r2, [pc, #204]	@ (8003344 <HAL_ADC_Init+0x284>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d010      	beq.n	800329e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003282:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003288:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800328e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003296:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003298:	4313      	orrs	r3, r2
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	e035      	b.n	800330a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7f1b      	ldrb	r3, [r3, #28]
 80032a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032aa:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ac:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d002      	beq.n	80032bc <HAL_ADC_Init+0x1fc>
 80032b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032ba:	e000      	b.n	80032be <HAL_ADC_Init+0x1fe>
 80032bc:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032be:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80032c4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da04      	bge.n	80032d8 <HAL_ADC_Init+0x218>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032d6:	e001      	b.n	80032dc <HAL_ADC_Init+0x21c>
 80032d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80032dc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	491b      	ldr	r1, [pc, #108]	@ (8003350 <HAL_ADC_Init+0x290>)
 80032e4:	428b      	cmp	r3, r1
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_Init+0x232>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4919      	ldr	r1, [pc, #100]	@ (8003354 <HAL_ADC_Init+0x294>)
 80032ee:	428b      	cmp	r3, r1
 80032f0:	d103      	bne.n	80032fa <HAL_ADC_Init+0x23a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f8:	e003      	b.n	8003302 <HAL_ADC_Init+0x242>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003300:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003302:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	4313      	orrs	r3, r2
 8003308:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d131      	bne.n	8003378 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0a      	ldr	r2, [pc, #40]	@ (8003344 <HAL_ADC_Init+0x284>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	3b01      	subs	r3, #1
 8003324:	045b      	lsls	r3, r3, #17
 8003326:	6a3a      	ldr	r2, [r7, #32]
 8003328:	4313      	orrs	r3, r2
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	e024      	b.n	8003378 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	e01a      	b.n	8003378 <HAL_ADC_Init+0x2b8>
 8003342:	bf00      	nop
 8003344:	46021000 	.word	0x46021000
 8003348:	20000000 	.word	0x20000000
 800334c:	053e2d63 	.word	0x053e2d63
 8003350:	42028000 	.word	0x42028000
 8003354:	42028100 	.word	0x42028100
 8003358:	42028300 	.word	0x42028300
 800335c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a75      	ldr	r2, [pc, #468]	@ (8003554 <HAL_ADC_Init+0x494>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d018      	beq.n	80033b4 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003396:	4313      	orrs	r3, r2
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	4313      	orrs	r3, r2
 800339c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003558 <HAL_ADC_Init+0x498>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	430b      	orrs	r3, r1
 80033b0:	60d3      	str	r3, [r2, #12]
 80033b2:	e031      	b.n	8003418 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	4313      	orrs	r3, r2
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b61      	ldr	r3, [pc, #388]	@ (800355c <HAL_ADC_Init+0x49c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	6a39      	ldr	r1, [r7, #32]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4d      	ldr	r2, [pc, #308]	@ (8003554 <HAL_ADC_Init+0x494>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f000 80a4 	beq.w	800356c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fe22 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 800342e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fe2f 	bl	8003098 <LL_ADC_INJ_IsConversionOngoing>
 800343a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d166      	bne.n	8003510 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d163      	bne.n	8003510 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7f1b      	ldrb	r3, [r3, #28]
 800344c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4943      	ldr	r1, [pc, #268]	@ (8003560 <HAL_ADC_Init+0x4a0>)
 8003454:	428b      	cmp	r3, r1
 8003456:	d004      	beq.n	8003462 <HAL_ADC_Init+0x3a2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4941      	ldr	r1, [pc, #260]	@ (8003564 <HAL_ADC_Init+0x4a4>)
 800345e:	428b      	cmp	r3, r1
 8003460:	d102      	bne.n	8003468 <HAL_ADC_Init+0x3a8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	e002      	b.n	800346e <HAL_ADC_Init+0x3ae>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800346e:	4313      	orrs	r3, r2
 8003470:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800347c:	f023 0303 	bic.w	r3, r3, #3
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	6a39      	ldr	r1, [r7, #32]
 8003486:	430b      	orrs	r3, r1
 8003488:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4619      	mov	r1, r3
 800349c:	4610      	mov	r0, r2
 800349e:	f7ff fb99 	bl	8002bd4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d11e      	bne.n	80034ea <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_ADC_Init+0x4a8>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034c0:	0411      	lsls	r1, r2, #16
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034d8:	0892      	lsrs	r2, r2, #2
 80034da:	430a      	orrs	r2, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	e007      	b.n	80034fa <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10c      	bne.n	8003532 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f023 010f 	bic.w	r1, r3, #15
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	1e5a      	subs	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003530:	e007      	b.n	8003542 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 020f 	bic.w	r2, r2, #15
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003552:	e092      	b.n	800367a <HAL_ADC_Init+0x5ba>
 8003554:	46021000 	.word	0x46021000
 8003558:	fff0c013 	.word	0xfff0c013
 800355c:	ffde800d 	.word	0xffde800d
 8003560:	42028000 	.word	0x42028000
 8003564:	42028100 	.word	0x42028100
 8003568:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003572:	2b01      	cmp	r3, #1
 8003574:	d111      	bne.n	800359a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800357e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003584:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800358a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	4313      	orrs	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	4b39      	ldr	r3, [pc, #228]	@ (8003688 <HAL_ADC_Init+0x5c8>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b6:	461a      	mov	r2, r3
 80035b8:	2100      	movs	r1, #0
 80035ba:	f7ff fb2e 	bl	8002c1a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	461a      	mov	r2, r3
 80035c8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80035cc:	f7ff fb25 	bl	8002c1a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f062 020f 	orn	r2, r2, #15
 80035e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e8:	e018      	b.n	800361c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035f2:	d113      	bne.n	800361c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	f003 031c 	and.w	r3, r3, #28
 8003606:	f06f 020f 	mvn.w	r2, #15
 800360a:	fa02 f103 	lsl.w	r1, r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b1a      	ldr	r3, [pc, #104]	@ (800368c <HAL_ADC_Init+0x5cc>)
 8003624:	4013      	ands	r3, r2
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	429a      	cmp	r2, r3
 800362a:	d10b      	bne.n	8003644 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003642:	e01a      	b.n	800367a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003648:	f023 0312 	bic.w	r3, r3, #18
 800364c:	f043 0210 	orr.w	r2, r3, #16
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003666:	e008      	b.n	800367a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366c:	f043 0210 	orr.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800367a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800367e:	4618      	mov	r0, r3
 8003680:	372c      	adds	r7, #44	@ 0x2c
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	bf00      	nop
 8003688:	f7fffc02 	.word	0xf7fffc02
 800368c:	833ffff3 	.word	0x833ffff3

08003690 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b0a2      	sub	sp, #136	@ 0x88
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a98      	ldr	r2, [pc, #608]	@ (8003904 <HAL_ADC_Start_DMA+0x274>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_Start_DMA+0x20>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a97      	ldr	r2, [pc, #604]	@ (8003908 <HAL_ADC_Start_DMA+0x278>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_Start_DMA+0x24>
 80036b0:	4b96      	ldr	r3, [pc, #600]	@ (800390c <HAL_ADC_Start_DMA+0x27c>)
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_Start_DMA+0x26>
 80036b4:	4b96      	ldr	r3, [pc, #600]	@ (8003910 <HAL_ADC_Start_DMA+0x280>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fc36 	bl	8002f28 <LL_ADC_GetMultimode>
 80036bc:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fcd5 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8111 	bne.w	80038f2 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_ADC_Start_DMA+0x4e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e10e      	b.n	80038fc <HAL_ADC_Start_DMA+0x26c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d003      	beq.n	80036fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	f040 80f4 	bne.w	80038e2 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f001 fa2c 	bl	8004b58 <ADC_Enable>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003706:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 80e4 	bne.w	80038d8 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003714:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7a      	ldr	r2, [pc, #488]	@ (8003914 <HAL_ADC_Start_DMA+0x284>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d026      	beq.n	800377c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a75      	ldr	r2, [pc, #468]	@ (8003908 <HAL_ADC_Start_DMA+0x278>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d002      	beq.n	800373e <HAL_ADC_Start_DMA+0xae>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	e000      	b.n	8003740 <HAL_ADC_Start_DMA+0xb0>
 800373e:	4b71      	ldr	r3, [pc, #452]	@ (8003904 <HAL_ADC_Start_DMA+0x274>)
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	4293      	cmp	r3, r2
 8003746:	d002      	beq.n	800374e <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003748:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003752:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800376a:	f023 0206 	bic.w	r2, r3, #6
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003772:	e006      	b.n	8003782 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c
 800377a:	e002      	b.n	8003782 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003786:	4a64      	ldr	r2, [pc, #400]	@ (8003918 <HAL_ADC_Start_DMA+0x288>)
 8003788:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a63      	ldr	r2, [pc, #396]	@ (800391c <HAL_ADC_Start_DMA+0x28c>)
 8003790:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003796:	4a62      	ldr	r2, [pc, #392]	@ (8003920 <HAL_ADC_Start_DMA+0x290>)
 8003798:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	221c      	movs	r2, #28
 80037a0:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0210 	orr.w	r2, r2, #16
 80037b8:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a55      	ldr	r2, [pc, #340]	@ (8003914 <HAL_ADC_Start_DMA+0x284>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d107      	bne.n	80037d4 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04f      	beq.n	8003882 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d046      	beq.n	800387a <HAL_ADC_Start_DMA+0x1ea>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d040      	beq.n	800387a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fdf8 	bl	80063fc <HAL_DMAEx_List_GetNodeConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e072      	b.n	80038fc <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	2b02      	cmp	r3, #2
 800381a:	d104      	bne.n	8003826 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003824:	e00a      	b.n	800383c <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	2b01      	cmp	r3, #1
 800382a:	d104      	bne.n	8003836 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003834:	e002      	b.n	800383c <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003848:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386c:	4618      	mov	r0, r3
 800386e:	f002 fd1b 	bl	80062a8 <HAL_DMAEx_List_Start_IT>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003878:	e028      	b.n	80038cc <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003880:	e024      	b.n	80038cc <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d104      	bne.n	8003896 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003894:	e00c      	b.n	80038b0 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d104      	bne.n	80038aa <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3340      	adds	r3, #64	@ 0x40
 80038ba:	4619      	mov	r1, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038c2:	f001 fd5f 	bl	8005384 <HAL_DMA_Start_IT>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fbba 	bl	800304a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80038d6:	e00f      	b.n	80038f8 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80038e0:	e00a      	b.n	80038f8 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80038f0:	e002      	b.n	80038f8 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80038f8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3788      	adds	r7, #136	@ 0x88
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	42028000 	.word	0x42028000
 8003908:	42028100 	.word	0x42028100
 800390c:	42028300 	.word	0x42028300
 8003910:	46021300 	.word	0x46021300
 8003914:	46021000 	.word	0x46021000
 8003918:	08004c8d 	.word	0x08004c8d
 800391c:	08004d65 	.word	0x08004d65
 8003920:	08004d81 	.word	0x08004d81

08003924 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	@ 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a77      	ldr	r2, [pc, #476]	@ (8003b24 <HAL_ADC_IRQHandler+0x200>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_ADC_IRQHandler+0x30>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a76      	ldr	r2, [pc, #472]	@ (8003b28 <HAL_ADC_IRQHandler+0x204>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <HAL_ADC_IRQHandler+0x34>
 8003954:	4b75      	ldr	r3, [pc, #468]	@ (8003b2c <HAL_ADC_IRQHandler+0x208>)
 8003956:	e000      	b.n	800395a <HAL_ADC_IRQHandler+0x36>
 8003958:	4b75      	ldr	r3, [pc, #468]	@ (8003b30 <HAL_ADC_IRQHandler+0x20c>)
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fae4 	bl	8002f28 <LL_ADC_GetMultimode>
 8003960:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d017      	beq.n	800399c <HAL_ADC_IRQHandler+0x78>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003986:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f001 fa2e 	bl	8004df0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x8c>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80d1 	beq.w	8003b5e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80cb 	beq.w	8003b5e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a53      	ldr	r2, [pc, #332]	@ (8003b34 <HAL_ADC_IRQHandler+0x210>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d06c      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f932 	bl	8002c58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80aa 	beq.w	8003b50 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a49      	ldr	r2, [pc, #292]	@ (8003b28 <HAL_ADC_IRQHandler+0x204>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d002      	beq.n	8003a0c <HAL_ADC_IRQHandler+0xe8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e000      	b.n	8003a0e <HAL_ADC_IRQHandler+0xea>
 8003a0c:	4b45      	ldr	r3, [pc, #276]	@ (8003b24 <HAL_ADC_IRQHandler+0x200>)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d008      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	d002      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	d104      	bne.n	8003a32 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	e00c      	b.n	8003a4c <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3c      	ldr	r2, [pc, #240]	@ (8003b28 <HAL_ADC_IRQHandler+0x204>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d002      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x11e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e000      	b.n	8003a44 <HAL_ADC_IRQHandler+0x120>
 8003a42:	4b38      	ldr	r3, [pc, #224]	@ (8003b24 <HAL_ADC_IRQHandler+0x200>)
 8003a44:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d17c      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d175      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fb02 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11a      	bne.n	8003aaa <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020c 	bic.w	r2, r2, #12
 8003a82:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d159      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	679a      	str	r2, [r3, #120]	@ 0x78
 8003aa8:	e052      	b.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aae:	f043 0210 	orr.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003ac2:	e045      	b.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff f8c5 	bl	8002c58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d03d      	beq.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d138      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d131      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fabe 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11d      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 020c 	bic.w	r2, r2, #12
 8003b0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	f043 0201 	orr.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003b20:	e016      	b.n	8003b50 <HAL_ADC_IRQHandler+0x22c>
 8003b22:	bf00      	nop
 8003b24:	42028000 	.word	0x42028000
 8003b28:	42028100 	.word	0x42028100
 8003b2c:	42028300 	.word	0x42028300
 8003b30:	46021300 	.word	0x46021300
 8003b34:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f99d 	bl	8003e90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	220c      	movs	r2, #12
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a8c      	ldr	r2, [pc, #560]	@ (8003d94 <HAL_ADC_IRQHandler+0x470>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f000 8095 	beq.w	8003c94 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x25a>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8085 	beq.w	8003c94 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d07f      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f91e 	bl	8002df2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003bb6:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f84b 	bl	8002c58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bc2:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a73      	ldr	r2, [pc, #460]	@ (8003d98 <HAL_ADC_IRQHandler+0x474>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d002      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0x2b0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e000      	b.n	8003bd6 <HAL_ADC_IRQHandler+0x2b2>
 8003bd4:	4b71      	ldr	r3, [pc, #452]	@ (8003d9c <HAL_ADC_IRQHandler+0x478>)
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d008      	beq.n	8003bf0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d002      	beq.n	8003bf0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	d104      	bne.n	8003bfa <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	e00c      	b.n	8003c14 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a66      	ldr	r2, [pc, #408]	@ (8003d98 <HAL_ADC_IRQHandler+0x474>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d002      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x2e6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e000      	b.n	8003c0c <HAL_ADC_IRQHandler+0x2e8>
 8003c0a:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <HAL_ADC_IRQHandler+0x478>)
 8003c0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d035      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_ADC_IRQHandler+0x310>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02d      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d128      	bne.n	8003c86 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	2b40      	cmp	r3, #64	@ 0x40
 8003c40:	d121      	bne.n	8003c86 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fa26 	bl	8003098 <LL_ADC_INJ_IsConversionOngoing>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d119      	bne.n	8003c86 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c60:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 f894 	bl	8004db4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2260      	movs	r2, #96	@ 0x60
 8003c92:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x39e>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8ff 	bl	8003eb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0x3ce>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f001 f870 	bl	8004dc8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x3fe>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f001 f862 	bl	8004ddc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05d      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x4c4>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d058      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d42:	e03b      	b.n	8003dbc <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <HAL_ADC_IRQHandler+0x470>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02c      	beq.n	8003da8 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a10      	ldr	r2, [pc, #64]	@ (8003d9c <HAL_ADC_IRQHandler+0x478>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADC_IRQHandler+0x444>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <HAL_ADC_IRQHandler+0x474>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_IRQHandler+0x448>
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <HAL_ADC_IRQHandler+0x47c>)
 8003d6a:	e000      	b.n	8003d6e <HAL_ADC_IRQHandler+0x44a>
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <HAL_ADC_IRQHandler+0x480>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff f8e8 	bl	8002f44 <LL_ADC_GetMultiDMATransfer>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d020      	beq.n	8003dbc <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	e01d      	b.n	8003dbc <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d92:	e013      	b.n	8003dbc <HAL_ADC_IRQHandler+0x498>
 8003d94:	46021000 	.word	0x46021000
 8003d98:	42028100 	.word	0x42028100
 8003d9c:	42028000 	.word	0x42028000
 8003da0:	42028300 	.word	0x42028300
 8003da4:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff f812 	bl	8002dd6 <LL_ADC_REG_GetDMATransfer>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10e      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dc6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd2:	f043 0202 	orr.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f876 	bl	8003ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2210      	movs	r2, #16
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01b      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x506>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d016      	beq.n	8003e2a <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f877 	bl	8003f08 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <HAL_ADC_IRQHandler+0x568>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d126      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_ADC_IRQHandler+0x534>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f849 	bl	8003ee0 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e56:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <HAL_ADC_IRQHandler+0x55e>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f841 	bl	8003ef4 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e80:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003e82:	bf00      	nop
 8003e84:	3728      	adds	r7, #40	@ 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	46021000 	.word	0x46021000

08003e90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b0b7      	sub	sp, #220	@ 0xdc
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4aa8      	ldr	r2, [pc, #672]	@ (80041d8 <HAL_ADC_ConfigChannel+0x2bc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d103      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x36>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f000 bdfe 	b.w	8004b4e <HAL_ADC_ConfigChannel+0xc32>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f887 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 85c1 	bne.w	8004aee <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a99      	ldr	r2, [pc, #612]	@ (80041d8 <HAL_ADC_ConfigChannel+0x2bc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f000 8409 	beq.w	800478a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d108      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x7a>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	0e9b      	lsrs	r3, r3, #26
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	2201      	movs	r2, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	e01d      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0xb6>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e004      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2201      	movs	r2, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	69d1      	ldr	r1, [r2, #28]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f7fe fe47 	bl	8002c80 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff f83b 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003ffc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff f847 	bl	8003098 <LL_ADC_INJ_IsConversionOngoing>
 800400a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800400e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 81df 	bne.w	80043d6 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 81da 	bne.w	80043d6 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	461a      	mov	r2, r3
 8004030:	f7fe fef2 	bl	8002e18 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b04      	cmp	r3, #4
 8004054:	d046      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6919      	ldr	r1, [r3, #16]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004066:	f7fe fd2d 	bl	8002ac4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6919      	ldr	r1, [r3, #16]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	461a      	mov	r2, r3
 8004078:	f7fe fd5b 	bl	8002b32 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	7e9b      	ldrb	r3, [r3, #26]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d11e      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_ADC_ConfigChannel+0x17e>
 8004094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004098:	e000      	b.n	800409c <HAL_ADC_ConfigChannel+0x180>
 800409a:	2300      	movs	r3, #0
 800409c:	461a      	mov	r2, r3
 800409e:	f7fe fd7e 	bl	8002b9e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d102      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x19c>
 80040b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80040b6:	e000      	b.n	80040ba <HAL_ADC_ConfigChannel+0x19e>
 80040b8:	2300      	movs	r3, #0
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7fe fd54 	bl	8002b68 <LL_ADC_SetOffsetSignedSaturation>
 80040c0:	e189      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2200      	movs	r2, #0
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fe fd66 	bl	8002b9e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2200      	movs	r2, #0
 80040dc:	4619      	mov	r1, r3
 80040de:	f7fe fd43 	bl	8002b68 <LL_ADC_SetOffsetSignedSaturation>
 80040e2:	e178      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fd0b 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x1f4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fd00 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 8004106:	4603      	mov	r3, r0
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	f003 021f 	and.w	r2, r3, #31
 800410e:	e01e      	b.n	800414e <HAL_ADC_ConfigChannel+0x232>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fcf5 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 800411c:	4603      	mov	r3, r0
 800411e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800412e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800413e:	2320      	movs	r3, #32
 8004140:	e004      	b.n	800414c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x24a>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0e9b      	lsrs	r3, r3, #26
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	e018      	b.n	8004198 <HAL_ADC_ConfigChannel+0x27c>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800417a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800417e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800418a:	2320      	movs	r3, #32
 800418c:	e004      	b.n	8004198 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800418e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004198:	429a      	cmp	r2, r3
 800419a:	d107      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	2100      	movs	r1, #0
 80041a8:	f7fe fc8c 	bl	8002ac4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fca7 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x2c0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2101      	movs	r1, #1
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fc9c 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	0e9b      	lsrs	r3, r3, #26
 80041d2:	f003 021f 	and.w	r2, r3, #31
 80041d6:	e020      	b.n	800421a <HAL_ADC_ConfigChannel+0x2fe>
 80041d8:	46021000 	.word	0x46021000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fc8f 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80041fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e004      	b.n	8004218 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800420e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x316>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0e9b      	lsrs	r3, r3, #26
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	e018      	b.n	8004264 <HAL_ADC_ConfigChannel+0x348>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800424a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800424e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004256:	2320      	movs	r3, #32
 8004258:	e004      	b.n	8004264 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800425a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	2101      	movs	r1, #1
 8004274:	f7fe fc26 	bl	8002ac4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fc41 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 8004284:	4603      	mov	r3, r0
 8004286:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x388>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe fc36 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	e01a      	b.n	80042da <HAL_ADC_ConfigChannel+0x3be>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fc2b 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80042bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80042c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80042ca:	2320      	movs	r3, #32
 80042cc:	e004      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80042ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x3d6>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	e011      	b.n	8004316 <HAL_ADC_ConfigChannel+0x3fa>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004302:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800430a:	2320      	movs	r3, #32
 800430c:	e003      	b.n	8004316 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800430e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004316:	429a      	cmp	r2, r3
 8004318:	d107      	bne.n	800432a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	2102      	movs	r1, #2
 8004326:	f7fe fbcd 	bl	8002ac4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2103      	movs	r1, #3
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fbe8 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 8004336:	4603      	mov	r3, r0
 8004338:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x43a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2103      	movs	r1, #3
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fbdd 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 800434c:	4603      	mov	r3, r0
 800434e:	0e9b      	lsrs	r3, r3, #26
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	e017      	b.n	8004386 <HAL_ADC_ConfigChannel+0x46a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2103      	movs	r1, #3
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fbd2 	bl	8002b06 <LL_ADC_GetOffsetChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800436e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004370:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e003      	b.n	8004384 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 800437c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <HAL_ADC_ConfigChannel+0x482>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0e9b      	lsrs	r3, r3, #26
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	e011      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x4a6>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80043b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80043b6:	2320      	movs	r3, #32
 80043b8:	e003      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80043ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043bc:	fab3 f383 	clz	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d107      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2300      	movs	r3, #0
 80043d0:	2103      	movs	r1, #3
 80043d2:	f7fe fb77 	bl	8002ac4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fe22 	bl	8003024 <LL_ADC_IsEnabled>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f040 83ad 	bne.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	461a      	mov	r2, r3
 80043f6:	f7fe fd73 	bl	8002ee0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004402:	f040 80d6 	bne.w	80045b2 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <HAL_ADC_ConfigChannel+0x50e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	3301      	adds	r3, #1
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2b09      	cmp	r3, #9
 8004420:	bf94      	ite	ls
 8004422:	2301      	movls	r3, #1
 8004424:	2300      	movhi	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e019      	b.n	800445e <HAL_ADC_ConfigChannel+0x542>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800443c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004442:	2320      	movs	r3, #32
 8004444:	e003      	b.n	800444e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3301      	adds	r3, #1
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2b09      	cmp	r3, #9
 8004456:	bf94      	ite	ls
 8004458:	2301      	movls	r3, #1
 800445a:	2300      	movhi	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04d      	beq.n	80044fe <HAL_ADC_ConfigChannel+0x5e2>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_ADC_ConfigChannel+0x562>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	0e9b      	lsrs	r3, r3, #26
 8004474:	3301      	adds	r3, #1
 8004476:	069b      	lsls	r3, r3, #26
 8004478:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800447c:	e015      	b.n	80044aa <HAL_ADC_ConfigChannel+0x58e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800448c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004496:	2320      	movs	r3, #32
 8004498:	e003      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800449a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	069b      	lsls	r3, r3, #26
 80044a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x5ae>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	0e9b      	lsrs	r3, r3, #26
 80044bc:	3301      	adds	r3, #1
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	e017      	b.n	80044fa <HAL_ADC_ConfigChannel+0x5de>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80044e2:	2320      	movs	r3, #32
 80044e4:	e003      	b.n	80044ee <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	fab3 f383 	clz	r3, r3
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3301      	adds	r3, #1
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	e04e      	b.n	800459c <HAL_ADC_ConfigChannel+0x680>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <HAL_ADC_ConfigChannel+0x5fe>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	0e9b      	lsrs	r3, r3, #26
 8004510:	3301      	adds	r3, #1
 8004512:	069b      	lsls	r3, r3, #26
 8004514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004518:	e015      	b.n	8004546 <HAL_ADC_ConfigChannel+0x62a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004532:	2320      	movs	r3, #32
 8004534:	e003      	b.n	800453e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	3301      	adds	r3, #1
 8004540:	069b      	lsls	r3, r3, #26
 8004542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x64a>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0e9b      	lsrs	r3, r3, #26
 8004558:	3301      	adds	r3, #1
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	e017      	b.n	8004596 <HAL_ADC_ConfigChannel+0x67a>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	61bb      	str	r3, [r7, #24]
  return result;
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800457e:	2320      	movs	r3, #32
 8004580:	e003      	b.n	800458a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3301      	adds	r3, #1
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800459c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80045ae:	f7fe fc33 	bl	8002e18 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f280 82c3 	bge.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a92      	ldr	r2, [pc, #584]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x6b4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a91      	ldr	r2, [pc, #580]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x6b8>
 80045d0:	4b90      	ldr	r3, [pc, #576]	@ (8004814 <HAL_ADC_ConfigChannel+0x8f8>)
 80045d2:	e000      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x6ba>
 80045d4:	4b90      	ldr	r3, [pc, #576]	@ (8004818 <HAL_ADC_ConfigChannel+0x8fc>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fa46 	bl	8002a68 <LL_ADC_GetCommonPathInternalCh>
 80045dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a89      	ldr	r2, [pc, #548]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_ADC_ConfigChannel+0x6d8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a88      	ldr	r2, [pc, #544]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10e      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x6f6>
 80045f4:	4885      	ldr	r0, [pc, #532]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 80045f6:	f7fe fd15 	bl	8003024 <LL_ADC_IsEnabled>
 80045fa:	4604      	mov	r4, r0
 80045fc:	4884      	ldr	r0, [pc, #528]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 80045fe:	f7fe fd11 	bl	8003024 <LL_ADC_IsEnabled>
 8004602:	4603      	mov	r3, r0
 8004604:	4323      	orrs	r3, r4
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	e008      	b.n	8004624 <HAL_ADC_ConfigChannel+0x708>
 8004612:	4882      	ldr	r0, [pc, #520]	@ (800481c <HAL_ADC_ConfigChannel+0x900>)
 8004614:	f7fe fd06 	bl	8003024 <LL_ADC_IsEnabled>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a6 	beq.w	8004776 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7c      	ldr	r2, [pc, #496]	@ (8004820 <HAL_ADC_ConfigChannel+0x904>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d13c      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d136      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a71      	ldr	r2, [pc, #452]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00a      	beq.n	8004660 <HAL_ADC_ConfigChannel+0x744>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a70      	ldr	r2, [pc, #448]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d005      	beq.n	8004660 <HAL_ADC_ConfigChannel+0x744>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a70      	ldr	r2, [pc, #448]	@ (800481c <HAL_ADC_ConfigChannel+0x900>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f040 826e 	bne.w	8004b3c <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a69      	ldr	r2, [pc, #420]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_ADC_ConfigChannel+0x758>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x75c>
 8004674:	4a67      	ldr	r2, [pc, #412]	@ (8004814 <HAL_ADC_ConfigChannel+0x8f8>)
 8004676:	e000      	b.n	800467a <HAL_ADC_ConfigChannel+0x75e>
 8004678:	4a67      	ldr	r2, [pc, #412]	@ (8004818 <HAL_ADC_ConfigChannel+0x8fc>)
 800467a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800467e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f7fe f9dc 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800468a:	4b66      	ldr	r3, [pc, #408]	@ (8004824 <HAL_ADC_ConfigChannel+0x908>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	4a65      	ldr	r2, [pc, #404]	@ (8004828 <HAL_ADC_ConfigChannel+0x90c>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	3301      	adds	r3, #1
 800469a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800469c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800469e:	e002      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f9      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046ac:	e246      	b.n	8004b3c <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a5e      	ldr	r2, [pc, #376]	@ (800482c <HAL_ADC_ConfigChannel+0x910>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d12b      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d125      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a50      	ldr	r2, [pc, #320]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00a      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x7c8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d005      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x7c8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a4f      	ldr	r2, [pc, #316]	@ (800481c <HAL_ADC_ConfigChannel+0x900>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	f040 822e 	bne.w	8004b40 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a48      	ldr	r2, [pc, #288]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_ADC_ConfigChannel+0x7dc>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a47      	ldr	r2, [pc, #284]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x7e0>
 80046f8:	4a46      	ldr	r2, [pc, #280]	@ (8004814 <HAL_ADC_ConfigChannel+0x8f8>)
 80046fa:	e000      	b.n	80046fe <HAL_ADC_ConfigChannel+0x7e2>
 80046fc:	4a46      	ldr	r2, [pc, #280]	@ (8004818 <HAL_ADC_ConfigChannel+0x8fc>)
 80046fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7fe f99a 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800470e:	e217      	b.n	8004b40 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_ADC_ConfigChannel+0x914>)
 8004716:	4293      	cmp	r3, r2
 8004718:	f040 8213 	bne.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800471c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 820c 	bne.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a37      	ldr	r2, [pc, #220]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00a      	beq.n	800474a <HAL_ADC_ConfigChannel+0x82e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a35      	ldr	r2, [pc, #212]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d005      	beq.n	800474a <HAL_ADC_ConfigChannel+0x82e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a36      	ldr	r2, [pc, #216]	@ (800481c <HAL_ADC_ConfigChannel+0x900>)
 8004744:	4293      	cmp	r3, r2
 8004746:	f040 81fc 	bne.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2f      	ldr	r2, [pc, #188]	@ (800480c <HAL_ADC_ConfigChannel+0x8f0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_ADC_ConfigChannel+0x842>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2d      	ldr	r2, [pc, #180]	@ (8004810 <HAL_ADC_ConfigChannel+0x8f4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x846>
 800475e:	4a2d      	ldr	r2, [pc, #180]	@ (8004814 <HAL_ADC_ConfigChannel+0x8f8>)
 8004760:	e000      	b.n	8004764 <HAL_ADC_ConfigChannel+0x848>
 8004762:	4a2d      	ldr	r2, [pc, #180]	@ (8004818 <HAL_ADC_ConfigChannel+0x8fc>)
 8004764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7fe f967 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
 8004774:	e1e5      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004788:	e1db      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	f000 811b 	beq.w	80049d2 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047a4:	d004      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80047aa:	4a22      	ldr	r2, [pc, #136]	@ (8004834 <HAL_ADC_ConfigChannel+0x918>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d107      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fac1 	bl	8002d40 <LL_ADC_REG_SetSequencerChAdd>
 80047be:	e059      	b.n	8004874 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	210f      	movs	r1, #15
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x8d4>
 80047e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047e8:	0e9b      	lsrs	r3, r3, #26
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	e027      	b.n	8004840 <HAL_ADC_ConfigChannel+0x924>
 80047f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047f4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	60fb      	str	r3, [r7, #12]
  return result;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d117      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e019      	b.n	8004840 <HAL_ADC_ConfigChannel+0x924>
 800480c:	42028000 	.word	0x42028000
 8004810:	42028100 	.word	0x42028100
 8004814:	42028300 	.word	0x42028300
 8004818:	46021300 	.word	0x46021300
 800481c:	46021000 	.word	0x46021000
 8004820:	ce080000 	.word	0xce080000
 8004824:	20000000 	.word	0x20000000
 8004828:	053e2d63 	.word	0x053e2d63
 800482c:	ca040000 	.word	0xca040000
 8004830:	80000001 	.word	0x80000001
 8004834:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	6849      	ldr	r1, [r1, #4]
 8004844:	f001 011f 	and.w	r1, r1, #31
 8004848:	408b      	lsls	r3, r1
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	429a      	cmp	r2, r3
 8004860:	d808      	bhi.n	8004874 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800486e:	4619      	mov	r1, r3
 8004870:	f7fe fa06 	bl	8002c80 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	461a      	mov	r2, r3
 800487e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004882:	f7fe fac9 	bl	8002e18 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f280 8159 	bge.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a9b      	ldr	r2, [pc, #620]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_ADC_ConfigChannel+0x988>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a9a      	ldr	r2, [pc, #616]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x98c>
 80048a4:	4b99      	ldr	r3, [pc, #612]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 80048a6:	e000      	b.n	80048aa <HAL_ADC_ConfigChannel+0x98e>
 80048a8:	4b99      	ldr	r3, [pc, #612]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe f8dc 	bl	8002a68 <LL_ADC_GetCommonPathInternalCh>
 80048b0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a96      	ldr	r2, [pc, #600]	@ (8004b14 <HAL_ADC_ConfigChannel+0xbf8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d12b      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d125      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a8d      	ldr	r2, [pc, #564]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_ADC_ConfigChannel+0x9c2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a8b      	ldr	r2, [pc, #556]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x9c6>
 80048de:	4a8b      	ldr	r2, [pc, #556]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 80048e0:	e000      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x9c8>
 80048e2:	4a8b      	ldr	r2, [pc, #556]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 80048e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7fe f8a7 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80048f4:	4b88      	ldr	r3, [pc, #544]	@ (8004b18 <HAL_ADC_ConfigChannel+0xbfc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	4a88      	ldr	r2, [pc, #544]	@ (8004b1c <HAL_ADC_ConfigChannel+0xc00>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004906:	e002      	b.n	800490e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3b01      	subs	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f9      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004914:	e045      	b.n	80049a2 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a81      	ldr	r2, [pc, #516]	@ (8004b20 <HAL_ADC_ConfigChannel+0xc04>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d11b      	bne.n	8004958 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004928:	2b00      	cmp	r3, #0
 800492a:	d115      	bne.n	8004958 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a74      	ldr	r2, [pc, #464]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADC_ConfigChannel+0xa24>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a73      	ldr	r2, [pc, #460]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0xa28>
 8004940:	4a72      	ldr	r2, [pc, #456]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8004942:	e000      	b.n	8004946 <HAL_ADC_ConfigChannel+0xa2a>
 8004944:	4a72      	ldr	r2, [pc, #456]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8004946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fe f876 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
 8004956:	e024      	b.n	80049a2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a71      	ldr	r2, [pc, #452]	@ (8004b24 <HAL_ADC_ConfigChannel+0xc08>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d11f      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d115      	bne.n	800499a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a64      	ldr	r2, [pc, #400]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_ADC_ConfigChannel+0xa66>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a62      	ldr	r2, [pc, #392]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_ADC_ConfigChannel+0xa6a>
 8004982:	4a62      	ldr	r2, [pc, #392]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8004984:	e000      	b.n	8004988 <HAL_ADC_ConfigChannel+0xa6c>
 8004986:	4a62      	ldr	r2, [pc, #392]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8004988:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800498c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f7fe f855 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
 8004998:	e003      	b.n	80049a2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a62      	ldr	r2, [pc, #392]	@ (8004b28 <HAL_ADC_ConfigChannel+0xc0c>)
 80049a0:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a61      	ldr	r2, [pc, #388]	@ (8004b2c <HAL_ADC_ConfigChannel+0xc10>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	f040 80ca 	bne.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 80c3 	bne.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80049d0:	e0b7      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049da:	d004      	beq.n	80049e6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80049e0:	4a53      	ldr	r2, [pc, #332]	@ (8004b30 <HAL_ADC_ConfigChannel+0xc14>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d106      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe f9d9 	bl	8002da6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f280 80a2 	bge.w	8004b42 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_ADC_ConfigChannel+0xaf6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0xafa>
 8004a12:	4b3e      	ldr	r3, [pc, #248]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8004a14:	e000      	b.n	8004a18 <HAL_ADC_ConfigChannel+0xafc>
 8004a16:	4b3e      	ldr	r3, [pc, #248]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe f825 	bl	8002a68 <LL_ADC_GetCommonPathInternalCh>
 8004a1e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a43      	ldr	r2, [pc, #268]	@ (8004b34 <HAL_ADC_ConfigChannel+0xc18>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d115      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a34      	ldr	r2, [pc, #208]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_ADC_ConfigChannel+0xb24>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a33      	ldr	r2, [pc, #204]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0xb28>
 8004a40:	4a32      	ldr	r2, [pc, #200]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8004a42:	e000      	b.n	8004a46 <HAL_ADC_ConfigChannel+0xb2a>
 8004a44:	4a32      	ldr	r2, [pc, #200]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fd fff6 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
 8004a56:	e034      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a36      	ldr	r2, [pc, #216]	@ (8004b38 <HAL_ADC_ConfigChannel+0xc1c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d115      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0xb5a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a25      	ldr	r2, [pc, #148]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0xb5e>
 8004a76:	4a25      	ldr	r2, [pc, #148]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8004a78:	e000      	b.n	8004a7c <HAL_ADC_ConfigChannel+0xb60>
 8004a7a:	4a25      	ldr	r2, [pc, #148]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7fd ffdb 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
 8004a8c:	e019      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a24      	ldr	r2, [pc, #144]	@ (8004b24 <HAL_ADC_ConfigChannel+0xc08>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d114      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_ADC_ConfigChannel+0xb90>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_ADC_ConfigChannel+0xbec>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0xb94>
 8004aac:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <HAL_ADC_ConfigChannel+0xbf0>)
 8004aae:	e000      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0xb96>
 8004ab0:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <HAL_ADC_ConfigChannel+0xbf4>)
 8004ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ab6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f7fd ffc0 	bl	8002a42 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <HAL_ADC_ConfigChannel+0xc10>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d13a      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d134      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004aec:	e029      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b00:	e01f      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
 8004b02:	bf00      	nop
 8004b04:	42028000 	.word	0x42028000
 8004b08:	42028100 	.word	0x42028100
 8004b0c:	42028300 	.word	0x42028300
 8004b10:	46021300 	.word	0x46021300
 8004b14:	b6002000 	.word	0xb6002000
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	053e2d63 	.word	0x053e2d63
 8004b20:	ba004000 	.word	0xba004000
 8004b24:	80000001 	.word	0x80000001
 8004b28:	b2001000 	.word	0xb2001000
 8004b2c:	d7200000 	.word	0xd7200000
 8004b30:	80000010 	.word	0x80000010
 8004b34:	ce080000 	.word	0xce080000
 8004b38:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b40:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004b4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	37dc      	adds	r7, #220	@ 0xdc
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd90      	pop	{r4, r7, pc}
 8004b56:	bf00      	nop

08004b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fe fa5d 	bl	8003024 <LL_ADC_IsEnabled>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d17b      	bne.n	8004c68 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4b3f      	ldr	r3, [pc, #252]	@ (8004c74 <ADC_Enable+0x11c>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e067      	b.n	8004c6a <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fa28 	bl	8002ffc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <ADC_Enable+0x66>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <ADC_Enable+0x120>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d054      	beq.n	8004c68 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004bbe:	f7fd fed5 	bl	800296c <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c7c <ADC_Enable+0x124>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <ADC_Enable+0x80>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c80 <ADC_Enable+0x128>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <ADC_Enable+0x84>
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <ADC_Enable+0x12c>)
 8004bda:	e000      	b.n	8004bde <ADC_Enable+0x86>
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c88 <ADC_Enable+0x130>)
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe f9a2 	bl	8002f28 <LL_ADC_GetMultimode>
 8004be4:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <ADC_Enable+0x128>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d002      	beq.n	8004bf6 <ADC_Enable+0x9e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	e000      	b.n	8004bf8 <ADC_Enable+0xa0>
 8004bf6:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <ADC_Enable+0x124>)
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d02c      	beq.n	8004c5a <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d130      	bne.n	8004c68 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c06:	e028      	b.n	8004c5a <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fa09 	bl	8003024 <LL_ADC_IsEnabled>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe f9ed 	bl	8002ffc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c22:	f7fd fea3 	bl	800296c <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d914      	bls.n	8004c5a <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d00d      	beq.n	8004c5a <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d1cf      	bne.n	8004c08 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	8000003f 	.word	0x8000003f
 8004c78:	46021000 	.word	0x46021000
 8004c7c:	42028000 	.word	0x42028000
 8004c80:	42028100 	.word	0x42028100
 8004c84:	42028300 	.word	0x42028300
 8004c88:	46021300 	.word	0x46021300

08004c8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d14b      	bne.n	8004d3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004caa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d021      	beq.n	8004d04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fd ffc7 	bl	8002c58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d032      	beq.n	8004d36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d12b      	bne.n	8004d36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11f      	bne.n	8004d36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cfa:	f043 0201 	orr.w	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	679a      	str	r2, [r3, #120]	@ 0x78
 8004d02:	e018      	b.n	8004d36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d111      	bne.n	8004d36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff f8aa 	bl	8003e90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d3c:	e00e      	b.n	8004d5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff f8be 	bl	8003ecc <HAL_ADC_ErrorCallback>
}
 8004d50:	e004      	b.n	8004d5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff f896 	bl	8003ea4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9e:	f043 0204 	orr.w	r2, r3, #4
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff f890 	bl	8003ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <__NVIC_SetPriorityGrouping+0x44>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e20:	4013      	ands	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e36:	4a04      	ldr	r2, [pc, #16]	@ (8004e48 <__NVIC_SetPriorityGrouping+0x44>)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	60d3      	str	r3, [r2, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e50:	4b04      	ldr	r3, [pc, #16]	@ (8004e64 <__NVIC_GetPriorityGrouping+0x18>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	0a1b      	lsrs	r3, r3, #8
 8004e56:	f003 0307 	and.w	r3, r3, #7
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db0b      	blt.n	8004e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	f003 021f 	and.w	r2, r3, #31
 8004e80:	4907      	ldr	r1, [pc, #28]	@ (8004ea0 <__NVIC_EnableIRQ+0x38>)
 8004e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2001      	movs	r0, #1
 8004e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000e100 	.word	0xe000e100

08004ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	6039      	str	r1, [r7, #0]
 8004eae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	db0a      	blt.n	8004ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	490c      	ldr	r1, [pc, #48]	@ (8004ef0 <__NVIC_SetPriority+0x4c>)
 8004ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec2:	0112      	lsls	r2, r2, #4
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ecc:	e00a      	b.n	8004ee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4908      	ldr	r1, [pc, #32]	@ (8004ef4 <__NVIC_SetPriority+0x50>)
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	3b04      	subs	r3, #4
 8004edc:	0112      	lsls	r2, r2, #4
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	761a      	strb	r2, [r3, #24]
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	e000e100 	.word	0xe000e100
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b089      	sub	sp, #36	@ 0x24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f1c3 0307 	rsb	r3, r3, #7
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	bf28      	it	cs
 8004f16:	2304      	movcs	r3, #4
 8004f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	2b06      	cmp	r3, #6
 8004f20:	d902      	bls.n	8004f28 <NVIC_EncodePriority+0x30>
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3b03      	subs	r3, #3
 8004f26:	e000      	b.n	8004f2a <NVIC_EncodePriority+0x32>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43da      	mvns	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f40:	f04f 31ff 	mov.w	r1, #4294967295
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	43d9      	mvns	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f50:	4313      	orrs	r3, r2
         );
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3724      	adds	r7, #36	@ 0x24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ff4c 	bl	8004e04 <__NVIC_SetPriorityGrouping>
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f82:	f7ff ff63 	bl	8004e4c <__NVIC_GetPriorityGrouping>
 8004f86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	6978      	ldr	r0, [r7, #20]
 8004f8e:	f7ff ffb3 	bl	8004ef8 <NVIC_EncodePriority>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ff82 	bl	8004ea4 <__NVIC_SetPriority>
}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff ff56 	bl	8004e68 <__NVIC_EnableIRQ>
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fd4:	d301      	bcc.n	8004fda <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e00d      	b.n	8004ff6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004fda:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <HAL_SYSTICK_Config+0x40>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004fe2:	4b08      	ldr	r3, [pc, #32]	@ (8005004 <HAL_SYSTICK_Config+0x40>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004fe8:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_SYSTICK_Config+0x40>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <HAL_SYSTICK_Config+0x40>)
 8004fee:	f043 0303 	orr.w	r3, r3, #3
 8004ff2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	e000e010 	.word	0xe000e010

08005008 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d844      	bhi.n	80050a0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005016:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800503f 	.word	0x0800503f
 8005020:	0800505d 	.word	0x0800505d
 8005024:	0800507f 	.word	0x0800507f
 8005028:	080050a1 	.word	0x080050a1
 800502c:	08005031 	.word	0x08005031
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005030:	4b1f      	ldr	r3, [pc, #124]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1e      	ldr	r2, [pc, #120]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6013      	str	r3, [r2, #0]
      break;
 800503c:	e031      	b.n	80050a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800503e:	4b1c      	ldr	r3, [pc, #112]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800504a:	4b1a      	ldr	r3, [pc, #104]	@ (80050b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800504c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005050:	4a18      	ldr	r2, [pc, #96]	@ (80050b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005052:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800505a:	e022      	b.n	80050a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005062:	f023 0304 	bic.w	r3, r3, #4
 8005066:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005068:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800506a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800506e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005072:	4a10      	ldr	r2, [pc, #64]	@ (80050b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005074:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800507c:	e011      	b.n	80050a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800507e:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0b      	ldr	r2, [pc, #44]	@ (80050b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800508c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005090:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005094:	4a07      	ldr	r2, [pc, #28]	@ (80050b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005096:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800509a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800509e:	e000      	b.n	80050a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80050a0:	bf00      	nop
  }
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	e000e010 	.word	0xe000e010
 80050b4:	46020c00 	.word	0x46020c00

080050b8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80050ca:	2304      	movs	r3, #4
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	e021      	b.n	8005114 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80050d0:	4b15      	ldr	r3, [pc, #84]	@ (8005128 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80050d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050d6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80050da:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050e2:	d011      	beq.n	8005108 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050ea:	d810      	bhi.n	800510e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050f8:	d003      	beq.n	8005102 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80050fa:	e008      	b.n	800510e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80050fc:	2300      	movs	r3, #0
 80050fe:	607b      	str	r3, [r7, #4]
        break;
 8005100:	e008      	b.n	8005114 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005102:	2301      	movs	r3, #1
 8005104:	607b      	str	r3, [r7, #4]
        break;
 8005106:	e005      	b.n	8005114 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005108:	2302      	movs	r3, #2
 800510a:	607b      	str	r3, [r7, #4]
        break;
 800510c:	e002      	b.n	8005114 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800510e:	2300      	movs	r3, #0
 8005110:	607b      	str	r3, [r7, #4]
        break;
 8005112:	bf00      	nop
    }
  }
  return systick_source;
 8005114:	687b      	ldr	r3, [r7, #4]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	e000e010 	.word	0xe000e010
 8005128:	46020c00 	.word	0x46020c00

0800512c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7fd fc1a 	bl	800296c <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0db      	b.n	80052fc <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6e      	ldr	r2, [pc, #440]	@ (8005304 <HAL_DMA_Init+0x1d8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	f000 809f 	beq.w	800528e <HAL_DMA_Init+0x162>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a6c      	ldr	r2, [pc, #432]	@ (8005308 <HAL_DMA_Init+0x1dc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	f000 8099 	beq.w	800528e <HAL_DMA_Init+0x162>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6a      	ldr	r2, [pc, #424]	@ (800530c <HAL_DMA_Init+0x1e0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f000 8093 	beq.w	800528e <HAL_DMA_Init+0x162>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a68      	ldr	r2, [pc, #416]	@ (8005310 <HAL_DMA_Init+0x1e4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	f000 808d 	beq.w	800528e <HAL_DMA_Init+0x162>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a66      	ldr	r2, [pc, #408]	@ (8005314 <HAL_DMA_Init+0x1e8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f000 8087 	beq.w	800528e <HAL_DMA_Init+0x162>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a64      	ldr	r2, [pc, #400]	@ (8005318 <HAL_DMA_Init+0x1ec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	f000 8081 	beq.w	800528e <HAL_DMA_Init+0x162>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a62      	ldr	r2, [pc, #392]	@ (800531c <HAL_DMA_Init+0x1f0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d07b      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a61      	ldr	r2, [pc, #388]	@ (8005320 <HAL_DMA_Init+0x1f4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d076      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005324 <HAL_DMA_Init+0x1f8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d071      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5e      	ldr	r2, [pc, #376]	@ (8005328 <HAL_DMA_Init+0x1fc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d06c      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a5c      	ldr	r2, [pc, #368]	@ (800532c <HAL_DMA_Init+0x200>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d067      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005330 <HAL_DMA_Init+0x204>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d062      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a59      	ldr	r2, [pc, #356]	@ (8005334 <HAL_DMA_Init+0x208>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d05d      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_DMA_Init+0x20c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d058      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a56      	ldr	r2, [pc, #344]	@ (800533c <HAL_DMA_Init+0x210>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d053      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a55      	ldr	r2, [pc, #340]	@ (8005340 <HAL_DMA_Init+0x214>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04e      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a53      	ldr	r2, [pc, #332]	@ (8005344 <HAL_DMA_Init+0x218>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d049      	beq.n	800528e <HAL_DMA_Init+0x162>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a52      	ldr	r2, [pc, #328]	@ (8005348 <HAL_DMA_Init+0x21c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d044      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a50      	ldr	r2, [pc, #320]	@ (800534c <HAL_DMA_Init+0x220>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d03f      	beq.n	800528e <HAL_DMA_Init+0x162>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4f      	ldr	r2, [pc, #316]	@ (8005350 <HAL_DMA_Init+0x224>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d03a      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a4d      	ldr	r2, [pc, #308]	@ (8005354 <HAL_DMA_Init+0x228>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d035      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a4c      	ldr	r2, [pc, #304]	@ (8005358 <HAL_DMA_Init+0x22c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d030      	beq.n	800528e <HAL_DMA_Init+0x162>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a4a      	ldr	r2, [pc, #296]	@ (800535c <HAL_DMA_Init+0x230>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02b      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a49      	ldr	r2, [pc, #292]	@ (8005360 <HAL_DMA_Init+0x234>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d026      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a47      	ldr	r2, [pc, #284]	@ (8005364 <HAL_DMA_Init+0x238>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d021      	beq.n	800528e <HAL_DMA_Init+0x162>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a46      	ldr	r2, [pc, #280]	@ (8005368 <HAL_DMA_Init+0x23c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d01c      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a44      	ldr	r2, [pc, #272]	@ (800536c <HAL_DMA_Init+0x240>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d017      	beq.n	800528e <HAL_DMA_Init+0x162>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a43      	ldr	r2, [pc, #268]	@ (8005370 <HAL_DMA_Init+0x244>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d012      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a41      	ldr	r2, [pc, #260]	@ (8005374 <HAL_DMA_Init+0x248>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00d      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a40      	ldr	r2, [pc, #256]	@ (8005378 <HAL_DMA_Init+0x24c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d008      	beq.n	800528e <HAL_DMA_Init+0x162>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a3e      	ldr	r2, [pc, #248]	@ (800537c <HAL_DMA_Init+0x250>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <HAL_DMA_Init+0x162>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a3d      	ldr	r2, [pc, #244]	@ (8005380 <HAL_DMA_Init+0x254>)
 800528c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0206 	orr.w	r2, r2, #6
 80052ac:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80052ae:	e00f      	b.n	80052d0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80052b0:	f7fd fb5c 	bl	800296c <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d908      	bls.n	80052d0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2210      	movs	r2, #16
 80052c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2203      	movs	r2, #3
 80052c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e015      	b.n	80052fc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e8      	bne.n	80052b0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb26 	bl	8005930 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40020050 	.word	0x40020050
 8005308:	50020050 	.word	0x50020050
 800530c:	400200d0 	.word	0x400200d0
 8005310:	500200d0 	.word	0x500200d0
 8005314:	40020150 	.word	0x40020150
 8005318:	50020150 	.word	0x50020150
 800531c:	400201d0 	.word	0x400201d0
 8005320:	500201d0 	.word	0x500201d0
 8005324:	40020250 	.word	0x40020250
 8005328:	50020250 	.word	0x50020250
 800532c:	400202d0 	.word	0x400202d0
 8005330:	500202d0 	.word	0x500202d0
 8005334:	40020350 	.word	0x40020350
 8005338:	50020350 	.word	0x50020350
 800533c:	400203d0 	.word	0x400203d0
 8005340:	500203d0 	.word	0x500203d0
 8005344:	40020450 	.word	0x40020450
 8005348:	50020450 	.word	0x50020450
 800534c:	400204d0 	.word	0x400204d0
 8005350:	500204d0 	.word	0x500204d0
 8005354:	40020550 	.word	0x40020550
 8005358:	50020550 	.word	0x50020550
 800535c:	400205d0 	.word	0x400205d0
 8005360:	500205d0 	.word	0x500205d0
 8005364:	40020650 	.word	0x40020650
 8005368:	50020650 	.word	0x50020650
 800536c:	400206d0 	.word	0x400206d0
 8005370:	500206d0 	.word	0x500206d0
 8005374:	40020750 	.word	0x40020750
 8005378:	50020750 	.word	0x50020750
 800537c:	400207d0 	.word	0x400207d0
 8005380:	500207d0 	.word	0x500207d0

08005384 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e04f      	b.n	800543c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_DMA_Start_IT+0x26>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e048      	b.n	800543c <HAL_DMA_Start_IT+0xb8>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d136      	bne.n	800542c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fa86 	bl	80058e4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80053e6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053fe:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005416:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e007      	b.n	800543c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800544c:	f7fd fa8e 	bl	800296c <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e06b      	b.n	8005534 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d008      	beq.n	800547a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e05c      	b.n	8005534 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0204 	orr.w	r2, r2, #4
 8005488:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2205      	movs	r2, #5
 800548e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005492:	e020      	b.n	80054d6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005494:	f7fd fa6a 	bl	800296c <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b05      	cmp	r3, #5
 80054a0:	d919      	bls.n	80054d6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	f043 0210 	orr.w	r2, r3, #16
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	2201      	movs	r2, #1
 80054c8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e02e      	b.n	8005534 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0d7      	beq.n	8005494 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0202 	orr.w	r2, r2, #2
 80054f2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2204      	movs	r2, #4
 80054f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005504:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	2201      	movs	r2, #1
 8005520:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e019      	b.n	8005582 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d004      	beq.n	8005564 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e00e      	b.n	8005582 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800557a:	f043 0304 	orr.w	r3, r3, #4
 800557e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800559e:	f023 030f 	bic.w	r3, r3, #15
 80055a2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ac:	3b50      	subs	r3, #80	@ 0x50
 80055ae:	09db      	lsrs	r3, r3, #7
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2201      	movs	r2, #1
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 813b 	beq.w	8005844 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d011      	beq.n	8005600 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055f2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800560a:	2b00      	cmp	r3, #0
 800560c:	d011      	beq.n	8005632 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005624:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562a:	f043 0202 	orr.w	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005656:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	f043 0204 	orr.w	r2, r3, #4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005688:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568e:	f043 0208 	orr.w	r2, r3, #8
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ba:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04c      	beq.n	8005774 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d045      	beq.n	8005774 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056f0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d12e      	bne.n	800575c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800570c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0202 	orr.w	r2, r2, #2
 800571c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005736:	2201      	movs	r2, #1
 8005738:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d07a      	beq.n	8005848 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	4798      	blx	r3
        }

        return;
 800575a:	e075      	b.n	8005848 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2205      	movs	r2, #5
 8005760:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d039      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d032      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005798:	2b00      	cmp	r3, #0
 800579a:	d012      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d111      	bne.n	80057d4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057bc:	2201      	movs	r2, #1
 80057be:	731a      	strb	r2, [r3, #12]
 80057c0:	e008      	b.n	80057d4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d103      	bne.n	80057d4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80057dc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d025      	beq.n	800584a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0202 	orr.w	r2, r2, #2
 800580c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005826:	2201      	movs	r2, #1
 8005828:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
 8005842:	e002      	b.n	800584a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005848:	bf00      	nop
    }
  }
}
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800585e:	b2db      	uxtb	r3, r3
}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e02b      	b.n	80058d8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005888:	f023 030f 	bic.w	r3, r3, #15
 800588c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005896:	3b50      	subs	r3, #80	@ 0x50
 8005898:	09db      	lsrs	r3, r3, #7
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2201      	movs	r2, #1
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f003 0311 	and.w	r3, r3, #17
 80058b6:	2b11      	cmp	r3, #17
 80058b8:	d106      	bne.n	80058c8 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	e006      	b.n	80058d6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	43db      	mvns	r3, r3
 80058d0:	401a      	ands	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	b291      	uxth	r1, r2
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	430b      	orrs	r3, r1
 8005906:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005910:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	430a      	orrs	r2, r1
 8005950:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a53      	ldr	r2, [pc, #332]	@ (8005abc <DMA_Init+0x18c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	f000 80a0 	beq.w	8005ab6 <DMA_Init+0x186>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a51      	ldr	r2, [pc, #324]	@ (8005ac0 <DMA_Init+0x190>)
 800597c:	4293      	cmp	r3, r2
 800597e:	f000 809a 	beq.w	8005ab6 <DMA_Init+0x186>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac4 <DMA_Init+0x194>)
 8005988:	4293      	cmp	r3, r2
 800598a:	f000 8094 	beq.w	8005ab6 <DMA_Init+0x186>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4d      	ldr	r2, [pc, #308]	@ (8005ac8 <DMA_Init+0x198>)
 8005994:	4293      	cmp	r3, r2
 8005996:	f000 808e 	beq.w	8005ab6 <DMA_Init+0x186>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a4b      	ldr	r2, [pc, #300]	@ (8005acc <DMA_Init+0x19c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	f000 8088 	beq.w	8005ab6 <DMA_Init+0x186>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a49      	ldr	r2, [pc, #292]	@ (8005ad0 <DMA_Init+0x1a0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	f000 8082 	beq.w	8005ab6 <DMA_Init+0x186>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a47      	ldr	r2, [pc, #284]	@ (8005ad4 <DMA_Init+0x1a4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d07c      	beq.n	8005ab6 <DMA_Init+0x186>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a45      	ldr	r2, [pc, #276]	@ (8005ad8 <DMA_Init+0x1a8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d077      	beq.n	8005ab6 <DMA_Init+0x186>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a44      	ldr	r2, [pc, #272]	@ (8005adc <DMA_Init+0x1ac>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d072      	beq.n	8005ab6 <DMA_Init+0x186>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a42      	ldr	r2, [pc, #264]	@ (8005ae0 <DMA_Init+0x1b0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d06d      	beq.n	8005ab6 <DMA_Init+0x186>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a41      	ldr	r2, [pc, #260]	@ (8005ae4 <DMA_Init+0x1b4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d068      	beq.n	8005ab6 <DMA_Init+0x186>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae8 <DMA_Init+0x1b8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d063      	beq.n	8005ab6 <DMA_Init+0x186>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3e      	ldr	r2, [pc, #248]	@ (8005aec <DMA_Init+0x1bc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d05e      	beq.n	8005ab6 <DMA_Init+0x186>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3c      	ldr	r2, [pc, #240]	@ (8005af0 <DMA_Init+0x1c0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d059      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	@ (8005af4 <DMA_Init+0x1c4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d054      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a39      	ldr	r2, [pc, #228]	@ (8005af8 <DMA_Init+0x1c8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d04f      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a38      	ldr	r2, [pc, #224]	@ (8005afc <DMA_Init+0x1cc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d04a      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a36      	ldr	r2, [pc, #216]	@ (8005b00 <DMA_Init+0x1d0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d045      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a35      	ldr	r2, [pc, #212]	@ (8005b04 <DMA_Init+0x1d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d040      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a33      	ldr	r2, [pc, #204]	@ (8005b08 <DMA_Init+0x1d8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d03b      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a32      	ldr	r2, [pc, #200]	@ (8005b0c <DMA_Init+0x1dc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d036      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a30      	ldr	r2, [pc, #192]	@ (8005b10 <DMA_Init+0x1e0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d031      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2f      	ldr	r2, [pc, #188]	@ (8005b14 <DMA_Init+0x1e4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d02c      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2d      	ldr	r2, [pc, #180]	@ (8005b18 <DMA_Init+0x1e8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d027      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b1c <DMA_Init+0x1ec>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2a      	ldr	r2, [pc, #168]	@ (8005b20 <DMA_Init+0x1f0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a29      	ldr	r2, [pc, #164]	@ (8005b24 <DMA_Init+0x1f4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a27      	ldr	r2, [pc, #156]	@ (8005b28 <DMA_Init+0x1f8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a26      	ldr	r2, [pc, #152]	@ (8005b2c <DMA_Init+0x1fc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <DMA_Init+0x186>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a24      	ldr	r2, [pc, #144]	@ (8005b30 <DMA_Init+0x200>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <DMA_Init+0x186>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a23      	ldr	r2, [pc, #140]	@ (8005b34 <DMA_Init+0x204>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <DMA_Init+0x186>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a21      	ldr	r2, [pc, #132]	@ (8005b38 <DMA_Init+0x208>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d142      	bne.n	8005b3c <DMA_Init+0x20c>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e041      	b.n	8005b3e <DMA_Init+0x20e>
 8005aba:	bf00      	nop
 8005abc:	40020050 	.word	0x40020050
 8005ac0:	50020050 	.word	0x50020050
 8005ac4:	400200d0 	.word	0x400200d0
 8005ac8:	500200d0 	.word	0x500200d0
 8005acc:	40020150 	.word	0x40020150
 8005ad0:	50020150 	.word	0x50020150
 8005ad4:	400201d0 	.word	0x400201d0
 8005ad8:	500201d0 	.word	0x500201d0
 8005adc:	40020250 	.word	0x40020250
 8005ae0:	50020250 	.word	0x50020250
 8005ae4:	400202d0 	.word	0x400202d0
 8005ae8:	500202d0 	.word	0x500202d0
 8005aec:	40020350 	.word	0x40020350
 8005af0:	50020350 	.word	0x50020350
 8005af4:	400203d0 	.word	0x400203d0
 8005af8:	500203d0 	.word	0x500203d0
 8005afc:	40020450 	.word	0x40020450
 8005b00:	50020450 	.word	0x50020450
 8005b04:	400204d0 	.word	0x400204d0
 8005b08:	500204d0 	.word	0x500204d0
 8005b0c:	40020550 	.word	0x40020550
 8005b10:	50020550 	.word	0x50020550
 8005b14:	400205d0 	.word	0x400205d0
 8005b18:	500205d0 	.word	0x500205d0
 8005b1c:	40020650 	.word	0x40020650
 8005b20:	50020650 	.word	0x50020650
 8005b24:	400206d0 	.word	0x400206d0
 8005b28:	500206d0 	.word	0x500206d0
 8005b2c:	40020750 	.word	0x40020750
 8005b30:	50020750 	.word	0x50020750
 8005b34:	400207d0 	.word	0x400207d0
 8005b38:	500207d0 	.word	0x500207d0
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d012      	beq.n	8005b68 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005b52:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005b60:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b9a:	f040 80b0 	bne.w	8005cfe <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a82      	ldr	r2, [pc, #520]	@ (8005dac <DMA_Init+0x47c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	f000 80a0 	beq.w	8005cea <DMA_Init+0x3ba>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a80      	ldr	r2, [pc, #512]	@ (8005db0 <DMA_Init+0x480>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	f000 809a 	beq.w	8005cea <DMA_Init+0x3ba>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a7e      	ldr	r2, [pc, #504]	@ (8005db4 <DMA_Init+0x484>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	f000 8094 	beq.w	8005cea <DMA_Init+0x3ba>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7c      	ldr	r2, [pc, #496]	@ (8005db8 <DMA_Init+0x488>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	f000 808e 	beq.w	8005cea <DMA_Init+0x3ba>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7a      	ldr	r2, [pc, #488]	@ (8005dbc <DMA_Init+0x48c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	f000 8088 	beq.w	8005cea <DMA_Init+0x3ba>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a78      	ldr	r2, [pc, #480]	@ (8005dc0 <DMA_Init+0x490>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	f000 8082 	beq.w	8005cea <DMA_Init+0x3ba>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a76      	ldr	r2, [pc, #472]	@ (8005dc4 <DMA_Init+0x494>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d07c      	beq.n	8005cea <DMA_Init+0x3ba>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a74      	ldr	r2, [pc, #464]	@ (8005dc8 <DMA_Init+0x498>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d077      	beq.n	8005cea <DMA_Init+0x3ba>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a73      	ldr	r2, [pc, #460]	@ (8005dcc <DMA_Init+0x49c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d072      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a71      	ldr	r2, [pc, #452]	@ (8005dd0 <DMA_Init+0x4a0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d06d      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a70      	ldr	r2, [pc, #448]	@ (8005dd4 <DMA_Init+0x4a4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d068      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8005dd8 <DMA_Init+0x4a8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d063      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a6d      	ldr	r2, [pc, #436]	@ (8005ddc <DMA_Init+0x4ac>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d05e      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a6b      	ldr	r2, [pc, #428]	@ (8005de0 <DMA_Init+0x4b0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d059      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a6a      	ldr	r2, [pc, #424]	@ (8005de4 <DMA_Init+0x4b4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d054      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a68      	ldr	r2, [pc, #416]	@ (8005de8 <DMA_Init+0x4b8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d04f      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a67      	ldr	r2, [pc, #412]	@ (8005dec <DMA_Init+0x4bc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d04a      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a65      	ldr	r2, [pc, #404]	@ (8005df0 <DMA_Init+0x4c0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d045      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a64      	ldr	r2, [pc, #400]	@ (8005df4 <DMA_Init+0x4c4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d040      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a62      	ldr	r2, [pc, #392]	@ (8005df8 <DMA_Init+0x4c8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d03b      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a61      	ldr	r2, [pc, #388]	@ (8005dfc <DMA_Init+0x4cc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d036      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a5f      	ldr	r2, [pc, #380]	@ (8005e00 <DMA_Init+0x4d0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d031      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a5e      	ldr	r2, [pc, #376]	@ (8005e04 <DMA_Init+0x4d4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d02c      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a5c      	ldr	r2, [pc, #368]	@ (8005e08 <DMA_Init+0x4d8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d027      	beq.n	8005cea <DMA_Init+0x3ba>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8005e0c <DMA_Init+0x4dc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <DMA_Init+0x3ba>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a59      	ldr	r2, [pc, #356]	@ (8005e10 <DMA_Init+0x4e0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01d      	beq.n	8005cea <DMA_Init+0x3ba>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a58      	ldr	r2, [pc, #352]	@ (8005e14 <DMA_Init+0x4e4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <DMA_Init+0x3ba>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a56      	ldr	r2, [pc, #344]	@ (8005e18 <DMA_Init+0x4e8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <DMA_Init+0x3ba>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a55      	ldr	r2, [pc, #340]	@ (8005e1c <DMA_Init+0x4ec>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <DMA_Init+0x3ba>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a53      	ldr	r2, [pc, #332]	@ (8005e20 <DMA_Init+0x4f0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <DMA_Init+0x3ba>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a52      	ldr	r2, [pc, #328]	@ (8005e24 <DMA_Init+0x4f4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <DMA_Init+0x3ba>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a50      	ldr	r2, [pc, #320]	@ (8005e28 <DMA_Init+0x4f8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d101      	bne.n	8005cee <DMA_Init+0x3be>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <DMA_Init+0x3c0>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e008      	b.n	8005d10 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d06:	d103      	bne.n	8005d10 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d0e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	4b45      	ldr	r3, [pc, #276]	@ (8005e2c <DMA_Init+0x4fc>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a36      	ldr	r2, [pc, #216]	@ (8005e0c <DMA_Init+0x4dc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d022      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a35      	ldr	r2, [pc, #212]	@ (8005e10 <DMA_Init+0x4e0>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01d      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a33      	ldr	r2, [pc, #204]	@ (8005e14 <DMA_Init+0x4e4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a32      	ldr	r2, [pc, #200]	@ (8005e18 <DMA_Init+0x4e8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a30      	ldr	r2, [pc, #192]	@ (8005e1c <DMA_Init+0x4ec>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2f      	ldr	r2, [pc, #188]	@ (8005e20 <DMA_Init+0x4f0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e24 <DMA_Init+0x4f4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <DMA_Init+0x44c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	@ (8005e28 <DMA_Init+0x4f8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d101      	bne.n	8005d80 <DMA_Init+0x450>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <DMA_Init+0x452>
 8005d80:	2300      	movs	r3, #0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40020050 	.word	0x40020050
 8005db0:	50020050 	.word	0x50020050
 8005db4:	400200d0 	.word	0x400200d0
 8005db8:	500200d0 	.word	0x500200d0
 8005dbc:	40020150 	.word	0x40020150
 8005dc0:	50020150 	.word	0x50020150
 8005dc4:	400201d0 	.word	0x400201d0
 8005dc8:	500201d0 	.word	0x500201d0
 8005dcc:	40020250 	.word	0x40020250
 8005dd0:	50020250 	.word	0x50020250
 8005dd4:	400202d0 	.word	0x400202d0
 8005dd8:	500202d0 	.word	0x500202d0
 8005ddc:	40020350 	.word	0x40020350
 8005de0:	50020350 	.word	0x50020350
 8005de4:	400203d0 	.word	0x400203d0
 8005de8:	500203d0 	.word	0x500203d0
 8005dec:	40020450 	.word	0x40020450
 8005df0:	50020450 	.word	0x50020450
 8005df4:	400204d0 	.word	0x400204d0
 8005df8:	500204d0 	.word	0x500204d0
 8005dfc:	40020550 	.word	0x40020550
 8005e00:	50020550 	.word	0x50020550
 8005e04:	400205d0 	.word	0x400205d0
 8005e08:	500205d0 	.word	0x500205d0
 8005e0c:	40020650 	.word	0x40020650
 8005e10:	50020650 	.word	0x50020650
 8005e14:	400206d0 	.word	0x400206d0
 8005e18:	500206d0 	.word	0x500206d0
 8005e1c:	40020750 	.word	0x40020750
 8005e20:	50020750 	.word	0x50020750
 8005e24:	400207d0 	.word	0x400207d0
 8005e28:	500207d0 	.word	0x500207d0
 8005e2c:	3c803180 	.word	0x3c803180

08005e30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e053      	b.n	8005eea <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fb fdd4 	bl	8001a04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6851      	ldr	r1, [r2, #4]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	69d2      	ldr	r2, [r2, #28]
 8005e7a:	4311      	orrs	r1, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	430b      	orrs	r3, r1
 8005e82:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8a:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6891      	ldr	r1, [r2, #8]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6992      	ldr	r2, [r2, #24]
 8005e9a:	4311      	orrs	r1, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	68d1      	ldr	r1, [r2, #12]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	051a      	lsls	r2, r3, #20
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	055b      	lsls	r3, r3, #21
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_DMA2D_ConfigLayer+0x24>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e092      	b.n	800603e <HAL_DMA2D_ConfigLayer+0x14a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	3328      	adds	r3, #40	@ 0x28
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	041b      	lsls	r3, r3, #16
 8005f44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005f4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005f58:	4b3c      	ldr	r3, [pc, #240]	@ (800604c <HAL_DMA2D_ConfigLayer+0x158>)
 8005f5a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b0a      	cmp	r3, #10
 8005f62:	d003      	beq.n	8005f6c <HAL_DMA2D_ConfigLayer+0x78>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b09      	cmp	r3, #9
 8005f6a:	d107      	bne.n	8005f7c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e005      	b.n	8005f88 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	061b      	lsls	r3, r3, #24
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d120      	bne.n	8005fd0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	ea02 0103 	and.w	r1, r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b0a      	cmp	r3, #10
 8005fb6:	d003      	beq.n	8005fc0 <HAL_DMA2D_ConfigLayer+0xcc>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d135      	bne.n	800602c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005fcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fce:	e02d      	b.n	800602c <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b0b      	cmp	r3, #11
 8005fd6:	d109      	bne.n	8005fec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	049b      	lsls	r3, r3, #18
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005fea:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	ea02 0103 	and.w	r1, r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	430a      	orrs	r2, r1
 8006002:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b0a      	cmp	r3, #10
 8006014:	d003      	beq.n	800601e <HAL_DMA2D_ConfigLayer+0x12a>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b09      	cmp	r3, #9
 800601c:	d106      	bne.n	800602c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800602a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	ff33000f 	.word	0xff33000f

08006050 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006058:	f7fc fc88 	bl	800296c <HAL_GetTick>
 800605c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0db      	b.n	8006220 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a6e      	ldr	r2, [pc, #440]	@ (8006228 <HAL_DMAEx_List_Init+0x1d8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	f000 809f 	beq.w	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6c      	ldr	r2, [pc, #432]	@ (800622c <HAL_DMAEx_List_Init+0x1dc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f000 8099 	beq.w	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6a      	ldr	r2, [pc, #424]	@ (8006230 <HAL_DMAEx_List_Init+0x1e0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	f000 8093 	beq.w	80061b2 <HAL_DMAEx_List_Init+0x162>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a68      	ldr	r2, [pc, #416]	@ (8006234 <HAL_DMAEx_List_Init+0x1e4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f000 808d 	beq.w	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a66      	ldr	r2, [pc, #408]	@ (8006238 <HAL_DMAEx_List_Init+0x1e8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f000 8087 	beq.w	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a64      	ldr	r2, [pc, #400]	@ (800623c <HAL_DMAEx_List_Init+0x1ec>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f000 8081 	beq.w	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a62      	ldr	r2, [pc, #392]	@ (8006240 <HAL_DMAEx_List_Init+0x1f0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d07b      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a61      	ldr	r2, [pc, #388]	@ (8006244 <HAL_DMAEx_List_Init+0x1f4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d076      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006248 <HAL_DMAEx_List_Init+0x1f8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d071      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5e      	ldr	r2, [pc, #376]	@ (800624c <HAL_DMAEx_List_Init+0x1fc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d06c      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5c      	ldr	r2, [pc, #368]	@ (8006250 <HAL_DMAEx_List_Init+0x200>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d067      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006254 <HAL_DMAEx_List_Init+0x204>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d062      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a59      	ldr	r2, [pc, #356]	@ (8006258 <HAL_DMAEx_List_Init+0x208>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d05d      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a58      	ldr	r2, [pc, #352]	@ (800625c <HAL_DMAEx_List_Init+0x20c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d058      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a56      	ldr	r2, [pc, #344]	@ (8006260 <HAL_DMAEx_List_Init+0x210>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d053      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a55      	ldr	r2, [pc, #340]	@ (8006264 <HAL_DMAEx_List_Init+0x214>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d04e      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a53      	ldr	r2, [pc, #332]	@ (8006268 <HAL_DMAEx_List_Init+0x218>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d049      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a52      	ldr	r2, [pc, #328]	@ (800626c <HAL_DMAEx_List_Init+0x21c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d044      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a50      	ldr	r2, [pc, #320]	@ (8006270 <HAL_DMAEx_List_Init+0x220>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d03f      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a4f      	ldr	r2, [pc, #316]	@ (8006274 <HAL_DMAEx_List_Init+0x224>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d03a      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4d      	ldr	r2, [pc, #308]	@ (8006278 <HAL_DMAEx_List_Init+0x228>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d035      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4c      	ldr	r2, [pc, #304]	@ (800627c <HAL_DMAEx_List_Init+0x22c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d030      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a4a      	ldr	r2, [pc, #296]	@ (8006280 <HAL_DMAEx_List_Init+0x230>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d02b      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a49      	ldr	r2, [pc, #292]	@ (8006284 <HAL_DMAEx_List_Init+0x234>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d026      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a47      	ldr	r2, [pc, #284]	@ (8006288 <HAL_DMAEx_List_Init+0x238>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d021      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a46      	ldr	r2, [pc, #280]	@ (800628c <HAL_DMAEx_List_Init+0x23c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d01c      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a44      	ldr	r2, [pc, #272]	@ (8006290 <HAL_DMAEx_List_Init+0x240>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d017      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a43      	ldr	r2, [pc, #268]	@ (8006294 <HAL_DMAEx_List_Init+0x244>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d012      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a41      	ldr	r2, [pc, #260]	@ (8006298 <HAL_DMAEx_List_Init+0x248>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00d      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a40      	ldr	r2, [pc, #256]	@ (800629c <HAL_DMAEx_List_Init+0x24c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d008      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3e      	ldr	r2, [pc, #248]	@ (80062a0 <HAL_DMAEx_List_Init+0x250>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <HAL_DMAEx_List_Init+0x162>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a3d      	ldr	r2, [pc, #244]	@ (80062a4 <HAL_DMAEx_List_Init+0x254>)
 80061b0:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0206 	orr.w	r2, r2, #6
 80061d0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80061d2:	e00f      	b.n	80061f4 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80061d4:	f7fc fbca 	bl	800296c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d908      	bls.n	80061f4 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2210      	movs	r2, #16
 80061e6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2203      	movs	r2, #3
 80061ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e015      	b.n	8006220 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e8      	bne.n	80061d4 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fae0 	bl	80067c8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40020050 	.word	0x40020050
 800622c:	50020050 	.word	0x50020050
 8006230:	400200d0 	.word	0x400200d0
 8006234:	500200d0 	.word	0x500200d0
 8006238:	40020150 	.word	0x40020150
 800623c:	50020150 	.word	0x50020150
 8006240:	400201d0 	.word	0x400201d0
 8006244:	500201d0 	.word	0x500201d0
 8006248:	40020250 	.word	0x40020250
 800624c:	50020250 	.word	0x50020250
 8006250:	400202d0 	.word	0x400202d0
 8006254:	500202d0 	.word	0x500202d0
 8006258:	40020350 	.word	0x40020350
 800625c:	50020350 	.word	0x50020350
 8006260:	400203d0 	.word	0x400203d0
 8006264:	500203d0 	.word	0x500203d0
 8006268:	40020450 	.word	0x40020450
 800626c:	50020450 	.word	0x50020450
 8006270:	400204d0 	.word	0x400204d0
 8006274:	500204d0 	.word	0x500204d0
 8006278:	40020550 	.word	0x40020550
 800627c:	50020550 	.word	0x50020550
 8006280:	400205d0 	.word	0x400205d0
 8006284:	500205d0 	.word	0x500205d0
 8006288:	40020650 	.word	0x40020650
 800628c:	50020650 	.word	0x50020650
 8006290:	400206d0 	.word	0x400206d0
 8006294:	500206d0 	.word	0x500206d0
 8006298:	40020750 	.word	0x40020750
 800629c:	50020750 	.word	0x50020750
 80062a0:	400207d0 	.word	0x400207d0
 80062a4:	500207d0 	.word	0x500207d0

080062a8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_DMAEx_List_Start_IT+0x16>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e082      	b.n	80063c8 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80062c8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062d4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d005      	beq.n	80062e8 <HAL_DMAEx_List_Start_IT+0x40>
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d16a      	bne.n	80063b8 <HAL_DMAEx_List_Start_IT+0x110>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d067      	beq.n	80063b8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d157      	bne.n	80063a4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_DMAEx_List_Start_IT+0x5a>
 80062fe:	2302      	movs	r3, #2
 8006300:	e062      	b.n	80063c8 <HAL_DMAEx_List_Start_IT+0x120>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006316:	2202      	movs	r2, #2
 8006318:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006324:	2200      	movs	r2, #0
 8006326:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006336:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006366:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f107 010c 	add.w	r1, r7, #12
 8006372:	2200      	movs	r2, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fe47 	bl	8007008 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4619      	mov	r1, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	0c0b      	lsrs	r3, r1, #16
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006398:	4013      	ands	r3, r2
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	430b      	orrs	r3, r1
 80063a2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e007      	b.n	80063c8 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2240      	movs	r2, #64	@ 0x40
 80063bc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_DMAEx_List_BuildNode+0x16>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e004      	b.n	80063f4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb43 	bl	8006a78 <DMA_List_BuildNode>

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e004      	b.n	8006420 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc7f 	bl	8006d1c <DMA_List_GetNodeConfig>

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	@ 0x30
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_DMAEx_List_InsertNode+0x18>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0b6      	b.n	80065b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d104      	bne.n	8006456 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2204      	movs	r2, #4
 8006450:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0ad      	b.n	80065b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fd66 	bl	8006f30 <DMA_List_CheckNodesBaseAddresses>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2205      	movs	r2, #5
 800646e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e09e      	b.n	80065b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fd87 	bl	8006f90 <DMA_List_CheckNodesTypes>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2204      	movs	r2, #4
 800648c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e08f      	b.n	80065b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2202      	movs	r2, #2
 8006496:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800649e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80064a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fdad 	bl	8007008 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d11a      	bne.n	80064ec <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	609a      	str	r2, [r3, #8]
 80064c8:	e06c      	b.n	80065a4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80064d6:	4013      	ands	r3, r2
 80064d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064dc:	4319      	orrs	r1, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2202      	movs	r2, #2
 80064e8:	609a      	str	r2, [r3, #8]
 80064ea:	e05b      	b.n	80065a4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10f      	bne.n	8006512 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80064fc:	4013      	ands	r3, r2
 80064fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006502:	4319      	orrs	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e043      	b.n	800659a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	461a      	mov	r2, r3
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fda2 	bl	8007068 <DMA_List_FindNode>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d132      	bne.n	8006590 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d11a      	bne.n	800656a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	461a      	mov	r2, r3
 8006542:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006546:	4013      	ands	r3, r2
 8006548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800654a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800654c:	4319      	orrs	r1, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800655a:	4013      	ands	r3, r2
 800655c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800655e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006560:	4319      	orrs	r1, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006568:	e017      	b.n	800659a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800656a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800656c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006580:	4013      	ands	r3, r2
 8006582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006586:	4319      	orrs	r1, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800658e:	e004      	b.n	800659a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2206      	movs	r2, #6
 8006594:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e00b      	b.n	80065b2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3730      	adds	r7, #48	@ 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b08a      	sub	sp, #40	@ 0x28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e052      	b.n	8006672 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e049      	b.n	8006672 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d101      	bne.n	80065f6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e03d      	b.n	8006672 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2204      	movs	r2, #4
 80065fa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e038      	b.n	8006672 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d104      	bne.n	8006612 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e02f      	b.n	8006672 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f107 0220 	add.w	r2, r7, #32
 8006626:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fcec 	bl	8007008 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006634:	f107 030c 	add.w	r3, r7, #12
 8006638:	461a      	mov	r2, r3
 800663a:	2100      	movs	r1, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fd13 	bl	8007068 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800664c:	4013      	ands	r3, r2
 800664e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4610      	mov	r0, r2
 8006654:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006656:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006658:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	@ 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_DMAEx_List_LinkQ+0x16>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e072      	b.n	800677c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800669c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d002      	beq.n	80066b0 <HAL_DMAEx_List_LinkQ+0x34>
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d108      	bne.n	80066c2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2240      	movs	r2, #64	@ 0x40
 80066b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e05c      	b.n	800677c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	7b1b      	ldrb	r3, [r3, #12]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d104      	bne.n	80066d6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2201      	movs	r2, #1
 80066d0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e052      	b.n	800677c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2b      	ldr	r2, [pc, #172]	@ (8006788 <HAL_DMAEx_List_LinkQ+0x10c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d022      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a29      	ldr	r2, [pc, #164]	@ (800678c <HAL_DMAEx_List_LinkQ+0x110>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01d      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a28      	ldr	r2, [pc, #160]	@ (8006790 <HAL_DMAEx_List_LinkQ+0x114>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d018      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a26      	ldr	r2, [pc, #152]	@ (8006794 <HAL_DMAEx_List_LinkQ+0x118>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a25      	ldr	r2, [pc, #148]	@ (8006798 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a23      	ldr	r2, [pc, #140]	@ (800679c <HAL_DMAEx_List_LinkQ+0x120>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a22      	ldr	r2, [pc, #136]	@ (80067a0 <HAL_DMAEx_List_LinkQ+0x124>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_DMAEx_List_LinkQ+0xaa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a20      	ldr	r2, [pc, #128]	@ (80067a4 <HAL_DMAEx_List_LinkQ+0x128>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <HAL_DMAEx_List_LinkQ+0xae>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <HAL_DMAEx_List_LinkQ+0xb0>
 800672a:	2300      	movs	r3, #0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2203      	movs	r2, #3
 8006742:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e019      	b.n	800677c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674c:	2b81      	cmp	r3, #129	@ 0x81
 800674e:	d108      	bne.n	8006762 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10d      	bne.n	8006774 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2204      	movs	r2, #4
 800675c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e00c      	b.n	800677c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2204      	movs	r2, #4
 800676e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e003      	b.n	800677c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40020650 	.word	0x40020650
 800678c:	50020650 	.word	0x50020650
 8006790:	400206d0 	.word	0x400206d0
 8006794:	500206d0 	.word	0x500206d0
 8006798:	40020750 	.word	0x40020750
 800679c:	50020750 	.word	0x50020750
 80067a0:	400207d0 	.word	0x400207d0
 80067a4:	500207d0 	.word	0x500207d0

080067a8 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	b2db      	uxtb	r3, r3
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a85      	ldr	r2, [pc, #532]	@ (80069f8 <DMA_List_Init+0x230>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f000 80a0 	beq.w	8006928 <DMA_List_Init+0x160>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a83      	ldr	r2, [pc, #524]	@ (80069fc <DMA_List_Init+0x234>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	f000 809a 	beq.w	8006928 <DMA_List_Init+0x160>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a81      	ldr	r2, [pc, #516]	@ (8006a00 <DMA_List_Init+0x238>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f000 8094 	beq.w	8006928 <DMA_List_Init+0x160>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7f      	ldr	r2, [pc, #508]	@ (8006a04 <DMA_List_Init+0x23c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	f000 808e 	beq.w	8006928 <DMA_List_Init+0x160>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a7d      	ldr	r2, [pc, #500]	@ (8006a08 <DMA_List_Init+0x240>)
 8006812:	4293      	cmp	r3, r2
 8006814:	f000 8088 	beq.w	8006928 <DMA_List_Init+0x160>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a7b      	ldr	r2, [pc, #492]	@ (8006a0c <DMA_List_Init+0x244>)
 800681e:	4293      	cmp	r3, r2
 8006820:	f000 8082 	beq.w	8006928 <DMA_List_Init+0x160>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a79      	ldr	r2, [pc, #484]	@ (8006a10 <DMA_List_Init+0x248>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d07c      	beq.n	8006928 <DMA_List_Init+0x160>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a78      	ldr	r2, [pc, #480]	@ (8006a14 <DMA_List_Init+0x24c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d077      	beq.n	8006928 <DMA_List_Init+0x160>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a76      	ldr	r2, [pc, #472]	@ (8006a18 <DMA_List_Init+0x250>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d072      	beq.n	8006928 <DMA_List_Init+0x160>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a75      	ldr	r2, [pc, #468]	@ (8006a1c <DMA_List_Init+0x254>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d06d      	beq.n	8006928 <DMA_List_Init+0x160>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a73      	ldr	r2, [pc, #460]	@ (8006a20 <DMA_List_Init+0x258>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d068      	beq.n	8006928 <DMA_List_Init+0x160>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a72      	ldr	r2, [pc, #456]	@ (8006a24 <DMA_List_Init+0x25c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d063      	beq.n	8006928 <DMA_List_Init+0x160>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a70      	ldr	r2, [pc, #448]	@ (8006a28 <DMA_List_Init+0x260>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d05e      	beq.n	8006928 <DMA_List_Init+0x160>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6f      	ldr	r2, [pc, #444]	@ (8006a2c <DMA_List_Init+0x264>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d059      	beq.n	8006928 <DMA_List_Init+0x160>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a6d      	ldr	r2, [pc, #436]	@ (8006a30 <DMA_List_Init+0x268>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d054      	beq.n	8006928 <DMA_List_Init+0x160>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6c      	ldr	r2, [pc, #432]	@ (8006a34 <DMA_List_Init+0x26c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04f      	beq.n	8006928 <DMA_List_Init+0x160>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a6a      	ldr	r2, [pc, #424]	@ (8006a38 <DMA_List_Init+0x270>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d04a      	beq.n	8006928 <DMA_List_Init+0x160>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a69      	ldr	r2, [pc, #420]	@ (8006a3c <DMA_List_Init+0x274>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d045      	beq.n	8006928 <DMA_List_Init+0x160>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a67      	ldr	r2, [pc, #412]	@ (8006a40 <DMA_List_Init+0x278>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d040      	beq.n	8006928 <DMA_List_Init+0x160>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a66      	ldr	r2, [pc, #408]	@ (8006a44 <DMA_List_Init+0x27c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d03b      	beq.n	8006928 <DMA_List_Init+0x160>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a64      	ldr	r2, [pc, #400]	@ (8006a48 <DMA_List_Init+0x280>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d036      	beq.n	8006928 <DMA_List_Init+0x160>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a63      	ldr	r2, [pc, #396]	@ (8006a4c <DMA_List_Init+0x284>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d031      	beq.n	8006928 <DMA_List_Init+0x160>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a61      	ldr	r2, [pc, #388]	@ (8006a50 <DMA_List_Init+0x288>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d02c      	beq.n	8006928 <DMA_List_Init+0x160>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a60      	ldr	r2, [pc, #384]	@ (8006a54 <DMA_List_Init+0x28c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d027      	beq.n	8006928 <DMA_List_Init+0x160>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006a58 <DMA_List_Init+0x290>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d022      	beq.n	8006928 <DMA_List_Init+0x160>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a5d      	ldr	r2, [pc, #372]	@ (8006a5c <DMA_List_Init+0x294>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d01d      	beq.n	8006928 <DMA_List_Init+0x160>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a5b      	ldr	r2, [pc, #364]	@ (8006a60 <DMA_List_Init+0x298>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d018      	beq.n	8006928 <DMA_List_Init+0x160>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a5a      	ldr	r2, [pc, #360]	@ (8006a64 <DMA_List_Init+0x29c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <DMA_List_Init+0x160>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a58      	ldr	r2, [pc, #352]	@ (8006a68 <DMA_List_Init+0x2a0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00e      	beq.n	8006928 <DMA_List_Init+0x160>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a57      	ldr	r2, [pc, #348]	@ (8006a6c <DMA_List_Init+0x2a4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d009      	beq.n	8006928 <DMA_List_Init+0x160>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a55      	ldr	r2, [pc, #340]	@ (8006a70 <DMA_List_Init+0x2a8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <DMA_List_Init+0x160>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a54      	ldr	r2, [pc, #336]	@ (8006a74 <DMA_List_Init+0x2ac>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d101      	bne.n	800692c <DMA_List_Init+0x164>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <DMA_List_Init+0x166>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	430a      	orrs	r2, r1
 800694e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2200      	movs	r2, #0
 8006978:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a36      	ldr	r2, [pc, #216]	@ (8006a58 <DMA_List_Init+0x290>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d022      	beq.n	80069ca <DMA_List_Init+0x202>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a34      	ldr	r2, [pc, #208]	@ (8006a5c <DMA_List_Init+0x294>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01d      	beq.n	80069ca <DMA_List_Init+0x202>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a33      	ldr	r2, [pc, #204]	@ (8006a60 <DMA_List_Init+0x298>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <DMA_List_Init+0x202>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a31      	ldr	r2, [pc, #196]	@ (8006a64 <DMA_List_Init+0x29c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <DMA_List_Init+0x202>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a30      	ldr	r2, [pc, #192]	@ (8006a68 <DMA_List_Init+0x2a0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <DMA_List_Init+0x202>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a2e      	ldr	r2, [pc, #184]	@ (8006a6c <DMA_List_Init+0x2a4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <DMA_List_Init+0x202>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006a70 <DMA_List_Init+0x2a8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <DMA_List_Init+0x202>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006a74 <DMA_List_Init+0x2ac>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <DMA_List_Init+0x206>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <DMA_List_Init+0x208>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2200      	movs	r2, #0
 80069e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2200      	movs	r2, #0
 80069ea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40020050 	.word	0x40020050
 80069fc:	50020050 	.word	0x50020050
 8006a00:	400200d0 	.word	0x400200d0
 8006a04:	500200d0 	.word	0x500200d0
 8006a08:	40020150 	.word	0x40020150
 8006a0c:	50020150 	.word	0x50020150
 8006a10:	400201d0 	.word	0x400201d0
 8006a14:	500201d0 	.word	0x500201d0
 8006a18:	40020250 	.word	0x40020250
 8006a1c:	50020250 	.word	0x50020250
 8006a20:	400202d0 	.word	0x400202d0
 8006a24:	500202d0 	.word	0x500202d0
 8006a28:	40020350 	.word	0x40020350
 8006a2c:	50020350 	.word	0x50020350
 8006a30:	400203d0 	.word	0x400203d0
 8006a34:	500203d0 	.word	0x500203d0
 8006a38:	40020450 	.word	0x40020450
 8006a3c:	50020450 	.word	0x50020450
 8006a40:	400204d0 	.word	0x400204d0
 8006a44:	500204d0 	.word	0x500204d0
 8006a48:	40020550 	.word	0x40020550
 8006a4c:	50020550 	.word	0x50020550
 8006a50:	400205d0 	.word	0x400205d0
 8006a54:	500205d0 	.word	0x500205d0
 8006a58:	40020650 	.word	0x40020650
 8006a5c:	50020650 	.word	0x50020650
 8006a60:	400206d0 	.word	0x400206d0
 8006a64:	500206d0 	.word	0x500206d0
 8006a68:	40020750 	.word	0x40020750
 8006a6c:	50020750 	.word	0x50020750
 8006a70:	400207d0 	.word	0x400207d0
 8006a74:	500207d0 	.word	0x500207d0

08006a78 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006a8a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006a90:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006a96:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006a9c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	051b      	lsls	r3, r3, #20
 8006ac4:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006ac8:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006ad6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6859      	ldr	r1, [r3, #4]
 8006ae6:	f240 237f 	movw	r3, #639	@ 0x27f
 8006aea:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006aec:	431a      	orrs	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afa:	d10c      	bne.n	8006b16 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d011      	beq.n	8006b2c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
 8006b14:	e00a      	b.n	8006b2c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1e:	d105      	bne.n	8006b2c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00f      	beq.n	8006b54 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b40:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006b4c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d04e      	beq.n	8006c08 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b72:	3b01      	subs	r3, #1
 8006b74:	0419      	lsls	r1, r3, #16
 8006b76:	4b67      	ldr	r3, [pc, #412]	@ (8006d14 <DMA_List_BuildNode+0x29c>)
 8006b78:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da06      	bge.n	8006b96 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	e005      	b.n	8006ba2 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da06      	bge.n	8006bb8 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	609a      	str	r2, [r3, #8]
 8006bb6:	e005      	b.n	8006bc4 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	da06      	bge.n	8006bda <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	609a      	str	r2, [r3, #8]
 8006bd8:	e005      	b.n	8006be6 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da06      	bge.n	8006bfc <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	609a      	str	r2, [r3, #8]
 8006bfa:	e005      	b.n	8006c08 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d059      	beq.n	8006cd8 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da09      	bge.n	8006c40 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c30:	425b      	negs	r3, r3
 8006c32:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	615a      	str	r2, [r3, #20]
 8006c3e:	e005      	b.n	8006c4c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c44:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da0d      	bge.n	8006c70 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	425b      	negs	r3, r3
 8006c5a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0419      	lsls	r1, r3, #16
 8006c64:	4b2c      	ldr	r3, [pc, #176]	@ (8006d18 <DMA_List_BuildNode+0x2a0>)
 8006c66:	400b      	ands	r3, r1
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	615a      	str	r2, [r3, #20]
 8006c6e:	e009      	b.n	8006c84 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c78:	0419      	lsls	r1, r3, #16
 8006c7a:	4b27      	ldr	r3, [pc, #156]	@ (8006d18 <DMA_List_BuildNode+0x2a0>)
 8006c7c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da08      	bge.n	8006c9e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c90:	425b      	negs	r3, r3
 8006c92:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	619a      	str	r2, [r3, #24]
 8006c9c:	e004      	b.n	8006ca8 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca2:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da0b      	bge.n	8006cc8 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb4:	425b      	negs	r3, r3
 8006cb6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	619a      	str	r2, [r3, #24]
 8006cc6:	e007      	b.n	8006cd8 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006cf8:	e005      	b.n	8006d06 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	07ff0000 	.word	0x07ff0000
 8006d18:	1fff0000 	.word	0x1fff0000

08006d1c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0208 	and.w	r2, r3, #8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0203 	and.w	r2, r3, #3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6a:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006d74:	0d1b      	lsrs	r3, r3, #20
 8006d76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d7a:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	4b66      	ldr	r3, [pc, #408]	@ (8006f2c <DMA_List_GetNodeConfig+0x210>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006db6:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	e013      	b.n	8006dea <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	e002      	b.n	8006dea <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e48:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006e4e:	e002      	b.n	8006e56 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d04a      	beq.n	8006f08 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e7c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006e7e:	89fa      	ldrh	r2, [r7, #14]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	0c1b      	lsrs	r3, r3, #16
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e90:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006e92:	89fa      	ldrh	r2, [r7, #14]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	425a      	negs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	425a      	negs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006eca:	89fa      	ldrh	r2, [r7, #14]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006ed8:	89fa      	ldrh	r2, [r7, #14]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eee:	425a      	negs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	da11      	bge.n	8006f20 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f00:	425a      	negs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006f06:	e00b      	b.n	8006f20 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	0c002000 	.word	0x0c002000

08006f30 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	0c1b      	lsrs	r3, r3, #16
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	e00a      	b.n	8006f72 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e004      	b.n	8006f72 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d001      	beq.n	8006f82 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	e00e      	b.n	8006fce <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e006      	b.n	8006fce <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e00b      	b.n	8006ffc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d001      	beq.n	8006ffa <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e000      	b.n	8006ffc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00c      	beq.n	800703a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4a0d      	ldr	r2, [pc, #52]	@ (8007060 <DMA_List_GetCLLRNodeInfo+0x58>)
 800702a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2207      	movs	r2, #7
 8007036:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007038:	e00b      	b.n	8007052 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4a08      	ldr	r2, [pc, #32]	@ (8007064 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007044:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2205      	movs	r2, #5
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	fe010000 	.word	0xfe010000
 8007064:	f8010000 	.word	0xf8010000

08007068 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007068:	b480      	push	{r7}
 800706a:	b089      	sub	sp, #36	@ 0x24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d142      	bne.n	8007112 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800708c:	e01d      	b.n	80070ca <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d107      	bne.n	80070a4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e00f      	b.n	80070c4 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	4413      	add	r3, r2
 80070b4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80070bc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070c0:	4013      	ands	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	3301      	adds	r3, #1
 80070c8:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d3dc      	bcc.n	800708e <DMA_List_FindNode+0x26>
 80070d4:	e029      	b.n	800712a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070e6:	4013      	ands	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e00f      	b.n	800710c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	0c1b      	lsrs	r3, r3, #16
 80070f6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4413      	add	r3, r2
 80070fc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007104:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3301      	adds	r3, #1
 8007110:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	429a      	cmp	r2, r3
 800711a:	d206      	bcs.n	800712a <DMA_List_FindNode+0xc2>
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007122:	4013      	ands	r3, r2
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	429a      	cmp	r2, r3
 8007128:	d1d5      	bne.n	80070d6 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007136:	4013      	ands	r3, r2
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	429a      	cmp	r2, r3
 800713c:	d001      	beq.n	8007142 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800713e:	2301      	movs	r3, #1
 8007140:	e02b      	b.n	800719a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	461a      	mov	r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00f      	beq.n	8007198 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	461a      	mov	r2, r3
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007184:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007188:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3724      	adds	r7, #36	@ 0x24
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b089      	sub	sp, #36	@ 0x24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80071ba:	e1ba      	b.n	8007532 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	2101      	movs	r1, #1
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	fa01 f303 	lsl.w	r3, r1, r3
 80071c8:	4013      	ands	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 81aa 	beq.w	800752c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a55      	ldr	r2, [pc, #340]	@ (8007330 <HAL_GPIO_Init+0x188>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d15d      	bne.n	800729c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80071e6:	2201      	movs	r2, #1
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f003 0201 	and.w	r2, r3, #1
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	4313      	orrs	r3, r2
 8007208:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007210:	4a48      	ldr	r2, [pc, #288]	@ (8007334 <HAL_GPIO_Init+0x18c>)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007218:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800721a:	4a46      	ldr	r2, [pc, #280]	@ (8007334 <HAL_GPIO_Init+0x18c>)
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4413      	add	r3, r2
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	08da      	lsrs	r2, r3, #3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3208      	adds	r2, #8
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	220f      	movs	r2, #15
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	4013      	ands	r3, r2
 8007248:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	220b      	movs	r2, #11
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	4313      	orrs	r3, r2
 800725c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	08da      	lsrs	r2, r3, #3
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3208      	adds	r2, #8
 8007266:	69f9      	ldr	r1, [r7, #28]
 8007268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	2203      	movs	r2, #3
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	43db      	mvns	r3, r3
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	4013      	ands	r3, r2
 8007282:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	2202      	movs	r2, #2
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	4313      	orrs	r3, r2
 8007292:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e067      	b.n	800736c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d003      	beq.n	80072ac <HAL_GPIO_Init+0x104>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b12      	cmp	r3, #18
 80072aa:	d145      	bne.n	8007338 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	08da      	lsrs	r2, r3, #3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3208      	adds	r2, #8
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	220f      	movs	r2, #15
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	43db      	mvns	r3, r3
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	4013      	ands	r3, r2
 80072ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	08da      	lsrs	r2, r3, #3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3208      	adds	r2, #8
 80072f2:	69f9      	ldr	r1, [r7, #28]
 80072f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	2203      	movs	r2, #3
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	43db      	mvns	r3, r3
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	4013      	ands	r3, r2
 800730e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 0203 	and.w	r2, r3, #3
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	4313      	orrs	r3, r2
 8007324:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e01e      	b.n	800736c <HAL_GPIO_Init+0x1c4>
 800732e:	bf00      	nop
 8007330:	46020000 	.word	0x46020000
 8007334:	0801145c 	.word	0x0801145c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	2203      	movs	r2, #3
 8007344:	fa02 f303 	lsl.w	r3, r2, r3
 8007348:	43db      	mvns	r3, r3
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	4013      	ands	r3, r2
 800734e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 0203 	and.w	r2, r3, #3
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	fa02 f303 	lsl.w	r3, r2, r3
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	4313      	orrs	r3, r2
 8007364:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d00b      	beq.n	800738c <HAL_GPIO_Init+0x1e4>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d007      	beq.n	800738c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007380:	2b11      	cmp	r3, #17
 8007382:	d003      	beq.n	800738c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b12      	cmp	r3, #18
 800738a:	d130      	bne.n	80073ee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	2203      	movs	r2, #3
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	4013      	ands	r3, r2
 80073a2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80073c2:	2201      	movs	r2, #1
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ca:	43db      	mvns	r3, r3
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	4013      	ands	r3, r2
 80073d0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	091b      	lsrs	r3, r3, #4
 80073d8:	f003 0201 	and.w	r2, r3, #1
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d017      	beq.n	8007426 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	2203      	movs	r2, #3
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	43db      	mvns	r3, r3
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	4013      	ands	r3, r2
 800740c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	4313      	orrs	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d07c      	beq.n	800752c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007432:	4a47      	ldr	r2, [pc, #284]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	089b      	lsrs	r3, r3, #2
 8007438:	3318      	adds	r3, #24
 800743a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	220f      	movs	r2, #15
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	4013      	ands	r3, r2
 8007454:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0a9a      	lsrs	r2, r3, #10
 800745a:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <HAL_GPIO_Init+0x3ac>)
 800745c:	4013      	ands	r3, r2
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	f002 0203 	and.w	r2, r2, #3
 8007464:	00d2      	lsls	r2, r2, #3
 8007466:	4093      	lsls	r3, r2
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	4313      	orrs	r3, r2
 800746c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800746e:	4938      	ldr	r1, [pc, #224]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	3318      	adds	r3, #24
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800747c:	4b34      	ldr	r3, [pc, #208]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	43db      	mvns	r3, r3
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	4013      	ands	r3, r2
 800748a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80074a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80074a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80074ca:	4a21      	ldr	r2, [pc, #132]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80074d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 80074d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	43db      	mvns	r3, r3
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	4013      	ands	r3, r2
 80074e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80074f6:	4a16      	ldr	r2, [pc, #88]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80074fe:	4b14      	ldr	r3, [pc, #80]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 8007500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007504:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	43db      	mvns	r3, r3
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	4013      	ands	r3, r2
 800750e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007524:	4a0a      	ldr	r2, [pc, #40]	@ (8007550 <HAL_GPIO_Init+0x3a8>)
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	3301      	adds	r3, #1
 8007530:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	f47f ae3d 	bne.w	80071bc <HAL_GPIO_Init+0x14>
  }
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	3724      	adds	r7, #36	@ 0x24
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	46022000 	.word	0x46022000
 8007554:	002f7f7f 	.word	0x002f7f7f

08007558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
 8007564:	4613      	mov	r3, r2
 8007566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007568:	787b      	ldrb	r3, [r7, #1]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007574:	e002      	b.n	800757c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007592:	4b0f      	ldr	r3, [pc, #60]	@ (80075d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800759e:	4a0c      	ldr	r2, [pc, #48]	@ (80075d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f814 	bl	80075d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80075ac:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80075b8:	4a05      	ldr	r2, [pc, #20]	@ (80075d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f812 	bl	80075ea <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	46022000 	.word	0x46022000

080075d4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	4603      	mov	r3, r0
 80075f2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e08d      	b.n	800772e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fa fa7a 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2224      	movs	r2, #36	@ 0x24
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d107      	bne.n	800767a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	e006      	b.n	8007688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d108      	bne.n	80076a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800769e:	605a      	str	r2, [r3, #4]
 80076a0:	e007      	b.n	80076b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80076c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69d9      	ldr	r1, [r3, #28]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1a      	ldr	r2, [r3, #32]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	461a      	mov	r2, r3
 8007744:	460b      	mov	r3, r1
 8007746:	817b      	strh	r3, [r7, #10]
 8007748:	4613      	mov	r3, r2
 800774a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b20      	cmp	r3, #32
 8007756:	f040 80da 	bne.w	800790e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_I2C_Master_Transmit+0x30>
 8007764:	2302      	movs	r3, #2
 8007766:	e0d3      	b.n	8007910 <HAL_I2C_Master_Transmit+0x1d8>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007770:	f7fb f8fc 	bl	800296c <HAL_GetTick>
 8007774:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	2319      	movs	r3, #25
 800777c:	2201      	movs	r2, #1
 800777e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fe7d 	bl	8008482 <I2C_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e0be      	b.n	8007910 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2221      	movs	r2, #33	@ 0x21
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2210      	movs	r2, #16
 800779e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	893a      	ldrh	r2, [r7, #8]
 80077b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2bff      	cmp	r3, #255	@ 0xff
 80077c2:	d90e      	bls.n	80077e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	22ff      	movs	r2, #255	@ 0xff
 80077c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	8979      	ldrh	r1, [r7, #10]
 80077d2:	4b51      	ldr	r3, [pc, #324]	@ (8007918 <HAL_I2C_Master_Transmit+0x1e0>)
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f001 f814 	bl	8008808 <I2C_TransferConfig>
 80077e0:	e06c      	b.n	80078bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	8979      	ldrh	r1, [r7, #10]
 80077f4:	4b48      	ldr	r3, [pc, #288]	@ (8007918 <HAL_I2C_Master_Transmit+0x1e0>)
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f001 f803 	bl	8008808 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007802:	e05b      	b.n	80078bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	6a39      	ldr	r1, [r7, #32]
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fe93 	bl	8008534 <I2C_WaitOnTXISFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e07b      	b.n	8007910 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d034      	beq.n	80078bc <HAL_I2C_Master_Transmit+0x184>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007856:	2b00      	cmp	r3, #0
 8007858:	d130      	bne.n	80078bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	@ 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fe0c 	bl	8008482 <I2C_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e04d      	b.n	8007910 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2bff      	cmp	r3, #255	@ 0xff
 800787c:	d90e      	bls.n	800789c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	22ff      	movs	r2, #255	@ 0xff
 8007882:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007888:	b2da      	uxtb	r2, r3
 800788a:	8979      	ldrh	r1, [r7, #10]
 800788c:	2300      	movs	r3, #0
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 ffb7 	bl	8008808 <I2C_TransferConfig>
 800789a:	e00f      	b.n	80078bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	8979      	ldrh	r1, [r7, #10]
 80078ae:	2300      	movs	r3, #0
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 ffa6 	bl	8008808 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d19e      	bne.n	8007804 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	6a39      	ldr	r1, [r7, #32]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fe79 	bl	80085c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e01a      	b.n	8007910 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2220      	movs	r2, #32
 80078e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6859      	ldr	r1, [r3, #4]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <HAL_I2C_Master_Transmit+0x1e4>)
 80078ee:	400b      	ands	r3, r1
 80078f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	e000      	b.n	8007910 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800790e:	2302      	movs	r3, #2
  }
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	80002000 	.word	0x80002000
 800791c:	fe00e800 	.word	0xfe00e800

08007920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
  }
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00f      	beq.n	8007996 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007984:	f043 0201 	orr.w	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007994:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00f      	beq.n	80079c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ae:	f043 0208 	orr.w	r2, r3, #8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80079be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00f      	beq.n	80079ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d8:	f043 0202 	orr.w	r2, r3, #2
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f003 030b 	and.w	r3, r3, #11
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fbe7 	bl	80081d0 <I2C_ITError>
  }
}
 8007a02:	bf00      	nop
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <I2C_Slave_ISR_IT+0x24>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e0e2      	b.n	8007c74 <I2C_Slave_ISR_IT+0x1ea>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007aca:	6939      	ldr	r1, [r7, #16]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f9b5 	bl	8007e3c <I2C_ITSlaveCplt>
 8007ad2:	e0ca      	b.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d04b      	beq.n	8007b76 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d046      	beq.n	8007b76 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d128      	bne.n	8007b44 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b28      	cmp	r3, #40	@ 0x28
 8007afc:	d108      	bne.n	8007b10 <I2C_Slave_ISR_IT+0x86>
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b04:	d104      	bne.n	8007b10 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b06:	6939      	ldr	r1, [r7, #16]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fb0d 	bl	8008128 <I2C_ITListenCplt>
 8007b0e:	e031      	b.n	8007b74 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b29      	cmp	r3, #41	@ 0x29
 8007b1a:	d10e      	bne.n	8007b3a <I2C_Slave_ISR_IT+0xb0>
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b22:	d00a      	beq.n	8007b3a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2210      	movs	r2, #16
 8007b2a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fc66 	bl	80083fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f926 	bl	8007d84 <I2C_ITSlaveSeqCplt>
 8007b38:	e01c      	b.n	8007b74 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007b42:	e08f      	b.n	8007c64 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b50:	f043 0204 	orr.w	r2, r3, #4
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <I2C_Slave_ISR_IT+0xdc>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b64:	d17e      	bne.n	8007c64 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fb2f 	bl	80081d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b72:	e077      	b.n	8007c64 <I2C_Slave_ISR_IT+0x1da>
 8007b74:	e076      	b.n	8007c64 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d02f      	beq.n	8007be0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d02a      	beq.n	8007be0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d018      	beq.n	8007bc6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d14b      	bne.n	8007c68 <I2C_Slave_ISR_IT+0x1de>
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bd6:	d047      	beq.n	8007c68 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f8d3 	bl	8007d84 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007bde:	e043      	b.n	8007c68 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007bf4:	6939      	ldr	r1, [r7, #16]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f840 	bl	8007c7c <I2C_ITAddrCplt>
 8007bfc:	e035      	b.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d030      	beq.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d02b      	beq.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d018      	beq.n	8007c4e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007c4c:	e00d      	b.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c54:	d002      	beq.n	8007c5c <I2C_Slave_ISR_IT+0x1d2>
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d106      	bne.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f891 	bl	8007d84 <I2C_ITSlaveSeqCplt>
 8007c62:	e002      	b.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007c64:	bf00      	nop
 8007c66:	e000      	b.n	8007c6a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007c68:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c92:	2b28      	cmp	r3, #40	@ 0x28
 8007c94:	d16a      	bne.n	8007d6c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007cb4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007cd0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d138      	bne.n	8007d4c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	09db      	lsrs	r3, r3, #7
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	89bb      	ldrh	r3, [r7, #12]
 8007ce2:	4053      	eors	r3, r2
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d11c      	bne.n	8007d28 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007cee:	897b      	ldrh	r3, [r7, #10]
 8007cf0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d13b      	bne.n	8007d7c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2208      	movs	r2, #8
 8007d10:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d1a:	89ba      	ldrh	r2, [r7, #12]
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fe86 	bl	8007a32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d26:	e029      	b.n	8007d7c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007d28:	893b      	ldrh	r3, [r7, #8]
 8007d2a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007d2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fd9b 	bl	800886c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d3e:	89ba      	ldrh	r2, [r7, #12]
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fe74 	bl	8007a32 <HAL_I2C_AddrCallback>
}
 8007d4a:	e017      	b.n	8007d7c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fd8b 	bl	800886c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007d5e:	89ba      	ldrh	r2, [r7, #12]
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff fe64 	bl	8007a32 <HAL_I2C_AddrCallback>
}
 8007d6a:	e007      	b.n	8007d7c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2208      	movs	r2, #8
 8007d72:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e00c      	b.n	8007dd2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dd0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b29      	cmp	r3, #41	@ 0x29
 8007ddc:	d112      	bne.n	8007e04 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2228      	movs	r2, #40	@ 0x28
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2221      	movs	r2, #33	@ 0x21
 8007dea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007dec:	2101      	movs	r1, #1
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fd3c 	bl	800886c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fe04 	bl	8007a0a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e02:	e017      	b.n	8007e34 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e0e:	d111      	bne.n	8007e34 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2228      	movs	r2, #40	@ 0x28
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2222      	movs	r2, #34	@ 0x22
 8007e1c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007e1e:	2102      	movs	r1, #2
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fd23 	bl	800886c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fdf5 	bl	8007a1e <HAL_I2C_SlaveRxCpltCallback>
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007e3c:	b590      	push	{r4, r7, lr}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e5e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2220      	movs	r2, #32
 8007e66:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	2b21      	cmp	r3, #33	@ 0x21
 8007e6c:	d002      	beq.n	8007e74 <I2C_ITSlaveCplt+0x38>
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	2b29      	cmp	r3, #41	@ 0x29
 8007e72:	d108      	bne.n	8007e86 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007e74:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fcf7 	bl	800886c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2221      	movs	r2, #33	@ 0x21
 8007e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e84:	e019      	b.n	8007eba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b22      	cmp	r3, #34	@ 0x22
 8007e8a:	d002      	beq.n	8007e92 <I2C_ITSlaveCplt+0x56>
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e90:	d108      	bne.n	8007ea4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e92:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fce8 	bl	800886c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2222      	movs	r2, #34	@ 0x22
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ea2:	e00a      	b.n	8007eba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	2b28      	cmp	r3, #40	@ 0x28
 8007ea8:	d107      	bne.n	8007eba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007eaa:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fcdc 	bl	800886c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ec8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6859      	ldr	r1, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b92      	ldr	r3, [pc, #584]	@ (8008120 <I2C_ITSlaveCplt+0x2e4>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa8f 	bl	80083fe <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01c      	beq.n	8007f24 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ef8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d031      	beq.n	8007f66 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f0a:	b29c      	uxth	r4, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fc49 	bl	80067a8 <HAL_DMAEx_GetFifoLevel>
 8007f16:	4603      	mov	r3, r0
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4423      	add	r3, r4
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f22:	e020      	b.n	8007f66 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01b      	beq.n	8007f66 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f4e:	b29c      	uxth	r4, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fc27 	bl	80067a8 <HAL_DMAEx_GetFifoLevel>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	4423      	add	r3, r4
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d020      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f023 0304 	bic.w	r3, r3, #4
 8007f76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc0:	f043 0204 	orr.w	r2, r3, #4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f003 0310 	and.w	r3, r3, #16
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d049      	beq.n	8008066 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d044      	beq.n	8008066 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d128      	bne.n	8008038 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b28      	cmp	r3, #40	@ 0x28
 8007ff0:	d108      	bne.n	8008004 <I2C_ITSlaveCplt+0x1c8>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ff8:	d104      	bne.n	8008004 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ffa:	6979      	ldr	r1, [r7, #20]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f893 	bl	8008128 <I2C_ITListenCplt>
 8008002:	e030      	b.n	8008066 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b29      	cmp	r3, #41	@ 0x29
 800800e:	d10e      	bne.n	800802e <I2C_ITSlaveCplt+0x1f2>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008016:	d00a      	beq.n	800802e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2210      	movs	r2, #16
 800801e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f9ec 	bl	80083fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff feac 	bl	8007d84 <I2C_ITSlaveSeqCplt>
 800802c:	e01b      	b.n	8008066 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2210      	movs	r2, #16
 8008034:	61da      	str	r2, [r3, #28]
 8008036:	e016      	b.n	8008066 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2210      	movs	r2, #16
 800803e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008044:	f043 0204 	orr.w	r2, r3, #4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <I2C_ITSlaveCplt+0x21e>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008058:	d105      	bne.n	8008066 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8b5 	bl	80081d0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008078:	2b00      	cmp	r3, #0
 800807a:	d010      	beq.n	800809e <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8a4 	bl	80081d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b28      	cmp	r3, #40	@ 0x28
 8008092:	d141      	bne.n	8008118 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f846 	bl	8008128 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800809c:	e03c      	b.n	8008118 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080a6:	d014      	beq.n	80080d2 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff fe6b 	bl	8007d84 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008124 <I2C_ITSlaveCplt+0x2e8>)
 80080b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fcbf 	bl	8007a4e <HAL_I2C_ListenCpltCallback>
}
 80080d0:	e022      	b.n	8008118 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b22      	cmp	r3, #34	@ 0x22
 80080dc:	d10e      	bne.n	80080fc <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fc92 	bl	8007a1e <HAL_I2C_SlaveRxCpltCallback>
}
 80080fa:	e00d      	b.n	8008118 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff fc79 	bl	8007a0a <HAL_I2C_SlaveTxCpltCallback>
}
 8008118:	bf00      	nop
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	bd90      	pop	{r4, r7, pc}
 8008120:	fe00e800 	.word	0xfe00e800
 8008124:	ffff0000 	.word	0xffff0000

08008128 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a25      	ldr	r2, [pc, #148]	@ (80081cc <I2C_ITListenCplt+0xa4>)
 8008136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	d022      	beq.n	80081a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008168:	b2d2      	uxtb	r2, r2
 800816a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800817a:	2b00      	cmp	r3, #0
 800817c:	d012      	beq.n	80081a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008182:	3b01      	subs	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800818e:	b29b      	uxth	r3, r3
 8008190:	3b01      	subs	r3, #1
 8008192:	b29a      	uxth	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800819c:	f043 0204 	orr.w	r2, r3, #4
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fb5f 	bl	800886c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2210      	movs	r2, #16
 80081b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fc45 	bl	8007a4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	ffff0000 	.word	0xffff0000

080081d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081e0:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a6d      	ldr	r2, [pc, #436]	@ (80083a4 <I2C_ITError+0x1d4>)
 80081ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	431a      	orrs	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b28      	cmp	r3, #40	@ 0x28
 8008206:	d005      	beq.n	8008214 <I2C_ITError+0x44>
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	2b29      	cmp	r3, #41	@ 0x29
 800820c:	d002      	beq.n	8008214 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b2a      	cmp	r3, #42	@ 0x2a
 8008212:	d10b      	bne.n	800822c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008214:	2103      	movs	r1, #3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fb28 	bl	800886c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2228      	movs	r2, #40	@ 0x28
 8008220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a60      	ldr	r2, [pc, #384]	@ (80083a8 <I2C_ITError+0x1d8>)
 8008228:	635a      	str	r2, [r3, #52]	@ 0x34
 800822a:	e030      	b.n	800828e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800822c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fb1b 	bl	800886c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8e1 	bl	80083fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b60      	cmp	r3, #96	@ 0x60
 8008246:	d01f      	beq.n	8008288 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b20      	cmp	r3, #32
 800825c:	d114      	bne.n	8008288 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b10      	cmp	r3, #16
 800826a:	d109      	bne.n	8008280 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2210      	movs	r2, #16
 8008272:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008278:	f043 0204 	orr.w	r2, r3, #4
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2220      	movs	r2, #32
 8008286:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	2b00      	cmp	r3, #0
 800829a:	d039      	beq.n	8008310 <I2C_ITError+0x140>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b11      	cmp	r3, #17
 80082a0:	d002      	beq.n	80082a8 <I2C_ITError+0xd8>
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b21      	cmp	r3, #33	@ 0x21
 80082a6:	d133      	bne.n	8008310 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082b6:	d107      	bne.n	80082c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fd fabf 	bl	8005850 <HAL_DMA_GetState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d017      	beq.n	8008308 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	4a33      	ldr	r2, [pc, #204]	@ (80083ac <I2C_ITError+0x1dc>)
 80082de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd f925 	bl	800553c <HAL_DMA_Abort_IT>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d04d      	beq.n	8008394 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008306:	e045      	b.n	8008394 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f851 	bl	80083b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800830e:	e041      	b.n	8008394 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d039      	beq.n	800838c <I2C_ITError+0x1bc>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b12      	cmp	r3, #18
 800831c:	d002      	beq.n	8008324 <I2C_ITError+0x154>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b22      	cmp	r3, #34	@ 0x22
 8008322:	d133      	bne.n	800838c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800832e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008332:	d107      	bne.n	8008344 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008342:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	4618      	mov	r0, r3
 800834a:	f7fd fa81 	bl	8005850 <HAL_DMA_GetState>
 800834e:	4603      	mov	r3, r0
 8008350:	2b01      	cmp	r3, #1
 8008352:	d017      	beq.n	8008384 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008358:	4a14      	ldr	r2, [pc, #80]	@ (80083ac <I2C_ITError+0x1dc>)
 800835a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008368:	4618      	mov	r0, r3
 800836a:	f7fd f8e7 	bl	800553c <HAL_DMA_Abort_IT>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d011      	beq.n	8008398 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800837e:	4610      	mov	r0, r2
 8008380:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008382:	e009      	b.n	8008398 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f813 	bl	80083b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800838a:	e005      	b.n	8008398 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f80f 	bl	80083b0 <I2C_TreatErrorCallback>
  }
}
 8008392:	e002      	b.n	800839a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008394:	bf00      	nop
 8008396:	e000      	b.n	800839a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008398:	bf00      	nop
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	ffff0000 	.word	0xffff0000
 80083a8:	08007a8b 	.word	0x08007a8b
 80083ac:	08008447 	.word	0x08008447

080083b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b60      	cmp	r3, #96	@ 0x60
 80083c2:	d10e      	bne.n	80083e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff fb4b 	bl	8007a76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083e0:	e009      	b.n	80083f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff fb36 	bl	8007a62 <HAL_I2C_ErrorCallback>
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b02      	cmp	r3, #2
 8008412:	d103      	bne.n	800841c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2200      	movs	r2, #0
 800841a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b01      	cmp	r3, #1
 8008428:	d007      	beq.n	800843a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f042 0201 	orr.w	r2, r2, #1
 8008438:	619a      	str	r2, [r3, #24]
  }
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008470:	2200      	movs	r2, #0
 8008472:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff ff9b 	bl	80083b0 <I2C_TreatErrorCallback>
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	603b      	str	r3, [r7, #0]
 800848e:	4613      	mov	r3, r2
 8008490:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008492:	e03b      	b.n	800850c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f8d5 	bl	8008648 <I2C_IsErrorOccurred>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e041      	b.n	800852c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d02d      	beq.n	800850c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b0:	f7fa fa5c 	bl	800296c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d302      	bcc.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d122      	bne.n	800850c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	4013      	ands	r3, r2
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	bf0c      	ite	eq
 80084d6:	2301      	moveq	r3, #1
 80084d8:	2300      	movne	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d113      	bne.n	800850c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e8:	f043 0220 	orr.w	r2, r3, #32
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e00f      	b.n	800852c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4013      	ands	r3, r2
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	bf0c      	ite	eq
 800851c:	2301      	moveq	r3, #1
 800851e:	2300      	movne	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	461a      	mov	r2, r3
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	429a      	cmp	r2, r3
 8008528:	d0b4      	beq.n	8008494 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008540:	e033      	b.n	80085aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 f87e 	bl	8008648 <I2C_IsErrorOccurred>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e031      	b.n	80085ba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d025      	beq.n	80085aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855e:	f7fa fa05 	bl	800296c <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11a      	bne.n	80085aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b02      	cmp	r3, #2
 8008580:	d013      	beq.n	80085aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008586:	f043 0220 	orr.w	r2, r3, #32
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e007      	b.n	80085ba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d1c4      	bne.n	8008542 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085ce:	e02f      	b.n	8008630 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f837 	bl	8008648 <I2C_IsErrorOccurred>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e02d      	b.n	8008640 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e4:	f7fa f9c2 	bl	800296c <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d302      	bcc.n	80085fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d11a      	bne.n	8008630 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f003 0320 	and.w	r3, r3, #32
 8008604:	2b20      	cmp	r3, #32
 8008606:	d013      	beq.n	8008630 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860c:	f043 0220 	orr.w	r2, r3, #32
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2220      	movs	r2, #32
 8008618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e007      	b.n	8008640 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b20      	cmp	r3, #32
 800863c:	d1c8      	bne.n	80085d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	@ 0x28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	d068      	beq.n	8008746 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2210      	movs	r2, #16
 800867a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800867c:	e049      	b.n	8008712 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d045      	beq.n	8008712 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008686:	f7fa f971 	bl	800296c <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <I2C_IsErrorOccurred+0x54>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d13a      	bne.n	8008712 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086be:	d121      	bne.n	8008704 <I2C_IsErrorOccurred+0xbc>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086c6:	d01d      	beq.n	8008704 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80086c8:	7cfb      	ldrb	r3, [r7, #19]
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d01a      	beq.n	8008704 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80086de:	f7fa f945 	bl	800296c <HAL_GetTick>
 80086e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086e4:	e00e      	b.n	8008704 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80086e6:	f7fa f941 	bl	800296c <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b19      	cmp	r3, #25
 80086f2:	d907      	bls.n	8008704 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	f043 0320 	orr.w	r3, r3, #32
 80086fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008702:	e006      	b.n	8008712 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b20      	cmp	r3, #32
 8008710:	d1e9      	bne.n	80086e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b20      	cmp	r3, #32
 800871e:	d003      	beq.n	8008728 <I2C_IsErrorOccurred+0xe0>
 8008720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0aa      	beq.n	800867e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2220      	movs	r2, #32
 8008736:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	f043 0304 	orr.w	r3, r3, #4
 800873e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800878a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	f043 0302 	orr.w	r3, r3, #2
 80087a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80087b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01c      	beq.n	80087f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff fe1e 	bl	80083fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6859      	ldr	r1, [r3, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <I2C_IsErrorOccurred+0x1bc>)
 80087ce:	400b      	ands	r3, r1
 80087d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	431a      	orrs	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80087f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3728      	adds	r7, #40	@ 0x28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	fe00e800 	.word	0xfe00e800

08008808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	607b      	str	r3, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	817b      	strh	r3, [r7, #10]
 8008816:	4613      	mov	r3, r2
 8008818:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800881a:	897b      	ldrh	r3, [r7, #10]
 800881c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008820:	7a7b      	ldrb	r3, [r7, #9]
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008828:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	4313      	orrs	r3, r2
 8008832:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008836:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	0d5b      	lsrs	r3, r3, #21
 8008842:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008846:	4b08      	ldr	r3, [pc, #32]	@ (8008868 <I2C_TransferConfig+0x60>)
 8008848:	430b      	orrs	r3, r1
 800884a:	43db      	mvns	r3, r3
 800884c:	ea02 0103 	and.w	r1, r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	03ff63ff 	.word	0x03ff63ff

0800886c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800887c:	887b      	ldrh	r3, [r7, #2]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00f      	beq.n	80088a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800888c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800889a:	2b28      	cmp	r3, #40	@ 0x28
 800889c:	d003      	beq.n	80088a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80088a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80088a6:	887b      	ldrh	r3, [r7, #2]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80088b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80088c4:	2b28      	cmp	r3, #40	@ 0x28
 80088c6:	d003      	beq.n	80088d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80088ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80088d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da03      	bge.n	80088e0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80088de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80088e0:	887b      	ldrh	r3, [r7, #2]
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d103      	bne.n	80088ee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80088ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80088ee:	887b      	ldrh	r3, [r7, #2]
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d103      	bne.n	80088fc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f043 0320 	orr.w	r3, r3, #32
 80088fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	2b40      	cmp	r3, #64	@ 0x40
 8008900:	d103      	bne.n	800890a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008908:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6819      	ldr	r1, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	43da      	mvns	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	400a      	ands	r2, r1
 800891a:	601a      	str	r2, [r3, #0]
}
 800891c:	bf00      	nop
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b20      	cmp	r3, #32
 800893c:	d138      	bne.n	80089b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008948:	2302      	movs	r3, #2
 800894a:	e032      	b.n	80089b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2224      	movs	r2, #36	@ 0x24
 8008958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0201 	bic.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800897a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6819      	ldr	r1, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	e000      	b.n	80089b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089b0:	2302      	movs	r3, #2
  }
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d139      	bne.n	8008a48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089de:	2302      	movs	r3, #2
 80089e0:	e033      	b.n	8008a4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	@ 0x24
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008a10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0201 	orr.w	r2, r2, #1
 8008a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e000      	b.n	8008a4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008a64:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	73fb      	strb	r3, [r7, #15]
 8008a74:	e007      	b.n	8008a86 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008a76:	4b07      	ldr	r3, [pc, #28]	@ (8008a94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f023 0204 	bic.w	r2, r3, #4
 8008a7e:	4905      	ldr	r1, [pc, #20]	@ (8008a94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	40030400 	.word	0x40030400

08008a98 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <HAL_ICACHE_Enable+0x1c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a04      	ldr	r2, [pc, #16]	@ (8008ab4 <HAL_ICACHE_Enable+0x1c>)
 8008aa2:	f043 0301 	orr.w	r3, r3, #1
 8008aa6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40030400 	.word	0x40030400

08008ab8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e0bf      	b.n	8008c4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d106      	bne.n	8008ae4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7f9 f90c 	bl	8001cfc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008afa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6999      	ldr	r1, [r3, #24]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008b10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6899      	ldr	r1, [r3, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8008c54 <HAL_LTDC_Init+0x19c>)
 8008b2c:	400b      	ands	r3, r1
 8008b2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	041b      	lsls	r3, r3, #16
 8008b36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6899      	ldr	r1, [r3, #8]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68d9      	ldr	r1, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4b3e      	ldr	r3, [pc, #248]	@ (8008c54 <HAL_LTDC_Init+0x19c>)
 8008b5a:	400b      	ands	r3, r1
 8008b5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68d9      	ldr	r1, [r3, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6919      	ldr	r1, [r3, #16]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b33      	ldr	r3, [pc, #204]	@ (8008c54 <HAL_LTDC_Init+0x19c>)
 8008b88:	400b      	ands	r3, r1
 8008b8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	041b      	lsls	r3, r3, #16
 8008b92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6919      	ldr	r1, [r3, #16]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6959      	ldr	r1, [r3, #20]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <HAL_LTDC_Init+0x19c>)
 8008bb6:	400b      	ands	r3, r1
 8008bb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6959      	ldr	r1, [r3, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008bde:	021b      	lsls	r3, r3, #8
 8008be0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008be8:	041b      	lsls	r3, r3, #16
 8008bea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0206 	orr.w	r2, r2, #6
 8008c26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	f000f800 	.word	0xf000f800

08008c58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0304 	and.w	r3, r3, #4
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d023      	beq.n	8008cc2 <HAL_LTDC_IRQHandler+0x6a>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01e      	beq.n	8008cc2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0204 	bic.w	r2, r2, #4
 8008c92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ca2:	f043 0201 	orr.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2204      	movs	r2, #4
 8008cb0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f86f 	bl	8008da0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d023      	beq.n	8008d14 <HAL_LTDC_IRQHandler+0xbc>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01e      	beq.n	8008d14 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0202 	bic.w	r2, r2, #2
 8008ce4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2202      	movs	r2, #2
 8008cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008cf4:	f043 0202 	orr.w	r2, r3, #2
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2204      	movs	r2, #4
 8008d02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f846 	bl	8008da0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01b      	beq.n	8008d56 <HAL_LTDC_IRQHandler+0xfe>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d016      	beq.n	8008d56 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0201 	bic.w	r2, r2, #1
 8008d36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f82f 	bl	8008db4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01b      	beq.n	8008d98 <HAL_LTDC_IRQHandler+0x140>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d016      	beq.n	8008d98 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 0208 	bic.w	r2, r2, #8
 8008d78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2208      	movs	r2, #8
 8008d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f818 	bl	8008dc8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ddc:	b5b0      	push	{r4, r5, r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <HAL_LTDC_ConfigLayer+0x1a>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e02c      	b.n	8008e50 <HAL_LTDC_ConfigLayer+0x74>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2134      	movs	r1, #52	@ 0x34
 8008e0c:	fb01 f303 	mul.w	r3, r1, r3
 8008e10:	4413      	add	r3, r2
 8008e12:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4614      	mov	r4, r2
 8008e1a:	461d      	mov	r5, r3
 8008e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f811 	bl	8008e58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bdb0      	pop	{r4, r5, r7, pc}

08008e58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b089      	sub	sp, #36	@ 0x24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e74:	4413      	add	r3, r2
 8008e76:	041b      	lsls	r3, r3, #16
 8008e78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	01db      	lsls	r3, r3, #7
 8008e84:	4413      	add	r3, r2
 8008e86:	3384      	adds	r3, #132	@ 0x84
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	01d2      	lsls	r2, r2, #7
 8008e94:	440a      	add	r2, r1
 8008e96:	3284      	adds	r2, #132	@ 0x84
 8008e98:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008e9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	0c1b      	lsrs	r3, r3, #16
 8008eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008eae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008eb0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	01db      	lsls	r3, r3, #7
 8008ebc:	440b      	add	r3, r1
 8008ebe:	3384      	adds	r3, #132	@ 0x84
 8008ec0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008ec6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ed6:	4413      	add	r3, r2
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	01db      	lsls	r3, r3, #7
 8008ee6:	4413      	add	r3, r2
 8008ee8:	3384      	adds	r3, #132	@ 0x84
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	01d2      	lsls	r2, r2, #7
 8008ef6:	440a      	add	r2, r1
 8008ef8:	3284      	adds	r2, #132	@ 0x84
 8008efa:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008efe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f0e:	4413      	add	r3, r2
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4619      	mov	r1, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	01db      	lsls	r3, r3, #7
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3384      	adds	r3, #132	@ 0x84
 8008f20:	4619      	mov	r1, r3
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	01db      	lsls	r3, r3, #7
 8008f32:	4413      	add	r3, r2
 8008f34:	3384      	adds	r3, #132	@ 0x84
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	01d2      	lsls	r2, r2, #7
 8008f42:	440a      	add	r2, r1
 8008f44:	3284      	adds	r2, #132	@ 0x84
 8008f46:	f023 0307 	bic.w	r3, r3, #7
 8008f4a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	01db      	lsls	r3, r3, #7
 8008f56:	4413      	add	r3, r2
 8008f58:	3384      	adds	r3, #132	@ 0x84
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	061b      	lsls	r3, r3, #24
 8008f7c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f84:	461a      	mov	r2, r3
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4619      	mov	r1, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	01db      	lsls	r3, r3, #7
 8008f98:	440b      	add	r3, r1
 8008f9a:	3384      	adds	r3, #132	@ 0x84
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	01db      	lsls	r3, r3, #7
 8008fae:	4413      	add	r3, r2
 8008fb0:	3384      	adds	r3, #132	@ 0x84
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	6812      	ldr	r2, [r2, #0]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	01d2      	lsls	r2, r2, #7
 8008fbe:	440a      	add	r2, r1
 8008fc0:	3284      	adds	r2, #132	@ 0x84
 8008fc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008fc6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	01db      	lsls	r3, r3, #7
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3384      	adds	r3, #132	@ 0x84
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	01db      	lsls	r3, r3, #7
 8008fe8:	4413      	add	r3, r2
 8008fea:	3384      	adds	r3, #132	@ 0x84
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	01d2      	lsls	r2, r2, #7
 8008ff8:	440a      	add	r2, r1
 8008ffa:	3284      	adds	r2, #132	@ 0x84
 8008ffc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009000:	f023 0307 	bic.w	r3, r3, #7
 8009004:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	69da      	ldr	r2, [r3, #28]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	6809      	ldr	r1, [r1, #0]
 8009012:	4608      	mov	r0, r1
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	01c9      	lsls	r1, r1, #7
 8009018:	4401      	add	r1, r0
 800901a:	3184      	adds	r1, #132	@ 0x84
 800901c:	4313      	orrs	r3, r2
 800901e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	01db      	lsls	r3, r3, #7
 800902a:	4413      	add	r3, r2
 800902c:	3384      	adds	r3, #132	@ 0x84
 800902e:	461a      	mov	r2, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009034:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800903e:	2304      	movs	r3, #4
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e01b      	b.n	800907c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d102      	bne.n	8009052 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800904c:	2303      	movs	r3, #3
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	e014      	b.n	800907c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d00b      	beq.n	8009072 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800905e:	2b02      	cmp	r3, #2
 8009060:	d007      	beq.n	8009072 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009066:	2b03      	cmp	r3, #3
 8009068:	d003      	beq.n	8009072 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800906e:	2b07      	cmp	r3, #7
 8009070:	d102      	bne.n	8009078 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009072:	2302      	movs	r3, #2
 8009074:	61fb      	str	r3, [r7, #28]
 8009076:	e001      	b.n	800907c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009078:	2301      	movs	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	01db      	lsls	r3, r3, #7
 8009086:	4413      	add	r3, r2
 8009088:	3384      	adds	r3, #132	@ 0x84
 800908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	4611      	mov	r1, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	01d2      	lsls	r2, r2, #7
 8009096:	440a      	add	r2, r1
 8009098:	3284      	adds	r2, #132	@ 0x84
 800909a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800909e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	fb02 f303 	mul.w	r3, r2, r3
 80090aa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6859      	ldr	r1, [r3, #4]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	1acb      	subs	r3, r1, r3
 80090b6:	69f9      	ldr	r1, [r7, #28]
 80090b8:	fb01 f303 	mul.w	r3, r1, r3
 80090bc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80090be:	68f9      	ldr	r1, [r7, #12]
 80090c0:	6809      	ldr	r1, [r1, #0]
 80090c2:	4608      	mov	r0, r1
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	01c9      	lsls	r1, r1, #7
 80090c8:	4401      	add	r1, r0
 80090ca:	3184      	adds	r1, #132	@ 0x84
 80090cc:	4313      	orrs	r3, r2
 80090ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	01db      	lsls	r3, r3, #7
 80090da:	4413      	add	r3, r2
 80090dc:	3384      	adds	r3, #132	@ 0x84
 80090de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	6812      	ldr	r2, [r2, #0]
 80090e4:	4611      	mov	r1, r2
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	01d2      	lsls	r2, r2, #7
 80090ea:	440a      	add	r2, r1
 80090ec:	3284      	adds	r2, #132	@ 0x84
 80090ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80090f2:	f023 0307 	bic.w	r3, r3, #7
 80090f6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	01db      	lsls	r3, r3, #7
 8009102:	4413      	add	r3, r2
 8009104:	3384      	adds	r3, #132	@ 0x84
 8009106:	461a      	mov	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	01db      	lsls	r3, r3, #7
 8009118:	4413      	add	r3, r2
 800911a:	3384      	adds	r3, #132	@ 0x84
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	4611      	mov	r1, r2
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	01d2      	lsls	r2, r2, #7
 8009128:	440a      	add	r2, r1
 800912a:	3284      	adds	r2, #132	@ 0x84
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6013      	str	r3, [r2, #0]
}
 8009132:	bf00      	nop
 8009134:	3724      	adds	r7, #36	@ 0x24
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b086      	sub	sp, #24
 8009142:	af02      	add	r7, sp, #8
 8009144:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e0fe      	b.n	800934e <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d106      	bne.n	800916a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f9 f841 	bl	80021ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2203      	movs	r2, #3
 800916e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f007 fe65 	bl	8010e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7c1a      	ldrb	r2, [r3, #16]
 8009184:	f88d 2000 	strb.w	r2, [sp]
 8009188:	3304      	adds	r3, #4
 800918a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800918c:	f007 fe2c 	bl	8010de8 <USB_CoreInit>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e0d5      	b.n	800934e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2100      	movs	r1, #0
 80091a8:	4618      	mov	r0, r3
 80091aa:	f007 fe5d 	bl	8010e68 <USB_SetCurrentMode>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e0c6      	b.n	800934e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e04a      	b.n	800925c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80091c6:	7bfa      	ldrb	r2, [r7, #15]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	3315      	adds	r3, #21
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80091da:	7bfa      	ldrb	r2, [r7, #15]
 80091dc:	6879      	ldr	r1, [r7, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	3314      	adds	r3, #20
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80091ee:	7bfa      	ldrb	r2, [r7, #15]
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	b298      	uxth	r0, r3
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	332e      	adds	r3, #46	@ 0x2e
 8009202:	4602      	mov	r2, r0
 8009204:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3318      	adds	r3, #24
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	331c      	adds	r3, #28
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800922e:	7bfa      	ldrb	r2, [r7, #15]
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	3320      	adds	r3, #32
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009242:	7bfa      	ldrb	r2, [r7, #15]
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	3324      	adds	r3, #36	@ 0x24
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	3301      	adds	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	7bfa      	ldrb	r2, [r7, #15]
 8009262:	429a      	cmp	r2, r3
 8009264:	d3af      	bcc.n	80091c6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
 800926a:	e044      	b.n	80092f6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800926c:	7bfa      	ldrb	r2, [r7, #15]
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009282:	7bfa      	ldrb	r2, [r7, #15]
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	4613      	mov	r3, r2
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009294:	7bfa      	ldrb	r2, [r7, #15]
 8009296:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009298:	7bfa      	ldrb	r2, [r7, #15]
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4613      	mov	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80092aa:	2200      	movs	r2, #0
 80092ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80092ae:	7bfa      	ldrb	r2, [r7, #15]
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80092c4:	7bfa      	ldrb	r2, [r7, #15]
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80092da:	7bfa      	ldrb	r2, [r7, #15]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	440b      	add	r3, r1
 80092e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	3301      	adds	r3, #1
 80092f4:	73fb      	strb	r3, [r7, #15]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	7bfa      	ldrb	r2, [r7, #15]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d3b5      	bcc.n	800926c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	7c1a      	ldrb	r2, [r3, #16]
 8009308:	f88d 2000 	strb.w	r2, [sp]
 800930c:	3304      	adds	r3, #4
 800930e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009310:	f007 fdf6 	bl	8010f00 <USB_DevInit>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e013      	b.n	800934e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	7b1b      	ldrb	r3, [r3, #12]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d102      	bne.n	8009342 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f80a 	bl	8009356 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f007 ffc3 	bl	80112d2 <USB_DevDisconnect>

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009388:	f043 0303 	orr.w	r3, r3, #3
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
	...

080093a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80093a4:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a8:	4a04      	ldr	r2, [pc, #16]	@ (80093bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80093aa:	f043 0301 	orr.w	r3, r3, #1
 80093ae:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80093b0:	bf00      	nop
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	46020800 	.word	0x46020800

080093c0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80093c8:	4b39      	ldr	r3, [pc, #228]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093d0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d10b      	bne.n	80093f2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e0:	d905      	bls.n	80093ee <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80093e2:	4b33      	ldr	r3, [pc, #204]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	4a32      	ldr	r2, [pc, #200]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093ec:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	e057      	b.n	80094a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093f8:	d90a      	bls.n	8009410 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80093fa:	4b2d      	ldr	r3, [pc, #180]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4313      	orrs	r3, r2
 8009406:	4a2a      	ldr	r2, [pc, #168]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800940c:	60d3      	str	r3, [r2, #12]
 800940e:	e007      	b.n	8009420 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009410:	4b27      	ldr	r3, [pc, #156]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009418:	4925      	ldr	r1, [pc, #148]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4313      	orrs	r3, r2
 800941e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009420:	4b24      	ldr	r3, [pc, #144]	@ (80094b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a24      	ldr	r2, [pc, #144]	@ (80094b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009426:	fba2 2303 	umull	r2, r3, r2, r3
 800942a:	099b      	lsrs	r3, r3, #6
 800942c:	2232      	movs	r2, #50	@ 0x32
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	4a21      	ldr	r2, [pc, #132]	@ (80094b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009434:	fba2 2303 	umull	r2, r3, r2, r3
 8009438:	099b      	lsrs	r3, r3, #6
 800943a:	3301      	adds	r3, #1
 800943c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800943e:	e002      	b.n	8009446 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3b01      	subs	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009446:	4b1a      	ldr	r3, [pc, #104]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1f3      	bne.n	8009440 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01b      	beq.n	8009496 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800945e:	4b15      	ldr	r3, [pc, #84]	@ (80094b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a15      	ldr	r2, [pc, #84]	@ (80094b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	099b      	lsrs	r3, r3, #6
 800946a:	2232      	movs	r2, #50	@ 0x32
 800946c:	fb02 f303 	mul.w	r3, r2, r3
 8009470:	4a11      	ldr	r2, [pc, #68]	@ (80094b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	099b      	lsrs	r3, r3, #6
 8009478:	3301      	adds	r3, #1
 800947a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800947c:	e002      	b.n	8009484 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3b01      	subs	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009484:	4b0a      	ldr	r3, [pc, #40]	@ (80094b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1f3      	bne.n	800947e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e000      	b.n	80094a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	46020800 	.word	0x46020800
 80094b4:	20000000 	.word	0x20000000
 80094b8:	10624dd3 	.word	0x10624dd3

080094bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80094c0:	4b04      	ldr	r3, [pc, #16]	@ (80094d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	46020800 	.word	0x46020800

080094d8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80094e0:	4b22      	ldr	r3, [pc, #136]	@ (800956c <HAL_PWREx_ConfigSupply+0x94>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a22      	ldr	r2, [pc, #136]	@ (8009570 <HAL_PWREx_ConfigSupply+0x98>)
 80094e6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ea:	099b      	lsrs	r3, r3, #6
 80094ec:	2232      	movs	r2, #50	@ 0x32
 80094ee:	fb02 f303 	mul.w	r3, r2, r3
 80094f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009570 <HAL_PWREx_ConfigSupply+0x98>)
 80094f4:	fba2 2303 	umull	r2, r3, r2, r3
 80094f8:	099b      	lsrs	r3, r3, #6
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d113      	bne.n	800952c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009504:	4b1b      	ldr	r3, [pc, #108]	@ (8009574 <HAL_PWREx_ConfigSupply+0x9c>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	4a1a      	ldr	r2, [pc, #104]	@ (8009574 <HAL_PWREx_ConfigSupply+0x9c>)
 800950a:	f023 0302 	bic.w	r3, r3, #2
 800950e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009510:	e002      	b.n	8009518 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3b01      	subs	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009518:	4b16      	ldr	r3, [pc, #88]	@ (8009574 <HAL_PWREx_ConfigSupply+0x9c>)
 800951a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b02      	cmp	r3, #2
 8009522:	d116      	bne.n	8009552 <HAL_PWREx_ConfigSupply+0x7a>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1f3      	bne.n	8009512 <HAL_PWREx_ConfigSupply+0x3a>
 800952a:	e012      	b.n	8009552 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800952c:	4b11      	ldr	r3, [pc, #68]	@ (8009574 <HAL_PWREx_ConfigSupply+0x9c>)
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	4a10      	ldr	r2, [pc, #64]	@ (8009574 <HAL_PWREx_ConfigSupply+0x9c>)
 8009532:	f043 0302 	orr.w	r3, r3, #2
 8009536:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009538:	e002      	b.n	8009540 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3b01      	subs	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009540:	4b0c      	ldr	r3, [pc, #48]	@ (8009574 <HAL_PWREx_ConfigSupply+0x9c>)
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <HAL_PWREx_ConfigSupply+0x7a>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f3      	bne.n	800953a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e000      	b.n	800955e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20000000 	.word	0x20000000
 8009570:	10624dd3 	.word	0x10624dd3
 8009574:	46020800 	.word	0x46020800

08009578 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800957c:	4b05      	ldr	r3, [pc, #20]	@ (8009594 <HAL_PWREx_EnableVddUSB+0x1c>)
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4a04      	ldr	r2, [pc, #16]	@ (8009594 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009586:	6113      	str	r3, [r2, #16]
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	46020800 	.word	0x46020800

08009598 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	4a04      	ldr	r2, [pc, #16]	@ (80095b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80095a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80095a6:	6113      	str	r3, [r2, #16]
}
 80095a8:	bf00      	nop
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	46020800 	.word	0x46020800

080095b8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <HAL_PWREx_EnableVddA+0x1c>)
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	4a04      	ldr	r2, [pc, #16]	@ (80095d4 <HAL_PWREx_EnableVddA+0x1c>)
 80095c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c6:	6113      	str	r3, [r2, #16]
}
 80095c8:	bf00      	nop
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	46020800 	.word	0x46020800

080095d8 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80095de:	f7ff ff6d 	bl	80094bc <HAL_PWREx_GetVoltageRange>
 80095e2:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095ea:	d003      	beq.n	80095f4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095f2:	d107      	bne.n	8009604 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80095f4:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	4a05      	ldr	r2, [pc, #20]	@ (8009610 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80095fa:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80095fe:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	e000      	b.n	8009606 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	46020800 	.word	0x46020800

08009614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08e      	sub	sp, #56	@ 0x38
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800961c:	2300      	movs	r3, #0
 800961e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	f000 bec8 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800962e:	4b99      	ldr	r3, [pc, #612]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f003 030c 	and.w	r3, r3, #12
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009638:	4b96      	ldr	r3, [pc, #600]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800963a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963c:	f003 0303 	and.w	r3, r3, #3
 8009640:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0310 	and.w	r3, r3, #16
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 816c 	beq.w	8009928 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	2b00      	cmp	r3, #0
 8009654:	d007      	beq.n	8009666 <HAL_RCC_OscConfig+0x52>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2b0c      	cmp	r3, #12
 800965a:	f040 80de 	bne.w	800981a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800965e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009660:	2b01      	cmp	r3, #1
 8009662:	f040 80da 	bne.w	800981a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f000 bea5 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009678:	4b86      	ldr	r3, [pc, #536]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d004      	beq.n	800968e <HAL_RCC_OscConfig+0x7a>
 8009684:	4b83      	ldr	r3, [pc, #524]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800968c:	e005      	b.n	800969a <HAL_RCC_OscConfig+0x86>
 800968e:	4b81      	ldr	r3, [pc, #516]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009694:	041b      	lsls	r3, r3, #16
 8009696:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800969a:	4293      	cmp	r3, r2
 800969c:	d255      	bcs.n	800974a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 f9d9 	bl	800aa60 <RCC_SetFlashLatencyFromMSIRange>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f000 be82 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80096ba:	4b76      	ldr	r3, [pc, #472]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	4a75      	ldr	r2, [pc, #468]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80096c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80096c4:	6093      	str	r3, [r2, #8]
 80096c6:	4b73      	ldr	r3, [pc, #460]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d2:	4970      	ldr	r1, [pc, #448]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80096e0:	d309      	bcc.n	80096f6 <HAL_RCC_OscConfig+0xe2>
 80096e2:	4b6c      	ldr	r3, [pc, #432]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f023 021f 	bic.w	r2, r3, #31
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	4969      	ldr	r1, [pc, #420]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60cb      	str	r3, [r1, #12]
 80096f4:	e07e      	b.n	80097f4 <HAL_RCC_OscConfig+0x1e0>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da0a      	bge.n	8009714 <HAL_RCC_OscConfig+0x100>
 80096fe:	4b65      	ldr	r3, [pc, #404]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	015b      	lsls	r3, r3, #5
 800970c:	4961      	ldr	r1, [pc, #388]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800970e:	4313      	orrs	r3, r2
 8009710:	60cb      	str	r3, [r1, #12]
 8009712:	e06f      	b.n	80097f4 <HAL_RCC_OscConfig+0x1e0>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971c:	d30a      	bcc.n	8009734 <HAL_RCC_OscConfig+0x120>
 800971e:	4b5d      	ldr	r3, [pc, #372]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	029b      	lsls	r3, r3, #10
 800972c:	4959      	ldr	r1, [pc, #356]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800972e:	4313      	orrs	r3, r2
 8009730:	60cb      	str	r3, [r1, #12]
 8009732:	e05f      	b.n	80097f4 <HAL_RCC_OscConfig+0x1e0>
 8009734:	4b57      	ldr	r3, [pc, #348]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	03db      	lsls	r3, r3, #15
 8009742:	4954      	ldr	r1, [pc, #336]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009744:	4313      	orrs	r3, r2
 8009746:	60cb      	str	r3, [r1, #12]
 8009748:	e054      	b.n	80097f4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800974a:	4b52      	ldr	r3, [pc, #328]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	4a51      	ldr	r2, [pc, #324]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009750:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009754:	6093      	str	r3, [r2, #8]
 8009756:	4b4f      	ldr	r3, [pc, #316]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009762:	494c      	ldr	r1, [pc, #304]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009764:	4313      	orrs	r3, r2
 8009766:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009770:	d309      	bcc.n	8009786 <HAL_RCC_OscConfig+0x172>
 8009772:	4b48      	ldr	r3, [pc, #288]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f023 021f 	bic.w	r2, r3, #31
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	4945      	ldr	r1, [pc, #276]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009780:	4313      	orrs	r3, r2
 8009782:	60cb      	str	r3, [r1, #12]
 8009784:	e028      	b.n	80097d8 <HAL_RCC_OscConfig+0x1c4>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	da0a      	bge.n	80097a4 <HAL_RCC_OscConfig+0x190>
 800978e:	4b41      	ldr	r3, [pc, #260]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	015b      	lsls	r3, r3, #5
 800979c:	493d      	ldr	r1, [pc, #244]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	60cb      	str	r3, [r1, #12]
 80097a2:	e019      	b.n	80097d8 <HAL_RCC_OscConfig+0x1c4>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ac:	d30a      	bcc.n	80097c4 <HAL_RCC_OscConfig+0x1b0>
 80097ae:	4b39      	ldr	r3, [pc, #228]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	029b      	lsls	r3, r3, #10
 80097bc:	4935      	ldr	r1, [pc, #212]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	60cb      	str	r3, [r1, #12]
 80097c2:	e009      	b.n	80097d8 <HAL_RCC_OscConfig+0x1c4>
 80097c4:	4b33      	ldr	r3, [pc, #204]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	03db      	lsls	r3, r3, #15
 80097d2:	4930      	ldr	r1, [pc, #192]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10a      	bne.n	80097f4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 f93c 	bl	800aa60 <RCC_SetFlashLatencyFromMSIRange>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f000 bde5 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80097f4:	f001 f8de 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80097f8:	4b27      	ldr	r3, [pc, #156]	@ (8009898 <HAL_RCC_OscConfig+0x284>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f9 f82b 	bl	8002858 <HAL_InitTick>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 808a 	beq.w	8009926 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009816:	f000 bdd2 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d066      	beq.n	80098f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009822:	4b1c      	ldr	r3, [pc, #112]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a1b      	ldr	r2, [pc, #108]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800982e:	f7f9 f89d 	bl	800296c <HAL_GetTick>
 8009832:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009834:	e009      	b.n	800984a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009836:	f7f9 f899 	bl	800296c <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d902      	bls.n	800984a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	f000 bdba 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800984a:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0ef      	beq.n	8009836 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	4a0e      	ldr	r2, [pc, #56]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800985c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009860:	6093      	str	r3, [r2, #8]
 8009862:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986e:	4909      	ldr	r1, [pc, #36]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009870:	4313      	orrs	r3, r2
 8009872:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009878:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800987c:	d30e      	bcc.n	800989c <HAL_RCC_OscConfig+0x288>
 800987e:	4b05      	ldr	r3, [pc, #20]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f023 021f 	bic.w	r2, r3, #31
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	4902      	ldr	r1, [pc, #8]	@ (8009894 <HAL_RCC_OscConfig+0x280>)
 800988c:	4313      	orrs	r3, r2
 800988e:	60cb      	str	r3, [r1, #12]
 8009890:	e04a      	b.n	8009928 <HAL_RCC_OscConfig+0x314>
 8009892:	bf00      	nop
 8009894:	46020c00 	.word	0x46020c00
 8009898:	20000004 	.word	0x20000004
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da0a      	bge.n	80098ba <HAL_RCC_OscConfig+0x2a6>
 80098a4:	4b98      	ldr	r3, [pc, #608]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	015b      	lsls	r3, r3, #5
 80098b2:	4995      	ldr	r1, [pc, #596]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60cb      	str	r3, [r1, #12]
 80098b8:	e036      	b.n	8009928 <HAL_RCC_OscConfig+0x314>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c2:	d30a      	bcc.n	80098da <HAL_RCC_OscConfig+0x2c6>
 80098c4:	4b90      	ldr	r3, [pc, #576]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	029b      	lsls	r3, r3, #10
 80098d2:	498d      	ldr	r1, [pc, #564]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60cb      	str	r3, [r1, #12]
 80098d8:	e026      	b.n	8009928 <HAL_RCC_OscConfig+0x314>
 80098da:	4b8b      	ldr	r3, [pc, #556]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	03db      	lsls	r3, r3, #15
 80098e8:	4987      	ldr	r1, [pc, #540]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60cb      	str	r3, [r1, #12]
 80098ee:	e01b      	b.n	8009928 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80098f0:	4b85      	ldr	r3, [pc, #532]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a84      	ldr	r2, [pc, #528]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80098f6:	f023 0301 	bic.w	r3, r3, #1
 80098fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80098fc:	f7f9 f836 	bl	800296c <HAL_GetTick>
 8009900:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009902:	e009      	b.n	8009918 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009904:	f7f9 f832 	bl	800296c <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d902      	bls.n	8009918 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	f000 bd53 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009918:	4b7b      	ldr	r3, [pc, #492]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1ef      	bne.n	8009904 <HAL_RCC_OscConfig+0x2f0>
 8009924:	e000      	b.n	8009928 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009926:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 808b 	beq.w	8009a4c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	2b08      	cmp	r3, #8
 800993a:	d005      	beq.n	8009948 <HAL_RCC_OscConfig+0x334>
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	2b0c      	cmp	r3, #12
 8009940:	d109      	bne.n	8009956 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	2b03      	cmp	r3, #3
 8009946:	d106      	bne.n	8009956 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d17d      	bne.n	8009a4c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	f000 bd34 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800995e:	d106      	bne.n	800996e <HAL_RCC_OscConfig+0x35a>
 8009960:	4b69      	ldr	r3, [pc, #420]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a68      	ldr	r2, [pc, #416]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	e041      	b.n	80099f2 <HAL_RCC_OscConfig+0x3de>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009976:	d112      	bne.n	800999e <HAL_RCC_OscConfig+0x38a>
 8009978:	4b63      	ldr	r3, [pc, #396]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a62      	ldr	r2, [pc, #392]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800997e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	4b60      	ldr	r3, [pc, #384]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a5f      	ldr	r2, [pc, #380]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 800998a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	4b5d      	ldr	r3, [pc, #372]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a5c      	ldr	r2, [pc, #368]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	e029      	b.n	80099f2 <HAL_RCC_OscConfig+0x3de>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80099a6:	d112      	bne.n	80099ce <HAL_RCC_OscConfig+0x3ba>
 80099a8:	4b57      	ldr	r3, [pc, #348]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a56      	ldr	r2, [pc, #344]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	4b54      	ldr	r3, [pc, #336]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a53      	ldr	r2, [pc, #332]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	4b51      	ldr	r3, [pc, #324]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a50      	ldr	r2, [pc, #320]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	e011      	b.n	80099f2 <HAL_RCC_OscConfig+0x3de>
 80099ce:	4b4e      	ldr	r3, [pc, #312]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a4d      	ldr	r2, [pc, #308]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	4b4b      	ldr	r3, [pc, #300]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a4a      	ldr	r2, [pc, #296]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	4b48      	ldr	r3, [pc, #288]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a47      	ldr	r2, [pc, #284]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 80099ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80099f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d014      	beq.n	8009a24 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80099fa:	f7f8 ffb7 	bl	800296c <HAL_GetTick>
 80099fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a00:	e009      	b.n	8009a16 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a02:	f7f8 ffb3 	bl	800296c <HAL_GetTick>
 8009a06:	4602      	mov	r2, r0
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b64      	cmp	r3, #100	@ 0x64
 8009a0e:	d902      	bls.n	8009a16 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	f000 bcd4 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a16:	4b3c      	ldr	r3, [pc, #240]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0ef      	beq.n	8009a02 <HAL_RCC_OscConfig+0x3ee>
 8009a22:	e013      	b.n	8009a4c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009a24:	f7f8 ffa2 	bl	800296c <HAL_GetTick>
 8009a28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a2a:	e009      	b.n	8009a40 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a2c:	f7f8 ff9e 	bl	800296c <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b64      	cmp	r3, #100	@ 0x64
 8009a38:	d902      	bls.n	8009a40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	f000 bcbf 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a40:	4b31      	ldr	r3, [pc, #196]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1ef      	bne.n	8009a2c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d05f      	beq.n	8009b18 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d005      	beq.n	8009a6a <HAL_RCC_OscConfig+0x456>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a60:	2b0c      	cmp	r3, #12
 8009a62:	d114      	bne.n	8009a8e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d111      	bne.n	8009a8e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f000 bca3 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009a78:	4b23      	ldr	r3, [pc, #140]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	4920      	ldr	r1, [pc, #128]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009a8c:	e044      	b.n	8009b18 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d024      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009a96:	4b1c      	ldr	r3, [pc, #112]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009aa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009aa2:	f7f8 ff63 	bl	800296c <HAL_GetTick>
 8009aa6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009aa8:	e009      	b.n	8009abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aaa:	f7f8 ff5f 	bl	800296c <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d902      	bls.n	8009abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	f000 bc80 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009abe:	4b12      	ldr	r3, [pc, #72]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0ef      	beq.n	8009aaa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009aca:	4b0f      	ldr	r3, [pc, #60]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	490b      	ldr	r1, [pc, #44]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	610b      	str	r3, [r1, #16]
 8009ade:	e01b      	b.n	8009b18 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009ae0:	4b09      	ldr	r3, [pc, #36]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a08      	ldr	r2, [pc, #32]	@ (8009b08 <HAL_RCC_OscConfig+0x4f4>)
 8009ae6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009aec:	f7f8 ff3e 	bl	800296c <HAL_GetTick>
 8009af0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009af2:	e00b      	b.n	8009b0c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009af4:	f7f8 ff3a 	bl	800296c <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d904      	bls.n	8009b0c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	f000 bc5b 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
 8009b08:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b0c:	4baf      	ldr	r3, [pc, #700]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ed      	bne.n	8009af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0308 	and.w	r3, r3, #8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80c8 	beq.w	8009cb6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b2c:	4ba7      	ldr	r3, [pc, #668]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b32:	f003 0304 	and.w	r3, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d111      	bne.n	8009b5e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b3a:	4ba4      	ldr	r3, [pc, #656]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b40:	4aa2      	ldr	r2, [pc, #648]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009b42:	f043 0304 	orr.w	r3, r3, #4
 8009b46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009b4a:	4ba0      	ldr	r3, [pc, #640]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d119      	bne.n	8009b9e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009b6a:	4b99      	ldr	r3, [pc, #612]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b6e:	4a98      	ldr	r2, [pc, #608]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009b70:	f043 0301 	orr.w	r3, r3, #1
 8009b74:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b76:	f7f8 fef9 	bl	800296c <HAL_GetTick>
 8009b7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b7c:	e009      	b.n	8009b92 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b7e:	f7f8 fef5 	bl	800296c <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d902      	bls.n	8009b92 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	f000 bc16 	b.w	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b92:	4b8f      	ldr	r3, [pc, #572]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0ef      	beq.n	8009b7e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d05f      	beq.n	8009c66 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009ba6:	4b89      	ldr	r3, [pc, #548]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bac:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d037      	beq.n	8009c2c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d006      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e3f4      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01b      	beq.n	8009c16 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009bde:	4b7b      	ldr	r3, [pc, #492]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009be4:	4a79      	ldr	r2, [pc, #484]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009be6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009bee:	f7f8 febd 	bl	800296c <HAL_GetTick>
 8009bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009bf4:	e008      	b.n	8009c08 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bf6:	f7f8 feb9 	bl	800296c <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	2b05      	cmp	r3, #5
 8009c02:	d901      	bls.n	8009c08 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009c04:	2303      	movs	r3, #3
 8009c06:	e3da      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009c08:	4b70      	ldr	r3, [pc, #448]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1ef      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009c16:	4b6d      	ldr	r3, [pc, #436]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c1c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	4969      	ldr	r1, [pc, #420]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009c2c:	4b67      	ldr	r3, [pc, #412]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c32:	4a66      	ldr	r2, [pc, #408]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009c3c:	f7f8 fe96 	bl	800296c <HAL_GetTick>
 8009c40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009c42:	e008      	b.n	8009c56 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c44:	f7f8 fe92 	bl	800296c <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e3b3      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009c56:	4b5d      	ldr	r3, [pc, #372]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0ef      	beq.n	8009c44 <HAL_RCC_OscConfig+0x630>
 8009c64:	e01b      	b.n	8009c9e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009c66:	4b59      	ldr	r3, [pc, #356]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c6c:	4a57      	ldr	r2, [pc, #348]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c6e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009c76:	f7f8 fe79 	bl	800296c <HAL_GetTick>
 8009c7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009c7c:	e008      	b.n	8009c90 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c7e:	f7f8 fe75 	bl	800296c <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	2b05      	cmp	r3, #5
 8009c8a:	d901      	bls.n	8009c90 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e396      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009c90:	4b4e      	ldr	r3, [pc, #312]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1ef      	bne.n	8009c7e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c9e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d107      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ca6:	4b49      	ldr	r3, [pc, #292]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cac:	4a47      	ldr	r2, [pc, #284]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009cae:	f023 0304 	bic.w	r3, r3, #4
 8009cb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0304 	and.w	r3, r3, #4
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 8111 	beq.w	8009ee6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cca:	4b40      	ldr	r3, [pc, #256]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d111      	bne.n	8009cfc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cde:	4a3b      	ldr	r2, [pc, #236]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009ce0:	f043 0304 	orr.w	r3, r3, #4
 8009ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ce8:	4b38      	ldr	r3, [pc, #224]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009cfc:	4b34      	ldr	r3, [pc, #208]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d118      	bne.n	8009d3a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009d08:	4b31      	ldr	r3, [pc, #196]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0c:	4a30      	ldr	r2, [pc, #192]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d14:	f7f8 fe2a 	bl	800296c <HAL_GetTick>
 8009d18:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009d1a:	e008      	b.n	8009d2e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d1c:	f7f8 fe26 	bl	800296c <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d901      	bls.n	8009d2e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e347      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009d2e:	4b28      	ldr	r3, [pc, #160]	@ (8009dd0 <HAL_RCC_OscConfig+0x7bc>)
 8009d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0f0      	beq.n	8009d1c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d01f      	beq.n	8009d86 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009d52:	4b1e      	ldr	r3, [pc, #120]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d58:	4a1c      	ldr	r2, [pc, #112]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d5a:	f043 0304 	orr.w	r3, r3, #4
 8009d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d62:	4b1a      	ldr	r3, [pc, #104]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d68:	4a18      	ldr	r2, [pc, #96]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009d72:	e018      	b.n	8009da6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d74:	4b15      	ldr	r3, [pc, #84]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d7a:	4a14      	ldr	r2, [pc, #80]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009d84:	e00f      	b.n	8009da6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009d86:	4b11      	ldr	r3, [pc, #68]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009d96:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8009dcc <HAL_RCC_OscConfig+0x7b8>)
 8009d9e:	f023 0304 	bic.w	r3, r3, #4
 8009da2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d057      	beq.n	8009e5e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009dae:	f7f8 fddd 	bl	800296c <HAL_GetTick>
 8009db2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009db4:	e00e      	b.n	8009dd4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db6:	f7f8 fdd9 	bl	800296c <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d905      	bls.n	8009dd4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e2f8      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
 8009dcc:	46020c00 	.word	0x46020c00
 8009dd0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dd4:	4b9c      	ldr	r3, [pc, #624]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0e9      	beq.n	8009db6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01b      	beq.n	8009e26 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009dee:	4b96      	ldr	r3, [pc, #600]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009df4:	4a94      	ldr	r2, [pc, #592]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009dfe:	e00a      	b.n	8009e16 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e00:	f7f8 fdb4 	bl	800296c <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d901      	bls.n	8009e16 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e2d3      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009e16:	4b8c      	ldr	r3, [pc, #560]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0ed      	beq.n	8009e00 <HAL_RCC_OscConfig+0x7ec>
 8009e24:	e053      	b.n	8009ece <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009e26:	4b88      	ldr	r3, [pc, #544]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e2c:	4a86      	ldr	r2, [pc, #536]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009e36:	e00a      	b.n	8009e4e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e38:	f7f8 fd98 	bl	800296c <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e2b7      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009e4e:	4b7e      	ldr	r3, [pc, #504]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1ed      	bne.n	8009e38 <HAL_RCC_OscConfig+0x824>
 8009e5c:	e037      	b.n	8009ece <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009e5e:	f7f8 fd85 	bl	800296c <HAL_GetTick>
 8009e62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e64:	e00a      	b.n	8009e7c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e66:	f7f8 fd81 	bl	800296c <HAL_GetTick>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d901      	bls.n	8009e7c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e2a0      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e7c:	4b72      	ldr	r3, [pc, #456]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1ed      	bne.n	8009e66 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009e8a:	4b6f      	ldr	r3, [pc, #444]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01a      	beq.n	8009ece <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009e98:	4b6b      	ldr	r3, [pc, #428]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e9e:	4a6a      	ldr	r2, [pc, #424]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ea4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009ea8:	e00a      	b.n	8009ec0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009eaa:	f7f8 fd5f 	bl	800296c <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d901      	bls.n	8009ec0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e27e      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009ec0:	4b61      	ldr	r3, [pc, #388]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ec6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1ed      	bne.n	8009eaa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ece:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d107      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ed6:	4b5c      	ldr	r3, [pc, #368]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009edc:	4a5a      	ldr	r2, [pc, #360]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ede:	f023 0304 	bic.w	r3, r3, #4
 8009ee2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d036      	beq.n	8009f60 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d019      	beq.n	8009f2e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009efa:	4b53      	ldr	r3, [pc, #332]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a52      	ldr	r2, [pc, #328]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009f04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009f06:	f7f8 fd31 	bl	800296c <HAL_GetTick>
 8009f0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009f0c:	e008      	b.n	8009f20 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f0e:	f7f8 fd2d 	bl	800296c <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d901      	bls.n	8009f20 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e24e      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009f20:	4b49      	ldr	r3, [pc, #292]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0f0      	beq.n	8009f0e <HAL_RCC_OscConfig+0x8fa>
 8009f2c:	e018      	b.n	8009f60 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009f2e:	4b46      	ldr	r3, [pc, #280]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a45      	ldr	r2, [pc, #276]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009f3a:	f7f8 fd17 	bl	800296c <HAL_GetTick>
 8009f3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009f40:	e008      	b.n	8009f54 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f42:	f7f8 fd13 	bl	800296c <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d901      	bls.n	8009f54 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e234      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009f54:	4b3c      	ldr	r3, [pc, #240]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1f0      	bne.n	8009f42 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d036      	beq.n	8009fda <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d019      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009f74:	4b34      	ldr	r3, [pc, #208]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a33      	ldr	r2, [pc, #204]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009f80:	f7f8 fcf4 	bl	800296c <HAL_GetTick>
 8009f84:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009f88:	f7f8 fcf0 	bl	800296c <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e211      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009f9a:	4b2b      	ldr	r3, [pc, #172]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0x974>
 8009fa6:	e018      	b.n	8009fda <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009fa8:	4b27      	ldr	r3, [pc, #156]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a26      	ldr	r2, [pc, #152]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009fb4:	f7f8 fcda 	bl	800296c <HAL_GetTick>
 8009fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009fbc:	f7f8 fcd6 	bl	800296c <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e1f7      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009fce:	4b1e      	ldr	r3, [pc, #120]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1f0      	bne.n	8009fbc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d07f      	beq.n	800a0e6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d062      	beq.n	800a0b4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009fee:	4b16      	ldr	r3, [pc, #88]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ff8:	6093      	str	r3, [r2, #8]
 8009ffa:	4b13      	ldr	r3, [pc, #76]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	4910      	ldr	r1, [pc, #64]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a010:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a014:	d309      	bcc.n	800a02a <HAL_RCC_OscConfig+0xa16>
 800a016:	4b0c      	ldr	r3, [pc, #48]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f023 021f 	bic.w	r2, r3, #31
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	4909      	ldr	r1, [pc, #36]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 800a024:	4313      	orrs	r3, r2
 800a026:	60cb      	str	r3, [r1, #12]
 800a028:	e02a      	b.n	800a080 <HAL_RCC_OscConfig+0xa6c>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da0c      	bge.n	800a04c <HAL_RCC_OscConfig+0xa38>
 800a032:	4b05      	ldr	r3, [pc, #20]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	015b      	lsls	r3, r3, #5
 800a040:	4901      	ldr	r1, [pc, #4]	@ (800a048 <HAL_RCC_OscConfig+0xa34>)
 800a042:	4313      	orrs	r3, r2
 800a044:	60cb      	str	r3, [r1, #12]
 800a046:	e01b      	b.n	800a080 <HAL_RCC_OscConfig+0xa6c>
 800a048:	46020c00 	.word	0x46020c00
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a054:	d30a      	bcc.n	800a06c <HAL_RCC_OscConfig+0xa58>
 800a056:	4ba1      	ldr	r3, [pc, #644]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	029b      	lsls	r3, r3, #10
 800a064:	499d      	ldr	r1, [pc, #628]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a066:	4313      	orrs	r3, r2
 800a068:	60cb      	str	r3, [r1, #12]
 800a06a:	e009      	b.n	800a080 <HAL_RCC_OscConfig+0xa6c>
 800a06c:	4b9b      	ldr	r3, [pc, #620]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	03db      	lsls	r3, r3, #15
 800a07a:	4998      	ldr	r1, [pc, #608]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a080:	4b96      	ldr	r3, [pc, #600]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a95      	ldr	r2, [pc, #596]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a086:	f043 0310 	orr.w	r3, r3, #16
 800a08a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a08c:	f7f8 fc6e 	bl	800296c <HAL_GetTick>
 800a090:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a094:	f7f8 fc6a 	bl	800296c <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e18b      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a0a6:	4b8d      	ldr	r3, [pc, #564]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f0      	beq.n	800a094 <HAL_RCC_OscConfig+0xa80>
 800a0b2:	e018      	b.n	800a0e6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a0b4:	4b89      	ldr	r3, [pc, #548]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a88      	ldr	r2, [pc, #544]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a0ba:	f023 0310 	bic.w	r3, r3, #16
 800a0be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a0c0:	f7f8 fc54 	bl	800296c <HAL_GetTick>
 800a0c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a0c8:	f7f8 fc50 	bl	800296c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e171      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a0da:	4b80      	ldr	r3, [pc, #512]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1f0      	bne.n	800a0c8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 8166 	beq.w	800a3bc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a0f6:	4b79      	ldr	r3, [pc, #484]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	f003 030c 	and.w	r3, r3, #12
 800a0fe:	2b0c      	cmp	r3, #12
 800a100:	f000 80f2 	beq.w	800a2e8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a108:	2b02      	cmp	r3, #2
 800a10a:	f040 80c5 	bne.w	800a298 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a10e:	4b73      	ldr	r3, [pc, #460]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a72      	ldr	r2, [pc, #456]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a118:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a11a:	f7f8 fc27 	bl	800296c <HAL_GetTick>
 800a11e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a120:	e008      	b.n	800a134 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a122:	f7f8 fc23 	bl	800296c <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e144      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a134:	4b69      	ldr	r3, [pc, #420]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f0      	bne.n	800a122 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a140:	4b66      	ldr	r3, [pc, #408]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d111      	bne.n	800a172 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a14e:	4b63      	ldr	r3, [pc, #396]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a154:	4a61      	ldr	r2, [pc, #388]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a156:	f043 0304 	orr.w	r3, r3, #4
 800a15a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a15e:	4b5f      	ldr	r3, [pc, #380]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a172:	4b5b      	ldr	r3, [pc, #364]	@ (800a2e0 <HAL_RCC_OscConfig+0xccc>)
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a17a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a17e:	d102      	bne.n	800a186 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a186:	4b56      	ldr	r3, [pc, #344]	@ (800a2e0 <HAL_RCC_OscConfig+0xccc>)
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	4a55      	ldr	r2, [pc, #340]	@ (800a2e0 <HAL_RCC_OscConfig+0xccc>)
 800a18c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a190:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a192:	4b52      	ldr	r3, [pc, #328]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a196:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a1a6:	3a01      	subs	r2, #1
 800a1a8:	0212      	lsls	r2, r2, #8
 800a1aa:	4311      	orrs	r1, r2
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	494a      	ldr	r1, [pc, #296]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1b8:	4b48      	ldr	r3, [pc, #288]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1bc:	4b49      	ldr	r3, [pc, #292]	@ (800a2e4 <HAL_RCC_OscConfig+0xcd0>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a1c4:	3a01      	subs	r2, #1
 800a1c6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a1ce:	3a01      	subs	r2, #1
 800a1d0:	0252      	lsls	r2, r2, #9
 800a1d2:	b292      	uxth	r2, r2
 800a1d4:	4311      	orrs	r1, r2
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a1da:	3a01      	subs	r2, #1
 800a1dc:	0412      	lsls	r2, r2, #16
 800a1de:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a1e2:	4311      	orrs	r1, r2
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a1e8:	3a01      	subs	r2, #1
 800a1ea:	0612      	lsls	r2, r2, #24
 800a1ec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	493a      	ldr	r1, [pc, #232]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a1f8:	4b38      	ldr	r3, [pc, #224]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fc:	4a37      	ldr	r2, [pc, #220]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a1fe:	f023 0310 	bic.w	r3, r3, #16
 800a202:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a208:	4a34      	ldr	r2, [pc, #208]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a20e:	4b33      	ldr	r3, [pc, #204]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	4a32      	ldr	r2, [pc, #200]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a214:	f043 0310 	orr.w	r3, r3, #16
 800a218:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a21a:	4b30      	ldr	r3, [pc, #192]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21e:	f023 020c 	bic.w	r2, r3, #12
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a226:	492d      	ldr	r1, [pc, #180]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a22c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a230:	2b01      	cmp	r3, #1
 800a232:	d105      	bne.n	800a240 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a234:	4b2a      	ldr	r3, [pc, #168]	@ (800a2e0 <HAL_RCC_OscConfig+0xccc>)
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	4a29      	ldr	r2, [pc, #164]	@ (800a2e0 <HAL_RCC_OscConfig+0xccc>)
 800a23a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a23e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a240:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a244:	2b01      	cmp	r3, #1
 800a246:	d107      	bne.n	800a258 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a248:	4b24      	ldr	r3, [pc, #144]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a24a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a24e:	4a23      	ldr	r2, [pc, #140]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a250:	f023 0304 	bic.w	r3, r3, #4
 800a254:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a258:	4b20      	ldr	r3, [pc, #128]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a1f      	ldr	r2, [pc, #124]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a25e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a262:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a264:	f7f8 fb82 	bl	800296c <HAL_GetTick>
 800a268:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a26c:	f7f8 fb7e 	bl	800296c <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e09f      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a27e:	4b17      	ldr	r3, [pc, #92]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0f0      	beq.n	800a26c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a28a:	4b14      	ldr	r3, [pc, #80]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	4a13      	ldr	r2, [pc, #76]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a294:	6293      	str	r3, [r2, #40]	@ 0x28
 800a296:	e091      	b.n	800a3bc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a298:	4b10      	ldr	r3, [pc, #64]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a0f      	ldr	r2, [pc, #60]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a29e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a2a4:	f7f8 fb62 	bl	800296c <HAL_GetTick>
 800a2a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2ac:	f7f8 fb5e 	bl	800296c <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e07f      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a2be:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f0      	bne.n	800a2ac <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a2ca:	4b04      	ldr	r3, [pc, #16]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	4a03      	ldr	r2, [pc, #12]	@ (800a2dc <HAL_RCC_OscConfig+0xcc8>)
 800a2d0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a2d4:	f023 0303 	bic.w	r3, r3, #3
 800a2d8:	6293      	str	r3, [r2, #40]	@ 0x28
 800a2da:	e06f      	b.n	800a3bc <HAL_RCC_OscConfig+0xda8>
 800a2dc:	46020c00 	.word	0x46020c00
 800a2e0:	46020800 	.word	0x46020800
 800a2e4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a2e8:	4b37      	ldr	r3, [pc, #220]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a2ee:	4b36      	ldr	r3, [pc, #216]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d039      	beq.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f003 0203 	and.w	r2, r3, #3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a306:	429a      	cmp	r2, r3
 800a308:	d132      	bne.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	0a1b      	lsrs	r3, r3, #8
 800a30e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a316:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a318:	429a      	cmp	r2, r3
 800a31a:	d129      	bne.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a326:	429a      	cmp	r2, r3
 800a328:	d122      	bne.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a334:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a336:	429a      	cmp	r2, r3
 800a338:	d11a      	bne.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	0a5b      	lsrs	r3, r3, #9
 800a33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a346:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a348:	429a      	cmp	r2, r3
 800a34a:	d111      	bne.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	0c1b      	lsrs	r3, r3, #16
 800a350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a358:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d108      	bne.n	800a370 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	0e1b      	lsrs	r3, r3, #24
 800a362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d001      	beq.n	800a374 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e024      	b.n	800a3be <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a374:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a378:	08db      	lsrs	r3, r3, #3
 800a37a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a382:	429a      	cmp	r2, r3
 800a384:	d01a      	beq.n	800a3bc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a386:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38a:	4a0f      	ldr	r2, [pc, #60]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a38c:	f023 0310 	bic.w	r3, r3, #16
 800a390:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a392:	f7f8 faeb 	bl	800296c <HAL_GetTick>
 800a396:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a398:	bf00      	nop
 800a39a:	f7f8 fae7 	bl	800296c <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d0f9      	beq.n	800a39a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3aa:	4a07      	ldr	r2, [pc, #28]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a3b0:	4b05      	ldr	r3, [pc, #20]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b4:	4a04      	ldr	r2, [pc, #16]	@ (800a3c8 <HAL_RCC_OscConfig+0xdb4>)
 800a3b6:	f043 0310 	orr.w	r3, r3, #16
 800a3ba:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3738      	adds	r7, #56	@ 0x38
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	46020c00 	.word	0x46020c00

0800a3cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e1d9      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a3e0:	4b9b      	ldr	r3, [pc, #620]	@ (800a650 <HAL_RCC_ClockConfig+0x284>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 030f 	and.w	r3, r3, #15
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d910      	bls.n	800a410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ee:	4b98      	ldr	r3, [pc, #608]	@ (800a650 <HAL_RCC_ClockConfig+0x284>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f023 020f 	bic.w	r2, r3, #15
 800a3f6:	4996      	ldr	r1, [pc, #600]	@ (800a650 <HAL_RCC_ClockConfig+0x284>)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3fe:	4b94      	ldr	r3, [pc, #592]	@ (800a650 <HAL_RCC_ClockConfig+0x284>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d001      	beq.n	800a410 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e1c1      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0310 	and.w	r3, r3, #16
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d010      	beq.n	800a43e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695a      	ldr	r2, [r3, #20]
 800a420:	4b8c      	ldr	r3, [pc, #560]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a428:	429a      	cmp	r2, r3
 800a42a:	d908      	bls.n	800a43e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a42c:	4b89      	ldr	r3, [pc, #548]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a430:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	4986      	ldr	r1, [pc, #536]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0308 	and.w	r3, r3, #8
 800a446:	2b00      	cmp	r3, #0
 800a448:	d012      	beq.n	800a470 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691a      	ldr	r2, [r3, #16]
 800a44e:	4b81      	ldr	r3, [pc, #516]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	091b      	lsrs	r3, r3, #4
 800a454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a458:	429a      	cmp	r2, r3
 800a45a:	d909      	bls.n	800a470 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a45c:	4b7d      	ldr	r3, [pc, #500]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	011b      	lsls	r3, r3, #4
 800a46a:	497a      	ldr	r1, [pc, #488]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d010      	beq.n	800a49e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	4b74      	ldr	r3, [pc, #464]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a488:	429a      	cmp	r2, r3
 800a48a:	d908      	bls.n	800a49e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a48c:	4b71      	ldr	r3, [pc, #452]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a48e:	6a1b      	ldr	r3, [r3, #32]
 800a490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	496e      	ldr	r1, [pc, #440]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d010      	beq.n	800a4cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	689a      	ldr	r2, [r3, #8]
 800a4ae:	4b69      	ldr	r3, [pc, #420]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d908      	bls.n	800a4cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a4ba:	4b66      	ldr	r3, [pc, #408]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	f023 020f 	bic.w	r2, r3, #15
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	4963      	ldr	r1, [pc, #396]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 80d2 	beq.w	800a67e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d143      	bne.n	800a56e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4e6:	4b5b      	ldr	r3, [pc, #364]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a4e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d110      	bne.n	800a516 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a4f4:	4b57      	ldr	r3, [pc, #348]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a4f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4fa:	4a56      	ldr	r2, [pc, #344]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a4fc:	f043 0304 	orr.w	r3, r3, #4
 800a500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a504:	4b53      	ldr	r3, [pc, #332]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	60bb      	str	r3, [r7, #8]
 800a510:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a512:	2301      	movs	r3, #1
 800a514:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a516:	f7f8 fa29 	bl	800296c <HAL_GetTick>
 800a51a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a51c:	4b4e      	ldr	r3, [pc, #312]	@ (800a658 <HAL_RCC_ClockConfig+0x28c>)
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00f      	beq.n	800a548 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a528:	e008      	b.n	800a53c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a52a:	f7f8 fa1f 	bl	800296c <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	2b02      	cmp	r3, #2
 800a536:	d901      	bls.n	800a53c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e12b      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a53c:	4b46      	ldr	r3, [pc, #280]	@ (800a658 <HAL_RCC_ClockConfig+0x28c>)
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0f0      	beq.n	800a52a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d107      	bne.n	800a55e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a54e:	4b41      	ldr	r3, [pc, #260]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a554:	4a3f      	ldr	r2, [pc, #252]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a556:	f023 0304 	bic.w	r3, r3, #4
 800a55a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a55e:	4b3d      	ldr	r3, [pc, #244]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a566:	2b00      	cmp	r3, #0
 800a568:	d121      	bne.n	800a5ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e112      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d107      	bne.n	800a586 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a576:	4b37      	ldr	r3, [pc, #220]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d115      	bne.n	800a5ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e106      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d107      	bne.n	800a59e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a58e:	4b31      	ldr	r3, [pc, #196]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d109      	bne.n	800a5ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e0fa      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a59e:	4b2d      	ldr	r3, [pc, #180]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e0f2      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a5ae:	4b29      	ldr	r3, [pc, #164]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f023 0203 	bic.w	r2, r3, #3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	4926      	ldr	r1, [pc, #152]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a5c0:	f7f8 f9d4 	bl	800296c <HAL_GetTick>
 800a5c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d112      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5ce:	e00a      	b.n	800a5e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5d0:	f7f8 f9cc 	bl	800296c <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e0d6      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	f003 030c 	and.w	r3, r3, #12
 800a5ee:	2b0c      	cmp	r3, #12
 800a5f0:	d1ee      	bne.n	800a5d0 <HAL_RCC_ClockConfig+0x204>
 800a5f2:	e044      	b.n	800a67e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d112      	bne.n	800a622 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5fc:	e00a      	b.n	800a614 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5fe:	f7f8 f9b5 	bl	800296c <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d901      	bls.n	800a614 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e0bf      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a614:	4b0f      	ldr	r3, [pc, #60]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	f003 030c 	and.w	r3, r3, #12
 800a61c:	2b08      	cmp	r3, #8
 800a61e:	d1ee      	bne.n	800a5fe <HAL_RCC_ClockConfig+0x232>
 800a620:	e02d      	b.n	800a67e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d123      	bne.n	800a672 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a62a:	e00a      	b.n	800a642 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a62c:	f7f8 f99e 	bl	800296c <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e0a8      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a642:	4b04      	ldr	r3, [pc, #16]	@ (800a654 <HAL_RCC_ClockConfig+0x288>)
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f003 030c 	and.w	r3, r3, #12
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1ee      	bne.n	800a62c <HAL_RCC_ClockConfig+0x260>
 800a64e:	e016      	b.n	800a67e <HAL_RCC_ClockConfig+0x2b2>
 800a650:	40022000 	.word	0x40022000
 800a654:	46020c00 	.word	0x46020c00
 800a658:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a65c:	f7f8 f986 	bl	800296c <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d901      	bls.n	800a672 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e090      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a672:	4b4a      	ldr	r3, [pc, #296]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	f003 030c 	and.w	r3, r3, #12
 800a67a:	2b04      	cmp	r3, #4
 800a67c:	d1ee      	bne.n	800a65c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d010      	beq.n	800a6ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	4b43      	ldr	r3, [pc, #268]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	429a      	cmp	r2, r3
 800a698:	d208      	bcs.n	800a6ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a69a:	4b40      	ldr	r3, [pc, #256]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	f023 020f 	bic.w	r2, r3, #15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	493d      	ldr	r1, [pc, #244]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6ac:	4b3c      	ldr	r3, [pc, #240]	@ (800a7a0 <HAL_RCC_ClockConfig+0x3d4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 030f 	and.w	r3, r3, #15
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d210      	bcs.n	800a6dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ba:	4b39      	ldr	r3, [pc, #228]	@ (800a7a0 <HAL_RCC_ClockConfig+0x3d4>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f023 020f 	bic.w	r2, r3, #15
 800a6c2:	4937      	ldr	r1, [pc, #220]	@ (800a7a0 <HAL_RCC_ClockConfig+0x3d4>)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ca:	4b35      	ldr	r3, [pc, #212]	@ (800a7a0 <HAL_RCC_ClockConfig+0x3d4>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d001      	beq.n	800a6dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e05b      	b.n	800a794 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d010      	beq.n	800a70a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68da      	ldr	r2, [r3, #12]
 800a6ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d208      	bcs.n	800a70a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a6f8:	4b28      	ldr	r3, [pc, #160]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	4925      	ldr	r1, [pc, #148]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a706:	4313      	orrs	r3, r2
 800a708:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0308 	and.w	r3, r3, #8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d012      	beq.n	800a73c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691a      	ldr	r2, [r3, #16]
 800a71a:	4b20      	ldr	r3, [pc, #128]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	091b      	lsrs	r3, r3, #4
 800a720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a724:	429a      	cmp	r2, r3
 800a726:	d209      	bcs.n	800a73c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a728:	4b1c      	ldr	r3, [pc, #112]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	4919      	ldr	r1, [pc, #100]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d010      	beq.n	800a76a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	695a      	ldr	r2, [r3, #20]
 800a74c:	4b13      	ldr	r3, [pc, #76]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a750:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a754:	429a      	cmp	r2, r3
 800a756:	d208      	bcs.n	800a76a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a758:	4b10      	ldr	r3, [pc, #64]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	490d      	ldr	r1, [pc, #52]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a766:	4313      	orrs	r3, r2
 800a768:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a76a:	f000 f821 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800a76e:	4602      	mov	r2, r0
 800a770:	4b0a      	ldr	r3, [pc, #40]	@ (800a79c <HAL_RCC_ClockConfig+0x3d0>)
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	f003 030f 	and.w	r3, r3, #15
 800a778:	490a      	ldr	r1, [pc, #40]	@ (800a7a4 <HAL_RCC_ClockConfig+0x3d8>)
 800a77a:	5ccb      	ldrb	r3, [r1, r3]
 800a77c:	fa22 f303 	lsr.w	r3, r2, r3
 800a780:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <HAL_RCC_ClockConfig+0x3dc>)
 800a782:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a784:	4b09      	ldr	r3, [pc, #36]	@ (800a7ac <HAL_RCC_ClockConfig+0x3e0>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f8 f865 	bl	8002858 <HAL_InitTick>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]

  return status;
 800a792:	7bfb      	ldrb	r3, [r7, #15]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	46020c00 	.word	0x46020c00
 800a7a0:	40022000 	.word	0x40022000
 800a7a4:	08011404 	.word	0x08011404
 800a7a8:	20000000 	.word	0x20000000
 800a7ac:	20000004 	.word	0x20000004

0800a7b0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b08b      	sub	sp, #44	@ 0x2c
 800a7b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7be:	4b78      	ldr	r3, [pc, #480]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f003 030c 	and.w	r3, r3, #12
 800a7c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7c8:	4b75      	ldr	r3, [pc, #468]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <HAL_RCC_GetSysClockFreq+0x34>
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	2b0c      	cmp	r3, #12
 800a7dc:	d121      	bne.n	800a822 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d11e      	bne.n	800a822 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a7e4:	4b6e      	ldr	r3, [pc, #440]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d107      	bne.n	800a800 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a7f0:	4b6b      	ldr	r3, [pc, #428]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a7f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a7f6:	0b1b      	lsrs	r3, r3, #12
 800a7f8:	f003 030f 	and.w	r3, r3, #15
 800a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7fe:	e005      	b.n	800a80c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a800:	4b67      	ldr	r3, [pc, #412]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	0f1b      	lsrs	r3, r3, #28
 800a806:	f003 030f 	and.w	r3, r3, #15
 800a80a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a80c:	4a65      	ldr	r2, [pc, #404]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a814:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d110      	bne.n	800a83e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a820:	e00d      	b.n	800a83e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a822:	4b5f      	ldr	r3, [pc, #380]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	f003 030c 	and.w	r3, r3, #12
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d102      	bne.n	800a834 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a82e:	4b5e      	ldr	r3, [pc, #376]	@ (800a9a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a830:	623b      	str	r3, [r7, #32]
 800a832:	e004      	b.n	800a83e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	2b08      	cmp	r3, #8
 800a838:	d101      	bne.n	800a83e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a83a:	4b5b      	ldr	r3, [pc, #364]	@ (800a9a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a83c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b0c      	cmp	r3, #12
 800a842:	f040 80a5 	bne.w	800a990 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a846:	4b56      	ldr	r3, [pc, #344]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a850:	4b53      	ldr	r3, [pc, #332]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	0a1b      	lsrs	r3, r3, #8
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	3301      	adds	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a85e:	4b50      	ldr	r3, [pc, #320]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a862:	091b      	lsrs	r3, r3, #4
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a86a:	4b4d      	ldr	r3, [pc, #308]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	08db      	lsrs	r3, r3, #3
 800a870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	fb02 f303 	mul.w	r3, r2, r3
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d003      	beq.n	800a894 <HAL_RCC_GetSysClockFreq+0xe4>
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d022      	beq.n	800a8d8 <HAL_RCC_GetSysClockFreq+0x128>
 800a892:	e043      	b.n	800a91c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a9ac <HAL_RCC_GetSysClockFreq+0x1fc>
 800a8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ae:	ee07 3a90 	vmov	s15, r3
 800a8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8b6:	ed97 6a01 	vldr	s12, [r7, #4]
 800a8ba:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a9b0 <HAL_RCC_GetSysClockFreq+0x200>
 800a8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8d6:	e046      	b.n	800a966 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a9ac <HAL_RCC_GetSysClockFreq+0x1fc>
 800a8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ea:	4b2d      	ldr	r3, [pc, #180]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a8ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f2:	ee07 3a90 	vmov	s15, r3
 800a8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a8fa:	ed97 6a01 	vldr	s12, [r7, #4]
 800a8fe:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a9b0 <HAL_RCC_GetSysClockFreq+0x200>
 800a902:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a906:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a91a:	e024      	b.n	800a966 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	ee07 3a90 	vmov	s15, r3
 800a92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a934:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a944:	ed97 6a01 	vldr	s12, [r7, #4]
 800a948:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a9b0 <HAL_RCC_GetSysClockFreq+0x200>
 800a94c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a950:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a958:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a964:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a966:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a96a:	0e1b      	lsrs	r3, r3, #24
 800a96c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a970:	3301      	adds	r3, #1
 800a972:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a97e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a98a:	ee17 3a90 	vmov	r3, s15
 800a98e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a990:	6a3b      	ldr	r3, [r7, #32]
}
 800a992:	4618      	mov	r0, r3
 800a994:	372c      	adds	r7, #44	@ 0x2c
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	46020c00 	.word	0x46020c00
 800a9a4:	0801141c 	.word	0x0801141c
 800a9a8:	00f42400 	.word	0x00f42400
 800a9ac:	4b742400 	.word	0x4b742400
 800a9b0:	46000000 	.word	0x46000000

0800a9b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a9b8:	f7ff fefa 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <HAL_RCC_GetHCLKFreq+0x28>)
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	4906      	ldr	r1, [pc, #24]	@ (800a9e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a9c8:	5ccb      	ldrb	r3, [r1, r3]
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	4a05      	ldr	r2, [pc, #20]	@ (800a9e4 <HAL_RCC_GetHCLKFreq+0x30>)
 800a9d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a9d2:	4b04      	ldr	r3, [pc, #16]	@ (800a9e4 <HAL_RCC_GetHCLKFreq+0x30>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	46020c00 	.word	0x46020c00
 800a9e0:	08011404 	.word	0x08011404
 800a9e4:	20000000 	.word	0x20000000

0800a9e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a9ec:	f7ff ffe2 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	091b      	lsrs	r3, r3, #4
 800a9f8:	f003 0307 	and.w	r3, r3, #7
 800a9fc:	4903      	ldr	r1, [pc, #12]	@ (800aa0c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9fe:	5ccb      	ldrb	r3, [r1, r3]
 800aa00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	46020c00 	.word	0x46020c00
 800aa0c:	08011414 	.word	0x08011414

0800aa10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800aa14:	f7ff ffce 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	0a1b      	lsrs	r3, r3, #8
 800aa20:	f003 0307 	and.w	r3, r3, #7
 800aa24:	4903      	ldr	r1, [pc, #12]	@ (800aa34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa26:	5ccb      	ldrb	r3, [r1, r3]
 800aa28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	46020c00 	.word	0x46020c00
 800aa34:	08011414 	.word	0x08011414

0800aa38 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800aa3c:	f7ff ffba 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800aa40:	4602      	mov	r2, r0
 800aa42:	4b05      	ldr	r3, [pc, #20]	@ (800aa58 <HAL_RCC_GetPCLK3Freq+0x20>)
 800aa44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa46:	091b      	lsrs	r3, r3, #4
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	4903      	ldr	r1, [pc, #12]	@ (800aa5c <HAL_RCC_GetPCLK3Freq+0x24>)
 800aa4e:	5ccb      	ldrb	r3, [r1, r3]
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	46020c00 	.word	0x46020c00
 800aa5c:	08011414 	.word	0x08011414

0800aa60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800aa68:	4b3e      	ldr	r3, [pc, #248]	@ (800ab64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800aa76:	f7fe fd21 	bl	80094bc <HAL_PWREx_GetVoltageRange>
 800aa7a:	6178      	str	r0, [r7, #20]
 800aa7c:	e019      	b.n	800aab2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa7e:	4b39      	ldr	r3, [pc, #228]	@ (800ab64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa84:	4a37      	ldr	r2, [pc, #220]	@ (800ab64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa86:	f043 0304 	orr.w	r3, r3, #4
 800aa8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aa8e:	4b35      	ldr	r3, [pc, #212]	@ (800ab64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aa90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa94:	f003 0304 	and.w	r3, r3, #4
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800aa9c:	f7fe fd0e 	bl	80094bc <HAL_PWREx_GetVoltageRange>
 800aaa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800aaa2:	4b30      	ldr	r3, [pc, #192]	@ (800ab64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aaa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaa8:	4a2e      	ldr	r2, [pc, #184]	@ (800ab64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800aaaa:	f023 0304 	bic.w	r3, r3, #4
 800aaae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aab8:	d003      	beq.n	800aac2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac0:	d109      	bne.n	800aad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aac8:	d202      	bcs.n	800aad0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800aaca:	2301      	movs	r3, #1
 800aacc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800aace:	e033      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800aad0:	2300      	movs	r3, #0
 800aad2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800aad4:	e030      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aadc:	d208      	bcs.n	800aaf0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aae4:	d102      	bne.n	800aaec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800aae6:	2303      	movs	r3, #3
 800aae8:	613b      	str	r3, [r7, #16]
 800aaea:	e025      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e035      	b.n	800ab5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf6:	d90f      	bls.n	800ab18 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d109      	bne.n	800ab12 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab04:	d902      	bls.n	800ab0c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ab06:	2300      	movs	r3, #0
 800ab08:	613b      	str	r3, [r7, #16]
 800ab0a:	e015      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	e012      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800ab12:	2300      	movs	r3, #0
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	e00f      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab1e:	d109      	bne.n	800ab34 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab26:	d102      	bne.n	800ab2e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ab28:	2301      	movs	r3, #1
 800ab2a:	613b      	str	r3, [r7, #16]
 800ab2c:	e004      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800ab2e:	2302      	movs	r3, #2
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	e001      	b.n	800ab38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800ab34:	2301      	movs	r3, #1
 800ab36:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ab38:	4b0b      	ldr	r3, [pc, #44]	@ (800ab68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f023 020f 	bic.w	r2, r3, #15
 800ab40:	4909      	ldr	r1, [pc, #36]	@ (800ab68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ab48:	4b07      	ldr	r3, [pc, #28]	@ (800ab68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 030f 	and.w	r3, r3, #15
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d001      	beq.n	800ab5a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e000      	b.n	800ab5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	46020c00 	.word	0x46020c00
 800ab68:	40022000 	.word	0x40022000

0800ab6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ab6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab70:	b0c8      	sub	sp, #288	@ 0x120
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f002 0401 	and.w	r4, r2, #1
 800ab90:	2500      	movs	r5, #0
 800ab92:	ea54 0305 	orrs.w	r3, r4, r5
 800ab96:	d00b      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ab98:	4bd5      	ldr	r3, [pc, #852]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab9e:	f023 0103 	bic.w	r1, r3, #3
 800aba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aba8:	4ad1      	ldr	r2, [pc, #836]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abaa:	430b      	orrs	r3, r1
 800abac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800abb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f002 0802 	and.w	r8, r2, #2
 800abbc:	f04f 0900 	mov.w	r9, #0
 800abc0:	ea58 0309 	orrs.w	r3, r8, r9
 800abc4:	d00b      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800abc6:	4bca      	ldr	r3, [pc, #808]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abcc:	f023 010c 	bic.w	r1, r3, #12
 800abd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd6:	4ac6      	ldr	r2, [pc, #792]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abd8:	430b      	orrs	r3, r1
 800abda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800abde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f002 0a04 	and.w	sl, r2, #4
 800abea:	f04f 0b00 	mov.w	fp, #0
 800abee:	ea5a 030b 	orrs.w	r3, sl, fp
 800abf2:	d00b      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800abf4:	4bbe      	ldr	r3, [pc, #760]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abfa:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800abfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac04:	4aba      	ldr	r2, [pc, #744]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac06:	430b      	orrs	r3, r1
 800ac08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f002 0308 	and.w	r3, r2, #8
 800ac18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ac22:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ac26:	460b      	mov	r3, r1
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	d00b      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ac2c:	4bb0      	ldr	r3, [pc, #704]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ac36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac3c:	4aac      	ldr	r2, [pc, #688]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac3e:	430b      	orrs	r3, r1
 800ac40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ac44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f002 0310 	and.w	r3, r2, #16
 800ac50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ac54:	2300      	movs	r3, #0
 800ac56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ac5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4313      	orrs	r3, r2
 800ac62:	d00b      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ac64:	4ba2      	ldr	r3, [pc, #648]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac74:	4a9e      	ldr	r2, [pc, #632]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac76:	430b      	orrs	r3, r1
 800ac78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ac7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ac88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ac92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	d00b      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800ac9c:	4b94      	ldr	r3, [pc, #592]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aca2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800aca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acac:	4a90      	ldr	r2, [pc, #576]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800acae:	430b      	orrs	r3, r1
 800acb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f002 0320 	and.w	r3, r2, #32
 800acc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800acc4:	2300      	movs	r3, #0
 800acc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800acca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800acce:	460b      	mov	r3, r1
 800acd0:	4313      	orrs	r3, r2
 800acd2:	d00b      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800acd4:	4b86      	ldr	r3, [pc, #536]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800acd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800acda:	f023 0107 	bic.w	r1, r3, #7
 800acde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ace2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ace4:	4a82      	ldr	r2, [pc, #520]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ace6:	430b      	orrs	r3, r1
 800ace8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800acec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800acf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acfc:	2300      	movs	r3, #0
 800acfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	d00b      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800ad0c:	4b78      	ldr	r3, [pc, #480]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad12:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800ad16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad1c:	4a74      	ldr	r2, [pc, #464]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ad30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad34:	2300      	movs	r3, #0
 800ad36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ad3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4313      	orrs	r3, r2
 800ad42:	d00b      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800ad44:	4b6a      	ldr	r3, [pc, #424]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad54:	4a66      	ldr	r2, [pc, #408]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad56:	430b      	orrs	r3, r1
 800ad58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800ad68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	d00b      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800ad7c:	4b5c      	ldr	r3, [pc, #368]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ad86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad8c:	4a58      	ldr	r2, [pc, #352]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ada0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ada4:	2300      	movs	r3, #0
 800ada6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800adaa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800adae:	460b      	mov	r3, r1
 800adb0:	4313      	orrs	r3, r2
 800adb2:	d00b      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800adb4:	4b4e      	ldr	r3, [pc, #312]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800adb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800adba:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800adbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adc4:	4a4a      	ldr	r2, [pc, #296]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800adc6:	430b      	orrs	r3, r1
 800adc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800adcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800add8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800addc:	2300      	movs	r3, #0
 800adde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ade2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4313      	orrs	r3, r2
 800adea:	d00b      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800adec:	4b40      	ldr	r3, [pc, #256]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800adee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800adf2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800adf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adfc:	4a3c      	ldr	r2, [pc, #240]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800adfe:	430b      	orrs	r3, r1
 800ae00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800ae04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ae10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae14:	2300      	movs	r3, #0
 800ae16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ae1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4313      	orrs	r3, r2
 800ae22:	d00c      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800ae24:	4b32      	ldr	r3, [pc, #200]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae2a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ae2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae36:	4a2e      	ldr	r2, [pc, #184]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ae3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800ae4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae54:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	d00c      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800ae5e:	4b24      	ldr	r3, [pc, #144]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae64:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800ae68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae70:	4a1f      	ldr	r2, [pc, #124]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae72:	430b      	orrs	r3, r1
 800ae74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ae78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ae84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ae92:	460b      	mov	r3, r1
 800ae94:	4313      	orrs	r3, r2
 800ae96:	d00c      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800ae98:	4b15      	ldr	r3, [pc, #84]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae9e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800aea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeaa:	4a11      	ldr	r2, [pc, #68]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeac:	430b      	orrs	r3, r1
 800aeae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800aeb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800aebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aec2:	2300      	movs	r3, #0
 800aec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aecc:	460b      	mov	r3, r1
 800aece:	4313      	orrs	r3, r2
 800aed0:	d010      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800aed2:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aed8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aee4:	4a02      	ldr	r2, [pc, #8]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aee6:	430b      	orrs	r3, r1
 800aee8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800aeec:	e002      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800aeee:	bf00      	nop
 800aef0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800aef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800af00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af04:	2300      	movs	r3, #0
 800af06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af0e:	460b      	mov	r3, r1
 800af10:	4313      	orrs	r3, r2
 800af12:	d04c      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800af14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af1c:	2b80      	cmp	r3, #128	@ 0x80
 800af1e:	d02d      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800af20:	2b80      	cmp	r3, #128	@ 0x80
 800af22:	d827      	bhi.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800af24:	2b60      	cmp	r3, #96	@ 0x60
 800af26:	d02b      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800af28:	2b60      	cmp	r3, #96	@ 0x60
 800af2a:	d823      	bhi.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800af2c:	2b40      	cmp	r3, #64	@ 0x40
 800af2e:	d006      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800af30:	2b40      	cmp	r3, #64	@ 0x40
 800af32:	d81f      	bhi.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800af38:	2b20      	cmp	r3, #32
 800af3a:	d011      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800af3c:	e01a      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af3e:	4bc0      	ldr	r3, [pc, #768]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af42:	4abf      	ldr	r2, [pc, #764]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800af4a:	e01a      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af50:	3308      	adds	r3, #8
 800af52:	4618      	mov	r0, r3
 800af54:	f002 fcd6 	bl	800d904 <RCCEx_PLL2_Config>
 800af58:	4603      	mov	r3, r0
 800af5a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800af5e:	e010      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af64:	332c      	adds	r3, #44	@ 0x2c
 800af66:	4618      	mov	r0, r3
 800af68:	f002 fd64 	bl	800da34 <RCCEx_PLL3_Config>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800af72:	e006      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af7a:	e002      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800af7c:	bf00      	nop
 800af7e:	e000      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800af80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af82:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800af8a:	4bad      	ldr	r3, [pc, #692]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af90:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800af94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af9c:	4aa8      	ldr	r2, [pc, #672]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af9e:	430b      	orrs	r3, r1
 800afa0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800afa4:	e003      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800afaa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800afae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800afba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afbe:	2300      	movs	r3, #0
 800afc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afc4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800afc8:	460b      	mov	r3, r1
 800afca:	4313      	orrs	r3, r2
 800afcc:	d053      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800afce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800afd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afda:	d033      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800afdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afe0:	d82c      	bhi.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800afe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afe6:	d02f      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800afe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afec:	d826      	bhi.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800afee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aff2:	d008      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800aff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aff8:	d820      	bhi.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00a      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800affe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b002:	d011      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b004:	e01a      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b006:	4b8e      	ldr	r3, [pc, #568]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00a:	4a8d      	ldr	r2, [pc, #564]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b00c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b010:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b012:	e01a      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b018:	3308      	adds	r3, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f002 fc72 	bl	800d904 <RCCEx_PLL2_Config>
 800b020:	4603      	mov	r3, r0
 800b022:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b026:	e010      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b02c:	332c      	adds	r3, #44	@ 0x2c
 800b02e:	4618      	mov	r0, r3
 800b030:	f002 fd00 	bl	800da34 <RCCEx_PLL3_Config>
 800b034:	4603      	mov	r3, r0
 800b036:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b03a:	e006      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b042:	e002      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b044:	bf00      	nop
 800b046:	e000      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b04a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10d      	bne.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b052:	4b7b      	ldr	r3, [pc, #492]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b058:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b064:	4a76      	ldr	r2, [pc, #472]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b066:	430b      	orrs	r3, r1
 800b068:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b06c:	e003      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b06e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b072:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b086:	2300      	movs	r3, #0
 800b088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b08c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b090:	460b      	mov	r3, r1
 800b092:	4313      	orrs	r3, r2
 800b094:	d046      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b096:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b09e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b0a2:	d028      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b0a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b0a8:	d821      	bhi.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b0aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0ae:	d022      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b0b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0b4:	d81b      	bhi.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b0b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0ba:	d01c      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b0bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0c0:	d815      	bhi.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b0c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0c6:	d008      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b0c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0cc:	d80f      	bhi.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d011      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b0d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0d6:	d00e      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b0d8:	e009      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0de:	3308      	adds	r3, #8
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 fc0f 	bl	800d904 <RCCEx_PLL2_Config>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b0ec:	e004      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b0f4:	e000      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b0f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10d      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b100:	4b4f      	ldr	r3, [pc, #316]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b106:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b10a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b112:	4a4b      	ldr	r2, [pc, #300]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b114:	430b      	orrs	r3, r1
 800b116:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b11a:	e003      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b120:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b130:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b134:	2300      	movs	r3, #0
 800b136:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b13a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b13e:	460b      	mov	r3, r1
 800b140:	4313      	orrs	r3, r2
 800b142:	d03f      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d81e      	bhi.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b150:	a201      	add	r2, pc, #4	@ (adr r2, 800b158 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b156:	bf00      	nop
 800b158:	0800b197 	.word	0x0800b197
 800b15c:	0800b16d 	.word	0x0800b16d
 800b160:	0800b17b 	.word	0x0800b17b
 800b164:	0800b197 	.word	0x0800b197
 800b168:	0800b197 	.word	0x0800b197
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b16c:	4b34      	ldr	r3, [pc, #208]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b170:	4a33      	ldr	r2, [pc, #204]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b176:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b178:	e00e      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17e:	332c      	adds	r3, #44	@ 0x2c
 800b180:	4618      	mov	r0, r3
 800b182:	f002 fc57 	bl	800da34 <RCCEx_PLL3_Config>
 800b186:	4603      	mov	r3, r0
 800b188:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b18c:	e004      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b194:	e000      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b196:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b198:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10d      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b1a0:	4b27      	ldr	r3, [pc, #156]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b1a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1a6:	f023 0107 	bic.w	r1, r3, #7
 800b1aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1b2:	4a23      	ldr	r2, [pc, #140]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b1b4:	430b      	orrs	r3, r1
 800b1b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b1ba:	e003      	b.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b1c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b1d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	d04c      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b1e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1ec:	d02a      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b1ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1f2:	d821      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b1f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1f8:	d026      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b1fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1fe:	d81b      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b204:	d00e      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b20a:	d815      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01d      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b214:	d110      	bne.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b216:	4b0a      	ldr	r3, [pc, #40]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21a:	4a09      	ldr	r2, [pc, #36]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b21c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b220:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b222:	e014      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b228:	332c      	adds	r3, #44	@ 0x2c
 800b22a:	4618      	mov	r0, r3
 800b22c:	f002 fc02 	bl	800da34 <RCCEx_PLL3_Config>
 800b230:	4603      	mov	r3, r0
 800b232:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b236:	e00a      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b23e:	e006      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b240:	46020c00 	.word	0x46020c00
        break;
 800b244:	bf00      	nop
 800b246:	e002      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b248:	bf00      	nop
 800b24a:	e000      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b24c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b24e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10d      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b256:	4baf      	ldr	r3, [pc, #700]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b25c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b268:	4aaa      	ldr	r2, [pc, #680]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b26a:	430b      	orrs	r3, r1
 800b26c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b270:	e003      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b272:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b276:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b286:	673b      	str	r3, [r7, #112]	@ 0x70
 800b288:	2300      	movs	r3, #0
 800b28a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b28c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b290:	460b      	mov	r3, r1
 800b292:	4313      	orrs	r3, r2
 800b294:	f000 80b5 	beq.w	800b402 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b298:	2300      	movs	r3, #0
 800b29a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b29e:	4b9d      	ldr	r3, [pc, #628]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d113      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2ac:	4b99      	ldr	r3, [pc, #612]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2b2:	4a98      	ldr	r2, [pc, #608]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2b4:	f043 0304 	orr.w	r3, r3, #4
 800b2b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b2bc:	4b95      	ldr	r3, [pc, #596]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b2be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b2ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b2d4:	4b90      	ldr	r3, [pc, #576]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d8:	4a8f      	ldr	r2, [pc, #572]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2e0:	f7f7 fb44 	bl	800296c <HAL_GetTick>
 800b2e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b2e8:	e00b      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2ea:	f7f7 fb3f 	bl	800296c <HAL_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d903      	bls.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b300:	e005      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b302:	4b85      	ldr	r3, [pc, #532]	@ (800b518 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0ed      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b30e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b312:	2b00      	cmp	r3, #0
 800b314:	d165      	bne.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b316:	4b7f      	ldr	r3, [pc, #508]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b31c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b320:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d023      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b330:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b338:	4293      	cmp	r3, r2
 800b33a:	d01b      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b33c:	4b75      	ldr	r3, [pc, #468]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b33e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b346:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b34a:	4b72      	ldr	r3, [pc, #456]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b34c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b350:	4a70      	ldr	r2, [pc, #448]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b356:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b35a:	4b6e      	ldr	r3, [pc, #440]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b35c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b360:	4a6c      	ldr	r2, [pc, #432]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b366:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b36a:	4a6a      	ldr	r2, [pc, #424]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b36c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b370:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d019      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b380:	f7f7 faf4 	bl	800296c <HAL_GetTick>
 800b384:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b388:	e00d      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b38a:	f7f7 faef 	bl	800296c <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b394:	1ad2      	subs	r2, r2, r3
 800b396:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d903      	bls.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b3a4:	e006      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3a6:	4b5b      	ldr	r3, [pc, #364]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b3a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0ea      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b3b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10d      	bne.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b3bc:	4b55      	ldr	r3, [pc, #340]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b3be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b3ce:	4a51      	ldr	r2, [pc, #324]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b3d6:	e008      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b3e0:	e003      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3e6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b3ea:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d107      	bne.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3f2:	4b48      	ldr	r3, [pc, #288]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b3f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3f8:	4a46      	ldr	r2, [pc, #280]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b3fa:	f023 0304 	bic.w	r3, r3, #4
 800b3fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b40e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b410:	2300      	movs	r3, #0
 800b412:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b414:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b418:	460b      	mov	r3, r1
 800b41a:	4313      	orrs	r3, r2
 800b41c:	d042      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b422:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b426:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b42a:	d022      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b42c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b430:	d81b      	bhi.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b436:	d011      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b438:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b43c:	d815      	bhi.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d019      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b442:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b446:	d110      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b44c:	3308      	adds	r3, #8
 800b44e:	4618      	mov	r0, r3
 800b450:	f002 fa58 	bl	800d904 <RCCEx_PLL2_Config>
 800b454:	4603      	mov	r3, r0
 800b456:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b45a:	e00d      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b45c:	4b2d      	ldr	r3, [pc, #180]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b460:	4a2c      	ldr	r2, [pc, #176]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b466:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b468:	e006      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b470:	e002      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b476:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b478:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b480:	4b24      	ldr	r3, [pc, #144]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b486:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b48a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b492:	4a20      	ldr	r2, [pc, #128]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b494:	430b      	orrs	r3, r1
 800b496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b49a:	e003      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4a0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b4b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	d031      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4cc:	d00b      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b4ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4d2:	d804      	bhi.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d008      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b4d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4dc:	d007      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4e4:	e004      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b4e6:	bf00      	nop
 800b4e8:	e002      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b4ea:	bf00      	nop
 800b4ec:	e000      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b4ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d111      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b4f8:	4b06      	ldr	r3, [pc, #24]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b4fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b50a:	4a02      	ldr	r2, [pc, #8]	@ (800b514 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b50c:	430b      	orrs	r3, r1
 800b50e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b512:	e007      	b.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b514:	46020c00 	.word	0x46020c00
 800b518:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b520:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b530:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b532:	2300      	movs	r3, #0
 800b534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b536:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b53a:	460b      	mov	r3, r1
 800b53c:	4313      	orrs	r3, r2
 800b53e:	d00c      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b540:	4bb2      	ldr	r3, [pc, #712]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b546:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b54e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b552:	4aae      	ldr	r2, [pc, #696]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b554:	430b      	orrs	r3, r1
 800b556:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b566:	653b      	str	r3, [r7, #80]	@ 0x50
 800b568:	2300      	movs	r3, #0
 800b56a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b56c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	d019      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b57a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b57e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b582:	d105      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b584:	4ba1      	ldr	r3, [pc, #644]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b588:	4aa0      	ldr	r2, [pc, #640]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b58a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b58e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b590:	4b9e      	ldr	r3, [pc, #632]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b596:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b59a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b59e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5a2:	4a9a      	ldr	r2, [pc, #616]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b5b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	d00c      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b5c6:	4b91      	ldr	r3, [pc, #580]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b5d8:	4a8c      	ldr	r2, [pc, #560]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5da:	430b      	orrs	r3, r1
 800b5dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b5ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	d00c      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b5fc:	4b83      	ldr	r3, [pc, #524]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b602:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b60a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b60e:	4a7f      	ldr	r2, [pc, #508]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b610:	430b      	orrs	r3, r1
 800b612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b622:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b624:	2300      	movs	r3, #0
 800b626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b628:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b62c:	460b      	mov	r3, r1
 800b62e:	4313      	orrs	r3, r2
 800b630:	d00c      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b632:	4b76      	ldr	r3, [pc, #472]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b638:	f023 0118 	bic.w	r1, r3, #24
 800b63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b640:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b644:	4a71      	ldr	r2, [pc, #452]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b646:	430b      	orrs	r3, r1
 800b648:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b658:	633b      	str	r3, [r7, #48]	@ 0x30
 800b65a:	2300      	movs	r3, #0
 800b65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b662:	460b      	mov	r3, r1
 800b664:	4313      	orrs	r3, r2
 800b666:	d032      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b674:	d105      	bne.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b676:	4b65      	ldr	r3, [pc, #404]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67a:	4a64      	ldr	r2, [pc, #400]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b67c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b680:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b686:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b68a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b68e:	d108      	bne.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b694:	3308      	adds	r3, #8
 800b696:	4618      	mov	r0, r3
 800b698:	f002 f934 	bl	800d904 <RCCEx_PLL2_Config>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b6a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10d      	bne.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b6aa:	4b58      	ldr	r3, [pc, #352]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b6ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b6bc:	4a53      	ldr	r2, [pc, #332]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b6be:	430b      	orrs	r3, r1
 800b6c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b6c4:	e003      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6ca:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b6ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	d04a      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b6f6:	d01e      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b6f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b6fc:	d825      	bhi.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b6fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b702:	d00e      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b704:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b708:	d81f      	bhi.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d021      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b70e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b712:	d11a      	bne.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b714:	4b3d      	ldr	r3, [pc, #244]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b718:	4a3c      	ldr	r2, [pc, #240]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b71a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b71e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b720:	e018      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b726:	3308      	adds	r3, #8
 800b728:	4618      	mov	r0, r3
 800b72a:	f002 f8eb 	bl	800d904 <RCCEx_PLL2_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b734:	e00e      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b73a:	332c      	adds	r3, #44	@ 0x2c
 800b73c:	4618      	mov	r0, r3
 800b73e:	f002 f979 	bl	800da34 <RCCEx_PLL3_Config>
 800b742:	4603      	mov	r3, r0
 800b744:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b748:	e004      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b750:	e000      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b752:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b754:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10d      	bne.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b75c:	4b2b      	ldr	r3, [pc, #172]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b75e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b762:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b76a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b76e:	4927      	ldr	r1, [pc, #156]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b770:	4313      	orrs	r3, r2
 800b772:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b776:	e003      	b.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b778:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b77c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b78c:	623b      	str	r3, [r7, #32]
 800b78e:	2300      	movs	r3, #0
 800b790:	627b      	str	r3, [r7, #36]	@ 0x24
 800b792:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b796:	460b      	mov	r3, r1
 800b798:	4313      	orrs	r3, r2
 800b79a:	d03d      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a8:	d00e      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b7aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7ae:	d815      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d017      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b7b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7b8:	d110      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ba:	4b14      	ldr	r3, [pc, #80]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7be:	4a13      	ldr	r2, [pc, #76]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b7c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b7c6:	e00e      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f002 f898 	bl	800d904 <RCCEx_PLL2_Config>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b7da:	e004      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7e2:	e000      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b7e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d110      	bne.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b7ee:	4b07      	ldr	r3, [pc, #28]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b7f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b7f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b800:	4902      	ldr	r1, [pc, #8]	@ (800b80c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b802:	4313      	orrs	r3, r2
 800b804:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b808:	e006      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b80a:	bf00      	nop
 800b80c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b810:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b814:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	2300      	movs	r3, #0
 800b828:	61fb      	str	r3, [r7, #28]
 800b82a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b82e:	460b      	mov	r3, r1
 800b830:	4313      	orrs	r3, r2
 800b832:	d00c      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b834:	4b68      	ldr	r3, [pc, #416]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b83a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b842:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b846:	4964      	ldr	r1, [pc, #400]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	2100      	movs	r1, #0
 800b858:	6139      	str	r1, [r7, #16]
 800b85a:	f003 0302 	and.w	r3, r3, #2
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b864:	460b      	mov	r3, r1
 800b866:	4313      	orrs	r3, r2
 800b868:	d036      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00c      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b876:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b87a:	d113      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b880:	3308      	adds	r3, #8
 800b882:	4618      	mov	r0, r3
 800b884:	f002 f83e 	bl	800d904 <RCCEx_PLL2_Config>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b88e:	e00d      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b894:	332c      	adds	r3, #44	@ 0x2c
 800b896:	4618      	mov	r0, r3
 800b898:	f002 f8cc 	bl	800da34 <RCCEx_PLL3_Config>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b8a2:	e003      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b8aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10d      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b8b4:	4b48      	ldr	r3, [pc, #288]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b8b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b8be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b8c6:	4944      	ldr	r1, [pc, #272]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b8ce:	e003      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8d4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b8d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	f003 0304 	and.w	r3, r3, #4
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	d024      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b8f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d108      	bne.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	332c      	adds	r3, #44	@ 0x2c
 800b906:	4618      	mov	r0, r3
 800b908:	f002 f894 	bl	800da34 <RCCEx_PLL3_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b912:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10d      	bne.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b91a:	4b2f      	ldr	r3, [pc, #188]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b91c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b920:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b928:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b92c:	492a      	ldr	r1, [pc, #168]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b934:	e003      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b936:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b93a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b93e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	2100      	movs	r1, #0
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	f003 0308 	and.w	r3, r3, #8
 800b94e:	607b      	str	r3, [r7, #4]
 800b950:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b954:	460b      	mov	r3, r1
 800b956:	4313      	orrs	r3, r2
 800b958:	d036      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b962:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b966:	d00d      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b968:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b96c:	d811      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b96e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b972:	d012      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b978:	d80b      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00d      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b982:	d106      	bne.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b984:	4b14      	ldr	r3, [pc, #80]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b988:	4a13      	ldr	r2, [pc, #76]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b98a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b98e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10d      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b9a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b9b6:	4908      	ldr	r1, [pc, #32]	@ (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b9be:	e003      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b9c8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9d8:	46020c00 	.word	0x46020c00

0800b9dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b089      	sub	sp, #36	@ 0x24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b9e4:	4ba6      	ldr	r3, [pc, #664]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b9ee:	4ba4      	ldr	r3, [pc, #656]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b9f8:	4ba1      	ldr	r3, [pc, #644]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	f003 030f 	and.w	r3, r3, #15
 800ba02:	3301      	adds	r3, #1
 800ba04:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ba06:	4b9e      	ldr	r3, [pc, #632]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0a:	091b      	lsrs	r3, r3, #4
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ba12:	4b9b      	ldr	r3, [pc, #620]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba16:	08db      	lsrs	r3, r3, #3
 800ba18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	fb02 f303 	mul.w	r3, r2, r3
 800ba22:	ee07 3a90 	vmov	s15, r3
 800ba26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d062      	beq.n	800bafa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	f200 8081 	bhi.w	800bb3e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d024      	beq.n	800ba8c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d17a      	bne.n	800bb3e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	ee07 3a90 	vmov	s15, r3
 800ba4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba52:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800ba56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba5a:	4b89      	ldr	r3, [pc, #548]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba6e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bc88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800ba72:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ba76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ba82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba8a:	e08f      	b.n	800bbac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ba8c:	4b7c      	ldr	r3, [pc, #496]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800ba98:	4b79      	ldr	r3, [pc, #484]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	0f1b      	lsrs	r3, r3, #28
 800ba9e:	f003 030f 	and.w	r3, r3, #15
 800baa2:	e006      	b.n	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800baa4:	4b76      	ldr	r3, [pc, #472]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800baa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	0f1b      	lsrs	r3, r3, #28
 800baae:	f003 030f 	and.w	r3, r3, #15
 800bab2:	4a76      	ldr	r2, [pc, #472]	@ (800bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	ee07 3a90 	vmov	s15, r3
 800bad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad8:	ed97 6a02 	vldr	s12, [r7, #8]
 800badc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bc88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800baf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baf8:	e058      	b.n	800bbac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	ee07 3a90 	vmov	s15, r3
 800bb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb04:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bb08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0c:	4b5c      	ldr	r3, [pc, #368]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb14:	ee07 3a90 	vmov	s15, r3
 800bb18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb1c:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb20:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bc88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bb24:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bb28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bb34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb3c:	e036      	b.n	800bbac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bb3e:	4b50      	ldr	r3, [pc, #320]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800bb4a:	4b4d      	ldr	r3, [pc, #308]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	0f1b      	lsrs	r3, r3, #28
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	e006      	b.n	800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800bb56:	4b4a      	ldr	r3, [pc, #296]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bb58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb5c:	041b      	lsls	r3, r3, #16
 800bb5e:	0f1b      	lsrs	r3, r3, #28
 800bb60:	f003 030f 	and.w	r3, r3, #15
 800bb64:	4a49      	ldr	r2, [pc, #292]	@ (800bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	ee07 3a90 	vmov	s15, r3
 800bb78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	ee07 3a90 	vmov	s15, r3
 800bb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb8e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bc88 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbaa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800bbac:	4b34      	ldr	r3, [pc, #208]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d017      	beq.n	800bbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bbb8:	4b31      	ldr	r3, [pc, #196]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bbba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbbc:	0a5b      	lsrs	r3, r3, #9
 800bbbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbc2:	ee07 3a90 	vmov	s15, r3
 800bbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bbca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bbd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbde:	ee17 2a90 	vmov	r2, s15
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e002      	b.n	800bbee <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bbee:	4b24      	ldr	r3, [pc, #144]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d017      	beq.n	800bc2a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bbfa:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbfe:	0c1b      	lsrs	r3, r3, #16
 800bc00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bc0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc10:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bc14:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc20:	ee17 2a90 	vmov	r2, s15
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	605a      	str	r2, [r3, #4]
 800bc28:	e002      	b.n	800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bc30:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d017      	beq.n	800bc6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bc3c:	4b10      	ldr	r3, [pc, #64]	@ (800bc80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bc3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc40:	0e1b      	lsrs	r3, r3, #24
 800bc42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bc4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc62:	ee17 2a90 	vmov	r2, s15
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc6a:	e002      	b.n	800bc72 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	609a      	str	r2, [r3, #8]
}
 800bc72:	bf00      	nop
 800bc74:	3724      	adds	r7, #36	@ 0x24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	46020c00 	.word	0x46020c00
 800bc84:	4b742400 	.word	0x4b742400
 800bc88:	46000000 	.word	0x46000000
 800bc8c:	0801141c 	.word	0x0801141c

0800bc90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b089      	sub	sp, #36	@ 0x24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bc98:	4ba6      	ldr	r3, [pc, #664]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bca2:	4ba4      	ldr	r3, [pc, #656]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca6:	f003 0303 	and.w	r3, r3, #3
 800bcaa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bcac:	4ba1      	ldr	r3, [pc, #644]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bcae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb0:	0a1b      	lsrs	r3, r3, #8
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bcba:	4b9e      	ldr	r3, [pc, #632]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbe:	091b      	lsrs	r3, r3, #4
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800bcc6:	4b9b      	ldr	r3, [pc, #620]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bcc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcca:	08db      	lsrs	r3, r3, #3
 800bccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d062      	beq.n	800bdae <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	f200 8081 	bhi.w	800bdf2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d024      	beq.n	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d17a      	bne.n	800bdf2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd06:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bf38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0e:	4b89      	ldr	r3, [pc, #548]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd22:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd3e:	e08f      	b.n	800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800bd40:	4b7c      	ldr	r3, [pc, #496]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d005      	beq.n	800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800bd4c:	4b79      	ldr	r3, [pc, #484]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	0f1b      	lsrs	r3, r3, #28
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	e006      	b.n	800bd66 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800bd58:	4b76      	ldr	r3, [pc, #472]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bd5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd5e:	041b      	lsls	r3, r3, #16
 800bd60:	0f1b      	lsrs	r3, r3, #28
 800bd62:	f003 030f 	and.w	r3, r3, #15
 800bd66:	4a76      	ldr	r2, [pc, #472]	@ (800bf40 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800bd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd6c:	ee07 3a90 	vmov	s15, r3
 800bd70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	ee07 3a90 	vmov	s15, r3
 800bd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	ee07 3a90 	vmov	s15, r3
 800bd88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8c:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd90:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bd94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bda0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800bda4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdac:	e058      	b.n	800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bdbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc0:	4b5c      	ldr	r3, [pc, #368]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bdc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc8:	ee07 3a90 	vmov	s15, r3
 800bdcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdd0:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdd4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bdd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bde0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bde4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bde8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdf0:	e036      	b.n	800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bdf2:	4b50      	ldr	r3, [pc, #320]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d005      	beq.n	800be0a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800bdfe:	4b4d      	ldr	r3, [pc, #308]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	0f1b      	lsrs	r3, r3, #28
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	e006      	b.n	800be18 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800be0a:	4b4a      	ldr	r3, [pc, #296]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be10:	041b      	lsls	r3, r3, #16
 800be12:	0f1b      	lsrs	r3, r3, #28
 800be14:	f003 030f 	and.w	r3, r3, #15
 800be18:	4a49      	ldr	r2, [pc, #292]	@ (800bf40 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800be1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	ee07 3a90 	vmov	s15, r3
 800be3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800be42:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800be46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800be56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be5e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800be60:	4b34      	ldr	r3, [pc, #208]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d017      	beq.n	800be9c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be6c:	4b31      	ldr	r3, [pc, #196]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800be6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be70:	0a5b      	lsrs	r3, r3, #9
 800be72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800be7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be82:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800be86:	edd7 6a07 	vldr	s13, [r7, #28]
 800be8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be92:	ee17 2a90 	vmov	r2, s15
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	e002      	b.n	800bea2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800bea2:	4b24      	ldr	r3, [pc, #144]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d017      	beq.n	800bede <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800beae:	4b21      	ldr	r3, [pc, #132]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800beb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb2:	0c1b      	lsrs	r3, r3, #16
 800beb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb8:	ee07 3a90 	vmov	s15, r3
 800bebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800bec0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bec4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800becc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bed4:	ee17 2a90 	vmov	r2, s15
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	605a      	str	r2, [r3, #4]
 800bedc:	e002      	b.n	800bee4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800bee4:	4b13      	ldr	r3, [pc, #76]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d017      	beq.n	800bf20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bef0:	4b10      	ldr	r3, [pc, #64]	@ (800bf34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bef4:	0e1b      	lsrs	r3, r3, #24
 800bef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800befa:	ee07 3a90 	vmov	s15, r3
 800befe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800bf02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf06:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bf0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf16:	ee17 2a90 	vmov	r2, s15
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf1e:	e002      	b.n	800bf26 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	609a      	str	r2, [r3, #8]
}
 800bf26:	bf00      	nop
 800bf28:	3724      	adds	r7, #36	@ 0x24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	46020c00 	.word	0x46020c00
 800bf38:	4b742400 	.word	0x4b742400
 800bf3c:	46000000 	.word	0x46000000
 800bf40:	0801141c 	.word	0x0801141c

0800bf44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b089      	sub	sp, #36	@ 0x24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800bf4c:	4ba6      	ldr	r3, [pc, #664]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf54:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800bf56:	4ba4      	ldr	r3, [pc, #656]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5a:	f003 0303 	and.w	r3, r3, #3
 800bf5e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800bf60:	4ba1      	ldr	r3, [pc, #644]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	f003 030f 	and.w	r3, r3, #15
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800bf6e:	4b9e      	ldr	r3, [pc, #632]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf72:	091b      	lsrs	r3, r3, #4
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800bf7a:	4b9b      	ldr	r3, [pc, #620]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bf7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf7e:	08db      	lsrs	r3, r3, #3
 800bf80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	fb02 f303 	mul.w	r3, r2, r3
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf92:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d062      	beq.n	800c062 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	f200 8081 	bhi.w	800c0a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d024      	beq.n	800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d17a      	bne.n	800c0a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc2:	4b89      	ldr	r3, [pc, #548]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bfc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfd6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800bff2:	e08f      	b.n	800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bff4:	4b7c      	ldr	r3, [pc, #496]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d005      	beq.n	800c00c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c000:	4b79      	ldr	r3, [pc, #484]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	0f1b      	lsrs	r3, r3, #28
 800c006:	f003 030f 	and.w	r3, r3, #15
 800c00a:	e006      	b.n	800c01a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c00c:	4b76      	ldr	r3, [pc, #472]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c00e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c012:	041b      	lsls	r3, r3, #16
 800c014:	0f1b      	lsrs	r3, r3, #28
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	4a76      	ldr	r2, [pc, #472]	@ (800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	ee07 3a90 	vmov	s15, r3
 800c03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c040:	ed97 6a02 	vldr	s12, [r7, #8]
 800c044:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c054:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c060:	e058      	b.n	800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c074:	4b5c      	ldr	r3, [pc, #368]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07c:	ee07 3a90 	vmov	s15, r3
 800c080:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c084:	ed97 6a02 	vldr	s12, [r7, #8]
 800c088:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c08c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c090:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c098:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0a4:	e036      	b.n	800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c0a6:	4b50      	ldr	r3, [pc, #320]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d005      	beq.n	800c0be <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c0b2:	4b4d      	ldr	r3, [pc, #308]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	0f1b      	lsrs	r3, r3, #28
 800c0b8:	f003 030f 	and.w	r3, r3, #15
 800c0bc:	e006      	b.n	800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c0be:	4b4a      	ldr	r3, [pc, #296]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c0c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0c4:	041b      	lsls	r3, r3, #16
 800c0c6:	0f1b      	lsrs	r3, r3, #28
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	4a49      	ldr	r2, [pc, #292]	@ (800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	ee07 3a90 	vmov	s15, r3
 800c0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	ee07 3a90 	vmov	s15, r3
 800c0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c106:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c10e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c112:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c114:	4b34      	ldr	r3, [pc, #208]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d017      	beq.n	800c150 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c120:	4b31      	ldr	r3, [pc, #196]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c124:	0a5b      	lsrs	r3, r3, #9
 800c126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c12a:	ee07 3a90 	vmov	s15, r3
 800c12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c136:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c13a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c13e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c146:	ee17 2a90 	vmov	r2, s15
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	e002      	b.n	800c156 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c156:	4b24      	ldr	r3, [pc, #144]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d017      	beq.n	800c192 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c162:	4b21      	ldr	r3, [pc, #132]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c166:	0c1b      	lsrs	r3, r3, #16
 800c168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c16c:	ee07 3a90 	vmov	s15, r3
 800c170:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c178:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c17c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c188:	ee17 2a90 	vmov	r2, s15
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	605a      	str	r2, [r3, #4]
 800c190:	e002      	b.n	800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c198:	4b13      	ldr	r3, [pc, #76]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c19a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c19c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c1a4:	4b10      	ldr	r3, [pc, #64]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c1a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1a8:	0e1b      	lsrs	r3, r3, #24
 800c1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c1b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c1be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ca:	ee17 2a90 	vmov	r2, s15
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c1d2:	e002      	b.n	800c1da <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	609a      	str	r2, [r3, #8]
}
 800c1da:	bf00      	nop
 800c1dc:	3724      	adds	r7, #36	@ 0x24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	46020c00 	.word	0x46020c00
 800c1ec:	4b742400 	.word	0x4b742400
 800c1f0:	46000000 	.word	0x46000000
 800c1f4:	0801141c 	.word	0x0801141c

0800c1f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08e      	sub	sp, #56	@ 0x38
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c206:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c20a:	430b      	orrs	r3, r1
 800c20c:	d145      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c20e:	4ba7      	ldr	r3, [pc, #668]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c218:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c21a:	4ba4      	ldr	r3, [pc, #656]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c21c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c220:	f003 0302 	and.w	r3, r3, #2
 800c224:	2b02      	cmp	r3, #2
 800c226:	d108      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c22e:	d104      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
 800c236:	f001 bb5a 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c23a:	4b9c      	ldr	r3, [pc, #624]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c23c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c248:	d114      	bne.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c250:	d110      	bne.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c252:	4b96      	ldr	r3, [pc, #600]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c25c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c260:	d103      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c262:	23fa      	movs	r3, #250	@ 0xfa
 800c264:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c266:	f001 bb42 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c26a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c26e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c270:	f001 bb3d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c274:	4b8d      	ldr	r3, [pc, #564]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c27c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c280:	d107      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c288:	d103      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c28a:	4b89      	ldr	r3, [pc, #548]	@ (800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c28e:	f001 bb2e 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	637b      	str	r3, [r7, #52]	@ 0x34
 800c296:	f001 bb2a 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c29e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c2a2:	430b      	orrs	r3, r1
 800c2a4:	d151      	bne.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c2a6:	4b81      	ldr	r3, [pc, #516]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c2a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2ac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c2b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b4:	2b80      	cmp	r3, #128	@ 0x80
 800c2b6:	d035      	beq.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ba:	2b80      	cmp	r3, #128	@ 0x80
 800c2bc:	d841      	bhi.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	2b60      	cmp	r3, #96	@ 0x60
 800c2c2:	d02a      	beq.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c6:	2b60      	cmp	r3, #96	@ 0x60
 800c2c8:	d83b      	bhi.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	2b40      	cmp	r3, #64	@ 0x40
 800c2ce:	d009      	beq.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d2:	2b40      	cmp	r3, #64	@ 0x40
 800c2d4:	d835      	bhi.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00c      	beq.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	d012      	beq.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c2e2:	e02e      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7ff fb77 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2f2:	f001 bafc 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f6:	f107 0318 	add.w	r3, r7, #24
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff fcc8 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c304:	f001 baf3 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c308:	f107 030c 	add.w	r3, r7, #12
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fe19 	bl	800bf44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c316:	f001 baea 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c31a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c31e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c320:	f001 bae5 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c324:	4b61      	ldr	r3, [pc, #388]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c32c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c330:	d103      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c332:	4b60      	ldr	r3, [pc, #384]	@ (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c334:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c336:	f001 bada 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c33a:	2300      	movs	r3, #0
 800c33c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c33e:	f001 bad6 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c342:	2300      	movs	r3, #0
 800c344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c346:	f001 bad2 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c34e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c352:	430b      	orrs	r3, r1
 800c354:	d158      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c356:	4b55      	ldr	r3, [pc, #340]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c358:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c35c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c360:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c368:	d03b      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c370:	d846      	bhi.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c378:	d02e      	beq.n	800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c380:	d83e      	bhi.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c388:	d00b      	beq.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c390:	d836      	bhi.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00d      	beq.n	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c39e:	d012      	beq.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c3a0:	e02e      	b.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fb18 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3b0:	f001 ba9d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b4:	f107 0318 	add.w	r3, r7, #24
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fc69 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3c2:	f001 ba94 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff fdba 	bl	800bf44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3d4:	f001 ba8b 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c3d8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c3dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3de:	f001 ba86 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3e2:	4b32      	ldr	r3, [pc, #200]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3ee:	d103      	bne.n	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c3f0:	4b30      	ldr	r3, [pc, #192]	@ (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c3f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3f4:	f001 ba7b 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3fc:	f001 ba77 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c404:	f001 ba73 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c40c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c410:	430b      	orrs	r3, r1
 800c412:	d126      	bne.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c414:	4b25      	ldr	r3, [pc, #148]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c416:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c41a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c41e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c420:	4b22      	ldr	r3, [pc, #136]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c42c:	d106      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	d103      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c434:	4b1f      	ldr	r3, [pc, #124]	@ (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c436:	637b      	str	r3, [r7, #52]	@ 0x34
 800c438:	f001 ba59 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c43c:	4b1b      	ldr	r3, [pc, #108]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c448:	d107      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c450:	d103      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c452:	4b19      	ldr	r3, [pc, #100]	@ (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c454:	637b      	str	r3, [r7, #52]	@ 0x34
 800c456:	f001 ba4a 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45e:	f001 ba46 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c466:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c46a:	430b      	orrs	r3, r1
 800c46c:	d16e      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c46e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c474:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c478:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c480:	d03d      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c488:	d85c      	bhi.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c490:	d014      	beq.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c498:	d854      	bhi.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01f      	beq.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c4a6:	d012      	beq.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c4a8:	e04c      	b.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c4aa:	bf00      	nop
 800c4ac:	46020c00 	.word	0x46020c00
 800c4b0:	0007a120 	.word	0x0007a120
 800c4b4:	00f42400 	.word	0x00f42400
 800c4b8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff fa8b 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4ca:	f001 ba10 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ce:	f107 0318 	add.w	r3, r7, #24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7ff fbdc 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4dc:	f001 ba07 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c4e0:	4ba7      	ldr	r3, [pc, #668]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4ec:	d103      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c4ee:	4ba5      	ldr	r3, [pc, #660]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4f2:	f001 b9fc 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4fa:	f001 b9f8 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c4fe:	4ba0      	ldr	r3, [pc, #640]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 0320 	and.w	r3, r3, #32
 800c506:	2b20      	cmp	r3, #32
 800c508:	d118      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c50a:	4b9d      	ldr	r3, [pc, #628]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c512:	2b00      	cmp	r3, #0
 800c514:	d005      	beq.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c516:	4b9a      	ldr	r3, [pc, #616]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	0e1b      	lsrs	r3, r3, #24
 800c51c:	f003 030f 	and.w	r3, r3, #15
 800c520:	e006      	b.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c522:	4b97      	ldr	r3, [pc, #604]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c528:	041b      	lsls	r3, r3, #16
 800c52a:	0e1b      	lsrs	r3, r3, #24
 800c52c:	f003 030f 	and.w	r3, r3, #15
 800c530:	4a95      	ldr	r2, [pc, #596]	@ (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c536:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c538:	f001 b9d9 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c540:	f001 b9d5 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c548:	f001 b9d1 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c550:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c554:	430b      	orrs	r3, r1
 800c556:	d17f      	bne.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c558:	4b89      	ldr	r3, [pc, #548]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c55a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c55e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c562:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	2b00      	cmp	r3, #0
 800c568:	d165      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c56a:	4b85      	ldr	r3, [pc, #532]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c56c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c570:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c574:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c578:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c57c:	d034      	beq.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c580:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c584:	d853      	bhi.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c58c:	d00b      	beq.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c594:	d84b      	bhi.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d016      	beq.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c5a2:	d009      	beq.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c5a4:	e043      	b.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff fa16 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c5b4:	f001 b99b 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b8:	f107 0318 	add.w	r3, r7, #24
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fb67 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c5c6:	f001 b992 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c5ca:	4b6d      	ldr	r3, [pc, #436]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c5d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5d6:	d103      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c5d8:	4b6a      	ldr	r3, [pc, #424]	@ (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c5da:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c5dc:	f001 b987 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c5e4:	f001 b983 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c5e8:	4b65      	ldr	r3, [pc, #404]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 0320 	and.w	r3, r3, #32
 800c5f0:	2b20      	cmp	r3, #32
 800c5f2:	d118      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c5f4:	4b62      	ldr	r3, [pc, #392]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d005      	beq.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c600:	4b5f      	ldr	r3, [pc, #380]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	0e1b      	lsrs	r3, r3, #24
 800c606:	f003 030f 	and.w	r3, r3, #15
 800c60a:	e006      	b.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c60c:	4b5c      	ldr	r3, [pc, #368]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c60e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c612:	041b      	lsls	r3, r3, #16
 800c614:	0e1b      	lsrs	r3, r3, #24
 800c616:	f003 030f 	and.w	r3, r3, #15
 800c61a:	4a5b      	ldr	r2, [pc, #364]	@ (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c620:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c622:	f001 b964 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c62a:	f001 b960 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c62e:	2300      	movs	r3, #0
 800c630:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c632:	f001 b95c 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c63c:	d108      	bne.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c63e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff f9ca 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c64c:	f001 b94f 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	637b      	str	r3, [r7, #52]	@ 0x34
 800c654:	f001 b94b 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c65c:	1e51      	subs	r1, r2, #1
 800c65e:	430b      	orrs	r3, r1
 800c660:	d136      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c662:	4b47      	ldr	r3, [pc, #284]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c668:	f003 0303 	and.w	r3, r3, #3
 800c66c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	2b00      	cmp	r3, #0
 800c672:	d104      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c674:	f7fe f9cc 	bl	800aa10 <HAL_RCC_GetPCLK2Freq>
 800c678:	6378      	str	r0, [r7, #52]	@ 0x34
 800c67a:	f001 b938 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c680:	2b01      	cmp	r3, #1
 800c682:	d104      	bne.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c684:	f7fe f894 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c688:	6378      	str	r0, [r7, #52]	@ 0x34
 800c68a:	f001 b930 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c68e:	4b3c      	ldr	r3, [pc, #240]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c69a:	d106      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d103      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c6a2:	4b3a      	ldr	r3, [pc, #232]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c6a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6a6:	f001 b922 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c6aa:	4b35      	ldr	r3, [pc, #212]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c6ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d107      	bne.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d104      	bne.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c6be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c4:	f001 b913 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6cc:	f001 b90f 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6d4:	1e91      	subs	r1, r2, #2
 800c6d6:	430b      	orrs	r3, r1
 800c6d8:	d136      	bne.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c6da:	4b29      	ldr	r3, [pc, #164]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c6dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6e0:	f003 030c 	and.w	r3, r3, #12
 800c6e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d104      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c6ec:	f7fe f97c 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800c6f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c6f2:	f001 b8fc 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d104      	bne.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c6fc:	f7fe f858 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c700:	6378      	str	r0, [r7, #52]	@ 0x34
 800c702:	f001 b8f4 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c706:	4b1e      	ldr	r3, [pc, #120]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c70e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c712:	d106      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	2b08      	cmp	r3, #8
 800c718:	d103      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c71a:	4b1c      	ldr	r3, [pc, #112]	@ (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c71e:	f001 b8e6 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c722:	4b17      	ldr	r3, [pc, #92]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c728:	f003 0302 	and.w	r3, r3, #2
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d107      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c732:	2b0c      	cmp	r3, #12
 800c734:	d104      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c73a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c73c:	f001 b8d7 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	@ 0x34
 800c744:	f001 b8d3 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74c:	1f11      	subs	r1, r2, #4
 800c74e:	430b      	orrs	r3, r1
 800c750:	d13f      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c752:	4b0b      	ldr	r3, [pc, #44]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c75c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c760:	2b00      	cmp	r3, #0
 800c762:	d104      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c764:	f7fe f940 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800c768:	6378      	str	r0, [r7, #52]	@ 0x34
 800c76a:	f001 b8c0 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c770:	2b10      	cmp	r3, #16
 800c772:	d10d      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c774:	f7fe f81c 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c778:	6378      	str	r0, [r7, #52]	@ 0x34
 800c77a:	f001 b8b8 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c77e:	bf00      	nop
 800c780:	46020c00 	.word	0x46020c00
 800c784:	02dc6c00 	.word	0x02dc6c00
 800c788:	0801141c 	.word	0x0801141c
 800c78c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c790:	4ba8      	ldr	r3, [pc, #672]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c79c:	d106      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a0:	2b20      	cmp	r3, #32
 800c7a2:	d103      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c7a4:	4ba4      	ldr	r3, [pc, #656]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c7a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7a8:	f001 b8a1 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c7ac:	4ba1      	ldr	r3, [pc, #644]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c7ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d107      	bne.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	2b30      	cmp	r3, #48	@ 0x30
 800c7be:	d104      	bne.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c7c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7c6:	f001 b892 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ce:	f001 b88e 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d6:	f1a2 0108 	sub.w	r1, r2, #8
 800c7da:	430b      	orrs	r3, r1
 800c7dc:	d136      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c7de:	4b95      	ldr	r3, [pc, #596]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c7e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c7e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d104      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c7f0:	f7fe f8fa 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800c7f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c7f6:	f001 b87a 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fc:	2b40      	cmp	r3, #64	@ 0x40
 800c7fe:	d104      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c800:	f7fd ffd6 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c804:	6378      	str	r0, [r7, #52]	@ 0x34
 800c806:	f001 b872 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c80a:	4b8a      	ldr	r3, [pc, #552]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c816:	d106      	bne.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	2b80      	cmp	r3, #128	@ 0x80
 800c81c:	d103      	bne.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c81e:	4b86      	ldr	r3, [pc, #536]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c820:	637b      	str	r3, [r7, #52]	@ 0x34
 800c822:	f001 b864 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c826:	4b83      	ldr	r3, [pc, #524]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c82c:	f003 0302 	and.w	r3, r3, #2
 800c830:	2b02      	cmp	r3, #2
 800c832:	d107      	bne.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	2bc0      	cmp	r3, #192	@ 0xc0
 800c838:	d104      	bne.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c83a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c83e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c840:	f001 b855 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c844:	2300      	movs	r3, #0
 800c846:	637b      	str	r3, [r7, #52]	@ 0x34
 800c848:	f001 b851 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c850:	f1a2 0110 	sub.w	r1, r2, #16
 800c854:	430b      	orrs	r3, r1
 800c856:	d139      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c858:	4b76      	ldr	r3, [pc, #472]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c85a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c85e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c862:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c866:	2b00      	cmp	r3, #0
 800c868:	d104      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c86a:	f7fe f8bd 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800c86e:	6378      	str	r0, [r7, #52]	@ 0x34
 800c870:	f001 b83d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c87a:	d104      	bne.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c87c:	f7fd ff98 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c880:	6378      	str	r0, [r7, #52]	@ 0x34
 800c882:	f001 b834 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c886:	4b6b      	ldr	r3, [pc, #428]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c88e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c892:	d107      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c89a:	d103      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c89c:	4b66      	ldr	r3, [pc, #408]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c89e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8a0:	f001 b825 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c8a4:	4b63      	ldr	r3, [pc, #396]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c8a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d108      	bne.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8b8:	d104      	bne.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c8ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8c0:	f001 b815 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8c8:	f001 b811 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c8d4:	430b      	orrs	r3, r1
 800c8d6:	d139      	bne.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c8d8:	4b56      	ldr	r3, [pc, #344]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c8da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c8de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c8e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d104      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c8ea:	f7fe f87d 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800c8ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800c8f0:	f000 bffd 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8fa:	d104      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c8fc:	f7fd ff58 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c900:	6378      	str	r0, [r7, #52]	@ 0x34
 800c902:	f000 bff4 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c906:	4b4b      	ldr	r3, [pc, #300]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c90e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c912:	d107      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c91a:	d103      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c91c:	4b46      	ldr	r3, [pc, #280]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c920:	f000 bfe5 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c924:	4b43      	ldr	r3, [pc, #268]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c92a:	f003 0302 	and.w	r3, r3, #2
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d108      	bne.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c934:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c938:	d104      	bne.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c93a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c93e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c940:	f000 bfd5 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c944:	2300      	movs	r3, #0
 800c946:	637b      	str	r3, [r7, #52]	@ 0x34
 800c948:	f000 bfd1 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c950:	f1a2 0120 	sub.w	r1, r2, #32
 800c954:	430b      	orrs	r3, r1
 800c956:	d158      	bne.n	800ca0a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c958:	4b36      	ldr	r3, [pc, #216]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c95a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c966:	2b00      	cmp	r3, #0
 800c968:	d104      	bne.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c96a:	f7fe f865 	bl	800aa38 <HAL_RCC_GetPCLK3Freq>
 800c96e:	6378      	str	r0, [r7, #52]	@ 0x34
 800c970:	f000 bfbd 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c976:	2b01      	cmp	r3, #1
 800c978:	d104      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c97a:	f7fd ff19 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800c97e:	6378      	str	r0, [r7, #52]	@ 0x34
 800c980:	f000 bfb5 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c984:	4b2b      	ldr	r3, [pc, #172]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c98c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c990:	d106      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c994:	2b02      	cmp	r3, #2
 800c996:	d103      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c998:	4b27      	ldr	r3, [pc, #156]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c99a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c99c:	f000 bfa7 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c9a0:	4b24      	ldr	r3, [pc, #144]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c9a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c9a6:	f003 0302 	and.w	r3, r3, #2
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d107      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d104      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c9b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ba:	f000 bf98 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c9be:	4b1d      	ldr	r3, [pc, #116]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0320 	and.w	r3, r3, #32
 800c9c6:	2b20      	cmp	r3, #32
 800c9c8:	d11b      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	d118      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9d0:	4b18      	ldr	r3, [pc, #96]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c9dc:	4b15      	ldr	r3, [pc, #84]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	0e1b      	lsrs	r3, r3, #24
 800c9e2:	f003 030f 	and.w	r3, r3, #15
 800c9e6:	e006      	b.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c9e8:	4b12      	ldr	r3, [pc, #72]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c9ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c9ee:	041b      	lsls	r3, r3, #16
 800c9f0:	0e1b      	lsrs	r3, r3, #24
 800c9f2:	f003 030f 	and.w	r3, r3, #15
 800c9f6:	4a11      	ldr	r2, [pc, #68]	@ (800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fe:	f000 bf76 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca06:	f000 bf72 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ca0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca0e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ca12:	430b      	orrs	r3, r1
 800ca14:	d172      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ca16:	4b07      	ldr	r3, [pc, #28]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ca1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ca20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca28:	d10a      	bne.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca2a:	f7fd fec1 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800ca2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca30:	f000 bf5d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca34:	46020c00 	.word	0x46020c00
 800ca38:	00f42400 	.word	0x00f42400
 800ca3c:	0801141c 	.word	0x0801141c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca46:	d108      	bne.n	800ca5a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca48:	f107 0318 	add.w	r3, r7, #24
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7ff f91f 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca56:	f000 bf4a 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d104      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800ca60:	f7fd ffa8 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800ca64:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca66:	f000 bf42 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ca70:	d122      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ca72:	4bb0      	ldr	r3, [pc, #704]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0320 	and.w	r3, r3, #32
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	d118      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca7e:	4bad      	ldr	r3, [pc, #692]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d005      	beq.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800ca8a:	4baa      	ldr	r3, [pc, #680]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	0e1b      	lsrs	r3, r3, #24
 800ca90:	f003 030f 	and.w	r3, r3, #15
 800ca94:	e006      	b.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800ca96:	4ba7      	ldr	r3, [pc, #668]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca9c:	041b      	lsls	r3, r3, #16
 800ca9e:	0e1b      	lsrs	r3, r3, #24
 800caa0:	f003 030f 	and.w	r3, r3, #15
 800caa4:	4aa4      	ldr	r2, [pc, #656]	@ (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800caa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800caac:	f000 bf1f 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab4:	f000 bf1b 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cab8:	4b9e      	ldr	r3, [pc, #632]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cac4:	d107      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cacc:	d103      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cace:	4b9b      	ldr	r3, [pc, #620]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cad0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad2:	f000 bf0c 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cad6:	4b97      	ldr	r3, [pc, #604]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cae2:	d107      	bne.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800cae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800caea:	d103      	bne.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800caec:	4b93      	ldr	r3, [pc, #588]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800caee:	637b      	str	r3, [r7, #52]	@ 0x34
 800caf0:	f000 befd 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800caf4:	2300      	movs	r3, #0
 800caf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800caf8:	f000 bef9 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb00:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cb04:	430b      	orrs	r3, r1
 800cb06:	d158      	bne.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cb08:	4b8a      	ldr	r3, [pc, #552]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cb0e:	f003 0307 	and.w	r3, r3, #7
 800cb12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb16:	2b04      	cmp	r3, #4
 800cb18:	d84b      	bhi.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800cb1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800cb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb20:	0800cb59 	.word	0x0800cb59
 800cb24:	0800cb35 	.word	0x0800cb35
 800cb28:	0800cb47 	.word	0x0800cb47
 800cb2c:	0800cb63 	.word	0x0800cb63
 800cb30:	0800cb6d 	.word	0x0800cb6d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe ff4f 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb42:	f000 bed4 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb46:	f107 030c 	add.w	r3, r7, #12
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff f9fa 	bl	800bf44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb54:	f000 becb 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cb58:	f7fd ff2c 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800cb5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb5e:	f000 bec6 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cb62:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cb66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb68:	f000 bec1 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cb6c:	4b71      	ldr	r3, [pc, #452]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0320 	and.w	r3, r3, #32
 800cb74:	2b20      	cmp	r3, #32
 800cb76:	d118      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb78:	4b6e      	ldr	r3, [pc, #440]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d005      	beq.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800cb84:	4b6b      	ldr	r3, [pc, #428]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	0e1b      	lsrs	r3, r3, #24
 800cb8a:	f003 030f 	and.w	r3, r3, #15
 800cb8e:	e006      	b.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800cb90:	4b68      	ldr	r3, [pc, #416]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cb92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb96:	041b      	lsls	r3, r3, #16
 800cb98:	0e1b      	lsrs	r3, r3, #24
 800cb9a:	f003 030f 	and.w	r3, r3, #15
 800cb9e:	4a66      	ldr	r2, [pc, #408]	@ (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cba6:	f000 bea2 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbae:	f000 be9e 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbb6:	f000 be9a 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800cbba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbbe:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cbc2:	430b      	orrs	r3, r1
 800cbc4:	d167      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cbc6:	4b5b      	ldr	r3, [pc, #364]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cbc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cbcc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cbd0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cbd8:	d036      	beq.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cbe0:	d855      	bhi.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cbe8:	d029      	beq.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cbf0:	d84d      	bhi.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbf8:	d013      	beq.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc00:	d845      	bhi.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d015      	beq.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cc08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc0e:	d13e      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe fee1 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc1e:	f000 be66 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc22:	f107 030c 	add.w	r3, r7, #12
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff f98c 	bl	800bf44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc30:	f000 be5d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cc34:	f7fd febe 	bl	800a9b4 <HAL_RCC_GetHCLKFreq>
 800cc38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cc3a:	f000 be58 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cc3e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cc42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc44:	f000 be53 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cc48:	4b3a      	ldr	r3, [pc, #232]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0320 	and.w	r3, r3, #32
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	d118      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc54:	4b37      	ldr	r3, [pc, #220]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cc60:	4b34      	ldr	r3, [pc, #208]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	0e1b      	lsrs	r3, r3, #24
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	e006      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cc6c:	4b31      	ldr	r3, [pc, #196]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cc6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc72:	041b      	lsls	r3, r3, #16
 800cc74:	0e1b      	lsrs	r3, r3, #24
 800cc76:	f003 030f 	and.w	r3, r3, #15
 800cc7a:	4a2f      	ldr	r2, [pc, #188]	@ (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cc82:	f000 be34 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cc86:	2300      	movs	r3, #0
 800cc88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc8a:	f000 be30 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc92:	f000 be2c 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc9a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cc9e:	430b      	orrs	r3, r1
 800cca0:	d152      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cca2:	4b24      	ldr	r3, [pc, #144]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ccac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ccae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d104      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ccb4:	f7fd fe98 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800ccb8:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccba:	f000 be18 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccc4:	d104      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccc6:	f7fd fd73 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800ccca:	6378      	str	r0, [r7, #52]	@ 0x34
 800cccc:	f000 be0f 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ccd0:	4b18      	ldr	r3, [pc, #96]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccdc:	d107      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cce4:	d103      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800cce6:	4b15      	ldr	r3, [pc, #84]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cce8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccea:	f000 be00 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ccee:	4b11      	ldr	r3, [pc, #68]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d122      	bne.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd00:	d11e      	bne.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd02:	4b0c      	ldr	r3, [pc, #48]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d005      	beq.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800cd0e:	4b09      	ldr	r3, [pc, #36]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	0e1b      	lsrs	r3, r3, #24
 800cd14:	f003 030f 	and.w	r3, r3, #15
 800cd18:	e006      	b.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800cd1a:	4b06      	ldr	r3, [pc, #24]	@ (800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd20:	041b      	lsls	r3, r3, #16
 800cd22:	0e1b      	lsrs	r3, r3, #24
 800cd24:	f003 030f 	and.w	r3, r3, #15
 800cd28:	4a03      	ldr	r2, [pc, #12]	@ (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd30:	f000 bddd 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd34:	46020c00 	.word	0x46020c00
 800cd38:	0801141c 	.word	0x0801141c
 800cd3c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd44:	f000 bdd3 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800cd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800cd50:	430b      	orrs	r3, r1
 800cd52:	d14c      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cd54:	4ba8      	ldr	r3, [pc, #672]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cd5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800cd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d104      	bne.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd66:	f7fd fe3f 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800cd6a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd6c:	f000 bdbf 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800cd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd76:	d104      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd78:	f7fd fd1a 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800cd7c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd7e:	f000 bdb6 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800cd82:	4b9d      	ldr	r3, [pc, #628]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd8e:	d107      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800cd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd96:	d103      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800cd98:	4b98      	ldr	r3, [pc, #608]	@ (800cffc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cd9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd9c:	f000 bda7 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800cda0:	4b95      	ldr	r3, [pc, #596]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0320 	and.w	r3, r3, #32
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d11c      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800cdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdb2:	d118      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdb4:	4b90      	ldr	r3, [pc, #576]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d005      	beq.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800cdc0:	4b8d      	ldr	r3, [pc, #564]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	0e1b      	lsrs	r3, r3, #24
 800cdc6:	f003 030f 	and.w	r3, r3, #15
 800cdca:	e006      	b.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800cdcc:	4b8a      	ldr	r3, [pc, #552]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cdce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdd2:	041b      	lsls	r3, r3, #16
 800cdd4:	0e1b      	lsrs	r3, r3, #24
 800cdd6:	f003 030f 	and.w	r3, r3, #15
 800cdda:	4a89      	ldr	r2, [pc, #548]	@ (800d000 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde2:	f000 bd84 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdea:	f000 bd80 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800cdee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cdf6:	430b      	orrs	r3, r1
 800cdf8:	d158      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cdfa:	4b7f      	ldr	r3, [pc, #508]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cdfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ce04:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce08:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce0a:	d028      	beq.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce10:	d848      	bhi.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ce12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce14:	2b80      	cmp	r3, #128	@ 0x80
 800ce16:	d00e      	beq.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ce18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1a:	2b80      	cmp	r3, #128	@ 0x80
 800ce1c:	d842      	bhi.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ce24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce26:	2b40      	cmp	r3, #64	@ 0x40
 800ce28:	d014      	beq.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ce2a:	e03b      	b.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ce2c:	f7fd fe04 	bl	800aa38 <HAL_RCC_GetPCLK3Freq>
 800ce30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce32:	f000 bd5c 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce36:	4b70      	ldr	r3, [pc, #448]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce42:	d103      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800ce44:	4b6d      	ldr	r3, [pc, #436]	@ (800cffc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ce46:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce48:	f000 bd51 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce50:	f000 bd4d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ce54:	f7fd fcac 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800ce58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce5a:	f000 bd48 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce5e:	4b66      	ldr	r3, [pc, #408]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b20      	cmp	r3, #32
 800ce68:	d118      	bne.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce6a:	4b63      	ldr	r3, [pc, #396]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800ce76:	4b60      	ldr	r3, [pc, #384]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	0e1b      	lsrs	r3, r3, #24
 800ce7c:	f003 030f 	and.w	r3, r3, #15
 800ce80:	e006      	b.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800ce82:	4b5d      	ldr	r3, [pc, #372]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ce84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce88:	041b      	lsls	r3, r3, #16
 800ce8a:	0e1b      	lsrs	r3, r3, #24
 800ce8c:	f003 030f 	and.w	r3, r3, #15
 800ce90:	4a5b      	ldr	r2, [pc, #364]	@ (800d000 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ce92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce98:	f000 bd29 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cea0:	f000 bd25 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800cea4:	2300      	movs	r3, #0
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cea8:	f000 bd21 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ceac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800ceb4:	430b      	orrs	r3, r1
 800ceb6:	d14c      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ceb8:	4b4f      	ldr	r3, [pc, #316]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ceba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cebe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cec2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800cec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d104      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ceca:	f7fd fd8d 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800cece:	6378      	str	r0, [r7, #52]	@ 0x34
 800ced0:	f000 bd0d 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ced4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ceda:	d104      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cedc:	f7fd fc68 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800cee0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cee2:	f000 bd04 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800cee6:	4b44      	ldr	r3, [pc, #272]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ceee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cef2:	d107      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cefa:	d103      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800cefc:	4b3f      	ldr	r3, [pc, #252]	@ (800cffc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cefe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf00:	f000 bcf5 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800cf04:	4b3c      	ldr	r3, [pc, #240]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0320 	and.w	r3, r3, #32
 800cf0c:	2b20      	cmp	r3, #32
 800cf0e:	d11c      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cf16:	d118      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf18:	4b37      	ldr	r3, [pc, #220]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d005      	beq.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800cf24:	4b34      	ldr	r3, [pc, #208]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	0e1b      	lsrs	r3, r3, #24
 800cf2a:	f003 030f 	and.w	r3, r3, #15
 800cf2e:	e006      	b.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800cf30:	4b31      	ldr	r3, [pc, #196]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf36:	041b      	lsls	r3, r3, #16
 800cf38:	0e1b      	lsrs	r3, r3, #24
 800cf3a:	f003 030f 	and.w	r3, r3, #15
 800cf3e:	4a30      	ldr	r2, [pc, #192]	@ (800d000 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cf40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf44:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf46:	f000 bcd2 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4e:	f000 bcce 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800cf52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf56:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800cf5a:	430b      	orrs	r3, r1
 800cf5c:	d152      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800cf5e:	4b26      	ldr	r3, [pc, #152]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf64:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cf68:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d104      	bne.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf70:	f7fd fd3a 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800cf74:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf76:	f000 bcba 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf80:	d104      	bne.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf82:	f7fd fc15 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800cf86:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf88:	f000 bcb1 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800cf8c:	4b1a      	ldr	r3, [pc, #104]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf98:	d107      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cfa0:	d103      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800cfa2:	4b16      	ldr	r3, [pc, #88]	@ (800cffc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cfa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfa6:	f000 bca2 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800cfaa:	4b13      	ldr	r3, [pc, #76]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0320 	and.w	r3, r3, #32
 800cfb2:	2b20      	cmp	r3, #32
 800cfb4:	d11c      	bne.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cfbc:	d118      	bne.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfbe:	4b0e      	ldr	r3, [pc, #56]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d005      	beq.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800cfca:	4b0b      	ldr	r3, [pc, #44]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	0e1b      	lsrs	r3, r3, #24
 800cfd0:	f003 030f 	and.w	r3, r3, #15
 800cfd4:	e006      	b.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800cfd6:	4b08      	ldr	r3, [pc, #32]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cfd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfdc:	041b      	lsls	r3, r3, #16
 800cfde:	0e1b      	lsrs	r3, r3, #24
 800cfe0:	f003 030f 	and.w	r3, r3, #15
 800cfe4:	4a06      	ldr	r2, [pc, #24]	@ (800d000 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfea:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfec:	f000 bc7f 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cff4:	f000 bc7b 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cff8:	46020c00 	.word	0x46020c00
 800cffc:	00f42400 	.word	0x00f42400
 800d000:	0801141c 	.word	0x0801141c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d004:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d008:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d00c:	430b      	orrs	r3, r1
 800d00e:	d14c      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d010:	4ba6      	ldr	r3, [pc, #664]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d016:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d01a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d104      	bne.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d022:	f7fd fce1 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800d026:	6378      	str	r0, [r7, #52]	@ 0x34
 800d028:	f000 bc61 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d032:	d104      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d034:	f7fd fbbc 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d038:	6378      	str	r0, [r7, #52]	@ 0x34
 800d03a:	f000 bc58 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d03e:	4b9b      	ldr	r3, [pc, #620]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d04a:	d107      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d052:	d103      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d054:	4b96      	ldr	r3, [pc, #600]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d056:	637b      	str	r3, [r7, #52]	@ 0x34
 800d058:	f000 bc49 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d05c:	4b93      	ldr	r3, [pc, #588]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	2b20      	cmp	r3, #32
 800d066:	d11c      	bne.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d06e:	d118      	bne.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d070:	4b8e      	ldr	r3, [pc, #568]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d005      	beq.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d07c:	4b8b      	ldr	r3, [pc, #556]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	0e1b      	lsrs	r3, r3, #24
 800d082:	f003 030f 	and.w	r3, r3, #15
 800d086:	e006      	b.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d088:	4b88      	ldr	r3, [pc, #544]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d08a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d08e:	041b      	lsls	r3, r3, #16
 800d090:	0e1b      	lsrs	r3, r3, #24
 800d092:	f003 030f 	and.w	r3, r3, #15
 800d096:	4a87      	ldr	r2, [pc, #540]	@ (800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d09e:	f000 bc26 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0a6:	f000 bc22 	b.w	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d0b2:	430b      	orrs	r3, r1
 800d0b4:	d164      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d0b6:	4b7d      	ldr	r3, [pc, #500]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d0bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d120      	bne.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d0c8:	4b78      	ldr	r3, [pc, #480]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b20      	cmp	r3, #32
 800d0d2:	d117      	bne.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0d4:	4b75      	ldr	r3, [pc, #468]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d005      	beq.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d0e0:	4b72      	ldr	r3, [pc, #456]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	0e1b      	lsrs	r3, r3, #24
 800d0e6:	f003 030f 	and.w	r3, r3, #15
 800d0ea:	e006      	b.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d0ec:	4b6f      	ldr	r3, [pc, #444]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d0ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0f2:	041b      	lsls	r3, r3, #16
 800d0f4:	0e1b      	lsrs	r3, r3, #24
 800d0f6:	f003 030f 	and.w	r3, r3, #15
 800d0fa:	4a6e      	ldr	r2, [pc, #440]	@ (800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d100:	637b      	str	r3, [r7, #52]	@ 0x34
 800d102:	e3f4      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d104:	2300      	movs	r3, #0
 800d106:	637b      	str	r3, [r7, #52]	@ 0x34
 800d108:	e3f1      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d10a:	4b68      	ldr	r3, [pc, #416]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d10c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d118:	d112      	bne.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d120:	d10e      	bne.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d122:	4b62      	ldr	r3, [pc, #392]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d130:	d102      	bne.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d132:	23fa      	movs	r3, #250	@ 0xfa
 800d134:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d136:	e3da      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d138:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d13c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d13e:	e3d6      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d140:	4b5a      	ldr	r3, [pc, #360]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d14c:	d106      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d154:	d102      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d156:	4b56      	ldr	r3, [pc, #344]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d158:	637b      	str	r3, [r7, #52]	@ 0x34
 800d15a:	e3c8      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d15c:	4b53      	ldr	r3, [pc, #332]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d15e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	2b02      	cmp	r3, #2
 800d168:	d107      	bne.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d170:	d103      	bne.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d176:	637b      	str	r3, [r7, #52]	@ 0x34
 800d178:	e3b9      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d17a:	2300      	movs	r3, #0
 800d17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d17e:	e3b6      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d180:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d184:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d188:	430b      	orrs	r3, r1
 800d18a:	d164      	bne.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d18c:	4b47      	ldr	r3, [pc, #284]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d18e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d192:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d196:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d120      	bne.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d19e:	4b43      	ldr	r3, [pc, #268]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0320 	and.w	r3, r3, #32
 800d1a6:	2b20      	cmp	r3, #32
 800d1a8:	d117      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1aa:	4b40      	ldr	r3, [pc, #256]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d005      	beq.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d1b6:	4b3d      	ldr	r3, [pc, #244]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	0e1b      	lsrs	r3, r3, #24
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	e006      	b.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d1c2:	4b3a      	ldr	r3, [pc, #232]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1c8:	041b      	lsls	r3, r3, #16
 800d1ca:	0e1b      	lsrs	r3, r3, #24
 800d1cc:	f003 030f 	and.w	r3, r3, #15
 800d1d0:	4a38      	ldr	r2, [pc, #224]	@ (800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d1d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d8:	e389      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1de:	e386      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d1e0:	4b32      	ldr	r3, [pc, #200]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1ee:	d112      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1f6:	d10e      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d1f8:	4b2c      	ldr	r3, [pc, #176]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d1fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d206:	d102      	bne.n	800d20e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d208:	23fa      	movs	r3, #250	@ 0xfa
 800d20a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d20c:	e36f      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d20e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d212:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d214:	e36b      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d216:	4b25      	ldr	r3, [pc, #148]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d21e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d222:	d106      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d22a:	d102      	bne.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d22c:	4b20      	ldr	r3, [pc, #128]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d230:	e35d      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d232:	4b1e      	ldr	r3, [pc, #120]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d238:	f003 0302 	and.w	r3, r3, #2
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d107      	bne.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d246:	d103      	bne.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d24c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d24e:	e34e      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d250:	2300      	movs	r3, #0
 800d252:	637b      	str	r3, [r7, #52]	@ 0x34
 800d254:	e34b      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d25a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d25e:	430b      	orrs	r3, r1
 800d260:	d14e      	bne.n	800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d262:	4b12      	ldr	r3, [pc, #72]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d268:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d26c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d274:	f7fd fbb8 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800d278:	6378      	str	r0, [r7, #52]	@ 0x34
 800d27a:	e338      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d27c:	4b0b      	ldr	r3, [pc, #44]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d27e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d28a:	d119      	bne.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d292:	d115      	bne.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d294:	4b05      	ldr	r3, [pc, #20]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d29a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d29e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2a2:	d109      	bne.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d2a4:	23fa      	movs	r3, #250	@ 0xfa
 800d2a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d2a8:	e321      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d2aa:	bf00      	nop
 800d2ac:	46020c00 	.word	0x46020c00
 800d2b0:	00f42400 	.word	0x00f42400
 800d2b4:	0801141c 	.word	0x0801141c
      }
      else
      {
        frequency = LSI_VALUE;
 800d2b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d2bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d2be:	e316      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d2c0:	4ba8      	ldr	r3, [pc, #672]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2cc:	d106      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d2d4:	d102      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d2d6:	4ba4      	ldr	r3, [pc, #656]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2da:	e308      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d2dc:	4ba1      	ldr	r3, [pc, #644]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d2de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d2e2:	f003 0302 	and.w	r3, r3, #2
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d107      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d2f0:	d103      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d2f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2f8:	e2f9      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2fe:	e2f6      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d300:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d304:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d308:	430b      	orrs	r3, r1
 800d30a:	d12d      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d30c:	4b95      	ldr	r3, [pc, #596]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d30e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d312:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d316:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d318:	4b92      	ldr	r3, [pc, #584]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d324:	d105      	bne.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d102      	bne.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d32c:	4b8e      	ldr	r3, [pc, #568]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d32e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d330:	e2dd      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d338:	d107      	bne.n	800d34a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d33a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fe fb4c 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	637b      	str	r3, [r7, #52]	@ 0x34
 800d348:	e2d1      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d350:	d107      	bne.n	800d362 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d352:	f107 0318 	add.w	r3, r7, #24
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe fc9a 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d360:	e2c5      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	637b      	str	r3, [r7, #52]	@ 0x34
 800d366:	e2c2      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d36c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d370:	430b      	orrs	r3, r1
 800d372:	d156      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d374:	4b7b      	ldr	r3, [pc, #492]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d37a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d37e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d382:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d386:	d028      	beq.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d38e:	d845      	bhi.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d396:	d013      	beq.n	800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d39e:	d83d      	bhi.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d004      	beq.n	800d3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3ac:	d004      	beq.n	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d3ae:	e035      	b.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d3b0:	f7fd fb2e 	bl	800aa10 <HAL_RCC_GetPCLK2Freq>
 800d3b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d3b6:	e29a      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d3b8:	f7fd f9fa 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d3bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d3be:	e296      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3c0:	4b68      	ldr	r3, [pc, #416]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3cc:	d102      	bne.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d3ce:	4b66      	ldr	r3, [pc, #408]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d3d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d3d2:	e28c      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3d8:	e289      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d3da:	4b62      	ldr	r3, [pc, #392]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b20      	cmp	r3, #32
 800d3e4:	d117      	bne.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3e6:	4b5f      	ldr	r3, [pc, #380]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d005      	beq.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d3f2:	4b5c      	ldr	r3, [pc, #368]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	0e1b      	lsrs	r3, r3, #24
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	e006      	b.n	800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d3fe:	4b59      	ldr	r3, [pc, #356]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d404:	041b      	lsls	r3, r3, #16
 800d406:	0e1b      	lsrs	r3, r3, #24
 800d408:	f003 030f 	and.w	r3, r3, #15
 800d40c:	4a57      	ldr	r2, [pc, #348]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d412:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d414:	e26b      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d41a:	e268      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d41c:	2300      	movs	r3, #0
 800d41e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d420:	e265      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d426:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d42a:	430b      	orrs	r3, r1
 800d42c:	d156      	bne.n	800d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d42e:	4b4d      	ldr	r3, [pc, #308]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d438:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d440:	d028      	beq.n	800d494 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d444:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d448:	d845      	bhi.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d450:	d013      	beq.n	800d47a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d458:	d83d      	bhi.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d466:	d004      	beq.n	800d472 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d468:	e035      	b.n	800d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d46a:	f7fd fabd 	bl	800a9e8 <HAL_RCC_GetPCLK1Freq>
 800d46e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d470:	e23d      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d472:	f7fd f99d 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d476:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d478:	e239      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d47a:	4b3a      	ldr	r3, [pc, #232]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d486:	d102      	bne.n	800d48e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d488:	4b37      	ldr	r3, [pc, #220]	@ (800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d48a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d48c:	e22f      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d48e:	2300      	movs	r3, #0
 800d490:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d492:	e22c      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d494:	4b33      	ldr	r3, [pc, #204]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 0320 	and.w	r3, r3, #32
 800d49c:	2b20      	cmp	r3, #32
 800d49e:	d117      	bne.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4a0:	4b30      	ldr	r3, [pc, #192]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d005      	beq.n	800d4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d4ac:	4b2d      	ldr	r3, [pc, #180]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	0e1b      	lsrs	r3, r3, #24
 800d4b2:	f003 030f 	and.w	r3, r3, #15
 800d4b6:	e006      	b.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d4ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4be:	041b      	lsls	r3, r3, #16
 800d4c0:	0e1b      	lsrs	r3, r3, #24
 800d4c2:	f003 030f 	and.w	r3, r3, #15
 800d4c6:	4a29      	ldr	r2, [pc, #164]	@ (800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d4ce:	e20e      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4d4:	e20b      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4da:	e208      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d4dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4e0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d4e4:	430b      	orrs	r3, r1
 800d4e6:	d17c      	bne.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d4e8:	4b1e      	ldr	r3, [pc, #120]	@ (800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d4ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4ee:	f003 0318 	and.w	r3, r3, #24
 800d4f2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	2b18      	cmp	r3, #24
 800d4f8:	d870      	bhi.n	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d571 	.word	0x0800d571
 800d504:	0800d5dd 	.word	0x0800d5dd
 800d508:	0800d5dd 	.word	0x0800d5dd
 800d50c:	0800d5dd 	.word	0x0800d5dd
 800d510:	0800d5dd 	.word	0x0800d5dd
 800d514:	0800d5dd 	.word	0x0800d5dd
 800d518:	0800d5dd 	.word	0x0800d5dd
 800d51c:	0800d5dd 	.word	0x0800d5dd
 800d520:	0800d579 	.word	0x0800d579
 800d524:	0800d5dd 	.word	0x0800d5dd
 800d528:	0800d5dd 	.word	0x0800d5dd
 800d52c:	0800d5dd 	.word	0x0800d5dd
 800d530:	0800d5dd 	.word	0x0800d5dd
 800d534:	0800d5dd 	.word	0x0800d5dd
 800d538:	0800d5dd 	.word	0x0800d5dd
 800d53c:	0800d5dd 	.word	0x0800d5dd
 800d540:	0800d581 	.word	0x0800d581
 800d544:	0800d5dd 	.word	0x0800d5dd
 800d548:	0800d5dd 	.word	0x0800d5dd
 800d54c:	0800d5dd 	.word	0x0800d5dd
 800d550:	0800d5dd 	.word	0x0800d5dd
 800d554:	0800d5dd 	.word	0x0800d5dd
 800d558:	0800d5dd 	.word	0x0800d5dd
 800d55c:	0800d5dd 	.word	0x0800d5dd
 800d560:	0800d59b 	.word	0x0800d59b
 800d564:	46020c00 	.word	0x46020c00
 800d568:	00f42400 	.word	0x00f42400
 800d56c:	0801141c 	.word	0x0801141c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d570:	f7fd fa62 	bl	800aa38 <HAL_RCC_GetPCLK3Freq>
 800d574:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d576:	e1ba      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d578:	f7fd f91a 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d57c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d57e:	e1b6      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d580:	4b9f      	ldr	r3, [pc, #636]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d58c:	d102      	bne.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d58e:	4b9d      	ldr	r3, [pc, #628]	@ (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d590:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d592:	e1ac      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d594:	2300      	movs	r3, #0
 800d596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d598:	e1a9      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d59a:	4b99      	ldr	r3, [pc, #612]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b20      	cmp	r3, #32
 800d5a4:	d117      	bne.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d5a6:	4b96      	ldr	r3, [pc, #600]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d5b2:	4b93      	ldr	r3, [pc, #588]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	0e1b      	lsrs	r3, r3, #24
 800d5b8:	f003 030f 	and.w	r3, r3, #15
 800d5bc:	e006      	b.n	800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d5be:	4b90      	ldr	r3, [pc, #576]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d5c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5c4:	041b      	lsls	r3, r3, #16
 800d5c6:	0e1b      	lsrs	r3, r3, #24
 800d5c8:	f003 030f 	and.w	r3, r3, #15
 800d5cc:	4a8e      	ldr	r2, [pc, #568]	@ (800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d5d4:	e18b      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5da:	e188      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5e0:	e185      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5e6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d5ea:	430b      	orrs	r3, r1
 800d5ec:	d155      	bne.n	800d69a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d5ee:	4b84      	ldr	r3, [pc, #528]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d5f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d5f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d600:	d013      	beq.n	800d62a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d608:	d844      	bhi.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d610:	d013      	beq.n	800d63a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d618:	d83c      	bhi.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d014      	beq.n	800d64a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d626:	d014      	beq.n	800d652 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d628:	e034      	b.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d62a:	f107 0318 	add.w	r3, r7, #24
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fe fb2e 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d638:	e159      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d63a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fe f9cc 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d646:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d648:	e151      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d64a:	f7fd f8b1 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d64e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d650:	e14d      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d652:	4b6b      	ldr	r3, [pc, #428]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	d117      	bne.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d65e:	4b68      	ldr	r3, [pc, #416]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d005      	beq.n	800d676 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d66a:	4b65      	ldr	r3, [pc, #404]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	0e1b      	lsrs	r3, r3, #24
 800d670:	f003 030f 	and.w	r3, r3, #15
 800d674:	e006      	b.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d676:	4b62      	ldr	r3, [pc, #392]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d67c:	041b      	lsls	r3, r3, #16
 800d67e:	0e1b      	lsrs	r3, r3, #24
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	4a60      	ldr	r2, [pc, #384]	@ (800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d68a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d68c:	e12f      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d68e:	2300      	movs	r3, #0
 800d690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d692:	e12c      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d694:	2300      	movs	r3, #0
 800d696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d698:	e129      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d69a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d69e:	1e59      	subs	r1, r3, #1
 800d6a0:	ea52 0301 	orrs.w	r3, r2, r1
 800d6a4:	d13c      	bne.n	800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d6a6:	4b56      	ldr	r3, [pc, #344]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d6a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6ac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d6b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d6b8:	d027      	beq.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d6c0:	d82b      	bhi.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d6c8:	d017      	beq.n	800d6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d6d0:	d823      	bhi.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d6de:	d004      	beq.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d6e0:	e01b      	b.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d6e2:	f7fd f865 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800d6e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6e8:	e101      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fe f974 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6f8:	e0f9      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6fa:	f107 0318 	add.w	r3, r7, #24
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fe fac6 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d708:	e0f1      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d70a:	f107 030c 	add.w	r3, r7, #12
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fc18 	bl	800bf44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d718:	e0e9      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d71a:	2300      	movs	r3, #0
 800d71c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d71e:	e0e6      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d724:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d728:	430b      	orrs	r3, r1
 800d72a:	d131      	bne.n	800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d72c:	4b34      	ldr	r3, [pc, #208]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d72e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d736:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d738:	4b31      	ldr	r3, [pc, #196]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d73a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d73e:	f003 0302 	and.w	r3, r3, #2
 800d742:	2b02      	cmp	r3, #2
 800d744:	d106      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d103      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d74c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d750:	637b      	str	r3, [r7, #52]	@ 0x34
 800d752:	e0cc      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d754:	4b2a      	ldr	r3, [pc, #168]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d75a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d75e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d762:	d112      	bne.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d76a:	d10e      	bne.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d76c:	4b24      	ldr	r3, [pc, #144]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d76e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d77a:	d102      	bne.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d77c:	23fa      	movs	r3, #250	@ 0xfa
 800d77e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d780:	e0b5      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d782:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d786:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d788:	e0b1      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d78e:	e0ae      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d794:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d798:	430b      	orrs	r3, r1
 800d79a:	d13b      	bne.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d79c:	4b18      	ldr	r3, [pc, #96]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d79e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d7a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d7a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d7a8:	4b15      	ldr	r3, [pc, #84]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d7b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7b4:	d105      	bne.n	800d7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d7bc:	4b13      	ldr	r3, [pc, #76]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d7be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7c0:	e095      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d7c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d7ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7ce:	d106      	bne.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7d6:	d102      	bne.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d7d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7dc:	e087      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d7de:	4b08      	ldr	r3, [pc, #32]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7ea:	d106      	bne.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7f2:	d102      	bne.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d7f4:	4b03      	ldr	r3, [pc, #12]	@ (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7f8:	e079      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7fe:	e076      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d800:	46020c00 	.word	0x46020c00
 800d804:	00f42400 	.word	0x00f42400
 800d808:	0801141c 	.word	0x0801141c
 800d80c:	02dc6c00 	.word	0x02dc6c00
 800d810:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d814:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d818:	1e99      	subs	r1, r3, #2
 800d81a:	ea52 0301 	orrs.w	r3, r2, r1
 800d81e:	d120      	bne.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d820:	4b35      	ldr	r3, [pc, #212]	@ (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d82a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d004      	beq.n	800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d838:	d008      	beq.n	800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d83a:	e00f      	b.n	800d85c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d83c:	f107 030c 	add.w	r3, r7, #12
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe fb7f 	bl	800bf44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d84a:	e050      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d84c:	f107 0318 	add.w	r3, r7, #24
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fa1d 	bl	800bc90 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d85a:	e048      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d860:	e045      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d866:	f1a3 0108 	sub.w	r1, r3, #8
 800d86a:	ea52 0301 	orrs.w	r3, r2, r1
 800d86e:	d13c      	bne.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d870:	4b21      	ldr	r3, [pc, #132]	@ (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d876:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d87a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d87c:	4b1e      	ldr	r3, [pc, #120]	@ (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d888:	d105      	bne.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d102      	bne.n	800d896 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d890:	4b1a      	ldr	r3, [pc, #104]	@ (800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d892:	637b      	str	r3, [r7, #52]	@ 0x34
 800d894:	e02b      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d896:	4b18      	ldr	r3, [pc, #96]	@ (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d89e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8a2:	d106      	bne.n	800d8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d8aa:	d102      	bne.n	800d8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d8ac:	4b14      	ldr	r3, [pc, #80]	@ (800d900 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d8ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8b0:	e01d      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8b8:	d107      	bne.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fe f88c 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8c8:	e011      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d8d0:	d108      	bne.n	800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe f880 	bl	800b9dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8de:	085b      	lsrs	r3, r3, #1
 800d8e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8e2:	e004      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8e8:	e001      	b.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3738      	adds	r7, #56	@ 0x38
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	46020c00 	.word	0x46020c00
 800d8fc:	00f42400 	.word	0x00f42400
 800d900:	007a1200 	.word	0x007a1200

0800d904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d90c:	4b47      	ldr	r3, [pc, #284]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a46      	ldr	r2, [pc, #280]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d916:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d918:	f7f5 f828 	bl	800296c <HAL_GetTick>
 800d91c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d91e:	e008      	b.n	800d932 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d920:	f7f5 f824 	bl	800296c <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d901      	bls.n	800d932 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d92e:	2303      	movs	r3, #3
 800d930:	e077      	b.n	800da22 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d932:	4b3e      	ldr	r3, [pc, #248]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1f0      	bne.n	800d920 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d93e:	4b3b      	ldr	r3, [pc, #236]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d946:	f023 0303 	bic.w	r3, r3, #3
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	6811      	ldr	r1, [r2, #0]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	6852      	ldr	r2, [r2, #4]
 800d952:	3a01      	subs	r2, #1
 800d954:	0212      	lsls	r2, r2, #8
 800d956:	430a      	orrs	r2, r1
 800d958:	4934      	ldr	r1, [pc, #208]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d95a:	4313      	orrs	r3, r2
 800d95c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d95e:	4b33      	ldr	r3, [pc, #204]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d962:	4b33      	ldr	r3, [pc, #204]	@ (800da30 <RCCEx_PLL2_Config+0x12c>)
 800d964:	4013      	ands	r3, r2
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	6892      	ldr	r2, [r2, #8]
 800d96a:	3a01      	subs	r2, #1
 800d96c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	68d2      	ldr	r2, [r2, #12]
 800d974:	3a01      	subs	r2, #1
 800d976:	0252      	lsls	r2, r2, #9
 800d978:	b292      	uxth	r2, r2
 800d97a:	4311      	orrs	r1, r2
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	6912      	ldr	r2, [r2, #16]
 800d980:	3a01      	subs	r2, #1
 800d982:	0412      	lsls	r2, r2, #16
 800d984:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d988:	4311      	orrs	r1, r2
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	6952      	ldr	r2, [r2, #20]
 800d98e:	3a01      	subs	r2, #1
 800d990:	0612      	lsls	r2, r2, #24
 800d992:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d996:	430a      	orrs	r2, r1
 800d998:	4924      	ldr	r1, [pc, #144]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d99a:	4313      	orrs	r3, r2
 800d99c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d99e:	4b23      	ldr	r3, [pc, #140]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a2:	f023 020c 	bic.w	r2, r3, #12
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	4920      	ldr	r1, [pc, #128]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	491c      	ldr	r1, [pc, #112]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d9be:	4b1b      	ldr	r3, [pc, #108]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c2:	4a1a      	ldr	r2, [pc, #104]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9c4:	f023 0310 	bic.w	r3, r3, #16
 800d9c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d9ca:	4b18      	ldr	r3, [pc, #96]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d9d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	69d2      	ldr	r2, [r2, #28]
 800d9da:	00d2      	lsls	r2, r2, #3
 800d9dc:	4913      	ldr	r1, [pc, #76]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d9e2:	4b12      	ldr	r3, [pc, #72]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e6:	4a11      	ldr	r2, [pc, #68]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9e8:	f043 0310 	orr.w	r3, r3, #16
 800d9ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a0e      	ldr	r2, [pc, #56]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800d9f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d9f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d9fa:	f7f4 ffb7 	bl	800296c <HAL_GetTick>
 800d9fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da00:	e008      	b.n	800da14 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da02:	f7f4 ffb3 	bl	800296c <HAL_GetTick>
 800da06:	4602      	mov	r2, r0
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d901      	bls.n	800da14 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800da10:	2303      	movs	r3, #3
 800da12:	e006      	b.n	800da22 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da14:	4b05      	ldr	r3, [pc, #20]	@ (800da2c <RCCEx_PLL2_Config+0x128>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0f0      	beq.n	800da02 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800da20:	2300      	movs	r3, #0

}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	46020c00 	.word	0x46020c00
 800da30:	80800000 	.word	0x80800000

0800da34 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800da3c:	4b47      	ldr	r3, [pc, #284]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a46      	ldr	r2, [pc, #280]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800da42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800da48:	f7f4 ff90 	bl	800296c <HAL_GetTick>
 800da4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da4e:	e008      	b.n	800da62 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da50:	f7f4 ff8c 	bl	800296c <HAL_GetTick>
 800da54:	4602      	mov	r2, r0
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d901      	bls.n	800da62 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e077      	b.n	800db52 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da62:	4b3e      	ldr	r3, [pc, #248]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1f0      	bne.n	800da50 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800da6e:	4b3b      	ldr	r3, [pc, #236]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800da70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800da76:	f023 0303 	bic.w	r3, r3, #3
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	6811      	ldr	r1, [r2, #0]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	6852      	ldr	r2, [r2, #4]
 800da82:	3a01      	subs	r2, #1
 800da84:	0212      	lsls	r2, r2, #8
 800da86:	430a      	orrs	r2, r1
 800da88:	4934      	ldr	r1, [pc, #208]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800da8a:	4313      	orrs	r3, r2
 800da8c:	630b      	str	r3, [r1, #48]	@ 0x30
 800da8e:	4b33      	ldr	r3, [pc, #204]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800da90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da92:	4b33      	ldr	r3, [pc, #204]	@ (800db60 <RCCEx_PLL3_Config+0x12c>)
 800da94:	4013      	ands	r3, r2
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	6892      	ldr	r2, [r2, #8]
 800da9a:	3a01      	subs	r2, #1
 800da9c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	68d2      	ldr	r2, [r2, #12]
 800daa4:	3a01      	subs	r2, #1
 800daa6:	0252      	lsls	r2, r2, #9
 800daa8:	b292      	uxth	r2, r2
 800daaa:	4311      	orrs	r1, r2
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	6912      	ldr	r2, [r2, #16]
 800dab0:	3a01      	subs	r2, #1
 800dab2:	0412      	lsls	r2, r2, #16
 800dab4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dab8:	4311      	orrs	r1, r2
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	6952      	ldr	r2, [r2, #20]
 800dabe:	3a01      	subs	r2, #1
 800dac0:	0612      	lsls	r2, r2, #24
 800dac2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dac6:	430a      	orrs	r2, r1
 800dac8:	4924      	ldr	r1, [pc, #144]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800daca:	4313      	orrs	r3, r2
 800dacc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800dace:	4b23      	ldr	r3, [pc, #140]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800dad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dad2:	f023 020c 	bic.w	r2, r3, #12
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	699b      	ldr	r3, [r3, #24]
 800dada:	4920      	ldr	r1, [pc, #128]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800dadc:	4313      	orrs	r3, r2
 800dade:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800dae0:	4b1e      	ldr	r3, [pc, #120]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800dae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	491c      	ldr	r1, [pc, #112]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800daea:	4313      	orrs	r3, r2
 800daec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800daee:	4b1b      	ldr	r3, [pc, #108]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800daf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daf2:	4a1a      	ldr	r2, [pc, #104]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800daf4:	f023 0310 	bic.w	r3, r3, #16
 800daf8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dafa:	4b18      	ldr	r3, [pc, #96]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800dafc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dafe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800db02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	69d2      	ldr	r2, [r2, #28]
 800db0a:	00d2      	lsls	r2, r2, #3
 800db0c:	4913      	ldr	r1, [pc, #76]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800db0e:	4313      	orrs	r3, r2
 800db10:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800db12:	4b12      	ldr	r3, [pc, #72]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800db14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db16:	4a11      	ldr	r2, [pc, #68]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800db18:	f043 0310 	orr.w	r3, r3, #16
 800db1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800db1e:	4b0f      	ldr	r3, [pc, #60]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a0e      	ldr	r2, [pc, #56]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800db24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800db2a:	f7f4 ff1f 	bl	800296c <HAL_GetTick>
 800db2e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db30:	e008      	b.n	800db44 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db32:	f7f4 ff1b 	bl	800296c <HAL_GetTick>
 800db36:	4602      	mov	r2, r0
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d901      	bls.n	800db44 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800db40:	2303      	movs	r3, #3
 800db42:	e006      	b.n	800db52 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db44:	4b05      	ldr	r3, [pc, #20]	@ (800db5c <RCCEx_PLL3_Config+0x128>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0f0      	beq.n	800db32 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	46020c00 	.word	0x46020c00
 800db60:	80800000 	.word	0x80800000

0800db64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d071      	beq.n	800dc5a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d106      	bne.n	800db90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7f4 fa04 	bl	8001f98 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2202      	movs	r2, #2
 800db94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800db98:	4b32      	ldr	r3, [pc, #200]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	f003 0310 	and.w	r3, r3, #16
 800dba0:	2b10      	cmp	r3, #16
 800dba2:	d051      	beq.n	800dc48 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dba4:	4b2f      	ldr	r3, [pc, #188]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dba6:	22ca      	movs	r2, #202	@ 0xca
 800dba8:	625a      	str	r2, [r3, #36]	@ 0x24
 800dbaa:	4b2e      	ldr	r3, [pc, #184]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbac:	2253      	movs	r2, #83	@ 0x53
 800dbae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 f88b 	bl	800dccc <RTC_EnterInitMode>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d13f      	bne.n	800dc40 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800dbc0:	4b28      	ldr	r3, [pc, #160]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbc2:	699b      	ldr	r3, [r3, #24]
 800dbc4:	4a27      	ldr	r2, [pc, #156]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbc6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800dbca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbce:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800dbd0:	4b24      	ldr	r3, [pc, #144]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbd2:	699a      	ldr	r2, [r3, #24]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6859      	ldr	r1, [r3, #4]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	4319      	orrs	r1, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	430b      	orrs	r3, r1
 800dbe4:	491f      	ldr	r1, [pc, #124]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68da      	ldr	r2, [r3, #12]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	041b      	lsls	r3, r3, #16
 800dbf4:	491b      	ldr	r1, [pc, #108]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800dbfa:	4b1a      	ldr	r3, [pc, #104]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0a:	430b      	orrs	r3, r1
 800dc0c:	4915      	ldr	r1, [pc, #84]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f896 	bl	800dd44 <RTC_ExitInitMode>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10e      	bne.n	800dc40 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800dc22:	4b10      	ldr	r3, [pc, #64]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a19      	ldr	r1, [r3, #32]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	69db      	ldr	r3, [r3, #28]
 800dc32:	4319      	orrs	r1, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	430b      	orrs	r3, r1
 800dc3a:	490a      	ldr	r1, [pc, #40]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc40:	4b08      	ldr	r3, [pc, #32]	@ (800dc64 <HAL_RTC_Init+0x100>)
 800dc42:	22ff      	movs	r2, #255	@ 0xff
 800dc44:	625a      	str	r2, [r3, #36]	@ 0x24
 800dc46:	e001      	b.n	800dc4c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d103      	bne.n	800dc5a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	46007800 	.word	0x46007800

0800dc68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dc70:	4b15      	ldr	r3, [pc, #84]	@ (800dcc8 <HAL_RTC_WaitForSynchro+0x60>)
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	4a14      	ldr	r2, [pc, #80]	@ (800dcc8 <HAL_RTC_WaitForSynchro+0x60>)
 800dc76:	f023 0320 	bic.w	r3, r3, #32
 800dc7a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dc7c:	f7f4 fe76 	bl	800296c <HAL_GetTick>
 800dc80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dc82:	e013      	b.n	800dcac <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc84:	f7f4 fe72 	bl	800296c <HAL_GetTick>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc92:	d90b      	bls.n	800dcac <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dc94:	4b0c      	ldr	r3, [pc, #48]	@ (800dcc8 <HAL_RTC_WaitForSynchro+0x60>)
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	f003 0320 	and.w	r3, r3, #32
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10c      	bne.n	800dcba <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2203      	movs	r2, #3
 800dca4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	e008      	b.n	800dcbe <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dcac:	4b06      	ldr	r3, [pc, #24]	@ (800dcc8 <HAL_RTC_WaitForSynchro+0x60>)
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	f003 0320 	and.w	r3, r3, #32
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d0e5      	beq.n	800dc84 <HAL_RTC_WaitForSynchro+0x1c>
 800dcb8:	e000      	b.n	800dcbc <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800dcba:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	46007800 	.word	0x46007800

0800dccc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dcd8:	4b19      	ldr	r3, [pc, #100]	@ (800dd40 <RTC_EnterInitMode+0x74>)
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d128      	bne.n	800dd36 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dce4:	4b16      	ldr	r3, [pc, #88]	@ (800dd40 <RTC_EnterInitMode+0x74>)
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	4a15      	ldr	r2, [pc, #84]	@ (800dd40 <RTC_EnterInitMode+0x74>)
 800dcea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcee:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800dcf0:	f7f4 fe3c 	bl	800296c <HAL_GetTick>
 800dcf4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dcf6:	e013      	b.n	800dd20 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dcf8:	f7f4 fe38 	bl	800296c <HAL_GetTick>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dd06:	d90b      	bls.n	800dd20 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dd08:	4b0d      	ldr	r3, [pc, #52]	@ (800dd40 <RTC_EnterInitMode+0x74>)
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10f      	bne.n	800dd34 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800dd14:	2303      	movs	r3, #3
 800dd16:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2203      	movs	r2, #3
 800dd1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd20:	4b07      	ldr	r3, [pc, #28]	@ (800dd40 <RTC_EnterInitMode+0x74>)
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d104      	bne.n	800dd36 <RTC_EnterInitMode+0x6a>
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d1e2      	bne.n	800dcf8 <RTC_EnterInitMode+0x2c>
 800dd32:	e000      	b.n	800dd36 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800dd34:	bf00      	nop
        }
      }
    }
  }

  return status;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	46007800 	.word	0x46007800

0800dd44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dd50:	4b1a      	ldr	r3, [pc, #104]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	4a19      	ldr	r2, [pc, #100]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800dd56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd5a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dd5c:	4b17      	ldr	r3, [pc, #92]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800dd5e:	699b      	ldr	r3, [r3, #24]
 800dd60:	f003 0320 	and.w	r3, r3, #32
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10c      	bne.n	800dd82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff ff7d 	bl	800dc68 <HAL_RTC_WaitForSynchro>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d01e      	beq.n	800ddb2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2203      	movs	r2, #3
 800dd78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	73fb      	strb	r3, [r7, #15]
 800dd80:	e017      	b.n	800ddb2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dd82:	4b0e      	ldr	r3, [pc, #56]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	4a0d      	ldr	r2, [pc, #52]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800dd88:	f023 0320 	bic.w	r3, r3, #32
 800dd8c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7ff ff6a 	bl	800dc68 <HAL_RTC_WaitForSynchro>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d005      	beq.n	800dda6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2203      	movs	r2, #3
 800dd9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800dda2:	2303      	movs	r3, #3
 800dda4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dda6:	4b05      	ldr	r3, [pc, #20]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	4a04      	ldr	r2, [pc, #16]	@ (800ddbc <RTC_ExitInitMode+0x78>)
 800ddac:	f043 0320 	orr.w	r3, r3, #32
 800ddb0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	46007800 	.word	0x46007800

0800ddc0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	4910      	ldr	r1, [pc, #64]	@ (800de14 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	689a      	ldr	r2, [r3, #8]
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	431a      	orrs	r2, r3
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	490c      	ldr	r1, [pc, #48]	@ (800de18 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800dde8:	4313      	orrs	r3, r2
 800ddea:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ddec:	4b0a      	ldr	r3, [pc, #40]	@ (800de18 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ddee:	6a1b      	ldr	r3, [r3, #32]
 800ddf0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	6919      	ldr	r1, [r3, #16]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	695b      	ldr	r3, [r3, #20]
 800ddfc:	041b      	lsls	r3, r3, #16
 800ddfe:	430b      	orrs	r3, r1
 800de00:	4905      	ldr	r1, [pc, #20]	@ (800de18 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800de02:	4313      	orrs	r3, r2
 800de04:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	46007800 	.word	0x46007800
 800de18:	46007c00 	.word	0x46007c00

0800de1c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d904      	bls.n	800de3a <HAL_SAI_InitProtocol+0x1e>
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	3b03      	subs	r3, #3
 800de34:	2b01      	cmp	r3, #1
 800de36:	d812      	bhi.n	800de5e <HAL_SAI_InitProtocol+0x42>
 800de38:	e008      	b.n	800de4c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	68b9      	ldr	r1, [r7, #8]
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 fc05 	bl	800e650 <SAI_InitI2S>
 800de46:	4603      	mov	r3, r0
 800de48:	75fb      	strb	r3, [r7, #23]
      break;
 800de4a:	e00b      	b.n	800de64 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	68b9      	ldr	r1, [r7, #8]
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f000 fcae 	bl	800e7b4 <SAI_InitPCM>
 800de58:	4603      	mov	r3, r0
 800de5a:	75fb      	strb	r3, [r7, #23]
      break;
 800de5c:	e002      	b.n	800de64 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	75fb      	strb	r3, [r7, #23]
      break;
 800de62:	bf00      	nop
  }

  if (status == HAL_OK)
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d104      	bne.n	800de74 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f000 f808 	bl	800de80 <HAL_SAI_Init>
 800de70:	4603      	mov	r3, r0
 800de72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800de74:	7dfb      	ldrb	r3, [r7, #23]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08a      	sub	sp, #40	@ 0x28
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d101      	bne.n	800de92 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e1ce      	b.n	800e230 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d10e      	bne.n	800deba <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a83      	ldr	r2, [pc, #524]	@ (800e0b0 <HAL_SAI_Init+0x230>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d107      	bne.n	800deb6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d103      	bne.n	800deb6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e1ba      	b.n	800e230 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d106      	bne.n	800ded4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7f4 fa12 	bl	80022f8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fda9 	bl	800ea2c <SAI_Disable>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d001      	beq.n	800dee4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e1a5      	b.n	800e230 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2202      	movs	r2, #2
 800dee8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	2b02      	cmp	r3, #2
 800def2:	d00c      	beq.n	800df0e <HAL_SAI_Init+0x8e>
 800def4:	2b02      	cmp	r3, #2
 800def6:	d80d      	bhi.n	800df14 <HAL_SAI_Init+0x94>
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <HAL_SAI_Init+0x82>
 800defc:	2b01      	cmp	r3, #1
 800defe:	d003      	beq.n	800df08 <HAL_SAI_Init+0x88>
 800df00:	e008      	b.n	800df14 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800df06:	e008      	b.n	800df1a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800df08:	2310      	movs	r3, #16
 800df0a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800df0c:	e005      	b.n	800df1a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800df0e:	2320      	movs	r3, #32
 800df10:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800df12:	e002      	b.n	800df1a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800df18:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	2b03      	cmp	r3, #3
 800df20:	d81d      	bhi.n	800df5e <HAL_SAI_Init+0xde>
 800df22:	a201      	add	r2, pc, #4	@ (adr r2, 800df28 <HAL_SAI_Init+0xa8>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800df39 	.word	0x0800df39
 800df2c:	0800df3f 	.word	0x0800df3f
 800df30:	0800df47 	.word	0x0800df47
 800df34:	0800df4f 	.word	0x0800df4f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800df38:	2300      	movs	r3, #0
 800df3a:	61fb      	str	r3, [r7, #28]
      break;
 800df3c:	e012      	b.n	800df64 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800df3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df42:	61fb      	str	r3, [r7, #28]
      break;
 800df44:	e00e      	b.n	800df64 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800df46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800df4a:	61fb      	str	r3, [r7, #28]
      break;
 800df4c:	e00a      	b.n	800df64 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800df4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800df52:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800df54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df56:	f043 0301 	orr.w	r3, r3, #1
 800df5a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800df5c:	e002      	b.n	800df64 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	61fb      	str	r3, [r7, #28]
      break;
 800df62:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a51      	ldr	r2, [pc, #324]	@ (800e0b0 <HAL_SAI_Init+0x230>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d004      	beq.n	800df78 <HAL_SAI_Init+0xf8>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a50      	ldr	r2, [pc, #320]	@ (800e0b4 <HAL_SAI_Init+0x234>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d103      	bne.n	800df80 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800df78:	4a4f      	ldr	r2, [pc, #316]	@ (800e0b8 <HAL_SAI_Init+0x238>)
 800df7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	e002      	b.n	800df86 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800df80:	4a4e      	ldr	r2, [pc, #312]	@ (800e0bc <HAL_SAI_Init+0x23c>)
 800df82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df84:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d077      	beq.n	800e07e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a47      	ldr	r2, [pc, #284]	@ (800e0b0 <HAL_SAI_Init+0x230>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d004      	beq.n	800dfa2 <HAL_SAI_Init+0x122>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a45      	ldr	r2, [pc, #276]	@ (800e0b4 <HAL_SAI_Init+0x234>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d107      	bne.n	800dfb2 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dfa2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dfa6:	f04f 0100 	mov.w	r1, #0
 800dfaa:	f7fe f925 	bl	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800dfae:	61b8      	str	r0, [r7, #24]
 800dfb0:	e006      	b.n	800dfc0 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dfb2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dfb6:	f04f 0100 	mov.w	r1, #0
 800dfba:	f7fe f91d 	bl	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800dfbe:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dfc8:	d120      	bne.n	800e00c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfce:	2b04      	cmp	r3, #4
 800dfd0:	d102      	bne.n	800dfd8 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800dfd2:	2340      	movs	r3, #64	@ 0x40
 800dfd4:	613b      	str	r3, [r7, #16]
 800dfd6:	e00a      	b.n	800dfee <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfdc:	2b08      	cmp	r3, #8
 800dfde:	d103      	bne.n	800dfe8 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800dfe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfe4:	613b      	str	r3, [r7, #16]
 800dfe6:	e002      	b.n	800dfee <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfec:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800dfee:	69ba      	ldr	r2, [r7, #24]
 800dff0:	4613      	mov	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	4619      	mov	r1, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	fb02 f303 	mul.w	r3, r2, r3
 800e004:	fbb1 f3f3 	udiv	r3, r1, r3
 800e008:	617b      	str	r3, [r7, #20]
 800e00a:	e017      	b.n	800e03c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e014:	d101      	bne.n	800e01a <HAL_SAI_Init+0x19a>
 800e016:	2302      	movs	r3, #2
 800e018:	e000      	b.n	800e01c <HAL_SAI_Init+0x19c>
 800e01a:	2301      	movs	r3, #1
 800e01c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e01e:	69ba      	ldr	r2, [r7, #24]
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	4619      	mov	r1, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	fb02 f303 	mul.w	r3, r2, r3
 800e034:	021b      	lsls	r3, r3, #8
 800e036:	fbb1 f3f3 	udiv	r3, r1, r3
 800e03a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	4a20      	ldr	r2, [pc, #128]	@ (800e0c0 <HAL_SAI_Init+0x240>)
 800e040:	fba2 2303 	umull	r2, r3, r2, r3
 800e044:	08da      	lsrs	r2, r3, #3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e04a:	6979      	ldr	r1, [r7, #20]
 800e04c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0c0 <HAL_SAI_Init+0x240>)
 800e04e:	fba3 2301 	umull	r2, r3, r3, r1
 800e052:	08da      	lsrs	r2, r3, #3
 800e054:	4613      	mov	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	1aca      	subs	r2, r1, r3
 800e05e:	2a08      	cmp	r2, #8
 800e060:	d904      	bls.n	800e06c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e070:	2b04      	cmp	r3, #4
 800e072:	d104      	bne.n	800e07e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e078:	085a      	lsrs	r2, r3, #1
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <HAL_SAI_Init+0x20e>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d109      	bne.n	800e0a2 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <HAL_SAI_Init+0x21a>
 800e096:	2300      	movs	r3, #0
 800e098:	e001      	b.n	800e09e <HAL_SAI_Init+0x21e>
 800e09a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e09e:	623b      	str	r3, [r7, #32]
 800e0a0:	e012      	b.n	800e0c8 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d10c      	bne.n	800e0c4 <HAL_SAI_Init+0x244>
 800e0aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e0ae:	e00a      	b.n	800e0c6 <HAL_SAI_Init+0x246>
 800e0b0:	40015404 	.word	0x40015404
 800e0b4:	40015424 	.word	0x40015424
 800e0b8:	40015400 	.word	0x40015400
 800e0bc:	40015800 	.word	0x40015800
 800e0c0:	cccccccd 	.word	0xcccccccd
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6819      	ldr	r1, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	4b59      	ldr	r3, [pc, #356]	@ (800e238 <HAL_SAI_Init+0x3b8>)
 800e0d4:	400b      	ands	r3, r1
 800e0d6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6819      	ldr	r1, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685a      	ldr	r2, [r3, #4]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e0ec:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0f2:	431a      	orrs	r2, r3
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e100:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	695b      	ldr	r3, [r3, #20]
 800e106:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e10c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e112:	051b      	lsls	r3, r3, #20
 800e114:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e11a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	430a      	orrs	r2, r1
 800e128:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	6812      	ldr	r2, [r2, #0]
 800e134:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e138:	f023 030f 	bic.w	r3, r3, #15
 800e13c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6859      	ldr	r1, [r3, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	69da      	ldr	r2, [r3, #28]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e14c:	431a      	orrs	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e152:	431a      	orrs	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	430a      	orrs	r2, r1
 800e15a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6899      	ldr	r1, [r3, #8]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	4b35      	ldr	r3, [pc, #212]	@ (800e23c <HAL_SAI_Init+0x3bc>)
 800e168:	400b      	ands	r3, r1
 800e16a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6899      	ldr	r1, [r3, #8]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e176:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e17c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e182:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e188:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e18e:	3b01      	subs	r3, #1
 800e190:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e192:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	430a      	orrs	r2, r1
 800e19a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68d9      	ldr	r1, [r3, #12]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e1aa:	400b      	ands	r3, r1
 800e1ac:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68d9      	ldr	r1, [r3, #12]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1bc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1c2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e1c4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	021b      	lsls	r3, r3, #8
 800e1ce:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	430a      	orrs	r2, r1
 800e1d6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a18      	ldr	r2, [pc, #96]	@ (800e240 <HAL_SAI_Init+0x3c0>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d119      	bne.n	800e216 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e1e2:	4b18      	ldr	r3, [pc, #96]	@ (800e244 <HAL_SAI_Init+0x3c4>)
 800e1e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1e6:	4a17      	ldr	r2, [pc, #92]	@ (800e244 <HAL_SAI_Init+0x3c4>)
 800e1e8:	f023 0301 	bic.w	r3, r3, #1
 800e1ec:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d10e      	bne.n	800e216 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e200:	3b01      	subs	r3, #1
 800e202:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e204:	490f      	ldr	r1, [pc, #60]	@ (800e244 <HAL_SAI_Init+0x3c4>)
 800e206:	4313      	orrs	r3, r2
 800e208:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e20a:	4b0e      	ldr	r3, [pc, #56]	@ (800e244 <HAL_SAI_Init+0x3c4>)
 800e20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e20e:	4a0d      	ldr	r2, [pc, #52]	@ (800e244 <HAL_SAI_Init+0x3c4>)
 800e210:	f043 0301 	orr.w	r3, r3, #1
 800e214:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3728      	adds	r7, #40	@ 0x28
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	f005c010 	.word	0xf005c010
 800e23c:	fff88000 	.word	0xfff88000
 800e240:	40015404 	.word	0x40015404
 800e244:	40015400 	.word	0x40015400

0800e248 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	603b      	str	r3, [r7, #0]
 800e254:	4613      	mov	r3, r2
 800e256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e258:	f7f4 fb88 	bl	800296c <HAL_GetTick>
 800e25c:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <HAL_SAI_Transmit+0x22>
 800e264:	88fb      	ldrh	r3, [r7, #6]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d101      	bne.n	800e26e <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 800e26a:	2301      	movs	r3, #1
 800e26c:	e0ee      	b.n	800e44c <HAL_SAI_Transmit+0x204>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b01      	cmp	r3, #1
 800e278:	f040 80e7 	bne.w	800e44a <HAL_SAI_Transmit+0x202>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e282:	2b01      	cmp	r3, #1
 800e284:	d101      	bne.n	800e28a <HAL_SAI_Transmit+0x42>
 800e286:	2302      	movs	r3, #2
 800e288:	e0e0      	b.n	800e44c <HAL_SAI_Transmit+0x204>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->XferSize = Size;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	88fa      	ldrh	r2, [r7, #6]
 800e296:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	88fa      	ldrh	r2, [r7, #6]
 800e29e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->pBuffPtr = pData;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2212      	movs	r2, #18
 800e2ac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f040 80b1 	bne.w	800e42a <HAL_SAI_Transmit+0x1e2>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f000 faf5 	bl	800e8b8 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e2dc:	601a      	str	r2, [r3, #0]
    }

    while (hsai->XferCount > 0U)
 800e2de:	e0a4      	b.n	800e42a <HAL_SAI_Transmit+0x1e2>
    {
      /* Write data if the FIFO is not full */
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	695b      	ldr	r3, [r3, #20]
 800e2e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e2ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e2ee:	d06b      	beq.n	800e3c8 <HAL_SAI_Transmit+0x180>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2f4:	2b40      	cmp	r3, #64	@ 0x40
 800e2f6:	d10f      	bne.n	800e318 <HAL_SAI_Transmit+0xd0>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10b      	bne.n	800e318 <HAL_SAI_Transmit+0xd0>
        {
          hsai->Instance->DR = *hsai->pBuffPtr;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr++;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	679a      	str	r2, [r3, #120]	@ 0x78
 800e316:	e04e      	b.n	800e3b6 <HAL_SAI_Transmit+0x16e>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e31c:	2b80      	cmp	r3, #128	@ 0x80
 800e31e:	d819      	bhi.n	800e354 <HAL_SAI_Transmit+0x10c>
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e32c:	1c5a      	adds	r2, r3, #1
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	679a      	str	r2, [r3, #120]	@ 0x78
          hsai->Instance->DR = temp;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	693a      	ldr	r2, [r7, #16]
 800e350:	61da      	str	r2, [r3, #28]
 800e352:	e030      	b.n	800e3b6 <HAL_SAI_Transmit+0x16e>
        }
        else
        {
          temp = (uint32_t)(*hsai->pBuffPtr);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	021b      	lsls	r3, r3, #8
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	4313      	orrs	r3, r2
 800e372:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e378:	1c5a      	adds	r2, r3, #1
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	041b      	lsls	r3, r3, #16
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	4313      	orrs	r3, r2
 800e38a:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	679a      	str	r2, [r3, #120]	@ 0x78
          temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	061b      	lsls	r3, r3, #24
 800e39e:	693a      	ldr	r2, [r7, #16]
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	613b      	str	r3, [r7, #16]
          hsai->pBuffPtr++;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	679a      	str	r2, [r3, #120]	@ 0x78
          hsai->Instance->DR = temp;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	693a      	ldr	r2, [r7, #16]
 800e3b4:	61da      	str	r2, [r3, #28]
        }
        hsai->XferCount--;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
 800e3c6:	e030      	b.n	800e42a <HAL_SAI_Transmit+0x1e2>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800e3c8:	f7f4 fad0 	bl	800296c <HAL_GetTick>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d302      	bcc.n	800e3de <HAL_SAI_Transmit+0x196>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d125      	bne.n	800e42a <HAL_SAI_Transmit+0x1e2>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e4:	d021      	beq.n	800e42a <HAL_SAI_Transmit+0x1e2>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fe:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fb13 	bl	800ea2c <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f042 0208 	orr.w	r2, r2, #8
 800e414:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2201      	movs	r2, #1
 800e41a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

          return HAL_ERROR;
 800e426:	2301      	movs	r3, #1
 800e428:	e010      	b.n	800e44c <HAL_SAI_Transmit+0x204>
    while (hsai->XferCount > 0U)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e430:	2b00      	cmp	r3, #0
 800e432:	f47f af55 	bne.w	800e2e0 <HAL_SAI_Transmit+0x98>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	e000      	b.n	800e44c <HAL_SAI_Transmit+0x204>
  }
  else
  {
    return HAL_BUSY;
 800e44a:	2302      	movs	r3, #2
  }
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b086      	sub	sp, #24
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	4613      	mov	r3, r2
 800e460:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <HAL_SAI_Receive_DMA+0x1a>
 800e468:	88fb      	ldrh	r3, [r7, #6]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d101      	bne.n	800e472 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e0c6      	b.n	800e600 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	f040 80bf 	bne.w	800e5fe <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e486:	2b01      	cmp	r3, #1
 800e488:	d101      	bne.n	800e48e <HAL_SAI_Receive_DMA+0x3a>
 800e48a:	2302      	movs	r3, #2
 800e48c:	e0b8      	b.n	800e600 <HAL_SAI_Receive_DMA+0x1ac>
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2201      	movs	r2, #1
 800e492:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	88fa      	ldrh	r2, [r7, #6]
 800e4a0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	88fa      	ldrh	r2, [r7, #6]
 800e4a8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2222      	movs	r2, #34	@ 0x22
 800e4b8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4c2:	4a51      	ldr	r2, [pc, #324]	@ (800e608 <HAL_SAI_Receive_DMA+0x1b4>)
 800e4c4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4cc:	4a4f      	ldr	r2, [pc, #316]	@ (800e60c <HAL_SAI_Receive_DMA+0x1b8>)
 800e4ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4d6:	4a4e      	ldr	r2, [pc, #312]	@ (800e610 <HAL_SAI_Receive_DMA+0x1bc>)
 800e4d8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4e8:	2b40      	cmp	r3, #64	@ 0x40
 800e4ea:	d106      	bne.n	800e4fa <HAL_SAI_Receive_DMA+0xa6>
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d102      	bne.n	800e4fa <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e4f4:	88fb      	ldrh	r3, [r7, #6]
 800e4f6:	613b      	str	r3, [r7, #16]
 800e4f8:	e00a      	b.n	800e510 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4fe:	2b80      	cmp	r3, #128	@ 0x80
 800e500:	d803      	bhi.n	800e50a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e502:	88fb      	ldrh	r3, [r7, #6]
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	613b      	str	r3, [r7, #16]
 800e508:	e002      	b.n	800e510 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e50a:	88fb      	ldrh	r3, [r7, #6]
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d02d      	beq.n	800e57c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d021      	beq.n	800e570 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	693a      	ldr	r2, [r7, #16]
 800e538:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f103 021c 	add.w	r2, r3, #28
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e564:	4618      	mov	r0, r3
 800e566:	f7f7 fe9f 	bl	80062a8 <HAL_DMAEx_List_Start_IT>
 800e56a:	4603      	mov	r3, r0
 800e56c:	75fb      	strb	r3, [r7, #23]
 800e56e:	e014      	b.n	800e59a <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	e041      	b.n	800e600 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	331c      	adds	r3, #28
 800e588:	4619      	mov	r1, r3
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e58e:	461a      	mov	r2, r3
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f7f6 fef7 	bl	8005384 <HAL_DMA_Start_IT>
 800e596:	4603      	mov	r3, r0
 800e598:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d005      	beq.n	800e5ac <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e029      	b.n	800e600 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 fa05 	bl	800e9be <SAI_InterruptFlag>
 800e5b4:	4601      	mov	r1, r0
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	691a      	ldr	r2, [r3, #16]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	430a      	orrs	r2, r1
 800e5c2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e5d2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d107      	bne.n	800e5f2 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e5f0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e000      	b.n	800e600 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e5fe:	2302      	movs	r3, #2
  }
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	0800eaff 	.word	0x0800eaff
 800e60c:	0800eaa1 	.word	0x0800eaa1
 800e610:	0800eb1b 	.word	0x0800eb1b

0800e614 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
 800e65c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <SAI_InitI2S+0x2e>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d103      	bne.n	800e686 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	651a      	str	r2, [r3, #80]	@ 0x50
 800e684:	e002      	b.n	800e68c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2201      	movs	r2, #1
 800e68a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e692:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e69a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e077      	b.n	800e7a6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d107      	bne.n	800e6cc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e6c8:	665a      	str	r2, [r3, #100]	@ 0x64
 800e6ca:	e006      	b.n	800e6da <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e6d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b03      	cmp	r3, #3
 800e6de:	d84f      	bhi.n	800e780 <SAI_InitI2S+0x130>
 800e6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e8 <SAI_InitI2S+0x98>)
 800e6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e6:	bf00      	nop
 800e6e8:	0800e6f9 	.word	0x0800e6f9
 800e6ec:	0800e71b 	.word	0x0800e71b
 800e6f0:	0800e73d 	.word	0x0800e73d
 800e6f4:	0800e75f 	.word	0x0800e75f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2280      	movs	r2, #128	@ 0x80
 800e6fc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	085b      	lsrs	r3, r3, #1
 800e702:	015a      	lsls	r2, r3, #5
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	085b      	lsrs	r3, r3, #1
 800e70c:	011a      	lsls	r2, r3, #4
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2240      	movs	r2, #64	@ 0x40
 800e716:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e718:	e035      	b.n	800e786 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2280      	movs	r2, #128	@ 0x80
 800e71e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	085b      	lsrs	r3, r3, #1
 800e724:	019a      	lsls	r2, r3, #6
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	085b      	lsrs	r3, r3, #1
 800e72e:	015a      	lsls	r2, r3, #5
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2280      	movs	r2, #128	@ 0x80
 800e738:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e73a:	e024      	b.n	800e786 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	22c0      	movs	r2, #192	@ 0xc0
 800e740:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	085b      	lsrs	r3, r3, #1
 800e746:	019a      	lsls	r2, r3, #6
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	085b      	lsrs	r3, r3, #1
 800e750:	015a      	lsls	r2, r3, #5
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2280      	movs	r2, #128	@ 0x80
 800e75a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e75c:	e013      	b.n	800e786 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	22e0      	movs	r2, #224	@ 0xe0
 800e762:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	085b      	lsrs	r3, r3, #1
 800e768:	019a      	lsls	r2, r3, #6
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	085b      	lsrs	r3, r3, #1
 800e772:	015a      	lsls	r2, r3, #5
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2280      	movs	r2, #128	@ 0x80
 800e77c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e77e:	e002      	b.n	800e786 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	75fb      	strb	r3, [r7, #23]
      break;
 800e784:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d10b      	bne.n	800e7a4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d102      	bne.n	800e798 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2210      	movs	r2, #16
 800e796:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	d102      	bne.n	800e7a4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2208      	movs	r2, #8
 800e7a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	371c      	adds	r7, #28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop

0800e7b4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b087      	sub	sp, #28
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <SAI_InitPCM+0x2e>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d103      	bne.n	800e7ea <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	651a      	str	r2, [r3, #80]	@ 0x50
 800e7e8:	e002      	b.n	800e7f0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e7fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e804:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2200      	movs	r2, #0
 800e80a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e818:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d103      	bne.n	800e828 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2201      	movs	r2, #1
 800e824:	659a      	str	r2, [r3, #88]	@ 0x58
 800e826:	e002      	b.n	800e82e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	220d      	movs	r2, #13
 800e82c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b03      	cmp	r3, #3
 800e832:	d837      	bhi.n	800e8a4 <SAI_InitPCM+0xf0>
 800e834:	a201      	add	r2, pc, #4	@ (adr r2, 800e83c <SAI_InitPCM+0x88>)
 800e836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83a:	bf00      	nop
 800e83c:	0800e84d 	.word	0x0800e84d
 800e840:	0800e863 	.word	0x0800e863
 800e844:	0800e879 	.word	0x0800e879
 800e848:	0800e88f 	.word	0x0800e88f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2280      	movs	r2, #128	@ 0x80
 800e850:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	011a      	lsls	r2, r3, #4
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2240      	movs	r2, #64	@ 0x40
 800e85e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e860:	e023      	b.n	800e8aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2280      	movs	r2, #128	@ 0x80
 800e866:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	015a      	lsls	r2, r3, #5
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2280      	movs	r2, #128	@ 0x80
 800e874:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e876:	e018      	b.n	800e8aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	22c0      	movs	r2, #192	@ 0xc0
 800e87c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	015a      	lsls	r2, r3, #5
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2280      	movs	r2, #128	@ 0x80
 800e88a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e88c:	e00d      	b.n	800e8aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	22e0      	movs	r2, #224	@ 0xe0
 800e892:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2280      	movs	r2, #128	@ 0x80
 800e8a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e8a2:	e002      	b.n	800e8aa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	75fb      	strb	r3, [r7, #23]
      break;
 800e8a8:	bf00      	nop
  }

  return status;
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	371c      	adds	r7, #28
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  /* fill the fifo with data before to enabled the SAI */
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800e8c0:	e06a      	b.n	800e998 <SAI_FillFifo+0xe0>
  {
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8c6:	2b40      	cmp	r3, #64	@ 0x40
 800e8c8:	d10f      	bne.n	800e8ea <SAI_FillFifo+0x32>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d10b      	bne.n	800e8ea <SAI_FillFifo+0x32>
    {
      hsai->Instance->DR = *hsai->pBuffPtr;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8d6:	781a      	ldrb	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr++;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	679a      	str	r2, [r3, #120]	@ 0x78
 800e8e8:	e04e      	b.n	800e988 <SAI_FillFifo+0xd0>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8ee:	2b80      	cmp	r3, #128	@ 0x80
 800e8f0:	d819      	bhi.n	800e926 <SAI_FillFifo+0x6e>
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8fe:	1c5a      	adds	r2, r3, #1
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	021b      	lsls	r3, r3, #8
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	4313      	orrs	r3, r2
 800e910:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e916:	1c5a      	adds	r2, r3, #1
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsai->Instance->DR = temp;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	61da      	str	r2, [r3, #28]
 800e924:	e030      	b.n	800e988 <SAI_FillFifo+0xd0>
    }
    else
    {
      temp = (uint32_t)(*hsai->pBuffPtr);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e932:	1c5a      	adds	r2, r3, #1
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 8);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	021b      	lsls	r3, r3, #8
 800e940:	68fa      	ldr	r2, [r7, #12]
 800e942:	4313      	orrs	r3, r2
 800e944:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e94a:	1c5a      	adds	r2, r3, #1
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 16);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	041b      	lsls	r3, r3, #16
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	4313      	orrs	r3, r2
 800e95c:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e962:	1c5a      	adds	r2, r3, #1
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	679a      	str	r2, [r3, #120]	@ 0x78
      temp |= ((uint32_t)(*hsai->pBuffPtr) << 24);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	061b      	lsls	r3, r3, #24
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	4313      	orrs	r3, r2
 800e974:	60fb      	str	r3, [r7, #12]
      hsai->pBuffPtr++;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsai->Instance->DR = temp;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	61da      	str	r2, [r3, #28]
    }
    hsai->XferCount--;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e98e:	3b01      	subs	r3, #1
 800e990:	b29a      	uxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
  while (((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0U))
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	695b      	ldr	r3, [r3, #20]
 800e99e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e9a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e9a6:	d004      	beq.n	800e9b2 <SAI_FillFifo+0xfa>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d187      	bne.n	800e8c2 <SAI_FillFifo+0xa>
  }
}
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e9be:	b480      	push	{r7}
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e9ce:	78fb      	ldrb	r3, [r7, #3]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d103      	bne.n	800e9dc <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f043 0308 	orr.w	r3, r3, #8
 800e9da:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9e0:	2b08      	cmp	r3, #8
 800e9e2:	d10b      	bne.n	800e9fc <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d003      	beq.n	800e9f4 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d103      	bne.n	800e9fc <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f043 0310 	orr.w	r3, r3, #16
 800e9fa:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d003      	beq.n	800ea0c <SAI_InterruptFlag+0x4e>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	d104      	bne.n	800ea16 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e003      	b.n	800ea1e <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f043 0304 	orr.w	r3, r3, #4
 800ea1c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ea34:	4b18      	ldr	r3, [pc, #96]	@ (800ea98 <SAI_Disable+0x6c>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a18      	ldr	r2, [pc, #96]	@ (800ea9c <SAI_Disable+0x70>)
 800ea3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea3e:	0b1b      	lsrs	r3, r3, #12
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ea44:	2300      	movs	r3, #0
 800ea46:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ea56:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10a      	bne.n	800ea74 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ea6e:	2303      	movs	r3, #3
 800ea70:	72fb      	strb	r3, [r7, #11]
      break;
 800ea72:	e009      	b.n	800ea88 <SAI_Disable+0x5c>
    }
    count--;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3b01      	subs	r3, #1
 800ea78:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e7      	bne.n	800ea58 <SAI_Disable+0x2c>

  return status;
 800ea88:	7afb      	ldrb	r3, [r7, #11]
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	20000000 	.word	0x20000000
 800ea9c:	95cbec1b 	.word	0x95cbec1b

0800eaa0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eaac:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eab2:	2b81      	cmp	r3, #129	@ 0x81
 800eab4:	d01c      	beq.n	800eaf0 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eac4:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800eace:	2100      	movs	r1, #0
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f7ff ff74 	bl	800e9be <SAI_InterruptFlag>
 800ead6:	4603      	mov	r3, r0
 800ead8:	43d9      	mvns	r1, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	691a      	ldr	r2, [r3, #16]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	400a      	ands	r2, r1
 800eae6:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f7ff fd8f 	bl	800e614 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eaf6:	bf00      	nop
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f7ff fd8b 	bl	800e628 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb12:	bf00      	nop
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b084      	sub	sp, #16
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb26:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eb46:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f7ff ff6f 	bl	800ea2c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f7ff fd6c 	bl	800e63c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb64:	bf00      	nop
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e049      	b.n	800ec12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7f3 fa4c 	bl	8002030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3304      	adds	r3, #4
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f000 f94a 	bl	800ee44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
	...

0800ec1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d101      	bne.n	800ec3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ec36:	2302      	movs	r3, #2
 800ec38:	e0ff      	b.n	800ee3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2b14      	cmp	r3, #20
 800ec46:	f200 80f0 	bhi.w	800ee2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ec4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800eca5 	.word	0x0800eca5
 800ec54:	0800ee2b 	.word	0x0800ee2b
 800ec58:	0800ee2b 	.word	0x0800ee2b
 800ec5c:	0800ee2b 	.word	0x0800ee2b
 800ec60:	0800ece5 	.word	0x0800ece5
 800ec64:	0800ee2b 	.word	0x0800ee2b
 800ec68:	0800ee2b 	.word	0x0800ee2b
 800ec6c:	0800ee2b 	.word	0x0800ee2b
 800ec70:	0800ed27 	.word	0x0800ed27
 800ec74:	0800ee2b 	.word	0x0800ee2b
 800ec78:	0800ee2b 	.word	0x0800ee2b
 800ec7c:	0800ee2b 	.word	0x0800ee2b
 800ec80:	0800ed67 	.word	0x0800ed67
 800ec84:	0800ee2b 	.word	0x0800ee2b
 800ec88:	0800ee2b 	.word	0x0800ee2b
 800ec8c:	0800ee2b 	.word	0x0800ee2b
 800ec90:	0800eda9 	.word	0x0800eda9
 800ec94:	0800ee2b 	.word	0x0800ee2b
 800ec98:	0800ee2b 	.word	0x0800ee2b
 800ec9c:	0800ee2b 	.word	0x0800ee2b
 800eca0:	0800ede9 	.word	0x0800ede9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f000 f9d0 	bl	800f050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	699a      	ldr	r2, [r3, #24]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f042 0208 	orr.w	r2, r2, #8
 800ecbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	699a      	ldr	r2, [r3, #24]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f022 0204 	bic.w	r2, r2, #4
 800ecce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6999      	ldr	r1, [r3, #24]
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	691a      	ldr	r2, [r3, #16]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	430a      	orrs	r2, r1
 800ece0:	619a      	str	r2, [r3, #24]
      break;
 800ece2:	e0a5      	b.n	800ee30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	68b9      	ldr	r1, [r7, #8]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 fa72 	bl	800f1d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	699a      	ldr	r2, [r3, #24]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	699a      	ldr	r2, [r3, #24]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	6999      	ldr	r1, [r3, #24]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	021a      	lsls	r2, r3, #8
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	430a      	orrs	r2, r1
 800ed22:	619a      	str	r2, [r3, #24]
      break;
 800ed24:	e084      	b.n	800ee30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68b9      	ldr	r1, [r7, #8]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 fb01 	bl	800f334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	69da      	ldr	r2, [r3, #28]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f042 0208 	orr.w	r2, r2, #8
 800ed40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	69da      	ldr	r2, [r3, #28]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f022 0204 	bic.w	r2, r2, #4
 800ed50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	69d9      	ldr	r1, [r3, #28]
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	691a      	ldr	r2, [r3, #16]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	430a      	orrs	r2, r1
 800ed62:	61da      	str	r2, [r3, #28]
      break;
 800ed64:	e064      	b.n	800ee30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68b9      	ldr	r1, [r7, #8]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 fb8f 	bl	800f490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69da      	ldr	r2, [r3, #28]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	69da      	ldr	r2, [r3, #28]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69d9      	ldr	r1, [r3, #28]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	021a      	lsls	r2, r3, #8
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	430a      	orrs	r2, r1
 800eda4:	61da      	str	r2, [r3, #28]
      break;
 800eda6:	e043      	b.n	800ee30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68b9      	ldr	r1, [r7, #8]
 800edae:	4618      	mov	r0, r3
 800edb0:	f000 fc1e 	bl	800f5f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f042 0208 	orr.w	r2, r2, #8
 800edc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f022 0204 	bic.w	r2, r2, #4
 800edd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	691a      	ldr	r2, [r3, #16]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	430a      	orrs	r2, r1
 800ede4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ede6:	e023      	b.n	800ee30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68b9      	ldr	r1, [r7, #8]
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 fc80 	bl	800f6f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ee02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	691b      	ldr	r3, [r3, #16]
 800ee1e:	021a      	lsls	r2, r3, #8
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	430a      	orrs	r2, r1
 800ee26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ee28:	e002      	b.n	800ee30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop

0800ee44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a6e      	ldr	r2, [pc, #440]	@ (800f010 <TIM_Base_SetConfig+0x1cc>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d02b      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a6d      	ldr	r2, [pc, #436]	@ (800f014 <TIM_Base_SetConfig+0x1d0>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d027      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee6a:	d023      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee72:	d01f      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a68      	ldr	r2, [pc, #416]	@ (800f018 <TIM_Base_SetConfig+0x1d4>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d01b      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4a67      	ldr	r2, [pc, #412]	@ (800f01c <TIM_Base_SetConfig+0x1d8>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d017      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4a66      	ldr	r2, [pc, #408]	@ (800f020 <TIM_Base_SetConfig+0x1dc>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d013      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a65      	ldr	r2, [pc, #404]	@ (800f024 <TIM_Base_SetConfig+0x1e0>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d00f      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4a64      	ldr	r2, [pc, #400]	@ (800f028 <TIM_Base_SetConfig+0x1e4>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d00b      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a63      	ldr	r2, [pc, #396]	@ (800f02c <TIM_Base_SetConfig+0x1e8>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d007      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a62      	ldr	r2, [pc, #392]	@ (800f030 <TIM_Base_SetConfig+0x1ec>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d003      	beq.n	800eeb4 <TIM_Base_SetConfig+0x70>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a61      	ldr	r2, [pc, #388]	@ (800f034 <TIM_Base_SetConfig+0x1f0>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d108      	bne.n	800eec6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eeba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	68fa      	ldr	r2, [r7, #12]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4a51      	ldr	r2, [pc, #324]	@ (800f010 <TIM_Base_SetConfig+0x1cc>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d043      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a50      	ldr	r2, [pc, #320]	@ (800f014 <TIM_Base_SetConfig+0x1d0>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d03f      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eedc:	d03b      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eee4:	d037      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a4b      	ldr	r2, [pc, #300]	@ (800f018 <TIM_Base_SetConfig+0x1d4>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d033      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4a4a      	ldr	r2, [pc, #296]	@ (800f01c <TIM_Base_SetConfig+0x1d8>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d02f      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4a49      	ldr	r2, [pc, #292]	@ (800f020 <TIM_Base_SetConfig+0x1dc>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d02b      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a48      	ldr	r2, [pc, #288]	@ (800f024 <TIM_Base_SetConfig+0x1e0>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d027      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a47      	ldr	r2, [pc, #284]	@ (800f028 <TIM_Base_SetConfig+0x1e4>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d023      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a46      	ldr	r2, [pc, #280]	@ (800f02c <TIM_Base_SetConfig+0x1e8>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d01f      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a45      	ldr	r2, [pc, #276]	@ (800f030 <TIM_Base_SetConfig+0x1ec>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d01b      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a44      	ldr	r2, [pc, #272]	@ (800f034 <TIM_Base_SetConfig+0x1f0>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d017      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a43      	ldr	r2, [pc, #268]	@ (800f038 <TIM_Base_SetConfig+0x1f4>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d013      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a42      	ldr	r2, [pc, #264]	@ (800f03c <TIM_Base_SetConfig+0x1f8>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d00f      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a41      	ldr	r2, [pc, #260]	@ (800f040 <TIM_Base_SetConfig+0x1fc>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d00b      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a40      	ldr	r2, [pc, #256]	@ (800f044 <TIM_Base_SetConfig+0x200>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d007      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a3f      	ldr	r2, [pc, #252]	@ (800f048 <TIM_Base_SetConfig+0x204>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d003      	beq.n	800ef56 <TIM_Base_SetConfig+0x112>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a3e      	ldr	r2, [pc, #248]	@ (800f04c <TIM_Base_SetConfig+0x208>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d108      	bne.n	800ef68 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	4313      	orrs	r3, r2
 800ef66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	4313      	orrs	r3, r2
 800ef74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	689a      	ldr	r2, [r3, #8]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a20      	ldr	r2, [pc, #128]	@ (800f010 <TIM_Base_SetConfig+0x1cc>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d023      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a1f      	ldr	r2, [pc, #124]	@ (800f014 <TIM_Base_SetConfig+0x1d0>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d01f      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4a24      	ldr	r2, [pc, #144]	@ (800f030 <TIM_Base_SetConfig+0x1ec>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d01b      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4a23      	ldr	r2, [pc, #140]	@ (800f034 <TIM_Base_SetConfig+0x1f0>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d017      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a22      	ldr	r2, [pc, #136]	@ (800f038 <TIM_Base_SetConfig+0x1f4>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d013      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4a21      	ldr	r2, [pc, #132]	@ (800f03c <TIM_Base_SetConfig+0x1f8>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d00f      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a20      	ldr	r2, [pc, #128]	@ (800f040 <TIM_Base_SetConfig+0x1fc>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d00b      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a1f      	ldr	r2, [pc, #124]	@ (800f044 <TIM_Base_SetConfig+0x200>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d007      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a1e      	ldr	r2, [pc, #120]	@ (800f048 <TIM_Base_SetConfig+0x204>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d003      	beq.n	800efdc <TIM_Base_SetConfig+0x198>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a1d      	ldr	r2, [pc, #116]	@ (800f04c <TIM_Base_SetConfig+0x208>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d103      	bne.n	800efe4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	691a      	ldr	r2, [r3, #16]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d105      	bne.n	800f002 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	f023 0201 	bic.w	r2, r3, #1
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	611a      	str	r2, [r3, #16]
  }
}
 800f002:	bf00      	nop
 800f004:	3714      	adds	r7, #20
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	40012c00 	.word	0x40012c00
 800f014:	50012c00 	.word	0x50012c00
 800f018:	40000400 	.word	0x40000400
 800f01c:	50000400 	.word	0x50000400
 800f020:	40000800 	.word	0x40000800
 800f024:	50000800 	.word	0x50000800
 800f028:	40000c00 	.word	0x40000c00
 800f02c:	50000c00 	.word	0x50000c00
 800f030:	40013400 	.word	0x40013400
 800f034:	50013400 	.word	0x50013400
 800f038:	40014000 	.word	0x40014000
 800f03c:	50014000 	.word	0x50014000
 800f040:	40014400 	.word	0x40014400
 800f044:	50014400 	.word	0x50014400
 800f048:	40014800 	.word	0x40014800
 800f04c:	50014800 	.word	0x50014800

0800f050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f050:	b480      	push	{r7}
 800f052:	b087      	sub	sp, #28
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a1b      	ldr	r3, [r3, #32]
 800f05e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a1b      	ldr	r3, [r3, #32]
 800f064:	f023 0201 	bic.w	r2, r3, #1
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f07e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f023 0303 	bic.w	r3, r3, #3
 800f08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	4313      	orrs	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f023 0302 	bic.w	r3, r3, #2
 800f09c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a40      	ldr	r2, [pc, #256]	@ (800f1ac <TIM_OC1_SetConfig+0x15c>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d023      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a3f      	ldr	r2, [pc, #252]	@ (800f1b0 <TIM_OC1_SetConfig+0x160>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d01f      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a3e      	ldr	r2, [pc, #248]	@ (800f1b4 <TIM_OC1_SetConfig+0x164>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d01b      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a3d      	ldr	r2, [pc, #244]	@ (800f1b8 <TIM_OC1_SetConfig+0x168>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d017      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a3c      	ldr	r2, [pc, #240]	@ (800f1bc <TIM_OC1_SetConfig+0x16c>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d013      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a3b      	ldr	r2, [pc, #236]	@ (800f1c0 <TIM_OC1_SetConfig+0x170>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d00f      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a3a      	ldr	r2, [pc, #232]	@ (800f1c4 <TIM_OC1_SetConfig+0x174>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d00b      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a39      	ldr	r2, [pc, #228]	@ (800f1c8 <TIM_OC1_SetConfig+0x178>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d007      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a38      	ldr	r2, [pc, #224]	@ (800f1cc <TIM_OC1_SetConfig+0x17c>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d003      	beq.n	800f0f8 <TIM_OC1_SetConfig+0xa8>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4a37      	ldr	r2, [pc, #220]	@ (800f1d0 <TIM_OC1_SetConfig+0x180>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d10c      	bne.n	800f112 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	f023 0308 	bic.w	r3, r3, #8
 800f0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	4313      	orrs	r3, r2
 800f108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	f023 0304 	bic.w	r3, r3, #4
 800f110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4a25      	ldr	r2, [pc, #148]	@ (800f1ac <TIM_OC1_SetConfig+0x15c>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d023      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4a24      	ldr	r2, [pc, #144]	@ (800f1b0 <TIM_OC1_SetConfig+0x160>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d01f      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a23      	ldr	r2, [pc, #140]	@ (800f1b4 <TIM_OC1_SetConfig+0x164>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d01b      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4a22      	ldr	r2, [pc, #136]	@ (800f1b8 <TIM_OC1_SetConfig+0x168>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d017      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a21      	ldr	r2, [pc, #132]	@ (800f1bc <TIM_OC1_SetConfig+0x16c>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d013      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a20      	ldr	r2, [pc, #128]	@ (800f1c0 <TIM_OC1_SetConfig+0x170>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d00f      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a1f      	ldr	r2, [pc, #124]	@ (800f1c4 <TIM_OC1_SetConfig+0x174>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00b      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a1e      	ldr	r2, [pc, #120]	@ (800f1c8 <TIM_OC1_SetConfig+0x178>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d007      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a1d      	ldr	r2, [pc, #116]	@ (800f1cc <TIM_OC1_SetConfig+0x17c>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d003      	beq.n	800f162 <TIM_OC1_SetConfig+0x112>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a1c      	ldr	r2, [pc, #112]	@ (800f1d0 <TIM_OC1_SetConfig+0x180>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d111      	bne.n	800f186 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	695b      	ldr	r3, [r3, #20]
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	4313      	orrs	r3, r2
 800f17a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	699b      	ldr	r3, [r3, #24]
 800f180:	693a      	ldr	r2, [r7, #16]
 800f182:	4313      	orrs	r3, r2
 800f184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	693a      	ldr	r2, [r7, #16]
 800f18a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	685a      	ldr	r2, [r3, #4]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	621a      	str	r2, [r3, #32]
}
 800f1a0:	bf00      	nop
 800f1a2:	371c      	adds	r7, #28
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr
 800f1ac:	40012c00 	.word	0x40012c00
 800f1b0:	50012c00 	.word	0x50012c00
 800f1b4:	40013400 	.word	0x40013400
 800f1b8:	50013400 	.word	0x50013400
 800f1bc:	40014000 	.word	0x40014000
 800f1c0:	50014000 	.word	0x50014000
 800f1c4:	40014400 	.word	0x40014400
 800f1c8:	50014400 	.word	0x50014400
 800f1cc:	40014800 	.word	0x40014800
 800f1d0:	50014800 	.word	0x50014800

0800f1d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b087      	sub	sp, #28
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6a1b      	ldr	r3, [r3, #32]
 800f1e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a1b      	ldr	r3, [r3, #32]
 800f1e8:	f023 0210 	bic.w	r2, r3, #16
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	699b      	ldr	r3, [r3, #24]
 800f1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f20e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	021b      	lsls	r3, r3, #8
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	4313      	orrs	r3, r2
 800f21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	f023 0320 	bic.w	r3, r3, #32
 800f222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	011b      	lsls	r3, r3, #4
 800f22a:	697a      	ldr	r2, [r7, #20]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a36      	ldr	r2, [pc, #216]	@ (800f30c <TIM_OC2_SetConfig+0x138>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d00b      	beq.n	800f250 <TIM_OC2_SetConfig+0x7c>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a35      	ldr	r2, [pc, #212]	@ (800f310 <TIM_OC2_SetConfig+0x13c>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d007      	beq.n	800f250 <TIM_OC2_SetConfig+0x7c>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a34      	ldr	r2, [pc, #208]	@ (800f314 <TIM_OC2_SetConfig+0x140>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d003      	beq.n	800f250 <TIM_OC2_SetConfig+0x7c>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4a33      	ldr	r2, [pc, #204]	@ (800f318 <TIM_OC2_SetConfig+0x144>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d10d      	bne.n	800f26c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	011b      	lsls	r3, r3, #4
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	4313      	orrs	r3, r2
 800f262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f26a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a27      	ldr	r2, [pc, #156]	@ (800f30c <TIM_OC2_SetConfig+0x138>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d023      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a26      	ldr	r2, [pc, #152]	@ (800f310 <TIM_OC2_SetConfig+0x13c>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d01f      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a25      	ldr	r2, [pc, #148]	@ (800f314 <TIM_OC2_SetConfig+0x140>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d01b      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a24      	ldr	r2, [pc, #144]	@ (800f318 <TIM_OC2_SetConfig+0x144>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d017      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a23      	ldr	r2, [pc, #140]	@ (800f31c <TIM_OC2_SetConfig+0x148>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d013      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a22      	ldr	r2, [pc, #136]	@ (800f320 <TIM_OC2_SetConfig+0x14c>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00f      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a21      	ldr	r2, [pc, #132]	@ (800f324 <TIM_OC2_SetConfig+0x150>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d00b      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a20      	ldr	r2, [pc, #128]	@ (800f328 <TIM_OC2_SetConfig+0x154>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d007      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a1f      	ldr	r2, [pc, #124]	@ (800f32c <TIM_OC2_SetConfig+0x158>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d003      	beq.n	800f2bc <TIM_OC2_SetConfig+0xe8>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a1e      	ldr	r2, [pc, #120]	@ (800f330 <TIM_OC2_SetConfig+0x15c>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d113      	bne.n	800f2e4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	695b      	ldr	r3, [r3, #20]
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	699b      	ldr	r3, [r3, #24]
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	693a      	ldr	r2, [r7, #16]
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	693a      	ldr	r2, [r7, #16]
 800f2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	685a      	ldr	r2, [r3, #4]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	697a      	ldr	r2, [r7, #20]
 800f2fc:	621a      	str	r2, [r3, #32]
}
 800f2fe:	bf00      	nop
 800f300:	371c      	adds	r7, #28
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	40012c00 	.word	0x40012c00
 800f310:	50012c00 	.word	0x50012c00
 800f314:	40013400 	.word	0x40013400
 800f318:	50013400 	.word	0x50013400
 800f31c:	40014000 	.word	0x40014000
 800f320:	50014000 	.word	0x50014000
 800f324:	40014400 	.word	0x40014400
 800f328:	50014400 	.word	0x50014400
 800f32c:	40014800 	.word	0x40014800
 800f330:	50014800 	.word	0x50014800

0800f334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a1b      	ldr	r3, [r3, #32]
 800f348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	69db      	ldr	r3, [r3, #28]
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f023 0303 	bic.w	r3, r3, #3
 800f36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	4313      	orrs	r3, r2
 800f378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	021b      	lsls	r3, r3, #8
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a35      	ldr	r2, [pc, #212]	@ (800f468 <TIM_OC3_SetConfig+0x134>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d00b      	beq.n	800f3ae <TIM_OC3_SetConfig+0x7a>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a34      	ldr	r2, [pc, #208]	@ (800f46c <TIM_OC3_SetConfig+0x138>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d007      	beq.n	800f3ae <TIM_OC3_SetConfig+0x7a>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a33      	ldr	r2, [pc, #204]	@ (800f470 <TIM_OC3_SetConfig+0x13c>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d003      	beq.n	800f3ae <TIM_OC3_SetConfig+0x7a>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a32      	ldr	r2, [pc, #200]	@ (800f474 <TIM_OC3_SetConfig+0x140>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d10d      	bne.n	800f3ca <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f3b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	021b      	lsls	r3, r3, #8
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f3c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a26      	ldr	r2, [pc, #152]	@ (800f468 <TIM_OC3_SetConfig+0x134>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d023      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a25      	ldr	r2, [pc, #148]	@ (800f46c <TIM_OC3_SetConfig+0x138>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d01f      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4a24      	ldr	r2, [pc, #144]	@ (800f470 <TIM_OC3_SetConfig+0x13c>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d01b      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4a23      	ldr	r2, [pc, #140]	@ (800f474 <TIM_OC3_SetConfig+0x140>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d017      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4a22      	ldr	r2, [pc, #136]	@ (800f478 <TIM_OC3_SetConfig+0x144>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d013      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4a21      	ldr	r2, [pc, #132]	@ (800f47c <TIM_OC3_SetConfig+0x148>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d00f      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a20      	ldr	r2, [pc, #128]	@ (800f480 <TIM_OC3_SetConfig+0x14c>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d00b      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a1f      	ldr	r2, [pc, #124]	@ (800f484 <TIM_OC3_SetConfig+0x150>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d007      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4a1e      	ldr	r2, [pc, #120]	@ (800f488 <TIM_OC3_SetConfig+0x154>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d003      	beq.n	800f41a <TIM_OC3_SetConfig+0xe6>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4a1d      	ldr	r2, [pc, #116]	@ (800f48c <TIM_OC3_SetConfig+0x158>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d113      	bne.n	800f442 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	011b      	lsls	r3, r3, #4
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	4313      	orrs	r3, r2
 800f434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	699b      	ldr	r3, [r3, #24]
 800f43a:	011b      	lsls	r3, r3, #4
 800f43c:	693a      	ldr	r2, [r7, #16]
 800f43e:	4313      	orrs	r3, r2
 800f440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	693a      	ldr	r2, [r7, #16]
 800f446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	697a      	ldr	r2, [r7, #20]
 800f45a:	621a      	str	r2, [r3, #32]
}
 800f45c:	bf00      	nop
 800f45e:	371c      	adds	r7, #28
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	40012c00 	.word	0x40012c00
 800f46c:	50012c00 	.word	0x50012c00
 800f470:	40013400 	.word	0x40013400
 800f474:	50013400 	.word	0x50013400
 800f478:	40014000 	.word	0x40014000
 800f47c:	50014000 	.word	0x50014000
 800f480:	40014400 	.word	0x40014400
 800f484:	50014400 	.word	0x50014400
 800f488:	40014800 	.word	0x40014800
 800f48c:	50014800 	.word	0x50014800

0800f490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f490:	b480      	push	{r7}
 800f492:	b087      	sub	sp, #28
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a1b      	ldr	r3, [r3, #32]
 800f49e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6a1b      	ldr	r3, [r3, #32]
 800f4a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	69db      	ldr	r3, [r3, #28]
 800f4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f4be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	021b      	lsls	r3, r3, #8
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f4de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	689b      	ldr	r3, [r3, #8]
 800f4e4:	031b      	lsls	r3, r3, #12
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a36      	ldr	r2, [pc, #216]	@ (800f5c8 <TIM_OC4_SetConfig+0x138>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d00b      	beq.n	800f50c <TIM_OC4_SetConfig+0x7c>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a35      	ldr	r2, [pc, #212]	@ (800f5cc <TIM_OC4_SetConfig+0x13c>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d007      	beq.n	800f50c <TIM_OC4_SetConfig+0x7c>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a34      	ldr	r2, [pc, #208]	@ (800f5d0 <TIM_OC4_SetConfig+0x140>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d003      	beq.n	800f50c <TIM_OC4_SetConfig+0x7c>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a33      	ldr	r2, [pc, #204]	@ (800f5d4 <TIM_OC4_SetConfig+0x144>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d10d      	bne.n	800f528 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	031b      	lsls	r3, r3, #12
 800f51a:	697a      	ldr	r2, [r7, #20]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a27      	ldr	r2, [pc, #156]	@ (800f5c8 <TIM_OC4_SetConfig+0x138>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d023      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a26      	ldr	r2, [pc, #152]	@ (800f5cc <TIM_OC4_SetConfig+0x13c>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d01f      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a25      	ldr	r2, [pc, #148]	@ (800f5d0 <TIM_OC4_SetConfig+0x140>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d01b      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a24      	ldr	r2, [pc, #144]	@ (800f5d4 <TIM_OC4_SetConfig+0x144>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d017      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a23      	ldr	r2, [pc, #140]	@ (800f5d8 <TIM_OC4_SetConfig+0x148>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d013      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a22      	ldr	r2, [pc, #136]	@ (800f5dc <TIM_OC4_SetConfig+0x14c>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d00f      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a21      	ldr	r2, [pc, #132]	@ (800f5e0 <TIM_OC4_SetConfig+0x150>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d00b      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a20      	ldr	r2, [pc, #128]	@ (800f5e4 <TIM_OC4_SetConfig+0x154>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d007      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a1f      	ldr	r2, [pc, #124]	@ (800f5e8 <TIM_OC4_SetConfig+0x158>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d003      	beq.n	800f578 <TIM_OC4_SetConfig+0xe8>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a1e      	ldr	r2, [pc, #120]	@ (800f5ec <TIM_OC4_SetConfig+0x15c>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d113      	bne.n	800f5a0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f57e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f586:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	019b      	lsls	r3, r3, #6
 800f58e:	693a      	ldr	r2, [r7, #16]
 800f590:	4313      	orrs	r3, r2
 800f592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	019b      	lsls	r3, r3, #6
 800f59a:	693a      	ldr	r2, [r7, #16]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	621a      	str	r2, [r3, #32]
}
 800f5ba:	bf00      	nop
 800f5bc:	371c      	adds	r7, #28
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	40012c00 	.word	0x40012c00
 800f5cc:	50012c00 	.word	0x50012c00
 800f5d0:	40013400 	.word	0x40013400
 800f5d4:	50013400 	.word	0x50013400
 800f5d8:	40014000 	.word	0x40014000
 800f5dc:	50014000 	.word	0x50014000
 800f5e0:	40014400 	.word	0x40014400
 800f5e4:	50014400 	.word	0x50014400
 800f5e8:	40014800 	.word	0x40014800
 800f5ec:	50014800 	.word	0x50014800

0800f5f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b087      	sub	sp, #28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a1b      	ldr	r3, [r3, #32]
 800f604:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	041b      	lsls	r3, r3, #16
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	4313      	orrs	r3, r2
 800f640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a21      	ldr	r2, [pc, #132]	@ (800f6cc <TIM_OC5_SetConfig+0xdc>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d023      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a20      	ldr	r2, [pc, #128]	@ (800f6d0 <TIM_OC5_SetConfig+0xe0>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d01f      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4a1f      	ldr	r2, [pc, #124]	@ (800f6d4 <TIM_OC5_SetConfig+0xe4>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d01b      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4a1e      	ldr	r2, [pc, #120]	@ (800f6d8 <TIM_OC5_SetConfig+0xe8>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d017      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4a1d      	ldr	r2, [pc, #116]	@ (800f6dc <TIM_OC5_SetConfig+0xec>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d013      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4a1c      	ldr	r2, [pc, #112]	@ (800f6e0 <TIM_OC5_SetConfig+0xf0>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d00f      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4a1b      	ldr	r2, [pc, #108]	@ (800f6e4 <TIM_OC5_SetConfig+0xf4>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d00b      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4a1a      	ldr	r2, [pc, #104]	@ (800f6e8 <TIM_OC5_SetConfig+0xf8>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d007      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a19      	ldr	r2, [pc, #100]	@ (800f6ec <TIM_OC5_SetConfig+0xfc>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d003      	beq.n	800f692 <TIM_OC5_SetConfig+0xa2>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a18      	ldr	r2, [pc, #96]	@ (800f6f0 <TIM_OC5_SetConfig+0x100>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d109      	bne.n	800f6a6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	695b      	ldr	r3, [r3, #20]
 800f69e:	021b      	lsls	r3, r3, #8
 800f6a0:	697a      	ldr	r2, [r7, #20]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	697a      	ldr	r2, [r7, #20]
 800f6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	685a      	ldr	r2, [r3, #4]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	621a      	str	r2, [r3, #32]
}
 800f6c0:	bf00      	nop
 800f6c2:	371c      	adds	r7, #28
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	40012c00 	.word	0x40012c00
 800f6d0:	50012c00 	.word	0x50012c00
 800f6d4:	40013400 	.word	0x40013400
 800f6d8:	50013400 	.word	0x50013400
 800f6dc:	40014000 	.word	0x40014000
 800f6e0:	50014000 	.word	0x50014000
 800f6e4:	40014400 	.word	0x40014400
 800f6e8:	50014400 	.word	0x50014400
 800f6ec:	40014800 	.word	0x40014800
 800f6f0:	50014800 	.word	0x50014800

0800f6f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b087      	sub	sp, #28
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a1b      	ldr	r3, [r3, #32]
 800f708:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	68fa      	ldr	r2, [r7, #12]
 800f730:	4313      	orrs	r3, r2
 800f732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f73a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	051b      	lsls	r3, r3, #20
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	4313      	orrs	r3, r2
 800f746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a22      	ldr	r2, [pc, #136]	@ (800f7d4 <TIM_OC6_SetConfig+0xe0>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d023      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a21      	ldr	r2, [pc, #132]	@ (800f7d8 <TIM_OC6_SetConfig+0xe4>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d01f      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a20      	ldr	r2, [pc, #128]	@ (800f7dc <TIM_OC6_SetConfig+0xe8>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d01b      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a1f      	ldr	r2, [pc, #124]	@ (800f7e0 <TIM_OC6_SetConfig+0xec>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d017      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a1e      	ldr	r2, [pc, #120]	@ (800f7e4 <TIM_OC6_SetConfig+0xf0>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d013      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a1d      	ldr	r2, [pc, #116]	@ (800f7e8 <TIM_OC6_SetConfig+0xf4>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d00f      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4a1c      	ldr	r2, [pc, #112]	@ (800f7ec <TIM_OC6_SetConfig+0xf8>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d00b      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	4a1b      	ldr	r2, [pc, #108]	@ (800f7f0 <TIM_OC6_SetConfig+0xfc>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d007      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4a1a      	ldr	r2, [pc, #104]	@ (800f7f4 <TIM_OC6_SetConfig+0x100>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d003      	beq.n	800f798 <TIM_OC6_SetConfig+0xa4>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4a19      	ldr	r2, [pc, #100]	@ (800f7f8 <TIM_OC6_SetConfig+0x104>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d109      	bne.n	800f7ac <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f79e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	029b      	lsls	r3, r3, #10
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	693a      	ldr	r2, [r7, #16]
 800f7c4:	621a      	str	r2, [r3, #32]
}
 800f7c6:	bf00      	nop
 800f7c8:	371c      	adds	r7, #28
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	40012c00 	.word	0x40012c00
 800f7d8:	50012c00 	.word	0x50012c00
 800f7dc:	40013400 	.word	0x40013400
 800f7e0:	50013400 	.word	0x50013400
 800f7e4:	40014000 	.word	0x40014000
 800f7e8:	50014000 	.word	0x50014000
 800f7ec:	40014400 	.word	0x40014400
 800f7f0:	50014400 	.word	0x50014400
 800f7f4:	40014800 	.word	0x40014800
 800f7f8:	50014800 	.word	0x50014800

0800f7fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d101      	bne.n	800f814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f810:	2302      	movs	r3, #2
 800f812:	e097      	b.n	800f944 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2202      	movs	r2, #2
 800f820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	689b      	ldr	r3, [r3, #8]
 800f832:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a45      	ldr	r2, [pc, #276]	@ (800f950 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d00e      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a44      	ldr	r2, [pc, #272]	@ (800f954 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d009      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a42      	ldr	r2, [pc, #264]	@ (800f958 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d004      	beq.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a41      	ldr	r2, [pc, #260]	@ (800f95c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d108      	bne.n	800f86e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f862:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	4313      	orrs	r3, r2
 800f882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a2f      	ldr	r2, [pc, #188]	@ (800f950 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d040      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a2e      	ldr	r2, [pc, #184]	@ (800f954 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d03b      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8a8:	d036      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f8b2:	d031      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a29      	ldr	r2, [pc, #164]	@ (800f960 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d02c      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4a28      	ldr	r2, [pc, #160]	@ (800f964 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d027      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a26      	ldr	r2, [pc, #152]	@ (800f968 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d022      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a25      	ldr	r2, [pc, #148]	@ (800f96c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d01d      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a23      	ldr	r2, [pc, #140]	@ (800f970 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d018      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a22      	ldr	r2, [pc, #136]	@ (800f974 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d013      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a18      	ldr	r2, [pc, #96]	@ (800f958 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d00e      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a17      	ldr	r2, [pc, #92]	@ (800f95c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d009      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a1b      	ldr	r2, [pc, #108]	@ (800f978 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d004      	beq.n	800f918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a1a      	ldr	r2, [pc, #104]	@ (800f97c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d10c      	bne.n	800f932 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f91e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	4313      	orrs	r3, r2
 800f928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68ba      	ldr	r2, [r7, #8]
 800f930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2201      	movs	r2, #1
 800f936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3714      	adds	r7, #20
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr
 800f950:	40012c00 	.word	0x40012c00
 800f954:	50012c00 	.word	0x50012c00
 800f958:	40013400 	.word	0x40013400
 800f95c:	50013400 	.word	0x50013400
 800f960:	40000400 	.word	0x40000400
 800f964:	50000400 	.word	0x50000400
 800f968:	40000800 	.word	0x40000800
 800f96c:	50000800 	.word	0x50000800
 800f970:	40000c00 	.word	0x40000c00
 800f974:	50000c00 	.word	0x50000c00
 800f978:	40014000 	.word	0x40014000
 800f97c:	50014000 	.word	0x50014000

0800f980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d101      	bne.n	800f992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f98e:	2301      	movs	r3, #1
 800f990:	e042      	b.n	800fa18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d106      	bne.n	800f9aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7f2 fb9f 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2224      	movs	r2, #36	@ 0x24
 800f9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f022 0201 	bic.w	r2, r2, #1
 800f9c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d002      	beq.n	800f9d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 fd02 	bl	80103d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 fb51 	bl	8010078 <UART_SetConfig>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d101      	bne.n	800f9e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	e01b      	b.n	800fa18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f9ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	689a      	ldr	r2, [r3, #8]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f9fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f042 0201 	orr.w	r2, r2, #1
 800fa0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 fd81 	bl	8010518 <UART_CheckIdleState>
 800fa16:	4603      	mov	r3, r0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b0ba      	sub	sp, #232	@ 0xe8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	69db      	ldr	r3, [r3, #28]
 800fa2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fa46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fa4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fa4e:	4013      	ands	r3, r2
 800fa50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fa54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d11b      	bne.n	800fa94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa60:	f003 0320 	and.w	r3, r3, #32
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d015      	beq.n	800fa94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa6c:	f003 0320 	and.w	r3, r3, #32
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d105      	bne.n	800fa80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d009      	beq.n	800fa94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f000 82cb 	beq.w	8010020 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	4798      	blx	r3
      }
      return;
 800fa92:	e2c5      	b.n	8010020 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fa94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 8123 	beq.w	800fce4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fa9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800faa2:	4b8d      	ldr	r3, [pc, #564]	@ (800fcd8 <HAL_UART_IRQHandler+0x2b8>)
 800faa4:	4013      	ands	r3, r2
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d106      	bne.n	800fab8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800faaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800faae:	4b8b      	ldr	r3, [pc, #556]	@ (800fcdc <HAL_UART_IRQHandler+0x2bc>)
 800fab0:	4013      	ands	r3, r2
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f000 8116 	beq.w	800fce4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d011      	beq.n	800fae8 <HAL_UART_IRQHandler+0xc8>
 800fac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800facc:	2b00      	cmp	r3, #0
 800face:	d00b      	beq.n	800fae8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2201      	movs	r2, #1
 800fad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fade:	f043 0201 	orr.w	r2, r3, #1
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800faec:	f003 0302 	and.w	r3, r3, #2
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d011      	beq.n	800fb18 <HAL_UART_IRQHandler+0xf8>
 800faf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00b      	beq.n	800fb18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2202      	movs	r2, #2
 800fb06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb0e:	f043 0204 	orr.w	r2, r3, #4
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb1c:	f003 0304 	and.w	r3, r3, #4
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d011      	beq.n	800fb48 <HAL_UART_IRQHandler+0x128>
 800fb24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb28:	f003 0301 	and.w	r3, r3, #1
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00b      	beq.n	800fb48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2204      	movs	r2, #4
 800fb36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb3e:	f043 0202 	orr.w	r2, r3, #2
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fb48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb4c:	f003 0308 	and.w	r3, r3, #8
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d017      	beq.n	800fb84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fb54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb58:	f003 0320 	and.w	r3, r3, #32
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d105      	bne.n	800fb6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fb60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fb64:	4b5c      	ldr	r3, [pc, #368]	@ (800fcd8 <HAL_UART_IRQHandler+0x2b8>)
 800fb66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00b      	beq.n	800fb84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2208      	movs	r2, #8
 800fb72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb7a:	f043 0208 	orr.w	r2, r3, #8
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fb84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d012      	beq.n	800fbb6 <HAL_UART_IRQHandler+0x196>
 800fb90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00c      	beq.n	800fbb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbac:	f043 0220 	orr.w	r2, r3, #32
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 8231 	beq.w	8010024 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbc6:	f003 0320 	and.w	r3, r3, #32
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d013      	beq.n	800fbf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fbce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbd2:	f003 0320 	and.w	r3, r3, #32
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d105      	bne.n	800fbe6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d007      	beq.n	800fbf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d003      	beq.n	800fbf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc0a:	2b40      	cmp	r3, #64	@ 0x40
 800fc0c:	d005      	beq.n	800fc1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fc0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fc12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d054      	beq.n	800fcc4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fd93 	bl	8010746 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc2a:	2b40      	cmp	r3, #64	@ 0x40
 800fc2c:	d146      	bne.n	800fcbc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	3308      	adds	r3, #8
 800fc34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc3c:	e853 3f00 	ldrex	r3, [r3]
 800fc40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fc44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fc48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3308      	adds	r3, #8
 800fc56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fc5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fc5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fc66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fc6a:	e841 2300 	strex	r3, r2, [r1]
 800fc6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fc72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1d9      	bne.n	800fc2e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d017      	beq.n	800fcb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc8a:	4a15      	ldr	r2, [pc, #84]	@ (800fce0 <HAL_UART_IRQHandler+0x2c0>)
 800fc8c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f5 fc51 	bl	800553c <HAL_DMA_Abort_IT>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d019      	beq.n	800fcd4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fcae:	4610      	mov	r0, r2
 800fcb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcb2:	e00f      	b.n	800fcd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f9c9 	bl	801004c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcba:	e00b      	b.n	800fcd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f9c5 	bl	801004c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcc2:	e007      	b.n	800fcd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 f9c1 	bl	801004c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fcd2:	e1a7      	b.n	8010024 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcd4:	bf00      	nop
    return;
 800fcd6:	e1a5      	b.n	8010024 <HAL_UART_IRQHandler+0x604>
 800fcd8:	10000001 	.word	0x10000001
 800fcdc:	04000120 	.word	0x04000120
 800fce0:	08010813 	.word	0x08010813

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	f040 8150 	bne.w	800ff8e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fcee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcf2:	f003 0310 	and.w	r3, r3, #16
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f000 8149 	beq.w	800ff8e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fcfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd00:	f003 0310 	and.w	r3, r3, #16
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 8142 	beq.w	800ff8e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2210      	movs	r2, #16
 800fd10:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd1c:	2b40      	cmp	r3, #64	@ 0x40
 800fd1e:	f040 80b8 	bne.w	800fe92 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fd30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f000 8177 	beq.w	8010028 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fd40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fd44:	429a      	cmp	r2, r3
 800fd46:	f080 816f 	bcs.w	8010028 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fd50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd5c:	2b81      	cmp	r3, #129	@ 0x81
 800fd5e:	f000 8087 	beq.w	800fe70 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fd6e:	e853 3f00 	ldrex	r3, [r3]
 800fd72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fd76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	461a      	mov	r2, r3
 800fd88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fd8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fd90:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fd98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fd9c:	e841 2300 	strex	r3, r2, [r1]
 800fda0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fda4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d1da      	bne.n	800fd62 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	3308      	adds	r3, #8
 800fdb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fdb6:	e853 3f00 	ldrex	r3, [r3]
 800fdba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fdbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fdbe:	f023 0301 	bic.w	r3, r3, #1
 800fdc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3308      	adds	r3, #8
 800fdcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fdd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fdd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fdd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fddc:	e841 2300 	strex	r3, r2, [r1]
 800fde0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fde2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1e1      	bne.n	800fdac <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	3308      	adds	r3, #8
 800fdee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fdf2:	e853 3f00 	ldrex	r3, [r3]
 800fdf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fdf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	3308      	adds	r3, #8
 800fe08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fe0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fe0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fe12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fe14:	e841 2300 	strex	r3, r2, [r1]
 800fe18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fe1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d1e3      	bne.n	800fde8 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2220      	movs	r2, #32
 800fe24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe36:	e853 3f00 	ldrex	r3, [r3]
 800fe3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fe3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe3e:	f023 0310 	bic.w	r3, r3, #16
 800fe42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe50:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe52:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fe5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e4      	bne.n	800fe2e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7f5 faea 	bl	8005444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2202      	movs	r2, #2
 800fe74:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	1ad3      	subs	r3, r2, r3
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4619      	mov	r1, r3
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 f8e8 	bl	8010060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe90:	e0ca      	b.n	8010028 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800feac:	b29b      	uxth	r3, r3
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80bc 	beq.w	801002c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800feb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 80b7 	beq.w	801002c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec6:	e853 3f00 	ldrex	r3, [r3]
 800feca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fed2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fee0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fee2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fee8:	e841 2300 	strex	r3, r2, [r1]
 800feec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800feee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d1e4      	bne.n	800febe <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	3308      	adds	r3, #8
 800fefa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefe:	e853 3f00 	ldrex	r3, [r3]
 800ff02:	623b      	str	r3, [r7, #32]
   return(result);
 800ff04:	6a3b      	ldr	r3, [r7, #32]
 800ff06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff0a:	f023 0301 	bic.w	r3, r3, #1
 800ff0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3308      	adds	r3, #8
 800ff18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ff1c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ff1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff24:	e841 2300 	strex	r3, r2, [r1]
 800ff28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ff2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1e1      	bne.n	800fef4 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2220      	movs	r2, #32
 800ff34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	e853 3f00 	ldrex	r3, [r3]
 800ff50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f023 0310 	bic.w	r3, r3, #16
 800ff58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	461a      	mov	r2, r3
 800ff62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ff66:	61fb      	str	r3, [r7, #28]
 800ff68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff6a:	69b9      	ldr	r1, [r7, #24]
 800ff6c:	69fa      	ldr	r2, [r7, #28]
 800ff6e:	e841 2300 	strex	r3, r2, [r1]
 800ff72:	617b      	str	r3, [r7, #20]
   return(result);
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1e4      	bne.n	800ff44 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2202      	movs	r2, #2
 800ff7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ff80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ff84:	4619      	mov	r1, r3
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 f86a 	bl	8010060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ff8c:	e04e      	b.n	801002c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ff8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d014      	beq.n	800ffc4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ff9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d105      	bne.n	800ffb2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ffa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ffaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d008      	beq.n	800ffc4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d03a      	beq.n	8010030 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	4798      	blx	r3
    }
    return;
 800ffc2:	e035      	b.n	8010030 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ffc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d009      	beq.n	800ffe4 <HAL_UART_IRQHandler+0x5c4>
 800ffd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d003      	beq.n	800ffe4 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 fc2e 	bl	801083e <UART_EndTransmit_IT>
    return;
 800ffe2:	e026      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ffe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d009      	beq.n	8010004 <HAL_UART_IRQHandler+0x5e4>
 800fff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fff4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d003      	beq.n	8010004 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 fc53 	bl	80108a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010002:	e016      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801000c:	2b00      	cmp	r3, #0
 801000e:	d010      	beq.n	8010032 <HAL_UART_IRQHandler+0x612>
 8010010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010014:	2b00      	cmp	r3, #0
 8010016:	da0c      	bge.n	8010032 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 fc3b 	bl	8010894 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801001e:	e008      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
      return;
 8010020:	bf00      	nop
 8010022:	e006      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
    return;
 8010024:	bf00      	nop
 8010026:	e004      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
      return;
 8010028:	bf00      	nop
 801002a:	e002      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
      return;
 801002c:	bf00      	nop
 801002e:	e000      	b.n	8010032 <HAL_UART_IRQHandler+0x612>
    return;
 8010030:	bf00      	nop
  }
}
 8010032:	37e8      	adds	r7, #232	@ 0xe8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	460b      	mov	r3, r1
 801006a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801006c:	bf00      	nop
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801007c:	b094      	sub	sp, #80	@ 0x50
 801007e:	af00      	add	r7, sp, #0
 8010080:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	4b83      	ldr	r3, [pc, #524]	@ (801029c <UART_SetConfig+0x224>)
 801008e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010092:	689a      	ldr	r2, [r3, #8]
 8010094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	431a      	orrs	r2, r3
 801009a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	431a      	orrs	r2, r3
 80100a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100a2:	69db      	ldr	r3, [r3, #28]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80100a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	497c      	ldr	r1, [pc, #496]	@ (80102a0 <UART_SetConfig+0x228>)
 80100b0:	4019      	ands	r1, r3
 80100b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100b8:	430b      	orrs	r3, r1
 80100ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80100c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c8:	68d9      	ldr	r1, [r3, #12]
 80100ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	ea40 0301 	orr.w	r3, r0, r1
 80100d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80100d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80100da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	4b6f      	ldr	r3, [pc, #444]	@ (801029c <UART_SetConfig+0x224>)
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d009      	beq.n	80100f8 <UART_SetConfig+0x80>
 80100e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	4b6e      	ldr	r3, [pc, #440]	@ (80102a4 <UART_SetConfig+0x22c>)
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d004      	beq.n	80100f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80100ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f0:	6a1a      	ldr	r2, [r3, #32]
 80100f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100f4:	4313      	orrs	r3, r2
 80100f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80100f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010102:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801010c:	430b      	orrs	r3, r1
 801010e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010116:	f023 000f 	bic.w	r0, r3, #15
 801011a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801011c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801011e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	ea40 0301 	orr.w	r3, r0, r1
 8010126:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	4b5e      	ldr	r3, [pc, #376]	@ (80102a8 <UART_SetConfig+0x230>)
 801012e:	429a      	cmp	r2, r3
 8010130:	d102      	bne.n	8010138 <UART_SetConfig+0xc0>
 8010132:	2301      	movs	r3, #1
 8010134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010136:	e032      	b.n	801019e <UART_SetConfig+0x126>
 8010138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	4b5b      	ldr	r3, [pc, #364]	@ (80102ac <UART_SetConfig+0x234>)
 801013e:	429a      	cmp	r2, r3
 8010140:	d102      	bne.n	8010148 <UART_SetConfig+0xd0>
 8010142:	2302      	movs	r3, #2
 8010144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010146:	e02a      	b.n	801019e <UART_SetConfig+0x126>
 8010148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	4b58      	ldr	r3, [pc, #352]	@ (80102b0 <UART_SetConfig+0x238>)
 801014e:	429a      	cmp	r2, r3
 8010150:	d102      	bne.n	8010158 <UART_SetConfig+0xe0>
 8010152:	2304      	movs	r3, #4
 8010154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010156:	e022      	b.n	801019e <UART_SetConfig+0x126>
 8010158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	4b55      	ldr	r3, [pc, #340]	@ (80102b4 <UART_SetConfig+0x23c>)
 801015e:	429a      	cmp	r2, r3
 8010160:	d102      	bne.n	8010168 <UART_SetConfig+0xf0>
 8010162:	2308      	movs	r3, #8
 8010164:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010166:	e01a      	b.n	801019e <UART_SetConfig+0x126>
 8010168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	4b52      	ldr	r3, [pc, #328]	@ (80102b8 <UART_SetConfig+0x240>)
 801016e:	429a      	cmp	r2, r3
 8010170:	d102      	bne.n	8010178 <UART_SetConfig+0x100>
 8010172:	2310      	movs	r3, #16
 8010174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010176:	e012      	b.n	801019e <UART_SetConfig+0x126>
 8010178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	4b4f      	ldr	r3, [pc, #316]	@ (80102bc <UART_SetConfig+0x244>)
 801017e:	429a      	cmp	r2, r3
 8010180:	d103      	bne.n	801018a <UART_SetConfig+0x112>
 8010182:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010188:	e009      	b.n	801019e <UART_SetConfig+0x126>
 801018a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	4b43      	ldr	r3, [pc, #268]	@ (801029c <UART_SetConfig+0x224>)
 8010190:	429a      	cmp	r2, r3
 8010192:	d102      	bne.n	801019a <UART_SetConfig+0x122>
 8010194:	2320      	movs	r3, #32
 8010196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010198:	e001      	b.n	801019e <UART_SetConfig+0x126>
 801019a:	2300      	movs	r3, #0
 801019c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801019e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	4b3e      	ldr	r3, [pc, #248]	@ (801029c <UART_SetConfig+0x224>)
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d005      	beq.n	80101b4 <UART_SetConfig+0x13c>
 80101a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	4b3d      	ldr	r3, [pc, #244]	@ (80102a4 <UART_SetConfig+0x22c>)
 80101ae:	429a      	cmp	r2, r3
 80101b0:	f040 8088 	bne.w	80102c4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80101b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101b6:	2200      	movs	r2, #0
 80101b8:	623b      	str	r3, [r7, #32]
 80101ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80101bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80101c0:	f7fc f81a 	bl	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80101c4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80101c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 80eb 	beq.w	80103a4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80101ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d2:	4a3b      	ldr	r2, [pc, #236]	@ (80102c0 <UART_SetConfig+0x248>)
 80101d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101d8:	461a      	mov	r2, r3
 80101da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80101e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	4613      	mov	r3, r2
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	4413      	add	r3, r2
 80101ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d305      	bcc.n	80101fe <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80101f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d903      	bls.n	8010206 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80101fe:	2301      	movs	r3, #1
 8010200:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010204:	e048      	b.n	8010298 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010208:	2200      	movs	r2, #0
 801020a:	61bb      	str	r3, [r7, #24]
 801020c:	61fa      	str	r2, [r7, #28]
 801020e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010212:	4a2b      	ldr	r2, [pc, #172]	@ (80102c0 <UART_SetConfig+0x248>)
 8010214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010218:	b29b      	uxth	r3, r3
 801021a:	2200      	movs	r2, #0
 801021c:	613b      	str	r3, [r7, #16]
 801021e:	617a      	str	r2, [r7, #20]
 8010220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010224:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010228:	f7f0 f844 	bl	80002b4 <__aeabi_uldivmod>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4610      	mov	r0, r2
 8010232:	4619      	mov	r1, r3
 8010234:	f04f 0200 	mov.w	r2, #0
 8010238:	f04f 0300 	mov.w	r3, #0
 801023c:	020b      	lsls	r3, r1, #8
 801023e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010242:	0202      	lsls	r2, r0, #8
 8010244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010246:	6849      	ldr	r1, [r1, #4]
 8010248:	0849      	lsrs	r1, r1, #1
 801024a:	2000      	movs	r0, #0
 801024c:	460c      	mov	r4, r1
 801024e:	4605      	mov	r5, r0
 8010250:	eb12 0804 	adds.w	r8, r2, r4
 8010254:	eb43 0905 	adc.w	r9, r3, r5
 8010258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	60bb      	str	r3, [r7, #8]
 8010260:	60fa      	str	r2, [r7, #12]
 8010262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010266:	4640      	mov	r0, r8
 8010268:	4649      	mov	r1, r9
 801026a:	f7f0 f823 	bl	80002b4 <__aeabi_uldivmod>
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4613      	mov	r3, r2
 8010274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010278:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801027c:	d308      	bcc.n	8010290 <UART_SetConfig+0x218>
 801027e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010284:	d204      	bcs.n	8010290 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8010286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801028c:	60da      	str	r2, [r3, #12]
 801028e:	e003      	b.n	8010298 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8010290:	2301      	movs	r3, #1
 8010292:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010296:	e085      	b.n	80103a4 <UART_SetConfig+0x32c>
 8010298:	e084      	b.n	80103a4 <UART_SetConfig+0x32c>
 801029a:	bf00      	nop
 801029c:	46002400 	.word	0x46002400
 80102a0:	cfff69f3 	.word	0xcfff69f3
 80102a4:	56002400 	.word	0x56002400
 80102a8:	40013800 	.word	0x40013800
 80102ac:	40004400 	.word	0x40004400
 80102b0:	40004800 	.word	0x40004800
 80102b4:	40004c00 	.word	0x40004c00
 80102b8:	40005000 	.word	0x40005000
 80102bc:	40006400 	.word	0x40006400
 80102c0:	080114dc 	.word	0x080114dc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80102c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c6:	69db      	ldr	r3, [r3, #28]
 80102c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102cc:	d13c      	bne.n	8010348 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80102ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102d0:	2200      	movs	r2, #0
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	607a      	str	r2, [r7, #4]
 80102d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80102da:	f7fb ff8d 	bl	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80102de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d05e      	beq.n	80103a4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ea:	4a39      	ldr	r2, [pc, #228]	@ (80103d0 <UART_SetConfig+0x358>)
 80102ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102f0:	461a      	mov	r2, r3
 80102f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80102f8:	005a      	lsls	r2, r3, #1
 80102fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	085b      	lsrs	r3, r3, #1
 8010300:	441a      	add	r2, r3
 8010302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	fbb2 f3f3 	udiv	r3, r2, r3
 801030a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801030c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801030e:	2b0f      	cmp	r3, #15
 8010310:	d916      	bls.n	8010340 <UART_SetConfig+0x2c8>
 8010312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010318:	d212      	bcs.n	8010340 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801031a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801031c:	b29b      	uxth	r3, r3
 801031e:	f023 030f 	bic.w	r3, r3, #15
 8010322:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010326:	085b      	lsrs	r3, r3, #1
 8010328:	b29b      	uxth	r3, r3
 801032a:	f003 0307 	and.w	r3, r3, #7
 801032e:	b29a      	uxth	r2, r3
 8010330:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010332:	4313      	orrs	r3, r2
 8010334:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801033c:	60da      	str	r2, [r3, #12]
 801033e:	e031      	b.n	80103a4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010340:	2301      	movs	r3, #1
 8010342:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010346:	e02d      	b.n	80103a4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801034a:	2200      	movs	r2, #0
 801034c:	469a      	mov	sl, r3
 801034e:	4693      	mov	fp, r2
 8010350:	4650      	mov	r0, sl
 8010352:	4659      	mov	r1, fp
 8010354:	f7fb ff50 	bl	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010358:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801035a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801035c:	2b00      	cmp	r3, #0
 801035e:	d021      	beq.n	80103a4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010364:	4a1a      	ldr	r2, [pc, #104]	@ (80103d0 <UART_SetConfig+0x358>)
 8010366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801036a:	461a      	mov	r2, r3
 801036c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801036e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	085b      	lsrs	r3, r3, #1
 8010378:	441a      	add	r2, r3
 801037a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010382:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010386:	2b0f      	cmp	r3, #15
 8010388:	d909      	bls.n	801039e <UART_SetConfig+0x326>
 801038a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801038c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010390:	d205      	bcs.n	801039e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010394:	b29a      	uxth	r2, r3
 8010396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	60da      	str	r2, [r3, #12]
 801039c:	e002      	b.n	80103a4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801039e:	2301      	movs	r3, #1
 80103a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a6:	2201      	movs	r2, #1
 80103a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80103ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ae:	2201      	movs	r2, #1
 80103b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b6:	2200      	movs	r2, #0
 80103b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80103ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103bc:	2200      	movs	r2, #0
 80103be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80103c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3750      	adds	r7, #80	@ 0x50
 80103c8:	46bd      	mov	sp, r7
 80103ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103ce:	bf00      	nop
 80103d0:	080114dc 	.word	0x080114dc

080103d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103e0:	f003 0308 	and.w	r3, r3, #8
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00a      	beq.n	80103fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010402:	f003 0301 	and.w	r3, r3, #1
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00a      	beq.n	8010420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	430a      	orrs	r2, r1
 801041e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010424:	f003 0302 	and.w	r3, r3, #2
 8010428:	2b00      	cmp	r3, #0
 801042a:	d00a      	beq.n	8010442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010446:	f003 0304 	and.w	r3, r3, #4
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00a      	beq.n	8010464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010468:	f003 0310 	and.w	r3, r3, #16
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00a      	beq.n	8010486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	430a      	orrs	r2, r1
 8010484:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801048a:	f003 0320 	and.w	r3, r3, #32
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00a      	beq.n	80104a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	430a      	orrs	r2, r1
 80104a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d01a      	beq.n	80104ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	430a      	orrs	r2, r1
 80104c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80104d2:	d10a      	bne.n	80104ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	430a      	orrs	r2, r1
 80104e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00a      	beq.n	801050c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	430a      	orrs	r2, r1
 801050a:	605a      	str	r2, [r3, #4]
  }
}
 801050c:	bf00      	nop
 801050e:	370c      	adds	r7, #12
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b098      	sub	sp, #96	@ 0x60
 801051c:	af02      	add	r7, sp, #8
 801051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010528:	f7f2 fa20 	bl	800296c <HAL_GetTick>
 801052c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f003 0308 	and.w	r3, r3, #8
 8010538:	2b08      	cmp	r3, #8
 801053a:	d12f      	bne.n	801059c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801053c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010540:	9300      	str	r3, [sp, #0]
 8010542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010544:	2200      	movs	r2, #0
 8010546:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f88e 	bl	801066c <UART_WaitOnFlagUntilTimeout>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d022      	beq.n	801059c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055e:	e853 3f00 	ldrex	r3, [r3]
 8010562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801056a:	653b      	str	r3, [r7, #80]	@ 0x50
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	461a      	mov	r2, r3
 8010572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010574:	647b      	str	r3, [r7, #68]	@ 0x44
 8010576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801057a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801057c:	e841 2300 	strex	r3, r2, [r1]
 8010580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1e6      	bne.n	8010556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2220      	movs	r2, #32
 801058c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010598:	2303      	movs	r3, #3
 801059a:	e063      	b.n	8010664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f003 0304 	and.w	r3, r3, #4
 80105a6:	2b04      	cmp	r3, #4
 80105a8:	d149      	bne.n	801063e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105b2:	2200      	movs	r2, #0
 80105b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f857 	bl	801066c <UART_WaitOnFlagUntilTimeout>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d03c      	beq.n	801063e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105cc:	e853 3f00 	ldrex	r3, [r3]
 80105d0:	623b      	str	r3, [r7, #32]
   return(result);
 80105d2:	6a3b      	ldr	r3, [r7, #32]
 80105d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80105e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80105e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80105f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e6      	bne.n	80105c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3308      	adds	r3, #8
 80105fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	60fb      	str	r3, [r7, #12]
   return(result);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f023 0301 	bic.w	r3, r3, #1
 801060c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3308      	adds	r3, #8
 8010614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010616:	61fa      	str	r2, [r7, #28]
 8010618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	69b9      	ldr	r1, [r7, #24]
 801061c:	69fa      	ldr	r2, [r7, #28]
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	617b      	str	r3, [r7, #20]
   return(result);
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e5      	bne.n	80105f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2220      	movs	r2, #32
 801062e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801063a:	2303      	movs	r3, #3
 801063c:	e012      	b.n	8010664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2220      	movs	r2, #32
 801064a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	3758      	adds	r7, #88	@ 0x58
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	603b      	str	r3, [r7, #0]
 8010678:	4613      	mov	r3, r2
 801067a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801067c:	e04f      	b.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010684:	d04b      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010686:	f7f2 f971 	bl	800296c <HAL_GetTick>
 801068a:	4602      	mov	r2, r0
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	69ba      	ldr	r2, [r7, #24]
 8010692:	429a      	cmp	r2, r3
 8010694:	d302      	bcc.n	801069c <UART_WaitOnFlagUntilTimeout+0x30>
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d101      	bne.n	80106a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801069c:	2303      	movs	r3, #3
 801069e:	e04e      	b.n	801073e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f003 0304 	and.w	r3, r3, #4
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d037      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	2b80      	cmp	r3, #128	@ 0x80
 80106b2:	d034      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2b40      	cmp	r3, #64	@ 0x40
 80106b8:	d031      	beq.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	69db      	ldr	r3, [r3, #28]
 80106c0:	f003 0308 	and.w	r3, r3, #8
 80106c4:	2b08      	cmp	r3, #8
 80106c6:	d110      	bne.n	80106ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2208      	movs	r2, #8
 80106ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 f838 	bl	8010746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2208      	movs	r2, #8
 80106da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80106e6:	2301      	movs	r3, #1
 80106e8:	e029      	b.n	801073e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	69db      	ldr	r3, [r3, #28]
 80106f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80106f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80106f8:	d111      	bne.n	801071e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f000 f81e 	bl	8010746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2220      	movs	r2, #32
 801070e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2200      	movs	r2, #0
 8010716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801071a:	2303      	movs	r3, #3
 801071c:	e00f      	b.n	801073e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	69da      	ldr	r2, [r3, #28]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	4013      	ands	r3, r2
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	429a      	cmp	r2, r3
 801072c:	bf0c      	ite	eq
 801072e:	2301      	moveq	r3, #1
 8010730:	2300      	movne	r3, #0
 8010732:	b2db      	uxtb	r3, r3
 8010734:	461a      	mov	r2, r3
 8010736:	79fb      	ldrb	r3, [r7, #7]
 8010738:	429a      	cmp	r2, r3
 801073a:	d0a0      	beq.n	801067e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010746:	b480      	push	{r7}
 8010748:	b095      	sub	sp, #84	@ 0x54
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010756:	e853 3f00 	ldrex	r3, [r3]
 801075a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801075c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801075e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	461a      	mov	r2, r3
 801076a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801076c:	643b      	str	r3, [r7, #64]	@ 0x40
 801076e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010770:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010774:	e841 2300 	strex	r3, r2, [r1]
 8010778:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801077a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077c:	2b00      	cmp	r3, #0
 801077e:	d1e6      	bne.n	801074e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3308      	adds	r3, #8
 8010786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010788:	6a3b      	ldr	r3, [r7, #32]
 801078a:	e853 3f00 	ldrex	r3, [r3]
 801078e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010796:	f023 0301 	bic.w	r3, r3, #1
 801079a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3308      	adds	r3, #8
 80107a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80107a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107ac:	e841 2300 	strex	r3, r2, [r1]
 80107b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1e3      	bne.n	8010780 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d118      	bne.n	80107f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	e853 3f00 	ldrex	r3, [r3]
 80107cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	f023 0310 	bic.w	r3, r3, #16
 80107d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	461a      	mov	r2, r3
 80107dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107de:	61bb      	str	r3, [r7, #24]
 80107e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e2:	6979      	ldr	r1, [r7, #20]
 80107e4:	69ba      	ldr	r2, [r7, #24]
 80107e6:	e841 2300 	strex	r3, r2, [r1]
 80107ea:	613b      	str	r3, [r7, #16]
   return(result);
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1e6      	bne.n	80107c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2220      	movs	r2, #32
 80107f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2200      	movs	r2, #0
 8010804:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010806:	bf00      	nop
 8010808:	3754      	adds	r7, #84	@ 0x54
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b084      	sub	sp, #16
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801081e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2200      	movs	r2, #0
 801082c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f7ff fc0b 	bl	801004c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010836:	bf00      	nop
 8010838:	3710      	adds	r7, #16
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b088      	sub	sp, #32
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	e853 3f00 	ldrex	r3, [r3]
 8010852:	60bb      	str	r3, [r7, #8]
   return(result);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801085a:	61fb      	str	r3, [r7, #28]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	461a      	mov	r2, r3
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	61bb      	str	r3, [r7, #24]
 8010866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010868:	6979      	ldr	r1, [r7, #20]
 801086a:	69ba      	ldr	r2, [r7, #24]
 801086c:	e841 2300 	strex	r3, r2, [r1]
 8010870:	613b      	str	r3, [r7, #16]
   return(result);
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1e6      	bne.n	8010846 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2220      	movs	r2, #32
 801087c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7ff fbd6 	bl	8010038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801088c:	bf00      	nop
 801088e:	3720      	adds	r7, #32
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801089c:	bf00      	nop
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80108b0:	bf00      	nop
 80108b2:	370c      	adds	r7, #12
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80108ce:	2302      	movs	r3, #2
 80108d0:	e027      	b.n	8010922 <HAL_UARTEx_DisableFifoMode+0x66>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2201      	movs	r2, #1
 80108d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2224      	movs	r2, #36	@ 0x24
 80108de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f022 0201 	bic.w	r2, r2, #1
 80108f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010900:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2220      	movs	r2, #32
 8010914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3714      	adds	r7, #20
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr

0801092e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
 8010936:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801093e:	2b01      	cmp	r3, #1
 8010940:	d101      	bne.n	8010946 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010942:	2302      	movs	r3, #2
 8010944:	e02d      	b.n	80109a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2224      	movs	r2, #36	@ 0x24
 8010952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f022 0201 	bic.w	r2, r2, #1
 801096c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	430a      	orrs	r2, r1
 8010980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 f850 	bl	8010a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2220      	movs	r2, #32
 8010994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d101      	bne.n	80109c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80109be:	2302      	movs	r3, #2
 80109c0:	e02d      	b.n	8010a1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2201      	movs	r2, #1
 80109c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2224      	movs	r2, #36	@ 0x24
 80109ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f022 0201 	bic.w	r2, r2, #1
 80109e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	683a      	ldr	r2, [r7, #0]
 80109fa:	430a      	orrs	r2, r1
 80109fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f812 	bl	8010a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2220      	movs	r2, #32
 8010a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
	...

08010a28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d108      	bne.n	8010a4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2201      	movs	r2, #1
 8010a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a48:	e031      	b.n	8010aae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a4a:	2308      	movs	r3, #8
 8010a4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a4e:	2308      	movs	r3, #8
 8010a50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	689b      	ldr	r3, [r3, #8]
 8010a58:	0e5b      	lsrs	r3, r3, #25
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	f003 0307 	and.w	r3, r3, #7
 8010a60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	0f5b      	lsrs	r3, r3, #29
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	f003 0307 	and.w	r3, r3, #7
 8010a70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a72:	7bbb      	ldrb	r3, [r7, #14]
 8010a74:	7b3a      	ldrb	r2, [r7, #12]
 8010a76:	4911      	ldr	r1, [pc, #68]	@ (8010abc <UARTEx_SetNbDataToProcess+0x94>)
 8010a78:	5c8a      	ldrb	r2, [r1, r2]
 8010a7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a7e:	7b3a      	ldrb	r2, [r7, #12]
 8010a80:	490f      	ldr	r1, [pc, #60]	@ (8010ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8010a82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a90:	7bfb      	ldrb	r3, [r7, #15]
 8010a92:	7b7a      	ldrb	r2, [r7, #13]
 8010a94:	4909      	ldr	r1, [pc, #36]	@ (8010abc <UARTEx_SetNbDataToProcess+0x94>)
 8010a96:	5c8a      	ldrb	r2, [r1, r2]
 8010a98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a9c:	7b7a      	ldrb	r2, [r7, #13]
 8010a9e:	4908      	ldr	r1, [pc, #32]	@ (8010ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8010aa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010aae:	bf00      	nop
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	080114f4 	.word	0x080114f4
 8010ac0:	080114fc 	.word	0x080114fc

08010ac4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af02      	add	r7, sp, #8
 8010aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010acc:	2300      	movs	r3, #0
 8010ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010ad0:	f7f1 ff4c 	bl	800296c <HAL_GetTick>
 8010ad4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d102      	bne.n	8010ae2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	73fb      	strb	r3, [r7, #15]
 8010ae0:	e137      	b.n	8010d52 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a76      	ldr	r2, [pc, #472]	@ (8010cc0 <HAL_XSPI_Init+0x1fc>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d008      	beq.n	8010afe <HAL_XSPI_Init+0x3a>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a74      	ldr	r2, [pc, #464]	@ (8010cc4 <HAL_XSPI_Init+0x200>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d003      	beq.n	8010afe <HAL_XSPI_Init+0x3a>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a73      	ldr	r2, [pc, #460]	@ (8010cc8 <HAL_XSPI_Init+0x204>)
 8010afc:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a72      	ldr	r2, [pc, #456]	@ (8010ccc <HAL_XSPI_Init+0x208>)
 8010b04:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8010cc0 <HAL_XSPI_Init+0x1fc>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d008      	beq.n	8010b22 <HAL_XSPI_Init+0x5e>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a6b      	ldr	r2, [pc, #428]	@ (8010cc4 <HAL_XSPI_Init+0x200>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d003      	beq.n	8010b22 <HAL_XSPI_Init+0x5e>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8010cc8 <HAL_XSPI_Init+0x204>)
 8010b20:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a66      	ldr	r2, [pc, #408]	@ (8010cc0 <HAL_XSPI_Init+0x1fc>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d008      	beq.n	8010b3e <HAL_XSPI_Init+0x7a>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a64      	ldr	r2, [pc, #400]	@ (8010cc4 <HAL_XSPI_Init+0x200>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d003      	beq.n	8010b3e <HAL_XSPI_Init+0x7a>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a63      	ldr	r2, [pc, #396]	@ (8010cc8 <HAL_XSPI_Init+0x204>)
 8010b3c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f040 8102 	bne.w	8010d52 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7f0 ff7a 	bl	8001a48 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010b54:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f8ff 	bl	8010d5c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	689a      	ldr	r2, [r3, #8]
 8010b64:	4b5a      	ldr	r3, [pc, #360]	@ (8010cd0 <HAL_XSPI_Init+0x20c>)
 8010b66:	4013      	ands	r3, r2
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	68d1      	ldr	r1, [r2, #12]
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	6912      	ldr	r2, [r2, #16]
 8010b70:	0412      	lsls	r2, r2, #16
 8010b72:	4311      	orrs	r1, r2
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	6952      	ldr	r2, [r2, #20]
 8010b78:	3a01      	subs	r2, #1
 8010b7a:	0212      	lsls	r2, r2, #8
 8010b7c:	4311      	orrs	r1, r2
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	69d2      	ldr	r2, [r2, #28]
 8010b82:	4311      	orrs	r1, r2
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	6812      	ldr	r2, [r2, #0]
 8010b88:	430b      	orrs	r3, r1
 8010b8a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a4b      	ldr	r2, [pc, #300]	@ (8010cc0 <HAL_XSPI_Init+0x1fc>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d00e      	beq.n	8010bb4 <HAL_XSPI_Init+0xf0>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8010cc4 <HAL_XSPI_Init+0x200>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d009      	beq.n	8010bb4 <HAL_XSPI_Init+0xf0>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a48      	ldr	r2, [pc, #288]	@ (8010cc8 <HAL_XSPI_Init+0x204>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d004      	beq.n	8010bb4 <HAL_XSPI_Init+0xf0>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4a49      	ldr	r2, [pc, #292]	@ (8010cd4 <HAL_XSPI_Init+0x210>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d10a      	bne.n	8010bca <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	f023 0108 	bic.w	r1, r3, #8
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	430a      	orrs	r2, r1
 8010bc8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a1a      	ldr	r2, [r3, #32]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	430a      	orrs	r2, r1
 8010bde:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bee:	041a      	lsls	r2, r3, #16
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	430a      	orrs	r2, r1
 8010bf6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4a30      	ldr	r2, [pc, #192]	@ (8010cc0 <HAL_XSPI_Init+0x1fc>)
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d00e      	beq.n	8010c20 <HAL_XSPI_Init+0x15c>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4a2f      	ldr	r2, [pc, #188]	@ (8010cc4 <HAL_XSPI_Init+0x200>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d009      	beq.n	8010c20 <HAL_XSPI_Init+0x15c>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4a2d      	ldr	r2, [pc, #180]	@ (8010cc8 <HAL_XSPI_Init+0x204>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d004      	beq.n	8010c20 <HAL_XSPI_Init+0x15c>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8010cd4 <HAL_XSPI_Init+0x210>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d10a      	bne.n	8010c36 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	430a      	orrs	r2, r1
 8010c34:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010c3e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	3b01      	subs	r3, #1
 8010c50:	021a      	lsls	r2, r3, #8
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	2200      	movs	r2, #0
 8010c64:	2120      	movs	r1, #32
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 f887 	bl	8010d7a <XSPI_WaitFlagStateUntilTimeout>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010c70:	7bfb      	ldrb	r3, [r7, #15]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d16d      	bne.n	8010d52 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	430a      	orrs	r2, r1
 8010c8a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a0e      	ldr	r2, [pc, #56]	@ (8010ccc <HAL_XSPI_Init+0x208>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d004      	beq.n	8010ca0 <HAL_XSPI_Init+0x1dc>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8010cd8 <HAL_XSPI_Init+0x214>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d11d      	bne.n	8010cdc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ca4:	9300      	str	r3, [sp, #0]
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	2120      	movs	r1, #32
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 f864 	bl	8010d7a <XSPI_WaitFlagStateUntilTimeout>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010cb6:	7bfb      	ldrb	r3, [r7, #15]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d00f      	beq.n	8010cdc <HAL_XSPI_Init+0x218>
          {
            return status;
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	e049      	b.n	8010d54 <HAL_XSPI_Init+0x290>
 8010cc0:	420d1400 	.word	0x420d1400
 8010cc4:	520d1400 	.word	0x520d1400
 8010cc8:	420d2400 	.word	0x420d2400
 8010ccc:	420d3400 	.word	0x420d3400
 8010cd0:	f8e0c0fc 	.word	0xf8e0c0fc
 8010cd4:	520d2400 	.word	0x520d2400
 8010cd8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	689a      	ldr	r2, [r3, #8]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	430a      	orrs	r2, r1
 8010cf0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010cfa:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d06:	431a      	orrs	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	430a      	orrs	r2, r1
 8010d0e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f042 0201 	orr.w	r2, r2, #1
 8010d20:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	699b      	ldr	r3, [r3, #24]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	d107      	bne.n	8010d3a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	689a      	ldr	r2, [r3, #8]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f042 0202 	orr.w	r2, r2, #2
 8010d38:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d42:	d103      	bne.n	8010d4c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2201      	movs	r2, #1
 8010d48:	655a      	str	r2, [r3, #84]	@ 0x54
 8010d4a:	e002      	b.n	8010d52 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2202      	movs	r2, #2
 8010d50:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	b083      	sub	sp, #12
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	683a      	ldr	r2, [r7, #0]
 8010d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010d6c:	2300      	movs	r3, #0
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	370c      	adds	r7, #12
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr

08010d7a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b084      	sub	sp, #16
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	60f8      	str	r0, [r7, #12]
 8010d82:	60b9      	str	r1, [r7, #8]
 8010d84:	603b      	str	r3, [r7, #0]
 8010d86:	4613      	mov	r3, r2
 8010d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010d8a:	e01a      	b.n	8010dc2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d92:	d016      	beq.n	8010dc2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d94:	f7f1 fdea 	bl	800296c <HAL_GetTick>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	69ba      	ldr	r2, [r7, #24]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d302      	bcc.n	8010daa <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d10b      	bne.n	8010dc2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010db0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010db6:	f043 0201 	orr.w	r2, r3, #1
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010dbe:	2303      	movs	r3, #3
 8010dc0:	e00e      	b.n	8010de0 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6a1a      	ldr	r2, [r3, #32]
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	4013      	ands	r3, r2
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	bf14      	ite	ne
 8010dd0:	2301      	movne	r3, #1
 8010dd2:	2300      	moveq	r3, #0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d1d6      	bne.n	8010d8c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010de8:	b084      	sub	sp, #16
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
 8010df2:	f107 001c 	add.w	r0, r7, #28
 8010df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010dfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010dfe:	2b03      	cmp	r3, #3
 8010e00:	d105      	bne.n	8010e0e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fa8e 	bl	8011330 <USB_CoreReset>
 8010e14:	4603      	mov	r3, r0
 8010e16:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010e18:	7fbb      	ldrb	r3, [r7, #30]
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	d10b      	bne.n	8010e36 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	689b      	ldr	r3, [r3, #8]
 8010e22:	f043 0208 	orr.w	r2, r3, #8
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	f043 0220 	orr.w	r2, r3, #32
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e42:	b004      	add	sp, #16
 8010e44:	4770      	bx	lr

08010e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b083      	sub	sp, #12
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	689b      	ldr	r3, [r3, #8]
 8010e52:	f023 0201 	bic.w	r2, r3, #1
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	460b      	mov	r3, r1
 8010e72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010e74:	2300      	movs	r3, #0
 8010e76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e84:	78fb      	ldrb	r3, [r7, #3]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d115      	bne.n	8010eb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010e96:	200a      	movs	r0, #10
 8010e98:	f7f1 fd74 	bl	8002984 <HAL_Delay>
      ms += 10U;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	330a      	adds	r3, #10
 8010ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fa36 	bl	8011314 <USB_GetMode>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d01e      	beq.n	8010eec <USB_SetCurrentMode+0x84>
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8010eb2:	d9f0      	bls.n	8010e96 <USB_SetCurrentMode+0x2e>
 8010eb4:	e01a      	b.n	8010eec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010eb6:	78fb      	ldrb	r3, [r7, #3]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d115      	bne.n	8010ee8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010ec8:	200a      	movs	r0, #10
 8010eca:	f7f1 fd5b 	bl	8002984 <HAL_Delay>
      ms += 10U;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	330a      	adds	r3, #10
 8010ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 fa1d 	bl	8011314 <USB_GetMode>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d005      	beq.n	8010eec <USB_SetCurrentMode+0x84>
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	2bc7      	cmp	r3, #199	@ 0xc7
 8010ee4:	d9f0      	bls.n	8010ec8 <USB_SetCurrentMode+0x60>
 8010ee6:	e001      	b.n	8010eec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e005      	b.n	8010ef8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2bc8      	cmp	r3, #200	@ 0xc8
 8010ef0:	d101      	bne.n	8010ef6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e000      	b.n	8010ef8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010f00:	b084      	sub	sp, #16
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b086      	sub	sp, #24
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010f12:	2300      	movs	r3, #0
 8010f14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	613b      	str	r3, [r7, #16]
 8010f1e:	e009      	b.n	8010f34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	3340      	adds	r3, #64	@ 0x40
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4413      	add	r3, r2
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	3301      	adds	r3, #1
 8010f32:	613b      	str	r3, [r7, #16]
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	2b0e      	cmp	r3, #14
 8010f38:	d9f2      	bls.n	8010f20 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010f46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d11c      	bne.n	8010f88 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f54:	685b      	ldr	r3, [r3, #4]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f5c:	f043 0302 	orr.w	r3, r3, #2
 8010f60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f66:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f72:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f7e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	639a      	str	r2, [r3, #56]	@ 0x38
 8010f86:	e011      	b.n	8010fac <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fa4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010fb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010fbc:	2b03      	cmp	r3, #3
 8010fbe:	d10d      	bne.n	8010fdc <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d104      	bne.n	8010fd2 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010fc8:	2100      	movs	r1, #0
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 f968 	bl	80112a0 <USB_SetDevSpeed>
 8010fd0:	e008      	b.n	8010fe4 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f000 f963 	bl	80112a0 <USB_SetDevSpeed>
 8010fda:	e003      	b.n	8010fe4 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010fdc:	2103      	movs	r1, #3
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f95e 	bl	80112a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010fe4:	2110      	movs	r1, #16
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 f8fa 	bl	80111e0 <USB_FlushTxFifo>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f924 	bl	8011244 <USB_FlushRxFifo>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011002:	2301      	movs	r3, #1
 8011004:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801100c:	461a      	mov	r2, r3
 801100e:	2300      	movs	r3, #0
 8011010:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011018:	461a      	mov	r2, r3
 801101a:	2300      	movs	r3, #0
 801101c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011024:	461a      	mov	r2, r3
 8011026:	2300      	movs	r3, #0
 8011028:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801102a:	2300      	movs	r3, #0
 801102c:	613b      	str	r3, [r7, #16]
 801102e:	e043      	b.n	80110b8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011046:	d118      	bne.n	801107a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d10a      	bne.n	8011064 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	015a      	lsls	r2, r3, #5
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	4413      	add	r3, r2
 8011056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801105a:	461a      	mov	r2, r3
 801105c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011060:	6013      	str	r3, [r2, #0]
 8011062:	e013      	b.n	801108c <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	015a      	lsls	r2, r3, #5
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	4413      	add	r3, r2
 801106c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011070:	461a      	mov	r2, r3
 8011072:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011076:	6013      	str	r3, [r2, #0]
 8011078:	e008      	b.n	801108c <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	015a      	lsls	r2, r3, #5
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	4413      	add	r3, r2
 8011082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011086:	461a      	mov	r2, r3
 8011088:	2300      	movs	r3, #0
 801108a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	015a      	lsls	r2, r3, #5
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	4413      	add	r3, r2
 8011094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011098:	461a      	mov	r2, r3
 801109a:	2300      	movs	r3, #0
 801109c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	015a      	lsls	r2, r3, #5
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	4413      	add	r3, r2
 80110a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110aa:	461a      	mov	r2, r3
 80110ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80110b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	3301      	adds	r3, #1
 80110b6:	613b      	str	r3, [r7, #16]
 80110b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80110bc:	461a      	mov	r2, r3
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d3b5      	bcc.n	8011030 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110c4:	2300      	movs	r3, #0
 80110c6:	613b      	str	r3, [r7, #16]
 80110c8:	e043      	b.n	8011152 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	015a      	lsls	r2, r3, #5
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	4413      	add	r3, r2
 80110d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80110dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80110e0:	d118      	bne.n	8011114 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d10a      	bne.n	80110fe <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	015a      	lsls	r2, r3, #5
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	4413      	add	r3, r2
 80110f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110f4:	461a      	mov	r2, r3
 80110f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80110fa:	6013      	str	r3, [r2, #0]
 80110fc:	e013      	b.n	8011126 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	015a      	lsls	r2, r3, #5
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	4413      	add	r3, r2
 8011106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801110a:	461a      	mov	r2, r3
 801110c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011110:	6013      	str	r3, [r2, #0]
 8011112:	e008      	b.n	8011126 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	015a      	lsls	r2, r3, #5
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	4413      	add	r3, r2
 801111c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011120:	461a      	mov	r2, r3
 8011122:	2300      	movs	r3, #0
 8011124:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	015a      	lsls	r2, r3, #5
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	4413      	add	r3, r2
 801112e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011132:	461a      	mov	r2, r3
 8011134:	2300      	movs	r3, #0
 8011136:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	015a      	lsls	r2, r3, #5
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	4413      	add	r3, r2
 8011140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011144:	461a      	mov	r2, r3
 8011146:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801114a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	3301      	adds	r3, #1
 8011150:	613b      	str	r3, [r7, #16]
 8011152:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011156:	461a      	mov	r2, r3
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	4293      	cmp	r3, r2
 801115c:	d3b5      	bcc.n	80110ca <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	68fa      	ldr	r2, [r7, #12]
 8011168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801116c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011170:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801117e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011184:	2b00      	cmp	r3, #0
 8011186:	d105      	bne.n	8011194 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	699b      	ldr	r3, [r3, #24]
 801118c:	f043 0210 	orr.w	r2, r3, #16
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	699a      	ldr	r2, [r3, #24]
 8011198:	4b10      	ldr	r3, [pc, #64]	@ (80111dc <USB_DevInit+0x2dc>)
 801119a:	4313      	orrs	r3, r2
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80111a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d005      	beq.n	80111b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	699b      	ldr	r3, [r3, #24]
 80111ac:	f043 0208 	orr.w	r2, r3, #8
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80111b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80111b8:	2b01      	cmp	r3, #1
 80111ba:	d107      	bne.n	80111cc <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	699b      	ldr	r3, [r3, #24]
 80111c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80111c4:	f043 0304 	orr.w	r3, r3, #4
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80111cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3718      	adds	r7, #24
 80111d2:	46bd      	mov	sp, r7
 80111d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80111d8:	b004      	add	sp, #16
 80111da:	4770      	bx	lr
 80111dc:	803c3800 	.word	0x803c3800

080111e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80111ea:	2300      	movs	r3, #0
 80111ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	3301      	adds	r3, #1
 80111f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111fa:	d901      	bls.n	8011200 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80111fc:	2303      	movs	r3, #3
 80111fe:	e01b      	b.n	8011238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	2b00      	cmp	r3, #0
 8011206:	daf2      	bge.n	80111ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	019b      	lsls	r3, r3, #6
 8011210:	f043 0220 	orr.w	r2, r3, #32
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	3301      	adds	r3, #1
 801121c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011224:	d901      	bls.n	801122a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011226:	2303      	movs	r3, #3
 8011228:	e006      	b.n	8011238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	691b      	ldr	r3, [r3, #16]
 801122e:	f003 0320 	and.w	r3, r3, #32
 8011232:	2b20      	cmp	r3, #32
 8011234:	d0f0      	beq.n	8011218 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011236:	2300      	movs	r3, #0
}
 8011238:	4618      	mov	r0, r3
 801123a:	3714      	adds	r7, #20
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011244:	b480      	push	{r7}
 8011246:	b085      	sub	sp, #20
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801124c:	2300      	movs	r3, #0
 801124e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	3301      	adds	r3, #1
 8011254:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801125c:	d901      	bls.n	8011262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801125e:	2303      	movs	r3, #3
 8011260:	e018      	b.n	8011294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	691b      	ldr	r3, [r3, #16]
 8011266:	2b00      	cmp	r3, #0
 8011268:	daf2      	bge.n	8011250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801126a:	2300      	movs	r3, #0
 801126c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2210      	movs	r2, #16
 8011272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	3301      	adds	r3, #1
 8011278:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011280:	d901      	bls.n	8011286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011282:	2303      	movs	r3, #3
 8011284:	e006      	b.n	8011294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	f003 0310 	and.w	r3, r3, #16
 801128e:	2b10      	cmp	r3, #16
 8011290:	d0f0      	beq.n	8011274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	460b      	mov	r3, r1
 80112aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	78fb      	ldrb	r3, [r7, #3]
 80112ba:	68f9      	ldr	r1, [r7, #12]
 80112bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80112c0:	4313      	orrs	r3, r2
 80112c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80112c4:	2300      	movs	r3, #0
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3714      	adds	r7, #20
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80112d2:	b480      	push	{r7}
 80112d4:	b085      	sub	sp, #20
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	68fa      	ldr	r2, [r7, #12]
 80112e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80112ec:	f023 0303 	bic.w	r3, r3, #3
 80112f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011300:	f043 0302 	orr.w	r3, r3, #2
 8011304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3714      	adds	r7, #20
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	695b      	ldr	r3, [r3, #20]
 8011320:	f003 0301 	and.w	r3, r3, #1
}
 8011324:	4618      	mov	r0, r3
 8011326:	370c      	adds	r7, #12
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr

08011330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011330:	b480      	push	{r7}
 8011332:	b085      	sub	sp, #20
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011338:	2300      	movs	r3, #0
 801133a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	3301      	adds	r3, #1
 8011340:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011348:	d901      	bls.n	801134e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801134a:	2303      	movs	r3, #3
 801134c:	e01b      	b.n	8011386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	691b      	ldr	r3, [r3, #16]
 8011352:	2b00      	cmp	r3, #0
 8011354:	daf2      	bge.n	801133c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011356:	2300      	movs	r3, #0
 8011358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	691b      	ldr	r3, [r3, #16]
 801135e:	f043 0201 	orr.w	r2, r3, #1
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	3301      	adds	r3, #1
 801136a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011372:	d901      	bls.n	8011378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011374:	2303      	movs	r3, #3
 8011376:	e006      	b.n	8011386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	691b      	ldr	r3, [r3, #16]
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b01      	cmp	r3, #1
 8011382:	d0f0      	beq.n	8011366 <USB_CoreReset+0x36>

  return HAL_OK;
 8011384:	2300      	movs	r3, #0
}
 8011386:	4618      	mov	r0, r3
 8011388:	3714      	adds	r7, #20
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr

08011392 <memset>:
 8011392:	4402      	add	r2, r0
 8011394:	4603      	mov	r3, r0
 8011396:	4293      	cmp	r3, r2
 8011398:	d100      	bne.n	801139c <memset+0xa>
 801139a:	4770      	bx	lr
 801139c:	f803 1b01 	strb.w	r1, [r3], #1
 80113a0:	e7f9      	b.n	8011396 <memset+0x4>
	...

080113a4 <__libc_init_array>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	4d0d      	ldr	r5, [pc, #52]	@ (80113dc <__libc_init_array+0x38>)
 80113a8:	2600      	movs	r6, #0
 80113aa:	4c0d      	ldr	r4, [pc, #52]	@ (80113e0 <__libc_init_array+0x3c>)
 80113ac:	1b64      	subs	r4, r4, r5
 80113ae:	10a4      	asrs	r4, r4, #2
 80113b0:	42a6      	cmp	r6, r4
 80113b2:	d109      	bne.n	80113c8 <__libc_init_array+0x24>
 80113b4:	4d0b      	ldr	r5, [pc, #44]	@ (80113e4 <__libc_init_array+0x40>)
 80113b6:	2600      	movs	r6, #0
 80113b8:	4c0b      	ldr	r4, [pc, #44]	@ (80113e8 <__libc_init_array+0x44>)
 80113ba:	f000 f817 	bl	80113ec <_init>
 80113be:	1b64      	subs	r4, r4, r5
 80113c0:	10a4      	asrs	r4, r4, #2
 80113c2:	42a6      	cmp	r6, r4
 80113c4:	d105      	bne.n	80113d2 <__libc_init_array+0x2e>
 80113c6:	bd70      	pop	{r4, r5, r6, pc}
 80113c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80113cc:	3601      	adds	r6, #1
 80113ce:	4798      	blx	r3
 80113d0:	e7ee      	b.n	80113b0 <__libc_init_array+0xc>
 80113d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80113d6:	3601      	adds	r6, #1
 80113d8:	4798      	blx	r3
 80113da:	e7f2      	b.n	80113c2 <__libc_init_array+0x1e>
 80113dc:	0801150c 	.word	0x0801150c
 80113e0:	0801150c 	.word	0x0801150c
 80113e4:	0801150c 	.word	0x0801150c
 80113e8:	08011510 	.word	0x08011510

080113ec <_init>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	bf00      	nop
 80113f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113f2:	bc08      	pop	{r3}
 80113f4:	469e      	mov	lr, r3
 80113f6:	4770      	bx	lr

080113f8 <_fini>:
 80113f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fa:	bf00      	nop
 80113fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113fe:	bc08      	pop	{r3}
 8011400:	469e      	mov	lr, r3
 8011402:	4770      	bx	lr
