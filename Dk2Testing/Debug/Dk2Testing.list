
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000185ac  08000278  08000278  00010278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d0  08018828  08018828  00028828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198f8  080198f8  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  080198f8  080198f8  000298f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019900  08019900  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019900  08019900  00029900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019904  08019904  00029904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  08019908  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046a8  20000370  08019c78  00030370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  08019c78  00034a18  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038d6c  00000000  00000000  000303e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006369  00000000  00000000  00069155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f08  00000000  00000000  0006f4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000249e  00000000  00000000  000723c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004ab4c  00000000  00000000  00074866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d176  00000000  00000000  000bf3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c10c2  00000000  00000000  000fc528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000e11c  00000000  00000000  002bd5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  002cb708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000278 <__do_global_dtors_aux>:
 8000278:	b510      	push	{r4, lr}
 800027a:	4c05      	ldr	r4, [pc, #20]	; (8000290 <__do_global_dtors_aux+0x18>)
 800027c:	7823      	ldrb	r3, [r4, #0]
 800027e:	b933      	cbnz	r3, 800028e <__do_global_dtors_aux+0x16>
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <__do_global_dtors_aux+0x1c>)
 8000282:	b113      	cbz	r3, 800028a <__do_global_dtors_aux+0x12>
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <__do_global_dtors_aux+0x20>)
 8000286:	f3af 8000 	nop.w
 800028a:	2301      	movs	r3, #1
 800028c:	7023      	strb	r3, [r4, #0]
 800028e:	bd10      	pop	{r4, pc}
 8000290:	20000370 	.word	0x20000370
 8000294:	00000000 	.word	0x00000000
 8000298:	0801880c 	.word	0x0801880c

0800029c <frame_dummy>:
 800029c:	b508      	push	{r3, lr}
 800029e:	4b03      	ldr	r3, [pc, #12]	; (80002ac <frame_dummy+0x10>)
 80002a0:	b11b      	cbz	r3, 80002aa <frame_dummy+0xe>
 80002a2:	4903      	ldr	r1, [pc, #12]	; (80002b0 <frame_dummy+0x14>)
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <frame_dummy+0x18>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	00000000 	.word	0x00000000
 80002b0:	20000374 	.word	0x20000374
 80002b4:	0801880c 	.word	0x0801880c

080002b8 <strcmp>:
 80002b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c0:	2a01      	cmp	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	429a      	cmpcs	r2, r3
 80002c6:	d0f7      	beq.n	80002b8 <strcmp>
 80002c8:	1ad0      	subs	r0, r2, r3
 80002ca:	4770      	bx	lr

080002cc <strlen>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1fb      	bne.n	80002ce <strlen+0x2>
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	3801      	subs	r0, #1
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	; 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_uldivmod>:
 8000c04:	b953      	cbnz	r3, 8000c1c <__aeabi_uldivmod+0x18>
 8000c06:	b94a      	cbnz	r2, 8000c1c <__aeabi_uldivmod+0x18>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	2800      	cmpeq	r0, #0
 8000c0e:	bf1c      	itt	ne
 8000c10:	f04f 31ff 	movne.w	r1, #4294967295
 8000c14:	f04f 30ff 	movne.w	r0, #4294967295
 8000c18:	f000 b982 	b.w	8000f20 <__aeabi_idiv0>
 8000c1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c24:	f000 f806 	bl	8000c34 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr

08000c34 <__udivmoddi4>:
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c38:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460f      	mov	r7, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d146      	bne.n	8000cd2 <__udivmoddi4+0x9e>
 8000c44:	428a      	cmp	r2, r1
 8000c46:	4694      	mov	ip, r2
 8000c48:	d95e      	bls.n	8000d08 <__udivmoddi4+0xd4>
 8000c4a:	fab2 f382 	clz	r3, r2
 8000c4e:	b143      	cbz	r3, 8000c62 <__udivmoddi4+0x2e>
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	409c      	lsls	r4, r3
 8000c5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c60:	4317      	orrs	r7, r2
 8000c62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c66:	fa1f f58c 	uxth.w	r5, ip
 8000c6a:	0c22      	lsrs	r2, r4, #16
 8000c6c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c74:	fb01 f005 	mul.w	r0, r1, r5
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x5e>
 8000c80:	eb1c 0202 	adds.w	r2, ip, r2
 8000c84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x5c>
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	f200 8134 	bhi.w	8000ef8 <__udivmoddi4+0x2c4>
 8000c90:	4639      	mov	r1, r7
 8000c92:	1a12      	subs	r2, r2, r0
 8000c94:	b2a4      	uxth	r4, r4
 8000c96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca6:	42a5      	cmp	r5, r4
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x88>
 8000caa:	eb1c 0404 	adds.w	r4, ip, r4
 8000cae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x86>
 8000cb4:	42a5      	cmp	r5, r4
 8000cb6:	f200 8119 	bhi.w	8000eec <__udivmoddi4+0x2b8>
 8000cba:	4610      	mov	r0, r2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0x9a>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xb4>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80fc 	beq.w	8000ed4 <__udivmoddi4+0x2a0>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d14c      	bne.n	8000d8a <__udivmoddi4+0x156>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	f0c0 80f2 	bcc.w	8000eda <__udivmoddi4+0x2a6>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f240 80ef 	bls.w	8000eda <__udivmoddi4+0x2a6>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d0e5      	beq.n	8000cce <__udivmoddi4+0x9a>
 8000d02:	e9c6 4700 	strd	r4, r7, [r6]
 8000d06:	e7e2      	b.n	8000cce <__udivmoddi4+0x9a>
 8000d08:	b902      	cbnz	r2, 8000d0c <__udivmoddi4+0xd8>
 8000d0a:	deff      	udf	#255	; 0xff
 8000d0c:	fab2 f382 	clz	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 809f 	bne.w	8000e54 <__udivmoddi4+0x220>
 8000d16:	1a8a      	subs	r2, r1, r2
 8000d18:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d26:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d2a:	0c22      	lsrs	r2, r4, #16
 8000d2c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d30:	fb07 f005 	mul.w	r0, r7, r5
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d90f      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d38:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d40:	bf2c      	ite	cs
 8000d42:	f04f 0901 	movcs.w	r9, #1
 8000d46:	f04f 0900 	movcc.w	r9, #0
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	d903      	bls.n	8000d56 <__udivmoddi4+0x122>
 8000d4e:	f1b9 0f00 	cmp.w	r9, #0
 8000d52:	f000 80ce 	beq.w	8000ef2 <__udivmoddi4+0x2be>
 8000d56:	4645      	mov	r5, r8
 8000d58:	1a12      	subs	r2, r2, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d60:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d64:	fb00 f707 	mul.w	r7, r0, r7
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x14e>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x14c>
 8000d7a:	42a7      	cmp	r7, r4
 8000d7c:	f200 80b3 	bhi.w	8000ee6 <__udivmoddi4+0x2b2>
 8000d80:	4610      	mov	r0, r2
 8000d82:	1be4      	subs	r4, r4, r7
 8000d84:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d88:	e79c      	b.n	8000cc4 <__udivmoddi4+0x90>
 8000d8a:	f1c1 0420 	rsb	r4, r1, #32
 8000d8e:	408b      	lsls	r3, r1
 8000d90:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d94:	fa22 f704 	lsr.w	r7, r2, r4
 8000d98:	40e5      	lsrs	r5, r4
 8000d9a:	408a      	lsls	r2, r1
 8000d9c:	431f      	orrs	r7, r3
 8000d9e:	fa20 f304 	lsr.w	r3, r0, r4
 8000da2:	4088      	lsls	r0, r1
 8000da4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da8:	ea43 030c 	orr.w	r3, r3, ip
 8000dac:	fa1f fc87 	uxth.w	ip, r7
 8000db0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db4:	fbb5 fef8 	udiv	lr, r5, r8
 8000db8:	fb08 551e 	mls	r5, r8, lr, r5
 8000dbc:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a9      	cmp	r9, r5
 8000dc6:	d90e      	bls.n	8000de6 <__udivmoddi4+0x1b2>
 8000dc8:	197d      	adds	r5, r7, r5
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	bf2c      	ite	cs
 8000dd0:	f04f 0b01 	movcs.w	fp, #1
 8000dd4:	f04f 0b00 	movcc.w	fp, #0
 8000dd8:	45a9      	cmp	r9, r5
 8000dda:	d903      	bls.n	8000de4 <__udivmoddi4+0x1b0>
 8000ddc:	f1bb 0f00 	cmp.w	fp, #0
 8000de0:	f000 808d 	beq.w	8000efe <__udivmoddi4+0x2ca>
 8000de4:	46d6      	mov	lr, sl
 8000de6:	eba5 0509 	sub.w	r5, r5, r9
 8000dea:	fa1f f983 	uxth.w	r9, r3
 8000dee:	fbb5 f3f8 	udiv	r3, r5, r8
 8000df2:	fb08 5513 	mls	r5, r8, r3, r5
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dfe:	45ac      	cmp	ip, r5
 8000e00:	d906      	bls.n	8000e10 <__udivmoddi4+0x1dc>
 8000e02:	197d      	adds	r5, r7, r5
 8000e04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e08:	d201      	bcs.n	8000e0e <__udivmoddi4+0x1da>
 8000e0a:	45ac      	cmp	ip, r5
 8000e0c:	d87e      	bhi.n	8000f0c <__udivmoddi4+0x2d8>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e14:	eba5 050c 	sub.w	r5, r5, ip
 8000e18:	fba3 9802 	umull	r9, r8, r3, r2
 8000e1c:	4545      	cmp	r5, r8
 8000e1e:	46ce      	mov	lr, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	d302      	bcc.n	8000e2a <__udivmoddi4+0x1f6>
 8000e24:	d106      	bne.n	8000e34 <__udivmoddi4+0x200>
 8000e26:	4548      	cmp	r0, r9
 8000e28:	d204      	bcs.n	8000e34 <__udivmoddi4+0x200>
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e30:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e34:	2e00      	cmp	r6, #0
 8000e36:	d06f      	beq.n	8000f18 <__udivmoddi4+0x2e4>
 8000e38:	ebb0 020e 	subs.w	r2, r0, lr
 8000e3c:	eb65 050c 	sbc.w	r5, r5, ip
 8000e40:	40ca      	lsrs	r2, r1
 8000e42:	fa05 f404 	lsl.w	r4, r5, r4
 8000e46:	40cd      	lsrs	r5, r1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4314      	orrs	r4, r2
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	e9c6 4500 	strd	r4, r5, [r6]
 8000e52:	e73c      	b.n	8000cce <__udivmoddi4+0x9a>
 8000e54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e58:	f1c3 0220 	rsb	r2, r3, #32
 8000e5c:	4099      	lsls	r1, r3
 8000e5e:	409c      	lsls	r4, r3
 8000e60:	40d5      	lsrs	r5, r2
 8000e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e66:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6a:	fa1f f78c 	uxth.w	r7, ip
 8000e6e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e72:	430a      	orrs	r2, r1
 8000e74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e7e:	fb00 f507 	mul.w	r5, r0, r7
 8000e82:	428d      	cmp	r5, r1
 8000e84:	d90e      	bls.n	8000ea4 <__udivmoddi4+0x270>
 8000e86:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	bf2c      	ite	cs
 8000e90:	f04f 0901 	movcs.w	r9, #1
 8000e94:	f04f 0900 	movcc.w	r9, #0
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d902      	bls.n	8000ea2 <__udivmoddi4+0x26e>
 8000e9c:	f1b9 0f00 	cmp.w	r9, #0
 8000ea0:	d031      	beq.n	8000f06 <__udivmoddi4+0x2d2>
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	1b49      	subs	r1, r1, r5
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	fbb1 f5fe 	udiv	r5, r1, lr
 8000eac:	fb0e 1115 	mls	r1, lr, r5, r1
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	fb05 f107 	mul.w	r1, r5, r7
 8000eb8:	4291      	cmp	r1, r2
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x298>
 8000ebc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec4:	d201      	bcs.n	8000eca <__udivmoddi4+0x296>
 8000ec6:	4291      	cmp	r1, r2
 8000ec8:	d823      	bhi.n	8000f12 <__udivmoddi4+0x2de>
 8000eca:	4645      	mov	r5, r8
 8000ecc:	1a52      	subs	r2, r2, r1
 8000ece:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed2:	e726      	b.n	8000d22 <__udivmoddi4+0xee>
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e6f9      	b.n	8000cce <__udivmoddi4+0x9a>
 8000eda:	1a84      	subs	r4, r0, r2
 8000edc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	4617      	mov	r7, r2
 8000ee4:	e70b      	b.n	8000cfe <__udivmoddi4+0xca>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14e>
 8000eec:	4464      	add	r4, ip
 8000eee:	3802      	subs	r0, #2
 8000ef0:	e6e4      	b.n	8000cbc <__udivmoddi4+0x88>
 8000ef2:	3d02      	subs	r5, #2
 8000ef4:	4462      	add	r2, ip
 8000ef6:	e72f      	b.n	8000d58 <__udivmoddi4+0x124>
 8000ef8:	3902      	subs	r1, #2
 8000efa:	4462      	add	r2, ip
 8000efc:	e6c9      	b.n	8000c92 <__udivmoddi4+0x5e>
 8000efe:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f02:	443d      	add	r5, r7
 8000f04:	e76f      	b.n	8000de6 <__udivmoddi4+0x1b2>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	e7cb      	b.n	8000ea4 <__udivmoddi4+0x270>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443d      	add	r5, r7
 8000f10:	e77e      	b.n	8000e10 <__udivmoddi4+0x1dc>
 8000f12:	3d02      	subs	r5, #2
 8000f14:	4462      	add	r2, ip
 8000f16:	e7d9      	b.n	8000ecc <__udivmoddi4+0x298>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e6d7      	b.n	8000cce <__udivmoddi4+0x9a>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__io_putchar>:
//
// @param ch character to write to stdout
// @return character
//
int __io_putchar(int ch)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    char data = (char)ch;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	73fb      	strb	r3, [r7, #15]

    // Critical section begin.
    bspInterruptEnable(false);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f9e2 	bl	80012fc <bspInterruptEnable>

    // Write to ring buffer.
    ringWrite(bsp()->hStdout, &data, sizeof(data));
 8000f38:	f000 f842 	bl	8000fc0 <bsp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	f107 010f 	add.w	r1, r7, #15
 8000f44:	2201      	movs	r2, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 ffb8 	bl	8002ebc <ringWrite>

    // Critical section end.
    bspInterruptEnable(true);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 f9d5 	bl	80012fc <bspInterruptEnable>

    return ch;
 8000f52:	687b      	ldr	r3, [r7, #4]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_UART_RxCpltCallback>:
//
// @param pUart pointer to UART instance
// @return none
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pUart)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pUart);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2d8      	uxtb	r0, r3
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_UART_RxCpltCallback+0x58>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_UART_RxCpltCallback+0x5c>)
 8000f76:	223b      	movs	r2, #59	; 0x3b
 8000f78:	4910      	ldr	r1, [pc, #64]	; (8000fbc <HAL_UART_RxCpltCallback+0x60>)
 8000f7a:	f000 fb59 	bl	8001630 <logAssert>

    // Write character to ring.
    ringWrite(bsp()->hStdin, &bsp()->stdRx, sizeof(bsp()->stdRx));
 8000f7e:	f000 f81f 	bl	8000fc0 <bsp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	6a1c      	ldr	r4, [r3, #32]
 8000f86:	f000 f81b 	bl	8000fc0 <bsp>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	331c      	adds	r3, #28
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4619      	mov	r1, r3
 8000f92:	4620      	mov	r0, r4
 8000f94:	f001 ff92 	bl	8002ebc <ringWrite>

    // Receive character in interrupt mode.
    HAL_UART_Receive_IT(pUart, (uint8_t*)&bsp()->stdRx, sizeof(bsp()->stdRx));
 8000f98:	f000 f812 	bl	8000fc0 <bsp>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	331c      	adds	r3, #28
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f011 ff89 	bl	8012ebc <HAL_UART_Receive_IT>
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0801883c 	.word	0x0801883c
 8000fb8:	080192bc 	.word	0x080192bc
 8000fbc:	08018828 	.word	0x08018828

08000fc0 <bsp>:
// @brief Get the BSP.
//
// @return pointer to BSP structure
//
inline trBsp* bsp(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af02      	add	r7, sp, #8
    // Validate BSP pointer.
    ASSERT(NULL != gprBsp);
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <bsp+0x2c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <bsp+0x30>)
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <bsp+0x34>)
 8000fda:	224d      	movs	r2, #77	; 0x4d
 8000fdc:	4906      	ldr	r1, [pc, #24]	; (8000ff8 <bsp+0x38>)
 8000fde:	f000 fb27 	bl	8001630 <logAssert>

    return gprBsp;
 8000fe2:	4b02      	ldr	r3, [pc, #8]	; (8000fec <bsp+0x2c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000038c 	.word	0x2000038c
 8000ff0:	0801884c 	.word	0x0801884c
 8000ff4:	080192d4 	.word	0x080192d4
 8000ff8:	08018828 	.word	0x08018828

08000ffc <bspConsoleDrain>:
// @brief Drain console stdout buffer.
//
// @return void
//
void bspConsoleDrain(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
    char ch;

    // Try to drain a character from the log.
    if (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8001002:	f7ff ffdd 	bl	8000fc0 <bsp>
 8001006:	4603      	mov	r3, r0
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	1df9      	adds	r1, r7, #7
 800100c:	2201      	movs	r2, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f001 ffa4 	bl	8002f5c <ringRead>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <bspConsoleDrain+0x26>
    {
        bspConsoleWrite(ch);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f853 	bl	80010c8 <bspConsoleWrite>
    }
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <bspConsoleEmpty>:
// @brief Determine if console stdin is empty.
//
// @return true = empty, false = not empty
//
bool bspConsoleEmpty(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
    return ringEmpty(bsp()->hStdin);
 800102e:	f7ff ffc7 	bl	8000fc0 <bsp>
 8001032:	4603      	mov	r3, r0
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4618      	mov	r0, r3
 8001038:	f001 ff1e 	bl	8002e78 <ringEmpty>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}

08001042 <bspConsoleFlush>:
// @brief Flush console stdout buffer.
//
// @return void
//
void bspConsoleFlush(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
    char ch;

    // Drain character to stdout.
    while (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8001048:	e003      	b.n	8001052 <bspConsoleFlush+0x10>
    {
        bspConsoleWrite(ch);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f83b 	bl	80010c8 <bspConsoleWrite>
    while (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8001052:	f7ff ffb5 	bl	8000fc0 <bsp>
 8001056:	4603      	mov	r3, r0
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	1df9      	adds	r1, r7, #7
 800105c:	2201      	movs	r2, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f001 ff7c 	bl	8002f5c <ringRead>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1ef      	bne.n	800104a <bspConsoleFlush+0x8>
    }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <bspConsoleRead>:
//
// @param pCh pointer to character
// @return true = read, false = not read
//
bool bspConsoleRead(char *pCh)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
 800107a:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pCh);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2d8      	uxtb	r0, r3
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <bspConsoleRead+0x48>)
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <bspConsoleRead+0x4c>)
 800108e:	2285      	movs	r2, #133	; 0x85
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <bspConsoleRead+0x50>)
 8001092:	f000 facd 	bl	8001630 <logAssert>

    return (ringRead(bsp()->hStdin, pCh, sizeof(*pCh)) > 0) ? true : false;
 8001096:	f7ff ff93 	bl	8000fc0 <bsp>
 800109a:	4603      	mov	r3, r0
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	2201      	movs	r2, #1
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 ff5a 	bl	8002f5c <ringRead>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bf14      	ite	ne
 80010ae:	2301      	movne	r3, #1
 80010b0:	2300      	moveq	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0801885c 	.word	0x0801885c
 80010c0:	080192d8 	.word	0x080192d8
 80010c4:	08018828 	.word	0x08018828

080010c8 <bspConsoleWrite>:
//
// @param ch character to write to UART
// @return character
//
void bspConsoleWrite(char ch)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(bsp()->pUart1, (const uint8_t*)&ch, sizeof(ch),
 80010d2:	f7ff ff75 	bl	8000fc0 <bsp>
 80010d6:	4603      	mov	r3, r0
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	1df9      	adds	r1, r7, #7
 80010dc:	230a      	movs	r3, #10
 80010de:	2201      	movs	r2, #1
 80010e0:	f011 fe5e 	bl	8012da0 <HAL_UART_Transmit>
        BSP_UART_TIMEOUT);
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <bspCycleCounter>:
// @brief Read cycle counter value.
//
// @return counter value
//
inline uint32_t bspCycleCounter(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <bspCycleCounter+0x14>)
 80010f2:	685b      	ldr	r3, [r3, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e0001000 	.word	0xe0001000

08001104 <bspCycleCounterFrequency>:
// @brief Retrieve cycle counter frequency.
//
// @return frequency
//
inline uint32_t bspCycleCounterFrequency(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
    return BSP_CPU_CLOCK_FREQUENCY;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <bspCycleCounterFrequency+0x10>)
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	07a12000 	.word	0x07a12000

08001118 <bspMillisecondDelay>:
//
// @param milliseconds number of milliseconds to delay execution
// @return none
//
inline void bspMillisecondDelay(uint32_t milliseconds)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    HAL_Delay(milliseconds);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f004 fdd9 	bl	8005cd8 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <bspI2cRead>:
// @param pBuffer pointer to data buffer
// @param length size of data buffer in bytes
// @return true = success, false = timeout
//
bool bspI2cRead(uint8_t address, uint8_t *pBuffer, uint16_t length)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	80bb      	strh	r3, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pBuffer);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2d8      	uxtb	r0, r3
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <bspI2cRead+0x70>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <bspI2cRead+0x74>)
 8001152:	22e0      	movs	r2, #224	; 0xe0
 8001154:	4914      	ldr	r1, [pc, #80]	; (80011a8 <bspI2cRead+0x78>)
 8001156:	f000 fa6b 	bl	8001630 <logAssert>
    ASSERT(length > 0);
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	b2d8      	uxtb	r0, r3
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <bspI2cRead+0x7c>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <bspI2cRead+0x74>)
 800116c:	22e1      	movs	r2, #225	; 0xe1
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <bspI2cRead+0x78>)
 8001170:	f000 fa5e 	bl	8001630 <logAssert>

    // Send data.
    if (HAL_OK != HAL_I2C_Master_Receive(bsp()->pI2c1, address,
 8001174:	f7ff ff24 	bl	8000fc0 <bsp>
 8001178:	4603      	mov	r3, r0
 800117a:	6858      	ldr	r0, [r3, #4]
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	b299      	uxth	r1, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	2264      	movs	r2, #100	; 0x64
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	f009 fd90 	bl	800acac <HAL_I2C_Master_Receive>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <bspI2cRead+0x66>
        pBuffer, length, BSP_I2C_TIMEOUT))
    {
        return false;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <bspI2cRead+0x68>
    }

    return true;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08018868 	.word	0x08018868
 80011a4:	080192e8 	.word	0x080192e8
 80011a8:	08018828 	.word	0x08018828
 80011ac:	08018878 	.word	0x08018878

080011b0 <bspI2cWrite>:
// @param pBuffer pointer to data buffer
// @param length size of data buffer in bytes
// @return true = success, false = timeout
//
bool bspI2cWrite(uint8_t address, uint8_t *pBuffer, uint16_t length)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	80bb      	strh	r3, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pBuffer);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2d8      	uxtb	r0, r3
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <bspI2cWrite+0x74>)
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <bspI2cWrite+0x78>)
 80011d2:	f240 122f 	movw	r2, #303	; 0x12f
 80011d6:	4915      	ldr	r1, [pc, #84]	; (800122c <bspI2cWrite+0x7c>)
 80011d8:	f000 fa2a 	bl	8001630 <logAssert>
    ASSERT(length > 0);
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf14      	ite	ne
 80011e2:	2301      	movne	r3, #1
 80011e4:	2300      	moveq	r3, #0
 80011e6:	b2d8      	uxtb	r0, r3
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <bspI2cWrite+0x80>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <bspI2cWrite+0x78>)
 80011ee:	f44f 7298 	mov.w	r2, #304	; 0x130
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <bspI2cWrite+0x7c>)
 80011f4:	f000 fa1c 	bl	8001630 <logAssert>

    // Send data.
    if (HAL_OK != HAL_I2C_Master_Transmit(bsp()->pI2c1, address,
 80011f8:	f7ff fee2 	bl	8000fc0 <bsp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	6858      	ldr	r0, [r3, #4]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	b299      	uxth	r1, r3
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	2264      	movs	r2, #100	; 0x64
 8001208:	9200      	str	r2, [sp, #0]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	f009 fc5a 	bl	800aac4 <HAL_I2C_Master_Transmit>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <bspI2cWrite+0x6a>
        pBuffer, length, BSP_I2C_TIMEOUT))
    {
        return false;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <bspI2cWrite+0x6c>
    }

    return true;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08018868 	.word	0x08018868
 8001228:	080192f4 	.word	0x080192f4
 800122c:	08018828 	.word	0x08018828
 8001230:	08018878 	.word	0x08018878

08001234 <bspInit>:
//
// @param prBsp pointer to BSP structure
// @return true = success, false = failure
//
bool bspInit(trBsp *prBsp)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
	// Validate argument[s].
	ASSERT(NULL != prBsp);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <bspInit+0xa4>)
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <bspInit+0xa8>)
 800124e:	f240 1245 	movw	r2, #325	; 0x145
 8001252:	4923      	ldr	r1, [pc, #140]	; (80012e0 <bspInit+0xac>)
 8001254:	f000 f9ec 	bl	8001630 <logAssert>

	// Set local BSP structure pointer.
	gprBsp = prBsp;
 8001258:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <bspInit+0xb0>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]

	// Disable I/O buffering.
	setvbuf(stdout, NULL, _IONBF, 0);
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <bspInit+0xb4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	2300      	movs	r3, #0
 8001266:	2202      	movs	r2, #2
 8001268:	2100      	movs	r1, #0
 800126a:	f014 ffa9 	bl	80161c0 <setvbuf>

	// Enable trace and cycle counter.
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <bspInit+0xb8>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <bspInit+0xb8>)
 8001274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001278:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT       = 0;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <bspInit+0xbc>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
	DWT->CTRL        |= DWT_CTRL_CYCCNTENA_Msk;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <bspInit+0xbc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <bspInit+0xbc>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6013      	str	r3, [r2, #0]

    // Create ring buffers.
    bsp()->hStdin   = ringInit(gStdinBuffer, sizeof(gStdinBuffer));
 800128c:	f7ff fe98 	bl	8000fc0 <bsp>
 8001290:	4604      	mov	r4, r0
 8001292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <bspInit+0xc0>)
 8001298:	f001 fdb0 	bl	8002dfc <ringInit>
 800129c:	4603      	mov	r3, r0
 800129e:	6223      	str	r3, [r4, #32]
    bsp()->hStdout  = ringInit(gStdoutBuffer, sizeof(gStdoutBuffer));
 80012a0:	f7ff fe8e 	bl	8000fc0 <bsp>
 80012a4:	4604      	mov	r4, r0
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <bspInit+0xc4>)
 80012ac:	f001 fda6 	bl	8002dfc <ringInit>
 80012b0:	4603      	mov	r3, r0
 80012b2:	6263      	str	r3, [r4, #36]	; 0x24

	// Receive character in interrupt mode.
	HAL_UART_Receive_IT(bsp()->pUart1, (uint8_t*)&bsp()->stdRx,
 80012b4:	f7ff fe84 	bl	8000fc0 <bsp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	681c      	ldr	r4, [r3, #0]
 80012bc:	f7ff fe80 	bl	8000fc0 <bsp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	331c      	adds	r3, #28
 80012c4:	2201      	movs	r2, #1
 80012c6:	4619      	mov	r1, r3
 80012c8:	4620      	mov	r0, r4
 80012ca:	f011 fdf7 	bl	8012ebc <HAL_UART_Receive_IT>
        sizeof(bsp()->stdRx));

	return true;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	08018884 	.word	0x08018884
 80012dc:	08019300 	.word	0x08019300
 80012e0:	08018828 	.word	0x08018828
 80012e4:	2000038c 	.word	0x2000038c
 80012e8:	20000200 	.word	0x20000200
 80012ec:	e000edf0 	.word	0xe000edf0
 80012f0:	e0001000 	.word	0xe0001000
 80012f4:	20000390 	.word	0x20000390
 80012f8:	20000790 	.word	0x20000790

080012fc <bspInterruptEnable>:
//
// @param state true = enable, false = disable
// @return none
//
void bspInterruptEnable(bool state)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	// Evaluate state.
	if (state)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <bspInterruptEnable+0x14>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800130c:	b662      	cpsie	i
}
 800130e:	e001      	b.n	8001314 <bspInterruptEnable+0x18>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
	}
	else
	{
		__disable_irq();
	}
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <bspPrintf>:
// @param pFormat pointer to null terminated format string
// @param ... variable arguments
// @return number of characters printed
//
int bspPrintf(const char *pFormat, ...)
{
 8001320:	b40f      	push	{r0, r1, r2, r3}
 8001322:	b590      	push	{r4, r7, lr}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
    va_list     args;
    static char buffer[BSP_PRINTF_BUFFER_SIZE];

    // Print formatted string to buffer.
    //lint -save -e530
    va_start(args, pFormat);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	603b      	str	r3, [r7, #0]
    //lint -restore
    length = vsnprintf(buffer, sizeof(buffer), pFormat, args);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	2150      	movs	r1, #80	; 0x50
 8001334:	480f      	ldr	r0, [pc, #60]	; (8001374 <bspPrintf+0x54>)
 8001336:	f015 f893 	bl	8016460 <vsniprintf>
 800133a:	6078      	str	r0, [r7, #4]
    va_end(args);

    // Critical section begin.
    bspInterruptEnable(false);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffdd 	bl	80012fc <bspInterruptEnable>

    // Write to ring buffer.
    ringWrite(bsp()->hStdout, buffer, strlen(buffer));
 8001342:	f7ff fe3d 	bl	8000fc0 <bsp>
 8001346:	4603      	mov	r3, r0
 8001348:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800134a:	480a      	ldr	r0, [pc, #40]	; (8001374 <bspPrintf+0x54>)
 800134c:	f7fe ffbe 	bl	80002cc <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <bspPrintf+0x54>)
 8001356:	4620      	mov	r0, r4
 8001358:	f001 fdb0 	bl	8002ebc <ringWrite>

    // Critical section end.
    bspInterruptEnable(true);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff ffcd 	bl	80012fc <bspInterruptEnable>

    return length;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800136e:	b004      	add	sp, #16
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20001790 	.word	0x20001790

08001378 <bspReset>:
// @brief Reset the board.
//
// @return none
//
void bspReset(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    // Reset MCU.
    HAL_NVIC_SystemReset();
 800137c:	f006 ffe3 	bl	8008346 <HAL_NVIC_SystemReset>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <bspTickHandler>:
// @param pCallback pointer to callback function
// @param pContext optional pointer to callback context
// @return character
//
void bspTickHandler(tpBspTickHandler pHandler, void *pContext)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af02      	add	r7, sp, #8
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	// Validate argument[s].
	ASSERT(NULL != pHandler);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2d8      	uxtb	r0, r3
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <bspTickHandler+0x50>)
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <bspTickHandler+0x54>)
 80013a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80013a4:	490d      	ldr	r1, [pc, #52]	; (80013dc <bspTickHandler+0x58>)
 80013a6:	f000 f943 	bl	8001630 <logAssert>

	// Disable interrupts.
	bspInterruptEnable(false);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff ffa6 	bl	80012fc <bspInterruptEnable>

	// Assign callback.
	bsp()->pTickHandler = pHandler;
 80013b0:	f7ff fe06 	bl	8000fc0 <bsp>
 80013b4:	4602      	mov	r2, r0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6153      	str	r3, [r2, #20]
	bsp()->pTickContext = pContext;
 80013ba:	f7ff fe01 	bl	8000fc0 <bsp>
 80013be:	4602      	mov	r2, r0
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6193      	str	r3, [r2, #24]

	// Enable interrupts.
	bspInterruptEnable(true);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff ff99 	bl	80012fc <bspInterruptEnable>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08018894 	.word	0x08018894
 80013d8:	08019308 	.word	0x08019308
 80013dc:	08018828 	.word	0x08018828

080013e0 <bspHeartbeatLed>:
//
// @param state true = on, false = off
// @return character
//
void bspHeartbeatLed(bool state)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, (state) ?
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	461a      	mov	r2, r3
 80013ee:	2104      	movs	r1, #4
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <bspHeartbeatLed+0x20>)
 80013f2:	f009 fa77 	bl	800a8e4 <HAL_GPIO_WritePin>
        GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	42020c00 	.word	0x42020c00

08001404 <errorString>:
//
// @param eError enumerated error value
// @return enumerated error code
//
const char * errorString(teError eError)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
    // Validate argument[s].
    ASSERT(eError < DIM(grError));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b27      	cmp	r3, #39	; 0x27
 8001412:	bf94      	ite	ls
 8001414:	2301      	movls	r3, #1
 8001416:	2300      	movhi	r3, #0
 8001418:	b2d8      	uxtb	r0, r3
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <errorString+0x58>)
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <errorString+0x5c>)
 8001420:	2253      	movs	r2, #83	; 0x53
 8001422:	4910      	ldr	r1, [pc, #64]	; (8001464 <errorString+0x60>)
 8001424:	f000 f904 	bl	8001630 <logAssert>
    ASSERT(eError == grError[eError].eError);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <errorString+0x64>)
 800142c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	429a      	cmp	r2, r3
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <errorString+0x68>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <errorString+0x5c>)
 8001442:	2254      	movs	r2, #84	; 0x54
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <errorString+0x60>)
 8001446:	f000 f8f3 	bl	8001630 <logAssert>

    return grError[eError].pDescription;
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <errorString+0x64>)
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	685b      	ldr	r3, [r3, #4]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	08018a34 	.word	0x08018a34
 8001460:	08019318 	.word	0x08019318
 8001464:	08018a20 	.word	0x08018a20
 8001468:	20000000 	.word	0x20000000
 800146c:	08018a4c 	.word	0x08018a4c

08001470 <logFilename>:
//
// @param pFilename pointer to null terminated string
// @return pointer to null terminated string
//
static char * logFilename(const char *pFilename)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]
    char *pString;

    // Validate argument[s].
    ASSERT(NULL != pFilename);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <logFilename+0x58>)
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <logFilename+0x5c>)
 800148a:	2223      	movs	r2, #35	; 0x23
 800148c:	4910      	ldr	r1, [pc, #64]	; (80014d0 <logFilename+0x60>)
 800148e:	f000 f8cf 	bl	8001630 <logAssert>

    // Scan for last forward slash if present.
    pString = (char*)pFilename + strlen(pFilename);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7fe ff1a 	bl	80002cc <strlen>
 8001498:	4602      	mov	r2, r0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    while (pString != pFilename)
 80014a0:	e009      	b.n	80014b6 <logFilename+0x46>
    {
        // Check for forward slash.
        if ('/' == *(pString - 1))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b2f      	cmp	r3, #47	; 0x2f
 80014aa:	d101      	bne.n	80014b0 <logFilename+0x40>
        {
            return pString;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	e007      	b.n	80014c0 <logFilename+0x50>
        }

        // Move to previous character.
        pString--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
    while (pString != pFilename)
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d1f1      	bne.n	80014a2 <logFilename+0x32>
    }

    return pString;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08018a94 	.word	0x08018a94
 80014cc:	08019324 	.word	0x08019324
 80014d0:	08018a80 	.word	0x08018a80

080014d4 <logPrefix>:
// @return none
//
static void logPrefix(teLogLevel eLogLevel, const char *pFilename,
			   	      const uint16_t line, const char *pFunction,
					  char *pBuffer, uint16_t length)
{
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b093      	sub	sp, #76	; 0x4c
 80014d8:	af08      	add	r7, sp, #32
 80014da:	61b9      	str	r1, [r7, #24]
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4603      	mov	r3, r0
 80014e0:	77fb      	strb	r3, [r7, #31]
 80014e2:	4613      	mov	r3, r2
 80014e4:	83bb      	strh	r3, [r7, #28]
	trTimerTimestamp   rTimestamp;
    static const char *pPrefix[] = { "NONE", "FATAL", "ASSERT", "ERR",
    								 "WARN", "INFO", "DBG", "MAX" };

    // Validate arguments.
    ASSERT(NULL != pFilename);
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2d8      	uxtb	r0, r3
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <logPrefix+0x118>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <logPrefix+0x11c>)
 80014f8:	2249      	movs	r2, #73	; 0x49
 80014fa:	493e      	ldr	r1, [pc, #248]	; (80015f4 <logPrefix+0x120>)
 80014fc:	f000 f898 	bl	8001630 <logAssert>
    ASSERT(line > 0);
 8001500:	8bbb      	ldrh	r3, [r7, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2d8      	uxtb	r0, r3
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <logPrefix+0x124>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <logPrefix+0x11c>)
 8001512:	224a      	movs	r2, #74	; 0x4a
 8001514:	4937      	ldr	r1, [pc, #220]	; (80015f4 <logPrefix+0x120>)
 8001516:	f000 f88b 	bl	8001630 <logAssert>
    ASSERT(NULL != pFunction);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf14      	ite	ne
 8001520:	2301      	movne	r3, #1
 8001522:	2300      	moveq	r3, #0
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <logPrefix+0x128>)
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <logPrefix+0x11c>)
 800152c:	224b      	movs	r2, #75	; 0x4b
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <logPrefix+0x120>)
 8001530:	f000 f87e 	bl	8001630 <logAssert>
    ASSERT(eLogLevel <= eLogLevelMax);
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	2b07      	cmp	r3, #7
 8001538:	bf94      	ite	ls
 800153a:	2301      	movls	r3, #1
 800153c:	2300      	movhi	r3, #0
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <logPrefix+0x12c>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <logPrefix+0x11c>)
 8001546:	224c      	movs	r2, #76	; 0x4c
 8001548:	492a      	ldr	r1, [pc, #168]	; (80015f4 <logPrefix+0x120>)
 800154a:	f000 f871 	bl	8001630 <logAssert>
    ASSERT(NULL != pBuffer);
 800154e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2d8      	uxtb	r0, r3
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <logPrefix+0x130>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <logPrefix+0x11c>)
 8001560:	224d      	movs	r2, #77	; 0x4d
 8001562:	4924      	ldr	r1, [pc, #144]	; (80015f4 <logPrefix+0x120>)
 8001564:	f000 f864 	bl	8001630 <logAssert>
    ASSERT(length > 0);
 8001568:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2d8      	uxtb	r0, r3
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <logPrefix+0x134>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <logPrefix+0x11c>)
 800157c:	224e      	movs	r2, #78	; 0x4e
 800157e:	491d      	ldr	r1, [pc, #116]	; (80015f4 <logPrefix+0x120>)
 8001580:	f000 f856 	bl	8001630 <logAssert>

    // Format and log string.
    timerTimestamp(&rTimestamp);
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f004 f8e1 	bl	8005750 <timerTimestamp>
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 800158e:	f8b7 4044 	ldrh.w	r4, [r7, #68]	; 0x44
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <logPrefix+0x138>)
 8001596:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 800159a:	8c3b      	ldrh	r3, [r7, #32]
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 800159c:	461e      	mov	r6, r3
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 800159e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015a2:	613b      	str	r3, [r7, #16]
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015a8:	60fb      	str	r3, [r7, #12]
        rTimestamp.seconds, rTimestamp.milliseconds, logFilename(pFilename),
 80015aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015ae:	60bb      	str	r3, [r7, #8]
        rTimestamp.seconds, rTimestamp.milliseconds, logFilename(pFilename),
 80015b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	69b8      	ldr	r0, [r7, #24]
 80015b6:	f7ff ff5b 	bl	8001470 <logFilename>
 80015ba:	4601      	mov	r1, r0
 80015bc:	8bbb      	ldrh	r3, [r7, #28]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	9207      	str	r2, [sp, #28]
 80015c2:	9306      	str	r3, [sp, #24]
 80015c4:	9105      	str	r1, [sp, #20]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	9204      	str	r2, [sp, #16]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	9203      	str	r2, [sp, #12]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	9202      	str	r2, [sp, #8]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	9600      	str	r6, [sp, #0]
 80015d8:	462b      	mov	r3, r5
 80015da:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <logPrefix+0x13c>)
 80015dc:	4621      	mov	r1, r4
 80015de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015e0:	f014 fe9c 	bl	801631c <sniprintf>
        line, pFunction);
}
 80015e4:	bf00      	nop
 80015e6:	372c      	adds	r7, #44	; 0x2c
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ec:	08018a94 	.word	0x08018a94
 80015f0:	08019330 	.word	0x08019330
 80015f4:	08018a80 	.word	0x08018a80
 80015f8:	08018aa8 	.word	0x08018aa8
 80015fc:	08018ab4 	.word	0x08018ab4
 8001600:	08018ac8 	.word	0x08018ac8
 8001604:	08018ae4 	.word	0x08018ae4
 8001608:	08018af4 	.word	0x08018af4
 800160c:	20000144 	.word	0x20000144
 8001610:	08018b00 	.word	0x08018b00

08001614 <logInit>:
// @brief Initialize log.
//
// @return enumerated error code
//
teError logInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	// Initialize history buffer.
	memset(grLogErrorHistory, 0, sizeof(grLogErrorHistory));
 8001618:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800161c:	2100      	movs	r1, #0
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <logInit+0x18>)
 8001620:	f014 ffc2 	bl	80165a8 <memset>

	return eErrorNone;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200017e0 	.word	0x200017e0

08001630 <logAssert>:
// @return void
//
void logAssert(bool bIgnore, const char *pFilename,
    const uint16_t line, const char *pFunction,
    const char *pDescription)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	4613      	mov	r3, r2
 8001640:	81bb      	strh	r3, [r7, #12]
    bool state = true;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]

    // Check condition.
    if (!bIgnore)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01f      	beq.n	8001692 <logAssert+0x62>
    {
        // Display location information.
    	logEntry(eLogLevelAssert, pFilename, line, pFunction, pDescription);
 8001652:	89ba      	ldrh	r2, [r7, #12]
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	2002      	movs	r0, #2
 800165e:	f000 f81d 	bl	800169c <logEntry>

        // Flush the console.
        bspConsoleFlush();
 8001662:	f7ff fcee 	bl	8001042 <bspConsoleFlush>

        // Spin forever!
        for (;;)
        {
            // Set heartbeat LED to indicate fault.
            bspHeartbeatLed(state = !state);
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f083 0301 	eor.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	75fb      	strb	r3, [r7, #23]
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff feab 	bl	80013e0 <bspHeartbeatLed>

            // Wait for a bit.
            bspMillisecondDelay(BSP_FAULT_LED_FLASH_PERIOD);
 800168a:	2064      	movs	r0, #100	; 0x64
 800168c:	f7ff fd44 	bl	8001118 <bspMillisecondDelay>
            bspHeartbeatLed(state = !state);
 8001690:	e7e9      	b.n	8001666 <logAssert+0x36>
        }
    }
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <logEntry>:
// @return void
//
void logEntry(teLogLevel eLogLevel, const char *pFilename,
    const uint16_t line, const char *pFunction,
    const char *pFormat, ...)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b09c      	sub	sp, #112	; 0x70
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	4613      	mov	r3, r2
 80016ac:	81bb      	strh	r3, [r7, #12]
    va_list args;
    char    buffer[LOG_LINE_LENGTH_MAX];

    // Filter log level.
    if (eLogLevel > geLogLevel)
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <logEntry+0xb4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d847      	bhi.n	8001748 <logEntry+0xac>
    {
        return;
    }

    // Validate argument[s].
    ASSERT(NULL != pFilename);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2d8      	uxtb	r0, r3
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <logEntry+0xb8>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <logEntry+0xbc>)
 80016ca:	22be      	movs	r2, #190	; 0xbe
 80016cc:	4923      	ldr	r1, [pc, #140]	; (800175c <logEntry+0xc0>)
 80016ce:	f7ff ffaf 	bl	8001630 <logAssert>
    ASSERT(line > 0);
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2d8      	uxtb	r0, r3
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <logEntry+0xc4>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <logEntry+0xbc>)
 80016e4:	22bf      	movs	r2, #191	; 0xbf
 80016e6:	491d      	ldr	r1, [pc, #116]	; (800175c <logEntry+0xc0>)
 80016e8:	f7ff ffa2 	bl	8001630 <logAssert>
    ASSERT(NULL != pFunction);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2d8      	uxtb	r0, r3
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <logEntry+0xc8>)
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <logEntry+0xbc>)
 80016fe:	22c0      	movs	r2, #192	; 0xc0
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <logEntry+0xc0>)
 8001702:	f7ff ff95 	bl	8001630 <logAssert>

    // Print prefix information.
    logPrefix(eLogLevel, pFilename, line, pFunction, buffer, sizeof(buffer));
 8001706:	89ba      	ldrh	r2, [r7, #12]
 8001708:	7bf8      	ldrb	r0, [r7, #15]
 800170a:	2350      	movs	r3, #80	; 0x50
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	f7ff fedc 	bl	80014d4 <logPrefix>
    bspPrintf("\r\n%s", buffer);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <logEntry+0xcc>)
 8001724:	f7ff fdfc 	bl	8001320 <bspPrintf>

    // Print formatted string.
	//lint -save -e530
	va_start(args, pFormat);
 8001728:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800172c:	667b      	str	r3, [r7, #100]	; 0x64
	//lint -restore
	vsnprintf(buffer, sizeof(buffer), pFormat, args);
 800172e:	f107 0014 	add.w	r0, r7, #20
 8001732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001734:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001736:	2150      	movs	r1, #80	; 0x50
 8001738:	f014 fe92 	bl	8016460 <vsniprintf>
	va_end(args);
	bspPrintf(buffer);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fded 	bl	8001320 <bspPrintf>
 8001746:	e000      	b.n	800174a <logEntry+0xae>
        return;
 8001748:	bf00      	nop
}
 800174a:	3768      	adds	r7, #104	; 0x68
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000140 	.word	0x20000140
 8001754:	08018a94 	.word	0x08018a94
 8001758:	0801933c 	.word	0x0801933c
 800175c:	08018a80 	.word	0x08018a80
 8001760:	08018aa8 	.word	0x08018aa8
 8001764:	08018ab4 	.word	0x08018ab4
 8001768:	08018b28 	.word	0x08018b28

0800176c <logError>:
// @param line source code line number
// @param pFunction pointer to function name string
// @return enumerated error code
teError logError(teError eError, const char *pFilename,
    const uint16_t line, const char *pFunction)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b087      	sub	sp, #28
 8001770:	af02      	add	r7, sp, #8
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	4613      	mov	r3, r2
 800177c:	81bb      	strh	r3, [r7, #12]
    // Validate argument[s].
    ASSERT(NULL != pFilename);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf14      	ite	ne
 8001784:	2301      	movne	r3, #1
 8001786:	2300      	moveq	r3, #0
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <logError+0xd4>)
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <logError+0xd8>)
 8001790:	f240 1215 	movw	r2, #277	; 0x115
 8001794:	492c      	ldr	r1, [pc, #176]	; (8001848 <logError+0xdc>)
 8001796:	f7ff ff4b 	bl	8001630 <logAssert>
    ASSERT(NULL != pFunction);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <logError+0xe0>)
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <logError+0xd8>)
 80017ac:	f44f 728b 	mov.w	r2, #278	; 0x116
 80017b0:	4925      	ldr	r1, [pc, #148]	; (8001848 <logError+0xdc>)
 80017b2:	f7ff ff3d 	bl	8001630 <logAssert>

    // Advance head.
    gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <logError+0xe4>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <logError+0xe4>)
 80017c6:	801a      	strh	r2, [r3, #0]

    // Assign error entry.
    grLogErrorHistory[gLogErrorHistoryHead].eError = eError;
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <logError+0xe4>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <logError+0xe8>)
 80017d0:	460b      	mov	r3, r1
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	701a      	strb	r2, [r3, #0]
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <logError+0xe4>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <logError+0xe8>)
 80017ee:	4413      	add	r3, r2
 80017f0:	1c5c      	adds	r4, r3, #1
        logFilename(pFilename), sizeof(grLogErrorHistory[0].file) - 1);
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	f7ff fe3c 	bl	8001470 <logFilename>
 80017f8:	4603      	mov	r3, r0
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80017fa:	221f      	movs	r2, #31
 80017fc:	4619      	mov	r1, r3
 80017fe:	4620      	mov	r0, r4
 8001800:	f014 feed 	bl	80165de <strncpy>
    grLogErrorHistory[gLogErrorHistoryHead].line = line;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <logError+0xe4>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	89ba      	ldrh	r2, [r7, #12]
 800180c:	4911      	ldr	r1, [pc, #68]	; (8001854 <logError+0xe8>)
 800180e:	4603      	mov	r3, r0
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4403      	add	r3, r0
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3324      	adds	r3, #36	; 0x24
 800181a:	601a      	str	r2, [r3, #0]

    // Issue log entry.
    logEntry(eLogLevelError, pFilename, line, pFunction, errorString(eError));
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fdf0 	bl	8001404 <errorString>
 8001824:	4603      	mov	r3, r0
 8001826:	89ba      	ldrh	r2, [r7, #12]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	2003      	movs	r0, #3
 8001830:	f7ff ff34 	bl	800169c <logEntry>

    return eErrorNone;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	08018a94 	.word	0x08018a94
 8001844:	08019348 	.word	0x08019348
 8001848:	08018a80 	.word	0x08018a80
 800184c:	08018ab4 	.word	0x08018ab4
 8001850:	20001920 	.word	0x20001920
 8001854:	200017e0 	.word	0x200017e0

08001858 <logFatal>:
//                  name
// @return none
//
void logFatal(teError eError, const char *pFilename,
    const uint16_t line, const char *pFunction)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af02      	add	r7, sp, #8
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	4613      	mov	r3, r2
 8001868:	81bb      	strh	r3, [r7, #12]
    bool state = true;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]

    // Advance head.
    gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <logFatal+0xc4>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	b29b      	uxth	r3, r3
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <logFatal+0xc4>)
 800187e:	801a      	strh	r2, [r3, #0]

    // Assign error entry.
    grLogErrorHistory[gLogErrorHistoryHead].eError = eError;
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <logFatal+0xc4>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	4a26      	ldr	r2, [pc, #152]	; (8001920 <logFatal+0xc8>)
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	701a      	strb	r2, [r3, #0]
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <logFatal+0xc4>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <logFatal+0xc8>)
 80018a6:	4413      	add	r3, r2
 80018a8:	1c5c      	adds	r4, r3, #1
        logFilename(pFilename), sizeof(grLogErrorHistory[0].file) - 1);
 80018aa:	68b8      	ldr	r0, [r7, #8]
 80018ac:	f7ff fde0 	bl	8001470 <logFilename>
 80018b0:	4603      	mov	r3, r0
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80018b2:	221f      	movs	r2, #31
 80018b4:	4619      	mov	r1, r3
 80018b6:	4620      	mov	r0, r4
 80018b8:	f014 fe91 	bl	80165de <strncpy>
    grLogErrorHistory[gLogErrorHistoryHead].line = line;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <logFatal+0xc4>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	89ba      	ldrh	r2, [r7, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <logFatal+0xc8>)
 80018c6:	4603      	mov	r3, r0
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3324      	adds	r3, #36	; 0x24
 80018d2:	601a      	str	r2, [r3, #0]

    // Issue log entry.
    logEntry(eLogLevelFatal, pFilename, line, pFunction, errorString(eError));
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd94 	bl	8001404 <errorString>
 80018dc:	4603      	mov	r3, r0
 80018de:	89ba      	ldrh	r2, [r7, #12]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff fed8 	bl	800169c <logEntry>

    // Flush the console.
    bspConsoleFlush();
 80018ec:	f7ff fba9 	bl	8001042 <bspConsoleFlush>

    // Spin forever!
    for (;;)
    {
        // Set heartbeat LED to indicate fault.
        bspHeartbeatLed(state = !state);
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf14      	ite	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	2300      	moveq	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f083 0301 	eor.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	75fb      	strb	r3, [r7, #23]
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	75fb      	strb	r3, [r7, #23]
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fd66 	bl	80013e0 <bspHeartbeatLed>

        // Wait for a bit.
        bspMillisecondDelay(BSP_FAULT_LED_FLASH_PERIOD);
 8001914:	2064      	movs	r0, #100	; 0x64
 8001916:	f7ff fbff 	bl	8001118 <bspMillisecondDelay>
        bspHeartbeatLed(state = !state);
 800191a:	e7e9      	b.n	80018f0 <logFatal+0x98>
 800191c:	20001920 	.word	0x20001920
 8001920:	200017e0 	.word	0x200017e0

08001924 <logErrorHistory>:
// @param pBuffer pointer to buffer
// @param length size of buffer in bytes
// @return true = content, false = empty
//
bool logErrorHistory(trLogError *prError)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
	// Validate argument[s].
	ASSERT(NULL != prError);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2d8      	uxtb	r0, r3
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <logErrorHistory+0x94>)
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <logErrorHistory+0x98>)
 800193e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001942:	491f      	ldr	r1, [pc, #124]	; (80019c0 <logErrorHistory+0x9c>)
 8001944:	f7ff fe74 	bl	8001630 <logAssert>

	// Check content.
	if (eErrorNone != grLogErrorHistory[gLogErrorHistoryHead].eError)
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <logErrorHistory+0xa0>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <logErrorHistory+0xa4>)
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d026      	beq.n	80019ae <logErrorHistory+0x8a>
	{
		// Copy and clear entry.
	    memcpy(prError, &grLogErrorHistory[gLogErrorHistoryHead],
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <logErrorHistory+0xa0>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <logErrorHistory+0xa4>)
 8001970:	4413      	add	r3, r2
 8001972:	2228      	movs	r2, #40	; 0x28
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f014 ff25 	bl	80167c6 <memcpy>
            sizeof(*prError));
		memset(&grLogErrorHistory[gLogErrorHistoryHead], 0,
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <logErrorHistory+0xa0>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <logErrorHistory+0xa4>)
 800198c:	4413      	add	r3, r2
 800198e:	2228      	movs	r2, #40	; 0x28
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f014 fe08 	bl	80165a8 <memset>
            sizeof(grLogErrorHistory[0]));
    	gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <logErrorHistory+0xa0>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <logErrorHistory+0xa0>)
 80019a8:	801a      	strh	r2, [r3, #0]

    	return true;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <logErrorHistory+0x8c>
	}

	return false;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	08018b5c 	.word	0x08018b5c
 80019bc:	08019354 	.word	0x08019354
 80019c0:	08018a80 	.word	0x08018a80
 80019c4:	20001920 	.word	0x20001920
 80019c8:	200017e0 	.word	0x200017e0

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d0:	f004 f8bc 	bl	8005b4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d4:	f000 f848 	bl	8001a68 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019d8:	f000 f8b8 	bl	8001b4c <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80019dc:	f000 f8ed 	bl	8001bba <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f000 fe0a 	bl	80025f8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80019e4:	f000 fae8 	bl	8001fb8 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80019e8:	f000 faa8 	bl	8001f3c <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80019ec:	f000 fb1c 	bl	8002028 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80019f0:	f000 fb98 	bl	8002124 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80019f4:	f000 fbd6 	bl	80021a4 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80019f8:	f000 fbe8 	bl	80021cc <MX_LTDC_Init>
  MX_RTC_Init();
 80019fc:	f000 fc66 	bl	80022cc <MX_RTC_Init>
  MX_TIM3_Init();
 8001a00:	f000 fd1e 	bl	8002440 <MX_TIM3_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001a04:	f000 fdca 	bl	800259c <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 8001a08:	f000 f8e6 	bl	8001bd8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001a0c:	f000 fd7a 	bl	8002504 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8001a10:	f000 fcaa 	bl	8002368 <MX_SAI2_Init>
  MX_ADC4_Init();
 8001a14:	f000 fa18 	bl	8001e48 <MX_ADC4_Init>
  MX_I2C1_Init();
 8001a18:	f000 fb44 	bl	80020a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize BSP structure.
  memset(&rBsp, 0, sizeof(rBsp));
 8001a1c:	2228      	movs	r2, #40	; 0x28
 8001a1e:	2100      	movs	r1, #0
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <main+0x84>)
 8001a22:	f014 fdc1 	bl	80165a8 <memset>
  rBsp.pUart1      = &huart1;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <main+0x84>)
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <main+0x88>)
 8001a2a:	601a      	str	r2, [r3, #0]
  rBsp.pI2c1       = &hi2c1;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <main+0x84>)
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <main+0x8c>)
 8001a30:	605a      	str	r2, [r3, #4]
  rBsp.pSaiBlockB2 = &hsai_BlockB2;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <main+0x84>)
 8001a34:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <main+0x90>)
 8001a36:	609a      	str	r2, [r3, #8]
  rBsp.pAdc1	   = &hadc1;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <main+0x84>)
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <main+0x94>)
 8001a3c:	60da      	str	r2, [r3, #12]
  rBsp.pAdc4	   = &hadc4;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <main+0x84>)
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <main+0x98>)
 8001a42:	611a      	str	r2, [r3, #16]
  platformInit(&rBsp);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <main+0x84>)
 8001a46:	f001 f84f 	bl	8002ae8 <platformInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  platformService();
 8001a4a:	f001 f923 	bl	8002c94 <platformService>
 8001a4e:	e7fc      	b.n	8001a4a <main+0x7e>
 8001a50:	200025d0 	.word	0x200025d0
 8001a54:	20002058 	.word	0x20002058
 8001a58:	20001c30 	.word	0x20001c30
 8001a5c:	20001e48 	.word	0x20001e48
 8001a60:	20001924 	.word	0x20001924
 8001a64:	200019b0 	.word	0x200019b0

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b09e      	sub	sp, #120	; 0x78
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	2260      	movs	r2, #96	; 0x60
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f014 fd96 	bl	80165a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a8c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001a90:	f00a ffde 	bl	800ca50 <HAL_PWREx_ControlVoltageScaling>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001a9a:	f000 fee3 	bl	8002864 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a9e:	f00a ffc7 	bl	800ca30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <SystemClock_Config+0xe0>)
 8001aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa8:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <SystemClock_Config+0xe0>)
 8001aaa:	f023 0318 	bic.w	r3, r3, #24
 8001aae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ab2:	2317      	movs	r3, #23
 8001ab4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001abc:	2381      	movs	r3, #129	; 0x81
 8001abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aca:	2301      	movs	r3, #1
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ace:	2310      	movs	r3, #16
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ada:	2303      	movs	r3, #3
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001aea:	2308      	movs	r3, #8
 8001aec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001af6:	230c      	movs	r3, #12
 8001af8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00b f8ce 	bl	800cca4 <HAL_RCC_OscConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b0e:	f000 fea9 	bl	8002864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b12:	231f      	movs	r3, #31
 8001b14:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b16:	2303      	movs	r3, #3
 8001b18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00b ff94 	bl	800da5c <HAL_RCC_ClockConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001b3a:	f000 fe93 	bl	8002864 <Error_Handler>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3778      	adds	r7, #120	; 0x78
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	46020c00 	.word	0x46020c00

08001b4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0b8      	sub	sp, #224	; 0xe0
 8001b50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	22e0      	movs	r2, #224	; 0xe0
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f014 fd25 	bl	80165a8 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8001b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b62:	f04f 0301 	mov.w	r3, #1
 8001b66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8001b70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8001b80:	230c      	movs	r3, #12
 8001b82:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001b90:	230c      	movs	r3, #12
 8001b92:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8001b9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00c fb2a 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8001bae:	f000 fe59 	bl	8002864 <Error_Handler>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	37e0      	adds	r7, #224	; 0xe0
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001bbe:	f00b f833 	bl	800cc28 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f00a ffd0 	bl	800cb68 <HAL_PWREx_ConfigSupply>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001bce:	f000 fe49 	bl	8002864 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bde:	463b      	mov	r3, r7
 8001be0:	2220      	movs	r2, #32
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f014 fcdf 	bl	80165a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001bec:	4a88      	ldr	r2, [pc, #544]	; (8001e10 <MX_ADC1_Init+0x238>)
 8001bee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bf0:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001bf6:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001bfc:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c02:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c08:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c10:	2204      	movs	r2, #4
 8001c12:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8001c14:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 13;
 8001c22:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c24:	220d      	movs	r2, #13
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c28:	4b78      	ldr	r3, [pc, #480]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c30:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c36:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c50:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001c56:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c58:	2203      	movs	r2, #3
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c64:	4869      	ldr	r0, [pc, #420]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c66:	f004 fbd5 	bl	8006414 <HAL_ADC_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001c70:	f000 fdf8 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c74:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <MX_ADC1_Init+0x23c>)
 8001c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c78:	2306      	movs	r3, #6
 8001c7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c86:	2304      	movs	r3, #4
 8001c88:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4619      	mov	r1, r3
 8001c92:	485e      	ldr	r0, [pc, #376]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001c94:	f005 faec 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001c9e:	f000 fde1 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <MX_ADC1_Init+0x240>)
 8001ca4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	4619      	mov	r1, r3
 8001cae:	4857      	ldr	r0, [pc, #348]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001cb0:	f005 fade 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001cba:	f000 fdd3 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <MX_ADC1_Init+0x244>)
 8001cc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cc2:	2312      	movs	r3, #18
 8001cc4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4850      	ldr	r0, [pc, #320]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001ccc:	f005 fad0 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001cd6:	f000 fdc5 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <MX_ADC1_Init+0x248>)
 8001cdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cde:	2318      	movs	r3, #24
 8001ce0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4849      	ldr	r0, [pc, #292]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001ce8:	f005 fac2 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001cf2:	f000 fdb7 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <MX_ADC1_Init+0x24c>)
 8001cf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	4619      	mov	r1, r3
 8001d04:	4841      	ldr	r0, [pc, #260]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001d06:	f005 fab3 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001d10:	f000 fda8 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <MX_ADC1_Init+0x250>)
 8001d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d18:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001d1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4619      	mov	r1, r3
 8001d22:	483a      	ldr	r0, [pc, #232]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001d24:	f005 faa4 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8001d2e:	f000 fd99 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <MX_ADC1_Init+0x254>)
 8001d34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d36:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4832      	ldr	r0, [pc, #200]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001d42:	f005 fa95 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8001d4c:	f000 fd8a 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <MX_ADC1_Init+0x258>)
 8001d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d54:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001d58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	482b      	ldr	r0, [pc, #172]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001d60:	f005 fa86 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8001d6a:	f000 fd7b 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <MX_ADC1_Init+0x25c>)
 8001d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001d72:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001d7e:	f005 fa77 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8001d88:	f000 fd6c 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_ADC1_Init+0x260>)
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001d9c:	f005 fa68 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8001da6:	f000 fd5d 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_ADC1_Init+0x264>)
 8001dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001dae:	f240 2306 	movw	r3, #518	; 0x206
 8001db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4814      	ldr	r0, [pc, #80]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001dba:	f005 fa59 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8001dc4:	f000 fd4e 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_ADC1_Init+0x268>)
 8001dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001dcc:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001dd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001dd8:	f005 fa4a 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8001de2:	f000 fd3f 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_ADC1_Init+0x26c>)
 8001de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001dea:	f240 2312 	movw	r3, #530	; 0x212
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_ADC1_Init+0x234>)
 8001df6:	f005 fa3b 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8001e00:	f000 fd30 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20001924 	.word	0x20001924
 8001e10:	42028000 	.word	0x42028000
 8001e14:	04000002 	.word	0x04000002
 8001e18:	08000004 	.word	0x08000004
 8001e1c:	0c000008 	.word	0x0c000008
 8001e20:	10000010 	.word	0x10000010
 8001e24:	14000020 	.word	0x14000020
 8001e28:	1c000080 	.word	0x1c000080
 8001e2c:	20000100 	.word	0x20000100
 8001e30:	2a000400 	.word	0x2a000400
 8001e34:	2e000800 	.word	0x2e000800
 8001e38:	32001000 	.word	0x32001000
 8001e3c:	3e008000 	.word	0x3e008000
 8001e40:	42010000 	.word	0x42010000
 8001e44:	ce080000 	.word	0xce080000

08001e48 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2220      	movs	r2, #32
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f014 fba7 	bl	80165a8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e5c:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <MX_ADC4_Init+0xe8>)
 8001e5e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e68:	2204      	movs	r2, #4
 8001e6a:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e78:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001eb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eb4:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001ed0:	4816      	ldr	r0, [pc, #88]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001ed2:	f004 fa9f 	bl	8006414 <HAL_ADC_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001edc:	f000 fcc2 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_ADC4_Init+0xec>)
 8001ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001eec:	2304      	movs	r3, #4
 8001eee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001efa:	f005 f9b9 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8001f04:	f000 fcae 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_ADC4_Init+0xf0>)
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_ADC4_Init+0xe4>)
 8001f16:	f005 f9ab 	bl	8007270 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8001f20:	f000 fca0 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200019b0 	.word	0x200019b0
 8001f30:	46021000 	.word	0x46021000
 8001f34:	1c000080 	.word	0x1c000080
 8001f38:	20000100 	.word	0x20000100

08001f3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f42:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <MX_DMA2D_Init+0x78>)
 8001f44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f8a:	f007 f917 	bl	80091bc <HAL_DMA2D_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001f94:	f000 fc66 	bl	8002864 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_DMA2D_Init+0x74>)
 8001f9c:	f007 f970 	bl	8009280 <HAL_DMA2D_ConfigLayer>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f000 fc5d 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001b68 	.word	0x20001b68
 8001fb4:	4002b000 	.word	0x4002b000

08001fb8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_GPDMA1_Init+0x6c>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <MX_GPDMA1_Init+0x6c>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_GPDMA1_Init+0x6c>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	201d      	movs	r0, #29
 8001fe2:	f006 f988 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001fe6:	201d      	movs	r0, #29
 8001fe8:	f006 f99f 	bl	800832a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	201e      	movs	r0, #30
 8001ff2:	f006 f980 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001ff6:	201e      	movs	r0, #30
 8001ff8:	f006 f997 	bl	800832a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	201f      	movs	r0, #31
 8002002:	f006 f978 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8002006:	201f      	movs	r0, #31
 8002008:	f006 f98f 	bl	800832a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2020      	movs	r0, #32
 8002012:	f006 f970 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8002016:	2020      	movs	r0, #32
 8002018:	f006 f987 	bl	800832a <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	46020c00 	.word	0x46020c00

08002028 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <MX_HSPI1_Init+0x74>)
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <MX_HSPI1_Init+0x78>)
 8002030:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_HSPI1_Init+0x74>)
 8002034:	2204      	movs	r2, #4
 8002036:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <MX_HSPI1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_HSPI1_Init+0x74>)
 8002040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002044:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_HSPI1_Init+0x74>)
 8002048:	221a      	movs	r2, #26
 800204a:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <MX_HSPI1_Init+0x74>)
 800204e:	2202      	movs	r2, #2
 8002050:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_HSPI1_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_HSPI1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_HSPI1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <MX_HSPI1_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_HSPI1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_HSPI1_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_HSPI1_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hxspi1.Init.MaxTran = 0;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <MX_HSPI1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
  hxspi1.Init.Refresh = 0;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_HSPI1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_HSPI1_Init+0x74>)
 800208a:	f012 fe17 	bl	8014cbc <HAL_XSPI_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8002094:	f000 fbe6 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20001bd0 	.word	0x20001bd0
 80020a0:	420d3400 	.word	0x420d3400

080020a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <MX_I2C1_Init+0x74>)
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <MX_I2C1_Init+0x78>)
 80020ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <MX_I2C1_Init+0x74>)
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <MX_I2C1_Init+0x7c>)
 80020b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <MX_I2C1_Init+0x74>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <MX_I2C1_Init+0x74>)
 80020bc:	2201      	movs	r2, #1
 80020be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <MX_I2C1_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MX_I2C1_Init+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <MX_I2C1_Init+0x74>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_I2C1_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <MX_I2C1_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020de:	480e      	ldr	r0, [pc, #56]	; (8002118 <MX_I2C1_Init+0x74>)
 80020e0:	f008 fc54 	bl	800a98c <HAL_I2C_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020ea:	f000 fbbb 	bl	8002864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ee:	2100      	movs	r1, #0
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <MX_I2C1_Init+0x74>)
 80020f2:	f009 ff61 	bl	800bfb8 <HAL_I2CEx_ConfigAnalogFilter>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020fc:	f000 fbb2 	bl	8002864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_I2C1_Init+0x74>)
 8002104:	f009 ffa3 	bl	800c04e <HAL_I2CEx_ConfigDigitalFilter>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800210e:	f000 fba9 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20001c30 	.word	0x20001c30
 800211c:	40005400 	.word	0x40005400
 8002120:	20a0c4df 	.word	0x20a0c4df

08002124 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_I2C2_Init+0x74>)
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <MX_I2C2_Init+0x78>)
 800212c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_I2C2_Init+0x74>)
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <MX_I2C2_Init+0x7c>)
 8002132:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_I2C2_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_I2C2_Init+0x74>)
 800213c:	2201      	movs	r2, #1
 800213e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_I2C2_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_I2C2_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_I2C2_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_I2C2_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_I2C2_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <MX_I2C2_Init+0x74>)
 8002160:	f008 fc14 	bl	800a98c <HAL_I2C_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800216a:	f000 fb7b 	bl	8002864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216e:	2100      	movs	r1, #0
 8002170:	4809      	ldr	r0, [pc, #36]	; (8002198 <MX_I2C2_Init+0x74>)
 8002172:	f009 ff21 	bl	800bfb8 <HAL_I2CEx_ConfigAnalogFilter>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800217c:	f000 fb72 	bl	8002864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_I2C2_Init+0x74>)
 8002184:	f009 ff63 	bl	800c04e <HAL_I2CEx_ConfigDigitalFilter>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800218e:	f000 fb69 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20001c84 	.word	0x20001c84
 800219c:	40005800 	.word	0x40005800
 80021a0:	20a0c4df 	.word	0x20a0c4df

080021a4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80021a8:	2000      	movs	r0, #0
 80021aa:	f009 ff9d 	bl	800c0e8 <HAL_ICACHE_ConfigAssociativityMode>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80021b4:	f000 fb56 	bl	8002864 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80021b8:	f009 ffb6 	bl	800c128 <HAL_ICACHE_Enable>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80021c2:	f000 fb4f 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	; 0x38
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2234      	movs	r2, #52	; 0x34
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f014 f9e5 	bl	80165a8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80021e0:	4a39      	ldr	r2, [pc, #228]	; (80022c8 <MX_LTDC_Init+0xfc>)
 80021e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021f6:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80021fe:	2203      	movs	r2, #3
 8002200:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <MX_LTDC_Init+0xf8>)
 8002204:	2203      	movs	r2, #3
 8002206:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8002208:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <MX_LTDC_Init+0xf8>)
 800220a:	220b      	movs	r2, #11
 800220c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <MX_LTDC_Init+0xf8>)
 8002210:	220b      	movs	r2, #11
 8002212:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <MX_LTDC_Init+0xf8>)
 8002216:	f240 322b 	movw	r2, #811	; 0x32b
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <MX_LTDC_Init+0xf8>)
 800221e:	f240 12eb 	movw	r2, #491	; 0x1eb
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <MX_LTDC_Init+0xf8>)
 8002226:	f240 3233 	movw	r2, #819	; 0x333
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 499;
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <MX_LTDC_Init+0xf8>)
 800222e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <MX_LTDC_Init+0xf8>)
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <MX_LTDC_Init+0xf8>)
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_LTDC_Init+0xf8>)
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800224c:	481d      	ldr	r0, [pc, #116]	; (80022c4 <MX_LTDC_Init+0xf8>)
 800224e:	f009 ff7b 	bl	800c148 <HAL_LTDC_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002258:	f000 fb04 	bl	8002864 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8002260:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002264:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800226a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800226e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002270:	2301      	movs	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002274:	23ff      	movs	r3, #255	; 0xff
 8002276:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800227c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002280:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002282:	2307      	movs	r3, #7
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4806      	ldr	r0, [pc, #24]	; (80022c4 <MX_LTDC_Init+0xf8>)
 80022ac:	f00a f8de 	bl	800c46c <HAL_LTDC_ConfigLayer>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80022b6:	f000 fad5 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	3738      	adds	r7, #56	; 0x38
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20001cd8 	.word	0x20001cd8
 80022c8:	40016800 	.word	0x40016800

080022cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_RTC_Init+0x94>)
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <MX_RTC_Init+0x98>)
 80022e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_RTC_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_RTC_Init+0x94>)
 80022f2:	227f      	movs	r2, #127	; 0x7f
 80022f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MX_RTC_Init+0x94>)
 80022f8:	22ff      	movs	r2, #255	; 0xff
 80022fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_RTC_Init+0x94>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <MX_RTC_Init+0x94>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_RTC_Init+0x94>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <MX_RTC_Init+0x94>)
 8002310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002314:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_RTC_Init+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <MX_RTC_Init+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002322:	480f      	ldr	r0, [pc, #60]	; (8002360 <MX_RTC_Init+0x94>)
 8002324:	f00e ff66 	bl	80111f4 <HAL_RTC_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800232e:	f000 fa99 	bl	8002864 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_RTC_Init+0x94>)
 8002348:	f00f f882 	bl	8011450 <HAL_RTCEx_PrivilegeModeSet>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8002352:	f000 fa87 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20001d80 	.word	0x20001d80
 8002364:	46007800 	.word	0x46007800

08002368 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <MX_SAI2_Init+0xc4>)
 800236e:	4a30      	ldr	r2, [pc, #192]	; (8002430 <MX_SAI2_Init+0xc8>)
 8002370:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002372:	4b2e      	ldr	r3, [pc, #184]	; (800242c <MX_SAI2_Init+0xc4>)
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <MX_SAI2_Init+0xc4>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800237e:	4b2b      	ldr	r3, [pc, #172]	; (800242c <MX_SAI2_Init+0xc4>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <MX_SAI2_Init+0xc4>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <MX_SAI2_Init+0xc4>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <MX_SAI2_Init+0xc4>)
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <MX_SAI2_Init+0xcc>)
 8002394:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <MX_SAI2_Init+0xc4>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <MX_SAI2_Init+0xc4>)
 800239e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <MX_SAI2_Init+0xc4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <MX_SAI2_Init+0xc4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80023b0:	4b1e      	ldr	r3, [pc, #120]	; (800242c <MX_SAI2_Init+0xc4>)
 80023b2:	2210      	movs	r2, #16
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80023b6:	2302      	movs	r3, #2
 80023b8:	2202      	movs	r2, #2
 80023ba:	2101      	movs	r1, #1
 80023bc:	481b      	ldr	r0, [pc, #108]	; (800242c <MX_SAI2_Init+0xc4>)
 80023be:	f00f f875 	bl	80114ac <HAL_SAI_InitProtocol>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 80023c8:	f000 fa4c 	bl	8002864 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023ce:	4a1b      	ldr	r2, [pc, #108]	; (800243c <MX_SAI2_Init+0xd4>)
 80023d0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <MX_SAI2_Init+0xcc>)
 80023f4:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_SAI2_Init+0xd0>)
 80023fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002402:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_SAI2_Init+0xd0>)
 8002406:	2200      	movs	r2, #0
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_SAI2_Init+0xd0>)
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 4) != HAL_OK)
 8002410:	2304      	movs	r3, #4
 8002412:	2202      	movs	r2, #2
 8002414:	2100      	movs	r1, #0
 8002416:	4808      	ldr	r0, [pc, #32]	; (8002438 <MX_SAI2_Init+0xd0>)
 8002418:	f00f f848 	bl	80114ac <HAL_SAI_InitProtocol>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8002422:	f000 fa1f 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20001db0 	.word	0x20001db0
 8002430:	40015804 	.word	0x40015804
 8002434:	00017700 	.word	0x00017700
 8002438:	20001e48 	.word	0x20001e48
 800243c:	40015824 	.word	0x40015824

08002440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	463b      	mov	r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	615a      	str	r2, [r3, #20]
 8002462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <MX_TIM3_Init+0xbc>)
 8002466:	4a26      	ldr	r2, [pc, #152]	; (8002500 <MX_TIM3_Init+0xc0>)
 8002468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <MX_TIM3_Init+0xbc>)
 800246c:	22a0      	movs	r2, #160	; 0xa0
 800246e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <MX_TIM3_Init+0xbc>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <MX_TIM3_Init+0xbc>)
 8002478:	2264      	movs	r2, #100	; 0x64
 800247a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <MX_TIM3_Init+0xbc>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <MX_TIM3_Init+0xbc>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002488:	481c      	ldr	r0, [pc, #112]	; (80024fc <MX_TIM3_Init+0xbc>)
 800248a:	f00f fd2f 	bl	8011eec <HAL_TIM_PWM_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002494:	f000 f9e6 	bl	8002864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	4815      	ldr	r0, [pc, #84]	; (80024fc <MX_TIM3_Init+0xbc>)
 80024a8:	f010 fb68 	bl	8012b7c <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80024b2:	f000 f9d7 	bl	8002864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b6:	2360      	movs	r3, #96	; 0x60
 80024b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80024ba:	234b      	movs	r3, #75	; 0x4b
 80024bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024c6:	463b      	mov	r3, r7
 80024c8:	220c      	movs	r2, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	480b      	ldr	r0, [pc, #44]	; (80024fc <MX_TIM3_Init+0xbc>)
 80024ce:	f00f fd65 	bl	8011f9c <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80024d8:	f000 f9c4 	bl	8002864 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <MX_TIM3_Init+0xbc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_TIM3_Init+0xbc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ea:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_TIM3_Init+0xbc>)
 80024ee:	f002 fc69 	bl	8004dc4 <HAL_TIM_MspPostInit>

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000200c 	.word	0x2000200c
 8002500:	40000400 	.word	0x40000400

08002504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <MX_USART1_UART_Init+0x90>)
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <MX_USART1_UART_Init+0x94>)
 800250c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <MX_USART1_UART_Init+0x90>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_USART1_UART_Init+0x90>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <MX_USART1_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800254c:	4811      	ldr	r0, [pc, #68]	; (8002594 <MX_USART1_UART_Init+0x90>)
 800254e:	f010 fbd7 	bl	8012d00 <HAL_UART_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002558:	f000 f984 	bl	8002864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255c:	2100      	movs	r1, #0
 800255e:	480d      	ldr	r0, [pc, #52]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002560:	f012 fae1 	bl	8014b26 <HAL_UARTEx_SetTxFifoThreshold>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800256a:	f000 f97b 	bl	8002864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	4808      	ldr	r0, [pc, #32]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002572:	f012 fb16 	bl	8014ba2 <HAL_UARTEx_SetRxFifoThreshold>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800257c:	f000 f972 	bl	8002864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <MX_USART1_UART_Init+0x90>)
 8002582:	f012 fa97 	bl	8014ab4 <HAL_UARTEx_DisableFifoMode>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800258c:	f000 f96a 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20002058 	.word	0x20002058
 8002598:	40013800 	.word	0x40013800

0800259c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025a2:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80025a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025a8:	2209      	movs	r2, #9
 80025aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025b4:	2203      	movs	r2, #3
 80025b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025d8:	2200      	movs	r2, #0
 80025da:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80025de:	f00a f8f6 	bl	800c7ce <HAL_PCD_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80025e8:	f000 f93c 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200020ec 	.word	0x200020ec
 80025f4:	42040000 	.word	0x42040000

080025f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	; 0x38
 80025fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800260e:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <MX_GPIO_Init+0x248>)
 8002610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002614:	4a8a      	ldr	r2, [pc, #552]	; (8002840 <MX_GPIO_Init+0x248>)
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <MX_GPIO_Init+0x248>)
 8002620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800262c:	4b84      	ldr	r3, [pc, #528]	; (8002840 <MX_GPIO_Init+0x248>)
 800262e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002632:	4a83      	ldr	r2, [pc, #524]	; (8002840 <MX_GPIO_Init+0x248>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800263c:	4b80      	ldr	r3, [pc, #512]	; (8002840 <MX_GPIO_Init+0x248>)
 800263e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <MX_GPIO_Init+0x248>)
 800264c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002650:	4a7b      	ldr	r2, [pc, #492]	; (8002840 <MX_GPIO_Init+0x248>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800265a:	4b79      	ldr	r3, [pc, #484]	; (8002840 <MX_GPIO_Init+0x248>)
 800265c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002668:	4b75      	ldr	r3, [pc, #468]	; (8002840 <MX_GPIO_Init+0x248>)
 800266a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266e:	4a74      	ldr	r2, [pc, #464]	; (8002840 <MX_GPIO_Init+0x248>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002678:	4b71      	ldr	r3, [pc, #452]	; (8002840 <MX_GPIO_Init+0x248>)
 800267a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b6e      	ldr	r3, [pc, #440]	; (8002840 <MX_GPIO_Init+0x248>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	4a6c      	ldr	r2, [pc, #432]	; (8002840 <MX_GPIO_Init+0x248>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <MX_GPIO_Init+0x248>)
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <MX_GPIO_Init+0x248>)
 80026a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026aa:	4a65      	ldr	r2, [pc, #404]	; (8002840 <MX_GPIO_Init+0x248>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026b4:	4b62      	ldr	r3, [pc, #392]	; (8002840 <MX_GPIO_Init+0x248>)
 80026b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <MX_GPIO_Init+0x248>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c8:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <MX_GPIO_Init+0x248>)
 80026ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <MX_GPIO_Init+0x248>)
 80026d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e0:	4b57      	ldr	r3, [pc, #348]	; (8002840 <MX_GPIO_Init+0x248>)
 80026e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e6:	4a56      	ldr	r2, [pc, #344]	; (8002840 <MX_GPIO_Init+0x248>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <MX_GPIO_Init+0x248>)
 80026f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026fe:	4b50      	ldr	r3, [pc, #320]	; (8002840 <MX_GPIO_Init+0x248>)
 8002700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002704:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <MX_GPIO_Init+0x248>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <MX_GPIO_Init+0x248>)
 8002710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 800271c:	2200      	movs	r2, #0
 800271e:	2104      	movs	r1, #4
 8002720:	4848      	ldr	r0, [pc, #288]	; (8002844 <MX_GPIO_Init+0x24c>)
 8002722:	f008 f8df 	bl	800a8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	2110      	movs	r1, #16
 800272a:	4846      	ldr	r0, [pc, #280]	; (8002844 <MX_GPIO_Init+0x24c>)
 800272c:	f008 f8da 	bl	800a8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	2114      	movs	r1, #20
 8002734:	4844      	ldr	r0, [pc, #272]	; (8002848 <MX_GPIO_Init+0x250>)
 8002736:	f008 f8d5 	bl	800a8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800273a:	2314      	movs	r3, #20
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274e:	4619      	mov	r1, r3
 8002750:	483c      	ldr	r0, [pc, #240]	; (8002844 <MX_GPIO_Init+0x24c>)
 8002752:	f007 feef 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8002756:	2320      	movs	r3, #32
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800275a:	4b3c      	ldr	r3, [pc, #240]	; (800284c <MX_GPIO_Init+0x254>)
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	4836      	ldr	r0, [pc, #216]	; (8002844 <MX_GPIO_Init+0x24c>)
 800276a:	f007 fee3 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800276e:	2302      	movs	r3, #2
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002772:	4b37      	ldr	r3, [pc, #220]	; (8002850 <MX_GPIO_Init+0x258>)
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	4619      	mov	r1, r3
 8002780:	4834      	ldr	r0, [pc, #208]	; (8002854 <MX_GPIO_Init+0x25c>)
 8002782:	f007 fed7 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8002786:	2310      	movs	r3, #16
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <MX_GPIO_Init+0x260>)
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278e:	2301      	movs	r3, #1
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002796:	4619      	mov	r1, r3
 8002798:	482e      	ldr	r0, [pc, #184]	; (8002854 <MX_GPIO_Init+0x25c>)
 800279a:	f007 fecb 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800279e:	2314      	movs	r3, #20
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b2:	4619      	mov	r1, r3
 80027b4:	4824      	ldr	r0, [pc, #144]	; (8002848 <MX_GPIO_Init+0x250>)
 80027b6:	f007 febd 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027be:	2300      	movs	r3, #0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	481e      	ldr	r0, [pc, #120]	; (8002848 <MX_GPIO_Init+0x250>)
 80027ce:	f007 feb1 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80027d2:	f44f 4312 	mov.w	r3, #37376	; 0x9200
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	481d      	ldr	r0, [pc, #116]	; (800285c <MX_GPIO_Init+0x264>)
 80027e8:	f007 fea4 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80027ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fe:	4619      	mov	r1, r3
 8002800:	4817      	ldr	r0, [pc, #92]	; (8002860 <MX_GPIO_Init+0x268>)
 8002802:	f007 fe97 	bl	800a534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	200c      	movs	r0, #12
 800280c:	f005 fd73 	bl	80082f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002810:	200c      	movs	r0, #12
 8002812:	f005 fd8a 	bl	800832a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	200f      	movs	r0, #15
 800281c:	f005 fd6b 	bl	80082f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002820:	200f      	movs	r0, #15
 8002822:	f005 fd82 	bl	800832a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	2010      	movs	r0, #16
 800282c:	f005 fd63 	bl	80082f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8002830:	2010      	movs	r0, #16
 8002832:	f005 fd7a 	bl	800832a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002836:	bf00      	nop
 8002838:	3738      	adds	r7, #56	; 0x38
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	46020c00 	.word	0x46020c00
 8002844:	42021000 	.word	0x42021000
 8002848:	42020c00 	.word	0x42020c00
 800284c:	10110000 	.word	0x10110000
 8002850:	10310000 	.word	0x10310000
 8002854:	42020000 	.word	0x42020000
 8002858:	10210000 	.word	0x10210000
 800285c:	42021800 	.word	0x42021800
 8002860:	42020400 	.word	0x42020400

08002864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800286c:	e7fe      	b.n	800286c <Error_Handler+0x8>
	...

08002870 <mixerInit>:
// @brief Intialize the mixer.
//
// @return enumerated error code
//
teError mixerInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	HAL_SAI_Receive_DMA(bsp()->pSaiBlockB2,pcmVals,DIM(pcmVals));
 8002874:	f7fe fba4 	bl	8000fc0 <bsp>
 8002878:	4603      	mov	r3, r0
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2208      	movs	r2, #8
 800287e:	490c      	ldr	r1, [pc, #48]	; (80028b0 <mixerInit+0x40>)
 8002880:	4618      	mov	r0, r3
 8002882:	f00f f829 	bl	80118d8 <HAL_SAI_Receive_DMA>
	HAL_ADC_Start_DMA(bsp()->pAdc1, (uint32_t*)adc1Vals, DIM(adc1Vals));
 8002886:	f7fe fb9b 	bl	8000fc0 <bsp>
 800288a:	4603      	mov	r3, r0
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	220d      	movs	r2, #13
 8002890:	4908      	ldr	r1, [pc, #32]	; (80028b4 <mixerInit+0x44>)
 8002892:	4618      	mov	r0, r3
 8002894:	f004 f8a6 	bl	80069e4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(bsp()->pAdc4, (uint32_t*)adc4Vals, DIM(adc4Vals));
 8002898:	f7fe fb92 	bl	8000fc0 <bsp>
 800289c:	4603      	mov	r3, r0
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4905      	ldr	r1, [pc, #20]	; (80028b8 <mixerInit+0x48>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f89d 	bl	80069e4 <HAL_ADC_Start_DMA>

	return eErrorNone;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20002618 	.word	0x20002618
 80028b4:	200025f8 	.word	0x200025f8
 80028b8:	20002614 	.word	0x20002614

080028bc <mixerService>:
// @brief Service the mixer.
//
// @return enumerated error code
//
bool mixerService(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
	return true;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <pcm6260Init>:
// @brief Intialize the ADC.
//
// @return enumerated error code
//
teError pcm6260Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
	int index;

	// Wait for a bit and take the ADC out of reset.
	bspMillisecondDelay(PCM6260_RESET_WAIT);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7fe fc20 	bl	8001118 <bspMillisecondDelay>
	HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 80028d8:	2201      	movs	r2, #1
 80028da:	2104      	movs	r1, #4
 80028dc:	4810      	ldr	r0, [pc, #64]	; (8002920 <pcm6260Init+0x54>)
 80028de:	f008 f801 	bl	800a8e4 <HAL_GPIO_WritePin>

	// Iterate over configuration.
	for (index = 0; index < DIM(grPcm6260Config); index++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	e013      	b.n	8002910 <pcm6260Init+0x44>
	{
		// Set register value.
		if (!bspI2cWrite(PCM6260_I2C_ADDRESS,
			(uint8_t*)&grPcm6260Config[index],
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <pcm6260Init+0x58>)
 80028ee:	4413      	add	r3, r2
		if (!bspI2cWrite(PCM6260_I2C_ADDRESS,
 80028f0:	2202      	movs	r2, #2
 80028f2:	4619      	mov	r1, r3
 80028f4:	2090      	movs	r0, #144	; 0x90
 80028f6:	f7fe fc5b 	bl	80011b0 <bspI2cWrite>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <pcm6260Init+0x3e>
			sizeof(grPcm6260Config[index])))
		{
			return eErrorInit;
 8002906:	230d      	movs	r3, #13
 8002908:	e006      	b.n	8002918 <pcm6260Init+0x4c>
	for (index = 0; index < DIM(grPcm6260Config); index++)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b0b      	cmp	r3, #11
 8002914:	d9e8      	bls.n	80028e8 <pcm6260Init+0x1c>
		}
	}

	return eErrorNone;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	42021000 	.word	0x42021000
 8002924:	20000164 	.word	0x20000164

08002928 <dump>:
// @brief Print performance stats.
//
// @return enumerated error code
//
static void dump(trPerf *prPerf)
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292c:	b087      	sub	sp, #28
 800292e:	af04      	add	r7, sp, #16
 8002930:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prPerf);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2d8      	uxtb	r0, r3
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <dump+0xcc>)
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <dump+0xd0>)
 8002944:	221e      	movs	r2, #30
 8002946:	492d      	ldr	r1, [pc, #180]	; (80029fc <dump+0xd4>)
 8002948:	f7fe fe72 	bl	8001630 <logAssert>

    // Print stats.
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1c5e      	adds	r6, r3, #1
        (double)prPerf->rMeasure.min / (double)bspCycleCounterFrequency(),
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fe03 	bl	8000560 <__aeabi_ui2d>
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
 800295e:	f7fe fbd1 	bl	8001104 <bspCycleCounterFrequency>
 8002962:	4603      	mov	r3, r0
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fdfb 	bl	8000560 <__aeabi_ui2d>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 800296e:	4620      	mov	r0, r4
 8002970:	4629      	mov	r1, r5
 8002972:	f7fd ff99 	bl	80008a8 <__aeabi_ddiv>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4692      	mov	sl, r2
 800297c:	469b      	mov	fp, r3
        (double)prPerf->rMeasure.max / (double)bspCycleCounterFrequency(),
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdec 	bl	8000560 <__aeabi_ui2d>
 8002988:	4604      	mov	r4, r0
 800298a:	460d      	mov	r5, r1
 800298c:	f7fe fbba 	bl	8001104 <bspCycleCounterFrequency>
 8002990:	4603      	mov	r3, r0
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fde4 	bl	8000560 <__aeabi_ui2d>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd ff82 	bl	80008a8 <__aeabi_ddiv>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4690      	mov	r8, r2
 80029aa:	4699      	mov	r9, r3
        (double)prPerf->rMeasure.avg / (double)bspCycleCounterFrequency());
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fdd5 	bl	8000560 <__aeabi_ui2d>
 80029b6:	4604      	mov	r4, r0
 80029b8:	460d      	mov	r5, r1
 80029ba:	f7fe fba3 	bl	8001104 <bspCycleCounterFrequency>
 80029be:	4603      	mov	r3, r0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdcd 	bl	8000560 <__aeabi_ui2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7fd ff6b 	bl	80008a8 <__aeabi_ddiv>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029da:	e9cd 8900 	strd	r8, r9, [sp]
 80029de:	4652      	mov	r2, sl
 80029e0:	465b      	mov	r3, fp
 80029e2:	4631      	mov	r1, r6
 80029e4:	4806      	ldr	r0, [pc, #24]	; (8002a00 <dump+0xd8>)
 80029e6:	f7fe fc9b 	bl	8001320 <bspPrintf>
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f4:	08018bb4 	.word	0x08018bb4
 80029f8:	08019364 	.word	0x08019364
 80029fc:	08018ba0 	.word	0x08018ba0
 8002a00:	08018bc4 	.word	0x08018bc4

08002a04 <perfInit>:
// @brief Initialize performance module.
//
// @return enumerated error code
//
teError perfInit(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
    // Initialize performance resources.
    memset(grPerf, 0, sizeof(grPerf));
 8002a08:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4803      	ldr	r0, [pc, #12]	; (8002a1c <perfInit+0x18>)
 8002a10:	f013 fdca 	bl	80165a8 <memset>

    return eErrorNone;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20002620 	.word	0x20002620

08002a20 <perfPrint>:
//
// @param prPerf optional pointer to performance structure
// @return enumerated error code
//
void perfPrint(trPerf *prPerf)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    int index;

    // Check pointer.
    if (NULL != prPerf)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <perfPrint+0x16>
    {
        dump(prPerf);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff7a 	bl	8002928 <dump>

        return;
 8002a34:	e01c      	b.n	8002a70 <perfPrint+0x50>
    }

    // Iterate over resources.
    for (index = 0; index < DIM(grPerf); index++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e016      	b.n	8002a6a <perfPrint+0x4a>
    {
        // Check allocation.
        if (grPerf[index].allocated)
 8002a3c:	490e      	ldr	r1, [pc, #56]	; (8002a78 <perfPrint+0x58>)
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <perfPrint+0x44>
        {
            dump(&grPerf[index]);
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <perfPrint+0x58>)
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff62 	bl	8002928 <dump>
    for (index = 0; index < DIM(grPerf); index++)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b07      	cmp	r3, #7
 8002a6e:	d9e5      	bls.n	8002a3c <perfPrint+0x1c>
        }
    }
}
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20002620 	.word	0x20002620

08002a7c <heartbeatHandler>:
//
// @param pContext pointer to callback context
// @return none
//
static void heartbeatHandler(void *pContext)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	static bool state = false;

	// Toggle LED.
	bspHeartbeatLed(state = !state);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <heartbeatHandler+0x38>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <heartbeatHandler+0x38>)
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <heartbeatHandler+0x38>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fc9a 	bl	80013e0 <bspHeartbeatLed>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200027e0 	.word	0x200027e0

08002ab8 <version>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError version(int argc, char *argv[])
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	// Print version.
    bspPrintf("\r\n%u.%u.%u %s", VERSION_MAJOR, VERSION_MINOR,
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f002 fff6 	bl	8005ab4 <versionConfidence>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2301      	movs	r3, #1
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4804      	ldr	r0, [pc, #16]	; (8002ae4 <version+0x2c>)
 8002ad4:	f7fe fc24 	bl	8001320 <bspPrintf>
		VERSION_BUILD, versionConfidence(VERSION_CONF));

    return eErrorNone;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	08018c0c 	.word	0x08018c0c

08002ae8 <platformInit>:
//
// @param prBsp pointer to BSP data.
// @return true = success, false = failure
//
bool platformInit(trBsp *prBsp)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af04      	add	r7, sp, #16
 8002aee:	6078      	str	r0, [r7, #4]
	teError eError;

	// Initialize BSP.
	if (!bspInit(prBsp))
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fb9f 	bl	8001234 <bspInit>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <platformInit+0x1e>
	{
		return false;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e09e      	b.n	8002c44 <platformInit+0x15c>
	}

	// Disable I/O buffering.
	setvbuf(stdout, NULL, _IONBF, 0);
 8002b06:	4b51      	ldr	r3, [pc, #324]	; (8002c4c <platformInit+0x164>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6898      	ldr	r0, [r3, #8]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2202      	movs	r2, #2
 8002b10:	2100      	movs	r1, #0
 8002b12:	f013 fb55 	bl	80161c0 <setvbuf>

	// Initialize ADC.
	if (eErrorNone != (eError = pcm6260Init()))
 8002b16:	f7ff fed9 	bl	80028cc <pcm6260Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <platformInit+0x48>
	{
		LOGFATAL(eError);
 8002b24:	7bf8      	ldrb	r0, [r7, #15]
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <platformInit+0x168>)
 8002b28:	2251      	movs	r2, #81	; 0x51
 8002b2a:	494a      	ldr	r1, [pc, #296]	; (8002c54 <platformInit+0x16c>)
 8002b2c:	f7fe fe94 	bl	8001858 <logFatal>
	}

    // Initialize performance.
    if (eErrorNone != (eError = perfInit()))
 8002b30:	f7ff ff68 	bl	8002a04 <perfInit>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <platformInit+0x62>
    {
        LOGFATAL(eError);
 8002b3e:	7bf8      	ldrb	r0, [r7, #15]
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <platformInit+0x168>)
 8002b42:	2257      	movs	r2, #87	; 0x57
 8002b44:	4943      	ldr	r1, [pc, #268]	; (8002c54 <platformInit+0x16c>)
 8002b46:	f7fe fe87 	bl	8001858 <logFatal>
    }

	// Initialize timer.
	if (eErrorNone != (eError = timerInit()))
 8002b4a:	f002 fddf 	bl	800570c <timerInit>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <platformInit+0x7c>
	{
		LOGFATAL(eError);
 8002b58:	7bf8      	ldrb	r0, [r7, #15]
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <platformInit+0x168>)
 8002b5c:	225d      	movs	r2, #93	; 0x5d
 8002b5e:	493d      	ldr	r1, [pc, #244]	; (8002c54 <platformInit+0x16c>)
 8002b60:	f7fe fe7a 	bl	8001858 <logFatal>
	}

	// Initialize log.
	if (eErrorNone != (eError = logInit()))
 8002b64:	f7fe fd56 	bl	8001614 <logInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <platformInit+0x96>
	{
		LOGFATAL(eError);
 8002b72:	7bf8      	ldrb	r0, [r7, #15]
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <platformInit+0x168>)
 8002b76:	2263      	movs	r2, #99	; 0x63
 8002b78:	4936      	ldr	r1, [pc, #216]	; (8002c54 <platformInit+0x16c>)
 8002b7a:	f7fe fe6d 	bl	8001858 <logFatal>
	}

	// Initialize mixer.
	if (eErrorNone != (eError = mixerInit()))
 8002b7e:	f7ff fe77 	bl	8002870 <mixerInit>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <platformInit+0xb0>
	{
		LOGFATAL(eError);
 8002b8c:	7bf8      	ldrb	r0, [r7, #15]
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <platformInit+0x168>)
 8002b90:	2269      	movs	r2, #105	; 0x69
 8002b92:	4930      	ldr	r1, [pc, #192]	; (8002c54 <platformInit+0x16c>)
 8002b94:	f7fe fe60 	bl	8001858 <logFatal>
	}

	// Initialize shell.
	if (eErrorNone != (eError = shellInit()))
 8002b98:	f000 ff62 	bl	8003a60 <shellInit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <platformInit+0xca>
	{
		LOGFATAL(eError);
 8002ba6:	7bf8      	ldrb	r0, [r7, #15]
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <platformInit+0x168>)
 8002baa:	226f      	movs	r2, #111	; 0x6f
 8002bac:	4929      	ldr	r1, [pc, #164]	; (8002c54 <platformInit+0x16c>)
 8002bae:	f7fe fe53 	bl	8001858 <logFatal>
	}

    // Add shell commands.
    if (eErrorNone != (eError = shellAdd("ver",
 8002bb2:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <platformInit+0x170>)
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <platformInit+0x174>)
 8002bbc:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <platformInit+0x174>)
 8002bbe:	4928      	ldr	r1, [pc, #160]	; (8002c60 <platformInit+0x178>)
 8002bc0:	4828      	ldr	r0, [pc, #160]	; (8002c64 <platformInit+0x17c>)
 8002bc2:	f001 faa9 	bl	8004118 <shellAdd>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <platformInit+0xf4>
        "version information", "", "", 1, version)))
    {
        LOGERROR(eError);
 8002bd0:	7bf8      	ldrb	r0, [r7, #15]
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <platformInit+0x168>)
 8002bd4:	2276      	movs	r2, #118	; 0x76
 8002bd6:	491f      	ldr	r1, [pc, #124]	; (8002c54 <platformInit+0x16c>)
 8002bd8:	f7fe fdc8 	bl	800176c <logError>
    }

	// Add LED heartbeat callback.
	if (eErrorNone != (eError = timerAdd(PLATFORM_HEARTBEAT_INTERVAL,
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2200      	movs	r2, #0
 8002be0:	4921      	ldr	r1, [pc, #132]	; (8002c68 <platformInit+0x180>)
 8002be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be6:	f002 fe3b 	bl	8005860 <timerAdd>
 8002bea:	4603      	mov	r3, r0
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <platformInit+0x118>
		heartbeatHandler, NULL, true)))
	{
		LOGFATAL(eError);
 8002bf4:	7bf8      	ldrb	r0, [r7, #15]
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <platformInit+0x168>)
 8002bf8:	227d      	movs	r2, #125	; 0x7d
 8002bfa:	4916      	ldr	r1, [pc, #88]	; (8002c54 <platformInit+0x16c>)
 8002bfc:	f7fe fe2c 	bl	8001858 <logFatal>
	}

	// Clear terminal.
	puts(VT100_CLEAR_SCREEN);
 8002c00:	481a      	ldr	r0, [pc, #104]	; (8002c6c <platformInit+0x184>)
 8002c02:	f013 fad5 	bl	80161b0 <puts>
	puts(VT100_CURSOR_HOME);
 8002c06:	481a      	ldr	r0, [pc, #104]	; (8002c70 <platformInit+0x188>)
 8002c08:	f013 fad2 	bl	80161b0 <puts>

    // Print shell banner.
    bspPrintf("\r\n\n%s %s Version %d.%d.%d %s (%s)" , PLATFORM_MDL,
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f002 ff51 	bl	8005ab4 <versionConfidence>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <platformInit+0x18c>)
 8002c16:	9203      	str	r2, [sp, #12]
 8002c18:	9302      	str	r3, [sp, #8]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <platformInit+0x190>)
 8002c26:	4915      	ldr	r1, [pc, #84]	; (8002c7c <platformInit+0x194>)
 8002c28:	4815      	ldr	r0, [pc, #84]	; (8002c80 <platformInit+0x198>)
 8002c2a:	f7fe fb79 	bl	8001320 <bspPrintf>
		PLATFORM_DESCRIPTION, VERSION_MAJOR, VERSION_MINOR,
		VERSION_BUILD, versionConfidence(VERSION_CONF), PLATFORM_TYPE);
    bspPrintf("\r\n%s %s %s" ,PLATFORM_COPYRIGHT, PLATFORM_MFG_FULL,
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <platformInit+0x19c>)
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <platformInit+0x1a0>)
 8002c32:	4916      	ldr	r1, [pc, #88]	; (8002c8c <platformInit+0x1a4>)
 8002c34:	4816      	ldr	r0, [pc, #88]	; (8002c90 <platformInit+0x1a8>)
 8002c36:	f7fe fb73 	bl	8001320 <bspPrintf>
		PLATFORM_RIGHTS);

    // Wait for power rails to stabilize.
    bspMillisecondDelay(BSP_WAIT_RAIL_STABLIZE);
 8002c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c3e:	f7fe fa6b 	bl	8001118 <bspMillisecondDelay>

    // TODO: Perform self-test.

	return true;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000200 	.word	0x20000200
 8002c50:	0801936c 	.word	0x0801936c
 8002c54:	08018c1c 	.word	0x08018c1c
 8002c58:	08002ab9 	.word	0x08002ab9
 8002c5c:	08018c34 	.word	0x08018c34
 8002c60:	08018c38 	.word	0x08018c38
 8002c64:	08018c4c 	.word	0x08018c4c
 8002c68:	08002a7d 	.word	0x08002a7d
 8002c6c:	08018c50 	.word	0x08018c50
 8002c70:	08018c58 	.word	0x08018c58
 8002c74:	08018c98 	.word	0x08018c98
 8002c78:	08018c5c 	.word	0x08018c5c
 8002c7c:	08018c70 	.word	0x08018c70
 8002c80:	08018c74 	.word	0x08018c74
 8002c84:	08018c9c 	.word	0x08018c9c
 8002c88:	08018cb4 	.word	0x08018cb4
 8002c8c:	08018cc4 	.word	0x08018cc4
 8002c90:	08018cd0 	.word	0x08018cd0

08002c94 <platformService>:
// @brief Platform thread of execution.
//
// @return true = success, false = failure
//
bool platformService(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
	teError eError;

    // Service timers.
    timerService();
 8002c9a:	f002 fea3 	bl	80059e4 <timerService>

	// Service diagnostic shell.
	if (eErrorNone != (eError = shellService()))
 8002c9e:	f001 f8f1 	bl	8003e84 <shellService>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <platformService+0x24>
	{
		LOGERROR(eError);
 8002cac:	79f8      	ldrb	r0, [r7, #7]
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <platformService+0x4c>)
 8002cb0:	22a2      	movs	r2, #162	; 0xa2
 8002cb2:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <platformService+0x50>)
 8002cb4:	f7fe fd5a 	bl	800176c <logError>
	}

	// Service mixer.
	if (eErrorNone != (eError = mixerService()))
 8002cb8:	f7ff fe00 	bl	80028bc <mixerService>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <platformService+0x3e>
	{
		LOGERROR(eError);
 8002cc6:	79f8      	ldrb	r0, [r7, #7]
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <platformService+0x4c>)
 8002cca:	22a8      	movs	r2, #168	; 0xa8
 8002ccc:	4905      	ldr	r1, [pc, #20]	; (8002ce4 <platformService+0x50>)
 8002cce:	f7fe fd4d 	bl	800176c <logError>
	}

    // Try to drain stdout.
    bspConsoleDrain();
 8002cd2:	f7fe f993 	bl	8000ffc <bspConsoleDrain>

	return true;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	0801937c 	.word	0x0801937c
 8002ce4:	08018c1c 	.word	0x08018c1c

08002ce8 <empty>:
//
// @param prRing pointer to ring structure
// @return true = empty, false = not empty
//
static inline bool empty(trRing *prRing)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2d8      	uxtb	r0, r3
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <empty+0x3c>)
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <empty+0x40>)
 8002d02:	2225      	movs	r2, #37	; 0x25
 8002d04:	4909      	ldr	r1, [pc, #36]	; (8002d2c <empty+0x44>)
 8002d06:	f7fe fc93 	bl	8001630 <logAssert>

    return (prRing->head == prRing->tail) ? true : false;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	08018cf0 	.word	0x08018cf0
 8002d28:	080193a4 	.word	0x080193a4
 8002d2c:	08018cdc 	.word	0x08018cdc

08002d30 <full>:
//
// @param trRing pointer to ring structure
// @return true = full, false = not full
//
static inline bool full(trRing *prRing)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <full+0x4c>)
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <full+0x50>)
 8002d4a:	2233      	movs	r2, #51	; 0x33
 8002d4c:	490d      	ldr	r1, [pc, #52]	; (8002d84 <full+0x54>)
 8002d4e:	f7fe fc6f 	bl	8001630 <logAssert>

    return ((prRing->head + 1) % prRing->length == prRing->tail) ? true : false;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6892      	ldr	r2, [r2, #8]
 8002d5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d60:	fb01 f202 	mul.w	r2, r1, r2
 8002d64:	1a9a      	subs	r2, r3, r2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	08018cf0 	.word	0x08018cf0
 8002d80:	080193ac 	.word	0x080193ac
 8002d84:	08018cdc 	.word	0x08018cdc

08002d88 <space>:
//
// @param thRing handle to ring structure
// @return length of free space
//
static inline uint32_t space(trRing *prRing)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <space+0x68>)
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <space+0x6c>)
 8002da2:	2241      	movs	r2, #65	; 0x41
 8002da4:	4914      	ldr	r1, [pc, #80]	; (8002df8 <space+0x70>)
 8002da6:	f7fe fc43 	bl	8001630 <logAssert>

    // Check empty state.
    if (empty(prRing))
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ff9c 	bl	8002ce8 <empty>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <space+0x34>
    {
        return prRing->length;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	e014      	b.n	8002de6 <space+0x5e>
    }

    return (prRing->head > prRing->tail) ?
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
            prRing->length - prRing->head + prRing->tail - 1 :
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d909      	bls.n	8002ddc <space+0x54>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	e004      	b.n	8002de6 <space+0x5e>
            prRing->tail - prRing->head;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
            prRing->length - prRing->head + prRing->tail - 1 :
 8002de4:	1ad3      	subs	r3, r2, r3
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	08018cf0 	.word	0x08018cf0
 8002df4:	080193b4 	.word	0x080193b4
 8002df8:	08018cdc 	.word	0x08018cdc

08002dfc <ringInit>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return handle to ring
//
thRing ringInit(char *pBuffer, uint32_t length)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	trRing *prRing = (trRing*)pBuffer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2d8      	uxtb	r0, r3
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <ringInit+0x6c>)
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <ringInit+0x70>)
 8002e1c:	225c      	movs	r2, #92	; 0x5c
 8002e1e:	4914      	ldr	r1, [pc, #80]	; (8002e70 <ringInit+0x74>)
 8002e20:	f7fe fc06 	bl	8001630 <logAssert>
	ASSERT(length > 0);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2d8      	uxtb	r0, r3
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <ringInit+0x78>)
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <ringInit+0x70>)
 8002e36:	225d      	movs	r2, #93	; 0x5d
 8002e38:	490d      	ldr	r1, [pc, #52]	; (8002e70 <ringInit+0x74>)
 8002e3a:	f7fe fbf9 	bl	8001630 <logAssert>

	// Initialize ring.
	memset((void*)prRing, 0, length);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f013 fbb0 	bl	80165a8 <memset>
	prRing->length  = length - sizeof(*prRing);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f1a3 0210 	sub.w	r2, r3, #16
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
	prRing->pBuffer = pBuffer + sizeof(*prRing);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 0210 	add.w	r2, r3, #16
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	60da      	str	r2, [r3, #12]

	return (thRing)prRing;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	08018cf0 	.word	0x08018cf0
 8002e6c:	0801938c 	.word	0x0801938c
 8002e70:	08018cdc 	.word	0x08018cdc
 8002e74:	08018d00 	.word	0x08018d00

08002e78 <ringEmpty>:
//
// @param hRing handle to ring structure
// @return true = empty, false = not empty
//
bool ringEmpty(thRing hRing)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
	trRing *prRing = (trRing*)hRing;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2d8      	uxtb	r0, r3
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <ringEmpty+0x38>)
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <ringEmpty+0x3c>)
 8002e96:	2272      	movs	r2, #114	; 0x72
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <ringEmpty+0x40>)
 8002e9a:	f7fe fbc9 	bl	8001630 <logAssert>

	return empty(prRing);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff22 	bl	8002ce8 <empty>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08018cf0 	.word	0x08018cf0
 8002eb4:	08019398 	.word	0x08019398
 8002eb8:	08018cdc 	.word	0x08018cdc

08002ebc <ringWrite>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return number of bytes written
//
uint32_t ringWrite(thRing hRing, const char *pBuffer, const uint32_t length)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
	uint32_t  bytes  = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
	trRing   *prRing = (trRing*)hRing;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	613b      	str	r3, [r7, #16]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2d8      	uxtb	r0, r3
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <ringWrite+0x94>)
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <ringWrite+0x98>)
 8002ee2:	22a5      	movs	r2, #165	; 0xa5
 8002ee4:	491c      	ldr	r1, [pc, #112]	; (8002f58 <ringWrite+0x9c>)
 8002ee6:	f7fe fba3 	bl	8001630 <logAssert>

    // Check free space.
    if (space(prRing) >= length)
 8002eea:	6938      	ldr	r0, [r7, #16]
 8002eec:	f7ff ff4c 	bl	8002d88 <space>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d825      	bhi.n	8002f44 <ringWrite+0x88>
    {
        // Write buffer to ring.
        while (!full(prRing) && (bytes < length))
 8002ef8:	e017      	b.n	8002f2a <ringWrite+0x6e>
        {
            // Write character.
            prRing->pBuffer[prRing->head] = pBuffer[bytes++];
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	617a      	str	r2, [r7, #20]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	441a      	add	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	440b      	add	r3, r1
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]

            // Update head index.
            prRing->head = (prRing->head + 1) % prRing->length;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f20:	fb01 f202 	mul.w	r2, r1, r2
 8002f24:	1a9a      	subs	r2, r3, r2
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	601a      	str	r2, [r3, #0]
        while (!full(prRing) && (bytes < length))
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f7ff ff00 	bl	8002d30 <full>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <ringWrite+0x88>
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3da      	bcc.n	8002efa <ringWrite+0x3e>
        }
    }

	return bytes;
 8002f44:	697b      	ldr	r3, [r7, #20]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	08018cf0 	.word	0x08018cf0
 8002f54:	080193bc 	.word	0x080193bc
 8002f58:	08018cdc 	.word	0x08018cdc

08002f5c <ringRead>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return number of bytes read
//
uint32_t ringRead(thRing hRing, char *pBuffer, const uint32_t length)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
	uint32_t  bytes  = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
	trRing   *prRing = (trRing*)hRing;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	613b      	str	r3, [r7, #16]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2d8      	uxtb	r0, r3
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <ringRead+0xa0>)
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <ringRead+0xa4>)
 8002f82:	22c6      	movs	r2, #198	; 0xc6
 8002f84:	491f      	ldr	r1, [pc, #124]	; (8003004 <ringRead+0xa8>)
 8002f86:	f7fe fb53 	bl	8001630 <logAssert>
	ASSERT(length > 0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2d8      	uxtb	r0, r3
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <ringRead+0xac>)
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <ringRead+0xa4>)
 8002f9c:	22c7      	movs	r2, #199	; 0xc7
 8002f9e:	4919      	ldr	r1, [pc, #100]	; (8003004 <ringRead+0xa8>)
 8002fa0:	f7fe fb46 	bl	8001630 <logAssert>

	// Read buffer from ring.
	while (!empty(prRing) && (bytes < length))
 8002fa4:	e017      	b.n	8002fd6 <ringRead+0x7a>
	{
		// Read character.
		pBuffer[bytes++] = prRing->pBuffer[prRing->tail];
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	441a      	add	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	6179      	str	r1, [r7, #20]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	440b      	add	r3, r1
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]

		// Update tail index.
		prRing->tail = (prRing->tail + 1) % prRing->length;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	6892      	ldr	r2, [r2, #8]
 8002fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fcc:	fb01 f202 	mul.w	r2, r1, r2
 8002fd0:	1a9a      	subs	r2, r3, r2
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	605a      	str	r2, [r3, #4]
	while (!empty(prRing) && (bytes < length))
 8002fd6:	6938      	ldr	r0, [r7, #16]
 8002fd8:	f7ff fe86 	bl	8002ce8 <empty>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <ringRead+0x94>
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3da      	bcc.n	8002fa6 <ringRead+0x4a>
	}

	return bytes;
 8002ff0:	697b      	ldr	r3, [r7, #20]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	08018cf0 	.word	0x08018cf0
 8003000:	080193c8 	.word	0x080193c8
 8003004:	08018cdc 	.word	0x08018cdc
 8003008:	08018d00 	.word	0x08018d00

0800300c <command>:
//
// @param pString pointer to null terminated command line
// @return enumerated error code
//
static teError command(char *pString)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0a4      	sub	sp, #144	; 0x90
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
    uint32_t  index;
    int       argc;
    char 	 *argv[SHELL_CMD_ARGS_MAX];

    // Tokenize command line.
    argv[argc = 0] = strtok(pString, " ");
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800301a:	493a      	ldr	r1, [pc, #232]	; (8003104 <command+0xf8>)
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f013 faf1 	bl	8016604 <strtok>
 8003022:	4602      	mov	r2, r0
 8003024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	3390      	adds	r3, #144	; 0x90
 800302c:	443b      	add	r3, r7
 800302e:	f843 2c88 	str.w	r2, [r3, #-136]
    while ((argc < (int)DIM(argv)) && (NULL != argv[argc]))
 8003032:	e010      	b.n	8003056 <command+0x4a>
    {
        //lint -save -e661
        argv[++argc] = strtok(NULL, " ");
 8003034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003038:	3301      	adds	r3, #1
 800303a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800303e:	4931      	ldr	r1, [pc, #196]	; (8003104 <command+0xf8>)
 8003040:	2000      	movs	r0, #0
 8003042:	f013 fadf 	bl	8016604 <strtok>
 8003046:	4602      	mov	r2, r0
 8003048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3390      	adds	r3, #144	; 0x90
 8003050:	443b      	add	r3, r7
 8003052:	f843 2c88 	str.w	r2, [r3, #-136]
    while ((argc < (int)DIM(argv)) && (NULL != argv[argc]))
 8003056:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800305a:	2b1f      	cmp	r3, #31
 800305c:	dc08      	bgt.n	8003070 <command+0x64>
 800305e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3390      	adds	r3, #144	; 0x90
 8003066:	443b      	add	r3, r7
 8003068:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e1      	bne.n	8003034 <command+0x28>
        //lint -restore
    }

    // Check for no command.
    if (0 == argc)
 8003070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <command+0x70>
    {
        return eErrorNone;
 8003078:	2300      	movs	r3, #0
 800307a:	e03e      	b.n	80030fa <command+0xee>
    }

    // Iterate over commands.
    for (index = 0; index < DIM(grCmd); index++)
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003082:	e035      	b.n	80030f0 <command+0xe4>
    {
        // Check for matching string.
        if (0 == strcmp(argv[0], grCmd[index].name))
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308a:	21a8      	movs	r1, #168	; 0xa8
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	491d      	ldr	r1, [pc, #116]	; (8003108 <command+0xfc>)
 8003092:	440b      	add	r3, r1
 8003094:	3301      	adds	r3, #1
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f7fd f90d 	bl	80002b8 <strcmp>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d120      	bne.n	80030e6 <command+0xda>
        {
            // Check for minimum arguments.
            if (argc < (int)grCmd[index].minArgs)
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <command+0xfc>)
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030aa:	21a8      	movs	r1, #168	; 0xa8
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	33a0      	adds	r3, #160	; 0xa0
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030bc:	4293      	cmp	r3, r2
 80030be:	da01      	bge.n	80030c4 <command+0xb8>
            {
                return eErrorArgument;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e01a      	b.n	80030fa <command+0xee>
            }

            // Execute command.
            return grCmd[index].pCmd(argc, argv);
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <command+0xfc>)
 80030c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ca:	21a8      	movs	r1, #168	; 0xa8
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	33a4      	adds	r3, #164	; 0xa4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f107 0208 	add.w	r2, r7, #8
 80030da:	4611      	mov	r1, r2
 80030dc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030e0:	4798      	blx	r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	e009      	b.n	80030fa <command+0xee>
    for (index = 0; index < DIM(grCmd); index++)
 80030e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ea:	3301      	adds	r3, #1
 80030ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f4:	2b27      	cmp	r3, #39	; 0x27
 80030f6:	d9c5      	bls.n	8003084 <command+0x78>
        }
    }

    return eErrorUnsupported;
 80030f8:	2321      	movs	r3, #33	; 0x21
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3790      	adds	r7, #144	; 0x90
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	08018d0c 	.word	0x08018d0c
 8003108:	20002da8 	.word	0x20002da8

0800310c <clear>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError clear(int argc, char *argv[])
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
    bspPrintf(VT100_CLEAR_SCREEN);
 8003116:	4804      	ldr	r0, [pc, #16]	; (8003128 <clear+0x1c>)
 8003118:	f7fe f902 	bl	8001320 <bspPrintf>

    return eErrorNone;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	08018d10 	.word	0x08018d10

0800312c <build>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError build(int argc, char *argv[])
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
    bspPrintf("\r\n%s %s", __DATE__, __TIME__);
 8003136:	4a05      	ldr	r2, [pc, #20]	; (800314c <build+0x20>)
 8003138:	4905      	ldr	r1, [pc, #20]	; (8003150 <build+0x24>)
 800313a:	4806      	ldr	r0, [pc, #24]	; (8003154 <build+0x28>)
 800313c:	f7fe f8f0 	bl	8001320 <bspPrintf>

    return eErrorNone;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	08018d18 	.word	0x08018d18
 8003150:	08018d24 	.word	0x08018d24
 8003154:	08018d30 	.word	0x08018d30

08003158 <comment>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError comment(int argc, char *argv[])
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
    return eErrorNone;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <delay>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError delay(int argc, char *argv[])
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    uint32_t milliseconds;

    // Parse command line.
    milliseconds = strtol(argv[1], NULL, 0);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f012 fa83 	bl	8015690 <strtol>
 800318a:	4603      	mov	r3, r0
 800318c:	60fb      	str	r3, [r7, #12]

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <delay+0x2a>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3b01      	subs	r3, #1
 8003198:	e000      	b.n	800319c <delay+0x2c>
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]

	// Wait a bit.
	bspMillisecondDelay(milliseconds);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7fd ffba 	bl	8001118 <bspMillisecondDelay>

    return eErrorNone;
 80031a4:	2300      	movs	r3, #0

}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <error>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError error(int argc, char *argv[])
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
	static trLogError rError;

	// Dump error history.
    while (logErrorHistory(&rError))
 80031ba:	e008      	b.n	80031ce <error+0x1e>
	{
		bspPrintf("\r\n%d,%s,%lu", rError.eError, rError.file, rError.line);
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <error+0x34>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <error+0x34>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <error+0x38>)
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <error+0x3c>)
 80031ca:	f7fe f8a9 	bl	8001320 <bspPrintf>
    while (logErrorHistory(&rError))
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <error+0x34>)
 80031d0:	f7fe fba8 	bl	8001924 <logErrorHistory>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <error+0xc>
	}

	return eErrorNone;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	200047e8 	.word	0x200047e8
 80031e8:	200047e9 	.word	0x200047e9
 80031ec:	08018d38 	.word	0x08018d38

080031f0 <help>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError help(int argc, char *argv[])
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
    uint32_t index;

    // Check for specific command.
    if (2 == argc)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d13c      	bne.n	800327a <help+0x8a>
    {
        // Iterate over commands.
        for (index = 0; index < DIM(grCmd); index++)
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e034      	b.n	8003270 <help+0x80>
        {
            // Check for matching string.
            if (0 == strcmp(argv[1], grCmd[index].name))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	3304      	adds	r3, #4
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	21a8      	movs	r1, #168	; 0xa8
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4931      	ldr	r1, [pc, #196]	; (80032dc <help+0xec>)
 8003216:	440b      	add	r3, r1
 8003218:	3301      	adds	r3, #1
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7fd f84b 	bl	80002b8 <strcmp>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d120      	bne.n	800326a <help+0x7a>
            {
                // Print command usage.
                bspPrintf("\r\n%s %s", grCmd[index].name,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	22a8      	movs	r2, #168	; 0xa8
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <help+0xec>)
 8003232:	4413      	add	r3, r2
 8003234:	1c59      	adds	r1, r3, #1
                    grCmd[index].arguments);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22a8      	movs	r2, #168	; 0xa8
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	3308      	adds	r3, #8
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <help+0xec>)
 8003242:	4413      	add	r3, r2
 8003244:	3301      	adds	r3, #1
                bspPrintf("\r\n%s %s", grCmd[index].name,
 8003246:	461a      	mov	r2, r3
 8003248:	4825      	ldr	r0, [pc, #148]	; (80032e0 <help+0xf0>)
 800324a:	f7fe f869 	bl	8001320 <bspPrintf>
                bspPrintf("\r\n%s", grCmd[index].detail);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	22a8      	movs	r2, #168	; 0xa8
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	3348      	adds	r3, #72	; 0x48
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <help+0xec>)
 800325a:	4413      	add	r3, r2
 800325c:	3305      	adds	r3, #5
 800325e:	4619      	mov	r1, r3
 8003260:	4820      	ldr	r0, [pc, #128]	; (80032e4 <help+0xf4>)
 8003262:	f7fe f85d 	bl	8001320 <bspPrintf>

                return eErrorNone;
 8003266:	2300      	movs	r3, #0
 8003268:	e034      	b.n	80032d4 <help+0xe4>
        for (index = 0; index < DIM(grCmd); index++)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b27      	cmp	r3, #39	; 0x27
 8003274:	d9c7      	bls.n	8003206 <help+0x16>
            }
        }

        return eErrorArgument;
 8003276:	2303      	movs	r3, #3
 8003278:	e02c      	b.n	80032d4 <help+0xe4>
    }

    // Iterate over commands.
    for (index = 0; index < DIM(grCmd); index++)
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e025      	b.n	80032cc <help+0xdc>
    {
        // Print command usage.
    	if (grCmd[index].allocated)
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <help+0xec>)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	21a8      	movs	r1, #168	; 0xa8
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <help+0xd6>
    	{
			bspPrintf("\r\n%8s %-40s %-28s", grCmd[index].name,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22a8      	movs	r2, #168	; 0xa8
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <help+0xec>)
 800329c:	4413      	add	r3, r2
 800329e:	1c59      	adds	r1, r3, #1
				grCmd[index].arguments, grCmd[index].description);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	22a8      	movs	r2, #168	; 0xa8
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	3308      	adds	r3, #8
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <help+0xec>)
 80032ac:	4413      	add	r3, r2
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	20a8      	movs	r0, #168	; 0xa8
 80032b4:	fb00 f303 	mul.w	r3, r0, r3
 80032b8:	3330      	adds	r3, #48	; 0x30
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <help+0xec>)
 80032bc:	4403      	add	r3, r0
 80032be:	3301      	adds	r3, #1
			bspPrintf("\r\n%8s %-40s %-28s", grCmd[index].name,
 80032c0:	4809      	ldr	r0, [pc, #36]	; (80032e8 <help+0xf8>)
 80032c2:	f7fe f82d 	bl	8001320 <bspPrintf>
    for (index = 0; index < DIM(grCmd); index++)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b27      	cmp	r3, #39	; 0x27
 80032d0:	d9d6      	bls.n	8003280 <help+0x90>
    	}
    }

    return eErrorNone;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20002da8 	.word	0x20002da8
 80032e0:	08018d30 	.word	0x08018d30
 80032e4:	08018d44 	.word	0x08018d44
 80032e8:	08018d4c 	.word	0x08018d4c

080032ec <i2cRead>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError i2cRead(int argc, char *argv[])
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
    uint8_t      address;
    uint16_t     index;
    uint16_t     length;

    // Parse arguments.
    address  = (uint8_t)strtol(argv[1], NULL, 0);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	3304      	adds	r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f012 f9c5 	bl	8015690 <strtol>
 8003306:	4603      	mov	r3, r0
 8003308:	757b      	strb	r3, [r7, #21]
    length   = (uint16_t)strtol(argv[2], NULL, 0);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	3308      	adds	r3, #8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f012 f9bb 	bl	8015690 <strtol>
 800331a:	4603      	mov	r3, r0
 800331c:	827b      	strh	r3, [r7, #18]

    // Santize length.
    length   = (length > sizeof(buffer)) ? sizeof(buffer) : length;
 800331e:	8a7b      	ldrh	r3, [r7, #18]
 8003320:	2b04      	cmp	r3, #4
 8003322:	bf28      	it	cs
 8003324:	2304      	movcs	r3, #4
 8003326:	827b      	strh	r3, [r7, #18]

    // Read bus.
    if (!bspI2cRead(address, buffer, length))
 8003328:	8a7a      	ldrh	r2, [r7, #18]
 800332a:	f107 010c 	add.w	r1, r7, #12
 800332e:	7d7b      	ldrb	r3, [r7, #21]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fefd 	bl	8001130 <bspI2cRead>
 8003336:	4603      	mov	r3, r0
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <i2cRead+0x5a>
    {
        return eErrorTimeout;
 8003342:	231f      	movs	r3, #31
 8003344:	e016      	b.n	8003374 <i2cRead+0x88>
    }

    // Print data.
    bspPrintf("\r\n");
 8003346:	480d      	ldr	r0, [pc, #52]	; (800337c <i2cRead+0x90>)
 8003348:	f7fd ffea 	bl	8001320 <bspPrintf>
    for (index = 0; index < length; index++)
 800334c:	2300      	movs	r3, #0
 800334e:	82fb      	strh	r3, [r7, #22]
 8003350:	e00b      	b.n	800336a <i2cRead+0x7e>
    {
        bspPrintf("0x%02x ", buffer[index]);
 8003352:	8afb      	ldrh	r3, [r7, #22]
 8003354:	3318      	adds	r3, #24
 8003356:	443b      	add	r3, r7
 8003358:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800335c:	4619      	mov	r1, r3
 800335e:	4808      	ldr	r0, [pc, #32]	; (8003380 <i2cRead+0x94>)
 8003360:	f7fd ffde 	bl	8001320 <bspPrintf>
    for (index = 0; index < length; index++)
 8003364:	8afb      	ldrh	r3, [r7, #22]
 8003366:	3301      	adds	r3, #1
 8003368:	82fb      	strh	r3, [r7, #22]
 800336a:	8afa      	ldrh	r2, [r7, #22]
 800336c:	8a7b      	ldrh	r3, [r7, #18]
 800336e:	429a      	cmp	r2, r3
 8003370:	d3ef      	bcc.n	8003352 <i2cRead+0x66>
    }

    return eErrorNone;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08018d60 	.word	0x08018d60
 8003380:	08018d64 	.word	0x08018d64

08003384 <i2cWrite>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError i2cWrite(int argc, char *argv[])
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
    uint8_t      buffer[BSP_I2C_BUFFER_MAX];
    uint8_t      address;
    uint16_t     length;

    // Parse arguments.
    address = (uint8_t)strtol(argv[1], NULL, 0);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	3304      	adds	r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f012 f979 	bl	8015690 <strtol>
 800339e:	4603      	mov	r3, r0
 80033a0:	737b      	strb	r3, [r7, #13]
    for (length = 0; ((length + 2) < argc) &&
 80033a2:	2300      	movs	r3, #0
 80033a4:	81fb      	strh	r3, [r7, #14]
 80033a6:	e014      	b.n	80033d2 <i2cWrite+0x4e>
        (length < sizeof(buffer)); length++)
    {
        buffer[length] = (uint8_t)strtol(argv[length + 2], NULL, 0);
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	3302      	adds	r3, #2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	4413      	add	r3, r2
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f012 f969 	bl	8015690 <strtol>
 80033be:	4602      	mov	r2, r0
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	3310      	adds	r3, #16
 80033c6:	443b      	add	r3, r7
 80033c8:	f803 2c08 	strb.w	r2, [r3, #-8]
        (length < sizeof(buffer)); length++)
 80033cc:	89fb      	ldrh	r3, [r7, #14]
 80033ce:	3301      	adds	r3, #1
 80033d0:	81fb      	strh	r3, [r7, #14]
    for (length = 0; ((length + 2) < argc) &&
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	3302      	adds	r3, #2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	dd02      	ble.n	80033e2 <i2cWrite+0x5e>
 80033dc:	89fb      	ldrh	r3, [r7, #14]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d9e2      	bls.n	80033a8 <i2cWrite+0x24>
    }

    // Write channel.
    if (!bspI2cWrite(address, buffer, length))
 80033e2:	89fa      	ldrh	r2, [r7, #14]
 80033e4:	f107 0108 	add.w	r1, r7, #8
 80033e8:	7b7b      	ldrb	r3, [r7, #13]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fee0 	bl	80011b0 <bspI2cWrite>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <i2cWrite+0x7c>
    {
        return eErrorTimeout;
 80033fc:	231f      	movs	r3, #31
 80033fe:	e000      	b.n	8003402 <i2cWrite+0x7e>
    }

    return eErrorNone;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <monitor>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError monitor(int argc, char *argv[])
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b0ae      	sub	sp, #184	; 0xb8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
    char    	   	   buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Parse command line.
    milliseconds = strtol(argv[1], NULL, 0);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	3304      	adds	r3, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f012 f935 	bl	8015690 <strtol>
 8003426:	4603      	mov	r3, r0
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 800342c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <monitor+0x30>
 8003434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003438:	3b01      	subs	r3, #1
 800343a:	e000      	b.n	800343e <monitor+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    // Wait for user abort.
    while (bspConsoleEmpty())
 8003442:	e045      	b.n	80034d0 <monitor+0xc4>
    {
        // Clear screen and place cursor in home position.
        bspPrintf(VT100_CLEAR_SCREEN);
 8003444:	4827      	ldr	r0, [pc, #156]	; (80034e4 <monitor+0xd8>)
 8003446:	f7fd ff6b 	bl	8001320 <bspPrintf>
        bspPrintf(VT100_CURSOR_HOME);
 800344a:	4827      	ldr	r0, [pc, #156]	; (80034e8 <monitor+0xdc>)
 800344c:	f7fd ff68 	bl	8001320 <bspPrintf>

        // Build command buffer.
        memset(buffer, 0, sizeof(buffer));
 8003450:	f107 030c 	add.w	r3, r7, #12
 8003454:	22a0      	movs	r2, #160	; 0xa0
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f013 f8a5 	bl	80165a8 <memset>
        for (index = 2; index < argc; index++)
 800345e:	2302      	movs	r3, #2
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003464:	e018      	b.n	8003498 <monitor+0x8c>
        {
            strncat(buffer, argv[index], sizeof(buffer)-1);
 8003466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	4413      	add	r3, r2
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	f107 030c 	add.w	r3, r7, #12
 8003476:	229f      	movs	r2, #159	; 0x9f
 8003478:	4618      	mov	r0, r3
 800347a:	f013 f89d 	bl	80165b8 <strncat>
            strncat(buffer, pSpace, sizeof(buffer)-1);
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <monitor+0xe0>)
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	229f      	movs	r2, #159	; 0x9f
 8003488:	4618      	mov	r0, r3
 800348a:	f013 f895 	bl	80165b8 <strncat>
        for (index = 2; index < argc; index++)
 800348e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003492:	3301      	adds	r3, #1
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003498:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dbe1      	blt.n	8003466 <monitor+0x5a>
        }

        // Execute command.
        if (eErrorNone != (eError = command(buffer)))
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fdb0 	bl	800300c <command>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80034b2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <monitor+0xb4>
        {
            return eError;
 80034ba:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80034be:	e00d      	b.n	80034dc <monitor+0xd0>
        }

        // Wait for specified time.
        bspMillisecondDelay(milliseconds);
 80034c0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80034c4:	f7fd fe28 	bl	8001118 <bspMillisecondDelay>

        // Service timers.
        timerService();
 80034c8:	f002 fa8c 	bl	80059e4 <timerService>

        // Try to drain stdout.
        bspConsoleFlush();
 80034cc:	f7fd fdb9 	bl	8001042 <bspConsoleFlush>
    while (bspConsoleEmpty())
 80034d0:	f7fd fdab 	bl	800102a <bspConsoleEmpty>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1b4      	bne.n	8003444 <monitor+0x38>
    }

    return eErrorNone;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	37b8      	adds	r7, #184	; 0xb8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08018d10 	.word	0x08018d10
 80034e8:	08018d6c 	.word	0x08018d6c
 80034ec:	20000180 	.word	0x20000180

080034f0 <memRead>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError memRead(int argc, char *argv[])
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08e      	sub	sp, #56	; 0x38
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	uint8_t  *pByte;
	uint16_t *pHalf;
	uint32_t *pWord;

    // Set defaults.
    width  = 'w';
 80034fa:	2377      	movs	r3, #119	; 0x77
 80034fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    length = 1;
 8003500:	2301      	movs	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28

    // Parse arguments.
    address = strtol(argv[1], NULL, 0);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	3304      	adds	r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f012 f8be 	bl	8015690 <strtol>
 8003514:	4603      	mov	r3, r0
 8003516:	61bb      	str	r3, [r7, #24]
    if (argc > 2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	dd0e      	ble.n	800353c <memRead+0x4c>
    {
    	length = strtol(argv[2], NULL, 0);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3308      	adds	r3, #8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f012 f8b1 	bl	8015690 <strtol>
 800352e:	4603      	mov	r3, r0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
        if (0 == length)
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <memRead+0x4c>
        {
            return eErrorArgument;
 8003538:	2303      	movs	r3, #3
 800353a:	e0f5      	b.n	8003728 <memRead+0x238>
        }
    }
    if (argc > 3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b03      	cmp	r3, #3
 8003540:	dd05      	ble.n	800354e <memRead+0x5e>
    {
        width = *argv[3];
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Assign address types.
    pByte = (uint8_t*)address;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    pHalf = (uint16_t*)address;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	623b      	str	r3, [r7, #32]
    pWord = (uint32_t*)address;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	61fb      	str	r3, [r7, #28]

    // Read and display memory contents.
    memset(buffer, 0, sizeof(buffer));
 800355a:	f107 0308 	add.w	r3, r7, #8
 800355e:	2210      	movs	r2, #16
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f013 f820 	bl	80165a8 <memset>
    for (index = 0; bspConsoleEmpty() && (index < length); index++)
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
 800356c:	e08e      	b.n	800368c <memRead+0x19c>
    {
        // Process width.
        switch (width)
 800356e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003572:	2b77      	cmp	r3, #119	; 0x77
 8003574:	d06b      	beq.n	800364e <memRead+0x15e>
 8003576:	2b77      	cmp	r3, #119	; 0x77
 8003578:	f300 8083 	bgt.w	8003682 <memRead+0x192>
 800357c:	2b62      	cmp	r3, #98	; 0x62
 800357e:	d002      	beq.n	8003586 <memRead+0x96>
 8003580:	2b68      	cmp	r3, #104	; 0x68
 8003582:	d04a      	beq.n	800361a <memRead+0x12a>
 8003584:	e07d      	b.n	8003682 <memRead+0x192>
        {
            case 'b':
                if (0 == index%sizeof(buffer))
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	2b00      	cmp	r3, #0
 800358e:	d12b      	bne.n	80035e8 <memRead+0xf8>
                {
                    if (index > 0)
 8003590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003592:	2b00      	cmp	r3, #0
 8003594:	d023      	beq.n	80035de <memRead+0xee>
                    {
                        bspPrintf(" ");
 8003596:	4866      	ldr	r0, [pc, #408]	; (8003730 <memRead+0x240>)
 8003598:	f7fd fec2 	bl	8001320 <bspPrintf>
                        for (offset = 0; offset < sizeof(buffer); offset++)
 800359c:	2300      	movs	r3, #0
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
 80035a0:	e01a      	b.n	80035d8 <memRead+0xe8>
                        {
                            bspPrintf("%c",
                                (isprint(buffer[offset])) ?
 80035a2:	f107 0208 	add.w	r2, r7, #8
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	4413      	add	r3, r2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	4a61      	ldr	r2, [pc, #388]	; (8003734 <memRead+0x244>)
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	f003 0397 	and.w	r3, r3, #151	; 0x97
                            bspPrintf("%c",
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <memRead+0xd8>
                                buffer[offset] : '.');
 80035bc:	f107 0208 	add.w	r2, r7, #8
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	e000      	b.n	80035ca <memRead+0xda>
                            bspPrintf("%c",
 80035c8:	232e      	movs	r3, #46	; 0x2e
 80035ca:	4619      	mov	r1, r3
 80035cc:	485a      	ldr	r0, [pc, #360]	; (8003738 <memRead+0x248>)
 80035ce:	f7fd fea7 	bl	8001320 <bspPrintf>
                        for (offset = 0; offset < sizeof(buffer); offset++)
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	3301      	adds	r3, #1
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d9e1      	bls.n	80035a2 <memRead+0xb2>
                        }
                    }
                    bspPrintf("\r\n%08lx: ", (uint32_t)pByte);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	4856      	ldr	r0, [pc, #344]	; (800373c <memRead+0x24c>)
 80035e4:	f7fd fe9c 	bl	8001320 <bspPrintf>
                }
                buffer[index%sizeof(buffer)] = (char)*pByte++;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	627a      	str	r2, [r7, #36]	; 0x24
 80035ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f0:	f002 020f 	and.w	r2, r2, #15
 80035f4:	7819      	ldrb	r1, [r3, #0]
 80035f6:	f102 0338 	add.w	r3, r2, #56	; 0x38
 80035fa:	443b      	add	r3, r7
 80035fc:	460a      	mov	r2, r1
 80035fe:	f803 2c30 	strb.w	r2, [r3, #-48]
                bspPrintf("%02x ", buffer[index%sizeof(buffer)] & 0xff);
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	3338      	adds	r3, #56	; 0x38
 800360a:	443b      	add	r3, r7
 800360c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003610:	4619      	mov	r1, r3
 8003612:	484b      	ldr	r0, [pc, #300]	; (8003740 <memRead+0x250>)
 8003614:	f7fd fe84 	bl	8001320 <bspPrintf>
                break;
 8003618:	e035      	b.n	8003686 <memRead+0x196>

            case 'h':
                if (0 != address%(sizeof(uint16_t)))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <memRead+0x138>
                {
                    return eErrorArgument;
 8003624:	2303      	movs	r3, #3
 8003626:	e07f      	b.n	8003728 <memRead+0x238>
                }
                if (0 == index%(sizeof(buffer)/sizeof(uint16_t)))
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <memRead+0x14c>
                {
                    bspPrintf("\r\n%08lx: ", (uint32_t)pHalf);
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	4619      	mov	r1, r3
 8003636:	4841      	ldr	r0, [pc, #260]	; (800373c <memRead+0x24c>)
 8003638:	f7fd fe72 	bl	8001320 <bspPrintf>
                }
                bspPrintf("%04x ", *pHalf++);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	623a      	str	r2, [r7, #32]
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	483f      	ldr	r0, [pc, #252]	; (8003744 <memRead+0x254>)
 8003648:	f7fd fe6a 	bl	8001320 <bspPrintf>
                break;
 800364c:	e01b      	b.n	8003686 <memRead+0x196>

            case 'w':
                    if (0 != address%(sizeof(uint32_t)))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <memRead+0x16c>
                    {
                        return eErrorArgument;
 8003658:	2303      	movs	r3, #3
 800365a:	e065      	b.n	8003728 <memRead+0x238>
                    }
                    if (0 == index%(sizeof(buffer)/sizeof(uint32_t)))
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <memRead+0x180>
                    {
                        bspPrintf("\r\n%08lx: ", (uint32_t)pWord);
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4619      	mov	r1, r3
 800366a:	4834      	ldr	r0, [pc, #208]	; (800373c <memRead+0x24c>)
 800366c:	f7fd fe58 	bl	8001320 <bspPrintf>
                    }
                    bspPrintf("%08lx ", *pWord++);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	61fa      	str	r2, [r7, #28]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	4833      	ldr	r0, [pc, #204]	; (8003748 <memRead+0x258>)
 800367c:	f7fd fe50 	bl	8001320 <bspPrintf>
                    break;
 8003680:	e001      	b.n	8003686 <memRead+0x196>

            default:
                    return eErrorArgument;
 8003682:	2303      	movs	r3, #3
 8003684:	e050      	b.n	8003728 <memRead+0x238>
    for (index = 0; bspConsoleEmpty() && (index < length); index++)
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	3301      	adds	r3, #1
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
 800368c:	f7fd fccd 	bl	800102a <bspConsoleEmpty>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <memRead+0x1b0>
 8003696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	429a      	cmp	r2, r3
 800369c:	f4ff af67 	bcc.w	800356e <memRead+0x7e>
        }
    }

    // Print remaining character line.
    if ('b' == width)
 80036a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036a4:	2b62      	cmp	r3, #98	; 0x62
 80036a6:	d13e      	bne.n	8003726 <memRead+0x236>
    {
        bspPrintf(" ");
 80036a8:	4821      	ldr	r0, [pc, #132]	; (8003730 <memRead+0x240>)
 80036aa:	f7fd fe39 	bl	8001320 <bspPrintf>
        length = length%sizeof(buffer);
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
        length = (0 == length) ? sizeof(buffer) : length;
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <memRead+0x1d0>
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	e000      	b.n	80036c2 <memRead+0x1d2>
 80036c0:	2310      	movs	r3, #16
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
        for (index = 0; index < (sizeof(buffer)-length); index++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	e005      	b.n	80036d6 <memRead+0x1e6>
        {
            bspPrintf("   ");
 80036ca:	4820      	ldr	r0, [pc, #128]	; (800374c <memRead+0x25c>)
 80036cc:	f7fd fe28 	bl	8001320 <bspPrintf>
        for (index = 0; index < (sizeof(buffer)-length); index++)
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	3301      	adds	r3, #1
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	f1c3 0310 	rsb	r3, r3, #16
 80036dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3f3      	bcc.n	80036ca <memRead+0x1da>
        }
        for (offset = 0; offset < length; offset++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
 80036e6:	e01a      	b.n	800371e <memRead+0x22e>
        {
            bspPrintf("%c", (isprint(buffer[offset])) ?
 80036e8:	f107 0208 	add.w	r2, r7, #8
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <memRead+0x244>)
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <memRead+0x21e>
                buffer[offset] : '.');
 8003702:	f107 0208 	add.w	r2, r7, #8
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	4413      	add	r3, r2
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	e000      	b.n	8003710 <memRead+0x220>
            bspPrintf("%c", (isprint(buffer[offset])) ?
 800370e:	232e      	movs	r3, #46	; 0x2e
 8003710:	4619      	mov	r1, r3
 8003712:	4809      	ldr	r0, [pc, #36]	; (8003738 <memRead+0x248>)
 8003714:	f7fd fe04 	bl	8001320 <bspPrintf>
        for (offset = 0; offset < length; offset++)
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	3301      	adds	r3, #1
 800371c:	633b      	str	r3, [r7, #48]	; 0x30
 800371e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	429a      	cmp	r2, r3
 8003724:	d3e0      	bcc.n	80036e8 <memRead+0x1f8>
        }
    }

    return eErrorNone;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3738      	adds	r7, #56	; 0x38
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	08018d0c 	.word	0x08018d0c
 8003734:	08019528 	.word	0x08019528
 8003738:	08018d70 	.word	0x08018d70
 800373c:	08018d74 	.word	0x08018d74
 8003740:	08018d80 	.word	0x08018d80
 8003744:	08018d88 	.word	0x08018d88
 8003748:	08018d90 	.word	0x08018d90
 800374c:	08018d98 	.word	0x08018d98

08003750 <memWrite>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError memWrite(int argc, char *argv[])
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	uint16_t *pHalf;
	uint32_t *pWord;


    // Set defaults.
    width  = 'w';
 800375a:	2377      	movs	r3, #119	; 0x77
 800375c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    length = 1;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]

    // Parse arguments.
    address = strtol(argv[1], NULL, 0);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	3304      	adds	r3, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f011 ff8e 	bl	8015690 <strtol>
 8003774:	4603      	mov	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]
    value   = strtol(argv[2], NULL, 0);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3308      	adds	r3, #8
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f011 ff84 	bl	8015690 <strtol>
 8003788:	4603      	mov	r3, r0
 800378a:	60bb      	str	r3, [r7, #8]
    if (argc > 3)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b03      	cmp	r3, #3
 8003790:	dd09      	ble.n	80037a6 <memWrite+0x56>
    {
        length = strtol(argv[3], NULL, 0);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f011 ff77 	bl	8015690 <strtol>
 80037a2:	4603      	mov	r3, r0
 80037a4:	61fb      	str	r3, [r7, #28]
    }
    if (argc > 4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	dd05      	ble.n	80037b8 <memWrite+0x68>
    {
        width = *argv[4];
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	3310      	adds	r3, #16
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    // Assign address types.
    pByte = (uint8_t*)address;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	61bb      	str	r3, [r7, #24]
    pHalf = (uint16_t*)address;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	617b      	str	r3, [r7, #20]
    pWord = (uint32_t*)address;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	613b      	str	r3, [r7, #16]

    // Write to memory.
    for (index = 0; index < length; index++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
 80037c8:	e023      	b.n	8003812 <memWrite+0xc2>
    {
        // Process width.
        switch (width)
 80037ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ce:	2b77      	cmp	r3, #119	; 0x77
 80037d0:	d014      	beq.n	80037fc <memWrite+0xac>
 80037d2:	2b77      	cmp	r3, #119	; 0x77
 80037d4:	dc18      	bgt.n	8003808 <memWrite+0xb8>
 80037d6:	2b62      	cmp	r3, #98	; 0x62
 80037d8:	d002      	beq.n	80037e0 <memWrite+0x90>
 80037da:	2b68      	cmp	r3, #104	; 0x68
 80037dc:	d007      	beq.n	80037ee <memWrite+0x9e>
 80037de:	e013      	b.n	8003808 <memWrite+0xb8>
        {
            case 'b':
            	*pByte++ = value;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	61ba      	str	r2, [r7, #24]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
                break;
 80037ec:	e00e      	b.n	800380c <memWrite+0xbc>

            case 'h':
            	*pHalf++ = value;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	617a      	str	r2, [r7, #20]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	b292      	uxth	r2, r2
 80037f8:	801a      	strh	r2, [r3, #0]
                break;
 80037fa:	e007      	b.n	800380c <memWrite+0xbc>

            case 'w':
            	*pWord++ = value;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1d1a      	adds	r2, r3, #4
 8003800:	613a      	str	r2, [r7, #16]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	601a      	str	r2, [r3, #0]
                break;
 8003806:	e001      	b.n	800380c <memWrite+0xbc>

            default:
                return eErrorArgument;
 8003808:	2303      	movs	r3, #3
 800380a:	e007      	b.n	800381c <memWrite+0xcc>
    for (index = 0; index < length; index++)
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	3301      	adds	r3, #1
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	429a      	cmp	r2, r3
 8003818:	d3d7      	bcc.n	80037ca <memWrite+0x7a>
        }
    }

    return eErrorNone;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3728      	adds	r7, #40	; 0x28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <xtime>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError xtime(int argc, char *argv[])
{
 8003824:	b5b0      	push	{r4, r5, r7, lr}
 8003826:	b0ae      	sub	sp, #184	; 0xb8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
    char               buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Build command buffer.
    memset(buffer, 0, sizeof(buffer));
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	22a0      	movs	r2, #160	; 0xa0
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f012 feb6 	bl	80165a8 <memset>
    for (index = 1; index < argc; index++)
 800383c:	2301      	movs	r3, #1
 800383e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003842:	e018      	b.n	8003876 <xtime+0x52>
    {
        strncat(buffer, argv[index], sizeof(buffer)-1);
 8003844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	4413      	add	r3, r2
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	229f      	movs	r2, #159	; 0x9f
 8003856:	4618      	mov	r0, r3
 8003858:	f012 feae 	bl	80165b8 <strncat>
        strncat(buffer, pSpace, sizeof(buffer)-1);
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <xtime+0xc0>)
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	229f      	movs	r2, #159	; 0x9f
 8003866:	4618      	mov	r0, r3
 8003868:	f012 fea6 	bl	80165b8 <strncat>
    for (index = 1; index < argc; index++)
 800386c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003870:	3301      	adds	r3, #1
 8003872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	dbe1      	blt.n	8003844 <xtime+0x20>
    }

    // Sample start time.
    start = bspCycleCounter();
 8003880:	f7fd fc34 	bl	80010ec <bspCycleCounter>
 8003884:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

    // Execute command.
    eError = command(buffer);
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fbbd 	bl	800300c <command>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    // Compute duration.
    delta = bspCycleCounter() - start;
 8003898:	f7fd fc28 	bl	80010ec <bspCycleCounter>
 800389c:	4602      	mov	r2, r0
 800389e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    // Display execution time.
    bspPrintf("\r\n%1.6E", (double)delta / (double)bspCycleCounterFrequency());
 80038a8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80038ac:	f7fc fe58 	bl	8000560 <__aeabi_ui2d>
 80038b0:	4604      	mov	r4, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	f7fd fc26 	bl	8001104 <bspCycleCounterFrequency>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fe50 	bl	8000560 <__aeabi_ui2d>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4620      	mov	r0, r4
 80038c6:	4629      	mov	r1, r5
 80038c8:	f7fc ffee 	bl	80008a8 <__aeabi_ddiv>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4805      	ldr	r0, [pc, #20]	; (80038e8 <xtime+0xc4>)
 80038d2:	f7fd fd25 	bl	8001320 <bspPrintf>

    return eError;
 80038d6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80038da:	4618      	mov	r0, r3
 80038dc:	37b8      	adds	r7, #184	; 0xb8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bdb0      	pop	{r4, r5, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000184 	.word	0x20000184
 80038e8:	08018d9c 	.word	0x08018d9c

080038ec <perf>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError perf(int argc, char *argv[])
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
    // Dump all performance stats.
    perfPrint(NULL);
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7ff f892 	bl	8002a20 <perfPrint>

    return eErrorNone;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <repeat>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError repeat(int argc, char *argv[])
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b0ae      	sub	sp, #184	; 0xb8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
    char               buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Parse command line.
    count = strtol(argv[1], NULL, 0);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	3304      	adds	r3, #4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f011 feb7 	bl	8015690 <strtol>
 8003922:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    if (0 == count)
 8003926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <repeat+0x2a>
    {
        return eErrorArgument;
 800392e:	2303      	movs	r3, #3
 8003930:	e063      	b.n	80039fa <repeat+0xf2>
    }
    milliseconds = strtol(argv[2], NULL, 0);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f011 fea7 	bl	8015690 <strtol>
 8003942:	4603      	mov	r3, r0
 8003944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 8003948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <repeat+0x50>
 8003950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003954:	3b01      	subs	r3, #1
 8003956:	e000      	b.n	800395a <repeat+0x52>
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    // Wait for user abort or terminal count.
    while (bspConsoleEmpty() && (count-- > 0))
 800395e:	e03f      	b.n	80039e0 <repeat+0xd8>
    {
        // Build command buffer.
        memset(buffer, 0, sizeof(buffer));
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	22a0      	movs	r2, #160	; 0xa0
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f012 fe1d 	bl	80165a8 <memset>
        for (index = 3; index < argc; index++)
 800396e:	2303      	movs	r3, #3
 8003970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003974:	e018      	b.n	80039a8 <repeat+0xa0>
        {
            strncat(buffer, argv[index], sizeof(buffer)-1);
 8003976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	4413      	add	r3, r2
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	f107 0308 	add.w	r3, r7, #8
 8003986:	229f      	movs	r2, #159	; 0x9f
 8003988:	4618      	mov	r0, r3
 800398a:	f012 fe15 	bl	80165b8 <strncat>
            strncat(buffer, pSpace, sizeof(buffer)-1);
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <repeat+0xfc>)
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	229f      	movs	r2, #159	; 0x9f
 8003998:	4618      	mov	r0, r3
 800399a:	f012 fe0d 	bl	80165b8 <strncat>
        for (index = 3; index < argc; index++)
 800399e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039a2:	3301      	adds	r3, #1
 80039a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	dbe1      	blt.n	8003976 <repeat+0x6e>
        }

        // Execute command.
        if (eErrorNone != (eError = command(buffer)))
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fb28 	bl	800300c <command>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80039c2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <repeat+0xc8>
        {
            return eError;
 80039ca:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80039ce:	e014      	b.n	80039fa <repeat+0xf2>
        }

        // Wait for specified time.
        bspMillisecondDelay(milliseconds);
 80039d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80039d4:	f7fd fba0 	bl	8001118 <bspMillisecondDelay>

        // Service timers.
        timerService();
 80039d8:	f002 f804 	bl	80059e4 <timerService>

        // Flush stdout.
        bspConsoleFlush();
 80039dc:	f7fd fb31 	bl	8001042 <bspConsoleFlush>
    while (bspConsoleEmpty() && (count-- > 0))
 80039e0:	f7fd fb23 	bl	800102a <bspConsoleEmpty>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <repeat+0xf0>
 80039ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039ee:	1e5a      	subs	r2, r3, #1
 80039f0:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	dcb3      	bgt.n	8003960 <repeat+0x58>
    }

    return eErrorNone;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	37b8      	adds	r7, #184	; 0xb8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000188 	.word	0x20000188

08003a08 <reboot>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError reboot(int argc, char *argv[])
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	bspReset();
 8003a12:	f7fd fcb1 	bl	8001378 <bspReset>

    return eErrorNone;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <uptime>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError uptime(int argc, char *argv[])
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    trTimerTimestamp rTimestamp;

    // Get timestamp.
    timerTimestamp(&rTimestamp);
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fe8e 	bl	8005750 <timerTimestamp>

    // Print update.
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 8003a34:	893b      	ldrh	r3, [r7, #8]
 8003a36:	4619      	mov	r1, r3
 8003a38:	7abb      	ldrb	r3, [r7, #10]
 8003a3a:	4618      	mov	r0, r3
        rTimestamp.minutes, rTimestamp.seconds, rTimestamp.milliseconds);
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 8003a3e:	461c      	mov	r4, r3
        rTimestamp.minutes, rTimestamp.seconds, rTimestamp.milliseconds);
 8003a40:	7b3b      	ldrb	r3, [r7, #12]
 8003a42:	89fa      	ldrh	r2, [r7, #14]
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4623      	mov	r3, r4
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4803      	ldr	r0, [pc, #12]	; (8003a5c <uptime+0x3c>)
 8003a4e:	f7fd fc67 	bl	8001320 <bspPrintf>

    return eErrorNone;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	08018da4 	.word	0x08018da4

08003a60 <shellInit>:
// @brief Initialize shell.
//
// @return enumerated error code
//
teError shellInit(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af02      	add	r7, sp, #8
	teError eError;

	// Initialize line and history buffers.
	memset(&grLine, 0, sizeof(grLine));
 8003a66:	22a4      	movs	r2, #164	; 0xa4
 8003a68:	2100      	movs	r1, #0
 8003a6a:	48a2      	ldr	r0, [pc, #648]	; (8003cf4 <shellInit+0x294>)
 8003a6c:	f012 fd9c 	bl	80165a8 <memset>
    memset(&grLineHistory, 0, sizeof(grLineHistory));
 8003a70:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8003a74:	2100      	movs	r1, #0
 8003a76:	48a0      	ldr	r0, [pc, #640]	; (8003cf8 <shellInit+0x298>)
 8003a78:	f012 fd96 	bl	80165a8 <memset>

    // Clear commands.
    memset(grCmd, 0, sizeof(grCmd));
 8003a7c:	f44f 52d2 	mov.w	r2, #6720	; 0x1a40
 8003a80:	2100      	movs	r1, #0
 8003a82:	489e      	ldr	r0, [pc, #632]	; (8003cfc <shellInit+0x29c>)
 8003a84:	f012 fd90 	bl	80165a8 <memset>

    // Add built-in commands.
    if (eErrorNone != (eError = shellAdd("build",
 8003a88:	4b9d      	ldr	r3, [pc, #628]	; (8003d00 <shellInit+0x2a0>)
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4b9c      	ldr	r3, [pc, #624]	; (8003d04 <shellInit+0x2a4>)
 8003a92:	4a9c      	ldr	r2, [pc, #624]	; (8003d04 <shellInit+0x2a4>)
 8003a94:	499c      	ldr	r1, [pc, #624]	; (8003d08 <shellInit+0x2a8>)
 8003a96:	489d      	ldr	r0, [pc, #628]	; (8003d0c <shellInit+0x2ac>)
 8003a98:	f000 fb3e 	bl	8004118 <shellAdd>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	71fb      	strb	r3, [r7, #7]
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <shellInit+0x54>
        "build date/time", "", "", 1, build)))
    {
        LOGERROR(eError);
 8003aa6:	79f8      	ldrb	r0, [r7, #7]
 8003aa8:	4b99      	ldr	r3, [pc, #612]	; (8003d10 <shellInit+0x2b0>)
 8003aaa:	f240 22c6 	movw	r2, #710	; 0x2c6
 8003aae:	4999      	ldr	r1, [pc, #612]	; (8003d14 <shellInit+0x2b4>)
 8003ab0:	f7fd fe5c 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("#",
 8003ab4:	4b98      	ldr	r3, [pc, #608]	; (8003d18 <shellInit+0x2b8>)
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2301      	movs	r3, #1
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4b91      	ldr	r3, [pc, #580]	; (8003d04 <shellInit+0x2a4>)
 8003abe:	4a91      	ldr	r2, [pc, #580]	; (8003d04 <shellInit+0x2a4>)
 8003ac0:	4996      	ldr	r1, [pc, #600]	; (8003d1c <shellInit+0x2bc>)
 8003ac2:	4897      	ldr	r0, [pc, #604]	; (8003d20 <shellInit+0x2c0>)
 8003ac4:	f000 fb28 	bl	8004118 <shellAdd>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d006      	beq.n	8003ae0 <shellInit+0x80>
        "comment", "", "", 1, comment)))
    {
        LOGERROR(eError);
 8003ad2:	79f8      	ldrb	r0, [r7, #7]
 8003ad4:	4b8e      	ldr	r3, [pc, #568]	; (8003d10 <shellInit+0x2b0>)
 8003ad6:	f240 22cb 	movw	r2, #715	; 0x2cb
 8003ada:	498e      	ldr	r1, [pc, #568]	; (8003d14 <shellInit+0x2b4>)
 8003adc:	f7fd fe46 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("clear",
 8003ae0:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <shellInit+0x2c4>)
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4b86      	ldr	r3, [pc, #536]	; (8003d04 <shellInit+0x2a4>)
 8003aea:	4a86      	ldr	r2, [pc, #536]	; (8003d04 <shellInit+0x2a4>)
 8003aec:	498e      	ldr	r1, [pc, #568]	; (8003d28 <shellInit+0x2c8>)
 8003aee:	488f      	ldr	r0, [pc, #572]	; (8003d2c <shellInit+0x2cc>)
 8003af0:	f000 fb12 	bl	8004118 <shellAdd>
 8003af4:	4603      	mov	r3, r0
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <shellInit+0xac>
		"clear the terminal screen", "", "", 1, clear)))
    {
    	LOGERROR(eError);
 8003afe:	79f8      	ldrb	r0, [r7, #7]
 8003b00:	4b83      	ldr	r3, [pc, #524]	; (8003d10 <shellInit+0x2b0>)
 8003b02:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8003b06:	4983      	ldr	r1, [pc, #524]	; (8003d14 <shellInit+0x2b4>)
 8003b08:	f7fd fe30 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("delay",
 8003b0c:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <shellInit+0x2d0>)
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2302      	movs	r3, #2
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4b87      	ldr	r3, [pc, #540]	; (8003d34 <shellInit+0x2d4>)
 8003b16:	4a88      	ldr	r2, [pc, #544]	; (8003d38 <shellInit+0x2d8>)
 8003b18:	4988      	ldr	r1, [pc, #544]	; (8003d3c <shellInit+0x2dc>)
 8003b1a:	4889      	ldr	r0, [pc, #548]	; (8003d40 <shellInit+0x2e0>)
 8003b1c:	f000 fafc 	bl	8004118 <shellAdd>
 8003b20:	4603      	mov	r3, r0
 8003b22:	71fb      	strb	r3, [r7, #7]
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <shellInit+0xd8>
        "delay for a period of time", "<milliseconds>",
        "milliseconds=<0..n>",
        2, delay)))
    {
        LOGERROR(eError);
 8003b2a:	79f8      	ldrb	r0, [r7, #7]
 8003b2c:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <shellInit+0x2b0>)
 8003b2e:	f240 22d7 	movw	r2, #727	; 0x2d7
 8003b32:	4978      	ldr	r1, [pc, #480]	; (8003d14 <shellInit+0x2b4>)
 8003b34:	f7fd fe1a 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("error",
 8003b38:	4b82      	ldr	r3, [pc, #520]	; (8003d44 <shellInit+0x2e4>)
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <shellInit+0x2a4>)
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <shellInit+0x2a4>)
 8003b44:	4980      	ldr	r1, [pc, #512]	; (8003d48 <shellInit+0x2e8>)
 8003b46:	4881      	ldr	r0, [pc, #516]	; (8003d4c <shellInit+0x2ec>)
 8003b48:	f000 fae6 	bl	8004118 <shellAdd>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <shellInit+0x104>
		"print error history", "", "", 1, error)))
    {
    	LOGERROR(eError);
 8003b56:	79f8      	ldrb	r0, [r7, #7]
 8003b58:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <shellInit+0x2b0>)
 8003b5a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8003b5e:	496d      	ldr	r1, [pc, #436]	; (8003d14 <shellInit+0x2b4>)
 8003b60:	f7fd fe04 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("help",
 8003b64:	4b7a      	ldr	r3, [pc, #488]	; (8003d50 <shellInit+0x2f0>)
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4b79      	ldr	r3, [pc, #484]	; (8003d54 <shellInit+0x2f4>)
 8003b6e:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <shellInit+0x2f8>)
 8003b70:	497a      	ldr	r1, [pc, #488]	; (8003d5c <shellInit+0x2fc>)
 8003b72:	487b      	ldr	r0, [pc, #492]	; (8003d60 <shellInit+0x300>)
 8003b74:	f000 fad0 	bl	8004118 <shellAdd>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	71fb      	strb	r3, [r7, #7]
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <shellInit+0x130>
		"print help information", "[cmd]",
		"cmd=<any supported command>", 1, help)))
    {
    	LOGERROR(eError);
 8003b82:	79f8      	ldrb	r0, [r7, #7]
 8003b84:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <shellInit+0x2b0>)
 8003b86:	f240 22e2 	movw	r2, #738	; 0x2e2
 8003b8a:	4962      	ldr	r1, [pc, #392]	; (8003d14 <shellInit+0x2b4>)
 8003b8c:	f7fd fdee 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("ir",
 8003b90:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <shellInit+0x304>)
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	2302      	movs	r3, #2
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	4b73      	ldr	r3, [pc, #460]	; (8003d68 <shellInit+0x308>)
 8003b9a:	4a74      	ldr	r2, [pc, #464]	; (8003d6c <shellInit+0x30c>)
 8003b9c:	4974      	ldr	r1, [pc, #464]	; (8003d70 <shellInit+0x310>)
 8003b9e:	4875      	ldr	r0, [pc, #468]	; (8003d74 <shellInit+0x314>)
 8003ba0:	f000 faba 	bl	8004118 <shellAdd>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <shellInit+0x15c>
        "i2c read", "<address> <length>",
        "address=<7-bit>, length=<1-n>", 2, i2cRead)))
    {
        LOGERROR(eError);
 8003bae:	79f8      	ldrb	r0, [r7, #7]
 8003bb0:	4b57      	ldr	r3, [pc, #348]	; (8003d10 <shellInit+0x2b0>)
 8003bb2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8003bb6:	4957      	ldr	r1, [pc, #348]	; (8003d14 <shellInit+0x2b4>)
 8003bb8:	f7fd fdd8 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("iw",
 8003bbc:	4b6e      	ldr	r3, [pc, #440]	; (8003d78 <shellInit+0x318>)
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <shellInit+0x31c>)
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <shellInit+0x320>)
 8003bc8:	496e      	ldr	r1, [pc, #440]	; (8003d84 <shellInit+0x324>)
 8003bca:	486f      	ldr	r0, [pc, #444]	; (8003d88 <shellInit+0x328>)
 8003bcc:	f000 faa4 	bl	8004118 <shellAdd>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	71fb      	strb	r3, [r7, #7]
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <shellInit+0x188>
        "i2c write", "<address> <data>",
        "address=<7-bit>, data=<...>", 2, i2cWrite)))
    {
        LOGERROR(eError);
 8003bda:	79f8      	ldrb	r0, [r7, #7]
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <shellInit+0x2b0>)
 8003bde:	f240 22ee 	movw	r2, #750	; 0x2ee
 8003be2:	494c      	ldr	r1, [pc, #304]	; (8003d14 <shellInit+0x2b4>)
 8003be4:	f7fd fdc2 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("mon",
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <shellInit+0x32c>)
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	2303      	movs	r3, #3
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <shellInit+0x330>)
 8003bf2:	4a68      	ldr	r2, [pc, #416]	; (8003d94 <shellInit+0x334>)
 8003bf4:	4968      	ldr	r1, [pc, #416]	; (8003d98 <shellInit+0x338>)
 8003bf6:	4869      	ldr	r0, [pc, #420]	; (8003d9c <shellInit+0x33c>)
 8003bf8:	f000 fa8e 	bl	8004118 <shellAdd>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	71fb      	strb	r3, [r7, #7]
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <shellInit+0x1b4>
		"monitor command", "<milliseconds> <cmd>",
		"milliseconds=<0..n>, cmd=<any supported command>",
		3, monitor)))
    {
    	LOGERROR(eError);
 8003c06:	79f8      	ldrb	r0, [r7, #7]
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <shellInit+0x2b0>)
 8003c0a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003c0e:	4941      	ldr	r1, [pc, #260]	; (8003d14 <shellInit+0x2b4>)
 8003c10:	f7fd fdac 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("mr",
 8003c14:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <shellInit+0x340>)
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2302      	movs	r3, #2
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <shellInit+0x344>)
 8003c1e:	4a62      	ldr	r2, [pc, #392]	; (8003da8 <shellInit+0x348>)
 8003c20:	4962      	ldr	r1, [pc, #392]	; (8003dac <shellInit+0x34c>)
 8003c22:	4863      	ldr	r0, [pc, #396]	; (8003db0 <shellInit+0x350>)
 8003c24:	f000 fa78 	bl	8004118 <shellAdd>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d006      	beq.n	8003c40 <shellInit+0x1e0>
		"memory read", "<address> [length] [b|h|w]",
		"address=<hex>, length=<dec>, b=byte, h=halfword, w=word",
		2, memRead)))
    {
    	LOGERROR(eError);
 8003c32:	79f8      	ldrb	r0, [r7, #7]
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <shellInit+0x2b0>)
 8003c36:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8003c3a:	4936      	ldr	r1, [pc, #216]	; (8003d14 <shellInit+0x2b4>)
 8003c3c:	f7fd fd96 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("mw",
 8003c40:	4b5c      	ldr	r3, [pc, #368]	; (8003db4 <shellInit+0x354>)
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	2303      	movs	r3, #3
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <shellInit+0x358>)
 8003c4a:	4a5c      	ldr	r2, [pc, #368]	; (8003dbc <shellInit+0x35c>)
 8003c4c:	495c      	ldr	r1, [pc, #368]	; (8003dc0 <shellInit+0x360>)
 8003c4e:	485d      	ldr	r0, [pc, #372]	; (8003dc4 <shellInit+0x364>)
 8003c50:	f000 fa62 	bl	8004118 <shellAdd>
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <shellInit+0x20c>
		"memory write", "<address> <value> [length] [b|h|w]",
		"address=<hex>, value=<hex>, length=<dec>, b=byte, h=half, w=word",
		3, memWrite)))
    {
    	LOGERROR(eError);
 8003c5e:	79f8      	ldrb	r0, [r7, #7]
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <shellInit+0x2b0>)
 8003c62:	f240 3203 	movw	r2, #771	; 0x303
 8003c66:	492b      	ldr	r1, [pc, #172]	; (8003d14 <shellInit+0x2b4>)
 8003c68:	f7fd fd80 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("perf",
 8003c6c:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <shellInit+0x368>)
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	2301      	movs	r3, #1
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <shellInit+0x2a4>)
 8003c76:	4a23      	ldr	r2, [pc, #140]	; (8003d04 <shellInit+0x2a4>)
 8003c78:	4954      	ldr	r1, [pc, #336]	; (8003dcc <shellInit+0x36c>)
 8003c7a:	4855      	ldr	r0, [pc, #340]	; (8003dd0 <shellInit+0x370>)
 8003c7c:	f000 fa4c 	bl	8004118 <shellAdd>
 8003c80:	4603      	mov	r3, r0
 8003c82:	71fb      	strb	r3, [r7, #7]
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <shellInit+0x238>
        "performance statistics", "", "",
        1, perf)))
    {
        LOGERROR(eError);
 8003c8a:	79f8      	ldrb	r0, [r7, #7]
 8003c8c:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <shellInit+0x2b0>)
 8003c8e:	f240 3209 	movw	r2, #777	; 0x309
 8003c92:	4920      	ldr	r1, [pc, #128]	; (8003d14 <shellInit+0x2b4>)
 8003c94:	f7fd fd6a 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("reboot",
 8003c98:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <shellInit+0x374>)
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <shellInit+0x2a4>)
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <shellInit+0x2a4>)
 8003ca4:	494c      	ldr	r1, [pc, #304]	; (8003dd8 <shellInit+0x378>)
 8003ca6:	484d      	ldr	r0, [pc, #308]	; (8003ddc <shellInit+0x37c>)
 8003ca8:	f000 fa36 	bl	8004118 <shellAdd>
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <shellInit+0x264>
        "reboot firmware", "", "",
        1, reboot)))
    {
        LOGERROR(eError);
 8003cb6:	79f8      	ldrb	r0, [r7, #7]
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <shellInit+0x2b0>)
 8003cba:	f240 320f 	movw	r2, #783	; 0x30f
 8003cbe:	4915      	ldr	r1, [pc, #84]	; (8003d14 <shellInit+0x2b4>)
 8003cc0:	f7fd fd54 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("rep",
 8003cc4:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <shellInit+0x380>)
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2304      	movs	r3, #4
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <shellInit+0x384>)
 8003cce:	4a46      	ldr	r2, [pc, #280]	; (8003de8 <shellInit+0x388>)
 8003cd0:	4946      	ldr	r1, [pc, #280]	; (8003dec <shellInit+0x38c>)
 8003cd2:	4847      	ldr	r0, [pc, #284]	; (8003df0 <shellInit+0x390>)
 8003cd4:	f000 fa20 	bl	8004118 <shellAdd>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	71fb      	strb	r3, [r7, #7]
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8088 	beq.w	8003df4 <shellInit+0x394>
		"repeat command", "<count> <milliseconds> <cmd>",
		"count=<1..n>, milliseconds=<0..n>, cmd=<any supported command>",
		4, repeat)))
    {
    	LOGERROR(eError);
 8003ce4:	79f8      	ldrb	r0, [r7, #7]
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <shellInit+0x2b0>)
 8003ce8:	f240 3216 	movw	r2, #790	; 0x316
 8003cec:	4909      	ldr	r1, [pc, #36]	; (8003d14 <shellInit+0x2b4>)
 8003cee:	f7fd fd3d 	bl	800176c <logError>
 8003cf2:	e07f      	b.n	8003df4 <shellInit+0x394>
 8003cf4:	200027e4 	.word	0x200027e4
 8003cf8:	20002888 	.word	0x20002888
 8003cfc:	20002da8 	.word	0x20002da8
 8003d00:	0800312d 	.word	0x0800312d
 8003d04:	08018dc0 	.word	0x08018dc0
 8003d08:	08018dc4 	.word	0x08018dc4
 8003d0c:	08018dd4 	.word	0x08018dd4
 8003d10:	080193d4 	.word	0x080193d4
 8003d14:	08018ddc 	.word	0x08018ddc
 8003d18:	08003159 	.word	0x08003159
 8003d1c:	08018df0 	.word	0x08018df0
 8003d20:	08018df8 	.word	0x08018df8
 8003d24:	0800310d 	.word	0x0800310d
 8003d28:	08018dfc 	.word	0x08018dfc
 8003d2c:	08018e18 	.word	0x08018e18
 8003d30:	08003171 	.word	0x08003171
 8003d34:	08018e20 	.word	0x08018e20
 8003d38:	08018e34 	.word	0x08018e34
 8003d3c:	08018e44 	.word	0x08018e44
 8003d40:	08018e60 	.word	0x08018e60
 8003d44:	080031b1 	.word	0x080031b1
 8003d48:	08018e68 	.word	0x08018e68
 8003d4c:	08018e7c 	.word	0x08018e7c
 8003d50:	080031f1 	.word	0x080031f1
 8003d54:	08018e84 	.word	0x08018e84
 8003d58:	08018ea0 	.word	0x08018ea0
 8003d5c:	08018ea8 	.word	0x08018ea8
 8003d60:	08018ec0 	.word	0x08018ec0
 8003d64:	080032ed 	.word	0x080032ed
 8003d68:	08018ec8 	.word	0x08018ec8
 8003d6c:	08018ee8 	.word	0x08018ee8
 8003d70:	08018efc 	.word	0x08018efc
 8003d74:	08018f08 	.word	0x08018f08
 8003d78:	08003385 	.word	0x08003385
 8003d7c:	08018f0c 	.word	0x08018f0c
 8003d80:	08018f28 	.word	0x08018f28
 8003d84:	08018f3c 	.word	0x08018f3c
 8003d88:	08018f48 	.word	0x08018f48
 8003d8c:	0800340d 	.word	0x0800340d
 8003d90:	08018f4c 	.word	0x08018f4c
 8003d94:	08018f80 	.word	0x08018f80
 8003d98:	08018f98 	.word	0x08018f98
 8003d9c:	08018fa8 	.word	0x08018fa8
 8003da0:	080034f1 	.word	0x080034f1
 8003da4:	08018fac 	.word	0x08018fac
 8003da8:	08018fe4 	.word	0x08018fe4
 8003dac:	08019000 	.word	0x08019000
 8003db0:	0801900c 	.word	0x0801900c
 8003db4:	08003751 	.word	0x08003751
 8003db8:	08019010 	.word	0x08019010
 8003dbc:	08019054 	.word	0x08019054
 8003dc0:	08019078 	.word	0x08019078
 8003dc4:	08019088 	.word	0x08019088
 8003dc8:	080038ed 	.word	0x080038ed
 8003dcc:	0801908c 	.word	0x0801908c
 8003dd0:	080190a4 	.word	0x080190a4
 8003dd4:	08003a09 	.word	0x08003a09
 8003dd8:	080190ac 	.word	0x080190ac
 8003ddc:	080190bc 	.word	0x080190bc
 8003de0:	08003909 	.word	0x08003909
 8003de4:	080190c4 	.word	0x080190c4
 8003de8:	08019104 	.word	0x08019104
 8003dec:	08019124 	.word	0x08019124
 8003df0:	08019134 	.word	0x08019134
    }
    if (eErrorNone != (eError = shellAdd("xtime",
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <shellInit+0x3f8>)
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2302      	movs	r3, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <shellInit+0x3fc>)
 8003dfe:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <shellInit+0x400>)
 8003e00:	4918      	ldr	r1, [pc, #96]	; (8003e64 <shellInit+0x404>)
 8003e02:	4819      	ldr	r0, [pc, #100]	; (8003e68 <shellInit+0x408>)
 8003e04:	f000 f988 	bl	8004118 <shellAdd>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	71fb      	strb	r3, [r7, #7]
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <shellInit+0x3c0>
		"measure execution time", "<cmd>",
		"cmd=<any supported command>",
		2, xtime)))
    {
    	LOGERROR(eError);
 8003e12:	79f8      	ldrb	r0, [r7, #7]
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <shellInit+0x40c>)
 8003e16:	f240 321d 	movw	r2, #797	; 0x31d
 8003e1a:	4915      	ldr	r1, [pc, #84]	; (8003e70 <shellInit+0x410>)
 8003e1c:	f7fd fca6 	bl	800176c <logError>
    }
    if (eErrorNone != (eError = shellAdd("up",
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <shellInit+0x414>)
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	2301      	movs	r3, #1
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <shellInit+0x418>)
 8003e2a:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <shellInit+0x418>)
 8003e2c:	4913      	ldr	r1, [pc, #76]	; (8003e7c <shellInit+0x41c>)
 8003e2e:	4814      	ldr	r0, [pc, #80]	; (8003e80 <shellInit+0x420>)
 8003e30:	f000 f972 	bl	8004118 <shellAdd>
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d006      	beq.n	8003e4c <shellInit+0x3ec>
		"print time since boot", "", "",
		1, uptime)))
    {
    	LOGERROR(eError);
 8003e3e:	79f8      	ldrb	r0, [r7, #7]
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <shellInit+0x40c>)
 8003e42:	f240 3223 	movw	r2, #803	; 0x323
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <shellInit+0x410>)
 8003e48:	f7fd fc90 	bl	800176c <logError>
    }

	return eErrorNone;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	08003825 	.word	0x08003825
 8003e5c:	08018e84 	.word	0x08018e84
 8003e60:	08019138 	.word	0x08019138
 8003e64:	08019140 	.word	0x08019140
 8003e68:	08019158 	.word	0x08019158
 8003e6c:	080193d4 	.word	0x080193d4
 8003e70:	08018ddc 	.word	0x08018ddc
 8003e74:	08003a21 	.word	0x08003a21
 8003e78:	08018dc0 	.word	0x08018dc0
 8003e7c:	08019160 	.word	0x08019160
 8003e80:	08019178 	.word	0x08019178

08003e84 <shellService>:
// @brief Service shell activity.
//
// @return enumerated error code
//
teError shellService(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
	char        ch;
	static uint history = 0;
	teError     eError;

	// Check state.
	if (!gShellEnable)
 8003e8a:	4b97      	ldr	r3, [pc, #604]	; (80040e8 <shellService+0x264>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	f083 0301 	eor.w	r3, r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <shellService+0x18>
	{
		return eErrorNone;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e121      	b.n	80040e0 <shellService+0x25c>
	}

	// Check prompt.
	if (!grLine.prompt)
 8003e9c:	4b93      	ldr	r3, [pc, #588]	; (80040ec <shellService+0x268>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <shellService+0x34>
	{
		// Print prompt.
		bspPrintf("\r\n\n%s ", SHELL_PROMPT);
 8003eaa:	4991      	ldr	r1, [pc, #580]	; (80040f0 <shellService+0x26c>)
 8003eac:	4891      	ldr	r0, [pc, #580]	; (80040f4 <shellService+0x270>)
 8003eae:	f7fd fa37 	bl	8001320 <bspPrintf>

		// Set state.
		grLine.prompt = true;
 8003eb2:	4b8e      	ldr	r3, [pc, #568]	; (80040ec <shellService+0x268>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
	}

	// Try to read character.
	if (bspConsoleRead(&ch))
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd f8da 	bl	8001074 <bspConsoleRead>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 810b 	beq.w	80040de <shellService+0x25a>
	{
		// Process character.
		switch (ch)
 8003ec8:	79bb      	ldrb	r3, [r7, #6]
 8003eca:	3b08      	subs	r3, #8
 8003ecc:	2b13      	cmp	r3, #19
 8003ece:	f200 80e6 	bhi.w	800409e <shellService+0x21a>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <shellService+0x54>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	0800409f 	.word	0x0800409f
 8003ee0:	08003f55 	.word	0x08003f55
 8003ee4:	0800409f 	.word	0x0800409f
 8003ee8:	0800409f 	.word	0x0800409f
 8003eec:	08003f55 	.word	0x08003f55
 8003ef0:	0800409f 	.word	0x0800409f
 8003ef4:	0800409f 	.word	0x0800409f
 8003ef8:	0800409f 	.word	0x0800409f
 8003efc:	0800409f 	.word	0x0800409f
 8003f00:	0800409f 	.word	0x0800409f
 8003f04:	0800409f 	.word	0x0800409f
 8003f08:	0800409f 	.word	0x0800409f
 8003f0c:	0800409f 	.word	0x0800409f
 8003f10:	0800409f 	.word	0x0800409f
 8003f14:	0800409f 	.word	0x0800409f
 8003f18:	0800409f 	.word	0x0800409f
 8003f1c:	0800409f 	.word	0x0800409f
 8003f20:	0800409f 	.word	0x0800409f
 8003f24:	08003fb3 	.word	0x08003fb3
		{
			case '\b':

				// Check character count.
				if (grLine.position > 0)
 8003f28:	4b70      	ldr	r3, [pc, #448]	; (80040ec <shellService+0x268>)
 8003f2a:	885b      	ldrh	r3, [r3, #2]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80d3 	beq.w	80040d8 <shellService+0x254>
				{
					// Echo backspace sequence.
					bspPrintf("\b \b");
 8003f32:	4871      	ldr	r0, [pc, #452]	; (80040f8 <shellService+0x274>)
 8003f34:	f7fd f9f4 	bl	8001320 <bspPrintf>

					// Delete character.
					grLine.buffer[--grLine.position] = 0;
 8003f38:	4b6c      	ldr	r3, [pc, #432]	; (80040ec <shellService+0x268>)
 8003f3a:	885b      	ldrh	r3, [r3, #2]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <shellService+0x268>)
 8003f42:	805a      	strh	r2, [r3, #2]
 8003f44:	4b69      	ldr	r3, [pc, #420]	; (80040ec <shellService+0x268>)
 8003f46:	885b      	ldrh	r3, [r3, #2]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b68      	ldr	r3, [pc, #416]	; (80040ec <shellService+0x268>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	711a      	strb	r2, [r3, #4]
				}
				break;
 8003f52:	e0c1      	b.n	80040d8 <shellService+0x254>

			case '\r':
			case '\n':

				// Print newline.
		        putchar(ch);
 8003f54:	79bb      	ldrb	r3, [r7, #6]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f012 f8ce 	bl	80160f8 <putchar>

		        // Preserve command in circular history buffer.
		        memcpy(&grLineHistory[history], &grLine, sizeof(grLineHistory[history]));
 8003f5c:	4b67      	ldr	r3, [pc, #412]	; (80040fc <shellService+0x278>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	22a4      	movs	r2, #164	; 0xa4
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	4a66      	ldr	r2, [pc, #408]	; (8004100 <shellService+0x27c>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	22a4      	movs	r2, #164	; 0xa4
 8003f6c:	495f      	ldr	r1, [pc, #380]	; (80040ec <shellService+0x268>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f012 fc29 	bl	80167c6 <memcpy>
		        history = (history + 1)%DIM(grLineHistory);
 8003f74:	4b61      	ldr	r3, [pc, #388]	; (80040fc <shellService+0x278>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	4a5f      	ldr	r2, [pc, #380]	; (80040fc <shellService+0x278>)
 8003f80:	6013      	str	r3, [r2, #0]

		        // Process command.
		        if (eErrorNone != (eError = command(grLine.buffer)))
 8003f82:	4860      	ldr	r0, [pc, #384]	; (8004104 <shellService+0x280>)
 8003f84:	f7ff f842 	bl	800300c <command>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <shellService+0x120>
		        {
		            bspPrintf("\r\nmalformed or failed command (%s)",
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fd fa35 	bl	8001404 <errorString>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	485a      	ldr	r0, [pc, #360]	; (8004108 <shellService+0x284>)
 8003fa0:	f7fd f9be 	bl	8001320 <bspPrintf>
						errorString(eError));
		        }

				// Clear line buffer.
				memset(&grLine, 0, sizeof(grLine));
 8003fa4:	22a4      	movs	r2, #164	; 0xa4
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4850      	ldr	r0, [pc, #320]	; (80040ec <shellService+0x268>)
 8003faa:	f012 fafd 	bl	80165a8 <memset>

				return eErrorNone;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e096      	b.n	80040e0 <shellService+0x25c>

			case '\e':

		        // Read character.
		        bspConsoleRead(&ch);
 8003fb2:	1dbb      	adds	r3, r7, #6
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd f85d 	bl	8001074 <bspConsoleRead>

		        // Process character.
		        switch (ch)
 8003fba:	79bb      	ldrb	r3, [r7, #6]
 8003fbc:	2b5b      	cmp	r3, #91	; 0x5b
 8003fbe:	d16c      	bne.n	800409a <shellService+0x216>
		        {
		            case '[':

		                // Read character.
		                bspConsoleRead(&ch);
 8003fc0:	1dbb      	adds	r3, r7, #6
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd f856 	bl	8001074 <bspConsoleRead>

		                // Process character.
		                switch (ch)
 8003fc8:	79bb      	ldrb	r3, [r7, #6]
 8003fca:	3b41      	subs	r3, #65	; 0x41
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d85f      	bhi.n	8004090 <shellService+0x20c>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <shellService+0x154>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	0800403d 	.word	0x0800403d
 8003fe0:	08004091 	.word	0x08004091
 8003fe4:	08004091 	.word	0x08004091
		                {
		                    // Up arrow.
		                    case 'A':
		                        history = (history - 1 + DIM(grLineHistory))%DIM(grLineHistory);
 8003fe8:	4b44      	ldr	r3, [pc, #272]	; (80040fc <shellService+0x278>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3307      	adds	r3, #7
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	4a42      	ldr	r2, [pc, #264]	; (80040fc <shellService+0x278>)
 8003ff4:	6013      	str	r3, [r2, #0]
		                        if (strlen(grLineHistory[history].buffer) > 0)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <shellService+0x278>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	22a4      	movs	r2, #164	; 0xa4
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
 8004000:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <shellService+0x27c>)
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d043      	beq.n	8004094 <shellService+0x210>
		                        {
                                    memcpy(&grLine, &grLineHistory[history], sizeof(grLine));
 800400c:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <shellService+0x278>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	22a4      	movs	r2, #164	; 0xa4
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	4a3a      	ldr	r2, [pc, #232]	; (8004100 <shellService+0x27c>)
 8004018:	4413      	add	r3, r2
 800401a:	22a4      	movs	r2, #164	; 0xa4
 800401c:	4619      	mov	r1, r3
 800401e:	4833      	ldr	r0, [pc, #204]	; (80040ec <shellService+0x268>)
 8004020:	f012 fbd1 	bl	80167c6 <memcpy>
                                    grLine.prompt = true;
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <shellService+0x268>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
                                    bspPrintf(VT100_CLEAR_LINE);
 800402a:	4838      	ldr	r0, [pc, #224]	; (800410c <shellService+0x288>)
 800402c:	f7fd f978 	bl	8001320 <bspPrintf>
                                    bspPrintf("\r%s %s", SHELL_PROMPT, grLine.buffer);
 8004030:	4a34      	ldr	r2, [pc, #208]	; (8004104 <shellService+0x280>)
 8004032:	492f      	ldr	r1, [pc, #188]	; (80040f0 <shellService+0x26c>)
 8004034:	4836      	ldr	r0, [pc, #216]	; (8004110 <shellService+0x28c>)
 8004036:	f7fd f973 	bl	8001320 <bspPrintf>
		                        }
		                        break;
 800403a:	e02b      	b.n	8004094 <shellService+0x210>

                            // Down arrow.
		                    case 'B':
		                        history = (history + 1)%DIM(grLineHistory);
 800403c:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <shellService+0x278>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <shellService+0x278>)
 8004048:	6013      	str	r3, [r2, #0]
                                if (strlen(grLineHistory[history].buffer) > 0)
 800404a:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <shellService+0x278>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	22a4      	movs	r2, #164	; 0xa4
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <shellService+0x27c>)
 8004056:	4413      	add	r3, r2
 8004058:	3304      	adds	r3, #4
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01b      	beq.n	8004098 <shellService+0x214>
                                {
                                    memcpy(&grLine, &grLineHistory[history], sizeof(grLine));
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <shellService+0x278>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	22a4      	movs	r2, #164	; 0xa4
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a25      	ldr	r2, [pc, #148]	; (8004100 <shellService+0x27c>)
 800406c:	4413      	add	r3, r2
 800406e:	22a4      	movs	r2, #164	; 0xa4
 8004070:	4619      	mov	r1, r3
 8004072:	481e      	ldr	r0, [pc, #120]	; (80040ec <shellService+0x268>)
 8004074:	f012 fba7 	bl	80167c6 <memcpy>
                                    grLine.prompt = true;
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <shellService+0x268>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
                                    bspPrintf(VT100_CLEAR_LINE);
 800407e:	4823      	ldr	r0, [pc, #140]	; (800410c <shellService+0x288>)
 8004080:	f7fd f94e 	bl	8001320 <bspPrintf>
                                    bspPrintf("\r%s %s", SHELL_PROMPT, grLine.buffer);
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <shellService+0x280>)
 8004086:	491a      	ldr	r1, [pc, #104]	; (80040f0 <shellService+0x26c>)
 8004088:	4821      	ldr	r0, [pc, #132]	; (8004110 <shellService+0x28c>)
 800408a:	f7fd f949 	bl	8001320 <bspPrintf>
                                }
                                break;
 800408e:	e003      	b.n	8004098 <shellService+0x214>
                            // Left arrow.
                            case 'D':
                                break;

		                    default:
		                        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <shellService+0x216>
		                        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <shellService+0x216>
                                break;
 8004098:	bf00      	nop
		                }

		            default:
		                break;
 800409a:	bf00      	nop

		        }
			    break;
 800409c:	e01f      	b.n	80040de <shellService+0x25a>

			default:

				// Check for printable character and acceptable length
				if (isprint(ch) && (grLine.position < sizeof(grLine.buffer)))
 800409e:	79bb      	ldrb	r3, [r7, #6]
 80040a0:	3301      	adds	r3, #1
 80040a2:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <shellService+0x290>)
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <shellService+0x258>
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <shellService+0x268>)
 80040b2:	885b      	ldrh	r3, [r3, #2]
 80040b4:	2b9f      	cmp	r3, #159	; 0x9f
 80040b6:	d811      	bhi.n	80040dc <shellService+0x258>
				{
					// Echo character.
					putchar(ch);
 80040b8:	79bb      	ldrb	r3, [r7, #6]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f012 f81c 	bl	80160f8 <putchar>

					// Add character to buffer.
					grLine.buffer[grLine.position++] = (char)ch;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <shellService+0x268>)
 80040c2:	885b      	ldrh	r3, [r3, #2]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	b291      	uxth	r1, r2
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <shellService+0x268>)
 80040ca:	8051      	strh	r1, [r2, #2]
 80040cc:	4619      	mov	r1, r3
 80040ce:	79ba      	ldrb	r2, [r7, #6]
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <shellService+0x268>)
 80040d2:	440b      	add	r3, r1
 80040d4:	711a      	strb	r2, [r3, #4]
				}
				break;
 80040d6:	e001      	b.n	80040dc <shellService+0x258>
				break;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <shellService+0x25a>
				break;
 80040dc:	bf00      	nop
		}
	}

	return eErrorNone;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	2000017c 	.word	0x2000017c
 80040ec:	200027e4 	.word	0x200027e4
 80040f0:	0801917c 	.word	0x0801917c
 80040f4:	08019180 	.word	0x08019180
 80040f8:	08019188 	.word	0x08019188
 80040fc:	20004810 	.word	0x20004810
 8004100:	20002888 	.word	0x20002888
 8004104:	200027e8 	.word	0x200027e8
 8004108:	0801918c 	.word	0x0801918c
 800410c:	080191b0 	.word	0x080191b0
 8004110:	080191b8 	.word	0x080191b8
 8004114:	08019528 	.word	0x08019528

08004118 <shellAdd>:
// @return enumerated error code
//
teError shellAdd(const char *pName, const char *pDescription,
			     const char *pArguments, const char *pDetail,
				 uint8_t minArgs, tpCmd pCmd)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pName);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2d8      	uxtb	r0, r3
 8004132:	4b5c      	ldr	r3, [pc, #368]	; (80042a4 <shellAdd+0x18c>)
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <shellAdd+0x190>)
 8004138:	f240 32cb 	movw	r2, #971	; 0x3cb
 800413c:	495b      	ldr	r1, [pc, #364]	; (80042ac <shellAdd+0x194>)
 800413e:	f7fd fa77 	bl	8001630 <logAssert>
	ASSERT(NULL != pArguments);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2d8      	uxtb	r0, r3
 800414e:	4b58      	ldr	r3, [pc, #352]	; (80042b0 <shellAdd+0x198>)
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <shellAdd+0x190>)
 8004154:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8004158:	4954      	ldr	r1, [pc, #336]	; (80042ac <shellAdd+0x194>)
 800415a:	f7fd fa69 	bl	8001630 <logAssert>
	ASSERT(NULL != pDescription);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2d8      	uxtb	r0, r3
 800416a:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <shellAdd+0x19c>)
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4b4e      	ldr	r3, [pc, #312]	; (80042a8 <shellAdd+0x190>)
 8004170:	f240 32cd 	movw	r2, #973	; 0x3cd
 8004174:	494d      	ldr	r1, [pc, #308]	; (80042ac <shellAdd+0x194>)
 8004176:	f7fd fa5b 	bl	8001630 <logAssert>
	ASSERT(NULL != pDetail);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2d8      	uxtb	r0, r3
 8004186:	4b4c      	ldr	r3, [pc, #304]	; (80042b8 <shellAdd+0x1a0>)
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <shellAdd+0x190>)
 800418c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004190:	4946      	ldr	r1, [pc, #280]	; (80042ac <shellAdd+0x194>)
 8004192:	f7fd fa4d 	bl	8001630 <logAssert>
	ASSERT(minArgs > 0);
 8004196:	f897 3020 	ldrb.w	r3, [r7, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2d8      	uxtb	r0, r3
 80041a4:	4b45      	ldr	r3, [pc, #276]	; (80042bc <shellAdd+0x1a4>)
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <shellAdd+0x190>)
 80041aa:	f240 32cf 	movw	r2, #975	; 0x3cf
 80041ae:	493f      	ldr	r1, [pc, #252]	; (80042ac <shellAdd+0x194>)
 80041b0:	f7fd fa3e 	bl	8001630 <logAssert>
	ASSERT(NULL != pCmd);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2d8      	uxtb	r0, r3
 80041c0:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <shellAdd+0x1a8>)
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <shellAdd+0x190>)
 80041c6:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80041ca:	4938      	ldr	r1, [pc, #224]	; (80042ac <shellAdd+0x194>)
 80041cc:	f7fd fa30 	bl	8001630 <logAssert>

	// Iterate over command array.
	for (index = 0; index < DIM(grCmd); index++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e05e      	b.n	8004294 <shellAdd+0x17c>
	{
		// Check for non-allocated command.
		if (!grCmd[index].allocated)
 80041d6:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <shellAdd+0x1ac>)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	21a8      	movs	r1, #168	; 0xa8
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f083 0301 	eor.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04f      	beq.n	800428e <shellAdd+0x176>
		{
			// Assign command.
			strncpy(grCmd[index].name, pName, sizeof(grCmd[index].name)-1);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	22a8      	movs	r2, #168	; 0xa8
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <shellAdd+0x1ac>)
 80041f8:	4413      	add	r3, r2
 80041fa:	3301      	adds	r3, #1
 80041fc:	2207      	movs	r2, #7
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	4618      	mov	r0, r3
 8004202:	f012 f9ec 	bl	80165de <strncpy>
			strncpy(grCmd[index].arguments, pArguments, sizeof(grCmd[index].arguments)-1);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	22a8      	movs	r2, #168	; 0xa8
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	3308      	adds	r3, #8
 8004210:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <shellAdd+0x1ac>)
 8004212:	4413      	add	r3, r2
 8004214:	3301      	adds	r3, #1
 8004216:	2227      	movs	r2, #39	; 0x27
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f012 f9df 	bl	80165de <strncpy>
			strncpy(grCmd[index].description, pDescription, sizeof(grCmd[index].description)-1);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	22a8      	movs	r2, #168	; 0xa8
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	3330      	adds	r3, #48	; 0x30
 800422a:	4a26      	ldr	r2, [pc, #152]	; (80042c4 <shellAdd+0x1ac>)
 800422c:	4413      	add	r3, r2
 800422e:	3301      	adds	r3, #1
 8004230:	221b      	movs	r2, #27
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f012 f9d2 	bl	80165de <strncpy>
			strncpy(grCmd[index].detail, pDetail, sizeof(grCmd[index].detail)-1);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	22a8      	movs	r2, #168	; 0xa8
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	3348      	adds	r3, #72	; 0x48
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <shellAdd+0x1ac>)
 8004246:	4413      	add	r3, r2
 8004248:	3305      	adds	r3, #5
 800424a:	224f      	movs	r2, #79	; 0x4f
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f012 f9c5 	bl	80165de <strncpy>
			grCmd[index].minArgs = minArgs;
 8004254:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004258:	491a      	ldr	r1, [pc, #104]	; (80042c4 <shellAdd+0x1ac>)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	20a8      	movs	r0, #168	; 0xa8
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	440b      	add	r3, r1
 8004264:	33a0      	adds	r3, #160	; 0xa0
 8004266:	601a      	str	r2, [r3, #0]
			grCmd[index].pCmd    = pCmd;
 8004268:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <shellAdd+0x1ac>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	21a8      	movs	r1, #168	; 0xa8
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	33a4      	adds	r3, #164	; 0xa4
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	601a      	str	r2, [r3, #0]

			// Mark as allocated.
			grCmd[index].allocated = true;
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <shellAdd+0x1ac>)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	21a8      	movs	r1, #168	; 0xa8
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]

			return eErrorNone;
 800428a:	2300      	movs	r3, #0
 800428c:	e006      	b.n	800429c <shellAdd+0x184>
	for (index = 0; index < DIM(grCmd); index++)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3301      	adds	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b27      	cmp	r3, #39	; 0x27
 8004298:	d99d      	bls.n	80041d6 <shellAdd+0xbe>
		}
	}

	return eErrorOutOfResources;
 800429a:	2312      	movs	r3, #18
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	080191c0 	.word	0x080191c0
 80042a8:	080193e0 	.word	0x080193e0
 80042ac:	08018ddc 	.word	0x08018ddc
 80042b0:	080191d0 	.word	0x080191d0
 80042b4:	080191e4 	.word	0x080191e4
 80042b8:	080191fc 	.word	0x080191fc
 80042bc:	0801920c 	.word	0x0801920c
 80042c0:	08019218 	.word	0x08019218
 80042c4:	20002da8 	.word	0x20002da8

080042c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_MspInit+0x30>)
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <HAL_MspInit+0x30>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_MspInit+0x30>)
 80042e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80042ec:	f008 fcac 	bl	800cc48 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	46020c00 	.word	0x46020c00

080042fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b0e0      	sub	sp, #384	; 0x180
 8004300:	af00      	add	r7, sp, #0
 8004302:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004306:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800430a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800431c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004320:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004324:	4618      	mov	r0, r3
 8004326:	23e0      	movs	r3, #224	; 0xe0
 8004328:	461a      	mov	r2, r3
 800432a:	2100      	movs	r1, #0
 800432c:	f012 f93c 	bl	80165a8 <memset>
  if(hadc->Instance==ADC1)
 8004330:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004334:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a9d      	ldr	r2, [pc, #628]	; (80045b4 <HAL_ADC_MspInit+0x2b8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	f040 814a 	bne.w	80045d8 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8004344:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004348:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 800434c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8004358:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800435c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004360:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004364:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004368:	f107 0320 	add.w	r3, r7, #32
 800436c:	4618      	mov	r0, r3
 800436e:	f009 ff45 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8004378:	f7fe fa74 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800437c:	4b8e      	ldr	r3, [pc, #568]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004382:	4a8d      	ldr	r2, [pc, #564]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 8004384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004388:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800438c:	4b8a      	ldr	r3, [pc, #552]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004392:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004396:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800439a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80043a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80043a8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043aa:	4b83      	ldr	r3, [pc, #524]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b0:	4a81      	ldr	r2, [pc, #516]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043ba:	4b7f      	ldr	r3, [pc, #508]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 80043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c0:	f003 0204 	and.w	r2, r3, #4
 80043c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80043c8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80043d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043d6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d8:	4b77      	ldr	r3, [pc, #476]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 80043da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043de:	4a76      	ldr	r2, [pc, #472]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043e8:	4b73      	ldr	r3, [pc, #460]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 80043ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ee:	f003 0201 	and.w	r2, r3, #1
 80043f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80043f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004400:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004404:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004406:	4b6c      	ldr	r3, [pc, #432]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	4a6a      	ldr	r2, [pc, #424]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004416:	4b68      	ldr	r3, [pc, #416]	; (80045b8 <HAL_ADC_MspInit+0x2bc>)
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441c:	f003 0202 	and.w	r2, r3, #2
 8004420:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004424:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800442e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004432:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8004434:	230f      	movs	r3, #15
 8004436:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800443a:	2303      	movs	r3, #3
 800443c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004446:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800444a:	4619      	mov	r1, r3
 800444c:	485b      	ldr	r0, [pc, #364]	; (80045bc <HAL_ADC_MspInit+0x2c0>)
 800444e:	f006 f871 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8004452:	23ed      	movs	r3, #237	; 0xed
 8004454:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004458:	2303      	movs	r3, #3
 800445a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	2300      	movs	r3, #0
 8004460:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004464:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004468:	4619      	mov	r1, r3
 800446a:	4855      	ldr	r0, [pc, #340]	; (80045c0 <HAL_ADC_MspInit+0x2c4>)
 800446c:	f006 f862 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8004470:	2303      	movs	r3, #3
 8004472:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004476:	2303      	movs	r3, #3
 8004478:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004482:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004486:	4619      	mov	r1, r3
 8004488:	484e      	ldr	r0, [pc, #312]	; (80045c4 <HAL_ADC_MspInit+0x2c8>)
 800448a:	f006 f853 	bl	800a534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800448e:	2321      	movs	r3, #33	; 0x21
 8004490:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80044ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80044ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    NodeConfig.Init.DestBurstLength = 1;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80044ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80044f4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80044f8:	4933      	ldr	r1, [pc, #204]	; (80045c8 <HAL_ADC_MspInit+0x2cc>)
 80044fa:	4618      	mov	r0, r3
 80044fc:	f005 f92e 	bl	800975c <HAL_DMAEx_List_BuildNode>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 8004506:	f7fe f9ad 	bl	8002864 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <HAL_ADC_MspInit+0x2cc>)
 800450c:	2100      	movs	r1, #0
 800450e:	482f      	ldr	r0, [pc, #188]	; (80045cc <HAL_ADC_MspInit+0x2d0>)
 8004510:	f005 f950 	bl	80097b4 <HAL_DMAEx_List_InsertNode>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 800451a:	f7fe f9a3 	bl	8002864 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800451e:	482b      	ldr	r0, [pc, #172]	; (80045cc <HAL_ADC_MspInit+0x2d0>)
 8004520:	f005 fa11 	bl	8009946 <HAL_DMAEx_List_SetCircularMode>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 800452a:	f7fe f99b 	bl	8002864 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <HAL_ADC_MspInit+0x2d8>)
 8004532:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8004534:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004536:	2200      	movs	r2, #0
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800453a:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 800453c:	2200      	movs	r2, #0
 800453e:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8004546:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004548:	2200      	movs	r2, #0
 800454a:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 800454e:	2281      	movs	r2, #129	; 0x81
 8004550:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8004552:	481f      	ldr	r0, [pc, #124]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004554:	f004 ff42 	bl	80093dc <HAL_DMAEx_List_Init>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 800455e:	f7fe f981 	bl	8002864 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8004562:	491a      	ldr	r1, [pc, #104]	; (80045cc <HAL_ADC_MspInit+0x2d0>)
 8004564:	481a      	ldr	r0, [pc, #104]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004566:	f005 fa4f 	bl	8009a08 <HAL_DMAEx_List_LinkQ>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 8004570:	f7fe f978 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8004574:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004578:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004580:	671a      	str	r2, [r3, #112]	; 0x70
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004584:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004588:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8004590:	2110      	movs	r1, #16
 8004592:	480f      	ldr	r0, [pc, #60]	; (80045d0 <HAL_ADC_MspInit+0x2d4>)
 8004594:	f004 fb30 	bl	8008bf8 <HAL_DMA_ConfigChannelAttributes>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 800459e:	f7fe f961 	bl	8002864 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	2025      	movs	r0, #37	; 0x25
 80045a8:	f003 fea5 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80045ac:	2025      	movs	r0, #37	; 0x25
 80045ae:	f003 febc 	bl	800832a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80045b2:	e0bf      	b.n	8004734 <HAL_ADC_MspInit+0x438>
 80045b4:	42028000 	.word	0x42028000
 80045b8:	46020c00 	.word	0x46020c00
 80045bc:	42020800 	.word	0x42020800
 80045c0:	42020000 	.word	0x42020000
 80045c4:	42020400 	.word	0x42020400
 80045c8:	20001a3c 	.word	0x20001a3c
 80045cc:	20001a60 	.word	0x20001a60
 80045d0:	20001a78 	.word	0x20001a78
 80045d4:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 80045d8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80045dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a56      	ldr	r2, [pc, #344]	; (8004740 <HAL_ADC_MspInit+0x444>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f040 80a4 	bne.w	8004734 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80045ec:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80045f0:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 80045f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8004600:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004604:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004608:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800460c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004610:	f107 0320 	add.w	r3, r7, #32
 8004614:	4618      	mov	r0, r3
 8004616:	f009 fdf1 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 8004620:	f7fe f920 	bl	8002864 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8004624:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_ADC_MspInit+0x448>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462a:	4a46      	ldr	r2, [pc, #280]	; (8004744 <HAL_ADC_MspInit+0x448>)
 800462c:	f043 0320 	orr.w	r3, r3, #32
 8004630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_ADC_MspInit+0x448>)
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463a:	f003 0220 	and.w	r2, r3, #32
 800463e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004642:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800464c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004650:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004652:	4b3c      	ldr	r3, [pc, #240]	; (8004744 <HAL_ADC_MspInit+0x448>)
 8004654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004658:	4a3a      	ldr	r2, [pc, #232]	; (8004744 <HAL_ADC_MspInit+0x448>)
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004662:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_ADC_MspInit+0x448>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800466c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004670:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800467a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800467e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8004680:	2303      	movs	r3, #3
 8004682:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004686:	2303      	movs	r3, #3
 8004688:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004692:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004696:	4619      	mov	r1, r3
 8004698:	482b      	ldr	r0, [pc, #172]	; (8004748 <HAL_ADC_MspInit+0x44c>)
 800469a:	f005 ff4b 	bl	800a534 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046a0:	4a2b      	ldr	r2, [pc, #172]	; (8004750 <HAL_ADC_MspInit+0x454>)
 80046a2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80046bc:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046c2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046d0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046da:	2201      	movs	r2, #1
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80046f0:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80046f6:	4815      	ldr	r0, [pc, #84]	; (800474c <HAL_ADC_MspInit+0x450>)
 80046f8:	f003 fede 	bl	80084b8 <HAL_DMA_Init>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 8004702:	f7fe f8af 	bl	8002864 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8004706:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800470a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a0e      	ldr	r2, [pc, #56]	; (800474c <HAL_ADC_MspInit+0x450>)
 8004712:	671a      	str	r2, [r3, #112]	; 0x70
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <HAL_ADC_MspInit+0x450>)
 8004716:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800471a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8004722:	2110      	movs	r1, #16
 8004724:	4809      	ldr	r0, [pc, #36]	; (800474c <HAL_ADC_MspInit+0x450>)
 8004726:	f004 fa67 	bl	8008bf8 <HAL_DMA_ConfigChannelAttributes>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 8004730:	f7fe f898 	bl	8002864 <Error_Handler>
}
 8004734:	bf00      	nop
 8004736:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	46021000 	.word	0x46021000
 8004744:	46020c00 	.word	0x46020c00
 8004748:	42021800 	.word	0x42021800
 800474c:	20001af0 	.word	0x20001af0
 8004750:	40020150 	.word	0x40020150

08004754 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <HAL_DMA2D_MspInit+0x3c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10e      	bne.n	8004784 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_DMA2D_MspInit+0x40>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_DMA2D_MspInit+0x40>)
 800476e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004772:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_DMA2D_MspInit+0x40>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	4002b000 	.word	0x4002b000
 8004794:	46020c00 	.word	0x46020c00

08004798 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <HAL_XSPI_MspInit+0xc8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d14d      	bne.n	8004856 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80047ba:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80047d8:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004806:	4b17      	ldr	r3, [pc, #92]	; (8004864 <HAL_XSPI_MspInit+0xcc>)
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8004814:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8004818:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481a:	2302      	movs	r3, #2
 800481c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004822:	2303      	movs	r3, #3
 8004824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8004826:	2308      	movs	r3, #8
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	4619      	mov	r1, r3
 8004830:	480d      	ldr	r0, [pc, #52]	; (8004868 <HAL_XSPI_MspInit+0xd0>)
 8004832:	f005 fe7f 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004836:	230f      	movs	r3, #15
 8004838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004842:	2303      	movs	r3, #3
 8004844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8004846:	2308      	movs	r3, #8
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	4806      	ldr	r0, [pc, #24]	; (800486c <HAL_XSPI_MspInit+0xd4>)
 8004852:	f005 fe6f 	bl	800a534 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8004856:	bf00      	nop
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	420d3400 	.word	0x420d3400
 8004864:	46020c00 	.word	0x46020c00
 8004868:	42021c00 	.word	0x42021c00
 800486c:	42022000 	.word	0x42022000

08004870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b0c4      	sub	sp, #272	; 0x110
 8004874:	af00      	add	r7, sp, #0
 8004876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800487a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800487e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004890:	f107 0318 	add.w	r3, r7, #24
 8004894:	22e0      	movs	r2, #224	; 0xe0
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f011 fe85 	bl	80165a8 <memset>
  if(hi2c->Instance==I2C1)
 800489e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a63      	ldr	r2, [pc, #396]	; (8004a38 <HAL_I2C_MspInit+0x1c8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d14f      	bne.n	8004950 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80048b0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048c2:	f107 0318 	add.w	r3, r7, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f009 fc98 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80048d2:	f7fd ffc7 	bl	8002864 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048d6:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	4a57      	ldr	r2, [pc, #348]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 80048de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048e6:	4b55      	ldr	r3, [pc, #340]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80048f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80048f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048fc:	2312      	movs	r3, #18
 80048fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800490e:	2304      	movs	r3, #4
 8004910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004914:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004918:	4619      	mov	r1, r3
 800491a:	4849      	ldr	r0, [pc, #292]	; (8004a40 <HAL_I2C_MspInit+0x1d0>)
 800491c:	f005 fe0a 	bl	800a534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004920:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 8004922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004926:	4a45      	ldr	r2, [pc, #276]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 8004928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800492c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004930:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 8004932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004936:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800493a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800493e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004948:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800494c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800494e:	e06e      	b.n	8004a2e <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8004950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004954:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a39      	ldr	r2, [pc, #228]	; (8004a44 <HAL_I2C_MspInit+0x1d4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d165      	bne.n	8004a2e <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004962:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004974:	f107 0318 	add.w	r3, r7, #24
 8004978:	4618      	mov	r0, r3
 800497a:	f009 fc3f 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8004984:	f7fd ff6e 	bl	8002864 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 800498a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498e:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 8004990:	f043 0320 	orr.w	r3, r3, #32
 8004994:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004998:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 800499a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499e:	f003 0220 	and.w	r2, r3, #32
 80049a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049b4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049b6:	2303      	movs	r3, #3
 80049b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049bc:	2312      	movs	r3, #18
 80049be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80049ce:	2304      	movs	r3, #4
 80049d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80049d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80049d8:	4619      	mov	r1, r3
 80049da:	481b      	ldr	r0, [pc, #108]	; (8004a48 <HAL_I2C_MspInit+0x1d8>)
 80049dc:	f005 fdaa 	bl	800a534 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 80049e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 80049e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_I2C_MspInit+0x1cc>)
 80049f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a0c:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	2039      	movs	r0, #57	; 0x39
 8004a14:	f003 fc6f 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004a18:	2039      	movs	r0, #57	; 0x39
 8004a1a:	f003 fc86 	bl	800832a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	203a      	movs	r0, #58	; 0x3a
 8004a24:	f003 fc67 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004a28:	203a      	movs	r0, #58	; 0x3a
 8004a2a:	f003 fc7e 	bl	800832a <HAL_NVIC_EnableIRQ>
}
 8004a2e:	bf00      	nop
 8004a30:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40005400 	.word	0x40005400
 8004a3c:	46020c00 	.word	0x46020c00
 8004a40:	42021800 	.word	0x42021800
 8004a44:	40005800 	.word	0x40005800
 8004a48:	42021400 	.word	0x42021400

08004a4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b0c6      	sub	sp, #280	; 0x118
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004a56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a6c:	f107 0320 	add.w	r3, r7, #32
 8004a70:	22e0      	movs	r2, #224	; 0xe0
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f011 fd97 	bl	80165a8 <memset>
  if(hltdc->Instance==LTDC)
 8004a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004a7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a92      	ldr	r2, [pc, #584]	; (8004cd0 <HAL_LTDC_MspInit+0x284>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f040 811b 	bne.w	8004cc4 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0302 	mov.w	r3, #2
 8004a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8004aa8:	2332      	movs	r3, #50	; 0x32
 8004aaa:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8004aac:	2302      	movs	r3, #2
 8004aae:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8004ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ac6:	f107 0320 	add.w	r3, r7, #32
 8004aca:	4618      	mov	r0, r3
 8004acc:	f009 fb96 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8004ad6:	f7fd fec5 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ada:	4b7e      	ldr	r3, [pc, #504]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ae0:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ae6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004aea:	4b7a      	ldr	r3, [pc, #488]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004af8:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afe:	4a75      	ldr	r2, [pc, #468]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b08:	4b72      	ldr	r3, [pc, #456]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0e:	f003 0202 	and.w	r2, r3, #2
 8004b12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b24:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b26:	4b6b      	ldr	r3, [pc, #428]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2c:	4a69      	ldr	r2, [pc, #420]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b2e:	f043 0310 	orr.w	r3, r3, #16
 8004b32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	f003 0210 	and.w	r2, r3, #16
 8004b40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b52:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b54:	4b5f      	ldr	r3, [pc, #380]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5a:	4a5e      	ldr	r2, [pc, #376]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b64:	4b5b      	ldr	r3, [pc, #364]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6a:	f003 0208 	and.w	r2, r3, #8
 8004b6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b80:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b82:	4b54      	ldr	r3, [pc, #336]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b88:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b8a:	f043 0304 	orr.w	r3, r3, #4
 8004b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b92:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_LTDC_MspInit+0x288>)
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b98:	f003 0204 	and.w	r2, r3, #4
 8004b9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004ba0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004baa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bae:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bce:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4840      	ldr	r0, [pc, #256]	; (8004cd8 <HAL_LTDC_MspInit+0x28c>)
 8004bd6:	f005 fcad 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004bda:	f64f 7381 	movw	r3, #65409	; 0xff81
 8004bde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	2302      	movs	r3, #2
 8004be4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bfa:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4836      	ldr	r0, [pc, #216]	; (8004cdc <HAL_LTDC_MspInit+0x290>)
 8004c02:	f005 fc97 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004c06:	f64f 734b 	movw	r3, #65355	; 0xff4b
 8004c0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004c20:	2308      	movs	r3, #8
 8004c22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c26:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	482c      	ldr	r0, [pc, #176]	; (8004ce0 <HAL_LTDC_MspInit+0x294>)
 8004c2e:	f005 fc81 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c32:	23c0      	movs	r3, #192	; 0xc0
 8004c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8004c4a:	2307      	movs	r3, #7
 8004c4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c50:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004c54:	4619      	mov	r1, r3
 8004c56:	4823      	ldr	r0, [pc, #140]	; (8004ce4 <HAL_LTDC_MspInit+0x298>)
 8004c58:	f005 fc6c 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c70:	2300      	movs	r3, #0
 8004c72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004c76:	2308      	movs	r3, #8
 8004c78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004c80:	4619      	mov	r1, r3
 8004c82:	4818      	ldr	r0, [pc, #96]	; (8004ce4 <HAL_LTDC_MspInit+0x298>)
 8004c84:	f005 fc56 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8004ca2:	2307      	movs	r3, #7
 8004ca4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004cac:	4619      	mov	r1, r3
 8004cae:	480a      	ldr	r0, [pc, #40]	; (8004cd8 <HAL_LTDC_MspInit+0x28c>)
 8004cb0:	f005 fc40 	bl	800a534 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2087      	movs	r0, #135	; 0x87
 8004cba:	f003 fb1c 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004cbe:	2087      	movs	r0, #135	; 0x87
 8004cc0:	f003 fb33 	bl	800832a <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004cc4:	bf00      	nop
 8004cc6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40016800 	.word	0x40016800
 8004cd4:	46020c00 	.word	0x46020c00
 8004cd8:	42020400 	.word	0x42020400
 8004cdc:	42021000 	.word	0x42021000
 8004ce0:	42020c00 	.word	0x42020c00
 8004ce4:	42020800 	.word	0x42020800

08004ce8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b0bc      	sub	sp, #240	; 0xf0
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cf0:	f107 0310 	add.w	r3, r7, #16
 8004cf4:	22e0      	movs	r2, #224	; 0xe0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f011 fc55 	bl	80165a8 <memset>
  if(hrtc->Instance==RTC)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <HAL_RTC_MspInit+0x90>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d132      	bne.n	8004d6e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004d08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	4618      	mov	r0, r3
 8004d22:	f009 fa6b 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004d2c:	f7fd fd9a 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d36:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d46:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d4c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004d64:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_RTC_MspInit+0x94>)
 8004d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004d6e:	bf00      	nop
 8004d70:	37f0      	adds	r7, #240	; 0xf0
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	46007800 	.word	0x46007800
 8004d7c:	46020c00 	.word	0x46020c00

08004d80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_TIM_PWM_MspInit+0x40>)
 8004d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <HAL_TIM_PWM_MspInit+0x40>)
 8004d9a:	f043 0302 	orr.w	r3, r3, #2
 8004d9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <HAL_TIM_PWM_MspInit+0x40>)
 8004da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	46020c00 	.word	0x46020c00

08004dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dcc:	f107 030c 	add.w	r3, r7, #12
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a12      	ldr	r2, [pc, #72]	; (8004e2c <HAL_TIM_MspPostInit+0x68>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d11e      	bne.n	8004e24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_TIM_MspPostInit+0x6c>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	4a10      	ldr	r2, [pc, #64]	; (8004e30 <HAL_TIM_MspPostInit+0x6c>)
 8004dee:	f043 0310 	orr.w	r3, r3, #16
 8004df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004df6:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <HAL_TIM_MspPostInit+0x6c>)
 8004df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e14:	2302      	movs	r3, #2
 8004e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4805      	ldr	r0, [pc, #20]	; (8004e34 <HAL_TIM_MspPostInit+0x70>)
 8004e20:	f005 fb88 	bl	800a534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004e24:	bf00      	nop
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	46020c00 	.word	0x46020c00
 8004e34:	42021000 	.word	0x42021000

08004e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b0c2      	sub	sp, #264	; 0x108
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e46:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	22e0      	movs	r2, #224	; 0xe0
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f011 fba1 	bl	80165a8 <memset>
  if(huart->Instance==USART1)
 8004e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <HAL_UART_MspInit+0xf8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d155      	bne.n	8004f24 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e78:	f04f 0201 	mov.w	r2, #1
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004e84:	2300      	movs	r3, #0
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e88:	f107 0310 	add.w	r3, r7, #16
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f009 f9b5 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8004e98:	f7fd fce4 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_UART_MspInit+0xfc>)
 8004e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ea2:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <HAL_UART_MspInit+0xfc>)
 8004ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004eac:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <HAL_UART_MspInit+0xfc>)
 8004eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <HAL_UART_MspInit+0xfc>)
 8004ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <HAL_UART_MspInit+0xfc>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_UART_MspInit+0xfc>)
 8004ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed0:	f003 0201 	and.w	r2, r3, #1
 8004ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ee6:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ee8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004eec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f02:	2307      	movs	r3, #7
 8004f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	480a      	ldr	r0, [pc, #40]	; (8004f38 <HAL_UART_MspInit+0x100>)
 8004f10:	f005 fb10 	bl	800a534 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004f14:	2200      	movs	r2, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	203d      	movs	r0, #61	; 0x3d
 8004f1a:	f003 f9ec 	bl	80082f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f1e:	203d      	movs	r0, #61	; 0x3d
 8004f20:	f003 fa03 	bl	800832a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004f24:	bf00      	nop
 8004f26:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40013800 	.word	0x40013800
 8004f34:	46020c00 	.word	0x46020c00
 8004f38:	42020000 	.word	0x42020000

08004f3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b0be      	sub	sp, #248	; 0xf8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f44:	f107 0318 	add.w	r3, r7, #24
 8004f48:	22e0      	movs	r2, #224	; 0xe0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f011 fb2b 	bl	80165a8 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <HAL_PCD_MspInit+0x104>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d16d      	bne.n	8005038 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5c:	4b39      	ldr	r3, [pc, #228]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f62:	4a38      	ldr	r2, [pc, #224]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0308 	mov.w	r3, #8
 8004f82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8004f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f8e:	f107 0318 	add.w	r3, r7, #24
 8004f92:	4618      	mov	r0, r3
 8004f94:	f009 f932 	bl	800e1fc <HAL_RCCEx_PeriphCLKConfig>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8004f9e:	f7fd fc61 	bl	8002864 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8004fa2:	200c      	movs	r0, #12
 8004fa4:	f000 fed0 	bl	8005d48 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8004fa8:	4b26      	ldr	r3, [pc, #152]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fb8:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8004fc6:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe4:	4b17      	ldr	r3, [pc, #92]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11b      	bne.n	800502a <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8005004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8005010:	f007 fdfa 	bl	800cc08 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8005014:	f007 fe28 	bl	800cc68 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_PCD_MspInit+0x108>)
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_PCD_MspInit+0x108>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005028:	e003      	b.n	8005032 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800502a:	f007 fded 	bl	800cc08 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800502e:	f007 fe1b 	bl	800cc68 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8005032:	2001      	movs	r0, #1
 8005034:	f000 fe74 	bl	8005d20 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8005038:	bf00      	nop
 800503a:	37f8      	adds	r7, #248	; 0xf8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	42040000 	.word	0x42040000
 8005044:	46020c00 	.word	0x46020c00

08005048 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b0a4      	sub	sp, #144	; 0x90
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4aae      	ldr	r2, [pc, #696]	; (8005310 <HAL_SAI_MspInit+0x2c8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	f040 8086 	bne.w	8005168 <HAL_SAI_MspInit+0x120>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800505c:	4bad      	ldr	r3, [pc, #692]	; (8005314 <HAL_SAI_MspInit+0x2cc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10e      	bne.n	8005082 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005064:	4bac      	ldr	r3, [pc, #688]	; (8005318 <HAL_SAI_MspInit+0x2d0>)
 8005066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800506a:	4aab      	ldr	r2, [pc, #684]	; (8005318 <HAL_SAI_MspInit+0x2d0>)
 800506c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005070:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8005074:	4ba8      	ldr	r3, [pc, #672]	; (8005318 <HAL_SAI_MspInit+0x2d0>)
 8005076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8005082:	4ba4      	ldr	r3, [pc, #656]	; (8005314 <HAL_SAI_MspInit+0x2cc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4aa2      	ldr	r2, [pc, #648]	; (8005314 <HAL_SAI_MspInit+0x2cc>)
 800508a:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800508c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005090:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005092:	2302      	movs	r3, #2
 8005094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509e:	2300      	movs	r3, #0
 80050a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80050a4:	230d      	movs	r3, #13
 80050a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050ae:	4619      	mov	r1, r3
 80050b0:	489a      	ldr	r0, [pc, #616]	; (800531c <HAL_SAI_MspInit+0x2d4>)
 80050b2:	f005 fa3f 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050bc:	2302      	movs	r3, #2
 80050be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80050ce:	230d      	movs	r3, #13
 80050d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050d8:	4619      	mov	r1, r3
 80050da:	4891      	ldr	r0, [pc, #580]	; (8005320 <HAL_SAI_MspInit+0x2d8>)
 80050dc:	f005 fa2a 	bl	800a534 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80050e0:	4b90      	ldr	r3, [pc, #576]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 80050e2:	4a91      	ldr	r2, [pc, #580]	; (8005328 <HAL_SAI_MspInit+0x2e0>)
 80050e4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_A;
 80050e6:	4b8f      	ldr	r3, [pc, #572]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 80050e8:	2226      	movs	r2, #38	; 0x26
 80050ea:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80050ec:	4b8d      	ldr	r3, [pc, #564]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050f2:	4b8c      	ldr	r3, [pc, #560]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 80050f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 80050fa:	4b8a      	ldr	r3, [pc, #552]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 80050fc:	2208      	movs	r2, #8
 80050fe:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8005100:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005102:	2200      	movs	r2, #0
 8005104:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8005106:	4b87      	ldr	r3, [pc, #540]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005108:	2202      	movs	r2, #2
 800510a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800510c:	4b85      	ldr	r3, [pc, #532]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 800510e:	2200      	movs	r2, #0
 8005110:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8005112:	4b84      	ldr	r3, [pc, #528]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005114:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005118:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800511a:	4b82      	ldr	r3, [pc, #520]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 800511c:	2201      	movs	r2, #1
 800511e:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8005120:	4b80      	ldr	r3, [pc, #512]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005122:	2201      	movs	r2, #1
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005126:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005128:	2200      	movs	r2, #0
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800512c:	4b7d      	ldr	r3, [pc, #500]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8005132:	4b7c      	ldr	r3, [pc, #496]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005134:	2200      	movs	r2, #0
 8005136:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8005138:	487a      	ldr	r0, [pc, #488]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 800513a:	f003 f9bd 	bl	80084b8 <HAL_DMA_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8005144:	f7fd fb8e 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a76      	ldr	r2, [pc, #472]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 800514c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005150:	4a74      	ldr	r2, [pc, #464]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8005156:	2110      	movs	r1, #16
 8005158:	4872      	ldr	r0, [pc, #456]	; (8005324 <HAL_SAI_MspInit+0x2dc>)
 800515a:	f003 fd4d 	bl	8008bf8 <HAL_DMA_ConfigChannelAttributes>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 8005164:	f7fd fb7e 	bl	8002864 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a6f      	ldr	r2, [pc, #444]	; (800532c <HAL_SAI_MspInit+0x2e4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	f040 80ca 	bne.w	8005308 <HAL_SAI_MspInit+0x2c0>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8005174:	4b67      	ldr	r3, [pc, #412]	; (8005314 <HAL_SAI_MspInit+0x2cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10e      	bne.n	800519a <HAL_SAI_MspInit+0x152>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800517c:	4b66      	ldr	r3, [pc, #408]	; (8005318 <HAL_SAI_MspInit+0x2d0>)
 800517e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005182:	4a65      	ldr	r2, [pc, #404]	; (8005318 <HAL_SAI_MspInit+0x2d0>)
 8005184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005188:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800518c:	4b62      	ldr	r3, [pc, #392]	; (8005318 <HAL_SAI_MspInit+0x2d0>)
 800518e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800519a:	4b5e      	ldr	r3, [pc, #376]	; (8005314 <HAL_SAI_MspInit+0x2cc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	4a5c      	ldr	r2, [pc, #368]	; (8005314 <HAL_SAI_MspInit+0x2cc>)
 80051a2:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b6:	2303      	movs	r3, #3
 80051b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80051bc:	230d      	movs	r3, #13
 80051be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80051c6:	4619      	mov	r1, r3
 80051c8:	4859      	ldr	r0, [pc, #356]	; (8005330 <HAL_SAI_MspInit+0x2e8>)
 80051ca:	f005 f9b3 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80051ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e0:	2303      	movs	r3, #3
 80051e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80051e6:	230d      	movs	r3, #13
 80051e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80051f0:	4619      	mov	r1, r3
 80051f2:	4850      	ldr	r0, [pc, #320]	; (8005334 <HAL_SAI_MspInit+0x2ec>)
 80051f4:	f005 f99e 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80051f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8005210:	230d      	movs	r3, #13
 8005212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005216:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800521a:	4619      	mov	r1, r3
 800521c:	4845      	ldr	r0, [pc, #276]	; (8005334 <HAL_SAI_MspInit+0x2ec>)
 800521e:	f005 f989 	bl	800a534 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8005222:	2321      	movs	r3, #33	; 0x21
 8005224:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8005226:	2327      	movs	r3, #39	; 0x27
 8005228:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8005232:	2300      	movs	r3, #0
 8005234:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005236:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800523c:	2302      	movs	r3, #2
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8005240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8005246:	2301      	movs	r3, #1
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	63bb      	str	r3, [r7, #56]	; 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800524e:	2300      	movs	r3, #0
 8005250:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005252:	2300      	movs	r3, #0
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8005256:	2300      	movs	r3, #0
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800525a:	2300      	movs	r3, #0
 800525c:	657b      	str	r3, [r7, #84]	; 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800525e:	2300      	movs	r3, #0
 8005260:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005262:	2300      	movs	r3, #0
 8005264:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8005266:	f107 0310 	add.w	r3, r7, #16
 800526a:	4933      	ldr	r1, [pc, #204]	; (8005338 <HAL_SAI_MspInit+0x2f0>)
 800526c:	4618      	mov	r0, r3
 800526e:	f004 fa75 	bl	800975c <HAL_DMAEx_List_BuildNode>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_SAI_MspInit+0x234>
    {
      Error_Handler();
 8005278:	f7fd faf4 	bl	8002864 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800527c:	4a2e      	ldr	r2, [pc, #184]	; (8005338 <HAL_SAI_MspInit+0x2f0>)
 800527e:	2100      	movs	r1, #0
 8005280:	482e      	ldr	r0, [pc, #184]	; (800533c <HAL_SAI_MspInit+0x2f4>)
 8005282:	f004 fa97 	bl	80097b4 <HAL_DMAEx_List_InsertNode>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_SAI_MspInit+0x248>
    {
      Error_Handler();
 800528c:	f7fd faea 	bl	8002864 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8005290:	482a      	ldr	r0, [pc, #168]	; (800533c <HAL_SAI_MspInit+0x2f4>)
 8005292:	f004 fb58 	bl	8009946 <HAL_DMAEx_List_SetCircularMode>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 800529c:	f7fd fae2 	bl	8002864 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_SAI_MspInit+0x2fc>)
 80052a4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80052b4:	4b22      	ldr	r3, [pc, #136]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80052c0:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052c2:	2281      	movs	r2, #129	; 0x81
 80052c4:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80052c6:	481e      	ldr	r0, [pc, #120]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052c8:	f004 f888 	bl	80093dc <HAL_DMAEx_List_Init>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_SAI_MspInit+0x28e>
    {
      Error_Handler();
 80052d2:	f7fd fac7 	bl	8002864 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80052d6:	4919      	ldr	r1, [pc, #100]	; (800533c <HAL_SAI_MspInit+0x2f4>)
 80052d8:	4819      	ldr	r0, [pc, #100]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052da:	f004 fb95 	bl	8009a08 <HAL_DMAEx_List_LinkQ>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 80052e4:	f7fd fabe 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80052f6:	2110      	movs	r1, #16
 80052f8:	4811      	ldr	r0, [pc, #68]	; (8005340 <HAL_SAI_MspInit+0x2f8>)
 80052fa:	f003 fc7d 	bl	8008bf8 <HAL_DMA_ConfigChannelAttributes>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_SAI_MspInit+0x2c0>
    {
      Error_Handler();
 8005304:	f7fd faae 	bl	8002864 <Error_Handler>
    }

    }
}
 8005308:	bf00      	nop
 800530a:	3790      	adds	r7, #144	; 0x90
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40015804 	.word	0x40015804
 8005314:	20004814 	.word	0x20004814
 8005318:	46020c00 	.word	0x46020c00
 800531c:	42020400 	.word	0x42020400
 8005320:	42021800 	.word	0x42021800
 8005324:	20001ee0 	.word	0x20001ee0
 8005328:	400201d0 	.word	0x400201d0
 800532c:	40015824 	.word	0x40015824
 8005330:	42020000 	.word	0x42020000
 8005334:	42020800 	.word	0x42020800
 8005338:	20001f58 	.word	0x20001f58
 800533c:	20001f7c 	.word	0x20001f7c
 8005340:	20001f94 	.word	0x20001f94
 8005344:	400200d0 	.word	0x400200d0

08005348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800534c:	e7fe      	b.n	800534c <NMI_Handler+0x4>

0800534e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005352:	e7fe      	b.n	8005352 <HardFault_Handler+0x4>

08005354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005358:	e7fe      	b.n	8005358 <MemManage_Handler+0x4>

0800535a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800535e:	e7fe      	b.n	800535e <BusFault_Handler+0x4>

08005360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005364:	e7fe      	b.n	8005364 <UsageFault_Handler+0x4>

08005366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005394:	f000 fc80 	bl	8005c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}

0800539c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80053a0:	2002      	movs	r0, #2
 80053a2:	f005 fab7 	bl	800a914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}

080053aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80053ae:	2010      	movs	r0, #16
 80053b0:	f005 fab0 	bl	800a914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80053bc:	2020      	movs	r0, #32
 80053be:	f005 faa9 	bl	800a914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80053cc:	4802      	ldr	r0, [pc, #8]	; (80053d8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80053ce:	f003 faa4 	bl	800891a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20001a78 	.word	0x20001a78

080053dc <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80053e0:	4802      	ldr	r0, [pc, #8]	; (80053ec <GPDMA1_Channel1_IRQHandler+0x10>)
 80053e2:	f003 fa9a 	bl	800891a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20001f94 	.word	0x20001f94

080053f0 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <GPDMA1_Channel2_IRQHandler+0x10>)
 80053f6:	f003 fa90 	bl	800891a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20001af0 	.word	0x20001af0

08005404 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8005408:	4802      	ldr	r0, [pc, #8]	; (8005414 <GPDMA1_Channel3_IRQHandler+0x10>)
 800540a:	f003 fa86 	bl	800891a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20001ee0 	.word	0x20001ee0

08005418 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800541c:	4802      	ldr	r0, [pc, #8]	; (8005428 <ADC1_2_IRQHandler+0x10>)
 800541e:	f001 fc2b 	bl	8006c78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20001924 	.word	0x20001924

0800542c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005430:	4802      	ldr	r0, [pc, #8]	; (800543c <I2C2_EV_IRQHandler+0x10>)
 8005432:	f005 fd31 	bl	800ae98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20001c84 	.word	0x20001c84

08005440 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005444:	4802      	ldr	r0, [pc, #8]	; (8005450 <I2C2_ER_IRQHandler+0x10>)
 8005446:	f005 fd41 	bl	800aecc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20001c84 	.word	0x20001c84

08005454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005458:	4802      	ldr	r0, [pc, #8]	; (8005464 <USART1_IRQHandler+0x10>)
 800545a:	f00d fd81 	bl	8012f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20002058 	.word	0x20002058

08005468 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <LTDC_IRQHandler+0x10>)
 800546e:	f006 ff3b 	bl	800c2e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20001cd8 	.word	0x20001cd8

0800547c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return 1;
 8005480:	2301      	movs	r3, #1
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <_kill>:

int _kill(int pid, int sig)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005496:	f011 f95b 	bl	8016750 <__errno>
 800549a:	4603      	mov	r3, r0
 800549c:	2216      	movs	r2, #22
 800549e:	601a      	str	r2, [r3, #0]
  return -1;
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <_exit>:

void _exit (int status)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ffe7 	bl	800548c <_kill>
  while (1) {}    /* Make sure we hang here */
 80054be:	e7fe      	b.n	80054be <_exit+0x12>

080054c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e00a      	b.n	80054e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054d2:	f3af 8000 	nop.w
 80054d6:	4601      	mov	r1, r0
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	60ba      	str	r2, [r7, #8]
 80054de:	b2ca      	uxtb	r2, r1
 80054e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3301      	adds	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	dbf0      	blt.n	80054d2 <_read+0x12>
  }

  return len;
 80054f0:	687b      	ldr	r3, [r7, #4]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b086      	sub	sp, #24
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e009      	b.n	8005520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	60ba      	str	r2, [r7, #8]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fb fd05 	bl	8000f24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3301      	adds	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	dbf1      	blt.n	800550c <_write+0x12>
  }
  return len;
 8005528:	687b      	ldr	r3, [r7, #4]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_close>:

int _close(int file)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800555a:	605a      	str	r2, [r3, #4]
  return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_isatty>:

int _isatty(int file)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005572:	2301      	movs	r3, #1
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <_sbrk+0x5c>)
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <_sbrk+0x60>)
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055b0:	4b13      	ldr	r3, [pc, #76]	; (8005600 <_sbrk+0x64>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <_sbrk+0x64>)
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <_sbrk+0x68>)
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <_sbrk+0x64>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d207      	bcs.n	80055dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055cc:	f011 f8c0 	bl	8016750 <__errno>
 80055d0:	4603      	mov	r3, r0
 80055d2:	220c      	movs	r2, #12
 80055d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	e009      	b.n	80055f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055dc:	4b08      	ldr	r3, [pc, #32]	; (8005600 <_sbrk+0x64>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <_sbrk+0x64>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	4a05      	ldr	r2, [pc, #20]	; (8005600 <_sbrk+0x64>)
 80055ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	202f0000 	.word	0x202f0000
 80055fc:	00000400 	.word	0x00000400
 8005600:	20004818 	.word	0x20004818
 8005604:	20004a18 	.word	0x20004a18

08005608 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <SystemInit+0x68>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <SystemInit+0x68>)
 8005614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800561c:	4b15      	ldr	r3, [pc, #84]	; (8005674 <SystemInit+0x6c>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005622:	4b14      	ldr	r3, [pc, #80]	; (8005674 <SystemInit+0x6c>)
 8005624:	2200      	movs	r2, #0
 8005626:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <SystemInit+0x6c>)
 800562a:	2200      	movs	r2, #0
 800562c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <SystemInit+0x6c>)
 8005630:	2200      	movs	r2, #0
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <SystemInit+0x6c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0e      	ldr	r2, [pc, #56]	; (8005674 <SystemInit+0x6c>)
 800563a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800563e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005642:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <SystemInit+0x6c>)
 8005646:	2200      	movs	r2, #0
 8005648:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <SystemInit+0x6c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <SystemInit+0x6c>)
 8005650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005654:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <SystemInit+0x6c>)
 8005658:	2200      	movs	r2, #0
 800565a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <SystemInit+0x68>)
 800565e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005662:	609a      	str	r2, [r3, #8]
  #endif
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000ed00 	.word	0xe000ed00
 8005674:	46020c00 	.word	0x46020c00

08005678 <tickHandler>:
//
// @param pContext pointer to context data
// @return none
//
static void tickHandler(void *pContext)
{
 8005678:	b4b0      	push	{r4, r5, r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	int index;

	// Increment millisecond counter.
	grTimerMilliseconds++;
 8005680:	4b20      	ldr	r3, [pc, #128]	; (8005704 <tickHandler+0x8c>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	1c54      	adds	r4, r2, #1
 8005688:	f143 0500 	adc.w	r5, r3, #0
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <tickHandler+0x8c>)
 800568e:	e9c3 4500 	strd	r4, r5, [r3]

	// Iterate over callbacks.
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e02b      	b.n	80056f0 <tickHandler+0x78>
	{
		// Check entry.
		if (NULL != grTimerCallback[index].pCallback)
 8005698:	491b      	ldr	r1, [pc, #108]	; (8005708 <tickHandler+0x90>)
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	330c      	adds	r3, #12
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <tickHandler+0x72>
		{
			// Update remaining time.
			if (grTimerCallback[index].remaining > 0)
 80056ae:	4916      	ldr	r1, [pc, #88]	; (8005708 <tickHandler+0x90>)
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	3308      	adds	r3, #8
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d012      	beq.n	80056ea <tickHandler+0x72>
			{
				grTimerCallback[index].remaining--;
 80056c4:	4910      	ldr	r1, [pc, #64]	; (8005708 <tickHandler+0x90>)
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	3308      	adds	r3, #8
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1e59      	subs	r1, r3, #1
 80056d8:	480b      	ldr	r0, [pc, #44]	; (8005708 <tickHandler+0x90>)
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4403      	add	r3, r0
 80056e6:	3308      	adds	r3, #8
 80056e8:	6019      	str	r1, [r3, #0]
	for (index = 0; index < DIM(grTimerCallback); index++)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b07      	cmp	r3, #7
 80056f4:	d9d0      	bls.n	8005698 <tickHandler+0x20>
			}
		}
	}
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bcb0      	pop	{r4, r5, r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20004820 	.word	0x20004820
 8005708:	20004828 	.word	0x20004828

0800570c <timerInit>:
// @brief Timer initialization.
//
// @return enumerated error code.
//
teError timerInit(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
	// Initialize timer callbacks.
	memset((void*)grTimerCallback, 0, sizeof(grTimerCallback));
 8005710:	22a0      	movs	r2, #160	; 0xa0
 8005712:	2100      	movs	r1, #0
 8005714:	4804      	ldr	r0, [pc, #16]	; (8005728 <timerInit+0x1c>)
 8005716:	f010 ff47 	bl	80165a8 <memset>

	// Install timer tick callback.
	bspTickHandler(tickHandler, NULL);
 800571a:	2100      	movs	r1, #0
 800571c:	4803      	ldr	r0, [pc, #12]	; (800572c <timerInit+0x20>)
 800571e:	f7fb fe31 	bl	8001384 <bspTickHandler>

	return eErrorNone;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20004828 	.word	0x20004828
 800572c:	08005679 	.word	0x08005679

08005730 <timerMilliseconds>:
// @brief Retrieve the number of milliseconds since boot.
//
// @return milliseconds
//
uint64_t timerMilliseconds(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
	return grTimerMilliseconds;
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <timerMilliseconds+0x18>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20004820 	.word	0x20004820
 800574c:	00000000 	.word	0x00000000

08005750 <timerTimestamp>:
//
// @param prTimestamp pointer to timestamp data structure.
// @return void
//
void timerTimestamp(trTimerTimestamp *prTimestamp)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
	uint64_t uptime;

    // Validate argument[s].
    ASSERT(NULL != prTimestamp);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2d8      	uxtb	r0, r3
 8005764:	4b3a      	ldr	r3, [pc, #232]	; (8005850 <timerTimestamp+0x100>)
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4b3a      	ldr	r3, [pc, #232]	; (8005854 <timerTimestamp+0x104>)
 800576a:	2267      	movs	r2, #103	; 0x67
 800576c:	493a      	ldr	r1, [pc, #232]	; (8005858 <timerTimestamp+0x108>)
 800576e:	f7fb ff5f 	bl	8001630 <logAssert>

    // Get total uptime in milliseconds.
	uptime = timerMilliseconds();
 8005772:	f7ff ffdd 	bl	8005730 <timerMilliseconds>
 8005776:	e9c7 0102 	strd	r0, r1, [r7, #8]
	prTimestamp->seconds = uptime / 1000;
 800577a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800577e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	f7fb fa3d 	bl	8000c04 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	711a      	strb	r2, [r3, #4]

	// Calculate uptime units.
	prTimestamp->days         =  (uptime / 1000) / (60 * 60 * 24);
 8005794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005798:	a32b      	add	r3, pc, #172	; (adr r3, 8005848 <timerTimestamp+0xf8>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fb fa31 	bl	8000c04 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	b292      	uxth	r2, r2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	801a      	strh	r2, [r3, #0]
	prTimestamp->hours        = ((uptime / 1000) / (60 * 60)) % 24;
 80057ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <timerTimestamp+0x10c>)
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	f7fb fa25 	bl	8000c04 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4610      	mov	r0, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	f04f 0218 	mov.w	r2, #24
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	f7fb fa1b 	bl	8000c04 <__aeabi_uldivmod>
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	709a      	strb	r2, [r3, #2]
	prTimestamp->minutes      = ((uptime / 1000) / 60) % 60;
 80057d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057d8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	f7fb fa10 	bl	8000c04 <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	f04f 023c 	mov.w	r2, #60	; 0x3c
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	f7fb fa06 	bl	8000c04 <__aeabi_uldivmod>
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	70da      	strb	r2, [r3, #3]
	prTimestamp->seconds      =  (uptime / 1000) % 60;
 80057fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f7fb f9fb 	bl	8000c04 <__aeabi_uldivmod>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	f7fb f9f1 	bl	8000c04 <__aeabi_uldivmod>
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	711a      	strb	r2, [r3, #4]
	prTimestamp->milliseconds =   uptime % 1000;
 8005828:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800582c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	f7fb f9e6 	bl	8000c04 <__aeabi_uldivmod>
 8005838:	b292      	uxth	r2, r2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	80da      	strh	r2, [r3, #6]
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	05265c00 	.word	0x05265c00
 800584c:	00000000 	.word	0x00000000
 8005850:	0801923c 	.word	0x0801923c
 8005854:	08019444 	.word	0x08019444
 8005858:	08019228 	.word	0x08019228
 800585c:	0036ee80 	.word	0x0036ee80

08005860 <timerAdd>:
// @param periodic true = periodic, false = one-shot
// @return enumerated error code
//
teError timerAdd(uint32_t interval, tpTimerCallback pCallback,
					     void *pContext, bool periodic)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	70fb      	strb	r3, [r7, #3]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pCallback);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2d8      	uxtb	r0, r3
 800587a:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <timerAdd+0xd8>)
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <timerAdd+0xdc>)
 8005880:	2284      	movs	r2, #132	; 0x84
 8005882:	492f      	ldr	r1, [pc, #188]	; (8005940 <timerAdd+0xe0>)
 8005884:	f7fb fed4 	bl	8001630 <logAssert>

	// Find callback resource.
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e046      	b.n	800591c <timerAdd+0xbc>
	{
		// Check entry.
		if (NULL == grTimerCallback[index].pCallback)
 800588e:	492d      	ldr	r1, [pc, #180]	; (8005944 <timerAdd+0xe4>)
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	330c      	adds	r3, #12
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d138      	bne.n	8005916 <timerAdd+0xb6>
		{
			// Critical section begin.
			bspInterruptEnable(false);
 80058a4:	2000      	movs	r0, #0
 80058a6:	f7fb fd29 	bl	80012fc <bspInterruptEnable>

			// Initialize entry.
			grTimerCallback[index].periodic  = periodic;
 80058aa:	4926      	ldr	r1, [pc, #152]	; (8005944 <timerAdd+0xe4>)
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	701a      	strb	r2, [r3, #0]
			grTimerCallback[index].interval  = interval;
 80058bc:	4921      	ldr	r1, [pc, #132]	; (8005944 <timerAdd+0xe4>)
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	3304      	adds	r3, #4
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].remaining = interval;
 80058d0:	491c      	ldr	r1, [pc, #112]	; (8005944 <timerAdd+0xe4>)
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	3308      	adds	r3, #8
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].pCallback = pCallback;
 80058e4:	4917      	ldr	r1, [pc, #92]	; (8005944 <timerAdd+0xe4>)
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	330c      	adds	r3, #12
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].pContext  = pContext;
 80058f8:	4912      	ldr	r1, [pc, #72]	; (8005944 <timerAdd+0xe4>)
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	3310      	adds	r3, #16
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

			// Critical section end.
			bspInterruptEnable(true);
 800590c:	2001      	movs	r0, #1
 800590e:	f7fb fcf5 	bl	80012fc <bspInterruptEnable>

			return eErrorNone;
 8005912:	2300      	movs	r3, #0
 8005914:	e00c      	b.n	8005930 <timerAdd+0xd0>
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	3301      	adds	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b07      	cmp	r3, #7
 8005920:	d9b5      	bls.n	800588e <timerAdd+0x2e>
		}
	}
	LOGERROR(eErrorOutOfResources);
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <timerAdd+0xdc>)
 8005924:	229c      	movs	r2, #156	; 0x9c
 8005926:	4906      	ldr	r1, [pc, #24]	; (8005940 <timerAdd+0xe0>)
 8005928:	2012      	movs	r0, #18
 800592a:	f7fb ff1f 	bl	800176c <logError>

	return eErrorOutOfResources;
 800592e:	2312      	movs	r3, #18
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	08019250 	.word	0x08019250
 800593c:	08019454 	.word	0x08019454
 8005940:	08019228 	.word	0x08019228
 8005944:	20004828 	.word	0x20004828

08005948 <timerDelete>:
//
// @param pCallback pointer to callback function
// @return enumerated error code
//
teError timerDelete(tpTimerCallback pCallback)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	6078      	str	r0, [r7, #4]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pCallback);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bf14      	ite	ne
 8005956:	2301      	movne	r3, #1
 8005958:	2300      	moveq	r3, #0
 800595a:	b2d8      	uxtb	r0, r3
 800595c:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <timerDelete+0x8c>)
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <timerDelete+0x90>)
 8005962:	22ac      	movs	r2, #172	; 0xac
 8005964:	491d      	ldr	r1, [pc, #116]	; (80059dc <timerDelete+0x94>)
 8005966:	f7fb fe63 	bl	8001630 <logAssert>

	// Find callback resource.
	for (index = 0; index < DIM(grTimerCallback); index++)
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e022      	b.n	80059b6 <timerDelete+0x6e>
	{
		// Check entry.
		if (pCallback == grTimerCallback[index].pCallback)
 8005970:	491b      	ldr	r1, [pc, #108]	; (80059e0 <timerDelete+0x98>)
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	330c      	adds	r3, #12
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d113      	bne.n	80059b0 <timerDelete+0x68>
		{
			// Critical section begin.
			bspInterruptEnable(false);
 8005988:	2000      	movs	r0, #0
 800598a:	f7fb fcb7 	bl	80012fc <bspInterruptEnable>

			// Clear entry.
			memset((void*)&grTimerCallback[index], 0,
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a11      	ldr	r2, [pc, #68]	; (80059e0 <timerDelete+0x98>)
 800599a:	4413      	add	r3, r2
 800599c:	2214      	movs	r2, #20
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f010 fe01 	bl	80165a8 <memset>
                sizeof(grTimerCallback[index]));

			// Critical section end.
			bspInterruptEnable(true);
 80059a6:	2001      	movs	r0, #1
 80059a8:	f7fb fca8 	bl	80012fc <bspInterruptEnable>

			return eErrorNone;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e00c      	b.n	80059ca <timerDelete+0x82>
	for (index = 0; index < DIM(grTimerCallback); index++)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	d9d9      	bls.n	8005970 <timerDelete+0x28>
		}
	}
	LOGERROR(eErrorNotFound);
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <timerDelete+0x90>)
 80059be:	22c1      	movs	r2, #193	; 0xc1
 80059c0:	4906      	ldr	r1, [pc, #24]	; (80059dc <timerDelete+0x94>)
 80059c2:	2011      	movs	r0, #17
 80059c4:	f7fb fed2 	bl	800176c <logError>

	return eErrorNotFound;
 80059c8:	2311      	movs	r3, #17
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08019250 	.word	0x08019250
 80059d8:	08019460 	.word	0x08019460
 80059dc:	08019228 	.word	0x08019228
 80059e0:	20004828 	.word	0x20004828

080059e4 <timerService>:
// @brief Process pending timer callback[s].
//
// @return none
//
void timerService(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
	int index;

	// Iterate over timer callbacks.
	for (index = 0; index < DIM(grTimerCallback); index++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e056      	b.n	8005a9e <timerService+0xba>
	{
		// Check entry.
		if (NULL != grTimerCallback[index].pCallback)
 80059f0:	492f      	ldr	r1, [pc, #188]	; (8005ab0 <timerService+0xcc>)
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	330c      	adds	r3, #12
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d048      	beq.n	8005a98 <timerService+0xb4>
		{
			// Check remaining time.
			if (0 == grTimerCallback[index].remaining)
 8005a06:	492a      	ldr	r1, [pc, #168]	; (8005ab0 <timerService+0xcc>)
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	3308      	adds	r3, #8
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d13d      	bne.n	8005a98 <timerService+0xb4>
			{
				// Invoke callback.
				grTimerCallback[index].pCallback(grTimerCallback[index].pContext);
 8005a1c:	4924      	ldr	r1, [pc, #144]	; (8005ab0 <timerService+0xcc>)
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	4820      	ldr	r0, [pc, #128]	; (8005ab0 <timerService+0xcc>)
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4403      	add	r3, r0
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	4788      	blx	r1

				// Check periodicity.
				if (grTimerCallback[index].periodic)
 8005a44:	491a      	ldr	r1, [pc, #104]	; (8005ab0 <timerService+0xcc>)
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d012      	beq.n	8005a80 <timerService+0x9c>
				{
					// Reset interval.
					grTimerCallback[index].remaining = grTimerCallback[index].interval;
 8005a5a:	4915      	ldr	r1, [pc, #84]	; (8005ab0 <timerService+0xcc>)
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3304      	adds	r3, #4
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	4810      	ldr	r0, [pc, #64]	; (8005ab0 <timerService+0xcc>)
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4403      	add	r3, r0
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	6019      	str	r1, [r3, #0]
 8005a7e:	e00b      	b.n	8005a98 <timerService+0xb4>
				}
				else
				{
					// Delete entry.
					timerDelete(grTimerCallback[index].pCallback);
 8005a80:	490b      	ldr	r1, [pc, #44]	; (8005ab0 <timerService+0xcc>)
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	330c      	adds	r3, #12
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff ff58 	bl	8005948 <timerDelete>
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b07      	cmp	r3, #7
 8005aa2:	d9a5      	bls.n	80059f0 <timerService+0xc>
				}

			}
		}
	}
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20004828 	.word	0x20004828

08005ab4 <versionConfidence>:
//
// @param confidence value
// @return pointer to null terminated string
//
const char * versionConfidence(uint16_t confidence)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	4603      	mov	r3, r0
 8005abc:	80fb      	strh	r3, [r7, #6]
    static const char *pConfidence[] = { "omega", "alpha", "beta", "release" };

    // Validate argument[s].
    ASSERT(confidence < DIM(pConfidence));
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	bf94      	ite	ls
 8005ac4:	2301      	movls	r3, #1
 8005ac6:	2300      	movhi	r3, #0
 8005ac8:	b2d8      	uxtb	r0, r3
 8005aca:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <versionConfidence+0x34>)
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <versionConfidence+0x38>)
 8005ad0:	221f      	movs	r2, #31
 8005ad2:	4907      	ldr	r1, [pc, #28]	; (8005af0 <versionConfidence+0x3c>)
 8005ad4:	f7fb fdac 	bl	8001630 <logAssert>

    return pConfidence[confidence];
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <versionConfidence+0x40>)
 8005adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	0801927c 	.word	0x0801927c
 8005aec:	0801946c 	.word	0x0801946c
 8005af0:	08019264 	.word	0x08019264
 8005af4:	20000190 	.word	0x20000190

08005af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b30 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005afc:	f7ff fd84 	bl	8005608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005b00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005b02:	e003      	b.n	8005b0c <LoopCopyDataInit>

08005b04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005b06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005b08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005b0a:	3104      	adds	r1, #4

08005b0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005b0c:	480a      	ldr	r0, [pc, #40]	; (8005b38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005b10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005b12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005b14:	d3f6      	bcc.n	8005b04 <CopyDataInit>
	ldr	r2, =_sbss
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005b18:	e002      	b.n	8005b20 <LoopFillZerobss>

08005b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005b1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005b1c:	f842 3b04 	str.w	r3, [r2], #4

08005b20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <LoopForever+0x16>)
	cmp	r2, r3
 8005b22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005b24:	d3f9      	bcc.n	8005b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b26:	f010 fe19 	bl	801675c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b2a:	f7fb ff4f 	bl	80019cc <main>

08005b2e <LoopForever>:

LoopForever:
    b LoopForever
 8005b2e:	e7fe      	b.n	8005b2e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005b30:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8005b34:	08019908 	.word	0x08019908
	ldr	r0, =_sdata
 8005b38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005b3c:	20000370 	.word	0x20000370
	ldr	r2, =_sbss
 8005b40:	20000370 	.word	0x20000370
	ldr	r3, = _ebss
 8005b44:	20004a18 	.word	0x20004a18

08005b48 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b48:	e7fe      	b.n	8005b48 <ADC4_IRQHandler>
	...

08005b4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_Init+0x50>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a11      	ldr	r2, [pc, #68]	; (8005b9c <HAL_Init+0x50>)
 8005b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b5c:	2003      	movs	r0, #3
 8005b5e:	f002 fbbf 	bl	80082e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b62:	f008 f96d 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <HAL_Init+0x54>)
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	490c      	ldr	r1, [pc, #48]	; (8005ba4 <HAL_Init+0x58>)
 8005b72:	5ccb      	ldrb	r3, [r1, r3]
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
 8005b78:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <HAL_Init+0x5c>)
 8005b7a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005b7c:	2004      	movs	r0, #4
 8005b7e:	f002 fc09 	bl	8008394 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b82:	200f      	movs	r0, #15
 8005b84:	f000 f812 	bl	8005bac <HAL_InitTick>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e002      	b.n	8005b98 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b92:	f7fe fb99 	bl	80042c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40022000 	.word	0x40022000
 8005ba0:	46020c00 	.word	0x46020c00
 8005ba4:	080193ec 	.word	0x080193ec
 8005ba8:	2000018c 	.word	0x2000018c

08005bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005bb8:	4b33      	ldr	r3, [pc, #204]	; (8005c88 <HAL_InitTick+0xdc>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e05c      	b.n	8005c7e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8005bc4:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <HAL_InitTick+0xe0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d10c      	bne.n	8005bea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005bd0:	4b2f      	ldr	r3, [pc, #188]	; (8005c90 <HAL_InitTick+0xe4>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b2c      	ldr	r3, [pc, #176]	; (8005c88 <HAL_InitTick+0xdc>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e037      	b.n	8005c5a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8005bea:	f002 fc2b 	bl	8008444 <HAL_SYSTICK_GetCLKSourceConfig>
 8005bee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d023      	beq.n	8005c3e <HAL_InitTick+0x92>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d82d      	bhi.n	8005c58 <HAL_InitTick+0xac>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_InitTick+0x5e>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d00d      	beq.n	8005c24 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005c08:	e026      	b.n	8005c58 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8005c0a:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <HAL_InitTick+0xe4>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <HAL_InitTick+0xdc>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005c18:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	60fb      	str	r3, [r7, #12]
        break;
 8005c22:	e01a      	b.n	8005c5a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <HAL_InitTick+0xdc>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c32:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	60fb      	str	r3, [r7, #12]
        break;
 8005c3c:	e00d      	b.n	8005c5a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <HAL_InitTick+0xdc>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	60fb      	str	r3, [r7, #12]
        break;
 8005c56:	e000      	b.n	8005c5a <HAL_InitTick+0xae>
        break;
 8005c58:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f002 fb78 	bl	8008350 <HAL_SYSTICK_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e009      	b.n	8005c7e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	f002 fb40 	bl	80082f6 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005c76:	4a07      	ldr	r2, [pc, #28]	; (8005c94 <HAL_InitTick+0xe8>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	200001a4 	.word	0x200001a4
 8005c8c:	e000e010 	.word	0xe000e010
 8005c90:	2000018c 	.word	0x2000018c
 8005c94:	200001a0 	.word	0x200001a0

08005c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <HAL_IncTick+0x20>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_IncTick+0x24>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	4a04      	ldr	r2, [pc, #16]	; (8005cbc <HAL_IncTick+0x24>)
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	200001a4 	.word	0x200001a4
 8005cbc:	200048c8 	.word	0x200048c8

08005cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <HAL_GetTick+0x14>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	200048c8 	.word	0x200048c8

08005cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ce0:	f7ff ffee 	bl	8005cc0 <HAL_GetTick>
 8005ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d005      	beq.n	8005cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <HAL_Delay+0x44>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cfe:	bf00      	nop
 8005d00:	f7ff ffde 	bl	8005cc0 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d8f7      	bhi.n	8005d00 <HAL_Delay+0x28>
  {
  }
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	200001a4 	.word	0x200001a4

08005d20 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2c:	f023 0201 	bic.w	r2, r3, #1
 8005d30:	4904      	ldr	r1, [pc, #16]	; (8005d44 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	674b      	str	r3, [r1, #116]	; 0x74
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	46000400 	.word	0x46000400

08005d48 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8005d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d54:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 8005d58:	4904      	ldr	r1, [pc, #16]	; (8005d6c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	674b      	str	r3, [r1, #116]	; 0x74
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	46000400 	.word	0x46000400

08005d70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <LL_ADC_SetResolution+0x3c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d104      	bne.n	8005df8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f023 020c 	bic.w	r2, r3, #12
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60da      	str	r2, [r3, #12]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	46021000 	.word	0x46021000

08005e18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3360      	adds	r3, #96	; 0x60
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	430b      	orrs	r3, r1
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3360      	adds	r3, #96	; 0x60
 8005e68:	461a      	mov	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b087      	sub	sp, #28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3360      	adds	r3, #96	; 0x60
 8005e96:	461a      	mov	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	601a      	str	r2, [r3, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3360      	adds	r3, #96	; 0x60
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	601a      	str	r2, [r3, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b087      	sub	sp, #28
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3360      	adds	r3, #96	; 0x60
 8005f02:	461a      	mov	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	2a00      	cmp	r2, #0
 8005f52:	d002      	beq.n	8005f5a <LL_ADC_SetGainCompensation+0x32>
 8005f54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f58:	e000      	b.n	8005f5c <LL_ADC_SetGainCompensation+0x34>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2107      	movs	r1, #7
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	401a      	ands	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b089      	sub	sp, #36	; 0x24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	; (8006090 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d020      	beq.n	800602a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3330      	adds	r3, #48	; 0x30
 8005fec:	461a      	mov	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	f003 030c 	and.w	r3, r3, #12
 8005ff8:	4413      	add	r3, r2
 8005ffa:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	211f      	movs	r1, #31
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	401a      	ands	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0e9b      	lsrs	r3, r3, #26
 8006014:	f003 011f 	and.w	r1, r3, #31
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	431a      	orrs	r2, r3
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8006028:	e02b      	b.n	8006082 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	210f      	movs	r1, #15
 8006036:	fa01 f303 	lsl.w	r3, r1, r3
 800603a:	43db      	mvns	r3, r3
 800603c:	401a      	ands	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0e9b      	lsrs	r3, r3, #26
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	e010      	b.n	8006074 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	fa93 f3a3 	rbit	r3, r3
 800605c:	613b      	str	r3, [r7, #16]
  return result;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8006068:	2320      	movs	r3, #32
 800606a:	e003      	b.n	8006074 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	f001 011f 	and.w	r1, r1, #31
 800607a:	408b      	lsls	r3, r1
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006082:	bf00      	nop
 8006084:	3724      	adds	r7, #36	; 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	46021000 	.word	0x46021000

08006094 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	0e9b      	lsrs	r3, r3, #26
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2201      	movs	r2, #1
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	e015      	b.n	80060e4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	fa93 f3a3 	rbit	r3, r3
 80060c2:	60fb      	str	r3, [r7, #12]
  return result;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80060ce:	2320      	movs	r3, #32
 80060d0:	e003      	b.n	80060da <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	fab3 f383 	clz	r3, r3
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2201      	movs	r2, #1
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	0e9b      	lsrs	r3, r3, #26
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	401a      	ands	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0303 	and.w	r3, r3, #3
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006152:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800616c:	b480      	push	{r7}
 800616e:	b08b      	sub	sp, #44	; 0x2c
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d042      	beq.n	8006206 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <LL_ADC_SetChannelSamplingTime+0x28>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	0e9b      	lsrs	r3, r3, #26
 800618e:	f003 021f 	and.w	r2, r3, #31
 8006192:	e011      	b.n	80061b8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	fa93 f3a3 	rbit	r3, r3
 800619e:	617b      	str	r3, [r7, #20]
  return result;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80061aa:	2320      	movs	r3, #32
 80061ac:	e003      	b.n	80061b6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	fab3 f383 	clz	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	0e5b      	lsrs	r3, r3, #25
 80061bc:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80061c0:	460b      	mov	r3, r1
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	1ad2      	subs	r2, r2, r3
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3314      	adds	r3, #20
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	0e5b      	lsrs	r3, r3, #25
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	4413      	add	r3, r2
 80061e4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	2107      	movs	r1, #7
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	401a      	ands	r2, r3
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	fa01 f303 	lsl.w	r3, r1, r3
 80061fe:	431a      	orrs	r2, r3
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8006204:	e00e      	b.n	8006224 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	43db      	mvns	r3, r3
 8006210:	401a      	ands	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	0219      	lsls	r1, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	400b      	ands	r3, r1
 800621a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800621e:	431a      	orrs	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	615a      	str	r2, [r3, #20]
}
 8006224:	bf00      	nop
 8006226:	372c      	adds	r7, #44	; 0x2c
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	46021000 	.word	0x46021000

08006234 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f003 0318 	and.w	r3, r3, #24
 8006256:	4908      	ldr	r1, [pc, #32]	; (8006278 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006258:	40d9      	lsrs	r1, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	400b      	ands	r3, r1
 800625e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006262:	431a      	orrs	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	000fffff 	.word	0x000fffff

0800627c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 031f 	and.w	r3, r3, #31
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6093      	str	r3, [r2, #8]
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ec:	d101      	bne.n	80062f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	609a      	str	r2, [r3, #8]
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800633c:	d101      	bne.n	8006342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <LL_ADC_IsEnabled+0x18>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <LL_ADC_IsEnabled+0x1a>
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063b2:	f043 0204 	orr.w	r2, r3, #4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	609a      	str	r2, [r3, #8]
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d101      	bne.n	80063de <LL_ADC_REG_IsConversionOngoing+0x18>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d101      	bne.n	8006404 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b08b      	sub	sp, #44	; 0x2c
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8006422:	2300      	movs	r3, #0
 8006424:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e2ce      	b.n	80069d2 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a95      	ldr	r2, [pc, #596]	; (8006698 <HAL_ADC_Init+0x284>)
 8006442:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006448:	2b00      	cmp	r3, #0
 800644a:	d109      	bne.n	8006460 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7fd ff55 	bl	80042fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff37 	bl	80062d8 <LL_ADC_IsDeepPowerDownEnabled>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff1d 	bl	80062b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff52 	bl	8006328 <LL_ADC_IsInternalRegulatorEnabled>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d115      	bne.n	80064b6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ff36 	bl	8006300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006494:	4b81      	ldr	r3, [pc, #516]	; (800669c <HAL_ADC_Init+0x288>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	099b      	lsrs	r3, r3, #6
 800649a:	4a81      	ldr	r2, [pc, #516]	; (80066a0 <HAL_ADC_Init+0x28c>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	099b      	lsrs	r3, r3, #6
 80064a2:	3301      	adds	r3, #1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80064a8:	e002      	b.n	80064b0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f9      	bne.n	80064aa <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ff34 	bl	8006328 <LL_ADC_IsInternalRegulatorEnabled>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10e      	bne.n	80064e4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ca:	f043 0210 	orr.w	r2, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff6c 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 80064ee:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 825f 	bne.w	80069bc <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 825b 	bne.w	80069bc <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800650e:	f043 0202 	orr.w	r2, r3, #2
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ff2c 	bl	8006378 <LL_ADC_IsEnabled>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d14f      	bne.n	80065c6 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5b      	ldr	r2, [pc, #364]	; (8006698 <HAL_ADC_Init+0x284>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d037      	beq.n	80065a0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5b      	ldr	r2, [pc, #364]	; (80066a4 <HAL_ADC_Init+0x290>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_ADC_Init+0x130>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a5a      	ldr	r2, [pc, #360]	; (80066a8 <HAL_ADC_Init+0x294>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d10e      	bne.n	8006562 <HAL_ADC_Init+0x14e>
 8006544:	4857      	ldr	r0, [pc, #348]	; (80066a4 <HAL_ADC_Init+0x290>)
 8006546:	f7ff ff17 	bl	8006378 <LL_ADC_IsEnabled>
 800654a:	4604      	mov	r4, r0
 800654c:	4856      	ldr	r0, [pc, #344]	; (80066a8 <HAL_ADC_Init+0x294>)
 800654e:	f7ff ff13 	bl	8006378 <LL_ADC_IsEnabled>
 8006552:	4603      	mov	r3, r0
 8006554:	4323      	orrs	r3, r4
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf0c      	ite	eq
 800655a:	2301      	moveq	r3, #1
 800655c:	2300      	movne	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	e008      	b.n	8006574 <HAL_ADC_Init+0x160>
 8006562:	484d      	ldr	r0, [pc, #308]	; (8006698 <HAL_ADC_Init+0x284>)
 8006564:	f7ff ff08 	bl	8006378 <LL_ADC_IsEnabled>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d026      	beq.n	80065c6 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a49      	ldr	r2, [pc, #292]	; (80066a4 <HAL_ADC_Init+0x290>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_ADC_Init+0x178>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a48      	ldr	r2, [pc, #288]	; (80066a8 <HAL_ADC_Init+0x294>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d101      	bne.n	8006590 <HAL_ADC_Init+0x17c>
 800658c:	4a47      	ldr	r2, [pc, #284]	; (80066ac <HAL_ADC_Init+0x298>)
 800658e:	e000      	b.n	8006592 <HAL_ADC_Init+0x17e>
 8006590:	4a47      	ldr	r2, [pc, #284]	; (80066b0 <HAL_ADC_Init+0x29c>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7ff fbe9 	bl	8005d70 <LL_ADC_SetCommonClock>
 800659e:	e012      	b.n	80065c6 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4619      	mov	r1, r3
 80065aa:	4610      	mov	r0, r2
 80065ac:	f7ff fc14 	bl	8005dd8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80065b0:	4b3f      	ldr	r3, [pc, #252]	; (80066b0 <HAL_ADC_Init+0x29c>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80065c0:	493b      	ldr	r1, [pc, #236]	; (80066b0 <HAL_ADC_Init+0x29c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a33      	ldr	r2, [pc, #204]	; (8006698 <HAL_ADC_Init+0x284>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d010      	beq.n	80065f2 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065d6:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80065dc:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80065e2:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065ea:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80065ec:	4313      	orrs	r3, r2
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	e035      	b.n	800665e <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7f1b      	ldrb	r3, [r3, #28]
 80065f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065fe:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006600:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006606:	2a00      	cmp	r2, #0
 8006608:	d002      	beq.n	8006610 <HAL_ADC_Init+0x1fc>
 800660a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800660e:	e000      	b.n	8006612 <HAL_ADC_Init+0x1fe>
 8006610:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006612:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006618:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	da04      	bge.n	800662c <HAL_ADC_Init+0x218>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800662a:	e001      	b.n	8006630 <HAL_ADC_Init+0x21c>
 800662c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8006630:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	491b      	ldr	r1, [pc, #108]	; (80066a4 <HAL_ADC_Init+0x290>)
 8006638:	428b      	cmp	r3, r1
 800663a:	d004      	beq.n	8006646 <HAL_ADC_Init+0x232>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4919      	ldr	r1, [pc, #100]	; (80066a8 <HAL_ADC_Init+0x294>)
 8006642:	428b      	cmp	r3, r1
 8006644:	d103      	bne.n	800664e <HAL_ADC_Init+0x23a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800664c:	e003      	b.n	8006656 <HAL_ADC_Init+0x242>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006654:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8006656:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	4313      	orrs	r3, r2
 800665c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d131      	bne.n	80066cc <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <HAL_ADC_Init+0x284>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	3b01      	subs	r3, #1
 8006678:	045b      	lsls	r3, r3, #17
 800667a:	6a3a      	ldr	r2, [r7, #32]
 800667c:	4313      	orrs	r3, r2
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	e024      	b.n	80066cc <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d113      	bne.n	80066b4 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006692:	623b      	str	r3, [r7, #32]
 8006694:	e01a      	b.n	80066cc <HAL_ADC_Init+0x2b8>
 8006696:	bf00      	nop
 8006698:	46021000 	.word	0x46021000
 800669c:	2000018c 	.word	0x2000018c
 80066a0:	053e2d63 	.word	0x053e2d63
 80066a4:	42028000 	.word	0x42028000
 80066a8:	42028100 	.word	0x42028100
 80066ac:	42028300 	.word	0x42028300
 80066b0:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c4:	f043 0201 	orr.w	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_ADC_Init+0x494>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d018      	beq.n	8006708 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	4313      	orrs	r3, r2
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	4b6c      	ldr	r3, [pc, #432]	; (80068ac <HAL_ADC_Init+0x498>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	6a39      	ldr	r1, [r7, #32]
 8006702:	430b      	orrs	r3, r1
 8006704:	60d3      	str	r3, [r2, #12]
 8006706:	e031      	b.n	800676c <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	4313      	orrs	r3, r2
 800671e:	6a3a      	ldr	r2, [r7, #32]
 8006720:	4313      	orrs	r3, r2
 8006722:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	4b61      	ldr	r3, [pc, #388]	; (80068b0 <HAL_ADC_Init+0x49c>)
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	6a39      	ldr	r1, [r7, #32]
 8006734:	430b      	orrs	r3, r1
 8006736:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a4d      	ldr	r2, [pc, #308]	; (80068a8 <HAL_ADC_Init+0x494>)
 8006772:	4293      	cmp	r3, r2
 8006774:	f000 80a4 	beq.w	80068c0 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fe22 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 8006782:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fe2f 	bl	80063ec <LL_ADC_INJ_IsConversionOngoing>
 800678e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d166      	bne.n	8006864 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d163      	bne.n	8006864 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7f1b      	ldrb	r3, [r3, #28]
 80067a0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4943      	ldr	r1, [pc, #268]	; (80068b4 <HAL_ADC_Init+0x4a0>)
 80067a8:	428b      	cmp	r3, r1
 80067aa:	d004      	beq.n	80067b6 <HAL_ADC_Init+0x3a2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4941      	ldr	r1, [pc, #260]	; (80068b8 <HAL_ADC_Init+0x4a4>)
 80067b2:	428b      	cmp	r3, r1
 80067b4:	d102      	bne.n	80067bc <HAL_ADC_Init+0x3a8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ba:	e002      	b.n	80067c2 <HAL_ADC_Init+0x3ae>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80067c2:	4313      	orrs	r3, r2
 80067c4:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	6a39      	ldr	r1, [r7, #32]
 80067da:	430b      	orrs	r3, r1
 80067dc:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7ff fb99 	bl	8005f28 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d11e      	bne.n	800683e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006804:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	4b2b      	ldr	r3, [pc, #172]	; (80068bc <HAL_ADC_Init+0x4a8>)
 800680e:	4013      	ands	r3, r2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006814:	0411      	lsls	r1, r2, #16
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006820:	4311      	orrs	r1, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006826:	4311      	orrs	r1, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800682c:	0892      	lsrs	r2, r2, #2
 800682e:	430a      	orrs	r2, r1
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	611a      	str	r2, [r3, #16]
 800683c:	e007      	b.n	800684e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d10c      	bne.n	8006886 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	f023 010f 	bic.w	r1, r3, #15
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	1e5a      	subs	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
 8006884:	e007      	b.n	8006896 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 020f 	bic.w	r2, r2, #15
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	f043 0201 	orr.w	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80068a6:	e092      	b.n	80069ce <HAL_ADC_Init+0x5ba>
 80068a8:	46021000 	.word	0x46021000
 80068ac:	fff0c013 	.word	0xfff0c013
 80068b0:	ffde800d 	.word	0xffde800d
 80068b4:	42028000 	.word	0x42028000
 80068b8:	42028100 	.word	0x42028100
 80068bc:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d111      	bne.n	80068ee <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80068d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80068d8:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80068de:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <HAL_ADC_Init+0x5c8>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	69f9      	ldr	r1, [r7, #28]
 80068fe:	430b      	orrs	r3, r1
 8006900:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	461a      	mov	r2, r3
 800690c:	2100      	movs	r1, #0
 800690e:	f7ff fb2e 	bl	8005f6e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	461a      	mov	r2, r3
 800691c:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8006920:	f7ff fb25 	bl	8005f6e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d108      	bne.n	800693e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f062 020f 	orn	r2, r2, #15
 800693a:	629a      	str	r2, [r3, #40]	; 0x28
 800693c:	e018      	b.n	8006970 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006946:	d113      	bne.n	8006970 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	3b01      	subs	r3, #1
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	f003 031c 	and.w	r3, r3, #28
 800695a:	f06f 020f 	mvn.w	r2, #15
 800695e:	fa02 f103 	lsl.w	r1, r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <HAL_ADC_Init+0x5cc>)
 8006978:	4013      	ands	r3, r2
 800697a:	6a3a      	ldr	r2, [r7, #32]
 800697c:	429a      	cmp	r2, r3
 800697e:	d10b      	bne.n	8006998 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	f043 0201 	orr.w	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006996:	e01a      	b.n	80069ce <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699c:	f023 0312 	bic.w	r3, r3, #18
 80069a0:	f043 0210 	orr.w	r2, r3, #16
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ac:	f043 0201 	orr.w	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80069ba:	e008      	b.n	80069ce <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069c0:	f043 0210 	orr.w	r2, r3, #16
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80069ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	372c      	adds	r7, #44	; 0x2c
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	bf00      	nop
 80069dc:	f7fffc02 	.word	0xf7fffc02
 80069e0:	833ffff3 	.word	0x833ffff3

080069e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b0a2      	sub	sp, #136	; 0x88
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a98      	ldr	r2, [pc, #608]	; (8006c58 <HAL_ADC_Start_DMA+0x274>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_ADC_Start_DMA+0x20>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a97      	ldr	r2, [pc, #604]	; (8006c5c <HAL_ADC_Start_DMA+0x278>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d101      	bne.n	8006a08 <HAL_ADC_Start_DMA+0x24>
 8006a04:	4b96      	ldr	r3, [pc, #600]	; (8006c60 <HAL_ADC_Start_DMA+0x27c>)
 8006a06:	e000      	b.n	8006a0a <HAL_ADC_Start_DMA+0x26>
 8006a08:	4b96      	ldr	r3, [pc, #600]	; (8006c64 <HAL_ADC_Start_DMA+0x280>)
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fc36 	bl	800627c <LL_ADC_GetMultimode>
 8006a10:	67f8      	str	r0, [r7, #124]	; 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fcd5 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8111 	bne.w	8006c46 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_ADC_Start_DMA+0x4e>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e10e      	b.n	8006c50 <HAL_ADC_Start_DMA+0x26c>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d003      	beq.n	8006a4e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a48:	2b09      	cmp	r3, #9
 8006a4a:	f040 80f4 	bne.w	8006c36 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f001 fa2c 	bl	8007eac <ADC_Enable>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006a5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 80e4 	bne.w	8006c2c <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	679a      	str	r2, [r3, #120]	; 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a7a      	ldr	r2, [pc, #488]	; (8006c68 <HAL_ADC_Start_DMA+0x284>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d026      	beq.n	8006ad0 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a75      	ldr	r2, [pc, #468]	; (8006c5c <HAL_ADC_Start_DMA+0x278>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d002      	beq.n	8006a92 <HAL_ADC_Start_DMA+0xae>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	e000      	b.n	8006a94 <HAL_ADC_Start_DMA+0xb0>
 8006a92:	4b71      	ldr	r3, [pc, #452]	; (8006c58 <HAL_ADC_Start_DMA+0x274>)
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d002      	beq.n	8006aa2 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d105      	bne.n	8006aae <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	679a      	str	r2, [r3, #120]	; 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d006      	beq.n	8006ac8 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006abe:	f023 0206 	bic.w	r2, r3, #6
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ac6:	e006      	b.n	8006ad6 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ace:	e002      	b.n	8006ad6 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a64      	ldr	r2, [pc, #400]	; (8006c6c <HAL_ADC_Start_DMA+0x288>)
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	4a63      	ldr	r2, [pc, #396]	; (8006c70 <HAL_ADC_Start_DMA+0x28c>)
 8006ae4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4a62      	ldr	r2, [pc, #392]	; (8006c74 <HAL_ADC_Start_DMA+0x290>)
 8006aec:	669a      	str	r2, [r3, #104]	; 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	221c      	movs	r2, #28
 8006af4:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0210 	orr.w	r2, r2, #16
 8006b0c:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a55      	ldr	r2, [pc, #340]	; (8006c68 <HAL_ADC_Start_DMA+0x284>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d107      	bne.n	8006b28 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d04f      	beq.n	8006bd6 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d046      	beq.n	8006bce <HAL_ADC_Start_DMA+0x1ea>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d040      	beq.n	8006bce <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	f107 0310 	add.w	r3, r7, #16
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f002 fe14 	bl	8009788 <HAL_DMAEx_List_GetNodeConfig>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e072      	b.n	8006c50 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d104      	bne.n	8006b7a <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b78:	e00a      	b.n	8006b90 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d104      	bne.n	8006b8a <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b88:	e002      	b.n	8006b90 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b9c:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f103 0240 	add.w	r2, r3, #64	; 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 fd37 	bl	8009634 <HAL_DMAEx_List_Start_IT>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006bcc:	e028      	b.n	8006c20 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006bd4:	e024      	b.n	8006c20 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d104      	bne.n	8006bea <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006be8:	e00c      	b.n	8006c04 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d104      	bne.n	8006bfe <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bfc:	e002      	b.n	8006c04 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3340      	adds	r3, #64	; 0x40
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c16:	f001 fd7b 	bl	8008710 <HAL_DMA_Start_IT>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fbba 	bl	800639e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006c2a:	e00f      	b.n	8006c4c <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      if (tmp_hal_status == HAL_OK)
 8006c34:	e00a      	b.n	8006c4c <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8006c44:	e002      	b.n	8006c4c <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
 8006c48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }

  return tmp_hal_status;
 8006c4c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3788      	adds	r7, #136	; 0x88
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	42028000 	.word	0x42028000
 8006c5c:	42028100 	.word	0x42028100
 8006c60:	42028300 	.word	0x42028300
 8006c64:	46021300 	.word	0x46021300
 8006c68:	46021000 	.word	0x46021000
 8006c6c:	08007fe1 	.word	0x08007fe1
 8006c70:	080080b9 	.word	0x080080b9
 8006c74:	080080d5 	.word	0x080080d5

08006c78 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006c80:	2300      	movs	r3, #0
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a77      	ldr	r2, [pc, #476]	; (8006e78 <HAL_ADC_IRQHandler+0x200>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <HAL_ADC_IRQHandler+0x30>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a76      	ldr	r2, [pc, #472]	; (8006e7c <HAL_ADC_IRQHandler+0x204>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d101      	bne.n	8006cac <HAL_ADC_IRQHandler+0x34>
 8006ca8:	4b75      	ldr	r3, [pc, #468]	; (8006e80 <HAL_ADC_IRQHandler+0x208>)
 8006caa:	e000      	b.n	8006cae <HAL_ADC_IRQHandler+0x36>
 8006cac:	4b75      	ldr	r3, [pc, #468]	; (8006e84 <HAL_ADC_IRQHandler+0x20c>)
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fae4 	bl	800627c <LL_ADC_GetMultimode>
 8006cb4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_ADC_IRQHandler+0x78>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cda:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	679a      	str	r2, [r3, #120]	; 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fa2e 	bl	8008144 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2202      	movs	r2, #2
 8006cee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <HAL_ADC_IRQHandler+0x8c>
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80d1 	beq.w	8006eb2 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80cb 	beq.w	8006eb2 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a53      	ldr	r2, [pc, #332]	; (8006e88 <HAL_ADC_IRQHandler+0x210>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d06c      	beq.n	8006e18 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff f932 	bl	8005fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80aa 	beq.w	8006ea4 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a49      	ldr	r2, [pc, #292]	; (8006e7c <HAL_ADC_IRQHandler+0x204>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d002      	beq.n	8006d60 <HAL_ADC_IRQHandler+0xe8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	e000      	b.n	8006d62 <HAL_ADC_IRQHandler+0xea>
 8006d60:	4b45      	ldr	r3, [pc, #276]	; (8006e78 <HAL_ADC_IRQHandler+0x200>)
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d008      	beq.n	8006d7c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d002      	beq.n	8006d7c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b09      	cmp	r3, #9
 8006d7a:	d104      	bne.n	8006d86 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	623b      	str	r3, [r7, #32]
 8006d84:	e00c      	b.n	8006da0 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <HAL_ADC_IRQHandler+0x204>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d002      	beq.n	8006d96 <HAL_ADC_IRQHandler+0x11e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	e000      	b.n	8006d98 <HAL_ADC_IRQHandler+0x120>
 8006d96:	4b38      	ldr	r3, [pc, #224]	; (8006e78 <HAL_ADC_IRQHandler+0x200>)
 8006d98:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d17c      	bne.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d175      	bne.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fb02 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d11a      	bne.n	8006dfe <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 020c 	bic.w	r2, r2, #12
 8006dd6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	679a      	str	r2, [r3, #120]	; 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d159      	bne.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	679a      	str	r2, [r3, #120]	; 0x78
 8006dfc:	e052      	b.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e02:	f043 0210 	orr.w	r2, r3, #16
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e0e:	f043 0201 	orr.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	67da      	str	r2, [r3, #124]	; 0x7c
 8006e16:	e045      	b.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff f8c5 	bl	8005fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d03d      	beq.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d138      	bne.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d131      	bne.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff fabe 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11d      	bne.n	8006e8c <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 020c 	bic.w	r2, r2, #12
 8006e5e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f043 0201 	orr.w	r2, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	679a      	str	r2, [r3, #120]	; 0x78
 8006e74:	e016      	b.n	8006ea4 <HAL_ADC_IRQHandler+0x22c>
 8006e76:	bf00      	nop
 8006e78:	42028000 	.word	0x42028000
 8006e7c:	42028100 	.word	0x42028100
 8006e80:	42028300 	.word	0x42028300
 8006e84:	46021300 	.word	0x46021300
 8006e88:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	679a      	str	r2, [r3, #120]	; 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e9c:	f043 0201 	orr.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	67da      	str	r2, [r3, #124]	; 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f99d 	bl	80071e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	220c      	movs	r2, #12
 8006eb0:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a8c      	ldr	r2, [pc, #560]	; (80070e8 <HAL_ADC_IRQHandler+0x470>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	f000 8095 	beq.w	8006fe8 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <HAL_ADC_IRQHandler+0x25a>
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8085 	beq.w	8006fe8 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d07f      	beq.n	8006fe8 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff f91e 	bl	8006146 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006f0a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f84b 	bl	8005fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f16:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a73      	ldr	r2, [pc, #460]	; (80070ec <HAL_ADC_IRQHandler+0x474>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d002      	beq.n	8006f28 <HAL_ADC_IRQHandler+0x2b0>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	e000      	b.n	8006f2a <HAL_ADC_IRQHandler+0x2b2>
 8006f28:	4b71      	ldr	r3, [pc, #452]	; (80070f0 <HAL_ADC_IRQHandler+0x478>)
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d008      	beq.n	8006f44 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b06      	cmp	r3, #6
 8006f3c:	d002      	beq.n	8006f44 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b07      	cmp	r3, #7
 8006f42:	d104      	bne.n	8006f4e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	623b      	str	r3, [r7, #32]
 8006f4c:	e00c      	b.n	8006f68 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a66      	ldr	r2, [pc, #408]	; (80070ec <HAL_ADC_IRQHandler+0x474>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d002      	beq.n	8006f5e <HAL_ADC_IRQHandler+0x2e6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	e000      	b.n	8006f60 <HAL_ADC_IRQHandler+0x2e8>
 8006f5e:	4b64      	ldr	r3, [pc, #400]	; (80070f0 <HAL_ADC_IRQHandler+0x478>)
 8006f60:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d035      	beq.n	8006fda <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_ADC_IRQHandler+0x310>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d02d      	beq.n	8006fda <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d128      	bne.n	8006fda <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d121      	bne.n	8006fda <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fa26 	bl	80063ec <LL_ADC_INJ_IsConversionOngoing>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d119      	bne.n	8006fda <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fb4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	679a      	str	r2, [r3, #120]	; 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	679a      	str	r2, [r3, #120]	; 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f894 	bl	8008108 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2260      	movs	r2, #96	; 0x60
 8006fe6:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d011      	beq.n	8007016 <HAL_ADC_IRQHandler+0x39e>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00c      	beq.n	8007016 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007000:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8ff 	bl	800720c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d012      	beq.n	8007046 <HAL_ADC_IRQHandler+0x3ce>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00d      	beq.n	8007046 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 f870 	bl	800811c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007044:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800704c:	2b00      	cmp	r3, #0
 800704e:	d012      	beq.n	8007076 <HAL_ADC_IRQHandler+0x3fe>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 f862 	bl	8008130 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007074:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d05d      	beq.n	800713c <HAL_ADC_IRQHandler+0x4c4>
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	d058      	beq.n	800713c <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8007092:	2301      	movs	r3, #1
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
 8007096:	e03b      	b.n	8007110 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a12      	ldr	r2, [pc, #72]	; (80070e8 <HAL_ADC_IRQHandler+0x470>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02c      	beq.n	80070fc <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d015      	beq.n	80070d4 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <HAL_ADC_IRQHandler+0x478>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_ADC_IRQHandler+0x444>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <HAL_ADC_IRQHandler+0x474>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d101      	bne.n	80070c0 <HAL_ADC_IRQHandler+0x448>
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <HAL_ADC_IRQHandler+0x47c>)
 80070be:	e000      	b.n	80070c2 <HAL_ADC_IRQHandler+0x44a>
 80070c0:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <HAL_ADC_IRQHandler+0x480>)
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff f8e8 	bl	8006298 <LL_ADC_GetMultiDMATransfer>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d020      	beq.n	8007110 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80070ce:	2301      	movs	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
 80070d2:	e01d      	b.n	8007110 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d016      	beq.n	8007110 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80070e2:	2301      	movs	r3, #1
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
 80070e6:	e013      	b.n	8007110 <HAL_ADC_IRQHandler+0x498>
 80070e8:	46021000 	.word	0x46021000
 80070ec:	42028100 	.word	0x42028100
 80070f0:	42028000 	.word	0x42028000
 80070f4:	42028300 	.word	0x42028300
 80070f8:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff f812 	bl	800612a <LL_ADC_REG_GetDMATransfer>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 800710c:	2301      	movs	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10e      	bne.n	8007134 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800711a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007126:	f043 0202 	orr.w	r2, r3, #2
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	67da      	str	r2, [r3, #124]	; 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f876 	bl	8007220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2210      	movs	r2, #16
 800713a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01b      	beq.n	800717e <HAL_ADC_IRQHandler+0x506>
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d016      	beq.n	800717e <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	d105      	bne.n	8007168 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007160:	f043 0201 	orr.w	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	679a      	str	r2, [r3, #120]	; 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f877 	bl	800725c <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <HAL_ADC_IRQHandler+0x568>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d126      	bne.n	80071d6 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <HAL_ADC_IRQHandler+0x534>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f849 	bl	8007234 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071aa:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00f      	beq.n	80071d6 <HAL_ADC_IRQHandler+0x55e>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f841 	bl	8007248 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071d4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80071d6:	bf00      	nop
 80071d8:	3728      	adds	r7, #40	; 0x28
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	46021000 	.word	0x46021000

080071e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b0b7      	sub	sp, #220	; 0xdc
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4aa8      	ldr	r2, [pc, #672]	; (800752c <HAL_ADC_ConfigChannel+0x2bc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d103      	bne.n	8007296 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800729c:	2b01      	cmp	r3, #1
 800729e:	d102      	bne.n	80072a6 <HAL_ADC_ConfigChannel+0x36>
 80072a0:	2302      	movs	r3, #2
 80072a2:	f000 bdfe 	b.w	8007ea2 <HAL_ADC_ConfigChannel+0xc32>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff f887 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 85c1 	bne.w	8007e42 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a99      	ldr	r2, [pc, #612]	; (800752c <HAL_ADC_ConfigChannel+0x2bc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	f000 8409 	beq.w	8007ade <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d108      	bne.n	80072ea <HAL_ADC_ConfigChannel+0x7a>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	0e9b      	lsrs	r3, r3, #26
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2201      	movs	r2, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	e01d      	b.n	8007326 <HAL_ADC_ConfigChannel+0xb6>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072f6:	fa93 f3a3 	rbit	r3, r3
 80072fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80072fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8007306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800730e:	2320      	movs	r3, #32
 8007310:	e004      	b.n	800731c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8007312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007316:	fab3 f383 	clz	r3, r3
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2201      	movs	r2, #1
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	69d1      	ldr	r1, [r2, #28]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	430b      	orrs	r3, r1
 8007332:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6859      	ldr	r1, [r3, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	f7fe fe47 	bl	8005fd4 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f83b 	bl	80063c6 <LL_ADC_REG_IsConversionOngoing>
 8007350:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff f847 	bl	80063ec <LL_ADC_INJ_IsConversionOngoing>
 800735e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 81df 	bne.w	800772a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800736c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007370:	2b00      	cmp	r3, #0
 8007372:	f040 81da 	bne.w	800772a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	461a      	mov	r2, r3
 8007384:	f7fe fef2 	bl	800616c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695a      	ldr	r2, [r3, #20]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	089b      	lsrs	r3, r3, #2
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d046      	beq.n	8007438 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6919      	ldr	r1, [r3, #16]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073ba:	f7fe fd2d 	bl	8005e18 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6919      	ldr	r1, [r3, #16]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	461a      	mov	r2, r3
 80073cc:	f7fe fd5b 	bl	8005e86 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	7e9b      	ldrb	r3, [r3, #26]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d11e      	bne.n	8007416 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <HAL_ADC_ConfigChannel+0x17e>
 80073e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073ec:	e000      	b.n	80073f0 <HAL_ADC_ConfigChannel+0x180>
 80073ee:	2300      	movs	r3, #0
 80073f0:	461a      	mov	r2, r3
 80073f2:	f7fe fd7e 	bl	8005ef2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007402:	2b01      	cmp	r3, #1
 8007404:	d102      	bne.n	800740c <HAL_ADC_ConfigChannel+0x19c>
 8007406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800740a:	e000      	b.n	800740e <HAL_ADC_ConfigChannel+0x19e>
 800740c:	2300      	movs	r3, #0
 800740e:	461a      	mov	r2, r3
 8007410:	f7fe fd54 	bl	8005ebc <LL_ADC_SetOffsetSignedSaturation>
 8007414:	e189      	b.n	800772a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2200      	movs	r2, #0
 8007420:	4619      	mov	r1, r3
 8007422:	f7fe fd66 	bl	8005ef2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2200      	movs	r2, #0
 8007430:	4619      	mov	r1, r3
 8007432:	f7fe fd43 	bl	8005ebc <LL_ADC_SetOffsetSignedSaturation>
 8007436:	e178      	b.n	800772a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fd0b 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 8007444:	4603      	mov	r3, r0
 8007446:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <HAL_ADC_ConfigChannel+0x1f4>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2100      	movs	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fd00 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 800745a:	4603      	mov	r3, r0
 800745c:	0e9b      	lsrs	r3, r3, #26
 800745e:	f003 021f 	and.w	r2, r3, #31
 8007462:	e01e      	b.n	80074a2 <HAL_ADC_ConfigChannel+0x232>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fcf5 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 8007470:	4603      	mov	r3, r0
 8007472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800747a:	fa93 f3a3 	rbit	r3, r3
 800747e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800748a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8007492:	2320      	movs	r3, #32
 8007494:	e004      	b.n	80074a0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8007496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800749a:	fab3 f383 	clz	r3, r3
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <HAL_ADC_ConfigChannel+0x24a>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	0e9b      	lsrs	r3, r3, #26
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	e018      	b.n	80074ec <HAL_ADC_ConfigChannel+0x27c>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074c6:	fa93 f3a3 	rbit	r3, r3
 80074ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80074ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80074d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80074de:	2320      	movs	r3, #32
 80074e0:	e004      	b.n	80074ec <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80074e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074e6:	fab3 f383 	clz	r3, r3
 80074ea:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d107      	bne.n	8007500 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	2300      	movs	r3, #0
 80074fa:	2100      	movs	r1, #0
 80074fc:	f7fe fc8c 	bl	8005e18 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fca7 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 800750c:	4603      	mov	r3, r0
 800750e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10c      	bne.n	8007530 <HAL_ADC_ConfigChannel+0x2c0>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2101      	movs	r1, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fc9c 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 8007522:	4603      	mov	r3, r0
 8007524:	0e9b      	lsrs	r3, r3, #26
 8007526:	f003 021f 	and.w	r2, r3, #31
 800752a:	e020      	b.n	800756e <HAL_ADC_ConfigChannel+0x2fe>
 800752c:	46021000 	.word	0x46021000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2101      	movs	r1, #1
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fc8f 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 800753c:	4603      	mov	r3, r0
 800753e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007542:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007546:	fa93 f3a3 	rbit	r3, r3
 800754a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800754e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800755e:	2320      	movs	r3, #32
 8007560:	e004      	b.n	800756c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8007562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007566:	fab3 f383 	clz	r3, r3
 800756a:	b2db      	uxtb	r3, r3
 800756c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <HAL_ADC_ConfigChannel+0x316>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	0e9b      	lsrs	r3, r3, #26
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	e018      	b.n	80075b8 <HAL_ADC_ConfigChannel+0x348>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800758e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007592:	fa93 f3a3 	rbit	r3, r3
 8007596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800759a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800759e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80075a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80075aa:	2320      	movs	r3, #32
 80075ac:	e004      	b.n	80075b8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80075ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075b2:	fab3 f383 	clz	r3, r3
 80075b6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d107      	bne.n	80075cc <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	2101      	movs	r1, #1
 80075c8:	f7fe fc26 	bl	8005e18 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2102      	movs	r1, #2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fc41 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 80075d8:	4603      	mov	r3, r0
 80075da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <HAL_ADC_ConfigChannel+0x388>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2102      	movs	r1, #2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fc36 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 80075ee:	4603      	mov	r3, r0
 80075f0:	0e9b      	lsrs	r3, r3, #26
 80075f2:	f003 021f 	and.w	r2, r3, #31
 80075f6:	e01a      	b.n	800762e <HAL_ADC_ConfigChannel+0x3be>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2102      	movs	r1, #2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fc2b 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 8007604:	4603      	mov	r3, r0
 8007606:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800760a:	fa93 f3a3 	rbit	r3, r3
 800760e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800761e:	2320      	movs	r3, #32
 8007620:	e004      	b.n	800762c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8007622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007626:	fab3 f383 	clz	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <HAL_ADC_ConfigChannel+0x3d6>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	0e9b      	lsrs	r3, r3, #26
 8007640:	f003 031f 	and.w	r3, r3, #31
 8007644:	e011      	b.n	800766a <HAL_ADC_ConfigChannel+0x3fa>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800764e:	fa93 f3a3 	rbit	r3, r3
 8007652:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007656:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800765e:	2320      	movs	r3, #32
 8007660:	e003      	b.n	800766a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8007662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007664:	fab3 f383 	clz	r3, r3
 8007668:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800766a:	429a      	cmp	r2, r3
 800766c:	d107      	bne.n	800767e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	2300      	movs	r3, #0
 8007678:	2102      	movs	r1, #2
 800767a:	f7fe fbcd 	bl	8005e18 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2103      	movs	r1, #3
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fbe8 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 800768a:	4603      	mov	r3, r0
 800768c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <HAL_ADC_ConfigChannel+0x43a>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2103      	movs	r1, #3
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fbdd 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 80076a0:	4603      	mov	r3, r0
 80076a2:	0e9b      	lsrs	r3, r3, #26
 80076a4:	f003 021f 	and.w	r2, r3, #31
 80076a8:	e017      	b.n	80076da <HAL_ADC_ConfigChannel+0x46a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2103      	movs	r1, #3
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fbd2 	bl	8005e5a <LL_ADC_GetOffsetChannel>
 80076b6:	4603      	mov	r3, r0
 80076b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076bc:	fa93 f3a3 	rbit	r3, r3
 80076c0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80076c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80076c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80076cc:	2320      	movs	r3, #32
 80076ce:	e003      	b.n	80076d8 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80076d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076d2:	fab3 f383 	clz	r3, r3
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <HAL_ADC_ConfigChannel+0x482>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	0e9b      	lsrs	r3, r3, #26
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	e011      	b.n	8007716 <HAL_ADC_ConfigChannel+0x4a6>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076fa:	fa93 f3a3 	rbit	r3, r3
 80076fe:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007702:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800770a:	2320      	movs	r3, #32
 800770c:	e003      	b.n	8007716 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800770e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007710:	fab3 f383 	clz	r3, r3
 8007714:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007716:	429a      	cmp	r2, r3
 8007718:	d107      	bne.n	800772a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	2103      	movs	r1, #3
 8007726:	f7fe fb77 	bl	8005e18 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fe22 	bl	8006378 <LL_ADC_IsEnabled>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 83ad 	bne.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	461a      	mov	r2, r3
 800774a:	f7fe fd73 	bl	8006234 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007756:	f040 80d6 	bne.w	8007906 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <HAL_ADC_ConfigChannel+0x50e>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	0e9b      	lsrs	r3, r3, #26
 800776c:	3301      	adds	r3, #1
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2b09      	cmp	r3, #9
 8007774:	bf94      	ite	ls
 8007776:	2301      	movls	r3, #1
 8007778:	2300      	movhi	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	e019      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x542>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007786:	fa93 f3a3 	rbit	r3, r3
 800778a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800778c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800778e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007796:	2320      	movs	r3, #32
 8007798:	e003      	b.n	80077a2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800779a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779c:	fab3 f383 	clz	r3, r3
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	3301      	adds	r3, #1
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	bf94      	ite	ls
 80077ac:	2301      	movls	r3, #1
 80077ae:	2300      	movhi	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d04d      	beq.n	8007852 <HAL_ADC_ConfigChannel+0x5e2>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <HAL_ADC_ConfigChannel+0x562>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	0e9b      	lsrs	r3, r3, #26
 80077c8:	3301      	adds	r3, #1
 80077ca:	069b      	lsls	r3, r3, #26
 80077cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077d0:	e015      	b.n	80077fe <HAL_ADC_ConfigChannel+0x58e>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077da:	fa93 f3a3 	rbit	r3, r3
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80077e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80077ea:	2320      	movs	r3, #32
 80077ec:	e003      	b.n	80077f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80077ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f0:	fab3 f383 	clz	r3, r3
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3301      	adds	r3, #1
 80077f8:	069b      	lsls	r3, r3, #26
 80077fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <HAL_ADC_ConfigChannel+0x5ae>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	0e9b      	lsrs	r3, r3, #26
 8007810:	3301      	adds	r3, #1
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	2101      	movs	r1, #1
 8007818:	fa01 f303 	lsl.w	r3, r1, r3
 800781c:	e017      	b.n	800784e <HAL_ADC_ConfigChannel+0x5de>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007826:	fa93 f3a3 	rbit	r3, r3
 800782a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8007836:	2320      	movs	r3, #32
 8007838:	e003      	b.n	8007842 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	fab3 f383 	clz	r3, r3
 8007840:	b2db      	uxtb	r3, r3
 8007842:	3301      	adds	r3, #1
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	2101      	movs	r1, #1
 800784a:	fa01 f303 	lsl.w	r3, r1, r3
 800784e:	4313      	orrs	r3, r2
 8007850:	e04e      	b.n	80078f0 <HAL_ADC_ConfigChannel+0x680>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d107      	bne.n	800786e <HAL_ADC_ConfigChannel+0x5fe>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	0e9b      	lsrs	r3, r3, #26
 8007864:	3301      	adds	r3, #1
 8007866:	069b      	lsls	r3, r3, #26
 8007868:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800786c:	e015      	b.n	800789a <HAL_ADC_ConfigChannel+0x62a>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	fa93 f3a3 	rbit	r3, r3
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8007886:	2320      	movs	r3, #32
 8007888:	e003      	b.n	8007892 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	fab3 f383 	clz	r3, r3
 8007890:	b2db      	uxtb	r3, r3
 8007892:	3301      	adds	r3, #1
 8007894:	069b      	lsls	r3, r3, #26
 8007896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_ADC_ConfigChannel+0x64a>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	0e9b      	lsrs	r3, r3, #26
 80078ac:	3301      	adds	r3, #1
 80078ae:	f003 031f 	and.w	r3, r3, #31
 80078b2:	2101      	movs	r1, #1
 80078b4:	fa01 f303 	lsl.w	r3, r1, r3
 80078b8:	e017      	b.n	80078ea <HAL_ADC_ConfigChannel+0x67a>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	fa93 f3a3 	rbit	r3, r3
 80078c6:	61bb      	str	r3, [r7, #24]
  return result;
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80078d2:	2320      	movs	r3, #32
 80078d4:	e003      	b.n	80078de <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	fab3 f383 	clz	r3, r3
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	3301      	adds	r3, #1
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	2101      	movs	r1, #1
 80078e6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80078f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	461a      	mov	r2, r3
 80078fe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007902:	f7fe fc33 	bl	800616c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f280 82c3 	bge.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a92      	ldr	r2, [pc, #584]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_ADC_ConfigChannel+0x6b4>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a91      	ldr	r2, [pc, #580]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d101      	bne.n	8007928 <HAL_ADC_ConfigChannel+0x6b8>
 8007924:	4b90      	ldr	r3, [pc, #576]	; (8007b68 <HAL_ADC_ConfigChannel+0x8f8>)
 8007926:	e000      	b.n	800792a <HAL_ADC_ConfigChannel+0x6ba>
 8007928:	4b90      	ldr	r3, [pc, #576]	; (8007b6c <HAL_ADC_ConfigChannel+0x8fc>)
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fa46 	bl	8005dbc <LL_ADC_GetCommonPathInternalCh>
 8007930:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a89      	ldr	r2, [pc, #548]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_ADC_ConfigChannel+0x6d8>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a88      	ldr	r2, [pc, #544]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10e      	bne.n	8007966 <HAL_ADC_ConfigChannel+0x6f6>
 8007948:	4885      	ldr	r0, [pc, #532]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 800794a:	f7fe fd15 	bl	8006378 <LL_ADC_IsEnabled>
 800794e:	4604      	mov	r4, r0
 8007950:	4884      	ldr	r0, [pc, #528]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007952:	f7fe fd11 	bl	8006378 <LL_ADC_IsEnabled>
 8007956:	4603      	mov	r3, r0
 8007958:	4323      	orrs	r3, r4
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf0c      	ite	eq
 800795e:	2301      	moveq	r3, #1
 8007960:	2300      	movne	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	e008      	b.n	8007978 <HAL_ADC_ConfigChannel+0x708>
 8007966:	4882      	ldr	r0, [pc, #520]	; (8007b70 <HAL_ADC_ConfigChannel+0x900>)
 8007968:	f7fe fd06 	bl	8006378 <LL_ADC_IsEnabled>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a6 	beq.w	8007aca <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a7c      	ldr	r2, [pc, #496]	; (8007b74 <HAL_ADC_ConfigChannel+0x904>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d13c      	bne.n	8007a02 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007988:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800798c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d136      	bne.n	8007a02 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a71      	ldr	r2, [pc, #452]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00a      	beq.n	80079b4 <HAL_ADC_ConfigChannel+0x744>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a70      	ldr	r2, [pc, #448]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d005      	beq.n	80079b4 <HAL_ADC_ConfigChannel+0x744>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a70      	ldr	r2, [pc, #448]	; (8007b70 <HAL_ADC_ConfigChannel+0x900>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	f040 826e 	bne.w	8007e90 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a69      	ldr	r2, [pc, #420]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_ADC_ConfigChannel+0x758>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a68      	ldr	r2, [pc, #416]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d101      	bne.n	80079cc <HAL_ADC_ConfigChannel+0x75c>
 80079c8:	4a67      	ldr	r2, [pc, #412]	; (8007b68 <HAL_ADC_ConfigChannel+0x8f8>)
 80079ca:	e000      	b.n	80079ce <HAL_ADC_ConfigChannel+0x75e>
 80079cc:	4a67      	ldr	r2, [pc, #412]	; (8007b6c <HAL_ADC_ConfigChannel+0x8fc>)
 80079ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fe f9dc 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079de:	4b66      	ldr	r3, [pc, #408]	; (8007b78 <HAL_ADC_ConfigChannel+0x908>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	099b      	lsrs	r3, r3, #6
 80079e4:	4a65      	ldr	r2, [pc, #404]	; (8007b7c <HAL_ADC_ConfigChannel+0x90c>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	099b      	lsrs	r3, r3, #6
 80079ec:	3301      	adds	r3, #1
 80079ee:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80079f0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80079f2:	e002      	b.n	80079fa <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f9      	bne.n	80079f4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a00:	e246      	b.n	8007e90 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a5e      	ldr	r2, [pc, #376]	; (8007b80 <HAL_ADC_ConfigChannel+0x910>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d12b      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d125      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a50      	ldr	r2, [pc, #320]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00a      	beq.n	8007a38 <HAL_ADC_ConfigChannel+0x7c8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a4f      	ldr	r2, [pc, #316]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d005      	beq.n	8007a38 <HAL_ADC_ConfigChannel+0x7c8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a4f      	ldr	r2, [pc, #316]	; (8007b70 <HAL_ADC_ConfigChannel+0x900>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	f040 822e 	bne.w	8007e94 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a48      	ldr	r2, [pc, #288]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d004      	beq.n	8007a4c <HAL_ADC_ConfigChannel+0x7dc>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a47      	ldr	r2, [pc, #284]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d101      	bne.n	8007a50 <HAL_ADC_ConfigChannel+0x7e0>
 8007a4c:	4a46      	ldr	r2, [pc, #280]	; (8007b68 <HAL_ADC_ConfigChannel+0x8f8>)
 8007a4e:	e000      	b.n	8007a52 <HAL_ADC_ConfigChannel+0x7e2>
 8007a50:	4a46      	ldr	r2, [pc, #280]	; (8007b6c <HAL_ADC_ConfigChannel+0x8fc>)
 8007a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fe f99a 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a62:	e217      	b.n	8007e94 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a46      	ldr	r2, [pc, #280]	; (8007b84 <HAL_ADC_ConfigChannel+0x914>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	f040 8213 	bne.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 820c 	bne.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a37      	ldr	r2, [pc, #220]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00a      	beq.n	8007a9e <HAL_ADC_ConfigChannel+0x82e>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a35      	ldr	r2, [pc, #212]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d005      	beq.n	8007a9e <HAL_ADC_ConfigChannel+0x82e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a36      	ldr	r2, [pc, #216]	; (8007b70 <HAL_ADC_ConfigChannel+0x900>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	f040 81fc 	bne.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <HAL_ADC_ConfigChannel+0x8f0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d004      	beq.n	8007ab2 <HAL_ADC_ConfigChannel+0x842>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <HAL_ADC_ConfigChannel+0x8f4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d101      	bne.n	8007ab6 <HAL_ADC_ConfigChannel+0x846>
 8007ab2:	4a2d      	ldr	r2, [pc, #180]	; (8007b68 <HAL_ADC_ConfigChannel+0x8f8>)
 8007ab4:	e000      	b.n	8007ab8 <HAL_ADC_ConfigChannel+0x848>
 8007ab6:	4a2d      	ldr	r2, [pc, #180]	; (8007b6c <HAL_ADC_ConfigChannel+0x8fc>)
 8007ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fe f967 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
 8007ac8:	e1e5      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ace:	f043 0220 	orr.w	r2, r3, #32
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007adc:	e1db      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	f000 811b 	beq.w	8007d26 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af8:	d004      	beq.n	8007b04 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007afe:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <HAL_ADC_ConfigChannel+0x918>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d107      	bne.n	8007b14 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fac1 	bl	8006094 <LL_ADC_REG_SetSequencerChAdd>
 8007b12:	e059      	b.n	8007bc8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f003 031f 	and.w	r3, r3, #31
 8007b22:	210f      	movs	r1, #15
 8007b24:	fa01 f303 	lsl.w	r3, r1, r3
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <HAL_ADC_ConfigChannel+0x8d4>
 8007b38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b3c:	0e9b      	lsrs	r3, r3, #26
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	e027      	b.n	8007b94 <HAL_ADC_ConfigChannel+0x924>
 8007b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b48:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	fa93 f3a3 	rbit	r3, r3
 8007b50:	60fb      	str	r3, [r7, #12]
  return result;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d117      	bne.n	8007b8c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	e019      	b.n	8007b94 <HAL_ADC_ConfigChannel+0x924>
 8007b60:	42028000 	.word	0x42028000
 8007b64:	42028100 	.word	0x42028100
 8007b68:	42028300 	.word	0x42028300
 8007b6c:	46021300 	.word	0x46021300
 8007b70:	46021000 	.word	0x46021000
 8007b74:	ce080000 	.word	0xce080000
 8007b78:	2000018c 	.word	0x2000018c
 8007b7c:	053e2d63 	.word	0x053e2d63
 8007b80:	ca040000 	.word	0xca040000
 8007b84:	80000001 	.word	0x80000001
 8007b88:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	fab3 f383 	clz	r3, r3
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6849      	ldr	r1, [r1, #4]
 8007b98:	f001 011f 	and.w	r1, r1, #31
 8007b9c:	408b      	lsls	r3, r1
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	089b      	lsrs	r3, r3, #2
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d808      	bhi.n	8007bc8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f7fe fa06 	bl	8005fd4 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007bd6:	f7fe fac9 	bl	800616c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f280 8159 	bge.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a9b      	ldr	r2, [pc, #620]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <HAL_ADC_ConfigChannel+0x988>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a9a      	ldr	r2, [pc, #616]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d101      	bne.n	8007bfc <HAL_ADC_ConfigChannel+0x98c>
 8007bf8:	4b99      	ldr	r3, [pc, #612]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007bfa:	e000      	b.n	8007bfe <HAL_ADC_ConfigChannel+0x98e>
 8007bfc:	4b99      	ldr	r3, [pc, #612]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe f8dc 	bl	8005dbc <LL_ADC_GetCommonPathInternalCh>
 8007c04:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a96      	ldr	r2, [pc, #600]	; (8007e68 <HAL_ADC_ConfigChannel+0xbf8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d12b      	bne.n	8007c6a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d125      	bne.n	8007c6a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a8d      	ldr	r2, [pc, #564]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d004      	beq.n	8007c32 <HAL_ADC_ConfigChannel+0x9c2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a8b      	ldr	r2, [pc, #556]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d101      	bne.n	8007c36 <HAL_ADC_ConfigChannel+0x9c6>
 8007c32:	4a8b      	ldr	r2, [pc, #556]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007c34:	e000      	b.n	8007c38 <HAL_ADC_ConfigChannel+0x9c8>
 8007c36:	4a8b      	ldr	r2, [pc, #556]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fe f8a7 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007c48:	4b88      	ldr	r3, [pc, #544]	; (8007e6c <HAL_ADC_ConfigChannel+0xbfc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	099b      	lsrs	r3, r3, #6
 8007c4e:	4a88      	ldr	r2, [pc, #544]	; (8007e70 <HAL_ADC_ConfigChannel+0xc00>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	099b      	lsrs	r3, r3, #6
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8007c5a:	e002      	b.n	8007c62 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f9      	bne.n	8007c5c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007c68:	e045      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a81      	ldr	r2, [pc, #516]	; (8007e74 <HAL_ADC_ConfigChannel+0xc04>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d11b      	bne.n	8007cac <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d115      	bne.n	8007cac <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a74      	ldr	r2, [pc, #464]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d004      	beq.n	8007c94 <HAL_ADC_ConfigChannel+0xa24>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a73      	ldr	r2, [pc, #460]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d101      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0xa28>
 8007c94:	4a72      	ldr	r2, [pc, #456]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007c96:	e000      	b.n	8007c9a <HAL_ADC_ConfigChannel+0xa2a>
 8007c98:	4a72      	ldr	r2, [pc, #456]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	f7fe f876 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
 8007caa:	e024      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a71      	ldr	r2, [pc, #452]	; (8007e78 <HAL_ADC_ConfigChannel+0xc08>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d11f      	bne.n	8007cf6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d115      	bne.n	8007cee <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a64      	ldr	r2, [pc, #400]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d004      	beq.n	8007cd6 <HAL_ADC_ConfigChannel+0xa66>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a62      	ldr	r2, [pc, #392]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d101      	bne.n	8007cda <HAL_ADC_ConfigChannel+0xa6a>
 8007cd6:	4a62      	ldr	r2, [pc, #392]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007cd8:	e000      	b.n	8007cdc <HAL_ADC_ConfigChannel+0xa6c>
 8007cda:	4a62      	ldr	r2, [pc, #392]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f7fe f855 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
 8007cec:	e003      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a62      	ldr	r2, [pc, #392]	; (8007e7c <HAL_ADC_ConfigChannel+0xc0c>)
 8007cf4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a61      	ldr	r2, [pc, #388]	; (8007e80 <HAL_ADC_ConfigChannel+0xc10>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	f040 80ca 	bne.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 80c3 	bne.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0201 	orr.w	r2, r2, #1
 8007d20:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007d24:	e0b7      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d2e:	d004      	beq.n	8007d3a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007d34:	4a53      	ldr	r2, [pc, #332]	; (8007e84 <HAL_ADC_ConfigChannel+0xc14>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d106      	bne.n	8007d48 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe f9d9 	bl	80060fa <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f280 80a2 	bge.w	8007e96 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a40      	ldr	r2, [pc, #256]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d004      	beq.n	8007d66 <HAL_ADC_ConfigChannel+0xaf6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a3e      	ldr	r2, [pc, #248]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d101      	bne.n	8007d6a <HAL_ADC_ConfigChannel+0xafa>
 8007d66:	4b3e      	ldr	r3, [pc, #248]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007d68:	e000      	b.n	8007d6c <HAL_ADC_ConfigChannel+0xafc>
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe f825 	bl	8005dbc <LL_ADC_GetCommonPathInternalCh>
 8007d72:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a43      	ldr	r2, [pc, #268]	; (8007e88 <HAL_ADC_ConfigChannel+0xc18>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d115      	bne.n	8007dac <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a34      	ldr	r2, [pc, #208]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d004      	beq.n	8007d94 <HAL_ADC_ConfigChannel+0xb24>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a33      	ldr	r2, [pc, #204]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d101      	bne.n	8007d98 <HAL_ADC_ConfigChannel+0xb28>
 8007d94:	4a32      	ldr	r2, [pc, #200]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007d96:	e000      	b.n	8007d9a <HAL_ADC_ConfigChannel+0xb2a>
 8007d98:	4a32      	ldr	r2, [pc, #200]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fd fff6 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
 8007daa:	e034      	b.n	8007e16 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a36      	ldr	r2, [pc, #216]	; (8007e8c <HAL_ADC_ConfigChannel+0xc1c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d115      	bne.n	8007de2 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_ADC_ConfigChannel+0xb5a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_ADC_ConfigChannel+0xb5e>
 8007dca:	4a25      	ldr	r2, [pc, #148]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007dcc:	e000      	b.n	8007dd0 <HAL_ADC_ConfigChannel+0xb60>
 8007dce:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fd ffdb 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
 8007de0:	e019      	b.n	8007e16 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a24      	ldr	r2, [pc, #144]	; (8007e78 <HAL_ADC_ConfigChannel+0xc08>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d114      	bne.n	8007e16 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a19      	ldr	r2, [pc, #100]	; (8007e58 <HAL_ADC_ConfigChannel+0xbe8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d004      	beq.n	8007e00 <HAL_ADC_ConfigChannel+0xb90>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <HAL_ADC_ConfigChannel+0xbec>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d101      	bne.n	8007e04 <HAL_ADC_ConfigChannel+0xb94>
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <HAL_ADC_ConfigChannel+0xbf0>)
 8007e02:	e000      	b.n	8007e06 <HAL_ADC_ConfigChannel+0xb96>
 8007e04:	4a17      	ldr	r2, [pc, #92]	; (8007e64 <HAL_ADC_ConfigChannel+0xbf4>)
 8007e06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f7fd ffc0 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a19      	ldr	r2, [pc, #100]	; (8007e80 <HAL_ADC_ConfigChannel+0xc10>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d13a      	bne.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d134      	bne.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0201 	orr.w	r2, r2, #1
 8007e3c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007e40:	e029      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007e54:	e01f      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
 8007e56:	bf00      	nop
 8007e58:	42028000 	.word	0x42028000
 8007e5c:	42028100 	.word	0x42028100
 8007e60:	42028300 	.word	0x42028300
 8007e64:	46021300 	.word	0x46021300
 8007e68:	b6002000 	.word	0xb6002000
 8007e6c:	2000018c 	.word	0x2000018c
 8007e70:	053e2d63 	.word	0x053e2d63
 8007e74:	ba004000 	.word	0xba004000
 8007e78:	80000001 	.word	0x80000001
 8007e7c:	b2001000 	.word	0xb2001000
 8007e80:	d7200000 	.word	0xd7200000
 8007e84:	80000010 	.word	0x80000010
 8007e88:	ce080000 	.word	0xce080000
 8007e8c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007e90:	bf00      	nop
 8007e92:	e000      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e94:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8007e9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	37dc      	adds	r7, #220	; 0xdc
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}
 8007eaa:	bf00      	nop

08007eac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe fa5d 	bl	8006378 <LL_ADC_IsEnabled>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d17b      	bne.n	8007fbc <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <ADC_Enable+0x11c>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ed6:	f043 0210 	orr.w	r2, r3, #16
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee2:	f043 0201 	orr.w	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e067      	b.n	8007fbe <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fa28 	bl	8006350 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <ADC_Enable+0x66>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2f      	ldr	r2, [pc, #188]	; (8007fcc <ADC_Enable+0x120>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d054      	beq.n	8007fbc <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007f12:	f7fd fed5 	bl	8005cc0 <HAL_GetTick>
 8007f16:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a2c      	ldr	r2, [pc, #176]	; (8007fd0 <ADC_Enable+0x124>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <ADC_Enable+0x80>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <ADC_Enable+0x128>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d101      	bne.n	8007f30 <ADC_Enable+0x84>
 8007f2c:	4b2a      	ldr	r3, [pc, #168]	; (8007fd8 <ADC_Enable+0x12c>)
 8007f2e:	e000      	b.n	8007f32 <ADC_Enable+0x86>
 8007f30:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <ADC_Enable+0x130>)
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f9a2 	bl	800627c <LL_ADC_GetMultimode>
 8007f38:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a25      	ldr	r2, [pc, #148]	; (8007fd4 <ADC_Enable+0x128>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d002      	beq.n	8007f4a <ADC_Enable+0x9e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	e000      	b.n	8007f4c <ADC_Enable+0xa0>
 8007f4a:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <ADC_Enable+0x124>)
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d02c      	beq.n	8007fae <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d130      	bne.n	8007fbc <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f5a:	e028      	b.n	8007fae <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fe fa09 	bl	8006378 <LL_ADC_IsEnabled>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe f9ed 	bl	8006350 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007f76:	f7fd fea3 	bl	8005cc0 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d914      	bls.n	8007fae <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d00d      	beq.n	8007fae <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f96:	f043 0210 	orr.w	r2, r3, #16
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa2:	f043 0201 	orr.w	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e007      	b.n	8007fbe <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d1cf      	bne.n	8007f5c <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	8000003f 	.word	0x8000003f
 8007fcc:	46021000 	.word	0x46021000
 8007fd0:	42028000 	.word	0x42028000
 8007fd4:	42028100 	.word	0x42028100
 8007fd8:	42028300 	.word	0x42028300
 8007fdc:	46021300 	.word	0x46021300

08007fe0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d14b      	bne.n	8008092 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	679a      	str	r2, [r3, #120]	; 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d021      	beq.n	8008058 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd ffc7 	bl	8005fac <LL_ADC_REG_IsTriggerSourceSWStart>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d032      	beq.n	800808a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d12b      	bne.n	800808a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	679a      	str	r2, [r3, #120]	; 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d11f      	bne.n	800808a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804e:	f043 0201 	orr.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	679a      	str	r2, [r3, #120]	; 0x78
 8008056:	e018      	b.n	800808a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d111      	bne.n	800808a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800806a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	679a      	str	r2, [r3, #120]	; 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d105      	bne.n	800808a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008082:	f043 0201 	orr.w	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	679a      	str	r2, [r3, #120]	; 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff f8aa 	bl	80071e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008090:	e00e      	b.n	80080b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff f8be 	bl	8007220 <HAL_ADC_ErrorCallback>
}
 80080a4:	e004      	b.n	80080b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff f896 	bl	80071f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f2:	f043 0204 	orr.w	r2, r3, #4
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff f890 	bl	8007220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <__NVIC_SetPriorityGrouping+0x44>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008174:	4013      	ands	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800818a:	4a04      	ldr	r2, [pc, #16]	; (800819c <__NVIC_SetPriorityGrouping+0x44>)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	60d3      	str	r3, [r2, #12]
}
 8008190:	bf00      	nop
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	e000ed00 	.word	0xe000ed00

080081a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <__NVIC_GetPriorityGrouping+0x18>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	0a1b      	lsrs	r3, r3, #8
 80081aa:	f003 0307 	and.w	r3, r3, #7
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	e000ed00 	.word	0xe000ed00

080081bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80081c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	db0b      	blt.n	80081e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	f003 021f 	and.w	r2, r3, #31
 80081d4:	4907      	ldr	r1, [pc, #28]	; (80081f4 <__NVIC_EnableIRQ+0x38>)
 80081d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	2001      	movs	r0, #1
 80081de:	fa00 f202 	lsl.w	r2, r0, r2
 80081e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	e000e100 	.word	0xe000e100

080081f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db0a      	blt.n	8008222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	490c      	ldr	r1, [pc, #48]	; (8008244 <__NVIC_SetPriority+0x4c>)
 8008212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008216:	0112      	lsls	r2, r2, #4
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	440b      	add	r3, r1
 800821c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008220:	e00a      	b.n	8008238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	4908      	ldr	r1, [pc, #32]	; (8008248 <__NVIC_SetPriority+0x50>)
 8008228:	88fb      	ldrh	r3, [r7, #6]
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	3b04      	subs	r3, #4
 8008230:	0112      	lsls	r2, r2, #4
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	440b      	add	r3, r1
 8008236:	761a      	strb	r2, [r3, #24]
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	e000e100 	.word	0xe000e100
 8008248:	e000ed00 	.word	0xe000ed00

0800824c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800824c:	b480      	push	{r7}
 800824e:	b089      	sub	sp, #36	; 0x24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f1c3 0307 	rsb	r3, r3, #7
 8008266:	2b04      	cmp	r3, #4
 8008268:	bf28      	it	cs
 800826a:	2304      	movcs	r3, #4
 800826c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	3304      	adds	r3, #4
 8008272:	2b06      	cmp	r3, #6
 8008274:	d902      	bls.n	800827c <NVIC_EncodePriority+0x30>
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	3b03      	subs	r3, #3
 800827a:	e000      	b.n	800827e <NVIC_EncodePriority+0x32>
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008280:	f04f 32ff 	mov.w	r2, #4294967295
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	43da      	mvns	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	401a      	ands	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008294:	f04f 31ff 	mov.w	r1, #4294967295
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	fa01 f303 	lsl.w	r3, r1, r3
 800829e:	43d9      	mvns	r1, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082a4:	4313      	orrs	r3, r2
         );
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3724      	adds	r7, #36	; 0x24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80082b8:	f3bf 8f4f 	dsb	sy
}
 80082bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80082be:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <__NVIC_SystemReset+0x24>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80082c6:	4904      	ldr	r1, [pc, #16]	; (80082d8 <__NVIC_SystemReset+0x24>)
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <__NVIC_SystemReset+0x28>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80082ce:	f3bf 8f4f 	dsb	sy
}
 80082d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <__NVIC_SystemReset+0x20>
 80082d8:	e000ed00 	.word	0xe000ed00
 80082dc:	05fa0004 	.word	0x05fa0004

080082e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff ff35 	bl	8008158 <__NVIC_SetPriorityGrouping>
}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	4603      	mov	r3, r0
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008304:	f7ff ff4c 	bl	80081a0 <__NVIC_GetPriorityGrouping>
 8008308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	6978      	ldr	r0, [r7, #20]
 8008310:	f7ff ff9c 	bl	800824c <NVIC_EncodePriority>
 8008314:	4602      	mov	r2, r0
 8008316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff6b 	bl	80081f8 <__NVIC_SetPriority>
}
 8008322:	bf00      	nop
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	4603      	mov	r3, r0
 8008332:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff ff3f 	bl	80081bc <__NVIC_EnableIRQ>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800834a:	f7ff ffb3 	bl	80082b4 <__NVIC_SystemReset>
	...

08008350 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3b01      	subs	r3, #1
 800835c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008360:	d301      	bcc.n	8008366 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8008362:	2301      	movs	r3, #1
 8008364:	e00d      	b.n	8008382 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8008366:	4a0a      	ldr	r2, [pc, #40]	; (8008390 <HAL_SYSTICK_Config+0x40>)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3b01      	subs	r3, #1
 800836c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800836e:	4b08      	ldr	r3, [pc, #32]	; (8008390 <HAL_SYSTICK_Config+0x40>)
 8008370:	2200      	movs	r2, #0
 8008372:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <HAL_SYSTICK_Config+0x40>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a05      	ldr	r2, [pc, #20]	; (8008390 <HAL_SYSTICK_Config+0x40>)
 800837a:	f043 0303 	orr.w	r3, r3, #3
 800837e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	e000e010 	.word	0xe000e010

08008394 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d844      	bhi.n	800842c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083cb 	.word	0x080083cb
 80083ac:	080083e9 	.word	0x080083e9
 80083b0:	0800840b 	.word	0x0800840b
 80083b4:	0800842d 	.word	0x0800842d
 80083b8:	080083bd 	.word	0x080083bd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80083bc:	4b1f      	ldr	r3, [pc, #124]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1e      	ldr	r2, [pc, #120]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80083c2:	f043 0304 	orr.w	r3, r3, #4
 80083c6:	6013      	str	r3, [r2, #0]
      break;
 80083c8:	e031      	b.n	800842e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80083ca:	4b1c      	ldr	r3, [pc, #112]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1b      	ldr	r2, [pc, #108]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80083d0:	f023 0304 	bic.w	r3, r3, #4
 80083d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80083d6:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80083d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083dc:	4a18      	ldr	r2, [pc, #96]	; (8008440 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80083de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80083e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 80083e6:	e022      	b.n	800842e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80083e8:	4b14      	ldr	r3, [pc, #80]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a13      	ldr	r2, [pc, #76]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80083ee:	f023 0304 	bic.w	r3, r3, #4
 80083f2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80083f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80083fe:	4a10      	ldr	r2, [pc, #64]	; (8008440 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 8008408:	e011      	b.n	800842e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800840a:	4b0c      	ldr	r3, [pc, #48]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a0b      	ldr	r2, [pc, #44]	; (800843c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008410:	f023 0304 	bic.w	r3, r3, #4
 8008414:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8008416:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800841c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008420:	4a07      	ldr	r2, [pc, #28]	; (8008440 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008422:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      break;
 800842a:	e000      	b.n	800842e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800842c:	bf00      	nop
  }
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	e000e010 	.word	0xe000e010
 8008440:	46020c00 	.word	0x46020c00

08008444 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800844a:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8008456:	2304      	movs	r3, #4
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	e021      	b.n	80084a0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800845c:	4b15      	ldr	r3, [pc, #84]	; (80084b4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800845e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008462:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008466:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800846e:	d011      	beq.n	8008494 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008476:	d810      	bhi.n	800849a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008484:	d003      	beq.n	800848e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8008486:	e008      	b.n	800849a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8008488:	2300      	movs	r3, #0
 800848a:	607b      	str	r3, [r7, #4]
        break;
 800848c:	e008      	b.n	80084a0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800848e:	2301      	movs	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
        break;
 8008492:	e005      	b.n	80084a0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8008494:	2302      	movs	r3, #2
 8008496:	607b      	str	r3, [r7, #4]
        break;
 8008498:	e002      	b.n	80084a0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
        break;
 800849e:	bf00      	nop
    }
  }
  return systick_source;
 80084a0:	687b      	ldr	r3, [r7, #4]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	e000e010 	.word	0xe000e010
 80084b4:	46020c00 	.word	0x46020c00

080084b8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80084c0:	f7fd fbfe 	bl	8005cc0 <HAL_GetTick>
 80084c4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0db      	b.n	8008688 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a6e      	ldr	r2, [pc, #440]	; (8008690 <HAL_DMA_Init+0x1d8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f000 809f 	beq.w	800861a <HAL_DMA_Init+0x162>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6c      	ldr	r2, [pc, #432]	; (8008694 <HAL_DMA_Init+0x1dc>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f000 8099 	beq.w	800861a <HAL_DMA_Init+0x162>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a6a      	ldr	r2, [pc, #424]	; (8008698 <HAL_DMA_Init+0x1e0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f000 8093 	beq.w	800861a <HAL_DMA_Init+0x162>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a68      	ldr	r2, [pc, #416]	; (800869c <HAL_DMA_Init+0x1e4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f000 808d 	beq.w	800861a <HAL_DMA_Init+0x162>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a66      	ldr	r2, [pc, #408]	; (80086a0 <HAL_DMA_Init+0x1e8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	f000 8087 	beq.w	800861a <HAL_DMA_Init+0x162>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a64      	ldr	r2, [pc, #400]	; (80086a4 <HAL_DMA_Init+0x1ec>)
 8008512:	4293      	cmp	r3, r2
 8008514:	f000 8081 	beq.w	800861a <HAL_DMA_Init+0x162>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a62      	ldr	r2, [pc, #392]	; (80086a8 <HAL_DMA_Init+0x1f0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d07b      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a61      	ldr	r2, [pc, #388]	; (80086ac <HAL_DMA_Init+0x1f4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d076      	beq.n	800861a <HAL_DMA_Init+0x162>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a5f      	ldr	r2, [pc, #380]	; (80086b0 <HAL_DMA_Init+0x1f8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d071      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a5e      	ldr	r2, [pc, #376]	; (80086b4 <HAL_DMA_Init+0x1fc>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d06c      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a5c      	ldr	r2, [pc, #368]	; (80086b8 <HAL_DMA_Init+0x200>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d067      	beq.n	800861a <HAL_DMA_Init+0x162>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a5b      	ldr	r2, [pc, #364]	; (80086bc <HAL_DMA_Init+0x204>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d062      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a59      	ldr	r2, [pc, #356]	; (80086c0 <HAL_DMA_Init+0x208>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d05d      	beq.n	800861a <HAL_DMA_Init+0x162>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a58      	ldr	r2, [pc, #352]	; (80086c4 <HAL_DMA_Init+0x20c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d058      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a56      	ldr	r2, [pc, #344]	; (80086c8 <HAL_DMA_Init+0x210>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d053      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a55      	ldr	r2, [pc, #340]	; (80086cc <HAL_DMA_Init+0x214>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d04e      	beq.n	800861a <HAL_DMA_Init+0x162>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a53      	ldr	r2, [pc, #332]	; (80086d0 <HAL_DMA_Init+0x218>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d049      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a52      	ldr	r2, [pc, #328]	; (80086d4 <HAL_DMA_Init+0x21c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d044      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a50      	ldr	r2, [pc, #320]	; (80086d8 <HAL_DMA_Init+0x220>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d03f      	beq.n	800861a <HAL_DMA_Init+0x162>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a4f      	ldr	r2, [pc, #316]	; (80086dc <HAL_DMA_Init+0x224>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d03a      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a4d      	ldr	r2, [pc, #308]	; (80086e0 <HAL_DMA_Init+0x228>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d035      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a4c      	ldr	r2, [pc, #304]	; (80086e4 <HAL_DMA_Init+0x22c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d030      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a4a      	ldr	r2, [pc, #296]	; (80086e8 <HAL_DMA_Init+0x230>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d02b      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a49      	ldr	r2, [pc, #292]	; (80086ec <HAL_DMA_Init+0x234>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d026      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a47      	ldr	r2, [pc, #284]	; (80086f0 <HAL_DMA_Init+0x238>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d021      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a46      	ldr	r2, [pc, #280]	; (80086f4 <HAL_DMA_Init+0x23c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d01c      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a44      	ldr	r2, [pc, #272]	; (80086f8 <HAL_DMA_Init+0x240>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d017      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a43      	ldr	r2, [pc, #268]	; (80086fc <HAL_DMA_Init+0x244>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d012      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a41      	ldr	r2, [pc, #260]	; (8008700 <HAL_DMA_Init+0x248>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00d      	beq.n	800861a <HAL_DMA_Init+0x162>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a40      	ldr	r2, [pc, #256]	; (8008704 <HAL_DMA_Init+0x24c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d008      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a3e      	ldr	r2, [pc, #248]	; (8008708 <HAL_DMA_Init+0x250>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <HAL_DMA_Init+0x162>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a3d      	ldr	r2, [pc, #244]	; (800870c <HAL_DMA_Init+0x254>)
 8008618:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695a      	ldr	r2, [r3, #20]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0206 	orr.w	r2, r2, #6
 8008638:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800863a:	e00f      	b.n	800865c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800863c:	f7fd fb40 	bl	8005cc0 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b05      	cmp	r3, #5
 8008648:	d908      	bls.n	800865c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2210      	movs	r2, #16
 800864e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2203      	movs	r2, #3
 8008654:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e015      	b.n	8008688 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e8      	bne.n	800863c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb26 	bl	8008cbc <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40020050 	.word	0x40020050
 8008694:	50020050 	.word	0x50020050
 8008698:	400200d0 	.word	0x400200d0
 800869c:	500200d0 	.word	0x500200d0
 80086a0:	40020150 	.word	0x40020150
 80086a4:	50020150 	.word	0x50020150
 80086a8:	400201d0 	.word	0x400201d0
 80086ac:	500201d0 	.word	0x500201d0
 80086b0:	40020250 	.word	0x40020250
 80086b4:	50020250 	.word	0x50020250
 80086b8:	400202d0 	.word	0x400202d0
 80086bc:	500202d0 	.word	0x500202d0
 80086c0:	40020350 	.word	0x40020350
 80086c4:	50020350 	.word	0x50020350
 80086c8:	400203d0 	.word	0x400203d0
 80086cc:	500203d0 	.word	0x500203d0
 80086d0:	40020450 	.word	0x40020450
 80086d4:	50020450 	.word	0x50020450
 80086d8:	400204d0 	.word	0x400204d0
 80086dc:	500204d0 	.word	0x500204d0
 80086e0:	40020550 	.word	0x40020550
 80086e4:	50020550 	.word	0x50020550
 80086e8:	400205d0 	.word	0x400205d0
 80086ec:	500205d0 	.word	0x500205d0
 80086f0:	40020650 	.word	0x40020650
 80086f4:	50020650 	.word	0x50020650
 80086f8:	400206d0 	.word	0x400206d0
 80086fc:	500206d0 	.word	0x500206d0
 8008700:	40020750 	.word	0x40020750
 8008704:	50020750 	.word	0x50020750
 8008708:	400207d0 	.word	0x400207d0
 800870c:	500207d0 	.word	0x500207d0

08008710 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e04f      	b.n	80087c8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_DMA_Start_IT+0x26>
 8008732:	2302      	movs	r3, #2
 8008734:	e048      	b.n	80087c8 <HAL_DMA_Start_IT+0xb8>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b01      	cmp	r3, #1
 8008748:	d136      	bne.n	80087b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fa86 	bl	8008c70 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	695a      	ldr	r2, [r3, #20]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8008772:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	695a      	ldr	r2, [r3, #20]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695a      	ldr	r2, [r3, #20]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087a2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e007      	b.n	80087c8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2240      	movs	r2, #64	; 0x40
 80087bc:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80087d8:	f7fd fa72 	bl	8005cc0 <HAL_GetTick>
 80087dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e06b      	b.n	80088c0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d008      	beq.n	8008806 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e05c      	b.n	80088c0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	695a      	ldr	r2, [r3, #20]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0204 	orr.w	r2, r2, #4
 8008814:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2205      	movs	r2, #5
 800881a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800881e:	e020      	b.n	8008862 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008820:	f7fd fa4e 	bl	8005cc0 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b05      	cmp	r3, #5
 800882c:	d919      	bls.n	8008862 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008832:	f043 0210 	orr.w	r2, r3, #16
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2203      	movs	r2, #3
 800883e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008852:	2201      	movs	r2, #1
 8008854:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e02e      	b.n	80088c0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0d7      	beq.n	8008820 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695a      	ldr	r2, [r3, #20]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0202 	orr.w	r2, r2, #2
 800887e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2204      	movs	r2, #4
 8008884:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008890:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088aa:	2201      	movs	r2, #1
 80088ac:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e019      	b.n	800890e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d004      	beq.n	80088f0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e00e      	b.n	800890e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2204      	movs	r2, #4
 80088f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6812      	ldr	r2, [r2, #0]
 8008902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008906:	f043 0304 	orr.w	r3, r3, #4
 800890a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b086      	sub	sp, #24
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800892a:	f023 030f 	bic.w	r3, r3, #15
 800892e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008938:	3b50      	subs	r3, #80	; 0x50
 800893a:	09db      	lsrs	r3, r3, #7
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	2201      	movs	r2, #1
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4013      	ands	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 813b 	beq.w	8008bd0 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008964:	2b00      	cmp	r3, #0
 8008966:	d011      	beq.n	800898c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800897e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	f043 0201 	orr.w	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008996:	2b00      	cmp	r3, #0
 8008998:	d011      	beq.n	80089be <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089b0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b6:	f043 0202 	orr.w	r2, r3, #2
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d011      	beq.n	80089f0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089e2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e8:	f043 0204 	orr.w	r2, r3, #4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d011      	beq.n	8008a22 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a14:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1a:	f043 0208 	orr.w	r2, r3, #8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d013      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a46:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d04c      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d045      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a7c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d12e      	bne.n	8008ae8 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a98:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0202 	orr.w	r2, r2, #2
 8008aa8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d07a      	beq.n	8008bd4 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
        }

        return;
 8008ae6:	e075      	b.n	8008bd4 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2205      	movs	r2, #5
 8008aec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d039      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d032      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d012      	beq.n	8008b4e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d116      	bne.n	8008b60 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d111      	bne.n	8008b60 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b48:	2201      	movs	r2, #1
 8008b4a:	731a      	strb	r2, [r3, #12]
 8008b4c:	e008      	b.n	8008b60 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d103      	bne.n	8008b60 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008b68:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d025      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0202 	orr.w	r2, r2, #2
 8008b98:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d007      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
 8008bce:	e002      	b.n	8008bd6 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8008bd4:	bf00      	nop
    }
  }
}
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008bea:	b2db      	uxtb	r3, r3
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e02b      	b.n	8008c64 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c14:	f023 030f 	bic.w	r3, r3, #15
 8008c18:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c22:	3b50      	subs	r3, #80	; 0x50
 8008c24:	09db      	lsrs	r3, r3, #7
 8008c26:	f003 031f 	and.w	r3, r3, #31
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d012      	beq.n	8008c62 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f003 0311 	and.w	r3, r3, #17
 8008c42:	2b11      	cmp	r3, #17
 8008c44:	d106      	bne.n	8008c54 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	605a      	str	r2, [r3, #4]
 8008c52:	e006      	b.n	8008c62 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	401a      	ands	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c84:	0c1b      	lsrs	r3, r3, #16
 8008c86:	041b      	lsls	r3, r3, #16
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	b291      	uxth	r1, r2
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	6812      	ldr	r2, [r2, #0]
 8008c90:	430b      	orrs	r3, r1
 8008c92:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008c9c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
	...

08008cbc <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a53      	ldr	r2, [pc, #332]	; (8008e48 <DMA_Init+0x18c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	f000 80a0 	beq.w	8008e42 <DMA_Init+0x186>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a51      	ldr	r2, [pc, #324]	; (8008e4c <DMA_Init+0x190>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	f000 809a 	beq.w	8008e42 <DMA_Init+0x186>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a4f      	ldr	r2, [pc, #316]	; (8008e50 <DMA_Init+0x194>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	f000 8094 	beq.w	8008e42 <DMA_Init+0x186>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a4d      	ldr	r2, [pc, #308]	; (8008e54 <DMA_Init+0x198>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	f000 808e 	beq.w	8008e42 <DMA_Init+0x186>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a4b      	ldr	r2, [pc, #300]	; (8008e58 <DMA_Init+0x19c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	f000 8088 	beq.w	8008e42 <DMA_Init+0x186>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a49      	ldr	r2, [pc, #292]	; (8008e5c <DMA_Init+0x1a0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	f000 8082 	beq.w	8008e42 <DMA_Init+0x186>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a47      	ldr	r2, [pc, #284]	; (8008e60 <DMA_Init+0x1a4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d07c      	beq.n	8008e42 <DMA_Init+0x186>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a45      	ldr	r2, [pc, #276]	; (8008e64 <DMA_Init+0x1a8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d077      	beq.n	8008e42 <DMA_Init+0x186>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a44      	ldr	r2, [pc, #272]	; (8008e68 <DMA_Init+0x1ac>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d072      	beq.n	8008e42 <DMA_Init+0x186>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a42      	ldr	r2, [pc, #264]	; (8008e6c <DMA_Init+0x1b0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d06d      	beq.n	8008e42 <DMA_Init+0x186>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a41      	ldr	r2, [pc, #260]	; (8008e70 <DMA_Init+0x1b4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d068      	beq.n	8008e42 <DMA_Init+0x186>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a3f      	ldr	r2, [pc, #252]	; (8008e74 <DMA_Init+0x1b8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d063      	beq.n	8008e42 <DMA_Init+0x186>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a3e      	ldr	r2, [pc, #248]	; (8008e78 <DMA_Init+0x1bc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d05e      	beq.n	8008e42 <DMA_Init+0x186>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a3c      	ldr	r2, [pc, #240]	; (8008e7c <DMA_Init+0x1c0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d059      	beq.n	8008e42 <DMA_Init+0x186>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a3b      	ldr	r2, [pc, #236]	; (8008e80 <DMA_Init+0x1c4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d054      	beq.n	8008e42 <DMA_Init+0x186>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a39      	ldr	r2, [pc, #228]	; (8008e84 <DMA_Init+0x1c8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d04f      	beq.n	8008e42 <DMA_Init+0x186>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a38      	ldr	r2, [pc, #224]	; (8008e88 <DMA_Init+0x1cc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d04a      	beq.n	8008e42 <DMA_Init+0x186>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a36      	ldr	r2, [pc, #216]	; (8008e8c <DMA_Init+0x1d0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d045      	beq.n	8008e42 <DMA_Init+0x186>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a35      	ldr	r2, [pc, #212]	; (8008e90 <DMA_Init+0x1d4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d040      	beq.n	8008e42 <DMA_Init+0x186>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a33      	ldr	r2, [pc, #204]	; (8008e94 <DMA_Init+0x1d8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d03b      	beq.n	8008e42 <DMA_Init+0x186>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a32      	ldr	r2, [pc, #200]	; (8008e98 <DMA_Init+0x1dc>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d036      	beq.n	8008e42 <DMA_Init+0x186>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a30      	ldr	r2, [pc, #192]	; (8008e9c <DMA_Init+0x1e0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d031      	beq.n	8008e42 <DMA_Init+0x186>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a2f      	ldr	r2, [pc, #188]	; (8008ea0 <DMA_Init+0x1e4>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d02c      	beq.n	8008e42 <DMA_Init+0x186>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a2d      	ldr	r2, [pc, #180]	; (8008ea4 <DMA_Init+0x1e8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d027      	beq.n	8008e42 <DMA_Init+0x186>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a2c      	ldr	r2, [pc, #176]	; (8008ea8 <DMA_Init+0x1ec>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d022      	beq.n	8008e42 <DMA_Init+0x186>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a2a      	ldr	r2, [pc, #168]	; (8008eac <DMA_Init+0x1f0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d01d      	beq.n	8008e42 <DMA_Init+0x186>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a29      	ldr	r2, [pc, #164]	; (8008eb0 <DMA_Init+0x1f4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d018      	beq.n	8008e42 <DMA_Init+0x186>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a27      	ldr	r2, [pc, #156]	; (8008eb4 <DMA_Init+0x1f8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d013      	beq.n	8008e42 <DMA_Init+0x186>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a26      	ldr	r2, [pc, #152]	; (8008eb8 <DMA_Init+0x1fc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00e      	beq.n	8008e42 <DMA_Init+0x186>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a24      	ldr	r2, [pc, #144]	; (8008ebc <DMA_Init+0x200>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d009      	beq.n	8008e42 <DMA_Init+0x186>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a23      	ldr	r2, [pc, #140]	; (8008ec0 <DMA_Init+0x204>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d004      	beq.n	8008e42 <DMA_Init+0x186>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a21      	ldr	r2, [pc, #132]	; (8008ec4 <DMA_Init+0x208>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d142      	bne.n	8008ec8 <DMA_Init+0x20c>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e041      	b.n	8008eca <DMA_Init+0x20e>
 8008e46:	bf00      	nop
 8008e48:	40020050 	.word	0x40020050
 8008e4c:	50020050 	.word	0x50020050
 8008e50:	400200d0 	.word	0x400200d0
 8008e54:	500200d0 	.word	0x500200d0
 8008e58:	40020150 	.word	0x40020150
 8008e5c:	50020150 	.word	0x50020150
 8008e60:	400201d0 	.word	0x400201d0
 8008e64:	500201d0 	.word	0x500201d0
 8008e68:	40020250 	.word	0x40020250
 8008e6c:	50020250 	.word	0x50020250
 8008e70:	400202d0 	.word	0x400202d0
 8008e74:	500202d0 	.word	0x500202d0
 8008e78:	40020350 	.word	0x40020350
 8008e7c:	50020350 	.word	0x50020350
 8008e80:	400203d0 	.word	0x400203d0
 8008e84:	500203d0 	.word	0x500203d0
 8008e88:	40020450 	.word	0x40020450
 8008e8c:	50020450 	.word	0x50020450
 8008e90:	400204d0 	.word	0x400204d0
 8008e94:	500204d0 	.word	0x500204d0
 8008e98:	40020550 	.word	0x40020550
 8008e9c:	50020550 	.word	0x50020550
 8008ea0:	400205d0 	.word	0x400205d0
 8008ea4:	500205d0 	.word	0x500205d0
 8008ea8:	40020650 	.word	0x40020650
 8008eac:	50020650 	.word	0x50020650
 8008eb0:	400206d0 	.word	0x400206d0
 8008eb4:	500206d0 	.word	0x500206d0
 8008eb8:	40020750 	.word	0x40020750
 8008ebc:	50020750 	.word	0x50020750
 8008ec0:	400207d0 	.word	0x400207d0
 8008ec4:	500207d0 	.word	0x500207d0
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d012      	beq.n	8008ef4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	051b      	lsls	r3, r3, #20
 8008eda:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008ede:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008eec:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f26:	f040 80b0 	bne.w	800908a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a82      	ldr	r2, [pc, #520]	; (8009138 <DMA_Init+0x47c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f000 80a0 	beq.w	8009076 <DMA_Init+0x3ba>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a80      	ldr	r2, [pc, #512]	; (800913c <DMA_Init+0x480>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	f000 809a 	beq.w	8009076 <DMA_Init+0x3ba>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a7e      	ldr	r2, [pc, #504]	; (8009140 <DMA_Init+0x484>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	f000 8094 	beq.w	8009076 <DMA_Init+0x3ba>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a7c      	ldr	r2, [pc, #496]	; (8009144 <DMA_Init+0x488>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	f000 808e 	beq.w	8009076 <DMA_Init+0x3ba>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a7a      	ldr	r2, [pc, #488]	; (8009148 <DMA_Init+0x48c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	f000 8088 	beq.w	8009076 <DMA_Init+0x3ba>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a78      	ldr	r2, [pc, #480]	; (800914c <DMA_Init+0x490>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	f000 8082 	beq.w	8009076 <DMA_Init+0x3ba>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a76      	ldr	r2, [pc, #472]	; (8009150 <DMA_Init+0x494>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d07c      	beq.n	8009076 <DMA_Init+0x3ba>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a74      	ldr	r2, [pc, #464]	; (8009154 <DMA_Init+0x498>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d077      	beq.n	8009076 <DMA_Init+0x3ba>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a73      	ldr	r2, [pc, #460]	; (8009158 <DMA_Init+0x49c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d072      	beq.n	8009076 <DMA_Init+0x3ba>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a71      	ldr	r2, [pc, #452]	; (800915c <DMA_Init+0x4a0>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d06d      	beq.n	8009076 <DMA_Init+0x3ba>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a70      	ldr	r2, [pc, #448]	; (8009160 <DMA_Init+0x4a4>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d068      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a6e      	ldr	r2, [pc, #440]	; (8009164 <DMA_Init+0x4a8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d063      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a6d      	ldr	r2, [pc, #436]	; (8009168 <DMA_Init+0x4ac>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d05e      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a6b      	ldr	r2, [pc, #428]	; (800916c <DMA_Init+0x4b0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d059      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a6a      	ldr	r2, [pc, #424]	; (8009170 <DMA_Init+0x4b4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d054      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a68      	ldr	r2, [pc, #416]	; (8009174 <DMA_Init+0x4b8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d04f      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a67      	ldr	r2, [pc, #412]	; (8009178 <DMA_Init+0x4bc>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d04a      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a65      	ldr	r2, [pc, #404]	; (800917c <DMA_Init+0x4c0>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d045      	beq.n	8009076 <DMA_Init+0x3ba>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a64      	ldr	r2, [pc, #400]	; (8009180 <DMA_Init+0x4c4>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d040      	beq.n	8009076 <DMA_Init+0x3ba>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a62      	ldr	r2, [pc, #392]	; (8009184 <DMA_Init+0x4c8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d03b      	beq.n	8009076 <DMA_Init+0x3ba>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a61      	ldr	r2, [pc, #388]	; (8009188 <DMA_Init+0x4cc>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d036      	beq.n	8009076 <DMA_Init+0x3ba>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a5f      	ldr	r2, [pc, #380]	; (800918c <DMA_Init+0x4d0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d031      	beq.n	8009076 <DMA_Init+0x3ba>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a5e      	ldr	r2, [pc, #376]	; (8009190 <DMA_Init+0x4d4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d02c      	beq.n	8009076 <DMA_Init+0x3ba>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a5c      	ldr	r2, [pc, #368]	; (8009194 <DMA_Init+0x4d8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d027      	beq.n	8009076 <DMA_Init+0x3ba>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a5b      	ldr	r2, [pc, #364]	; (8009198 <DMA_Init+0x4dc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d022      	beq.n	8009076 <DMA_Init+0x3ba>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a59      	ldr	r2, [pc, #356]	; (800919c <DMA_Init+0x4e0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d01d      	beq.n	8009076 <DMA_Init+0x3ba>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a58      	ldr	r2, [pc, #352]	; (80091a0 <DMA_Init+0x4e4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d018      	beq.n	8009076 <DMA_Init+0x3ba>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a56      	ldr	r2, [pc, #344]	; (80091a4 <DMA_Init+0x4e8>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <DMA_Init+0x3ba>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a55      	ldr	r2, [pc, #340]	; (80091a8 <DMA_Init+0x4ec>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00e      	beq.n	8009076 <DMA_Init+0x3ba>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a53      	ldr	r2, [pc, #332]	; (80091ac <DMA_Init+0x4f0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d009      	beq.n	8009076 <DMA_Init+0x3ba>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a52      	ldr	r2, [pc, #328]	; (80091b0 <DMA_Init+0x4f4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <DMA_Init+0x3ba>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a50      	ldr	r2, [pc, #320]	; (80091b4 <DMA_Init+0x4f8>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d101      	bne.n	800907a <DMA_Init+0x3be>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <DMA_Init+0x3c0>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00d      	beq.n	800909c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e008      	b.n	800909c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009092:	d103      	bne.n	800909c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800909a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a2:	4b45      	ldr	r3, [pc, #276]	; (80091b8 <DMA_Init+0x4fc>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6812      	ldr	r2, [r2, #0]
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2200      	movs	r2, #0
 80090b6:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a36      	ldr	r2, [pc, #216]	; (8009198 <DMA_Init+0x4dc>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d022      	beq.n	8009108 <DMA_Init+0x44c>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a35      	ldr	r2, [pc, #212]	; (800919c <DMA_Init+0x4e0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d01d      	beq.n	8009108 <DMA_Init+0x44c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a33      	ldr	r2, [pc, #204]	; (80091a0 <DMA_Init+0x4e4>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d018      	beq.n	8009108 <DMA_Init+0x44c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a32      	ldr	r2, [pc, #200]	; (80091a4 <DMA_Init+0x4e8>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d013      	beq.n	8009108 <DMA_Init+0x44c>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a30      	ldr	r2, [pc, #192]	; (80091a8 <DMA_Init+0x4ec>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00e      	beq.n	8009108 <DMA_Init+0x44c>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a2f      	ldr	r2, [pc, #188]	; (80091ac <DMA_Init+0x4f0>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d009      	beq.n	8009108 <DMA_Init+0x44c>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a2d      	ldr	r2, [pc, #180]	; (80091b0 <DMA_Init+0x4f4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d004      	beq.n	8009108 <DMA_Init+0x44c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a2c      	ldr	r2, [pc, #176]	; (80091b4 <DMA_Init+0x4f8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d101      	bne.n	800910c <DMA_Init+0x450>
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <DMA_Init+0x452>
 800910c:	2300      	movs	r3, #0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2200      	movs	r2, #0
 8009118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2200      	movs	r2, #0
 8009120:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2200      	movs	r2, #0
 8009128:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40020050 	.word	0x40020050
 800913c:	50020050 	.word	0x50020050
 8009140:	400200d0 	.word	0x400200d0
 8009144:	500200d0 	.word	0x500200d0
 8009148:	40020150 	.word	0x40020150
 800914c:	50020150 	.word	0x50020150
 8009150:	400201d0 	.word	0x400201d0
 8009154:	500201d0 	.word	0x500201d0
 8009158:	40020250 	.word	0x40020250
 800915c:	50020250 	.word	0x50020250
 8009160:	400202d0 	.word	0x400202d0
 8009164:	500202d0 	.word	0x500202d0
 8009168:	40020350 	.word	0x40020350
 800916c:	50020350 	.word	0x50020350
 8009170:	400203d0 	.word	0x400203d0
 8009174:	500203d0 	.word	0x500203d0
 8009178:	40020450 	.word	0x40020450
 800917c:	50020450 	.word	0x50020450
 8009180:	400204d0 	.word	0x400204d0
 8009184:	500204d0 	.word	0x500204d0
 8009188:	40020550 	.word	0x40020550
 800918c:	50020550 	.word	0x50020550
 8009190:	400205d0 	.word	0x400205d0
 8009194:	500205d0 	.word	0x500205d0
 8009198:	40020650 	.word	0x40020650
 800919c:	50020650 	.word	0x50020650
 80091a0:	400206d0 	.word	0x400206d0
 80091a4:	500206d0 	.word	0x500206d0
 80091a8:	40020750 	.word	0x40020750
 80091ac:	50020750 	.word	0x50020750
 80091b0:	400207d0 	.word	0x400207d0
 80091b4:	500207d0 	.word	0x500207d0
 80091b8:	3c803180 	.word	0x3c803180

080091bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e053      	b.n	8009276 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7fb fab6 	bl	8004754 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80091fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6851      	ldr	r1, [r2, #4]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	69d2      	ldr	r2, [r2, #28]
 8009206:	4311      	orrs	r1, r2
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	430b      	orrs	r3, r1
 800920e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009216:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	6891      	ldr	r1, [r2, #8]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6992      	ldr	r2, [r2, #24]
 8009226:	4311      	orrs	r1, r2
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	430b      	orrs	r3, r1
 800922e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	0c1b      	lsrs	r3, r3, #16
 8009238:	041b      	lsls	r3, r3, #16
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	68d1      	ldr	r1, [r2, #12]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	430b      	orrs	r3, r1
 8009244:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	051a      	lsls	r2, r3, #20
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	055b      	lsls	r3, r3, #21
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_DMA2D_ConfigLayer+0x24>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e092      	b.n	80093ca <HAL_DMA2D_ConfigLayer+0x14a>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	4613      	mov	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	3328      	adds	r3, #40	; 0x28
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80092d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80092e4:	4b3c      	ldr	r3, [pc, #240]	; (80093d8 <HAL_DMA2D_ConfigLayer+0x158>)
 80092e6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2b0a      	cmp	r3, #10
 80092ee:	d003      	beq.n	80092f8 <HAL_DMA2D_ConfigLayer+0x78>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2b09      	cmp	r3, #9
 80092f6:	d107      	bne.n	8009308 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	4313      	orrs	r3, r2
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	e005      	b.n	8009314 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	061b      	lsls	r3, r3, #24
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	4313      	orrs	r3, r2
 8009312:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d120      	bne.n	800935c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	43db      	mvns	r3, r3
 8009324:	ea02 0103 	and.w	r1, r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	430a      	orrs	r2, r1
 8009330:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	6812      	ldr	r2, [r2, #0]
 800933a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b0a      	cmp	r3, #10
 8009342:	d003      	beq.n	800934c <HAL_DMA2D_ConfigLayer+0xcc>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2b09      	cmp	r3, #9
 800934a:	d135      	bne.n	80093b8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009358:	629a      	str	r2, [r3, #40]	; 0x28
 800935a:	e02d      	b.n	80093b8 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b0b      	cmp	r3, #11
 8009362:	d109      	bne.n	8009378 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	049b      	lsls	r3, r3, #18
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8009376:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	69da      	ldr	r2, [r3, #28]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	43db      	mvns	r3, r3
 8009382:	ea02 0103 	and.w	r1, r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	430a      	orrs	r2, r1
 800938e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2b0a      	cmp	r3, #10
 80093a0:	d003      	beq.n	80093aa <HAL_DMA2D_ConfigLayer+0x12a>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2b09      	cmp	r3, #9
 80093a8:	d106      	bne.n	80093b8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80093b6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	ff33000f 	.word	0xff33000f

080093dc <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80093e4:	f7fc fc6c 	bl	8005cc0 <HAL_GetTick>
 80093e8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e0db      	b.n	80095ac <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a6e      	ldr	r2, [pc, #440]	; (80095b4 <HAL_DMAEx_List_Init+0x1d8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	f000 809f 	beq.w	800953e <HAL_DMAEx_List_Init+0x162>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a6c      	ldr	r2, [pc, #432]	; (80095b8 <HAL_DMAEx_List_Init+0x1dc>)
 8009406:	4293      	cmp	r3, r2
 8009408:	f000 8099 	beq.w	800953e <HAL_DMAEx_List_Init+0x162>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a6a      	ldr	r2, [pc, #424]	; (80095bc <HAL_DMAEx_List_Init+0x1e0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f000 8093 	beq.w	800953e <HAL_DMAEx_List_Init+0x162>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a68      	ldr	r2, [pc, #416]	; (80095c0 <HAL_DMAEx_List_Init+0x1e4>)
 800941e:	4293      	cmp	r3, r2
 8009420:	f000 808d 	beq.w	800953e <HAL_DMAEx_List_Init+0x162>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a66      	ldr	r2, [pc, #408]	; (80095c4 <HAL_DMAEx_List_Init+0x1e8>)
 800942a:	4293      	cmp	r3, r2
 800942c:	f000 8087 	beq.w	800953e <HAL_DMAEx_List_Init+0x162>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a64      	ldr	r2, [pc, #400]	; (80095c8 <HAL_DMAEx_List_Init+0x1ec>)
 8009436:	4293      	cmp	r3, r2
 8009438:	f000 8081 	beq.w	800953e <HAL_DMAEx_List_Init+0x162>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a62      	ldr	r2, [pc, #392]	; (80095cc <HAL_DMAEx_List_Init+0x1f0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d07b      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a61      	ldr	r2, [pc, #388]	; (80095d0 <HAL_DMAEx_List_Init+0x1f4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d076      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a5f      	ldr	r2, [pc, #380]	; (80095d4 <HAL_DMAEx_List_Init+0x1f8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d071      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a5e      	ldr	r2, [pc, #376]	; (80095d8 <HAL_DMAEx_List_Init+0x1fc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d06c      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a5c      	ldr	r2, [pc, #368]	; (80095dc <HAL_DMAEx_List_Init+0x200>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d067      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a5b      	ldr	r2, [pc, #364]	; (80095e0 <HAL_DMAEx_List_Init+0x204>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d062      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a59      	ldr	r2, [pc, #356]	; (80095e4 <HAL_DMAEx_List_Init+0x208>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d05d      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a58      	ldr	r2, [pc, #352]	; (80095e8 <HAL_DMAEx_List_Init+0x20c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d058      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a56      	ldr	r2, [pc, #344]	; (80095ec <HAL_DMAEx_List_Init+0x210>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d053      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a55      	ldr	r2, [pc, #340]	; (80095f0 <HAL_DMAEx_List_Init+0x214>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d04e      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a53      	ldr	r2, [pc, #332]	; (80095f4 <HAL_DMAEx_List_Init+0x218>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d049      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a52      	ldr	r2, [pc, #328]	; (80095f8 <HAL_DMAEx_List_Init+0x21c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d044      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a50      	ldr	r2, [pc, #320]	; (80095fc <HAL_DMAEx_List_Init+0x220>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d03f      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a4f      	ldr	r2, [pc, #316]	; (8009600 <HAL_DMAEx_List_Init+0x224>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d03a      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a4d      	ldr	r2, [pc, #308]	; (8009604 <HAL_DMAEx_List_Init+0x228>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d035      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a4c      	ldr	r2, [pc, #304]	; (8009608 <HAL_DMAEx_List_Init+0x22c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d030      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a4a      	ldr	r2, [pc, #296]	; (800960c <HAL_DMAEx_List_Init+0x230>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d02b      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a49      	ldr	r2, [pc, #292]	; (8009610 <HAL_DMAEx_List_Init+0x234>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d026      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a47      	ldr	r2, [pc, #284]	; (8009614 <HAL_DMAEx_List_Init+0x238>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d021      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a46      	ldr	r2, [pc, #280]	; (8009618 <HAL_DMAEx_List_Init+0x23c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d01c      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a44      	ldr	r2, [pc, #272]	; (800961c <HAL_DMAEx_List_Init+0x240>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d017      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a43      	ldr	r2, [pc, #268]	; (8009620 <HAL_DMAEx_List_Init+0x244>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d012      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a41      	ldr	r2, [pc, #260]	; (8009624 <HAL_DMAEx_List_Init+0x248>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d00d      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a40      	ldr	r2, [pc, #256]	; (8009628 <HAL_DMAEx_List_Init+0x24c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d008      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a3e      	ldr	r2, [pc, #248]	; (800962c <HAL_DMAEx_List_Init+0x250>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d003      	beq.n	800953e <HAL_DMAEx_List_Init+0x162>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a3d      	ldr	r2, [pc, #244]	; (8009630 <HAL_DMAEx_List_Init+0x254>)
 800953c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0206 	orr.w	r2, r2, #6
 800955c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800955e:	e00f      	b.n	8009580 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8009560:	f7fc fbae 	bl	8005cc0 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b05      	cmp	r3, #5
 800956c:	d908      	bls.n	8009580 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2210      	movs	r2, #16
 8009572:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2203      	movs	r2, #3
 8009578:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e015      	b.n	80095ac <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e8      	bne.n	8009560 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fae0 	bl	8009b54 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40020050 	.word	0x40020050
 80095b8:	50020050 	.word	0x50020050
 80095bc:	400200d0 	.word	0x400200d0
 80095c0:	500200d0 	.word	0x500200d0
 80095c4:	40020150 	.word	0x40020150
 80095c8:	50020150 	.word	0x50020150
 80095cc:	400201d0 	.word	0x400201d0
 80095d0:	500201d0 	.word	0x500201d0
 80095d4:	40020250 	.word	0x40020250
 80095d8:	50020250 	.word	0x50020250
 80095dc:	400202d0 	.word	0x400202d0
 80095e0:	500202d0 	.word	0x500202d0
 80095e4:	40020350 	.word	0x40020350
 80095e8:	50020350 	.word	0x50020350
 80095ec:	400203d0 	.word	0x400203d0
 80095f0:	500203d0 	.word	0x500203d0
 80095f4:	40020450 	.word	0x40020450
 80095f8:	50020450 	.word	0x50020450
 80095fc:	400204d0 	.word	0x400204d0
 8009600:	500204d0 	.word	0x500204d0
 8009604:	40020550 	.word	0x40020550
 8009608:	50020550 	.word	0x50020550
 800960c:	400205d0 	.word	0x400205d0
 8009610:	500205d0 	.word	0x500205d0
 8009614:	40020650 	.word	0x40020650
 8009618:	50020650 	.word	0x50020650
 800961c:	400206d0 	.word	0x400206d0
 8009620:	500206d0 	.word	0x500206d0
 8009624:	40020750 	.word	0x40020750
 8009628:	50020750 	.word	0x50020750
 800962c:	400207d0 	.word	0x400207d0
 8009630:	500207d0 	.word	0x500207d0

08009634 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <HAL_DMAEx_List_Start_IT+0x16>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e082      	b.n	8009754 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009654:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009660:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d005      	beq.n	8009674 <HAL_DMAEx_List_Start_IT+0x40>
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d16a      	bne.n	8009744 <HAL_DMAEx_List_Start_IT+0x110>
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d067      	beq.n	8009744 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	d157      	bne.n	8009730 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009686:	2b01      	cmp	r3, #1
 8009688:	d101      	bne.n	800968e <HAL_DMAEx_List_Start_IT+0x5a>
 800968a:	2302      	movs	r3, #2
 800968c:	e062      	b.n	8009754 <HAL_DMAEx_List_Start_IT+0x120>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2202      	movs	r2, #2
 800969a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096a2:	2202      	movs	r2, #2
 80096a4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096b0:	2200      	movs	r2, #0
 80096b2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80096c2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d007      	beq.n	80096dc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	695a      	ldr	r2, [r3, #20]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096da:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d007      	beq.n	80096f4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	695a      	ldr	r2, [r3, #20]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096f2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f107 010c 	add.w	r1, r7, #12
 80096fe:	2200      	movs	r2, #0
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fe47 	bl	800a394 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4619      	mov	r1, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	0c0b      	lsrs	r3, r1, #16
 8009714:	041b      	lsls	r3, r3, #16
 8009716:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009724:	4013      	ands	r3, r2
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6812      	ldr	r2, [r2, #0]
 800972c:	430b      	orrs	r3, r1
 800972e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	695a      	ldr	r2, [r3, #20]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	e007      	b.n	8009754 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2240      	movs	r2, #64	; 0x40
 8009748:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <HAL_DMAEx_List_BuildNode+0x16>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e004      	b.n	8009780 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fb43 	bl	8009e04 <DMA_List_BuildNode>

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e004      	b.n	80097ac <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc7f 	bl	800a0a8 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08c      	sub	sp, #48	; 0x30
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_DMAEx_List_InsertNode+0x18>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e0b6      	b.n	800993e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d104      	bne.n	80097e2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2204      	movs	r2, #4
 80097dc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e0ad      	b.n	800993e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fd66 	bl	800a2bc <DMA_List_CheckNodesBaseAddresses>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2205      	movs	r2, #5
 80097fa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e09e      	b.n	800993e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 fd87 	bl	800a31c <DMA_List_CheckNodesTypes>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2204      	movs	r2, #4
 8009818:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e08f      	b.n	800993e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2202      	movs	r2, #2
 8009822:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800982a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800982e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fdad 	bl	800a394 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d11a      	bne.n	8009878 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d106      	bne.n	8009856 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2201      	movs	r2, #1
 8009852:	609a      	str	r2, [r3, #8]
 8009854:	e06c      	b.n	8009930 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009862:	4013      	ands	r3, r2
 8009864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009868:	4319      	orrs	r1, r3
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2202      	movs	r2, #2
 8009874:	609a      	str	r2, [r3, #8]
 8009876:	e05b      	b.n	8009930 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10f      	bne.n	800989e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009888:	4013      	ands	r3, r2
 800988a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800988c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988e:	4319      	orrs	r1, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	e043      	b.n	8009926 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80098a2:	f107 0314 	add.w	r3, r7, #20
 80098a6:	461a      	mov	r2, r3
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 fda2 	bl	800a3f4 <DMA_List_FindNode>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d132      	bne.n	800991c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d11a      	bne.n	80098f6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	461a      	mov	r2, r3
 80098ce:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80098d2:	4013      	ands	r3, r2
 80098d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d8:	4319      	orrs	r1, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80098e6:	4013      	ands	r3, r2
 80098e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ec:	4319      	orrs	r1, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80098f4:	e017      	b.n	8009926 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80098f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800990c:	4013      	ands	r3, r2
 800990e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009912:	4319      	orrs	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800991a:	e004      	b.n	8009926 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2206      	movs	r2, #6
 8009920:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e00b      	b.n	800993e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3730      	adds	r7, #48	; 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b08a      	sub	sp, #40	; 0x28
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e052      	b.n	80099fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d104      	bne.n	800996a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e049      	b.n	80099fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00c      	beq.n	800998c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d101      	bne.n	8009982 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	e03d      	b.n	80099fe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2204      	movs	r2, #4
 8009986:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e038      	b.n	80099fe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d104      	bne.n	800999e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2204      	movs	r2, #4
 8009998:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e02f      	b.n	80099fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f107 0220 	add.w	r2, r7, #32
 80099b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fcec 	bl	800a394 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80099c0:	f107 030c 	add.w	r3, r7, #12
 80099c4:	461a      	mov	r2, r3
 80099c6:	2100      	movs	r1, #0
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fd13 	bl	800a3f4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80099d8:	4013      	ands	r3, r2
 80099da:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80099dc:	69ba      	ldr	r2, [r7, #24]
 80099de:	4610      	mov	r0, r2
 80099e0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80099e2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80099e4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3728      	adds	r7, #40	; 0x28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <HAL_DMAEx_List_LinkQ+0x16>
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e072      	b.n	8009b08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009a28:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d002      	beq.n	8009a3c <HAL_DMAEx_List_LinkQ+0x34>
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b05      	cmp	r3, #5
 8009a3a:	d108      	bne.n	8009a4e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2240      	movs	r2, #64	; 0x40
 8009a40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e05c      	b.n	8009b08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	7b1b      	ldrb	r3, [r3, #12]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d104      	bne.n	8009a62 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e052      	b.n	8009b08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a2b      	ldr	r2, [pc, #172]	; (8009b14 <HAL_DMAEx_List_LinkQ+0x10c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d022      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a29      	ldr	r2, [pc, #164]	; (8009b18 <HAL_DMAEx_List_LinkQ+0x110>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01d      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a28      	ldr	r2, [pc, #160]	; (8009b1c <HAL_DMAEx_List_LinkQ+0x114>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d018      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a26      	ldr	r2, [pc, #152]	; (8009b20 <HAL_DMAEx_List_LinkQ+0x118>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d013      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a25      	ldr	r2, [pc, #148]	; (8009b24 <HAL_DMAEx_List_LinkQ+0x11c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00e      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a23      	ldr	r2, [pc, #140]	; (8009b28 <HAL_DMAEx_List_LinkQ+0x120>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d009      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a22      	ldr	r2, [pc, #136]	; (8009b2c <HAL_DMAEx_List_LinkQ+0x124>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d004      	beq.n	8009ab2 <HAL_DMAEx_List_LinkQ+0xaa>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a20      	ldr	r2, [pc, #128]	; (8009b30 <HAL_DMAEx_List_LinkQ+0x128>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d101      	bne.n	8009ab6 <HAL_DMAEx_List_LinkQ+0xae>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <HAL_DMAEx_List_LinkQ+0xb0>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10b      	bne.n	8009ad4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d004      	beq.n	8009ad4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2203      	movs	r2, #3
 8009ace:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e019      	b.n	8009b08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad8:	2b81      	cmp	r3, #129	; 0x81
 8009ada:	d108      	bne.n	8009aee <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10d      	bne.n	8009b00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2204      	movs	r2, #4
 8009ae8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e00c      	b.n	8009b08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d004      	beq.n	8009b00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2204      	movs	r2, #4
 8009afa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e003      	b.n	8009b08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	40020650 	.word	0x40020650
 8009b18:	50020650 	.word	0x50020650
 8009b1c:	400206d0 	.word	0x400206d0
 8009b20:	500206d0 	.word	0x500206d0
 8009b24:	40020750 	.word	0x40020750
 8009b28:	50020750 	.word	0x50020750
 8009b2c:	400207d0 	.word	0x400207d0
 8009b30:	500207d0 	.word	0x500207d0

08009b34 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	0c1b      	lsrs	r3, r3, #16
 8009b44:	b2db      	uxtb	r3, r3
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
	...

08009b54 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a85      	ldr	r2, [pc, #532]	; (8009d84 <DMA_List_Init+0x230>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	f000 80a0 	beq.w	8009cb4 <DMA_List_Init+0x160>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a83      	ldr	r2, [pc, #524]	; (8009d88 <DMA_List_Init+0x234>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	f000 809a 	beq.w	8009cb4 <DMA_List_Init+0x160>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a81      	ldr	r2, [pc, #516]	; (8009d8c <DMA_List_Init+0x238>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	f000 8094 	beq.w	8009cb4 <DMA_List_Init+0x160>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a7f      	ldr	r2, [pc, #508]	; (8009d90 <DMA_List_Init+0x23c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	f000 808e 	beq.w	8009cb4 <DMA_List_Init+0x160>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a7d      	ldr	r2, [pc, #500]	; (8009d94 <DMA_List_Init+0x240>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	f000 8088 	beq.w	8009cb4 <DMA_List_Init+0x160>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a7b      	ldr	r2, [pc, #492]	; (8009d98 <DMA_List_Init+0x244>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f000 8082 	beq.w	8009cb4 <DMA_List_Init+0x160>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a79      	ldr	r2, [pc, #484]	; (8009d9c <DMA_List_Init+0x248>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d07c      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a78      	ldr	r2, [pc, #480]	; (8009da0 <DMA_List_Init+0x24c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d077      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a76      	ldr	r2, [pc, #472]	; (8009da4 <DMA_List_Init+0x250>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d072      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a75      	ldr	r2, [pc, #468]	; (8009da8 <DMA_List_Init+0x254>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d06d      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a73      	ldr	r2, [pc, #460]	; (8009dac <DMA_List_Init+0x258>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d068      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a72      	ldr	r2, [pc, #456]	; (8009db0 <DMA_List_Init+0x25c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d063      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a70      	ldr	r2, [pc, #448]	; (8009db4 <DMA_List_Init+0x260>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d05e      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a6f      	ldr	r2, [pc, #444]	; (8009db8 <DMA_List_Init+0x264>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d059      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a6d      	ldr	r2, [pc, #436]	; (8009dbc <DMA_List_Init+0x268>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d054      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a6c      	ldr	r2, [pc, #432]	; (8009dc0 <DMA_List_Init+0x26c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d04f      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a6a      	ldr	r2, [pc, #424]	; (8009dc4 <DMA_List_Init+0x270>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d04a      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a69      	ldr	r2, [pc, #420]	; (8009dc8 <DMA_List_Init+0x274>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d045      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a67      	ldr	r2, [pc, #412]	; (8009dcc <DMA_List_Init+0x278>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d040      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a66      	ldr	r2, [pc, #408]	; (8009dd0 <DMA_List_Init+0x27c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d03b      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a64      	ldr	r2, [pc, #400]	; (8009dd4 <DMA_List_Init+0x280>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d036      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a63      	ldr	r2, [pc, #396]	; (8009dd8 <DMA_List_Init+0x284>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d031      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a61      	ldr	r2, [pc, #388]	; (8009ddc <DMA_List_Init+0x288>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d02c      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a60      	ldr	r2, [pc, #384]	; (8009de0 <DMA_List_Init+0x28c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d027      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a5e      	ldr	r2, [pc, #376]	; (8009de4 <DMA_List_Init+0x290>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d022      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a5d      	ldr	r2, [pc, #372]	; (8009de8 <DMA_List_Init+0x294>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d01d      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a5b      	ldr	r2, [pc, #364]	; (8009dec <DMA_List_Init+0x298>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d018      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a5a      	ldr	r2, [pc, #360]	; (8009df0 <DMA_List_Init+0x29c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d013      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a58      	ldr	r2, [pc, #352]	; (8009df4 <DMA_List_Init+0x2a0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00e      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a57      	ldr	r2, [pc, #348]	; (8009df8 <DMA_List_Init+0x2a4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d009      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a55      	ldr	r2, [pc, #340]	; (8009dfc <DMA_List_Init+0x2a8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d004      	beq.n	8009cb4 <DMA_List_Init+0x160>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a54      	ldr	r2, [pc, #336]	; (8009e00 <DMA_List_Init+0x2ac>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d101      	bne.n	8009cb8 <DMA_List_Init+0x164>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <DMA_List_Init+0x166>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d004      	beq.n	8009cc8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009cec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2200      	movs	r2, #0
 8009d04:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a36      	ldr	r2, [pc, #216]	; (8009de4 <DMA_List_Init+0x290>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d022      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a34      	ldr	r2, [pc, #208]	; (8009de8 <DMA_List_Init+0x294>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d01d      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a33      	ldr	r2, [pc, #204]	; (8009dec <DMA_List_Init+0x298>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d018      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a31      	ldr	r2, [pc, #196]	; (8009df0 <DMA_List_Init+0x29c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d013      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <DMA_List_Init+0x2a0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d00e      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a2e      	ldr	r2, [pc, #184]	; (8009df8 <DMA_List_Init+0x2a4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d009      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <DMA_List_Init+0x2a8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d004      	beq.n	8009d56 <DMA_List_Init+0x202>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a2b      	ldr	r2, [pc, #172]	; (8009e00 <DMA_List_Init+0x2ac>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d101      	bne.n	8009d5a <DMA_List_Init+0x206>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e000      	b.n	8009d5c <DMA_List_Init+0x208>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d007      	beq.n	8009d70 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2200      	movs	r2, #0
 8009d66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2200      	movs	r2, #0
 8009d76:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	40020050 	.word	0x40020050
 8009d88:	50020050 	.word	0x50020050
 8009d8c:	400200d0 	.word	0x400200d0
 8009d90:	500200d0 	.word	0x500200d0
 8009d94:	40020150 	.word	0x40020150
 8009d98:	50020150 	.word	0x50020150
 8009d9c:	400201d0 	.word	0x400201d0
 8009da0:	500201d0 	.word	0x500201d0
 8009da4:	40020250 	.word	0x40020250
 8009da8:	50020250 	.word	0x50020250
 8009dac:	400202d0 	.word	0x400202d0
 8009db0:	500202d0 	.word	0x500202d0
 8009db4:	40020350 	.word	0x40020350
 8009db8:	50020350 	.word	0x50020350
 8009dbc:	400203d0 	.word	0x400203d0
 8009dc0:	500203d0 	.word	0x500203d0
 8009dc4:	40020450 	.word	0x40020450
 8009dc8:	50020450 	.word	0x50020450
 8009dcc:	400204d0 	.word	0x400204d0
 8009dd0:	500204d0 	.word	0x500204d0
 8009dd4:	40020550 	.word	0x40020550
 8009dd8:	50020550 	.word	0x50020550
 8009ddc:	400205d0 	.word	0x400205d0
 8009de0:	500205d0 	.word	0x500205d0
 8009de4:	40020650 	.word	0x40020650
 8009de8:	50020650 	.word	0x50020650
 8009dec:	400206d0 	.word	0x400206d0
 8009df0:	500206d0 	.word	0x500206d0
 8009df4:	40020750 	.word	0x40020750
 8009df8:	50020750 	.word	0x50020750
 8009dfc:	400207d0 	.word	0x400207d0
 8009e00:	500207d0 	.word	0x500207d0

08009e04 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009e16:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009e1c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009e22:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8009e28:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d017      	beq.n	8009e6a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	051b      	lsls	r3, r3, #20
 8009e50:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009e54:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009e62:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009e64:	431a      	orrs	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6859      	ldr	r1, [r3, #4]
 8009e72:	f240 237f 	movw	r3, #639	; 0x27f
 8009e76:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e86:	d10c      	bne.n	8009ea2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d011      	beq.n	8009eb8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
 8009ea0:	e00a      	b.n	8009eb8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eaa:	d105      	bne.n	8009eb8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00f      	beq.n	8009ee0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ecc:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed2:	041b      	lsls	r3, r3, #16
 8009ed4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8009ed8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8009eda:	431a      	orrs	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d04e      	beq.n	8009f94 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efe:	3b01      	subs	r3, #1
 8009f00:	0419      	lsls	r1, r3, #16
 8009f02:	4b67      	ldr	r3, [pc, #412]	; (800a0a0 <DMA_List_BuildNode+0x29c>)
 8009f04:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8009f06:	431a      	orrs	r2, r3
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	da06      	bge.n	8009f22 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	609a      	str	r2, [r3, #8]
 8009f20:	e005      	b.n	8009f2e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	da06      	bge.n	8009f44 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	609a      	str	r2, [r3, #8]
 8009f42:	e005      	b.n	8009f50 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da06      	bge.n	8009f66 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	609a      	str	r2, [r3, #8]
 8009f64:	e005      	b.n	8009f72 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	da06      	bge.n	8009f88 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	609a      	str	r2, [r3, #8]
 8009f86:	e005      	b.n	8009f94 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d059      	beq.n	800a064 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da09      	bge.n	8009fcc <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fbc:	425b      	negs	r3, r3
 8009fbe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	615a      	str	r2, [r3, #20]
 8009fca:	e005      	b.n	8009fd8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	da0d      	bge.n	8009ffc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe4:	425b      	negs	r3, r3
 8009fe6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	695a      	ldr	r2, [r3, #20]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	0419      	lsls	r1, r3, #16
 8009ff0:	4b2c      	ldr	r3, [pc, #176]	; (800a0a4 <DMA_List_BuildNode+0x2a0>)
 8009ff2:	400b      	ands	r3, r1
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	615a      	str	r2, [r3, #20]
 8009ffa:	e009      	b.n	800a010 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a004:	0419      	lsls	r1, r3, #16
 800a006:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <DMA_List_BuildNode+0x2a0>)
 800a008:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800a00a:	431a      	orrs	r2, r3
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a014:	2b00      	cmp	r3, #0
 800a016:	da08      	bge.n	800a02a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01c:	425b      	negs	r3, r3
 800a01e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	b29a      	uxth	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	619a      	str	r2, [r3, #24]
 800a028:	e004      	b.n	800a034 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a02e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da0b      	bge.n	800a054 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a040:	425b      	negs	r3, r3
 800a042:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a04c:	431a      	orrs	r2, r3
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	619a      	str	r2, [r3, #24]
 800a052:	e007      	b.n	800a064 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a05c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800a05e:	431a      	orrs	r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d006      	beq.n	800a086 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800a084:	e005      	b.n	800a092 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	bf00      	nop
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	07ff0000 	.word	0x07ff0000
 800a0a4:	1fff0000 	.word	0x1fff0000

0800a0a8 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0208 	and.w	r2, r3, #8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0203 	and.w	r2, r3, #3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800a0f0:	091b      	lsrs	r3, r3, #4
 800a0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0f6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	625a      	str	r2, [r3, #36]	; 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800a100:	0d1b      	lsrs	r3, r3, #20
 800a102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a106:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	629a      	str	r2, [r3, #40]	; 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 2240 	and.w	r2, r3, #1073758208	; 0x40004000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	62da      	str	r2, [r3, #44]	; 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b66      	ldr	r3, [pc, #408]	; (800a2b8 <DMA_List_GetNodeConfig+0x210>)
 800a11e:	4013      	ands	r3, r2
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	6393      	str	r3, [r2, #56]	; 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d008      	beq.n	800a14e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a142:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a14a:	60da      	str	r2, [r3, #12]
 800a14c:	e013      	b.n	800a176 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a16c:	60da      	str	r2, [r3, #12]
 800a16e:	e002      	b.n	800a176 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	641a      	str	r2, [r3, #64]	; 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	645a      	str	r2, [r3, #68]	; 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	649a      	str	r2, [r3, #72]	; 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	669a      	str	r2, [r3, #104]	; 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d008      	beq.n	800a1dc <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1d4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	64da      	str	r2, [r3, #76]	; 0x4c
 800a1da:	e002      	b.n	800a1e2 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	661a      	str	r2, [r3, #96]	; 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	665a      	str	r2, [r3, #100]	; 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04a      	beq.n	800a294 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	b29b      	uxth	r3, r3
 800a204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a208:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800a20a:	89fa      	ldrh	r2, [r7, #14]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	651a      	str	r2, [r3, #80]	; 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	0c1b      	lsrs	r3, r3, #16
 800a216:	b29b      	uxth	r3, r3
 800a218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a21c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800a21e:	89fa      	ldrh	r2, [r7, #14]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	655a      	str	r2, [r3, #84]	; 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d004      	beq.n	800a23a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a234:	425a      	negs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24a:	425a      	negs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800a256:	89fa      	ldrh	r2, [r7, #14]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	659a      	str	r2, [r3, #88]	; 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	0c1b      	lsrs	r3, r3, #16
 800a262:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800a264:	89fa      	ldrh	r2, [r7, #14]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	65da      	str	r2, [r3, #92]	; 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d004      	beq.n	800a280 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27a:	425a      	negs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	da11      	bge.n	800a2ac <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a28c:	425a      	negs	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800a292:	e00b      	b.n	800a2ac <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	651a      	str	r2, [r3, #80]	; 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	655a      	str	r2, [r3, #84]	; 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	659a      	str	r2, [r3, #88]	; 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	0c002000 	.word	0x0c002000

0800a2bc <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	0c1b      	lsrs	r3, r3, #16
 800a2d4:	041b      	lsls	r3, r3, #16
 800a2d6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e00a      	b.n	800a2fe <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	e004      	b.n	800a2fe <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	0c1b      	lsrs	r3, r3, #16
 800a302:	041b      	lsls	r3, r3, #16
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	429a      	cmp	r2, r3
 800a308:	d001      	beq.n	800a30e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	e00e      	b.n	800a35a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e006      	b.n	800a35a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d001      	beq.n	800a370 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800a36c:	2302      	movs	r3, #2
 800a36e:	e00b      	b.n	800a388 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d007      	beq.n	800a386 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d001      	beq.n	800a386 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800a382:	2303      	movs	r3, #3
 800a384:	e000      	b.n	800a388 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00c      	beq.n	800a3c6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	4a0d      	ldr	r2, [pc, #52]	; (800a3ec <DMA_List_GetCLLRNodeInfo+0x58>)
 800a3b6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00f      	beq.n	800a3de <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2207      	movs	r2, #7
 800a3c2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800a3c4:	e00b      	b.n	800a3de <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4a08      	ldr	r2, [pc, #32]	; (800a3f0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 800a3d0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2205      	movs	r2, #5
 800a3dc:	601a      	str	r2, [r3, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	fe010000 	.word	0xfe010000
 800a3f0:	f8010000 	.word	0xf8010000

0800a3f4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b089      	sub	sp, #36	; 0x24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d142      	bne.n	800a49e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800a418:	e01d      	b.n	800a456 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d107      	bne.n	800a430 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a42a:	4013      	ands	r3, r2
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	e00f      	b.n	800a450 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	0c1b      	lsrs	r3, r3, #16
 800a43a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	4413      	add	r3, r2
 800a440:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a448:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a44c:	4013      	ands	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	3301      	adds	r3, #1
 800a454:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d3dc      	bcc.n	800a41a <DMA_List_FindNode+0x26>
 800a460:	e029      	b.n	800a4b6 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d107      	bne.n	800a478 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a472:	4013      	ands	r3, r2
 800a474:	61bb      	str	r3, [r7, #24]
 800a476:	e00f      	b.n	800a498 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	0c1b      	lsrs	r3, r3, #16
 800a482:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	4413      	add	r3, r2
 800a488:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800a490:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a494:	4013      	ands	r3, r2
 800a496:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	3301      	adds	r3, #1
 800a49c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d206      	bcs.n	800a4b6 <DMA_List_FindNode+0xc2>
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d1d5      	bne.n	800a462 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d008      	beq.n	800a4ce <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d001      	beq.n	800a4ce <DMA_List_FindNode+0xda>
    {
      return 1U;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e02b      	b.n	800a526 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	0c1b      	lsrs	r3, r3, #16
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	0c1b      	lsrs	r3, r3, #16
 800a4ea:	041b      	lsls	r3, r3, #16
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00f      	beq.n	800a524 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	461a      	mov	r2, r3
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a510:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a514:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	0c1b      	lsrs	r3, r3, #16
 800a51c:	041b      	lsls	r3, r3, #16
 800a51e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3724      	adds	r7, #36	; 0x24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a534:	b480      	push	{r7}
 800a536:	b089      	sub	sp, #36	; 0x24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a546:	e1ba      	b.n	800a8be <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	2101      	movs	r1, #1
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	fa01 f303 	lsl.w	r3, r1, r3
 800a554:	4013      	ands	r3, r2
 800a556:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 81aa 	beq.w	800a8b8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a55      	ldr	r2, [pc, #340]	; (800a6bc <HAL_GPIO_Init+0x188>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d15d      	bne.n	800a628 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a572:	2201      	movs	r2, #1
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	fa02 f303 	lsl.w	r3, r2, r3
 800a57a:	43db      	mvns	r3, r3
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	4013      	ands	r3, r2
 800a580:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f003 0201 	and.w	r2, r3, #1
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	fa02 f303 	lsl.w	r3, r2, r3
 800a590:	69fa      	ldr	r2, [r7, #28]
 800a592:	4313      	orrs	r3, r2
 800a594:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a59c:	4a48      	ldr	r2, [pc, #288]	; (800a6c0 <HAL_GPIO_Init+0x18c>)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5a4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a5a6:	4a46      	ldr	r2, [pc, #280]	; (800a6c0 <HAL_GPIO_Init+0x18c>)
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	08da      	lsrs	r2, r3, #3
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3208      	adds	r2, #8
 800a5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	220f      	movs	r2, #15
 800a5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ce:	43db      	mvns	r3, r3
 800a5d0:	69fa      	ldr	r2, [r7, #28]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	220b      	movs	r2, #11
 800a5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	08da      	lsrs	r2, r3, #3
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	3208      	adds	r2, #8
 800a5f2:	69f9      	ldr	r1, [r7, #28]
 800a5f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	2203      	movs	r2, #3
 800a604:	fa02 f303 	lsl.w	r3, r2, r3
 800a608:	43db      	mvns	r3, r3
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	4013      	ands	r3, r2
 800a60e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	2202      	movs	r2, #2
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	e067      	b.n	800a6f8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d003      	beq.n	800a638 <HAL_GPIO_Init+0x104>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	2b12      	cmp	r3, #18
 800a636:	d145      	bne.n	800a6c4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	08da      	lsrs	r2, r3, #3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3208      	adds	r2, #8
 800a640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a644:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	220f      	movs	r2, #15
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	43db      	mvns	r3, r3
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	4013      	ands	r3, r2
 800a65a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f003 020f 	and.w	r2, r3, #15
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	fa02 f303 	lsl.w	r3, r2, r3
 800a670:	69fa      	ldr	r2, [r7, #28]
 800a672:	4313      	orrs	r3, r2
 800a674:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	08da      	lsrs	r2, r3, #3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	3208      	adds	r2, #8
 800a67e:	69f9      	ldr	r1, [r7, #28]
 800a680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	2203      	movs	r2, #3
 800a690:	fa02 f303 	lsl.w	r3, r2, r3
 800a694:	43db      	mvns	r3, r3
 800a696:	69fa      	ldr	r2, [r7, #28]
 800a698:	4013      	ands	r3, r2
 800a69a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f003 0203 	and.w	r2, r3, #3
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ac:	69fa      	ldr	r2, [r7, #28]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	69fa      	ldr	r2, [r7, #28]
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	e01e      	b.n	800a6f8 <HAL_GPIO_Init+0x1c4>
 800a6ba:	bf00      	nop
 800a6bc:	46020000 	.word	0x46020000
 800a6c0:	08019480 	.word	0x08019480
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d4:	43db      	mvns	r3, r3
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	4013      	ands	r3, r2
 800a6da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f003 0203 	and.w	r2, r3, #3
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d00b      	beq.n	800a718 <HAL_GPIO_Init+0x1e4>
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2b02      	cmp	r3, #2
 800a706:	d007      	beq.n	800a718 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a70c:	2b11      	cmp	r3, #17
 800a70e:	d003      	beq.n	800a718 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	2b12      	cmp	r3, #18
 800a716:	d130      	bne.n	800a77a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	2203      	movs	r2, #3
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	43db      	mvns	r3, r3
 800a72a:	69fa      	ldr	r2, [r7, #28]
 800a72c:	4013      	ands	r3, r2
 800a72e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	4313      	orrs	r3, r2
 800a740:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	69fa      	ldr	r2, [r7, #28]
 800a746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a74e:	2201      	movs	r2, #1
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	fa02 f303 	lsl.w	r3, r2, r3
 800a756:	43db      	mvns	r3, r3
 800a758:	69fa      	ldr	r2, [r7, #28]
 800a75a:	4013      	ands	r3, r2
 800a75c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	091b      	lsrs	r3, r3, #4
 800a764:	f003 0201 	and.w	r2, r3, #1
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	fa02 f303 	lsl.w	r3, r2, r3
 800a76e:	69fa      	ldr	r2, [r7, #28]
 800a770:	4313      	orrs	r3, r2
 800a772:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d017      	beq.n	800a7b2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	2203      	movs	r2, #3
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	43db      	mvns	r3, r3
 800a794:	69fa      	ldr	r2, [r7, #28]
 800a796:	4013      	ands	r3, r2
 800a798:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	689a      	ldr	r2, [r3, #8]
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d07c      	beq.n	800a8b8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a7be:	4a47      	ldr	r2, [pc, #284]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	089b      	lsrs	r3, r3, #2
 800a7c4:	3318      	adds	r3, #24
 800a7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	220f      	movs	r2, #15
 800a7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7da:	43db      	mvns	r3, r3
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	4013      	ands	r3, r2
 800a7e0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	0a9a      	lsrs	r2, r3, #10
 800a7e6:	4b3e      	ldr	r3, [pc, #248]	; (800a8e0 <HAL_GPIO_Init+0x3ac>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	f002 0203 	and.w	r2, r2, #3
 800a7f0:	00d2      	lsls	r2, r2, #3
 800a7f2:	4093      	lsls	r3, r2
 800a7f4:	69fa      	ldr	r2, [r7, #28]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a7fa:	4938      	ldr	r1, [pc, #224]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	089b      	lsrs	r3, r3, #2
 800a800:	3318      	adds	r3, #24
 800a802:	69fa      	ldr	r2, [r7, #28]
 800a804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a808:	4b34      	ldr	r3, [pc, #208]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	43db      	mvns	r3, r3
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	4013      	ands	r3, r2
 800a816:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4313      	orrs	r3, r2
 800a82a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a82c:	4a2b      	ldr	r2, [pc, #172]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a832:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	43db      	mvns	r3, r3
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	4013      	ands	r3, r2
 800a840:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a856:	4a21      	ldr	r2, [pc, #132]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a85c:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a862:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	43db      	mvns	r3, r3
 800a868:	69fa      	ldr	r2, [r7, #28]
 800a86a:	4013      	ands	r3, r2
 800a86c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a87a:	69fa      	ldr	r2, [r7, #28]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4313      	orrs	r3, r2
 800a880:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a882:	4a16      	ldr	r2, [pc, #88]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a88a:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a890:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	43db      	mvns	r3, r3
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	4013      	ands	r3, r2
 800a89a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <HAL_GPIO_Init+0x3a8>)
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f47f ae3d 	bne.w	800a548 <HAL_GPIO_Init+0x14>
  }
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	3724      	adds	r7, #36	; 0x24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	46022000 	.word	0x46022000
 800a8e0:	002f7f7f 	.word	0x002f7f7f

0800a8e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	807b      	strh	r3, [r7, #2]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8f4:	787b      	ldrb	r3, [r7, #1]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a8fa:	887a      	ldrh	r2, [r7, #2]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a900:	e002      	b.n	800a908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a902:	887a      	ldrh	r2, [r7, #2]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	88fb      	ldrh	r3, [r7, #6]
 800a924:	4013      	ands	r3, r2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a92a:	4a0c      	ldr	r2, [pc, #48]	; (800a95c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a92c:	88fb      	ldrh	r3, [r7, #6]
 800a92e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f814 	bl	800a960 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a938:	4b08      	ldr	r3, [pc, #32]	; (800a95c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	4013      	ands	r3, r2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d006      	beq.n	800a952 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a944:	4a05      	ldr	r2, [pc, #20]	; (800a95c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 f812 	bl	800a976 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a952:	bf00      	nop
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	46022000 	.word	0x46022000

0800a960 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	4603      	mov	r3, r0
 800a97e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e08d      	b.n	800aaba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7f9 ff5c 	bl	8004870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2224      	movs	r2, #36	; 0x24
 800a9bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f022 0201 	bic.w	r2, r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a9dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d107      	bne.n	800aa06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa02:	609a      	str	r2, [r3, #8]
 800aa04:	e006      	b.n	800aa14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689a      	ldr	r2, [r3, #8]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aa12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d108      	bne.n	800aa2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa2a:	605a      	str	r2, [r3, #4]
 800aa2c:	e007      	b.n	800aa3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685a      	ldr	r2, [r3, #4]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aa4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	691a      	ldr	r2, [r3, #16]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	69d9      	ldr	r1, [r3, #28]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a1a      	ldr	r2, [r3, #32]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	461a      	mov	r2, r3
 800aad0:	460b      	mov	r3, r1
 800aad2:	817b      	strh	r3, [r7, #10]
 800aad4:	4613      	mov	r3, r2
 800aad6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b20      	cmp	r3, #32
 800aae2:	f040 80da 	bne.w	800ac9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_I2C_Master_Transmit+0x30>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e0d3      	b.n	800ac9c <HAL_I2C_Master_Transmit+0x1d8>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aafc:	f7fb f8e0 	bl	8005cc0 <HAL_GetTick>
 800ab00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	2319      	movs	r3, #25
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 ff73 	bl	800b9fa <I2C_WaitOnFlagUntilTimeout>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e0be      	b.n	800ac9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2221      	movs	r2, #33	; 0x21
 800ab22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2210      	movs	r2, #16
 800ab2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	893a      	ldrh	r2, [r7, #8]
 800ab3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2bff      	cmp	r3, #255	; 0xff
 800ab4e:	d90e      	bls.n	800ab6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	22ff      	movs	r2, #255	; 0xff
 800ab54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	8979      	ldrh	r1, [r7, #10]
 800ab5e:	4b51      	ldr	r3, [pc, #324]	; (800aca4 <HAL_I2C_Master_Transmit+0x1e0>)
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f001 f996 	bl	800be98 <I2C_TransferConfig>
 800ab6c:	e06c      	b.n	800ac48 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	8979      	ldrh	r1, [r7, #10]
 800ab80:	4b48      	ldr	r3, [pc, #288]	; (800aca4 <HAL_I2C_Master_Transmit+0x1e0>)
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f001 f985 	bl	800be98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ab8e:	e05b      	b.n	800ac48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	6a39      	ldr	r1, [r7, #32]
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 ff89 	bl	800baac <I2C_WaitOnTXISFlagUntilTimeout>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e07b      	b.n	800ac9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	781a      	ldrb	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d034      	beq.n	800ac48 <HAL_I2C_Master_Transmit+0x184>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d130      	bne.n	800ac48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	2200      	movs	r2, #0
 800abee:	2180      	movs	r1, #128	; 0x80
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 ff02 	bl	800b9fa <I2C_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e04d      	b.n	800ac9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	2bff      	cmp	r3, #255	; 0xff
 800ac08:	d90e      	bls.n	800ac28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	22ff      	movs	r2, #255	; 0xff
 800ac0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	8979      	ldrh	r1, [r7, #10]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f001 f939 	bl	800be98 <I2C_TransferConfig>
 800ac26:	e00f      	b.n	800ac48 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	8979      	ldrh	r1, [r7, #10]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f001 f928 	bl	800be98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d19e      	bne.n	800ab90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	6a39      	ldr	r1, [r7, #32]
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 ff6f 	bl	800bb3a <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e01a      	b.n	800ac9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6859      	ldr	r1, [r3, #4]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b0b      	ldr	r3, [pc, #44]	; (800aca8 <HAL_I2C_Master_Transmit+0x1e4>)
 800ac7a:	400b      	ands	r3, r1
 800ac7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2220      	movs	r2, #32
 800ac82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e000      	b.n	800ac9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ac9a:	2302      	movs	r3, #2
  }
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	80002000 	.word	0x80002000
 800aca8:	fe00e800 	.word	0xfe00e800

0800acac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af02      	add	r7, sp, #8
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	607a      	str	r2, [r7, #4]
 800acb6:	461a      	mov	r2, r3
 800acb8:	460b      	mov	r3, r1
 800acba:	817b      	strh	r3, [r7, #10]
 800acbc:	4613      	mov	r3, r2
 800acbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b20      	cmp	r3, #32
 800acca:	f040 80db 	bne.w	800ae84 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_I2C_Master_Receive+0x30>
 800acd8:	2302      	movs	r3, #2
 800acda:	e0d4      	b.n	800ae86 <HAL_I2C_Master_Receive+0x1da>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ace4:	f7fa ffec 	bl	8005cc0 <HAL_GetTick>
 800ace8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	2319      	movs	r3, #25
 800acf0:	2201      	movs	r2, #1
 800acf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 fe7f 	bl	800b9fa <I2C_WaitOnFlagUntilTimeout>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e0bf      	b.n	800ae86 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2222      	movs	r2, #34	; 0x22
 800ad0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2210      	movs	r2, #16
 800ad12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	893a      	ldrh	r2, [r7, #8]
 800ad26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	2bff      	cmp	r3, #255	; 0xff
 800ad36:	d90e      	bls.n	800ad56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	22ff      	movs	r2, #255	; 0xff
 800ad3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	8979      	ldrh	r1, [r7, #10]
 800ad46:	4b52      	ldr	r3, [pc, #328]	; (800ae90 <HAL_I2C_Master_Receive+0x1e4>)
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f001 f8a2 	bl	800be98 <I2C_TransferConfig>
 800ad54:	e06d      	b.n	800ae32 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	8979      	ldrh	r1, [r7, #10]
 800ad68:	4b49      	ldr	r3, [pc, #292]	; (800ae90 <HAL_I2C_Master_Receive+0x1e4>)
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f001 f891 	bl	800be98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ad76:	e05c      	b.n	800ae32 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	6a39      	ldr	r1, [r7, #32]
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 ff1f 	bl	800bbc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e07c      	b.n	800ae86 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	3b01      	subs	r3, #1
 800adb8:	b29a      	uxth	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d034      	beq.n	800ae32 <HAL_I2C_Master_Receive+0x186>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d130      	bne.n	800ae32 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	2200      	movs	r2, #0
 800add8:	2180      	movs	r1, #128	; 0x80
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 fe0d 	bl	800b9fa <I2C_WaitOnFlagUntilTimeout>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e04d      	b.n	800ae86 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2bff      	cmp	r3, #255	; 0xff
 800adf2:	d90e      	bls.n	800ae12 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	22ff      	movs	r2, #255	; 0xff
 800adf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	8979      	ldrh	r1, [r7, #10]
 800ae02:	2300      	movs	r3, #0
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f001 f844 	bl	800be98 <I2C_TransferConfig>
 800ae10:	e00f      	b.n	800ae32 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	8979      	ldrh	r1, [r7, #10]
 800ae24:	2300      	movs	r3, #0
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f001 f833 	bl	800be98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d19d      	bne.n	800ad78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	6a39      	ldr	r1, [r7, #32]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 fe7a 	bl	800bb3a <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e01a      	b.n	800ae86 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2220      	movs	r2, #32
 800ae56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6859      	ldr	r1, [r3, #4]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <HAL_I2C_Master_Receive+0x1e8>)
 800ae64:	400b      	ands	r3, r1
 800ae66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	e000      	b.n	800ae86 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ae84:	2302      	movs	r3, #2
  }
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	80002400 	.word	0x80002400
 800ae94:	fe00e800 	.word	0xfe00e800

0800ae98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d005      	beq.n	800aec4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	68f9      	ldr	r1, [r7, #12]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	4798      	blx	r3
  }
}
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00f      	beq.n	800af0e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00a      	beq.n	800af0e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefc:	f043 0201 	orr.w	r2, r3, #1
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00f      	beq.n	800af38 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af26:	f043 0208 	orr.w	r2, r3, #8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00f      	beq.n	800af62 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af50:	f043 0202 	orr.w	r2, r3, #2
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 030b 	and.w	r3, r3, #11
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800af72:	68f9      	ldr	r1, [r7, #12]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fbe7 	bl	800b748 <I2C_ITError>
  }
}
 800af7a:	bf00      	nop
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af96:	b480      	push	{r7}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	70fb      	strb	r3, [r7, #3]
 800afb6:	4613      	mov	r3, r2
 800afb8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afee:	b480      	push	{r7}
 800aff0:	b083      	sub	sp, #12
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b086      	sub	sp, #24
 800b006:	af00      	add	r7, sp, #0
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b012:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d101      	bne.n	800b026 <I2C_Slave_ISR_IT+0x24>
 800b022:	2302      	movs	r3, #2
 800b024:	e0e2      	b.n	800b1ec <I2C_Slave_ISR_IT+0x1ea>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f003 0320 	and.w	r3, r3, #32
 800b034:	2b00      	cmp	r3, #0
 800b036:	d009      	beq.n	800b04c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b042:	6939      	ldr	r1, [r7, #16]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f9b5 	bl	800b3b4 <I2C_ITSlaveCplt>
 800b04a:	e0ca      	b.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f003 0310 	and.w	r3, r3, #16
 800b052:	2b00      	cmp	r3, #0
 800b054:	d04b      	beq.n	800b0ee <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d046      	beq.n	800b0ee <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b064:	b29b      	uxth	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d128      	bne.n	800b0bc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b28      	cmp	r3, #40	; 0x28
 800b074:	d108      	bne.n	800b088 <I2C_Slave_ISR_IT+0x86>
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b07c:	d104      	bne.n	800b088 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b07e:	6939      	ldr	r1, [r7, #16]
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 fb0d 	bl	800b6a0 <I2C_ITListenCplt>
 800b086:	e031      	b.n	800b0ec <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b29      	cmp	r3, #41	; 0x29
 800b092:	d10e      	bne.n	800b0b2 <I2C_Slave_ISR_IT+0xb0>
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b09a:	d00a      	beq.n	800b0b2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2210      	movs	r2, #16
 800b0a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f000 fc66 	bl	800b976 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f000 f926 	bl	800b2fc <I2C_ITSlaveSeqCplt>
 800b0b0:	e01c      	b.n	800b0ec <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b0ba:	e08f      	b.n	800b1dc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2210      	movs	r2, #16
 800b0c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c8:	f043 0204 	orr.w	r2, r3, #4
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <I2C_Slave_ISR_IT+0xdc>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0dc:	d17e      	bne.n	800b1dc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fb2f 	bl	800b748 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b0ea:	e077      	b.n	800b1dc <I2C_Slave_ISR_IT+0x1da>
 800b0ec:	e076      	b.n	800b1dc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d02f      	beq.n	800b158 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d02a      	beq.n	800b158 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b106:	b29b      	uxth	r3, r3
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d018      	beq.n	800b13e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b116:	b2d2      	uxtb	r2, r2
 800b118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b128:	3b01      	subs	r3, #1
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b134:	b29b      	uxth	r3, r3
 800b136:	3b01      	subs	r3, #1
 800b138:	b29a      	uxth	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d14b      	bne.n	800b1e0 <I2C_Slave_ISR_IT+0x1de>
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b14e:	d047      	beq.n	800b1e0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 f8d3 	bl	800b2fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b156:	e043      	b.n	800b1e0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f003 0308 	and.w	r3, r3, #8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d009      	beq.n	800b176 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b16c:	6939      	ldr	r1, [r7, #16]
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 f840 	bl	800b1f4 <I2C_ITAddrCplt>
 800b174:	e035      	b.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f003 0302 	and.w	r3, r3, #2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d030      	beq.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b186:	2b00      	cmp	r3, #0
 800b188:	d02b      	beq.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18e:	b29b      	uxth	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d018      	beq.n	800b1c6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b1c4:	e00d      	b.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1cc:	d002      	beq.n	800b1d4 <I2C_Slave_ISR_IT+0x1d2>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 f891 	bl	800b2fc <I2C_ITSlaveSeqCplt>
 800b1da:	e002      	b.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800b1dc:	bf00      	nop
 800b1de:	e000      	b.n	800b1e2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800b1e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b20a:	2b28      	cmp	r3, #40	; 0x28
 800b20c:	d16a      	bne.n	800b2e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	0c1b      	lsrs	r3, r3, #16
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	0c1b      	lsrs	r3, r3, #16
 800b226:	b29b      	uxth	r3, r3
 800b228:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b22c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	b29b      	uxth	r3, r3
 800b236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b23a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	b29b      	uxth	r3, r3
 800b244:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b248:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d138      	bne.n	800b2c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b252:	897b      	ldrh	r3, [r7, #10]
 800b254:	09db      	lsrs	r3, r3, #7
 800b256:	b29a      	uxth	r2, r3
 800b258:	89bb      	ldrh	r3, [r7, #12]
 800b25a:	4053      	eors	r3, r2
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f003 0306 	and.w	r3, r3, #6
 800b262:	2b00      	cmp	r3, #0
 800b264:	d11c      	bne.n	800b2a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b266:	897b      	ldrh	r3, [r7, #10]
 800b268:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d13b      	bne.n	800b2f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2208      	movs	r2, #8
 800b288:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b292:	89ba      	ldrh	r2, [r7, #12]
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff fe86 	bl	800afaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b29e:	e029      	b.n	800b2f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b2a0:	893b      	ldrh	r3, [r7, #8]
 800b2a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b2a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fe27 	bl	800befc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b2b6:	89ba      	ldrh	r2, [r7, #12]
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fe74 	bl	800afaa <HAL_I2C_AddrCallback>
}
 800b2c2:	e017      	b.n	800b2f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b2c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fe17 	bl	800befc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b2d6:	89ba      	ldrh	r2, [r7, #12]
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fe64 	bl	800afaa <HAL_I2C_AddrCallback>
}
 800b2e2:	e007      	b.n	800b2f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b2f4:	bf00      	nop
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d008      	beq.n	800b330 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	e00c      	b.n	800b34a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d007      	beq.n	800b34a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b348:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b29      	cmp	r3, #41	; 0x29
 800b354:	d112      	bne.n	800b37c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2228      	movs	r2, #40	; 0x28
 800b35a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2221      	movs	r2, #33	; 0x21
 800b362:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b364:	2101      	movs	r1, #1
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fdc8 	bl	800befc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fe04 	bl	800af82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b37a:	e017      	b.n	800b3ac <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b382:	b2db      	uxtb	r3, r3
 800b384:	2b2a      	cmp	r3, #42	; 0x2a
 800b386:	d111      	bne.n	800b3ac <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2228      	movs	r2, #40	; 0x28
 800b38c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2222      	movs	r2, #34	; 0x22
 800b394:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b396:	2102      	movs	r1, #2
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fdaf 	bl	800befc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7ff fdf5 	bl	800af96 <HAL_I2C_SlaveRxCpltCallback>
}
 800b3ac:	bf00      	nop
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b3b4:	b590      	push	{r4, r7, lr}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3d6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	2b21      	cmp	r3, #33	; 0x21
 800b3e4:	d002      	beq.n	800b3ec <I2C_ITSlaveCplt+0x38>
 800b3e6:	7afb      	ldrb	r3, [r7, #11]
 800b3e8:	2b29      	cmp	r3, #41	; 0x29
 800b3ea:	d108      	bne.n	800b3fe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b3ec:	f248 0101 	movw	r1, #32769	; 0x8001
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fd83 	bl	800befc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2221      	movs	r2, #33	; 0x21
 800b3fa:	631a      	str	r2, [r3, #48]	; 0x30
 800b3fc:	e019      	b.n	800b432 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b3fe:	7afb      	ldrb	r3, [r7, #11]
 800b400:	2b22      	cmp	r3, #34	; 0x22
 800b402:	d002      	beq.n	800b40a <I2C_ITSlaveCplt+0x56>
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	2b2a      	cmp	r3, #42	; 0x2a
 800b408:	d108      	bne.n	800b41c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b40a:	f248 0102 	movw	r1, #32770	; 0x8002
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fd74 	bl	800befc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2222      	movs	r2, #34	; 0x22
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
 800b41a:	e00a      	b.n	800b432 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b41c:	7afb      	ldrb	r3, [r7, #11]
 800b41e:	2b28      	cmp	r3, #40	; 0x28
 800b420:	d107      	bne.n	800b432 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b422:	f248 0103 	movw	r1, #32771	; 0x8003
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fd68 	bl	800befc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b440:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6859      	ldr	r1, [r3, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	4b92      	ldr	r3, [pc, #584]	; (800b698 <I2C_ITSlaveCplt+0x2e4>)
 800b44e:	400b      	ands	r3, r1
 800b450:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fa8f 	bl	800b976 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d01c      	beq.n	800b49c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b470:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b476:	2b00      	cmp	r3, #0
 800b478:	d031      	beq.n	800b4de <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b482:	b29c      	uxth	r4, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fe fb53 	bl	8009b34 <HAL_DMAEx_GetFifoLevel>
 800b48e:	4603      	mov	r3, r0
 800b490:	b29b      	uxth	r3, r3
 800b492:	4423      	add	r3, r4
 800b494:	b29a      	uxth	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b49a:	e020      	b.n	800b4de <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d01b      	beq.n	800b4de <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00f      	beq.n	800b4de <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4c6:	b29c      	uxth	r4, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe fb31 	bl	8009b34 <HAL_DMAEx_GetFifoLevel>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	4423      	add	r3, r4
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f003 0304 	and.w	r3, r3, #4
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d020      	beq.n	800b52a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	f023 0304 	bic.w	r3, r3, #4
 800b4ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b520:	b29b      	uxth	r3, r3
 800b522:	3b01      	subs	r3, #1
 800b524:	b29a      	uxth	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52e:	b29b      	uxth	r3, r3
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b538:	f043 0204 	orr.w	r2, r3, #4
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f003 0310 	and.w	r3, r3, #16
 800b546:	2b00      	cmp	r3, #0
 800b548:	d049      	beq.n	800b5de <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b550:	2b00      	cmp	r3, #0
 800b552:	d044      	beq.n	800b5de <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b558:	b29b      	uxth	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d128      	bne.n	800b5b0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b28      	cmp	r3, #40	; 0x28
 800b568:	d108      	bne.n	800b57c <I2C_ITSlaveCplt+0x1c8>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b570:	d104      	bne.n	800b57c <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b572:	6979      	ldr	r1, [r7, #20]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f893 	bl	800b6a0 <I2C_ITListenCplt>
 800b57a:	e030      	b.n	800b5de <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b29      	cmp	r3, #41	; 0x29
 800b586:	d10e      	bne.n	800b5a6 <I2C_ITSlaveCplt+0x1f2>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b58e:	d00a      	beq.n	800b5a6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2210      	movs	r2, #16
 800b596:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f9ec 	bl	800b976 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff feac 	bl	800b2fc <I2C_ITSlaveSeqCplt>
 800b5a4:	e01b      	b.n	800b5de <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2210      	movs	r2, #16
 800b5ac:	61da      	str	r2, [r3, #28]
 800b5ae:	e016      	b.n	800b5de <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2210      	movs	r2, #16
 800b5b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5bc:	f043 0204 	orr.w	r2, r3, #4
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <I2C_ITSlaveCplt+0x21e>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5d0:	d105      	bne.n	800b5de <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f8b5 	bl	800b748 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d010      	beq.n	800b616 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f8a4 	bl	800b748 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b28      	cmp	r3, #40	; 0x28
 800b60a:	d141      	bne.n	800b690 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b60c:	6979      	ldr	r1, [r7, #20]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f846 	bl	800b6a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b614:	e03c      	b.n	800b690 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b61e:	d014      	beq.n	800b64a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff fe6b 	bl	800b2fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a1c      	ldr	r2, [pc, #112]	; (800b69c <I2C_ITSlaveCplt+0x2e8>)
 800b62a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff fcbf 	bl	800afc6 <HAL_I2C_ListenCpltCallback>
}
 800b648:	e022      	b.n	800b690 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b22      	cmp	r3, #34	; 0x22
 800b654:	d10e      	bne.n	800b674 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2220      	movs	r2, #32
 800b65a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff fc92 	bl	800af96 <HAL_I2C_SlaveRxCpltCallback>
}
 800b672:	e00d      	b.n	800b690 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff fc79 	bl	800af82 <HAL_I2C_SlaveTxCpltCallback>
}
 800b690:	bf00      	nop
 800b692:	371c      	adds	r7, #28
 800b694:	46bd      	mov	sp, r7
 800b696:	bd90      	pop	{r4, r7, pc}
 800b698:	fe00e800 	.word	0xfe00e800
 800b69c:	ffff0000 	.word	0xffff0000

0800b6a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a25      	ldr	r2, [pc, #148]	; (800b744 <I2C_ITListenCplt+0xa4>)
 800b6ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2220      	movs	r2, #32
 800b6ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d022      	beq.n	800b71c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	b2d2      	uxtb	r2, r2
 800b6e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d012      	beq.n	800b71c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b706:	b29b      	uxth	r3, r3
 800b708:	3b01      	subs	r3, #1
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b714:	f043 0204 	orr.w	r2, r3, #4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b71c:	f248 0103 	movw	r1, #32771	; 0x8003
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fbeb 	bl	800befc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2210      	movs	r2, #16
 800b72c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff fc45 	bl	800afc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	ffff0000 	.word	0xffff0000

0800b748 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b758:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a6d      	ldr	r2, [pc, #436]	; (800b91c <I2C_ITError+0x1d4>)
 800b766:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	431a      	orrs	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	2b28      	cmp	r3, #40	; 0x28
 800b77e:	d005      	beq.n	800b78c <I2C_ITError+0x44>
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	2b29      	cmp	r3, #41	; 0x29
 800b784:	d002      	beq.n	800b78c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	2b2a      	cmp	r3, #42	; 0x2a
 800b78a:	d10b      	bne.n	800b7a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b78c:	2103      	movs	r1, #3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fbb4 	bl	800befc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2228      	movs	r2, #40	; 0x28
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a60      	ldr	r2, [pc, #384]	; (800b920 <I2C_ITError+0x1d8>)
 800b7a0:	635a      	str	r2, [r3, #52]	; 0x34
 800b7a2:	e030      	b.n	800b806 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b7a4:	f248 0103 	movw	r1, #32771	; 0x8003
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fba7 	bl	800befc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f8e1 	bl	800b976 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b60      	cmp	r3, #96	; 0x60
 800b7be:	d01f      	beq.n	800b800 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	f003 0320 	and.w	r3, r3, #32
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	d114      	bne.n	800b800 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b10      	cmp	r3, #16
 800b7e2:	d109      	bne.n	800b7f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2210      	movs	r2, #16
 800b7ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f0:	f043 0204 	orr.w	r2, r3, #4
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2220      	movs	r2, #32
 800b7fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	635a      	str	r2, [r3, #52]	; 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	2b00      	cmp	r3, #0
 800b812:	d039      	beq.n	800b888 <I2C_ITError+0x140>
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2b11      	cmp	r3, #17
 800b818:	d002      	beq.n	800b820 <I2C_ITError+0xd8>
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2b21      	cmp	r3, #33	; 0x21
 800b81e:	d133      	bne.n	800b888 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b82a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b82e:	d107      	bne.n	800b840 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b83e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b844:	4618      	mov	r0, r3
 800b846:	f7fd f9c9 	bl	8008bdc <HAL_DMA_GetState>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d017      	beq.n	800b880 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	4a33      	ldr	r2, [pc, #204]	; (800b924 <I2C_ITError+0x1dc>)
 800b856:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	4618      	mov	r0, r3
 800b866:	f7fd f82f 	bl	80088c8 <HAL_DMA_Abort_IT>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d04d      	beq.n	800b90c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b87a:	4610      	mov	r0, r2
 800b87c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b87e:	e045      	b.n	800b90c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f851 	bl	800b928 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b886:	e041      	b.n	800b90c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d039      	beq.n	800b904 <I2C_ITError+0x1bc>
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b12      	cmp	r3, #18
 800b894:	d002      	beq.n	800b89c <I2C_ITError+0x154>
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b22      	cmp	r3, #34	; 0x22
 800b89a:	d133      	bne.n	800b904 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8aa:	d107      	bne.n	800b8bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fd f98b 	bl	8008bdc <HAL_DMA_GetState>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d017      	beq.n	800b8fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d0:	4a14      	ldr	r2, [pc, #80]	; (800b924 <I2C_ITError+0x1dc>)
 800b8d2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fc fff1 	bl	80088c8 <HAL_DMA_Abort_IT>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d011      	beq.n	800b910 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8fa:	e009      	b.n	800b910 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f813 	bl	800b928 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b902:	e005      	b.n	800b910 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f80f 	bl	800b928 <I2C_TreatErrorCallback>
  }
}
 800b90a:	e002      	b.n	800b912 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b90c:	bf00      	nop
 800b90e:	e000      	b.n	800b912 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b910:	bf00      	nop
}
 800b912:	bf00      	nop
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	ffff0000 	.word	0xffff0000
 800b920:	0800b003 	.word	0x0800b003
 800b924:	0800b9bf 	.word	0x0800b9bf

0800b928 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b60      	cmp	r3, #96	; 0x60
 800b93a:	d10e      	bne.n	800b95a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2220      	movs	r2, #32
 800b940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fb4b 	bl	800afee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b958:	e009      	b.n	800b96e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff fb36 	bl	800afda <HAL_I2C_ErrorCallback>
}
 800b96e:	bf00      	nop
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f003 0302 	and.w	r3, r3, #2
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d103      	bne.n	800b994 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d007      	beq.n	800b9b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	699a      	ldr	r2, [r3, #24]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f042 0201 	orr.w	r2, r2, #1
 800b9b0:	619a      	str	r2, [r3, #24]
  }
}
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d8:	2200      	movs	r2, #0
 800b9da:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d003      	beq.n	800b9ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f7ff ff9b 	bl	800b928 <I2C_TreatErrorCallback>
}
 800b9f2:	bf00      	nop
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	603b      	str	r3, [r7, #0]
 800ba06:	4613      	mov	r3, r2
 800ba08:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba0a:	e03b      	b.n	800ba84 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f961 	bl	800bcd8 <I2C_IsErrorOccurred>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e041      	b.n	800baa4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba26:	d02d      	beq.n	800ba84 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba28:	f7fa f94a 	bl	8005cc0 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d302      	bcc.n	800ba3e <I2C_WaitOnFlagUntilTimeout+0x44>
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d122      	bne.n	800ba84 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	699a      	ldr	r2, [r3, #24]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	4013      	ands	r3, r2
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	bf0c      	ite	eq
 800ba4e:	2301      	moveq	r3, #1
 800ba50:	2300      	movne	r3, #0
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	461a      	mov	r2, r3
 800ba56:	79fb      	ldrb	r3, [r7, #7]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d113      	bne.n	800ba84 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba60:	f043 0220 	orr.w	r2, r3, #32
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e00f      	b.n	800baa4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	bf0c      	ite	eq
 800ba94:	2301      	moveq	r3, #1
 800ba96:	2300      	movne	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d0b4      	beq.n	800ba0c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bab8:	e033      	b.n	800bb22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 f90a 	bl	800bcd8 <I2C_IsErrorOccurred>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e031      	b.n	800bb32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad4:	d025      	beq.n	800bb22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad6:	f7fa f8f3 	bl	8005cc0 <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d302      	bcc.n	800baec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d11a      	bne.n	800bb22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	f003 0302 	and.w	r3, r3, #2
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d013      	beq.n	800bb22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafe:	f043 0220 	orr.w	r2, r3, #32
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e007      	b.n	800bb32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d1c4      	bne.n	800baba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb46:	e02f      	b.n	800bba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 f8c3 	bl	800bcd8 <I2C_IsErrorOccurred>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e02d      	b.n	800bbb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb5c:	f7fa f8b0 	bl	8005cc0 <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d302      	bcc.n	800bb72 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d11a      	bne.n	800bba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	f003 0320 	and.w	r3, r3, #32
 800bb7c:	2b20      	cmp	r3, #32
 800bb7e:	d013      	beq.n	800bba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb84:	f043 0220 	orr.w	r2, r3, #32
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2220      	movs	r2, #32
 800bb90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e007      	b.n	800bbb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b20      	cmp	r3, #32
 800bbb4:	d1c8      	bne.n	800bb48 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bbd0:	e071      	b.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	68b9      	ldr	r1, [r7, #8]
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 f87e 	bl	800bcd8 <I2C_IsErrorOccurred>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b20      	cmp	r3, #32
 800bbf2:	d13b      	bne.n	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d138      	bne.n	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	d105      	bne.n	800bc14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	f003 0310 	and.w	r3, r3, #16
 800bc1e:	2b10      	cmp	r3, #16
 800bc20:	d121      	bne.n	800bc66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2210      	movs	r2, #16
 800bc28:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2204      	movs	r2, #4
 800bc2e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2220      	movs	r2, #32
 800bc36:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6859      	ldr	r1, [r3, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b24      	ldr	r3, [pc, #144]	; (800bcd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800bc44:	400b      	ands	r3, r1
 800bc46:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2220      	movs	r2, #32
 800bc4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	75fb      	strb	r3, [r7, #23]
 800bc64:	e002      	b.n	800bc6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800bc6c:	f7fa f828 	bl	8005cc0 <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d302      	bcc.n	800bc82 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d119      	bne.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d116      	bne.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d00f      	beq.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc9a:	f043 0220 	orr.w	r2, r3, #32
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d002      	beq.n	800bcca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d083      	beq.n	800bbd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	fe00e800 	.word	0xfe00e800

0800bcd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	f003 0310 	and.w	r3, r3, #16
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d068      	beq.n	800bdd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2210      	movs	r2, #16
 800bd0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd0c:	e049      	b.n	800bda2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd14:	d045      	beq.n	800bda2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bd16:	f7f9 ffd3 	bl	8005cc0 <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d302      	bcc.n	800bd2c <I2C_IsErrorOccurred+0x54>
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d13a      	bne.n	800bda2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd4e:	d121      	bne.n	800bd94 <I2C_IsErrorOccurred+0xbc>
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd56:	d01d      	beq.n	800bd94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bd58:	7cfb      	ldrb	r3, [r7, #19]
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d01a      	beq.n	800bd94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bd6e:	f7f9 ffa7 	bl	8005cc0 <HAL_GetTick>
 800bd72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd74:	e00e      	b.n	800bd94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bd76:	f7f9 ffa3 	bl	8005cc0 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	2b19      	cmp	r3, #25
 800bd82:	d907      	bls.n	800bd94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	f043 0320 	orr.w	r3, r3, #32
 800bd8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800bd92:	e006      	b.n	800bda2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	f003 0320 	and.w	r3, r3, #32
 800bd9e:	2b20      	cmp	r3, #32
 800bda0:	d1e9      	bne.n	800bd76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	f003 0320 	and.w	r3, r3, #32
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d003      	beq.n	800bdb8 <I2C_IsErrorOccurred+0xe0>
 800bdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d0aa      	beq.n	800bd0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d103      	bne.n	800bdc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2220      	movs	r2, #32
 800bdc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	f043 0304 	orr.w	r3, r3, #4
 800bdce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00b      	beq.n	800be00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00b      	beq.n	800be22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800be0a:	6a3b      	ldr	r3, [r7, #32]
 800be0c:	f043 0308 	orr.w	r3, r3, #8
 800be10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	f043 0302 	orr.w	r3, r3, #2
 800be32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800be44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d01c      	beq.n	800be86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7ff fd92 	bl	800b976 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6859      	ldr	r1, [r3, #4]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <I2C_IsErrorOccurred+0x1bc>)
 800be5e:	400b      	ands	r3, r1
 800be60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be66:	6a3b      	ldr	r3, [r7, #32]
 800be68:	431a      	orrs	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2220      	movs	r2, #32
 800be72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800be86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3728      	adds	r7, #40	; 0x28
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	fe00e800 	.word	0xfe00e800

0800be98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	607b      	str	r3, [r7, #4]
 800bea2:	460b      	mov	r3, r1
 800bea4:	817b      	strh	r3, [r7, #10]
 800bea6:	4613      	mov	r3, r2
 800bea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800beaa:	897b      	ldrh	r3, [r7, #10]
 800beac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800beb0:	7a7b      	ldrb	r3, [r7, #9]
 800beb2:	041b      	lsls	r3, r3, #16
 800beb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800beb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	0d5b      	lsrs	r3, r3, #21
 800bed2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bed6:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <I2C_TransferConfig+0x60>)
 800bed8:	430b      	orrs	r3, r1
 800beda:	43db      	mvns	r3, r3
 800bedc:	ea02 0103 	and.w	r1, r2, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800beea:	bf00      	nop
 800beec:	371c      	adds	r7, #28
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	03ff63ff 	.word	0x03ff63ff

0800befc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bf0c:	887b      	ldrh	r3, [r7, #2]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00f      	beq.n	800bf36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bf1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf2a:	2b28      	cmp	r3, #40	; 0x28
 800bf2c:	d003      	beq.n	800bf36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bf34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bf36:	887b      	ldrh	r3, [r7, #2]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00f      	beq.n	800bf60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bf46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf54:	2b28      	cmp	r3, #40	; 0x28
 800bf56:	d003      	beq.n	800bf60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bf5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bf60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	da03      	bge.n	800bf70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bf6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	2b10      	cmp	r3, #16
 800bf74:	d103      	bne.n	800bf7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bf7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bf7e:	887b      	ldrh	r3, [r7, #2]
 800bf80:	2b20      	cmp	r3, #32
 800bf82:	d103      	bne.n	800bf8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f043 0320 	orr.w	r3, r3, #32
 800bf8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bf8c:	887b      	ldrh	r3, [r7, #2]
 800bf8e:	2b40      	cmp	r3, #64	; 0x40
 800bf90:	d103      	bne.n	800bf9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6819      	ldr	r1, [r3, #0]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	43da      	mvns	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	400a      	ands	r2, r1
 800bfaa:	601a      	str	r2, [r3, #0]
}
 800bfac:	bf00      	nop
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b20      	cmp	r3, #32
 800bfcc:	d138      	bne.n	800c040 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d101      	bne.n	800bfdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e032      	b.n	800c042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2224      	movs	r2, #36	; 0x24
 800bfe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0201 	bic.w	r2, r2, #1
 800bffa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c00a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6819      	ldr	r1, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	430a      	orrs	r2, r1
 800c01a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f042 0201 	orr.w	r2, r2, #1
 800c02a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	e000      	b.n	800c042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c040:	2302      	movs	r3, #2
  }
}
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c04e:	b480      	push	{r7}
 800c050:	b085      	sub	sp, #20
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b20      	cmp	r3, #32
 800c062:	d139      	bne.n	800c0d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d101      	bne.n	800c072 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c06e:	2302      	movs	r3, #2
 800c070:	e033      	b.n	800c0da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2224      	movs	r2, #36	; 0x24
 800c07e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f022 0201 	bic.w	r2, r2, #1
 800c090:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c0a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	021b      	lsls	r3, r3, #8
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f042 0201 	orr.w	r2, r2, #1
 800c0c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	e000      	b.n	800c0da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c0d8:	2302      	movs	r3, #2
  }
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
	...

0800c0e8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800c0f4:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	73fb      	strb	r3, [r7, #15]
 800c104:	e007      	b.n	800c116 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800c106:	4b07      	ldr	r3, [pc, #28]	; (800c124 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f023 0204 	bic.w	r2, r3, #4
 800c10e:	4905      	ldr	r1, [pc, #20]	; (800c124 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4313      	orrs	r3, r2
 800c114:	600b      	str	r3, [r1, #0]
  }

  return status;
 800c116:	7bfb      	ldrb	r3, [r7, #15]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	40030400 	.word	0x40030400

0800c128 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800c128:	b480      	push	{r7}
 800c12a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800c12c:	4b05      	ldr	r3, [pc, #20]	; (800c144 <HAL_ICACHE_Enable+0x1c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a04      	ldr	r2, [pc, #16]	; (800c144 <HAL_ICACHE_Enable+0x1c>)
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	40030400 	.word	0x40030400

0800c148 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e0bf      	b.n	800c2da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d106      	bne.n	800c174 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7f8 fc6c 	bl	8004a4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	699a      	ldr	r2, [r3, #24]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c18a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6999      	ldr	r1, [r3, #24]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c1a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6899      	ldr	r1, [r3, #8]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4b4a      	ldr	r3, [pc, #296]	; (800c2e4 <HAL_LTDC_Init+0x19c>)
 800c1bc:	400b      	ands	r3, r1
 800c1be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	041b      	lsls	r3, r3, #16
 800c1c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6899      	ldr	r1, [r3, #8]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	699a      	ldr	r2, [r3, #24]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68d9      	ldr	r1, [r3, #12]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	4b3e      	ldr	r3, [pc, #248]	; (800c2e4 <HAL_LTDC_Init+0x19c>)
 800c1ea:	400b      	ands	r3, r1
 800c1ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	041b      	lsls	r3, r3, #16
 800c1f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68d9      	ldr	r1, [r3, #12]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a1a      	ldr	r2, [r3, #32]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	431a      	orrs	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	430a      	orrs	r2, r1
 800c20a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6919      	ldr	r1, [r3, #16]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b33      	ldr	r3, [pc, #204]	; (800c2e4 <HAL_LTDC_Init+0x19c>)
 800c218:	400b      	ands	r3, r1
 800c21a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	041b      	lsls	r3, r3, #16
 800c222:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6919      	ldr	r1, [r3, #16]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	431a      	orrs	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	430a      	orrs	r2, r1
 800c238:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	6959      	ldr	r1, [r3, #20]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b27      	ldr	r3, [pc, #156]	; (800c2e4 <HAL_LTDC_Init+0x19c>)
 800c246:	400b      	ands	r3, r1
 800c248:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24e:	041b      	lsls	r3, r3, #16
 800c250:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6959      	ldr	r1, [r3, #20]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	430a      	orrs	r2, r1
 800c266:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c26e:	021b      	lsls	r3, r3, #8
 800c270:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c28a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4313      	orrs	r3, r2
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f042 0206 	orr.w	r2, r2, #6
 800c2b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 0201 	orr.w	r2, r2, #1
 800c2c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	f000f800 	.word	0xf000f800

0800c2e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f003 0304 	and.w	r3, r3, #4
 800c306:	2b00      	cmp	r3, #0
 800c308:	d023      	beq.n	800c352 <HAL_LTDC_IRQHandler+0x6a>
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d01e      	beq.n	800c352 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f022 0204 	bic.w	r2, r2, #4
 800c322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2204      	movs	r2, #4
 800c32a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c332:	f043 0201 	orr.w	r2, r3, #1
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2204      	movs	r2, #4
 800c340:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f86f 	bl	800c430 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f003 0302 	and.w	r3, r3, #2
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d023      	beq.n	800c3a4 <HAL_LTDC_IRQHandler+0xbc>
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f003 0302 	and.w	r3, r3, #2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d01e      	beq.n	800c3a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f022 0202 	bic.w	r2, r2, #2
 800c374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2202      	movs	r2, #2
 800c37c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c384:	f043 0202 	orr.w	r2, r3, #2
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2204      	movs	r2, #4
 800c392:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f846 	bl	800c430 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d01b      	beq.n	800c3e6 <HAL_LTDC_IRQHandler+0xfe>
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d016      	beq.n	800c3e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f022 0201 	bic.w	r2, r2, #1
 800c3c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f82f 	bl	800c444 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f003 0308 	and.w	r3, r3, #8
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01b      	beq.n	800c428 <HAL_LTDC_IRQHandler+0x140>
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	f003 0308 	and.w	r3, r3, #8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d016      	beq.n	800c428 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 0208 	bic.w	r2, r2, #8
 800c408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2208      	movs	r2, #8
 800c410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f818 	bl	800c458 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c428:	bf00      	nop
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c46c:	b5b0      	push	{r4, r5, r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d101      	bne.n	800c486 <HAL_LTDC_ConfigLayer+0x1a>
 800c482:	2302      	movs	r3, #2
 800c484:	e02c      	b.n	800c4e0 <HAL_LTDC_ConfigLayer+0x74>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2202      	movs	r2, #2
 800c492:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2134      	movs	r1, #52	; 0x34
 800c49c:	fb01 f303 	mul.w	r3, r1, r3
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	461d      	mov	r5, r3
 800c4ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 f811 	bl	800c4e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bdb0      	pop	{r4, r5, r7, pc}

0800c4e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b089      	sub	sp, #36	; 0x24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	0c1b      	lsrs	r3, r3, #16
 800c500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c504:	4413      	add	r3, r2
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	01db      	lsls	r3, r3, #7
 800c514:	4413      	add	r3, r2
 800c516:	3384      	adds	r3, #132	; 0x84
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	6812      	ldr	r2, [r2, #0]
 800c51e:	4611      	mov	r1, r2
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	01d2      	lsls	r2, r2, #7
 800c524:	440a      	add	r2, r1
 800c526:	3284      	adds	r2, #132	; 0x84
 800c528:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800c52c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	0c1b      	lsrs	r3, r3, #16
 800c53a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c53e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c540:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4619      	mov	r1, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	01db      	lsls	r3, r3, #7
 800c54c:	440b      	add	r3, r1
 800c54e:	3384      	adds	r3, #132	; 0x84
 800c550:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c556:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	68da      	ldr	r2, [r3, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c566:	4413      	add	r3, r2
 800c568:	041b      	lsls	r3, r3, #16
 800c56a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	461a      	mov	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	01db      	lsls	r3, r3, #7
 800c576:	4413      	add	r3, r2
 800c578:	3384      	adds	r3, #132	; 0x84
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	6812      	ldr	r2, [r2, #0]
 800c580:	4611      	mov	r1, r2
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	01d2      	lsls	r2, r2, #7
 800c586:	440a      	add	r2, r1
 800c588:	3284      	adds	r2, #132	; 0x84
 800c58a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800c58e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c59e:	4413      	add	r3, r2
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	01db      	lsls	r3, r3, #7
 800c5ac:	440b      	add	r3, r1
 800c5ae:	3384      	adds	r3, #132	; 0x84
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	01db      	lsls	r3, r3, #7
 800c5c2:	4413      	add	r3, r2
 800c5c4:	3384      	adds	r3, #132	; 0x84
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	6812      	ldr	r2, [r2, #0]
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	01d2      	lsls	r2, r2, #7
 800c5d2:	440a      	add	r2, r1
 800c5d4:	3284      	adds	r2, #132	; 0x84
 800c5d6:	f023 0307 	bic.w	r3, r3, #7
 800c5da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	01db      	lsls	r3, r3, #7
 800c5e6:	4413      	add	r3, r2
 800c5e8:	3384      	adds	r3, #132	; 0x84
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5f8:	021b      	lsls	r3, r3, #8
 800c5fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c602:	041b      	lsls	r3, r3, #16
 800c604:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	061b      	lsls	r3, r3, #24
 800c60c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c614:	461a      	mov	r2, r3
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	431a      	orrs	r2, r3
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	431a      	orrs	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4619      	mov	r1, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	01db      	lsls	r3, r3, #7
 800c628:	440b      	add	r3, r1
 800c62a:	3384      	adds	r3, #132	; 0x84
 800c62c:	4619      	mov	r1, r3
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	4313      	orrs	r3, r2
 800c632:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	461a      	mov	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	01db      	lsls	r3, r3, #7
 800c63e:	4413      	add	r3, r2
 800c640:	3384      	adds	r3, #132	; 0x84
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	6812      	ldr	r2, [r2, #0]
 800c648:	4611      	mov	r1, r2
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	01d2      	lsls	r2, r2, #7
 800c64e:	440a      	add	r2, r1
 800c650:	3284      	adds	r2, #132	; 0x84
 800c652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c656:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	461a      	mov	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	01db      	lsls	r3, r3, #7
 800c662:	4413      	add	r3, r2
 800c664:	3384      	adds	r3, #132	; 0x84
 800c666:	461a      	mov	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	01db      	lsls	r3, r3, #7
 800c678:	4413      	add	r3, r2
 800c67a:	3384      	adds	r3, #132	; 0x84
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	4611      	mov	r1, r2
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	01d2      	lsls	r2, r2, #7
 800c688:	440a      	add	r2, r1
 800c68a:	3284      	adds	r2, #132	; 0x84
 800c68c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c690:	f023 0307 	bic.w	r3, r3, #7
 800c694:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	69da      	ldr	r2, [r3, #28]
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	68f9      	ldr	r1, [r7, #12]
 800c6a0:	6809      	ldr	r1, [r1, #0]
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	01c9      	lsls	r1, r1, #7
 800c6a8:	4401      	add	r1, r0
 800c6aa:	3184      	adds	r1, #132	; 0x84
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	01db      	lsls	r3, r3, #7
 800c6ba:	4413      	add	r3, r2
 800c6bc:	3384      	adds	r3, #132	; 0x84
 800c6be:	461a      	mov	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d102      	bne.n	800c6d4 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800c6ce:	2304      	movs	r3, #4
 800c6d0:	61fb      	str	r3, [r7, #28]
 800c6d2:	e01b      	b.n	800c70c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d102      	bne.n	800c6e2 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	e014      	b.n	800c70c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d00b      	beq.n	800c702 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d007      	beq.n	800c702 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d003      	beq.n	800c702 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c6fe:	2b07      	cmp	r3, #7
 800c700:	d102      	bne.n	800c708 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800c702:	2302      	movs	r3, #2
 800c704:	61fb      	str	r3, [r7, #28]
 800c706:	e001      	b.n	800c70c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800c708:	2301      	movs	r3, #1
 800c70a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	01db      	lsls	r3, r3, #7
 800c716:	4413      	add	r3, r2
 800c718:	3384      	adds	r3, #132	; 0x84
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	6812      	ldr	r2, [r2, #0]
 800c720:	4611      	mov	r1, r2
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	01d2      	lsls	r2, r2, #7
 800c726:	440a      	add	r2, r1
 800c728:	3284      	adds	r2, #132	; 0x84
 800c72a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c72e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c734:	69fa      	ldr	r2, [r7, #28]
 800c736:	fb02 f303 	mul.w	r3, r2, r3
 800c73a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	6859      	ldr	r1, [r3, #4]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	1acb      	subs	r3, r1, r3
 800c746:	69f9      	ldr	r1, [r7, #28]
 800c748:	fb01 f303 	mul.w	r3, r1, r3
 800c74c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c74e:	68f9      	ldr	r1, [r7, #12]
 800c750:	6809      	ldr	r1, [r1, #0]
 800c752:	4608      	mov	r0, r1
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	01c9      	lsls	r1, r1, #7
 800c758:	4401      	add	r1, r0
 800c75a:	3184      	adds	r1, #132	; 0x84
 800c75c:	4313      	orrs	r3, r2
 800c75e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	461a      	mov	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	01db      	lsls	r3, r3, #7
 800c76a:	4413      	add	r3, r2
 800c76c:	3384      	adds	r3, #132	; 0x84
 800c76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	6812      	ldr	r2, [r2, #0]
 800c774:	4611      	mov	r1, r2
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	01d2      	lsls	r2, r2, #7
 800c77a:	440a      	add	r2, r1
 800c77c:	3284      	adds	r2, #132	; 0x84
 800c77e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	01db      	lsls	r3, r3, #7
 800c792:	4413      	add	r3, r2
 800c794:	3384      	adds	r3, #132	; 0x84
 800c796:	461a      	mov	r2, r3
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	01db      	lsls	r3, r3, #7
 800c7a8:	4413      	add	r3, r2
 800c7aa:	3384      	adds	r3, #132	; 0x84
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	6812      	ldr	r2, [r2, #0]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	01d2      	lsls	r2, r2, #7
 800c7b8:	440a      	add	r2, r1
 800c7ba:	3284      	adds	r2, #132	; 0x84
 800c7bc:	f043 0301 	orr.w	r3, r3, #1
 800c7c0:	6013      	str	r3, [r2, #0]
}
 800c7c2:	bf00      	nop
 800c7c4:	3724      	adds	r7, #36	; 0x24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b086      	sub	sp, #24
 800c7d2:	af02      	add	r7, sp, #8
 800c7d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e0fe      	b.n	800c9de <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7f8 fba1 	bl	8004f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2203      	movs	r2, #3
 800c7fe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	f008 fc19 	bl	801503e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6818      	ldr	r0, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7c1a      	ldrb	r2, [r3, #16]
 800c814:	f88d 2000 	strb.w	r2, [sp]
 800c818:	3304      	adds	r3, #4
 800c81a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c81c:	f008 fbe0 	bl	8014fe0 <USB_CoreInit>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d005      	beq.n	800c832 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e0d5      	b.n	800c9de <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2100      	movs	r1, #0
 800c838:	4618      	mov	r0, r3
 800c83a:	f008 fc11 	bl	8015060 <USB_SetCurrentMode>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2202      	movs	r2, #2
 800c848:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e0c6      	b.n	800c9de <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]
 800c854:	e04a      	b.n	800c8ec <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c856:	7bfa      	ldrb	r2, [r7, #15]
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	4613      	mov	r3, r2
 800c85c:	00db      	lsls	r3, r3, #3
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	3315      	adds	r3, #21
 800c866:	2201      	movs	r2, #1
 800c868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c86a:	7bfa      	ldrb	r2, [r7, #15]
 800c86c:	6879      	ldr	r1, [r7, #4]
 800c86e:	4613      	mov	r3, r2
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	440b      	add	r3, r1
 800c878:	3314      	adds	r3, #20
 800c87a:	7bfa      	ldrb	r2, [r7, #15]
 800c87c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c87e:	7bfa      	ldrb	r2, [r7, #15]
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	b298      	uxth	r0, r3
 800c884:	6879      	ldr	r1, [r7, #4]
 800c886:	4613      	mov	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	4413      	add	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	440b      	add	r3, r1
 800c890:	332e      	adds	r3, #46	; 0x2e
 800c892:	4602      	mov	r2, r0
 800c894:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c896:	7bfa      	ldrb	r2, [r7, #15]
 800c898:	6879      	ldr	r1, [r7, #4]
 800c89a:	4613      	mov	r3, r2
 800c89c:	00db      	lsls	r3, r3, #3
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3318      	adds	r3, #24
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c8aa:	7bfa      	ldrb	r2, [r7, #15]
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	440b      	add	r3, r1
 800c8b8:	331c      	adds	r3, #28
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c8be:	7bfa      	ldrb	r2, [r7, #15]
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	4413      	add	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	440b      	add	r3, r1
 800c8cc:	3320      	adds	r3, #32
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c8d2:	7bfa      	ldrb	r2, [r7, #15]
 800c8d4:	6879      	ldr	r1, [r7, #4]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	4413      	add	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	440b      	add	r3, r1
 800c8e0:	3324      	adds	r3, #36	; 0x24
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8e6:	7bfb      	ldrb	r3, [r7, #15]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	73fb      	strb	r3, [r7, #15]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	791b      	ldrb	r3, [r3, #4]
 800c8f0:	7bfa      	ldrb	r2, [r7, #15]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d3af      	bcc.n	800c856 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]
 800c8fa:	e044      	b.n	800c986 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c8fc:	7bfa      	ldrb	r2, [r7, #15]
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	4613      	mov	r3, r2
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	4413      	add	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	440b      	add	r3, r1
 800c90a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800c90e:	2200      	movs	r2, #0
 800c910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c912:	7bfa      	ldrb	r2, [r7, #15]
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	440b      	add	r3, r1
 800c920:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800c924:	7bfa      	ldrb	r2, [r7, #15]
 800c926:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c928:	7bfa      	ldrb	r2, [r7, #15]
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	4613      	mov	r3, r2
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	440b      	add	r3, r1
 800c936:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800c93a:	2200      	movs	r2, #0
 800c93c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c93e:	7bfa      	ldrb	r2, [r7, #15]
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	4613      	mov	r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	4413      	add	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	440b      	add	r3, r1
 800c94c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c950:	2200      	movs	r2, #0
 800c952:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c954:	7bfa      	ldrb	r2, [r7, #15]
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	4413      	add	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c966:	2200      	movs	r2, #0
 800c968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c96a:	7bfa      	ldrb	r2, [r7, #15]
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	440b      	add	r3, r1
 800c978:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	3301      	adds	r3, #1
 800c984:	73fb      	strb	r3, [r7, #15]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	791b      	ldrb	r3, [r3, #4]
 800c98a:	7bfa      	ldrb	r2, [r7, #15]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d3b5      	bcc.n	800c8fc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6818      	ldr	r0, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7c1a      	ldrb	r2, [r3, #16]
 800c998:	f88d 2000 	strb.w	r2, [sp]
 800c99c:	3304      	adds	r3, #4
 800c99e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9a0:	f008 fbaa 	bl	80150f8 <USB_DevInit>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d005      	beq.n	800c9b6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e013      	b.n	800c9de <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	7b1b      	ldrb	r3, [r3, #12]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d102      	bne.n	800c9d2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f80a 	bl	800c9e6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f008 fd77 	bl	80154ca <USB_DevDisconnect>

  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b085      	sub	sp, #20
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca18:	f043 0303 	orr.w	r3, r3, #3
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
	...

0800ca30 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ca34:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ca36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca38:	4a04      	ldr	r2, [pc, #16]	; (800ca4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ca3a:	f043 0301 	orr.w	r3, r3, #1
 800ca3e:	6293      	str	r3, [r2, #40]	; 0x28
}
 800ca40:	bf00      	nop
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	46020800 	.word	0x46020800

0800ca50 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800ca58:	4b39      	ldr	r3, [pc, #228]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800ca5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ca60:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d10b      	bne.n	800ca82 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca70:	d905      	bls.n	800ca7e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ca72:	4b33      	ldr	r3, [pc, #204]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	4a32      	ldr	r2, [pc, #200]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800ca78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca7c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e057      	b.n	800cb32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca88:	d90a      	bls.n	800caa0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800ca8a:	4b2d      	ldr	r3, [pc, #180]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	4a2a      	ldr	r2, [pc, #168]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800ca98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca9c:	60d3      	str	r3, [r2, #12]
 800ca9e:	e007      	b.n	800cab0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800caa0:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800caa8:	4925      	ldr	r1, [pc, #148]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4313      	orrs	r3, r2
 800caae:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800cab0:	4b24      	ldr	r3, [pc, #144]	; (800cb44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a24      	ldr	r2, [pc, #144]	; (800cb48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800cab6:	fba2 2303 	umull	r2, r3, r2, r3
 800caba:	099b      	lsrs	r3, r3, #6
 800cabc:	2232      	movs	r2, #50	; 0x32
 800cabe:	fb02 f303 	mul.w	r3, r2, r3
 800cac2:	4a21      	ldr	r2, [pc, #132]	; (800cb48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800cac4:	fba2 2303 	umull	r2, r3, r2, r3
 800cac8:	099b      	lsrs	r3, r3, #6
 800caca:	3301      	adds	r3, #1
 800cacc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800cace:	e002      	b.n	800cad6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3b01      	subs	r3, #1
 800cad4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800cad6:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d102      	bne.n	800cae8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1f3      	bne.n	800cad0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d01b      	beq.n	800cb26 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800caee:	4b15      	ldr	r3, [pc, #84]	; (800cb44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800caf4:	fba2 2303 	umull	r2, r3, r2, r3
 800caf8:	099b      	lsrs	r3, r3, #6
 800cafa:	2232      	movs	r2, #50	; 0x32
 800cafc:	fb02 f303 	mul.w	r3, r2, r3
 800cb00:	4a11      	ldr	r2, [pc, #68]	; (800cb48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800cb02:	fba2 2303 	umull	r2, r3, r2, r3
 800cb06:	099b      	lsrs	r3, r3, #6
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800cb0c:	e002      	b.n	800cb14 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800cb14:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800cb16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1f3      	bne.n	800cb0e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e000      	b.n	800cb32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	46020800 	.word	0x46020800
 800cb44:	2000018c 	.word	0x2000018c
 800cb48:	10624dd3 	.word	0x10624dd3

0800cb4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800cb50:	4b04      	ldr	r3, [pc, #16]	; (800cb64 <HAL_PWREx_GetVoltageRange+0x18>)
 800cb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	46020800 	.word	0x46020800

0800cb68 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800cb70:	4b22      	ldr	r3, [pc, #136]	; (800cbfc <HAL_PWREx_ConfigSupply+0x94>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a22      	ldr	r2, [pc, #136]	; (800cc00 <HAL_PWREx_ConfigSupply+0x98>)
 800cb76:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7a:	099b      	lsrs	r3, r3, #6
 800cb7c:	2232      	movs	r2, #50	; 0x32
 800cb7e:	fb02 f303 	mul.w	r3, r2, r3
 800cb82:	4a1f      	ldr	r2, [pc, #124]	; (800cc00 <HAL_PWREx_ConfigSupply+0x98>)
 800cb84:	fba2 2303 	umull	r2, r3, r2, r3
 800cb88:	099b      	lsrs	r3, r3, #6
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d113      	bne.n	800cbbc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800cb94:	4b1b      	ldr	r3, [pc, #108]	; (800cc04 <HAL_PWREx_ConfigSupply+0x9c>)
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	4a1a      	ldr	r2, [pc, #104]	; (800cc04 <HAL_PWREx_ConfigSupply+0x9c>)
 800cb9a:	f023 0302 	bic.w	r3, r3, #2
 800cb9e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800cba0:	e002      	b.n	800cba8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800cba8:	4b16      	ldr	r3, [pc, #88]	; (800cc04 <HAL_PWREx_ConfigSupply+0x9c>)
 800cbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d116      	bne.n	800cbe2 <HAL_PWREx_ConfigSupply+0x7a>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1f3      	bne.n	800cba2 <HAL_PWREx_ConfigSupply+0x3a>
 800cbba:	e012      	b.n	800cbe2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800cbbc:	4b11      	ldr	r3, [pc, #68]	; (800cc04 <HAL_PWREx_ConfigSupply+0x9c>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	4a10      	ldr	r2, [pc, #64]	; (800cc04 <HAL_PWREx_ConfigSupply+0x9c>)
 800cbc2:	f043 0302 	orr.w	r3, r3, #2
 800cbc6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800cbc8:	e002      	b.n	800cbd0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800cbd0:	4b0c      	ldr	r3, [pc, #48]	; (800cc04 <HAL_PWREx_ConfigSupply+0x9c>)
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd4:	f003 0302 	and.w	r3, r3, #2
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <HAL_PWREx_ConfigSupply+0x7a>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1f3      	bne.n	800cbca <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e000      	b.n	800cbee <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	2000018c 	.word	0x2000018c
 800cc00:	10624dd3 	.word	0x10624dd3
 800cc04:	46020800 	.word	0x46020800

0800cc08 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800cc0c:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <HAL_PWREx_EnableVddUSB+0x1c>)
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	4a04      	ldr	r2, [pc, #16]	; (800cc24 <HAL_PWREx_EnableVddUSB+0x1c>)
 800cc12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc16:	6113      	str	r3, [r2, #16]
}
 800cc18:	bf00      	nop
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	46020800 	.word	0x46020800

0800cc28 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800cc2c:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <HAL_PWREx_EnableVddIO2+0x1c>)
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	4a04      	ldr	r2, [pc, #16]	; (800cc44 <HAL_PWREx_EnableVddIO2+0x1c>)
 800cc32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc36:	6113      	str	r3, [r2, #16]
}
 800cc38:	bf00      	nop
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	46020800 	.word	0x46020800

0800cc48 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800cc4c:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <HAL_PWREx_EnableVddA+0x1c>)
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	4a04      	ldr	r2, [pc, #16]	; (800cc64 <HAL_PWREx_EnableVddA+0x1c>)
 800cc52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc56:	6113      	str	r3, [r2, #16]
}
 800cc58:	bf00      	nop
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	46020800 	.word	0x46020800

0800cc68 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800cc6e:	f7ff ff6d 	bl	800cb4c <HAL_PWREx_GetVoltageRange>
 800cc72:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc7a:	d003      	beq.n	800cc84 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc82:	d107      	bne.n	800cc94 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800cc84:	4b06      	ldr	r3, [pc, #24]	; (800cca0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	4a05      	ldr	r2, [pc, #20]	; (800cca0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800cc8a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800cc8e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	e000      	b.n	800cc96 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	46020800 	.word	0x46020800

0800cca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08e      	sub	sp, #56	; 0x38
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800ccac:	2300      	movs	r3, #0
 800ccae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d102      	bne.n	800ccbe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	f000 bec8 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccbe:	4b99      	ldr	r3, [pc, #612]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	f003 030c 	and.w	r3, r3, #12
 800ccc6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ccc8:	4b96      	ldr	r3, [pc, #600]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ccca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cccc:	f003 0303 	and.w	r3, r3, #3
 800ccd0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 0310 	and.w	r3, r3, #16
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f000 816c 	beq.w	800cfb8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d007      	beq.n	800ccf6 <HAL_RCC_OscConfig+0x52>
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	2b0c      	cmp	r3, #12
 800ccea:	f040 80de 	bne.w	800ceaa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	f040 80da 	bne.w	800ceaa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d102      	bne.n	800cd04 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	f000 bea5 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd08:	4b86      	ldr	r3, [pc, #536]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d004      	beq.n	800cd1e <HAL_RCC_OscConfig+0x7a>
 800cd14:	4b83      	ldr	r3, [pc, #524]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cd1c:	e005      	b.n	800cd2a <HAL_RCC_OscConfig+0x86>
 800cd1e:	4b81      	ldr	r3, [pc, #516]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd24:	041b      	lsls	r3, r3, #16
 800cd26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d255      	bcs.n	800cdda <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10a      	bne.n	800cd4a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f001 f9d9 	bl	800e0f0 <RCC_SetFlashLatencyFromMSIRange>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	f000 be82 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800cd4a:	4b76      	ldr	r3, [pc, #472]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	4a75      	ldr	r2, [pc, #468]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd54:	6093      	str	r3, [r2, #8]
 800cd56:	4b73      	ldr	r3, [pc, #460]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	4970      	ldr	r1, [pc, #448]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd64:	4313      	orrs	r3, r2
 800cd66:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cd70:	d309      	bcc.n	800cd86 <HAL_RCC_OscConfig+0xe2>
 800cd72:	4b6c      	ldr	r3, [pc, #432]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	f023 021f 	bic.w	r2, r3, #31
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	4969      	ldr	r1, [pc, #420]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd80:	4313      	orrs	r3, r2
 800cd82:	60cb      	str	r3, [r1, #12]
 800cd84:	e07e      	b.n	800ce84 <HAL_RCC_OscConfig+0x1e0>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	da0a      	bge.n	800cda4 <HAL_RCC_OscConfig+0x100>
 800cd8e:	4b65      	ldr	r3, [pc, #404]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	015b      	lsls	r3, r3, #5
 800cd9c:	4961      	ldr	r1, [pc, #388]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	60cb      	str	r3, [r1, #12]
 800cda2:	e06f      	b.n	800ce84 <HAL_RCC_OscConfig+0x1e0>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdac:	d30a      	bcc.n	800cdc4 <HAL_RCC_OscConfig+0x120>
 800cdae:	4b5d      	ldr	r3, [pc, #372]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	029b      	lsls	r3, r3, #10
 800cdbc:	4959      	ldr	r1, [pc, #356]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	60cb      	str	r3, [r1, #12]
 800cdc2:	e05f      	b.n	800ce84 <HAL_RCC_OscConfig+0x1e0>
 800cdc4:	4b57      	ldr	r3, [pc, #348]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a1b      	ldr	r3, [r3, #32]
 800cdd0:	03db      	lsls	r3, r3, #15
 800cdd2:	4954      	ldr	r1, [pc, #336]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60cb      	str	r3, [r1, #12]
 800cdd8:	e054      	b.n	800ce84 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800cdda:	4b52      	ldr	r3, [pc, #328]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	4a51      	ldr	r2, [pc, #324]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cde0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cde4:	6093      	str	r3, [r2, #8]
 800cde6:	4b4f      	ldr	r3, [pc, #316]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf2:	494c      	ldr	r1, [pc, #304]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ce00:	d309      	bcc.n	800ce16 <HAL_RCC_OscConfig+0x172>
 800ce02:	4b48      	ldr	r3, [pc, #288]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	f023 021f 	bic.w	r2, r3, #31
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	4945      	ldr	r1, [pc, #276]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60cb      	str	r3, [r1, #12]
 800ce14:	e028      	b.n	800ce68 <HAL_RCC_OscConfig+0x1c4>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	da0a      	bge.n	800ce34 <HAL_RCC_OscConfig+0x190>
 800ce1e:	4b41      	ldr	r3, [pc, #260]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	015b      	lsls	r3, r3, #5
 800ce2c:	493d      	ldr	r1, [pc, #244]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	60cb      	str	r3, [r1, #12]
 800ce32:	e019      	b.n	800ce68 <HAL_RCC_OscConfig+0x1c4>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce3c:	d30a      	bcc.n	800ce54 <HAL_RCC_OscConfig+0x1b0>
 800ce3e:	4b39      	ldr	r3, [pc, #228]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	029b      	lsls	r3, r3, #10
 800ce4c:	4935      	ldr	r1, [pc, #212]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60cb      	str	r3, [r1, #12]
 800ce52:	e009      	b.n	800ce68 <HAL_RCC_OscConfig+0x1c4>
 800ce54:	4b33      	ldr	r3, [pc, #204]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a1b      	ldr	r3, [r3, #32]
 800ce60:	03db      	lsls	r3, r3, #15
 800ce62:	4930      	ldr	r1, [pc, #192]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ce64:	4313      	orrs	r3, r2
 800ce66:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10a      	bne.n	800ce84 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	4618      	mov	r0, r3
 800ce74:	f001 f93c 	bl	800e0f0 <RCC_SetFlashLatencyFromMSIRange>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	f000 bde5 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800ce84:	f001 f8de 	bl	800e044 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ce88:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <HAL_RCC_OscConfig+0x284>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f8 fe8d 	bl	8005bac <HAL_InitTick>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800ce98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 808a 	beq.w	800cfb6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800cea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea6:	f000 bdd2 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d066      	beq.n	800cf80 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ceb2:	4b1c      	ldr	r3, [pc, #112]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a1b      	ldr	r2, [pc, #108]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ceb8:	f043 0301 	orr.w	r3, r3, #1
 800cebc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cebe:	f7f8 feff 	bl	8005cc0 <HAL_GetTick>
 800cec2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800cec4:	e009      	b.n	800ceda <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cec6:	f7f8 fefb 	bl	8005cc0 <HAL_GetTick>
 800ceca:	4602      	mov	r2, r0
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d902      	bls.n	800ceda <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800ced4:	2303      	movs	r3, #3
 800ced6:	f000 bdba 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ceda:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0304 	and.w	r3, r3, #4
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0ef      	beq.n	800cec6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	4a0e      	ldr	r2, [pc, #56]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800ceec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cef0:	6093      	str	r3, [r2, #8]
 800cef2:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	4909      	ldr	r1, [pc, #36]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cf00:	4313      	orrs	r3, r2
 800cf02:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cf0c:	d30e      	bcc.n	800cf2c <HAL_RCC_OscConfig+0x288>
 800cf0e:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	f023 021f 	bic.w	r2, r3, #31
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	4902      	ldr	r1, [pc, #8]	; (800cf24 <HAL_RCC_OscConfig+0x280>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	60cb      	str	r3, [r1, #12]
 800cf20:	e04a      	b.n	800cfb8 <HAL_RCC_OscConfig+0x314>
 800cf22:	bf00      	nop
 800cf24:	46020c00 	.word	0x46020c00
 800cf28:	200001a0 	.word	0x200001a0
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	da0a      	bge.n	800cf4a <HAL_RCC_OscConfig+0x2a6>
 800cf34:	4b98      	ldr	r3, [pc, #608]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a1b      	ldr	r3, [r3, #32]
 800cf40:	015b      	lsls	r3, r3, #5
 800cf42:	4995      	ldr	r1, [pc, #596]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60cb      	str	r3, [r1, #12]
 800cf48:	e036      	b.n	800cfb8 <HAL_RCC_OscConfig+0x314>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf52:	d30a      	bcc.n	800cf6a <HAL_RCC_OscConfig+0x2c6>
 800cf54:	4b90      	ldr	r3, [pc, #576]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	029b      	lsls	r3, r3, #10
 800cf62:	498d      	ldr	r1, [pc, #564]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60cb      	str	r3, [r1, #12]
 800cf68:	e026      	b.n	800cfb8 <HAL_RCC_OscConfig+0x314>
 800cf6a:	4b8b      	ldr	r3, [pc, #556]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a1b      	ldr	r3, [r3, #32]
 800cf76:	03db      	lsls	r3, r3, #15
 800cf78:	4987      	ldr	r1, [pc, #540]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	60cb      	str	r3, [r1, #12]
 800cf7e:	e01b      	b.n	800cfb8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800cf80:	4b85      	ldr	r3, [pc, #532]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a84      	ldr	r2, [pc, #528]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cf86:	f023 0301 	bic.w	r3, r3, #1
 800cf8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cf8c:	f7f8 fe98 	bl	8005cc0 <HAL_GetTick>
 800cf90:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cf92:	e009      	b.n	800cfa8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cf94:	f7f8 fe94 	bl	8005cc0 <HAL_GetTick>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d902      	bls.n	800cfa8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800cfa2:	2303      	movs	r3, #3
 800cfa4:	f000 bd53 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800cfa8:	4b7b      	ldr	r3, [pc, #492]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 0304 	and.w	r3, r3, #4
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1ef      	bne.n	800cf94 <HAL_RCC_OscConfig+0x2f0>
 800cfb4:	e000      	b.n	800cfb8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cfb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 808b 	beq.w	800d0dc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	2b08      	cmp	r3, #8
 800cfca:	d005      	beq.n	800cfd8 <HAL_RCC_OscConfig+0x334>
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfce:	2b0c      	cmp	r3, #12
 800cfd0:	d109      	bne.n	800cfe6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	d106      	bne.n	800cfe6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d17d      	bne.n	800d0dc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	f000 bd34 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfee:	d106      	bne.n	800cffe <HAL_RCC_OscConfig+0x35a>
 800cff0:	4b69      	ldr	r3, [pc, #420]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a68      	ldr	r2, [pc, #416]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800cff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	e041      	b.n	800d082 <HAL_RCC_OscConfig+0x3de>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d006:	d112      	bne.n	800d02e <HAL_RCC_OscConfig+0x38a>
 800d008:	4b63      	ldr	r3, [pc, #396]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a62      	ldr	r2, [pc, #392]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d00e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	4b60      	ldr	r3, [pc, #384]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a5f      	ldr	r2, [pc, #380]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d01a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	4b5d      	ldr	r3, [pc, #372]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a5c      	ldr	r2, [pc, #368]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d02a:	6013      	str	r3, [r2, #0]
 800d02c:	e029      	b.n	800d082 <HAL_RCC_OscConfig+0x3de>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800d036:	d112      	bne.n	800d05e <HAL_RCC_OscConfig+0x3ba>
 800d038:	4b57      	ldr	r3, [pc, #348]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a56      	ldr	r2, [pc, #344]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d03e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	4b54      	ldr	r3, [pc, #336]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a53      	ldr	r2, [pc, #332]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d04a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	4b51      	ldr	r3, [pc, #324]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a50      	ldr	r2, [pc, #320]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	e011      	b.n	800d082 <HAL_RCC_OscConfig+0x3de>
 800d05e:	4b4e      	ldr	r3, [pc, #312]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a4d      	ldr	r2, [pc, #308]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	4b4b      	ldr	r3, [pc, #300]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a4a      	ldr	r2, [pc, #296]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d074:	6013      	str	r3, [r2, #0]
 800d076:	4b48      	ldr	r3, [pc, #288]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a47      	ldr	r2, [pc, #284]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d07c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d080:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d014      	beq.n	800d0b4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800d08a:	f7f8 fe19 	bl	8005cc0 <HAL_GetTick>
 800d08e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d090:	e009      	b.n	800d0a6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d092:	f7f8 fe15 	bl	8005cc0 <HAL_GetTick>
 800d096:	4602      	mov	r2, r0
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	2b64      	cmp	r3, #100	; 0x64
 800d09e:	d902      	bls.n	800d0a6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	f000 bcd4 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d0a6:	4b3c      	ldr	r3, [pc, #240]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0ef      	beq.n	800d092 <HAL_RCC_OscConfig+0x3ee>
 800d0b2:	e013      	b.n	800d0dc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800d0b4:	f7f8 fe04 	bl	8005cc0 <HAL_GetTick>
 800d0b8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d0ba:	e009      	b.n	800d0d0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d0bc:	f7f8 fe00 	bl	8005cc0 <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	2b64      	cmp	r3, #100	; 0x64
 800d0c8:	d902      	bls.n	800d0d0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	f000 bcbf 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d0d0:	4b31      	ldr	r3, [pc, #196]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1ef      	bne.n	800d0bc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 0302 	and.w	r3, r3, #2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d05f      	beq.n	800d1a8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	2b04      	cmp	r3, #4
 800d0ec:	d005      	beq.n	800d0fa <HAL_RCC_OscConfig+0x456>
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	2b0c      	cmp	r3, #12
 800d0f2:	d114      	bne.n	800d11e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d111      	bne.n	800d11e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	f000 bca3 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800d108:	4b23      	ldr	r3, [pc, #140]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	041b      	lsls	r3, r3, #16
 800d116:	4920      	ldr	r1, [pc, #128]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d11c:	e044      	b.n	800d1a8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d024      	beq.n	800d170 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800d126:	4b1c      	ldr	r3, [pc, #112]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a1b      	ldr	r2, [pc, #108]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d12c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d130:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d132:	f7f8 fdc5 	bl	8005cc0 <HAL_GetTick>
 800d136:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d138:	e009      	b.n	800d14e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d13a:	f7f8 fdc1 	bl	8005cc0 <HAL_GetTick>
 800d13e:	4602      	mov	r2, r0
 800d140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	2b02      	cmp	r3, #2
 800d146:	d902      	bls.n	800d14e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800d148:	2303      	movs	r3, #3
 800d14a:	f000 bc80 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0ef      	beq.n	800d13a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	041b      	lsls	r3, r3, #16
 800d168:	490b      	ldr	r1, [pc, #44]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	610b      	str	r3, [r1, #16]
 800d16e:	e01b      	b.n	800d1a8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800d170:	4b09      	ldr	r3, [pc, #36]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a08      	ldr	r2, [pc, #32]	; (800d198 <HAL_RCC_OscConfig+0x4f4>)
 800d176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d17a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d17c:	f7f8 fda0 	bl	8005cc0 <HAL_GetTick>
 800d180:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d182:	e00b      	b.n	800d19c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d184:	f7f8 fd9c 	bl	8005cc0 <HAL_GetTick>
 800d188:	4602      	mov	r2, r0
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d904      	bls.n	800d19c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	f000 bc5b 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
 800d198:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d19c:	4baf      	ldr	r3, [pc, #700]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1ed      	bne.n	800d184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f003 0308 	and.w	r3, r3, #8
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 80c8 	beq.w	800d346 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d1bc:	4ba7      	ldr	r3, [pc, #668]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d1be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1c2:	f003 0304 	and.w	r3, r3, #4
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d111      	bne.n	800d1ee <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1ca:	4ba4      	ldr	r3, [pc, #656]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1d0:	4aa2      	ldr	r2, [pc, #648]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d1d2:	f043 0304 	orr.w	r3, r3, #4
 800d1d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d1da:	4ba0      	ldr	r3, [pc, #640]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d1dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1e0:	f003 0304 	and.w	r3, r3, #4
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d1ee:	4b9c      	ldr	r3, [pc, #624]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d119      	bne.n	800d22e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d1fa:	4b99      	ldr	r3, [pc, #612]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fe:	4a98      	ldr	r2, [pc, #608]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d200:	f043 0301 	orr.w	r3, r3, #1
 800d204:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d206:	f7f8 fd5b 	bl	8005cc0 <HAL_GetTick>
 800d20a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d20c:	e009      	b.n	800d222 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d20e:	f7f8 fd57 	bl	8005cc0 <HAL_GetTick>
 800d212:	4602      	mov	r2, r0
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d902      	bls.n	800d222 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	f000 bc16 	b.w	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d222:	4b8f      	ldr	r3, [pc, #572]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0ef      	beq.n	800d20e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	695b      	ldr	r3, [r3, #20]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d05f      	beq.n	800d2f6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800d236:	4b89      	ldr	r3, [pc, #548]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d23c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	699a      	ldr	r2, [r3, #24]
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d248:	429a      	cmp	r2, r3
 800d24a:	d037      	beq.n	800d2bc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d006      	beq.n	800d264 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	e3f4      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d01b      	beq.n	800d2a6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800d26e:	4b7b      	ldr	r3, [pc, #492]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d274:	4a79      	ldr	r2, [pc, #484]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d276:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800d27a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800d27e:	f7f8 fd1f 	bl	8005cc0 <HAL_GetTick>
 800d282:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d284:	e008      	b.n	800d298 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d286:	f7f8 fd1b 	bl	8005cc0 <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	2b05      	cmp	r3, #5
 800d292:	d901      	bls.n	800d298 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e3da      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d298:	4b70      	ldr	r3, [pc, #448]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d29a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d29e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1ef      	bne.n	800d286 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800d2a6:	4b6d      	ldr	r3, [pc, #436]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	4969      	ldr	r1, [pc, #420]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800d2bc:	4b67      	ldr	r3, [pc, #412]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2c2:	4a66      	ldr	r2, [pc, #408]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800d2cc:	f7f8 fcf8 	bl	8005cc0 <HAL_GetTick>
 800d2d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800d2d2:	e008      	b.n	800d2e6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2d4:	f7f8 fcf4 	bl	8005cc0 <HAL_GetTick>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	2b05      	cmp	r3, #5
 800d2e0:	d901      	bls.n	800d2e6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e3b3      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800d2e6:	4b5d      	ldr	r3, [pc, #372]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d0ef      	beq.n	800d2d4 <HAL_RCC_OscConfig+0x630>
 800d2f4:	e01b      	b.n	800d32e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800d2f6:	4b59      	ldr	r3, [pc, #356]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d2fc:	4a57      	ldr	r2, [pc, #348]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d2fe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800d302:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800d306:	f7f8 fcdb 	bl	8005cc0 <HAL_GetTick>
 800d30a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d30c:	e008      	b.n	800d320 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d30e:	f7f8 fcd7 	bl	8005cc0 <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	2b05      	cmp	r3, #5
 800d31a:	d901      	bls.n	800d320 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e396      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800d320:	4b4e      	ldr	r3, [pc, #312]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1ef      	bne.n	800d30e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d32e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d332:	2b01      	cmp	r3, #1
 800d334:	d107      	bne.n	800d346 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d336:	4b49      	ldr	r3, [pc, #292]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d33c:	4a47      	ldr	r2, [pc, #284]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d33e:	f023 0304 	bic.w	r3, r3, #4
 800d342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 0304 	and.w	r3, r3, #4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8111 	beq.w	800d576 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800d354:	2300      	movs	r3, #0
 800d356:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d35a:	4b40      	ldr	r3, [pc, #256]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d35c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d111      	bne.n	800d38c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d368:	4b3c      	ldr	r3, [pc, #240]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d36a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d36e:	4a3b      	ldr	r2, [pc, #236]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d370:	f043 0304 	orr.w	r3, r3, #4
 800d374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d378:	4b38      	ldr	r3, [pc, #224]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d37a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	613b      	str	r3, [r7, #16]
 800d384:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800d386:	2301      	movs	r3, #1
 800d388:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d38c:	4b34      	ldr	r3, [pc, #208]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d390:	f003 0301 	and.w	r3, r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	d118      	bne.n	800d3ca <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d398:	4b31      	ldr	r3, [pc, #196]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39c:	4a30      	ldr	r2, [pc, #192]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d39e:	f043 0301 	orr.w	r3, r3, #1
 800d3a2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d3a4:	f7f8 fc8c 	bl	8005cc0 <HAL_GetTick>
 800d3a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d3aa:	e008      	b.n	800d3be <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3ac:	f7f8 fc88 	bl	8005cc0 <HAL_GetTick>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d901      	bls.n	800d3be <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e347      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d3be:	4b28      	ldr	r3, [pc, #160]	; (800d460 <HAL_RCC_OscConfig+0x7bc>)
 800d3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c2:	f003 0301 	and.w	r3, r3, #1
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d0f0      	beq.n	800d3ac <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d01f      	beq.n	800d416 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	f003 0304 	and.w	r3, r3, #4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d010      	beq.n	800d404 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d3e2:	4b1e      	ldr	r3, [pc, #120]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d3e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d3e8:	4a1c      	ldr	r2, [pc, #112]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d3ea:	f043 0304 	orr.w	r3, r3, #4
 800d3ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d3f2:	4b1a      	ldr	r3, [pc, #104]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d3f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d3f8:	4a18      	ldr	r2, [pc, #96]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d3fa:	f043 0301 	orr.w	r3, r3, #1
 800d3fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d402:	e018      	b.n	800d436 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d404:	4b15      	ldr	r3, [pc, #84]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d40a:	4a14      	ldr	r2, [pc, #80]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d40c:	f043 0301 	orr.w	r3, r3, #1
 800d410:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d414:	e00f      	b.n	800d436 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d416:	4b11      	ldr	r3, [pc, #68]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d41c:	4a0f      	ldr	r2, [pc, #60]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d41e:	f023 0301 	bic.w	r3, r3, #1
 800d422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d426:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d42c:	4a0b      	ldr	r2, [pc, #44]	; (800d45c <HAL_RCC_OscConfig+0x7b8>)
 800d42e:	f023 0304 	bic.w	r3, r3, #4
 800d432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d057      	beq.n	800d4ee <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800d43e:	f7f8 fc3f 	bl	8005cc0 <HAL_GetTick>
 800d442:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d444:	e00e      	b.n	800d464 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d446:	f7f8 fc3b 	bl	8005cc0 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	f241 3288 	movw	r2, #5000	; 0x1388
 800d454:	4293      	cmp	r3, r2
 800d456:	d905      	bls.n	800d464 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800d458:	2303      	movs	r3, #3
 800d45a:	e2f8      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
 800d45c:	46020c00 	.word	0x46020c00
 800d460:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d464:	4b9c      	ldr	r3, [pc, #624]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d46a:	f003 0302 	and.w	r3, r3, #2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0e9      	beq.n	800d446 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d01b      	beq.n	800d4b6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d47e:	4b96      	ldr	r3, [pc, #600]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d484:	4a94      	ldr	r2, [pc, #592]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d48a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d48e:	e00a      	b.n	800d4a6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d490:	f7f8 fc16 	bl	8005cc0 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d901      	bls.n	800d4a6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e2d3      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d4a6:	4b8c      	ldr	r3, [pc, #560]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d4a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d0ed      	beq.n	800d490 <HAL_RCC_OscConfig+0x7ec>
 800d4b4:	e053      	b.n	800d55e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d4b6:	4b88      	ldr	r3, [pc, #544]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d4b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4bc:	4a86      	ldr	r2, [pc, #536]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d4be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d4c6:	e00a      	b.n	800d4de <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4c8:	f7f8 fbfa 	bl	8005cc0 <HAL_GetTick>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d901      	bls.n	800d4de <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e2b7      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d4de:	4b7e      	ldr	r3, [pc, #504]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d4e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1ed      	bne.n	800d4c8 <HAL_RCC_OscConfig+0x824>
 800d4ec:	e037      	b.n	800d55e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800d4ee:	f7f8 fbe7 	bl	8005cc0 <HAL_GetTick>
 800d4f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d4f4:	e00a      	b.n	800d50c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4f6:	f7f8 fbe3 	bl	8005cc0 <HAL_GetTick>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	f241 3288 	movw	r2, #5000	; 0x1388
 800d504:	4293      	cmp	r3, r2
 800d506:	d901      	bls.n	800d50c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800d508:	2303      	movs	r3, #3
 800d50a:	e2a0      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d50c:	4b72      	ldr	r3, [pc, #456]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d50e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d512:	f003 0302 	and.w	r3, r3, #2
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1ed      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800d51a:	4b6f      	ldr	r3, [pc, #444]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d51c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d524:	2b00      	cmp	r3, #0
 800d526:	d01a      	beq.n	800d55e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d528:	4b6b      	ldr	r3, [pc, #428]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d52e:	4a6a      	ldr	r2, [pc, #424]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d534:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d538:	e00a      	b.n	800d550 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d53a:	f7f8 fbc1 	bl	8005cc0 <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	f241 3288 	movw	r2, #5000	; 0x1388
 800d548:	4293      	cmp	r3, r2
 800d54a:	d901      	bls.n	800d550 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e27e      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d550:	4b61      	ldr	r3, [pc, #388]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1ed      	bne.n	800d53a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d55e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d562:	2b01      	cmp	r3, #1
 800d564:	d107      	bne.n	800d576 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d566:	4b5c      	ldr	r3, [pc, #368]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d56c:	4a5a      	ldr	r2, [pc, #360]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d56e:	f023 0304 	bic.w	r3, r3, #4
 800d572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 0320 	and.w	r3, r3, #32
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d036      	beq.n	800d5f0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	2b00      	cmp	r3, #0
 800d588:	d019      	beq.n	800d5be <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800d58a:	4b53      	ldr	r3, [pc, #332]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a52      	ldr	r2, [pc, #328]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d594:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d596:	f7f8 fb93 	bl	8005cc0 <HAL_GetTick>
 800d59a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d59c:	e008      	b.n	800d5b0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d59e:	f7f8 fb8f 	bl	8005cc0 <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d901      	bls.n	800d5b0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e24e      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d5b0:	4b49      	ldr	r3, [pc, #292]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0f0      	beq.n	800d59e <HAL_RCC_OscConfig+0x8fa>
 800d5bc:	e018      	b.n	800d5f0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800d5be:	4b46      	ldr	r3, [pc, #280]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a45      	ldr	r2, [pc, #276]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d5c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5c8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d5ca:	f7f8 fb79 	bl	8005cc0 <HAL_GetTick>
 800d5ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d5d0:	e008      	b.n	800d5e4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d5d2:	f7f8 fb75 	bl	8005cc0 <HAL_GetTick>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d901      	bls.n	800d5e4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	e234      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d5e4:	4b3c      	ldr	r3, [pc, #240]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1f0      	bne.n	800d5d2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d036      	beq.n	800d66a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d600:	2b00      	cmp	r3, #0
 800d602:	d019      	beq.n	800d638 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800d604:	4b34      	ldr	r3, [pc, #208]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a33      	ldr	r2, [pc, #204]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d60a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d60e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d610:	f7f8 fb56 	bl	8005cc0 <HAL_GetTick>
 800d614:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d616:	e008      	b.n	800d62a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d618:	f7f8 fb52 	bl	8005cc0 <HAL_GetTick>
 800d61c:	4602      	mov	r2, r0
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	2b02      	cmp	r3, #2
 800d624:	d901      	bls.n	800d62a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800d626:	2303      	movs	r3, #3
 800d628:	e211      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800d62a:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d632:	2b00      	cmp	r3, #0
 800d634:	d0f0      	beq.n	800d618 <HAL_RCC_OscConfig+0x974>
 800d636:	e018      	b.n	800d66a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800d638:	4b27      	ldr	r3, [pc, #156]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a26      	ldr	r2, [pc, #152]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d63e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d642:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d644:	f7f8 fb3c 	bl	8005cc0 <HAL_GetTick>
 800d648:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d64a:	e008      	b.n	800d65e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800d64c:	f7f8 fb38 	bl	8005cc0 <HAL_GetTick>
 800d650:	4602      	mov	r2, r0
 800d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	2b02      	cmp	r3, #2
 800d658:	d901      	bls.n	800d65e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800d65a:	2303      	movs	r3, #3
 800d65c:	e1f7      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800d65e:	4b1e      	ldr	r3, [pc, #120]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1f0      	bne.n	800d64c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d672:	2b00      	cmp	r3, #0
 800d674:	d07f      	beq.n	800d776 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d062      	beq.n	800d744 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800d67e:	4b16      	ldr	r3, [pc, #88]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	4a15      	ldr	r2, [pc, #84]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d688:	6093      	str	r3, [r2, #8]
 800d68a:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d696:	4910      	ldr	r1, [pc, #64]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d698:	4313      	orrs	r3, r2
 800d69a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800d6a4:	d309      	bcc.n	800d6ba <HAL_RCC_OscConfig+0xa16>
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f023 021f 	bic.w	r2, r3, #31
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	4909      	ldr	r1, [pc, #36]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60cb      	str	r3, [r1, #12]
 800d6b8:	e02a      	b.n	800d710 <HAL_RCC_OscConfig+0xa6c>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	da0c      	bge.n	800d6dc <HAL_RCC_OscConfig+0xa38>
 800d6c2:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a1b      	ldr	r3, [r3, #32]
 800d6ce:	015b      	lsls	r3, r3, #5
 800d6d0:	4901      	ldr	r1, [pc, #4]	; (800d6d8 <HAL_RCC_OscConfig+0xa34>)
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	60cb      	str	r3, [r1, #12]
 800d6d6:	e01b      	b.n	800d710 <HAL_RCC_OscConfig+0xa6c>
 800d6d8:	46020c00 	.word	0x46020c00
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6e4:	d30a      	bcc.n	800d6fc <HAL_RCC_OscConfig+0xa58>
 800d6e6:	4ba1      	ldr	r3, [pc, #644]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a1b      	ldr	r3, [r3, #32]
 800d6f2:	029b      	lsls	r3, r3, #10
 800d6f4:	499d      	ldr	r1, [pc, #628]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	60cb      	str	r3, [r1, #12]
 800d6fa:	e009      	b.n	800d710 <HAL_RCC_OscConfig+0xa6c>
 800d6fc:	4b9b      	ldr	r3, [pc, #620]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a1b      	ldr	r3, [r3, #32]
 800d708:	03db      	lsls	r3, r3, #15
 800d70a:	4998      	ldr	r1, [pc, #608]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d70c:	4313      	orrs	r3, r2
 800d70e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800d710:	4b96      	ldr	r3, [pc, #600]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a95      	ldr	r2, [pc, #596]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d716:	f043 0310 	orr.w	r3, r3, #16
 800d71a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d71c:	f7f8 fad0 	bl	8005cc0 <HAL_GetTick>
 800d720:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d722:	e008      	b.n	800d736 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d724:	f7f8 facc 	bl	8005cc0 <HAL_GetTick>
 800d728:	4602      	mov	r2, r0
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d901      	bls.n	800d736 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800d732:	2303      	movs	r3, #3
 800d734:	e18b      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800d736:	4b8d      	ldr	r3, [pc, #564]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 0320 	and.w	r3, r3, #32
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0f0      	beq.n	800d724 <HAL_RCC_OscConfig+0xa80>
 800d742:	e018      	b.n	800d776 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800d744:	4b89      	ldr	r3, [pc, #548]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a88      	ldr	r2, [pc, #544]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d74a:	f023 0310 	bic.w	r3, r3, #16
 800d74e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800d750:	f7f8 fab6 	bl	8005cc0 <HAL_GetTick>
 800d754:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d756:	e008      	b.n	800d76a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800d758:	f7f8 fab2 	bl	8005cc0 <HAL_GetTick>
 800d75c:	4602      	mov	r2, r0
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	2b02      	cmp	r3, #2
 800d764:	d901      	bls.n	800d76a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e171      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800d76a:	4b80      	ldr	r3, [pc, #512]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f003 0320 	and.w	r3, r3, #32
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1f0      	bne.n	800d758 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 8166 	beq.w	800da4c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800d780:	2300      	movs	r3, #0
 800d782:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d786:	4b79      	ldr	r3, [pc, #484]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d788:	69db      	ldr	r3, [r3, #28]
 800d78a:	f003 030c 	and.w	r3, r3, #12
 800d78e:	2b0c      	cmp	r3, #12
 800d790:	f000 80f2 	beq.w	800d978 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d798:	2b02      	cmp	r3, #2
 800d79a:	f040 80c5 	bne.w	800d928 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d79e:	4b73      	ldr	r3, [pc, #460]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a72      	ldr	r2, [pc, #456]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d7a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d7aa:	f7f8 fa89 	bl	8005cc0 <HAL_GetTick>
 800d7ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d7b0:	e008      	b.n	800d7c4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7b2:	f7f8 fa85 	bl	8005cc0 <HAL_GetTick>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d901      	bls.n	800d7c4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	e144      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d7c4:	4b69      	ldr	r3, [pc, #420]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1f0      	bne.n	800d7b2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d7d0:	4b66      	ldr	r3, [pc, #408]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7d6:	f003 0304 	and.w	r3, r3, #4
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d111      	bne.n	800d802 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800d7de:	4b63      	ldr	r3, [pc, #396]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7e4:	4a61      	ldr	r2, [pc, #388]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7e6:	f043 0304 	orr.w	r3, r3, #4
 800d7ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d7ee:	4b5f      	ldr	r3, [pc, #380]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d7f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7f4:	f003 0304 	and.w	r3, r3, #4
 800d7f8:	60fb      	str	r3, [r7, #12]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800d802:	4b5b      	ldr	r3, [pc, #364]	; (800d970 <HAL_RCC_OscConfig+0xccc>)
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d80a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d80e:	d102      	bne.n	800d816 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800d810:	2301      	movs	r3, #1
 800d812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d816:	4b56      	ldr	r3, [pc, #344]	; (800d970 <HAL_RCC_OscConfig+0xccc>)
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	4a55      	ldr	r2, [pc, #340]	; (800d970 <HAL_RCC_OscConfig+0xccc>)
 800d81c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d820:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800d822:	4b52      	ldr	r3, [pc, #328]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d82a:	f023 0303 	bic.w	r3, r3, #3
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d836:	3a01      	subs	r2, #1
 800d838:	0212      	lsls	r2, r2, #8
 800d83a:	4311      	orrs	r1, r2
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d840:	430a      	orrs	r2, r1
 800d842:	494a      	ldr	r1, [pc, #296]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d844:	4313      	orrs	r3, r2
 800d846:	628b      	str	r3, [r1, #40]	; 0x28
 800d848:	4b48      	ldr	r3, [pc, #288]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d84a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d84c:	4b49      	ldr	r3, [pc, #292]	; (800d974 <HAL_RCC_OscConfig+0xcd0>)
 800d84e:	4013      	ands	r3, r2
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d854:	3a01      	subs	r2, #1
 800d856:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d85e:	3a01      	subs	r2, #1
 800d860:	0252      	lsls	r2, r2, #9
 800d862:	b292      	uxth	r2, r2
 800d864:	4311      	orrs	r1, r2
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d86a:	3a01      	subs	r2, #1
 800d86c:	0412      	lsls	r2, r2, #16
 800d86e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d872:	4311      	orrs	r1, r2
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d878:	3a01      	subs	r2, #1
 800d87a:	0612      	lsls	r2, r2, #24
 800d87c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d880:	430a      	orrs	r2, r1
 800d882:	493a      	ldr	r1, [pc, #232]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d884:	4313      	orrs	r3, r2
 800d886:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d888:	4b38      	ldr	r3, [pc, #224]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88c:	4a37      	ldr	r2, [pc, #220]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d88e:	f023 0310 	bic.w	r3, r3, #16
 800d892:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d898:	4a34      	ldr	r2, [pc, #208]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d89e:	4b33      	ldr	r3, [pc, #204]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a2:	4a32      	ldr	r2, [pc, #200]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8a4:	f043 0310 	orr.w	r3, r3, #16
 800d8a8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d8aa:	4b30      	ldr	r3, [pc, #192]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ae:	f023 020c 	bic.w	r2, r3, #12
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8b6:	492d      	ldr	r1, [pc, #180]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800d8bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d105      	bne.n	800d8d0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d8c4:	4b2a      	ldr	r3, [pc, #168]	; (800d970 <HAL_RCC_OscConfig+0xccc>)
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	4a29      	ldr	r2, [pc, #164]	; (800d970 <HAL_RCC_OscConfig+0xccc>)
 800d8ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8ce:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d8d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d107      	bne.n	800d8e8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d8d8:	4b24      	ldr	r3, [pc, #144]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d8de:	4a23      	ldr	r2, [pc, #140]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8e0:	f023 0304 	bic.w	r3, r3, #4
 800d8e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d8e8:	4b20      	ldr	r3, [pc, #128]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a1f      	ldr	r2, [pc, #124]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d8ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d8f4:	f7f8 f9e4 	bl	8005cc0 <HAL_GetTick>
 800d8f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d8fa:	e008      	b.n	800d90e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8fc:	f7f8 f9e0 	bl	8005cc0 <HAL_GetTick>
 800d900:	4602      	mov	r2, r0
 800d902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	2b02      	cmp	r3, #2
 800d908:	d901      	bls.n	800d90e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800d90a:	2303      	movs	r3, #3
 800d90c:	e09f      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d90e:	4b17      	ldr	r3, [pc, #92]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d916:	2b00      	cmp	r3, #0
 800d918:	d0f0      	beq.n	800d8fc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d91a:	4b14      	ldr	r3, [pc, #80]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91e:	4a13      	ldr	r2, [pc, #76]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d924:	6293      	str	r3, [r2, #40]	; 0x28
 800d926:	e091      	b.n	800da4c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d928:	4b10      	ldr	r3, [pc, #64]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a0f      	ldr	r2, [pc, #60]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d92e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d932:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d934:	f7f8 f9c4 	bl	8005cc0 <HAL_GetTick>
 800d938:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d93a:	e008      	b.n	800d94e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d93c:	f7f8 f9c0 	bl	8005cc0 <HAL_GetTick>
 800d940:	4602      	mov	r2, r0
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	2b02      	cmp	r3, #2
 800d948:	d901      	bls.n	800d94e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800d94a:	2303      	movs	r3, #3
 800d94c:	e07f      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d94e:	4b07      	ldr	r3, [pc, #28]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1f0      	bne.n	800d93c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d95a:	4b04      	ldr	r3, [pc, #16]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d95e:	4a03      	ldr	r2, [pc, #12]	; (800d96c <HAL_RCC_OscConfig+0xcc8>)
 800d960:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d964:	f023 0303 	bic.w	r3, r3, #3
 800d968:	6293      	str	r3, [r2, #40]	; 0x28
 800d96a:	e06f      	b.n	800da4c <HAL_RCC_OscConfig+0xda8>
 800d96c:	46020c00 	.word	0x46020c00
 800d970:	46020800 	.word	0x46020800
 800d974:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d978:	4b37      	ldr	r3, [pc, #220]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800d97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d97e:	4b36      	ldr	r3, [pc, #216]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800d980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d982:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d039      	beq.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f003 0203 	and.w	r2, r3, #3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d996:	429a      	cmp	r2, r3
 800d998:	d132      	bne.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	0a1b      	lsrs	r3, r3, #8
 800d99e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d129      	bne.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d122      	bne.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9c4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d11a      	bne.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	0a5b      	lsrs	r3, r3, #9
 800d9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d111      	bne.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	0c1b      	lsrs	r3, r3, #16
 800d9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d108      	bne.n	800da00 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	0e1b      	lsrs	r3, r3, #24
 800d9f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d001      	beq.n	800da04 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e024      	b.n	800da4e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800da04:	4b14      	ldr	r3, [pc, #80]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	08db      	lsrs	r3, r3, #3
 800da0a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800da12:	429a      	cmp	r2, r3
 800da14:	d01a      	beq.n	800da4c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800da16:	4b10      	ldr	r3, [pc, #64]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800da18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1a:	4a0f      	ldr	r2, [pc, #60]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800da1c:	f023 0310 	bic.w	r3, r3, #16
 800da20:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da22:	f7f8 f94d 	bl	8005cc0 <HAL_GetTick>
 800da26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800da28:	bf00      	nop
 800da2a:	f7f8 f949 	bl	8005cc0 <HAL_GetTick>
 800da2e:	4602      	mov	r2, r0
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	4293      	cmp	r3, r2
 800da34:	d0f9      	beq.n	800da2a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da3a:	4a07      	ldr	r2, [pc, #28]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800da40:	4b05      	ldr	r3, [pc, #20]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800da42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da44:	4a04      	ldr	r2, [pc, #16]	; (800da58 <HAL_RCC_OscConfig+0xdb4>)
 800da46:	f043 0310 	orr.w	r3, r3, #16
 800da4a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3738      	adds	r7, #56	; 0x38
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	46020c00 	.word	0x46020c00

0800da5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	e1d9      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da70:	4b9b      	ldr	r3, [pc, #620]	; (800dce0 <HAL_RCC_ClockConfig+0x284>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f003 030f 	and.w	r3, r3, #15
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d910      	bls.n	800daa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da7e:	4b98      	ldr	r3, [pc, #608]	; (800dce0 <HAL_RCC_ClockConfig+0x284>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f023 020f 	bic.w	r2, r3, #15
 800da86:	4996      	ldr	r1, [pc, #600]	; (800dce0 <HAL_RCC_ClockConfig+0x284>)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da8e:	4b94      	ldr	r3, [pc, #592]	; (800dce0 <HAL_RCC_ClockConfig+0x284>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 030f 	and.w	r3, r3, #15
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d001      	beq.n	800daa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	e1c1      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 0310 	and.w	r3, r3, #16
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d010      	beq.n	800dace <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	695a      	ldr	r2, [r3, #20]
 800dab0:	4b8c      	ldr	r3, [pc, #560]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dab8:	429a      	cmp	r2, r3
 800daba:	d908      	bls.n	800dace <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800dabc:	4b89      	ldr	r3, [pc, #548]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	4986      	ldr	r1, [pc, #536]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800daca:	4313      	orrs	r3, r2
 800dacc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f003 0308 	and.w	r3, r3, #8
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d012      	beq.n	800db00 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	691a      	ldr	r2, [r3, #16]
 800dade:	4b81      	ldr	r3, [pc, #516]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dae0:	6a1b      	ldr	r3, [r3, #32]
 800dae2:	091b      	lsrs	r3, r3, #4
 800dae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dae8:	429a      	cmp	r2, r3
 800daea:	d909      	bls.n	800db00 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800daec:	4b7d      	ldr	r3, [pc, #500]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800daee:	6a1b      	ldr	r3, [r3, #32]
 800daf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	011b      	lsls	r3, r3, #4
 800dafa:	497a      	ldr	r1, [pc, #488]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dafc:	4313      	orrs	r3, r2
 800dafe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d010      	beq.n	800db2e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	4b74      	ldr	r3, [pc, #464]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db12:	6a1b      	ldr	r3, [r3, #32]
 800db14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800db18:	429a      	cmp	r2, r3
 800db1a:	d908      	bls.n	800db2e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800db1c:	4b71      	ldr	r3, [pc, #452]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db1e:	6a1b      	ldr	r3, [r3, #32]
 800db20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	496e      	ldr	r1, [pc, #440]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db2a:	4313      	orrs	r3, r2
 800db2c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	2b00      	cmp	r3, #0
 800db38:	d010      	beq.n	800db5c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	689a      	ldr	r2, [r3, #8]
 800db3e:	4b69      	ldr	r3, [pc, #420]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	f003 030f 	and.w	r3, r3, #15
 800db46:	429a      	cmp	r2, r3
 800db48:	d908      	bls.n	800db5c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800db4a:	4b66      	ldr	r3, [pc, #408]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f023 020f 	bic.w	r2, r3, #15
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	4963      	ldr	r1, [pc, #396]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db58:	4313      	orrs	r3, r2
 800db5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b00      	cmp	r3, #0
 800db66:	f000 80d2 	beq.w	800dd0e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800db6a:	2300      	movs	r3, #0
 800db6c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	2b03      	cmp	r3, #3
 800db74:	d143      	bne.n	800dbfe <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db76:	4b5b      	ldr	r3, [pc, #364]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db7c:	f003 0304 	and.w	r3, r3, #4
 800db80:	2b00      	cmp	r3, #0
 800db82:	d110      	bne.n	800dba6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800db84:	4b57      	ldr	r3, [pc, #348]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db8a:	4a56      	ldr	r2, [pc, #344]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db8c:	f043 0304 	orr.w	r3, r3, #4
 800db90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800db94:	4b53      	ldr	r3, [pc, #332]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800db96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db9a:	f003 0304 	and.w	r3, r3, #4
 800db9e:	60bb      	str	r3, [r7, #8]
 800dba0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800dba2:	2301      	movs	r3, #1
 800dba4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800dba6:	f7f8 f88b 	bl	8005cc0 <HAL_GetTick>
 800dbaa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800dbac:	4b4e      	ldr	r3, [pc, #312]	; (800dce8 <HAL_RCC_ClockConfig+0x28c>)
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00f      	beq.n	800dbd8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800dbb8:	e008      	b.n	800dbcc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800dbba:	f7f8 f881 	bl	8005cc0 <HAL_GetTick>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d901      	bls.n	800dbcc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	e12b      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800dbcc:	4b46      	ldr	r3, [pc, #280]	; (800dce8 <HAL_RCC_ClockConfig+0x28c>)
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d0f0      	beq.n	800dbba <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d107      	bne.n	800dbee <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800dbde:	4b41      	ldr	r3, [pc, #260]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dbe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbe4:	4a3f      	ldr	r2, [pc, #252]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dbe6:	f023 0304 	bic.w	r3, r3, #4
 800dbea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800dbee:	4b3d      	ldr	r3, [pc, #244]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d121      	bne.n	800dc3e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e112      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d107      	bne.n	800dc16 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dc06:	4b37      	ldr	r3, [pc, #220]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d115      	bne.n	800dc3e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e106      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d107      	bne.n	800dc2e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800dc1e:	4b31      	ldr	r3, [pc, #196]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f003 0304 	and.w	r3, r3, #4
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d109      	bne.n	800dc3e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e0fa      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dc2e:	4b2d      	ldr	r3, [pc, #180]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d101      	bne.n	800dc3e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e0f2      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800dc3e:	4b29      	ldr	r3, [pc, #164]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dc40:	69db      	ldr	r3, [r3, #28]
 800dc42:	f023 0203 	bic.w	r2, r3, #3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	4926      	ldr	r1, [pc, #152]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800dc50:	f7f8 f836 	bl	8005cc0 <HAL_GetTick>
 800dc54:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d112      	bne.n	800dc84 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc5e:	e00a      	b.n	800dc76 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc60:	f7f8 f82e 	bl	8005cc0 <HAL_GetTick>
 800dc64:	4602      	mov	r2, r0
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d901      	bls.n	800dc76 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800dc72:	2303      	movs	r3, #3
 800dc74:	e0d6      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc76:	4b1b      	ldr	r3, [pc, #108]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dc78:	69db      	ldr	r3, [r3, #28]
 800dc7a:	f003 030c 	and.w	r3, r3, #12
 800dc7e:	2b0c      	cmp	r3, #12
 800dc80:	d1ee      	bne.n	800dc60 <HAL_RCC_ClockConfig+0x204>
 800dc82:	e044      	b.n	800dd0e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d112      	bne.n	800dcb2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800dc8c:	e00a      	b.n	800dca4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc8e:	f7f8 f817 	bl	8005cc0 <HAL_GetTick>
 800dc92:	4602      	mov	r2, r0
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	1ad3      	subs	r3, r2, r3
 800dc98:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d901      	bls.n	800dca4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e0bf      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dca6:	69db      	ldr	r3, [r3, #28]
 800dca8:	f003 030c 	and.w	r3, r3, #12
 800dcac:	2b08      	cmp	r3, #8
 800dcae:	d1ee      	bne.n	800dc8e <HAL_RCC_ClockConfig+0x232>
 800dcb0:	e02d      	b.n	800dd0e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d123      	bne.n	800dd02 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800dcba:	e00a      	b.n	800dcd2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dcbc:	f7f8 f800 	bl	8005cc0 <HAL_GetTick>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d901      	bls.n	800dcd2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e0a8      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800dcd2:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <HAL_RCC_ClockConfig+0x288>)
 800dcd4:	69db      	ldr	r3, [r3, #28]
 800dcd6:	f003 030c 	and.w	r3, r3, #12
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1ee      	bne.n	800dcbc <HAL_RCC_ClockConfig+0x260>
 800dcde:	e016      	b.n	800dd0e <HAL_RCC_ClockConfig+0x2b2>
 800dce0:	40022000 	.word	0x40022000
 800dce4:	46020c00 	.word	0x46020c00
 800dce8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dcec:	f7f7 ffe8 	bl	8005cc0 <HAL_GetTick>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d901      	bls.n	800dd02 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e090      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800dd02:	4b4a      	ldr	r3, [pc, #296]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd04:	69db      	ldr	r3, [r3, #28]
 800dd06:	f003 030c 	and.w	r3, r3, #12
 800dd0a:	2b04      	cmp	r3, #4
 800dd0c:	d1ee      	bne.n	800dcec <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f003 0302 	and.w	r3, r3, #2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d010      	beq.n	800dd3c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	689a      	ldr	r2, [r3, #8]
 800dd1e:	4b43      	ldr	r3, [pc, #268]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd20:	6a1b      	ldr	r3, [r3, #32]
 800dd22:	f003 030f 	and.w	r3, r3, #15
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d208      	bcs.n	800dd3c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800dd2a:	4b40      	ldr	r3, [pc, #256]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	f023 020f 	bic.w	r2, r3, #15
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	493d      	ldr	r1, [pc, #244]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dd3c:	4b3c      	ldr	r3, [pc, #240]	; (800de30 <HAL_RCC_ClockConfig+0x3d4>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d210      	bcs.n	800dd6c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd4a:	4b39      	ldr	r3, [pc, #228]	; (800de30 <HAL_RCC_ClockConfig+0x3d4>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f023 020f 	bic.w	r2, r3, #15
 800dd52:	4937      	ldr	r1, [pc, #220]	; (800de30 <HAL_RCC_ClockConfig+0x3d4>)
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd5a:	4b35      	ldr	r3, [pc, #212]	; (800de30 <HAL_RCC_ClockConfig+0x3d4>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 030f 	and.w	r3, r3, #15
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d001      	beq.n	800dd6c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e05b      	b.n	800de24 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f003 0304 	and.w	r3, r3, #4
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d010      	beq.n	800dd9a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	4b2b      	ldr	r3, [pc, #172]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd7e:	6a1b      	ldr	r3, [r3, #32]
 800dd80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d208      	bcs.n	800dd9a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800dd88:	4b28      	ldr	r3, [pc, #160]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd8a:	6a1b      	ldr	r3, [r3, #32]
 800dd8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	4925      	ldr	r1, [pc, #148]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800dd96:	4313      	orrs	r3, r2
 800dd98:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f003 0308 	and.w	r3, r3, #8
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d012      	beq.n	800ddcc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	691a      	ldr	r2, [r3, #16]
 800ddaa:	4b20      	ldr	r3, [pc, #128]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	091b      	lsrs	r3, r3, #4
 800ddb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d209      	bcs.n	800ddcc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800ddb8:	4b1c      	ldr	r3, [pc, #112]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800ddba:	6a1b      	ldr	r3, [r3, #32]
 800ddbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	011b      	lsls	r3, r3, #4
 800ddc6:	4919      	ldr	r1, [pc, #100]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 0310 	and.w	r3, r3, #16
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d010      	beq.n	800ddfa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	695a      	ldr	r2, [r3, #20]
 800dddc:	4b13      	ldr	r3, [pc, #76]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800ddde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d208      	bcs.n	800ddfa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800dde8:	4b10      	ldr	r3, [pc, #64]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800ddea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	490d      	ldr	r1, [pc, #52]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ddfa:	f000 f821 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800ddfe:	4602      	mov	r2, r0
 800de00:	4b0a      	ldr	r3, [pc, #40]	; (800de2c <HAL_RCC_ClockConfig+0x3d0>)
 800de02:	6a1b      	ldr	r3, [r3, #32]
 800de04:	f003 030f 	and.w	r3, r3, #15
 800de08:	490a      	ldr	r1, [pc, #40]	; (800de34 <HAL_RCC_ClockConfig+0x3d8>)
 800de0a:	5ccb      	ldrb	r3, [r1, r3]
 800de0c:	fa22 f303 	lsr.w	r3, r2, r3
 800de10:	4a09      	ldr	r2, [pc, #36]	; (800de38 <HAL_RCC_ClockConfig+0x3dc>)
 800de12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800de14:	4b09      	ldr	r3, [pc, #36]	; (800de3c <HAL_RCC_ClockConfig+0x3e0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4618      	mov	r0, r3
 800de1a:	f7f7 fec7 	bl	8005bac <HAL_InitTick>
 800de1e:	4603      	mov	r3, r0
 800de20:	73fb      	strb	r3, [r7, #15]

  return status;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	46020c00 	.word	0x46020c00
 800de30:	40022000 	.word	0x40022000
 800de34:	080193ec 	.word	0x080193ec
 800de38:	2000018c 	.word	0x2000018c
 800de3c:	200001a0 	.word	0x200001a0

0800de40 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de40:	b480      	push	{r7}
 800de42:	b08b      	sub	sp, #44	; 0x2c
 800de44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800de46:	2300      	movs	r3, #0
 800de48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800de4a:	2300      	movs	r3, #0
 800de4c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de4e:	4b78      	ldr	r3, [pc, #480]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800de50:	69db      	ldr	r3, [r3, #28]
 800de52:	f003 030c 	and.w	r3, r3, #12
 800de56:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800de58:	4b75      	ldr	r3, [pc, #468]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5c:	f003 0303 	and.w	r3, r3, #3
 800de60:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d005      	beq.n	800de74 <HAL_RCC_GetSysClockFreq+0x34>
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	2b0c      	cmp	r3, #12
 800de6c:	d121      	bne.n	800deb2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d11e      	bne.n	800deb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800de74:	4b6e      	ldr	r3, [pc, #440]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d107      	bne.n	800de90 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800de80:	4b6b      	ldr	r3, [pc, #428]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800de82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de86:	0b1b      	lsrs	r3, r3, #12
 800de88:	f003 030f 	and.w	r3, r3, #15
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
 800de8e:	e005      	b.n	800de9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800de90:	4b67      	ldr	r3, [pc, #412]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	0f1b      	lsrs	r3, r3, #28
 800de96:	f003 030f 	and.w	r3, r3, #15
 800de9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800de9c:	4a65      	ldr	r2, [pc, #404]	; (800e034 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dea4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d110      	bne.n	800dece <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800deb0:	e00d      	b.n	800dece <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800deb2:	4b5f      	ldr	r3, [pc, #380]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800deb4:	69db      	ldr	r3, [r3, #28]
 800deb6:	f003 030c 	and.w	r3, r3, #12
 800deba:	2b04      	cmp	r3, #4
 800debc:	d102      	bne.n	800dec4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800debe:	4b5e      	ldr	r3, [pc, #376]	; (800e038 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800dec0:	623b      	str	r3, [r7, #32]
 800dec2:	e004      	b.n	800dece <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	2b08      	cmp	r3, #8
 800dec8:	d101      	bne.n	800dece <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800deca:	4b5b      	ldr	r3, [pc, #364]	; (800e038 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800decc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	2b0c      	cmp	r3, #12
 800ded2:	f040 80a5 	bne.w	800e020 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ded6:	4b56      	ldr	r3, [pc, #344]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ded8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deda:	f003 0303 	and.w	r3, r3, #3
 800dede:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800dee0:	4b53      	ldr	r3, [pc, #332]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee4:	0a1b      	lsrs	r3, r3, #8
 800dee6:	f003 030f 	and.w	r3, r3, #15
 800deea:	3301      	adds	r3, #1
 800deec:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800deee:	4b50      	ldr	r3, [pc, #320]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800def0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def2:	091b      	lsrs	r3, r3, #4
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800defa:	4b4d      	ldr	r3, [pc, #308]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	08db      	lsrs	r3, r3, #3
 800df00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	fb02 f303 	mul.w	r3, r2, r3
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df12:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d003      	beq.n	800df24 <HAL_RCC_GetSysClockFreq+0xe4>
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	2b03      	cmp	r3, #3
 800df20:	d022      	beq.n	800df68 <HAL_RCC_GetSysClockFreq+0x128>
 800df22:	e043      	b.n	800dfac <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	ee07 3a90 	vmov	s15, r3
 800df2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df2e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800e03c <HAL_RCC_GetSysClockFreq+0x1fc>
 800df32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df36:	4b3e      	ldr	r3, [pc, #248]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800df38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df3e:	ee07 3a90 	vmov	s15, r3
 800df42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800df46:	ed97 6a01 	vldr	s12, [r7, #4]
 800df4a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800e040 <HAL_RCC_GetSysClockFreq+0x200>
 800df4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800df56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df66:	e046      	b.n	800dff6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	ee07 3a90 	vmov	s15, r3
 800df6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df72:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e03c <HAL_RCC_GetSysClockFreq+0x1fc>
 800df76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df7a:	4b2d      	ldr	r3, [pc, #180]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800df7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df82:	ee07 3a90 	vmov	s15, r3
 800df86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800df8a:	ed97 6a01 	vldr	s12, [r7, #4]
 800df8e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e040 <HAL_RCC_GetSysClockFreq+0x200>
 800df92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800df9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfaa:	e024      	b.n	800dff6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	ee07 3a90 	vmov	s15, r3
 800dfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	ee07 3a90 	vmov	s15, r3
 800dfbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfc4:	4b1a      	ldr	r3, [pc, #104]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfcc:	ee07 3a90 	vmov	s15, r3
 800dfd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dfd4:	ed97 6a01 	vldr	s12, [r7, #4]
 800dfd8:	eddf 5a19 	vldr	s11, [pc, #100]	; 800e040 <HAL_RCC_GetSysClockFreq+0x200>
 800dfdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800dfe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dff0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dff4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800dff6:	4b0e      	ldr	r3, [pc, #56]	; (800e030 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800dff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffa:	0e1b      	lsrs	r3, r3, #24
 800dffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e000:	3301      	adds	r3, #1
 800e002:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	ee07 3a90 	vmov	s15, r3
 800e00a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e01a:	ee17 3a90 	vmov	r3, s15
 800e01e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800e020:	6a3b      	ldr	r3, [r7, #32]
}
 800e022:	4618      	mov	r0, r3
 800e024:	372c      	adds	r7, #44	; 0x2c
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	46020c00 	.word	0x46020c00
 800e034:	08019404 	.word	0x08019404
 800e038:	00f42400 	.word	0x00f42400
 800e03c:	4b742400 	.word	0x4b742400
 800e040:	46000000 	.word	0x46000000

0800e044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800e048:	f7ff fefa 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800e04c:	4602      	mov	r2, r0
 800e04e:	4b07      	ldr	r3, [pc, #28]	; (800e06c <HAL_RCC_GetHCLKFreq+0x28>)
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	f003 030f 	and.w	r3, r3, #15
 800e056:	4906      	ldr	r1, [pc, #24]	; (800e070 <HAL_RCC_GetHCLKFreq+0x2c>)
 800e058:	5ccb      	ldrb	r3, [r1, r3]
 800e05a:	fa22 f303 	lsr.w	r3, r2, r3
 800e05e:	4a05      	ldr	r2, [pc, #20]	; (800e074 <HAL_RCC_GetHCLKFreq+0x30>)
 800e060:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800e062:	4b04      	ldr	r3, [pc, #16]	; (800e074 <HAL_RCC_GetHCLKFreq+0x30>)
 800e064:	681b      	ldr	r3, [r3, #0]
}
 800e066:	4618      	mov	r0, r3
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	46020c00 	.word	0x46020c00
 800e070:	080193ec 	.word	0x080193ec
 800e074:	2000018c 	.word	0x2000018c

0800e078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800e07c:	f7ff ffe2 	bl	800e044 <HAL_RCC_GetHCLKFreq>
 800e080:	4602      	mov	r2, r0
 800e082:	4b05      	ldr	r3, [pc, #20]	; (800e098 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	091b      	lsrs	r3, r3, #4
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	4903      	ldr	r1, [pc, #12]	; (800e09c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e08e:	5ccb      	ldrb	r3, [r1, r3]
 800e090:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e094:	4618      	mov	r0, r3
 800e096:	bd80      	pop	{r7, pc}
 800e098:	46020c00 	.word	0x46020c00
 800e09c:	080193fc 	.word	0x080193fc

0800e0a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800e0a4:	f7ff ffce 	bl	800e044 <HAL_RCC_GetHCLKFreq>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e0ac:	6a1b      	ldr	r3, [r3, #32]
 800e0ae:	0a1b      	lsrs	r3, r3, #8
 800e0b0:	f003 0307 	and.w	r3, r3, #7
 800e0b4:	4903      	ldr	r1, [pc, #12]	; (800e0c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0b6:	5ccb      	ldrb	r3, [r1, r3]
 800e0b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	46020c00 	.word	0x46020c00
 800e0c4:	080193fc 	.word	0x080193fc

0800e0c8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800e0cc:	f7ff ffba 	bl	800e044 <HAL_RCC_GetHCLKFreq>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <HAL_RCC_GetPCLK3Freq+0x20>)
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d6:	091b      	lsrs	r3, r3, #4
 800e0d8:	f003 0307 	and.w	r3, r3, #7
 800e0dc:	4903      	ldr	r1, [pc, #12]	; (800e0ec <HAL_RCC_GetPCLK3Freq+0x24>)
 800e0de:	5ccb      	ldrb	r3, [r1, r3]
 800e0e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	46020c00 	.word	0x46020c00
 800e0ec:	080193fc 	.word	0x080193fc

0800e0f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e0f8:	4b3e      	ldr	r3, [pc, #248]	; (800e1f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800e0fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e0fe:	f003 0304 	and.w	r3, r3, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	d003      	beq.n	800e10e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800e106:	f7fe fd21 	bl	800cb4c <HAL_PWREx_GetVoltageRange>
 800e10a:	6178      	str	r0, [r7, #20]
 800e10c:	e019      	b.n	800e142 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800e10e:	4b39      	ldr	r3, [pc, #228]	; (800e1f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800e110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e114:	4a37      	ldr	r2, [pc, #220]	; (800e1f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800e116:	f043 0304 	orr.w	r3, r3, #4
 800e11a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e11e:	4b35      	ldr	r3, [pc, #212]	; (800e1f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800e120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e124:	f003 0304 	and.w	r3, r3, #4
 800e128:	60fb      	str	r3, [r7, #12]
 800e12a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800e12c:	f7fe fd0e 	bl	800cb4c <HAL_PWREx_GetVoltageRange>
 800e130:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800e132:	4b30      	ldr	r3, [pc, #192]	; (800e1f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800e134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e138:	4a2e      	ldr	r2, [pc, #184]	; (800e1f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800e13a:	f023 0304 	bic.w	r3, r3, #4
 800e13e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e148:	d003      	beq.n	800e152 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e150:	d109      	bne.n	800e166 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e158:	d202      	bcs.n	800e160 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800e15a:	2301      	movs	r3, #1
 800e15c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800e15e:	e033      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800e160:	2300      	movs	r3, #0
 800e162:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800e164:	e030      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e16c:	d208      	bcs.n	800e180 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e174:	d102      	bne.n	800e17c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800e176:	2303      	movs	r3, #3
 800e178:	613b      	str	r3, [r7, #16]
 800e17a:	e025      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e035      	b.n	800e1ec <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e186:	d90f      	bls.n	800e1a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d109      	bne.n	800e1a2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e194:	d902      	bls.n	800e19c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800e196:	2300      	movs	r3, #0
 800e198:	613b      	str	r3, [r7, #16]
 800e19a:	e015      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800e19c:	2301      	movs	r3, #1
 800e19e:	613b      	str	r3, [r7, #16]
 800e1a0:	e012      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	613b      	str	r3, [r7, #16]
 800e1a6:	e00f      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1ae:	d109      	bne.n	800e1c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b6:	d102      	bne.n	800e1be <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	613b      	str	r3, [r7, #16]
 800e1bc:	e004      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800e1be:	2302      	movs	r3, #2
 800e1c0:	613b      	str	r3, [r7, #16]
 800e1c2:	e001      	b.n	800e1c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e1c8:	4b0b      	ldr	r3, [pc, #44]	; (800e1f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f023 020f 	bic.w	r2, r3, #15
 800e1d0:	4909      	ldr	r1, [pc, #36]	; (800e1f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800e1d8:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 030f 	and.w	r3, r3, #15
 800e1e0:	693a      	ldr	r2, [r7, #16]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d001      	beq.n	800e1ea <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e000      	b.n	800e1ec <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	46020c00 	.word	0x46020c00
 800e1f8:	40022000 	.word	0x40022000

0800e1fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800e1fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e200:	b0c8      	sub	sp, #288	; 0x120
 800e202:	af00      	add	r7, sp, #0
 800e204:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e208:	2300      	movs	r3, #0
 800e20a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e20e:	2300      	movs	r3, #0
 800e210:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	f002 0401 	and.w	r4, r2, #1
 800e220:	2500      	movs	r5, #0
 800e222:	ea54 0305 	orrs.w	r3, r4, r5
 800e226:	d00b      	beq.n	800e240 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800e228:	4bd5      	ldr	r3, [pc, #852]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e22a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e22e:	f023 0103 	bic.w	r1, r3, #3
 800e232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e238:	4ad1      	ldr	r2, [pc, #836]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e23a:	430b      	orrs	r3, r1
 800e23c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	f002 0802 	and.w	r8, r2, #2
 800e24c:	f04f 0900 	mov.w	r9, #0
 800e250:	ea58 0309 	orrs.w	r3, r8, r9
 800e254:	d00b      	beq.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800e256:	4bca      	ldr	r3, [pc, #808]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e25c:	f023 010c 	bic.w	r1, r3, #12
 800e260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e266:	4ac6      	ldr	r2, [pc, #792]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e268:	430b      	orrs	r3, r1
 800e26a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e276:	f002 0a04 	and.w	sl, r2, #4
 800e27a:	f04f 0b00 	mov.w	fp, #0
 800e27e:	ea5a 030b 	orrs.w	r3, sl, fp
 800e282:	d00b      	beq.n	800e29c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800e284:	4bbe      	ldr	r3, [pc, #760]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e28a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e294:	4aba      	ldr	r2, [pc, #744]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e296:	430b      	orrs	r3, r1
 800e298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a4:	f002 0308 	and.w	r3, r2, #8
 800e2a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e2b2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	d00b      	beq.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800e2bc:	4bb0      	ldr	r3, [pc, #704]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e2be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e2c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2cc:	4aac      	ldr	r2, [pc, #688]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e2ce:	430b      	orrs	r3, r1
 800e2d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	f002 0310 	and.w	r3, r2, #16
 800e2e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e2ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	d00b      	beq.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800e2f4:	4ba2      	ldr	r3, [pc, #648]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e2f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e2fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e304:	4a9e      	ldr	r2, [pc, #632]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e306:	430b      	orrs	r3, r1
 800e308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e31c:	2300      	movs	r3, #0
 800e31e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e322:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e326:	460b      	mov	r3, r1
 800e328:	4313      	orrs	r3, r2
 800e32a:	d00b      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800e32c:	4b94      	ldr	r3, [pc, #592]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e32e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e332:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33c:	4a90      	ldr	r2, [pc, #576]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e33e:	430b      	orrs	r3, r1
 800e340:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	f002 0320 	and.w	r3, r2, #32
 800e350:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e354:	2300      	movs	r3, #0
 800e356:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e35a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e35e:	460b      	mov	r3, r1
 800e360:	4313      	orrs	r3, r2
 800e362:	d00b      	beq.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800e364:	4b86      	ldr	r3, [pc, #536]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e36a:	f023 0107 	bic.w	r1, r3, #7
 800e36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e374:	4a82      	ldr	r2, [pc, #520]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e376:	430b      	orrs	r3, r1
 800e378:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e38c:	2300      	movs	r3, #0
 800e38e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e392:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e396:	460b      	mov	r3, r1
 800e398:	4313      	orrs	r3, r2
 800e39a:	d00b      	beq.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800e39c:	4b78      	ldr	r3, [pc, #480]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e39e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3a2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800e3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ac:	4a74      	ldr	r2, [pc, #464]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e3ae:	430b      	orrs	r3, r1
 800e3b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3bc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e3c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e3ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	d00b      	beq.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800e3d4:	4b6a      	ldr	r3, [pc, #424]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e3d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e4:	4a66      	ldr	r2, [pc, #408]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e3e6:	430b      	orrs	r3, r1
 800e3e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800e3f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e402:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e406:	460b      	mov	r3, r1
 800e408:	4313      	orrs	r3, r2
 800e40a:	d00b      	beq.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800e40c:	4b5c      	ldr	r3, [pc, #368]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e40e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e41c:	4a58      	ldr	r2, [pc, #352]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e41e:	430b      	orrs	r3, r1
 800e420:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e434:	2300      	movs	r3, #0
 800e436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e43a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e43e:	460b      	mov	r3, r1
 800e440:	4313      	orrs	r3, r2
 800e442:	d00b      	beq.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800e444:	4b4e      	ldr	r3, [pc, #312]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e44a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800e44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e454:	4a4a      	ldr	r2, [pc, #296]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e456:	430b      	orrs	r3, r1
 800e458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800e45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e46c:	2300      	movs	r3, #0
 800e46e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e472:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e476:	460b      	mov	r3, r1
 800e478:	4313      	orrs	r3, r2
 800e47a:	d00b      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800e47c:	4b40      	ldr	r3, [pc, #256]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e47e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e482:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800e486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e48c:	4a3c      	ldr	r2, [pc, #240]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e48e:	430b      	orrs	r3, r1
 800e490:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800e494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e4a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e4aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	d00c      	beq.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800e4b4:	4b32      	ldr	r3, [pc, #200]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e4b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e4ba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800e4be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4c6:	4a2e      	ldr	r2, [pc, #184]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e4c8:	430b      	orrs	r3, r1
 800e4ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e4ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800e4da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e4e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	d00c      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800e4ee:	4b24      	ldr	r3, [pc, #144]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e4f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e4f4:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800e4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e500:	4a1f      	ldr	r2, [pc, #124]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e502:	430b      	orrs	r3, r1
 800e504:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800e514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e518:	2300      	movs	r3, #0
 800e51a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e51e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e522:	460b      	mov	r3, r1
 800e524:	4313      	orrs	r3, r2
 800e526:	d00c      	beq.n	800e542 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800e528:	4b15      	ldr	r3, [pc, #84]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e52a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e52e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800e532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e53a:	4a11      	ldr	r2, [pc, #68]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e53c:	430b      	orrs	r3, r1
 800e53e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800e542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e54e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e552:	2300      	movs	r3, #0
 800e554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e558:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e55c:	460b      	mov	r3, r1
 800e55e:	4313      	orrs	r3, r2
 800e560:	d010      	beq.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800e562:	4b07      	ldr	r3, [pc, #28]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e568:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e574:	4a02      	ldr	r2, [pc, #8]	; (800e580 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800e576:	430b      	orrs	r3, r1
 800e578:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e57c:	e002      	b.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800e57e:	bf00      	nop
 800e580:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e594:	2300      	movs	r3, #0
 800e596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e59a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e59e:	460b      	mov	r3, r1
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	d04c      	beq.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800e5a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e5ac:	2b80      	cmp	r3, #128	; 0x80
 800e5ae:	d02d      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e5b0:	2b80      	cmp	r3, #128	; 0x80
 800e5b2:	d827      	bhi.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e5b4:	2b60      	cmp	r3, #96	; 0x60
 800e5b6:	d02b      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e5b8:	2b60      	cmp	r3, #96	; 0x60
 800e5ba:	d823      	bhi.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e5bc:	2b40      	cmp	r3, #64	; 0x40
 800e5be:	d006      	beq.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800e5c0:	2b40      	cmp	r3, #64	; 0x40
 800e5c2:	d81f      	bhi.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d009      	beq.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800e5c8:	2b20      	cmp	r3, #32
 800e5ca:	d011      	beq.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e5cc:	e01a      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e5ce:	4bc0      	ldr	r3, [pc, #768]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d2:	4abf      	ldr	r2, [pc, #764]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e5d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5d8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e5da:	e01a      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e5dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f002 fcd6 	bl	8010f94 <RCCEx_PLL2_Config>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e5ee:	e010      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5f4:	332c      	adds	r3, #44	; 0x2c
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f002 fd64 	bl	80110c4 <RCCEx_PLL3_Config>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e602:	e006      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e60a:	e002      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800e60c:	bf00      	nop
 800e60e:	e000      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800e610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e612:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10d      	bne.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800e61a:	4bad      	ldr	r3, [pc, #692]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e61c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e620:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800e624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e62c:	4aa8      	ldr	r2, [pc, #672]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e62e:	430b      	orrs	r3, r1
 800e630:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e634:	e003      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e636:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e63a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e64a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e64e:	2300      	movs	r3, #0
 800e650:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e654:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e658:	460b      	mov	r3, r1
 800e65a:	4313      	orrs	r3, r2
 800e65c:	d053      	beq.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800e65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e66a:	d033      	beq.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800e66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e670:	d82c      	bhi.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e676:	d02f      	beq.n	800e6d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800e678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e67c:	d826      	bhi.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e682:	d008      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800e684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e688:	d820      	bhi.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00a      	beq.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e692:	d011      	beq.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e694:	e01a      	b.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e696:	4b8e      	ldr	r3, [pc, #568]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69a:	4a8d      	ldr	r2, [pc, #564]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6a0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e6a2:	e01a      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f002 fc72 	bl	8010f94 <RCCEx_PLL2_Config>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e6b6:	e010      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6bc:	332c      	adds	r3, #44	; 0x2c
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f002 fd00 	bl	80110c4 <RCCEx_PLL3_Config>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e6ca:	e006      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e6d2:	e002      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800e6d4:	bf00      	nop
 800e6d6:	e000      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800e6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6da:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10d      	bne.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800e6e2:	4b7b      	ldr	r3, [pc, #492]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e6e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e6e8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800e6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e6f4:	4a76      	ldr	r2, [pc, #472]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e6f6:	430b      	orrs	r3, r1
 800e6f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e6fc:	e003      	b.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6fe:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e702:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800e706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e716:	2300      	movs	r3, #0
 800e718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e71c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e720:	460b      	mov	r3, r1
 800e722:	4313      	orrs	r3, r2
 800e724:	d046      	beq.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800e726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e72a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e72e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e732:	d028      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e734:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e738:	d821      	bhi.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e73a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e73e:	d022      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e744:	d81b      	bhi.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e746:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e74a:	d01c      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e74c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e750:	d815      	bhi.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e756:	d008      	beq.n	800e76a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800e758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e75c:	d80f      	bhi.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d011      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e766:	d00e      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800e768:	e009      	b.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e76e:	3308      	adds	r3, #8
 800e770:	4618      	mov	r0, r3
 800e772:	f002 fc0f 	bl	8010f94 <RCCEx_PLL2_Config>
 800e776:	4603      	mov	r3, r0
 800e778:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e77c:	e004      	b.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e784:	e000      	b.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800e786:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e788:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10d      	bne.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800e790:	4b4f      	ldr	r3, [pc, #316]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e796:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e79e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e7a2:	4a4b      	ldr	r2, [pc, #300]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e7a4:	430b      	orrs	r3, r1
 800e7a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e7aa:	e003      	b.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7ac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e7b0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800e7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e7c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e7ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	d03f      	beq.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800e7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e7dc:	2b04      	cmp	r3, #4
 800e7de:	d81e      	bhi.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800e7e0:	a201      	add	r2, pc, #4	; (adr r2, 800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800e7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e6:	bf00      	nop
 800e7e8:	0800e827 	.word	0x0800e827
 800e7ec:	0800e7fd 	.word	0x0800e7fd
 800e7f0:	0800e80b 	.word	0x0800e80b
 800e7f4:	0800e827 	.word	0x0800e827
 800e7f8:	0800e827 	.word	0x0800e827
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e7fc:	4b34      	ldr	r3, [pc, #208]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e800:	4a33      	ldr	r2, [pc, #204]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e806:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e808:	e00e      	b.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e80e:	332c      	adds	r3, #44	; 0x2c
 800e810:	4618      	mov	r0, r3
 800e812:	f002 fc57 	bl	80110c4 <RCCEx_PLL3_Config>
 800e816:	4603      	mov	r3, r0
 800e818:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e81c:	e004      	b.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e81e:	2301      	movs	r3, #1
 800e820:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e824:	e000      	b.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800e826:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e828:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10d      	bne.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800e830:	4b27      	ldr	r3, [pc, #156]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e836:	f023 0107 	bic.w	r1, r3, #7
 800e83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e83e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e842:	4a23      	ldr	r2, [pc, #140]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e844:	430b      	orrs	r3, r1
 800e846:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e84a:	e003      	b.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e84c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e850:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800e854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e860:	67bb      	str	r3, [r7, #120]	; 0x78
 800e862:	2300      	movs	r3, #0
 800e864:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e866:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e86a:	460b      	mov	r3, r1
 800e86c:	4313      	orrs	r3, r2
 800e86e:	d04c      	beq.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800e870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e878:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e87c:	d02a      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800e87e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e882:	d821      	bhi.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e884:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e888:	d026      	beq.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800e88a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e88e:	d81b      	bhi.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e894:	d00e      	beq.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800e896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e89a:	d815      	bhi.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01d      	beq.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800e8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8a4:	d110      	bne.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e8a6:	4b0a      	ldr	r3, [pc, #40]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8aa:	4a09      	ldr	r2, [pc, #36]	; (800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e8b0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e8b2:	e014      	b.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8b8:	332c      	adds	r3, #44	; 0x2c
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f002 fc02 	bl	80110c4 <RCCEx_PLL3_Config>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e8c6:	e00a      	b.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e8ce:	e006      	b.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800e8d0:	46020c00 	.word	0x46020c00
        break;
 800e8d4:	bf00      	nop
 800e8d6:	e002      	b.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800e8d8:	bf00      	nop
 800e8da:	e000      	b.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800e8dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e8de:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10d      	bne.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e8e6:	4baf      	ldr	r3, [pc, #700]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e8e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e8ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e8f8:	4aaa      	ldr	r2, [pc, #680]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e8fa:	430b      	orrs	r3, r1
 800e8fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e900:	e003      	b.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e902:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e906:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e90a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e912:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e916:	673b      	str	r3, [r7, #112]	; 0x70
 800e918:	2300      	movs	r3, #0
 800e91a:	677b      	str	r3, [r7, #116]	; 0x74
 800e91c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e920:	460b      	mov	r3, r1
 800e922:	4313      	orrs	r3, r2
 800e924:	f000 80b5 	beq.w	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e928:	2300      	movs	r3, #0
 800e92a:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e92e:	4b9d      	ldr	r3, [pc, #628]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e934:	f003 0304 	and.w	r3, r3, #4
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d113      	bne.n	800e964 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e93c:	4b99      	ldr	r3, [pc, #612]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e93e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e942:	4a98      	ldr	r2, [pc, #608]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e944:	f043 0304 	orr.w	r3, r3, #4
 800e948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e94c:	4b95      	ldr	r3, [pc, #596]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e94e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e952:	f003 0304 	and.w	r3, r3, #4
 800e956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800e95a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800e95e:	2301      	movs	r3, #1
 800e960:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e964:	4b90      	ldr	r3, [pc, #576]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e968:	4a8f      	ldr	r2, [pc, #572]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e96a:	f043 0301 	orr.w	r3, r3, #1
 800e96e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e970:	f7f7 f9a6 	bl	8005cc0 <HAL_GetTick>
 800e974:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e978:	e00b      	b.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e97a:	f7f7 f9a1 	bl	8005cc0 <HAL_GetTick>
 800e97e:	4602      	mov	r2, r0
 800e980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	2b02      	cmp	r3, #2
 800e988:	d903      	bls.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800e98a:	2303      	movs	r3, #3
 800e98c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e990:	e005      	b.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e992:	4b85      	ldr	r3, [pc, #532]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e996:	f003 0301 	and.w	r3, r3, #1
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d0ed      	beq.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800e99e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d165      	bne.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e9a6:	4b7f      	ldr	r3, [pc, #508]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e9b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d023      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800e9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e9c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d01b      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e9cc:	4b75      	ldr	r3, [pc, #468]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e9da:	4b72      	ldr	r3, [pc, #456]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9e0:	4a70      	ldr	r2, [pc, #448]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e9ea:	4b6e      	ldr	r3, [pc, #440]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e9f0:	4a6c      	ldr	r2, [pc, #432]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e9fa:	4a6a      	ldr	r2, [pc, #424]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e9fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ea00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ea04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ea08:	f003 0301 	and.w	r3, r3, #1
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d019      	beq.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea10:	f7f7 f956 	bl	8005cc0 <HAL_GetTick>
 800ea14:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea18:	e00d      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea1a:	f7f7 f951 	bl	8005cc0 <HAL_GetTick>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea24:	1ad2      	subs	r2, r2, r3
 800ea26:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d903      	bls.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800ea2e:	2303      	movs	r3, #3
 800ea30:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800ea34:	e006      	b.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea36:	4b5b      	ldr	r3, [pc, #364]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ea38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ea3c:	f003 0302 	and.w	r3, r3, #2
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0ea      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800ea44:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10d      	bne.n	800ea68 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ea4c:	4b55      	ldr	r3, [pc, #340]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ea4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ea52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ea56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea5a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ea5e:	4a51      	ldr	r2, [pc, #324]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ea60:	430b      	orrs	r3, r1
 800ea62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ea66:	e008      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ea68:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ea6c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800ea70:	e003      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea72:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ea76:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ea7a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d107      	bne.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ea82:	4b48      	ldr	r3, [pc, #288]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ea84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea88:	4a46      	ldr	r2, [pc, #280]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ea8a:	f023 0304 	bic.w	r3, r3, #4
 800ea8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800ea92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ea9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eaa4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	d042      	beq.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800eaae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eab2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eab6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eaba:	d022      	beq.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800eabc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eac0:	d81b      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800eac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eac6:	d011      	beq.n	800eaec <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800eac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eacc:	d815      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d019      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800ead2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ead6:	d110      	bne.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ead8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eadc:	3308      	adds	r3, #8
 800eade:	4618      	mov	r0, r3
 800eae0:	f002 fa58 	bl	8010f94 <RCCEx_PLL2_Config>
 800eae4:	4603      	mov	r3, r0
 800eae6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800eaea:	e00d      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaec:	4b2d      	ldr	r3, [pc, #180]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800eaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf0:	4a2c      	ldr	r2, [pc, #176]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800eaf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaf6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800eaf8:	e006      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800eb00:	e002      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800eb06:	bf00      	nop
    }
    if (ret == HAL_OK)
 800eb08:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10d      	bne.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800eb10:	4b24      	ldr	r3, [pc, #144]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800eb12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb16:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800eb1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb22:	4a20      	ldr	r2, [pc, #128]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800eb24:	430b      	orrs	r3, r1
 800eb26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eb2a:	e003      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb2c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800eb30:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800eb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800eb40:	663b      	str	r3, [r7, #96]	; 0x60
 800eb42:	2300      	movs	r3, #0
 800eb44:	667b      	str	r3, [r7, #100]	; 0x64
 800eb46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	d031      	beq.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800eb50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eb58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb5c:	d00b      	beq.n	800eb76 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800eb5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb62:	d804      	bhi.n	800eb6e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d008      	beq.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800eb68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb6c:	d007      	beq.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800eb74:	e004      	b.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800eb76:	bf00      	nop
 800eb78:	e002      	b.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800eb7a:	bf00      	nop
 800eb7c:	e000      	b.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800eb7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800eb80:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d111      	bne.n	800ebac <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800eb88:	4b06      	ldr	r3, [pc, #24]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800eb8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eb8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eb9a:	4a02      	ldr	r2, [pc, #8]	; (800eba4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800eb9c:	430b      	orrs	r3, r1
 800eb9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800eba2:	e007      	b.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800eba4:	46020c00 	.word	0x46020c00
 800eba8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ebb0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800ebb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ebc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	d00c      	beq.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800ebd0:	4bb2      	ldr	r3, [pc, #712]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ebd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ebd6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800ebda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ebe2:	4aae      	ldr	r2, [pc, #696]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ebe4:	430b      	orrs	r3, r1
 800ebe6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800ebea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ebf6:	653b      	str	r3, [r7, #80]	; 0x50
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	657b      	str	r3, [r7, #84]	; 0x54
 800ebfc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ec00:	460b      	mov	r3, r1
 800ec02:	4313      	orrs	r3, r2
 800ec04:	d019      	beq.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800ec06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ec0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec12:	d105      	bne.n	800ec20 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ec14:	4ba1      	ldr	r3, [pc, #644]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec18:	4aa0      	ldr	r2, [pc, #640]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec1e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800ec20:	4b9e      	ldr	r3, [pc, #632]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ec26:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ec2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ec32:	4a9a      	ldr	r2, [pc, #616]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec34:	430b      	orrs	r3, r1
 800ec36:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800ec3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec42:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ec46:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec48:	2300      	movs	r3, #0
 800ec4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ec50:	460b      	mov	r3, r1
 800ec52:	4313      	orrs	r3, r2
 800ec54:	d00c      	beq.n	800ec70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800ec56:	4b91      	ldr	r3, [pc, #580]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ec60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ec68:	4a8c      	ldr	r2, [pc, #560]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec6a:	430b      	orrs	r3, r1
 800ec6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800ec70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ec7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ec7e:	2300      	movs	r3, #0
 800ec80:	647b      	str	r3, [r7, #68]	; 0x44
 800ec82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ec86:	460b      	mov	r3, r1
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	d00c      	beq.n	800eca6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800ec8c:	4b83      	ldr	r3, [pc, #524]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ec8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ec96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ec9e:	4a7f      	ldr	r2, [pc, #508]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800eca0:	430b      	orrs	r3, r1
 800eca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800eca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecae:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ecb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	d00c      	beq.n	800ecdc <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800ecc2:	4b76      	ldr	r3, [pc, #472]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ecc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ecc8:	f023 0118 	bic.w	r1, r3, #24
 800eccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecd0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ecd4:	4a71      	ldr	r2, [pc, #452]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ecd6:	430b      	orrs	r3, r1
 800ecd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ecdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800ece8:	633b      	str	r3, [r7, #48]	; 0x30
 800ecea:	2300      	movs	r3, #0
 800ecec:	637b      	str	r3, [r7, #52]	; 0x34
 800ecee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	d032      	beq.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800ecf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecfc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed04:	d105      	bne.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed06:	4b65      	ldr	r3, [pc, #404]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ed08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0a:	4a64      	ldr	r2, [pc, #400]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ed0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed10:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800ed12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed1e:	d108      	bne.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ed20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed24:	3308      	adds	r3, #8
 800ed26:	4618      	mov	r0, r3
 800ed28:	f002 f934 	bl	8010f94 <RCCEx_PLL2_Config>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800ed32:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10d      	bne.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800ed3a:	4b58      	ldr	r3, [pc, #352]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ed3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ed40:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ed44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed4c:	4a53      	ldr	r2, [pc, #332]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ed4e:	430b      	orrs	r3, r1
 800ed50:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ed54:	e003      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed56:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ed5a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800ed5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed66:	2100      	movs	r1, #0
 800ed68:	62b9      	str	r1, [r7, #40]	; 0x28
 800ed6a:	f003 0301 	and.w	r3, r3, #1
 800ed6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ed74:	460b      	mov	r3, r1
 800ed76:	4313      	orrs	r3, r2
 800ed78:	d04a      	beq.n	800ee10 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800ed7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ed82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ed86:	d01e      	beq.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800ed88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ed8c:	d825      	bhi.n	800edda <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ed8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed92:	d00e      	beq.n	800edb2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800ed94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed98:	d81f      	bhi.n	800edda <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d021      	beq.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800ed9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eda2:	d11a      	bne.n	800edda <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eda4:	4b3d      	ldr	r3, [pc, #244]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800eda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda8:	4a3c      	ldr	r2, [pc, #240]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800edaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edae:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800edb0:	e018      	b.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800edb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edb6:	3308      	adds	r3, #8
 800edb8:	4618      	mov	r0, r3
 800edba:	f002 f8eb 	bl	8010f94 <RCCEx_PLL2_Config>
 800edbe:	4603      	mov	r3, r0
 800edc0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800edc4:	e00e      	b.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800edc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edca:	332c      	adds	r3, #44	; 0x2c
 800edcc:	4618      	mov	r0, r3
 800edce:	f002 f979 	bl	80110c4 <RCCEx_PLL3_Config>
 800edd2:	4603      	mov	r3, r0
 800edd4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800edd8:	e004      	b.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800ede0:	e000      	b.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800ede2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ede4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10d      	bne.n	800ee08 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800edec:	4b2b      	ldr	r3, [pc, #172]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800edee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800edf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800edf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800edfe:	4927      	ldr	r1, [pc, #156]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ee00:	4313      	orrs	r3, r2
 800ee02:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ee06:	e003      	b.n	800ee10 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee08:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ee0c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800ee10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800ee1c:	623b      	str	r3, [r7, #32]
 800ee1e:	2300      	movs	r3, #0
 800ee20:	627b      	str	r3, [r7, #36]	; 0x24
 800ee22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ee26:	460b      	mov	r3, r1
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	d03d      	beq.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800ee2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee38:	d00e      	beq.n	800ee58 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800ee3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee3e:	d815      	bhi.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d017      	beq.n	800ee74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ee44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ee48:	d110      	bne.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee4a:	4b14      	ldr	r3, [pc, #80]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ee4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4e:	4a13      	ldr	r2, [pc, #76]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ee50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee54:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ee56:	e00e      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ee58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee5c:	3308      	adds	r3, #8
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f002 f898 	bl	8010f94 <RCCEx_PLL2_Config>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ee6a:	e004      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800ee72:	e000      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ee74:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ee76:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d110      	bne.n	800eea0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800ee7e:	4b07      	ldr	r3, [pc, #28]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ee80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ee88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee90:	4902      	ldr	r1, [pc, #8]	; (800ee9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ee92:	4313      	orrs	r3, r2
 800ee94:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800ee98:	e006      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800ee9a:	bf00      	nop
 800ee9c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eea0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800eea4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800eea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800eeb4:	61bb      	str	r3, [r7, #24]
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	61fb      	str	r3, [r7, #28]
 800eeba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eebe:	460b      	mov	r3, r1
 800eec0:	4313      	orrs	r3, r2
 800eec2:	d00c      	beq.n	800eede <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800eec4:	4b68      	ldr	r3, [pc, #416]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800eec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eeca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800eece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eed2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800eed6:	4964      	ldr	r1, [pc, #400]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800eed8:	4313      	orrs	r3, r2
 800eeda:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800eede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	2100      	movs	r1, #0
 800eee8:	6139      	str	r1, [r7, #16]
 800eeea:	f003 0302 	and.w	r3, r3, #2
 800eeee:	617b      	str	r3, [r7, #20]
 800eef0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800eef4:	460b      	mov	r3, r1
 800eef6:	4313      	orrs	r3, r2
 800eef8:	d036      	beq.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800eefa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eefe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00c      	beq.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800ef06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ef0a:	d113      	bne.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ef0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef10:	3308      	adds	r3, #8
 800ef12:	4618      	mov	r0, r3
 800ef14:	f002 f83e 	bl	8010f94 <RCCEx_PLL2_Config>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800ef1e:	e00d      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ef20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef24:	332c      	adds	r3, #44	; 0x2c
 800ef26:	4618      	mov	r0, r3
 800ef28:	f002 f8cc 	bl	80110c4 <RCCEx_PLL3_Config>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800ef32:	e003      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800ef34:	2301      	movs	r3, #1
 800ef36:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800ef3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef3c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10d      	bne.n	800ef60 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800ef44:	4b48      	ldr	r3, [pc, #288]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ef46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ef4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ef4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ef56:	4944      	ldr	r1, [pc, #272]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ef5e:	e003      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef60:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ef64:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ef68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	2100      	movs	r1, #0
 800ef72:	60b9      	str	r1, [r7, #8]
 800ef74:	f003 0304 	and.w	r3, r3, #4
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	4313      	orrs	r3, r2
 800ef82:	d024      	beq.n	800efce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800ef84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d108      	bne.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ef90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef94:	332c      	adds	r3, #44	; 0x2c
 800ef96:	4618      	mov	r0, r3
 800ef98:	f002 f894 	bl	80110c4 <RCCEx_PLL3_Config>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800efa2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10d      	bne.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800efaa:	4b2f      	ldr	r3, [pc, #188]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800efac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800efb0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800efb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efbc:	492a      	ldr	r1, [pc, #168]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800efbe:	4313      	orrs	r3, r2
 800efc0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800efc4:	e003      	b.n	800efce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efc6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800efca:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800efce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	2100      	movs	r1, #0
 800efd8:	6039      	str	r1, [r7, #0]
 800efda:	f003 0308 	and.w	r3, r3, #8
 800efde:	607b      	str	r3, [r7, #4]
 800efe0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800efe4:	460b      	mov	r3, r1
 800efe6:	4313      	orrs	r3, r2
 800efe8:	d036      	beq.n	800f058 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800efea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800eff2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800eff6:	d00d      	beq.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800eff8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800effc:	d811      	bhi.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800effe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f002:	d012      	beq.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800f004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f008:	d80b      	bhi.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00d      	beq.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800f00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f012:	d106      	bne.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f014:	4b14      	ldr	r3, [pc, #80]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800f016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f018:	4a13      	ldr	r2, [pc, #76]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800f01a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f01e:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800f020:	e004      	b.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800f022:	2301      	movs	r3, #1
 800f024:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800f028:	e000      	b.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800f02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f02c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10d      	bne.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800f034:	4b0c      	ldr	r3, [pc, #48]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800f036:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f03a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800f03e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f042:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f046:	4908      	ldr	r1, [pc, #32]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800f048:	4313      	orrs	r3, r2
 800f04a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800f04e:	e003      	b.n	800f058 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f050:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800f054:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800f058:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f062:	46bd      	mov	sp, r7
 800f064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f068:	46020c00 	.word	0x46020c00

0800f06c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b089      	sub	sp, #36	; 0x24
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800f074:	4ba6      	ldr	r3, [pc, #664]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f07c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800f07e:	4ba4      	ldr	r3, [pc, #656]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f082:	f003 0303 	and.w	r3, r3, #3
 800f086:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800f088:	4ba1      	ldr	r3, [pc, #644]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f08c:	0a1b      	lsrs	r3, r3, #8
 800f08e:	f003 030f 	and.w	r3, r3, #15
 800f092:	3301      	adds	r3, #1
 800f094:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800f096:	4b9e      	ldr	r3, [pc, #632]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f09a:	091b      	lsrs	r3, r3, #4
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800f0a2:	4b9b      	ldr	r3, [pc, #620]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a6:	08db      	lsrs	r3, r3, #3
 800f0a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	fb02 f303 	mul.w	r3, r2, r3
 800f0b2:	ee07 3a90 	vmov	s15, r3
 800f0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2b03      	cmp	r3, #3
 800f0c2:	d062      	beq.n	800f18a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	f200 8081 	bhi.w	800f1ce <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d024      	beq.n	800f11c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	d17a      	bne.n	800f1ce <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	ee07 3a90 	vmov	s15, r3
 800f0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0e2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800f314 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800f0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0ea:	4b89      	ldr	r3, [pc, #548]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f2:	ee07 3a90 	vmov	s15, r3
 800f0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800f0fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800f0fe:	eddf 5a86 	vldr	s11, [pc, #536]	; 800f318 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800f102:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800f106:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800f10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800f112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f11a:	e08f      	b.n	800f23c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800f11c:	4b7c      	ldr	r3, [pc, #496]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f124:	2b00      	cmp	r3, #0
 800f126:	d005      	beq.n	800f134 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800f128:	4b79      	ldr	r3, [pc, #484]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	0f1b      	lsrs	r3, r3, #28
 800f12e:	f003 030f 	and.w	r3, r3, #15
 800f132:	e006      	b.n	800f142 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800f134:	4b76      	ldr	r3, [pc, #472]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f13a:	041b      	lsls	r3, r3, #16
 800f13c:	0f1b      	lsrs	r3, r3, #28
 800f13e:	f003 030f 	and.w	r3, r3, #15
 800f142:	4a76      	ldr	r2, [pc, #472]	; (800f31c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800f144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f148:	ee07 3a90 	vmov	s15, r3
 800f14c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	ee07 3a90 	vmov	s15, r3
 800f156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	ee07 3a90 	vmov	s15, r3
 800f164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f168:	ed97 6a02 	vldr	s12, [r7, #8]
 800f16c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800f318 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800f170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800f180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f188:	e058      	b.n	800f23c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	ee07 3a90 	vmov	s15, r3
 800f190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f194:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f314 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800f198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f19c:	4b5c      	ldr	r3, [pc, #368]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1a4:	ee07 3a90 	vmov	s15, r3
 800f1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1ac:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1b0:	eddf 5a59 	vldr	s11, [pc, #356]	; 800f318 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800f1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800f1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800f1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f1cc:	e036      	b.n	800f23c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800f1ce:	4b50      	ldr	r3, [pc, #320]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f1d0:	689b      	ldr	r3, [r3, #8]
 800f1d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800f1da:	4b4d      	ldr	r3, [pc, #308]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	0f1b      	lsrs	r3, r3, #28
 800f1e0:	f003 030f 	and.w	r3, r3, #15
 800f1e4:	e006      	b.n	800f1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800f1e6:	4b4a      	ldr	r3, [pc, #296]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f1e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f1ec:	041b      	lsls	r3, r3, #16
 800f1ee:	0f1b      	lsrs	r3, r3, #28
 800f1f0:	f003 030f 	and.w	r3, r3, #15
 800f1f4:	4a49      	ldr	r2, [pc, #292]	; (800f31c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800f1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1fa:	ee07 3a90 	vmov	s15, r3
 800f1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	ee07 3a90 	vmov	s15, r3
 800f208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	ee07 3a90 	vmov	s15, r3
 800f216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f21a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f21e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f318 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800f222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800f232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f23a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800f23c:	4b34      	ldr	r3, [pc, #208]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d017      	beq.n	800f278 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800f248:	4b31      	ldr	r3, [pc, #196]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f24c:	0a5b      	lsrs	r3, r3, #9
 800f24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f252:	ee07 3a90 	vmov	s15, r3
 800f256:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800f25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f25e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800f262:	edd7 6a07 	vldr	s13, [r7, #28]
 800f266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f26e:	ee17 2a90 	vmov	r2, s15
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	601a      	str	r2, [r3, #0]
 800f276:	e002      	b.n	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800f27e:	4b24      	ldr	r3, [pc, #144]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f286:	2b00      	cmp	r3, #0
 800f288:	d017      	beq.n	800f2ba <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800f28a:	4b21      	ldr	r3, [pc, #132]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f28e:	0c1b      	lsrs	r3, r3, #16
 800f290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f294:	ee07 3a90 	vmov	s15, r3
 800f298:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800f29c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800f2a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2b0:	ee17 2a90 	vmov	r2, s15
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	605a      	str	r2, [r3, #4]
 800f2b8:	e002      	b.n	800f2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800f2c0:	4b13      	ldr	r3, [pc, #76]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d017      	beq.n	800f2fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800f2cc:	4b10      	ldr	r3, [pc, #64]	; (800f310 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800f2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d0:	0e1b      	lsrs	r3, r3, #24
 800f2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2d6:	ee07 3a90 	vmov	s15, r3
 800f2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800f2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800f2e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2f2:	ee17 2a90 	vmov	r2, s15
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f2fa:	e002      	b.n	800f302 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	609a      	str	r2, [r3, #8]
}
 800f302:	bf00      	nop
 800f304:	3724      	adds	r7, #36	; 0x24
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	46020c00 	.word	0x46020c00
 800f314:	4b742400 	.word	0x4b742400
 800f318:	46000000 	.word	0x46000000
 800f31c:	08019404 	.word	0x08019404

0800f320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f320:	b480      	push	{r7}
 800f322:	b089      	sub	sp, #36	; 0x24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800f328:	4ba6      	ldr	r3, [pc, #664]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f330:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800f332:	4ba4      	ldr	r3, [pc, #656]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f336:	f003 0303 	and.w	r3, r3, #3
 800f33a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800f33c:	4ba1      	ldr	r3, [pc, #644]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f340:	0a1b      	lsrs	r3, r3, #8
 800f342:	f003 030f 	and.w	r3, r3, #15
 800f346:	3301      	adds	r3, #1
 800f348:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800f34a:	4b9e      	ldr	r3, [pc, #632]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34e:	091b      	lsrs	r3, r3, #4
 800f350:	f003 0301 	and.w	r3, r3, #1
 800f354:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800f356:	4b9b      	ldr	r3, [pc, #620]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35a:	08db      	lsrs	r3, r3, #3
 800f35c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	fb02 f303 	mul.w	r3, r2, r3
 800f366:	ee07 3a90 	vmov	s15, r3
 800f36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f36e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b03      	cmp	r3, #3
 800f376:	d062      	beq.n	800f43e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	f200 8081 	bhi.w	800f482 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d024      	beq.n	800f3d0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d17a      	bne.n	800f482 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	ee07 3a90 	vmov	s15, r3
 800f392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f396:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800f5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800f39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f39e:	4b89      	ldr	r3, [pc, #548]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3a6:	ee07 3a90 	vmov	s15, r3
 800f3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800f3ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3b2:	eddf 5a86 	vldr	s11, [pc, #536]	; 800f5cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800f3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800f3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f3ce:	e08f      	b.n	800f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800f3d0:	4b7c      	ldr	r3, [pc, #496]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d005      	beq.n	800f3e8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800f3dc:	4b79      	ldr	r3, [pc, #484]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	0f1b      	lsrs	r3, r3, #28
 800f3e2:	f003 030f 	and.w	r3, r3, #15
 800f3e6:	e006      	b.n	800f3f6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800f3e8:	4b76      	ldr	r3, [pc, #472]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f3ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3ee:	041b      	lsls	r3, r3, #16
 800f3f0:	0f1b      	lsrs	r3, r3, #28
 800f3f2:	f003 030f 	and.w	r3, r3, #15
 800f3f6:	4a76      	ldr	r2, [pc, #472]	; (800f5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800f3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fc:	ee07 3a90 	vmov	s15, r3
 800f400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	ee07 3a90 	vmov	s15, r3
 800f40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	ee07 3a90 	vmov	s15, r3
 800f418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f41c:	ed97 6a02 	vldr	s12, [r7, #8]
 800f420:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800f5cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800f424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f42c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f430:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800f434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f438:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f43c:	e058      	b.n	800f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	ee07 3a90 	vmov	s15, r3
 800f444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f448:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800f44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f450:	4b5c      	ldr	r3, [pc, #368]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f458:	ee07 3a90 	vmov	s15, r3
 800f45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800f460:	ed97 6a02 	vldr	s12, [r7, #8]
 800f464:	eddf 5a59 	vldr	s11, [pc, #356]	; 800f5cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800f468:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800f470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f474:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800f478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f47c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f480:	e036      	b.n	800f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800f482:	4b50      	ldr	r3, [pc, #320]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800f48e:	4b4d      	ldr	r3, [pc, #308]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	0f1b      	lsrs	r3, r3, #28
 800f494:	f003 030f 	and.w	r3, r3, #15
 800f498:	e006      	b.n	800f4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800f49a:	4b4a      	ldr	r3, [pc, #296]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f49c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f4a0:	041b      	lsls	r3, r3, #16
 800f4a2:	0f1b      	lsrs	r3, r3, #28
 800f4a4:	f003 030f 	and.w	r3, r3, #15
 800f4a8:	4a49      	ldr	r2, [pc, #292]	; (800f5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800f4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ae:	ee07 3a90 	vmov	s15, r3
 800f4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	ee07 3a90 	vmov	s15, r3
 800f4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	ee07 3a90 	vmov	s15, r3
 800f4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800f4d2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f5cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800f4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800f4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f4ee:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800f4f0:	4b34      	ldr	r3, [pc, #208]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d017      	beq.n	800f52c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f4fc:	4b31      	ldr	r3, [pc, #196]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f500:	0a5b      	lsrs	r3, r3, #9
 800f502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f506:	ee07 3a90 	vmov	s15, r3
 800f50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800f50e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f512:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f516:	edd7 6a07 	vldr	s13, [r7, #28]
 800f51a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f51e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f522:	ee17 2a90 	vmov	r2, s15
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	e002      	b.n	800f532 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800f532:	4b24      	ldr	r3, [pc, #144]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d017      	beq.n	800f56e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f53e:	4b21      	ldr	r3, [pc, #132]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f542:	0c1b      	lsrs	r3, r3, #16
 800f544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f548:	ee07 3a90 	vmov	s15, r3
 800f54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800f550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f554:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f558:	edd7 6a07 	vldr	s13, [r7, #28]
 800f55c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f564:	ee17 2a90 	vmov	r2, s15
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	605a      	str	r2, [r3, #4]
 800f56c:	e002      	b.n	800f574 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800f574:	4b13      	ldr	r3, [pc, #76]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d017      	beq.n	800f5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f580:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800f582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f584:	0e1b      	lsrs	r3, r3, #24
 800f586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f58a:	ee07 3a90 	vmov	s15, r3
 800f58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800f592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f596:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800f59a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f59e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5a6:	ee17 2a90 	vmov	r2, s15
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f5ae:	e002      	b.n	800f5b6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	609a      	str	r2, [r3, #8]
}
 800f5b6:	bf00      	nop
 800f5b8:	3724      	adds	r7, #36	; 0x24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	46020c00 	.word	0x46020c00
 800f5c8:	4b742400 	.word	0x4b742400
 800f5cc:	46000000 	.word	0x46000000
 800f5d0:	08019404 	.word	0x08019404

0800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b089      	sub	sp, #36	; 0x24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800f5dc:	4ba6      	ldr	r3, [pc, #664]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800f5e6:	4ba4      	ldr	r3, [pc, #656]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ea:	f003 0303 	and.w	r3, r3, #3
 800f5ee:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800f5f0:	4ba1      	ldr	r3, [pc, #644]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f4:	0a1b      	lsrs	r3, r3, #8
 800f5f6:	f003 030f 	and.w	r3, r3, #15
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800f5fe:	4b9e      	ldr	r3, [pc, #632]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f602:	091b      	lsrs	r3, r3, #4
 800f604:	f003 0301 	and.w	r3, r3, #1
 800f608:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800f60a:	4b9b      	ldr	r3, [pc, #620]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f60e:	08db      	lsrs	r3, r3, #3
 800f610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f614:	68fa      	ldr	r2, [r7, #12]
 800f616:	fb02 f303 	mul.w	r3, r2, r3
 800f61a:	ee07 3a90 	vmov	s15, r3
 800f61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f622:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2b03      	cmp	r3, #3
 800f62a:	d062      	beq.n	800f6f2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b03      	cmp	r3, #3
 800f630:	f200 8081 	bhi.w	800f736 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d024      	beq.n	800f684 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d17a      	bne.n	800f736 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	ee07 3a90 	vmov	s15, r3
 800f646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f64a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800f87c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800f64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f652:	4b89      	ldr	r3, [pc, #548]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f65a:	ee07 3a90 	vmov	s15, r3
 800f65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f662:	ed97 6a02 	vldr	s12, [r7, #8]
 800f666:	eddf 5a86 	vldr	s11, [pc, #536]	; 800f880 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f676:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f67e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800f682:	e08f      	b.n	800f7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f684:	4b7c      	ldr	r3, [pc, #496]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d005      	beq.n	800f69c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800f690:	4b79      	ldr	r3, [pc, #484]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	0f1b      	lsrs	r3, r3, #28
 800f696:	f003 030f 	and.w	r3, r3, #15
 800f69a:	e006      	b.n	800f6aa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800f69c:	4b76      	ldr	r3, [pc, #472]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f69e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6a2:	041b      	lsls	r3, r3, #16
 800f6a4:	0f1b      	lsrs	r3, r3, #28
 800f6a6:	f003 030f 	and.w	r3, r3, #15
 800f6aa:	4a76      	ldr	r2, [pc, #472]	; (800f884 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800f6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b0:	ee07 3a90 	vmov	s15, r3
 800f6b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	ee07 3a90 	vmov	s15, r3
 800f6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	ee07 3a90 	vmov	s15, r3
 800f6cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800f6d4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800f880 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f6d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f6e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f6f0:	e058      	b.n	800f7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	ee07 3a90 	vmov	s15, r3
 800f6f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6fc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f87c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800f700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f704:	4b5c      	ldr	r3, [pc, #368]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f70c:	ee07 3a90 	vmov	s15, r3
 800f710:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f714:	ed97 6a02 	vldr	s12, [r7, #8]
 800f718:	eddf 5a59 	vldr	s11, [pc, #356]	; 800f880 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f71c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f720:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800f724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f728:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800f72c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f734:	e036      	b.n	800f7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f736:	4b50      	ldr	r3, [pc, #320]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d005      	beq.n	800f74e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800f742:	4b4d      	ldr	r3, [pc, #308]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	0f1b      	lsrs	r3, r3, #28
 800f748:	f003 030f 	and.w	r3, r3, #15
 800f74c:	e006      	b.n	800f75c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800f74e:	4b4a      	ldr	r3, [pc, #296]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f754:	041b      	lsls	r3, r3, #16
 800f756:	0f1b      	lsrs	r3, r3, #28
 800f758:	f003 030f 	and.w	r3, r3, #15
 800f75c:	4a49      	ldr	r2, [pc, #292]	; (800f884 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800f75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f762:	ee07 3a90 	vmov	s15, r3
 800f766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	ee07 3a90 	vmov	s15, r3
 800f770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	ee07 3a90 	vmov	s15, r3
 800f77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f782:	ed97 6a02 	vldr	s12, [r7, #8]
 800f786:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f880 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800f78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f796:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f79e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f7a2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800f7a4:	4b34      	ldr	r3, [pc, #208]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d017      	beq.n	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f7b0:	4b31      	ldr	r3, [pc, #196]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7b4:	0a5b      	lsrs	r3, r3, #9
 800f7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ba:	ee07 3a90 	vmov	s15, r3
 800f7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800f7c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f7ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7d6:	ee17 2a90 	vmov	r2, s15
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	e002      	b.n	800f7e6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800f7e6:	4b24      	ldr	r3, [pc, #144]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d017      	beq.n	800f822 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f7f2:	4b21      	ldr	r3, [pc, #132]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7f6:	0c1b      	lsrs	r3, r3, #16
 800f7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7fc:	ee07 3a90 	vmov	s15, r3
 800f800:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800f804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f808:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f80c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f818:	ee17 2a90 	vmov	r2, s15
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	605a      	str	r2, [r3, #4]
 800f820:	e002      	b.n	800f828 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800f828:	4b13      	ldr	r3, [pc, #76]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f830:	2b00      	cmp	r3, #0
 800f832:	d017      	beq.n	800f864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f834:	4b10      	ldr	r3, [pc, #64]	; (800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800f836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f838:	0e1b      	lsrs	r3, r3, #24
 800f83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f83e:	ee07 3a90 	vmov	s15, r3
 800f842:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800f846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f84a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f84e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f85a:	ee17 2a90 	vmov	r2, s15
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f862:	e002      	b.n	800f86a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	609a      	str	r2, [r3, #8]
}
 800f86a:	bf00      	nop
 800f86c:	3724      	adds	r7, #36	; 0x24
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	46020c00 	.word	0x46020c00
 800f87c:	4b742400 	.word	0x4b742400
 800f880:	46000000 	.word	0x46000000
 800f884:	08019404 	.word	0x08019404

0800f888 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08e      	sub	sp, #56	; 0x38
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800f892:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f896:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800f89a:	430b      	orrs	r3, r1
 800f89c:	d145      	bne.n	800f92a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f89e:	4ba7      	ldr	r3, [pc, #668]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f8a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f8aa:	4ba4      	ldr	r3, [pc, #656]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f8ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8b0:	f003 0302 	and.w	r3, r3, #2
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d108      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8be:	d104      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8c6:	f001 bb5a 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f8ca:	4b9c      	ldr	r3, [pc, #624]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f8cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8d8:	d114      	bne.n	800f904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800f8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8e0:	d110      	bne.n	800f904 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8e2:	4b96      	ldr	r3, [pc, #600]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f8e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8f0:	d103      	bne.n	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800f8f2:	23fa      	movs	r3, #250	; 0xfa
 800f8f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f8f6:	f001 bb42 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800f8fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f8fe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f900:	f001 bb3d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800f904:	4b8d      	ldr	r3, [pc, #564]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f90c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f910:	d107      	bne.n	800f922 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f918:	d103      	bne.n	800f922 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800f91a:	4b89      	ldr	r3, [pc, #548]	; (800fb40 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800f91c:	637b      	str	r3, [r7, #52]	; 0x34
 800f91e:	f001 bb2e 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f922:	2300      	movs	r3, #0
 800f924:	637b      	str	r3, [r7, #52]	; 0x34
 800f926:	f001 bb2a 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f92e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f932:	430b      	orrs	r3, r1
 800f934:	d151      	bne.n	800f9da <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f936:	4b81      	ldr	r3, [pc, #516]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f93c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800f940:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f944:	2b80      	cmp	r3, #128	; 0x80
 800f946:	d035      	beq.n	800f9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94a:	2b80      	cmp	r3, #128	; 0x80
 800f94c:	d841      	bhi.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f950:	2b60      	cmp	r3, #96	; 0x60
 800f952:	d02a      	beq.n	800f9aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800f954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f956:	2b60      	cmp	r3, #96	; 0x60
 800f958:	d83b      	bhi.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	2b40      	cmp	r3, #64	; 0x40
 800f95e:	d009      	beq.n	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f962:	2b40      	cmp	r3, #64	; 0x40
 800f964:	d835      	bhi.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00c      	beq.n	800f986 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	2b20      	cmp	r3, #32
 800f970:	d012      	beq.n	800f998 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f972:	e02e      	b.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff fb77 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f982:	f001 bafc 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f986:	f107 0318 	add.w	r3, r7, #24
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff fcc8 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f994:	f001 baf3 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f998:	f107 030c 	add.w	r3, r7, #12
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7ff fe19 	bl	800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9a6:	f001 baea 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f9aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f9ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9b0:	f001 bae5 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9b4:	4b61      	ldr	r3, [pc, #388]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9c0:	d103      	bne.n	800f9ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800f9c2:	4b60      	ldr	r3, [pc, #384]	; (800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f9c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9c6:	f001 bada 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9ce:	f001 bad6 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9d6:	f001 bad2 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800f9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9de:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f9e2:	430b      	orrs	r3, r1
 800f9e4:	d158      	bne.n	800fa98 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f9e6:	4b55      	ldr	r3, [pc, #340]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f9e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f9ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f9f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9f8:	d03b      	beq.n	800fa72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa00:	d846      	bhi.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800fa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa08:	d02e      	beq.n	800fa68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800fa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa10:	d83e      	bhi.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800fa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa18:	d00b      	beq.n	800fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa20:	d836      	bhi.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800fa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00d      	beq.n	800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800fa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa2e:	d012      	beq.n	800fa56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800fa30:	e02e      	b.n	800fa90 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7ff fb18 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa40:	f001 ba9d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa44:	f107 0318 	add.w	r3, r7, #24
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fc69 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa52:	f001 ba94 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa56:	f107 030c 	add.w	r3, r7, #12
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7ff fdba 	bl	800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa64:	f001 ba8b 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fa68:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fa6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa6e:	f001 ba86 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa72:	4b32      	ldr	r3, [pc, #200]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa7e:	d103      	bne.n	800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800fa80:	4b30      	ldr	r3, [pc, #192]	; (800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800fa82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa84:	f001 ba7b 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa8c:	f001 ba77 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800fa90:	2300      	movs	r3, #0
 800fa92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa94:	f001 ba73 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800fa98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa9c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800faa0:	430b      	orrs	r3, r1
 800faa2:	d126      	bne.n	800faf2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800faa4:	4b25      	ldr	r3, [pc, #148]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800faa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800faaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800faae:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800fab0:	4b22      	ldr	r3, [pc, #136]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fabc:	d106      	bne.n	800facc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d103      	bne.n	800facc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800fac4:	4b1f      	ldr	r3, [pc, #124]	; (800fb44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800fac6:	637b      	str	r3, [r7, #52]	; 0x34
 800fac8:	f001 ba59 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800facc:	4b1b      	ldr	r3, [pc, #108]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fad8:	d107      	bne.n	800faea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fae0:	d103      	bne.n	800faea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800fae2:	4b19      	ldr	r3, [pc, #100]	; (800fb48 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800fae4:	637b      	str	r3, [r7, #52]	; 0x34
 800fae6:	f001 ba4a 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800faea:	2300      	movs	r3, #0
 800faec:	637b      	str	r3, [r7, #52]	; 0x34
 800faee:	f001 ba46 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800faf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faf6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800fafa:	430b      	orrs	r3, r1
 800fafc:	d16e      	bne.n	800fbdc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800fafe:	4b0f      	ldr	r3, [pc, #60]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800fb00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb04:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800fb08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fb10:	d03d      	beq.n	800fb8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fb18:	d85c      	bhi.n	800fbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb20:	d014      	beq.n	800fb4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb28:	d854      	bhi.n	800fbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01f      	beq.n	800fb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800fb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fb36:	d012      	beq.n	800fb5e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800fb38:	e04c      	b.n	800fbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800fb3a:	bf00      	nop
 800fb3c:	46020c00 	.word	0x46020c00
 800fb40:	0007a120 	.word	0x0007a120
 800fb44:	00f42400 	.word	0x00f42400
 800fb48:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff fa8b 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb5a:	f001 ba10 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb5e:	f107 0318 	add.w	r3, r7, #24
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff fbdc 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb6c:	f001 ba07 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800fb70:	4ba7      	ldr	r3, [pc, #668]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb7c:	d103      	bne.n	800fb86 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800fb7e:	4ba5      	ldr	r3, [pc, #660]	; (800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800fb80:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb82:	f001 b9fc 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fb86:	2300      	movs	r3, #0
 800fb88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb8a:	f001 b9f8 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb8e:	4ba0      	ldr	r3, [pc, #640]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f003 0320 	and.w	r3, r3, #32
 800fb96:	2b20      	cmp	r3, #32
 800fb98:	d118      	bne.n	800fbcc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb9a:	4b9d      	ldr	r3, [pc, #628]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d005      	beq.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800fba6:	4b9a      	ldr	r3, [pc, #616]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	0e1b      	lsrs	r3, r3, #24
 800fbac:	f003 030f 	and.w	r3, r3, #15
 800fbb0:	e006      	b.n	800fbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800fbb2:	4b97      	ldr	r3, [pc, #604]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fbb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbb8:	041b      	lsls	r3, r3, #16
 800fbba:	0e1b      	lsrs	r3, r3, #24
 800fbbc:	f003 030f 	and.w	r3, r3, #15
 800fbc0:	4a95      	ldr	r2, [pc, #596]	; (800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800fbc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fbc8:	f001 b9d9 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbd0:	f001 b9d5 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbd8:	f001 b9d1 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fbdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbe0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800fbe4:	430b      	orrs	r3, r1
 800fbe6:	d17f      	bne.n	800fce8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fbe8:	4b89      	ldr	r3, [pc, #548]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fbea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fbee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fbf2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800fbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d165      	bne.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800fbfa:	4b85      	ldr	r3, [pc, #532]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fbfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc00:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800fc04:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800fc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fc0c:	d034      	beq.n	800fc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fc14:	d853      	bhi.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc1c:	d00b      	beq.n	800fc36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc24:	d84b      	bhi.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800fc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d016      	beq.n	800fc5a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fc32:	d009      	beq.n	800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800fc34:	e043      	b.n	800fcbe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7ff fa16 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800fc44:	f001 b99b 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc48:	f107 0318 	add.w	r3, r7, #24
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff fb67 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc52:	69fb      	ldr	r3, [r7, #28]
 800fc54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800fc56:	f001 b992 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800fc5a:	4b6d      	ldr	r3, [pc, #436]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc66:	d103      	bne.n	800fc70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800fc68:	4b6a      	ldr	r3, [pc, #424]	; (800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800fc6a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800fc6c:	f001 b987 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800fc70:	2300      	movs	r3, #0
 800fc72:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800fc74:	f001 b983 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fc78:	4b65      	ldr	r3, [pc, #404]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f003 0320 	and.w	r3, r3, #32
 800fc80:	2b20      	cmp	r3, #32
 800fc82:	d118      	bne.n	800fcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc84:	4b62      	ldr	r3, [pc, #392]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d005      	beq.n	800fc9c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800fc90:	4b5f      	ldr	r3, [pc, #380]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	0e1b      	lsrs	r3, r3, #24
 800fc96:	f003 030f 	and.w	r3, r3, #15
 800fc9a:	e006      	b.n	800fcaa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800fc9c:	4b5c      	ldr	r3, [pc, #368]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fc9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fca2:	041b      	lsls	r3, r3, #16
 800fca4:	0e1b      	lsrs	r3, r3, #24
 800fca6:	f003 030f 	and.w	r3, r3, #15
 800fcaa:	4a5b      	ldr	r2, [pc, #364]	; (800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800fcac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcb0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800fcb2:	f001 b964 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800fcba:	f001 b960 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800fcc2:	f001 b95c 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fccc:	d108      	bne.n	800fce0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fcce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff f9ca 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	637b      	str	r3, [r7, #52]	; 0x34
 800fcdc:	f001 b94f 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800fce0:	2300      	movs	r3, #0
 800fce2:	637b      	str	r3, [r7, #52]	; 0x34
 800fce4:	f001 b94b 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800fce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcec:	1e51      	subs	r1, r2, #1
 800fcee:	430b      	orrs	r3, r1
 800fcf0:	d136      	bne.n	800fd60 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800fcf2:	4b47      	ldr	r3, [pc, #284]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fcf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcf8:	f003 0303 	and.w	r3, r3, #3
 800fcfc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d104      	bne.n	800fd0e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800fd04:	f7fe f9cc 	bl	800e0a0 <HAL_RCC_GetPCLK2Freq>
 800fd08:	6378      	str	r0, [r7, #52]	; 0x34
 800fd0a:	f001 b938 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d104      	bne.n	800fd1e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fd14:	f7fe f894 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800fd18:	6378      	str	r0, [r7, #52]	; 0x34
 800fd1a:	f001 b930 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800fd1e:	4b3c      	ldr	r3, [pc, #240]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd2a:	d106      	bne.n	800fd3a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	d103      	bne.n	800fd3a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800fd32:	4b3a      	ldr	r3, [pc, #232]	; (800fe1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800fd34:	637b      	str	r3, [r7, #52]	; 0x34
 800fd36:	f001 b922 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800fd3a:	4b35      	ldr	r3, [pc, #212]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fd3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fd40:	f003 0302 	and.w	r3, r3, #2
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d107      	bne.n	800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d104      	bne.n	800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800fd4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd52:	637b      	str	r3, [r7, #52]	; 0x34
 800fd54:	f001 b913 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd5c:	f001 b90f 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800fd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd64:	1e91      	subs	r1, r2, #2
 800fd66:	430b      	orrs	r3, r1
 800fd68:	d136      	bne.n	800fdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800fd6a:	4b29      	ldr	r3, [pc, #164]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fd6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd70:	f003 030c 	and.w	r3, r3, #12
 800fd74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800fd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d104      	bne.n	800fd86 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fd7c:	f7fe f97c 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 800fd80:	6378      	str	r0, [r7, #52]	; 0x34
 800fd82:	f001 b8fc 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	2b04      	cmp	r3, #4
 800fd8a:	d104      	bne.n	800fd96 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fd8c:	f7fe f858 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800fd90:	6378      	str	r0, [r7, #52]	; 0x34
 800fd92:	f001 b8f4 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800fd96:	4b1e      	ldr	r3, [pc, #120]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fda2:	d106      	bne.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800fda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda6:	2b08      	cmp	r3, #8
 800fda8:	d103      	bne.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800fdaa:	4b1c      	ldr	r3, [pc, #112]	; (800fe1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800fdac:	637b      	str	r3, [r7, #52]	; 0x34
 800fdae:	f001 b8e6 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800fdb2:	4b17      	ldr	r3, [pc, #92]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fdb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d107      	bne.n	800fdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800fdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc2:	2b0c      	cmp	r3, #12
 800fdc4:	d104      	bne.n	800fdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800fdc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdca:	637b      	str	r3, [r7, #52]	; 0x34
 800fdcc:	f001 b8d7 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	637b      	str	r3, [r7, #52]	; 0x34
 800fdd4:	f001 b8d3 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800fdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fddc:	1f11      	subs	r1, r2, #4
 800fdde:	430b      	orrs	r3, r1
 800fde0:	d13f      	bne.n	800fe62 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800fde2:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800fde4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fde8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fdec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800fdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d104      	bne.n	800fdfe <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fdf4:	f7fe f940 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 800fdf8:	6378      	str	r0, [r7, #52]	; 0x34
 800fdfa:	f001 b8c0 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe00:	2b10      	cmp	r3, #16
 800fe02:	d10d      	bne.n	800fe20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fe04:	f7fe f81c 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800fe08:	6378      	str	r0, [r7, #52]	; 0x34
 800fe0a:	f001 b8b8 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800fe0e:	bf00      	nop
 800fe10:	46020c00 	.word	0x46020c00
 800fe14:	02dc6c00 	.word	0x02dc6c00
 800fe18:	08019404 	.word	0x08019404
 800fe1c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800fe20:	4ba8      	ldr	r3, [pc, #672]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe2c:	d106      	bne.n	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe30:	2b20      	cmp	r3, #32
 800fe32:	d103      	bne.n	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800fe34:	4ba4      	ldr	r3, [pc, #656]	; (80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800fe36:	637b      	str	r3, [r7, #52]	; 0x34
 800fe38:	f001 b8a1 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800fe3c:	4ba1      	ldr	r3, [pc, #644]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fe3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fe42:	f003 0302 	and.w	r3, r3, #2
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d107      	bne.n	800fe5a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	2b30      	cmp	r3, #48	; 0x30
 800fe4e:	d104      	bne.n	800fe5a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800fe50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe54:	637b      	str	r3, [r7, #52]	; 0x34
 800fe56:	f001 b892 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe5e:	f001 b88e 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800fe62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe66:	f1a2 0108 	sub.w	r1, r2, #8
 800fe6a:	430b      	orrs	r3, r1
 800fe6c:	d136      	bne.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800fe6e:	4b95      	ldr	r3, [pc, #596]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fe70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fe78:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d104      	bne.n	800fe8a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fe80:	f7fe f8fa 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 800fe84:	6378      	str	r0, [r7, #52]	; 0x34
 800fe86:	f001 b87a 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800fe8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8c:	2b40      	cmp	r3, #64	; 0x40
 800fe8e:	d104      	bne.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fe90:	f7fd ffd6 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800fe94:	6378      	str	r0, [r7, #52]	; 0x34
 800fe96:	f001 b872 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800fe9a:	4b8a      	ldr	r3, [pc, #552]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fea6:	d106      	bne.n	800feb6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800fea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feaa:	2b80      	cmp	r3, #128	; 0x80
 800feac:	d103      	bne.n	800feb6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800feae:	4b86      	ldr	r3, [pc, #536]	; (80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800feb0:	637b      	str	r3, [r7, #52]	; 0x34
 800feb2:	f001 b864 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800feb6:	4b83      	ldr	r3, [pc, #524]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800feb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800febc:	f003 0302 	and.w	r3, r3, #2
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	d107      	bne.n	800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec6:	2bc0      	cmp	r3, #192	; 0xc0
 800fec8:	d104      	bne.n	800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800feca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fece:	637b      	str	r3, [r7, #52]	; 0x34
 800fed0:	f001 b855 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800fed4:	2300      	movs	r3, #0
 800fed6:	637b      	str	r3, [r7, #52]	; 0x34
 800fed8:	f001 b851 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800fedc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fee0:	f1a2 0110 	sub.w	r1, r2, #16
 800fee4:	430b      	orrs	r3, r1
 800fee6:	d139      	bne.n	800ff5c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800fee8:	4b76      	ldr	r3, [pc, #472]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800feea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800feee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fef2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800fef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d104      	bne.n	800ff04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fefa:	f7fe f8bd 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 800fefe:	6378      	str	r0, [r7, #52]	; 0x34
 800ff00:	f001 b83d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff0a:	d104      	bne.n	800ff16 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ff0c:	f7fd ff98 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800ff10:	6378      	str	r0, [r7, #52]	; 0x34
 800ff12:	f001 b834 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ff16:	4b6b      	ldr	r3, [pc, #428]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff22:	d107      	bne.n	800ff34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff2a:	d103      	bne.n	800ff34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ff2c:	4b66      	ldr	r3, [pc, #408]	; (80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ff2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff30:	f001 b825 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ff34:	4b63      	ldr	r3, [pc, #396]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ff36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ff3a:	f003 0302 	and.w	r3, r3, #2
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d108      	bne.n	800ff54 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff48:	d104      	bne.n	800ff54 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ff4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff50:	f001 b815 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ff54:	2300      	movs	r3, #0
 800ff56:	637b      	str	r3, [r7, #52]	; 0x34
 800ff58:	f001 b811 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ff5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff60:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800ff64:	430b      	orrs	r3, r1
 800ff66:	d139      	bne.n	800ffdc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ff68:	4b56      	ldr	r3, [pc, #344]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ff6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ff6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ff72:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ff74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d104      	bne.n	800ff84 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ff7a:	f7fe f87d 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 800ff7e:	6378      	str	r0, [r7, #52]	; 0x34
 800ff80:	f000 bffd 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ff84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff8a:	d104      	bne.n	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ff8c:	f7fd ff58 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 800ff90:	6378      	str	r0, [r7, #52]	; 0x34
 800ff92:	f000 bff4 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ff96:	4b4b      	ldr	r3, [pc, #300]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffa2:	d107      	bne.n	800ffb4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffaa:	d103      	bne.n	800ffb4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ffac:	4b46      	ldr	r3, [pc, #280]	; (80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ffae:	637b      	str	r3, [r7, #52]	; 0x34
 800ffb0:	f000 bfe5 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ffb4:	4b43      	ldr	r3, [pc, #268]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ffb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ffba:	f003 0302 	and.w	r3, r3, #2
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	d108      	bne.n	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ffc8:	d104      	bne.n	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ffca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffce:	637b      	str	r3, [r7, #52]	; 0x34
 800ffd0:	f000 bfd5 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	637b      	str	r3, [r7, #52]	; 0x34
 800ffd8:	f000 bfd1 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800ffdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffe0:	f1a2 0120 	sub.w	r1, r2, #32
 800ffe4:	430b      	orrs	r3, r1
 800ffe6:	d158      	bne.n	801009a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ffe8:	4b36      	ldr	r3, [pc, #216]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ffea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ffee:	f003 0307 	and.w	r3, r3, #7
 800fff2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800fff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d104      	bne.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800fffa:	f7fe f865 	bl	800e0c8 <HAL_RCC_GetPCLK3Freq>
 800fffe:	6378      	str	r0, [r7, #52]	; 0x34
 8010000:	f000 bfbd 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	2b01      	cmp	r3, #1
 8010008:	d104      	bne.n	8010014 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801000a:	f7fd ff19 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 801000e:	6378      	str	r0, [r7, #52]	; 0x34
 8010010:	f000 bfb5 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8010014:	4b2b      	ldr	r3, [pc, #172]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801001c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010020:	d106      	bne.n	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8010022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010024:	2b02      	cmp	r3, #2
 8010026:	d103      	bne.n	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8010028:	4b27      	ldr	r3, [pc, #156]	; (80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 801002a:	637b      	str	r3, [r7, #52]	; 0x34
 801002c:	f000 bfa7 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8010030:	4b24      	ldr	r3, [pc, #144]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8010032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010036:	f003 0302 	and.w	r3, r3, #2
 801003a:	2b02      	cmp	r3, #2
 801003c:	d107      	bne.n	801004e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	2b03      	cmp	r3, #3
 8010042:	d104      	bne.n	801004e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8010044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010048:	637b      	str	r3, [r7, #52]	; 0x34
 801004a:	f000 bf98 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 801004e:	4b1d      	ldr	r3, [pc, #116]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f003 0320 	and.w	r3, r3, #32
 8010056:	2b20      	cmp	r3, #32
 8010058:	d11b      	bne.n	8010092 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 801005a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005c:	2b04      	cmp	r3, #4
 801005e:	d118      	bne.n	8010092 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010060:	4b18      	ldr	r3, [pc, #96]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d005      	beq.n	8010078 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 801006c:	4b15      	ldr	r3, [pc, #84]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	0e1b      	lsrs	r3, r3, #24
 8010072:	f003 030f 	and.w	r3, r3, #15
 8010076:	e006      	b.n	8010086 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8010078:	4b12      	ldr	r3, [pc, #72]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 801007a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801007e:	041b      	lsls	r3, r3, #16
 8010080:	0e1b      	lsrs	r3, r3, #24
 8010082:	f003 030f 	and.w	r3, r3, #15
 8010086:	4a11      	ldr	r2, [pc, #68]	; (80100cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801008c:	637b      	str	r3, [r7, #52]	; 0x34
 801008e:	f000 bf76 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8010092:	2300      	movs	r3, #0
 8010094:	637b      	str	r3, [r7, #52]	; 0x34
 8010096:	f000 bf72 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 801009a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801009e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80100a2:	430b      	orrs	r3, r1
 80100a4:	d172      	bne.n	801018c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80100a6:	4b07      	ldr	r3, [pc, #28]	; (80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80100a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80100ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80100b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100b8:	d10a      	bne.n	80100d0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80100ba:	f7fd fec1 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 80100be:	6378      	str	r0, [r7, #52]	; 0x34
 80100c0:	f000 bf5d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 80100c4:	46020c00 	.word	0x46020c00
 80100c8:	00f42400 	.word	0x00f42400
 80100cc:	08019404 	.word	0x08019404
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80100d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100d6:	d108      	bne.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100d8:	f107 0318 	add.w	r3, r7, #24
 80100dc:	4618      	mov	r0, r3
 80100de:	f7ff f91f 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80100e2:	6a3b      	ldr	r3, [r7, #32]
 80100e4:	637b      	str	r3, [r7, #52]	; 0x34
 80100e6:	f000 bf4a 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d104      	bne.n	80100fa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80100f0:	f7fd ffa8 	bl	800e044 <HAL_RCC_GetHCLKFreq>
 80100f4:	6378      	str	r0, [r7, #52]	; 0x34
 80100f6:	f000 bf42 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80100fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8010100:	d122      	bne.n	8010148 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010102:	4bb0      	ldr	r3, [pc, #704]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f003 0320 	and.w	r3, r3, #32
 801010a:	2b20      	cmp	r3, #32
 801010c:	d118      	bne.n	8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801010e:	4bad      	ldr	r3, [pc, #692]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010116:	2b00      	cmp	r3, #0
 8010118:	d005      	beq.n	8010126 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 801011a:	4baa      	ldr	r3, [pc, #680]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	0e1b      	lsrs	r3, r3, #24
 8010120:	f003 030f 	and.w	r3, r3, #15
 8010124:	e006      	b.n	8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8010126:	4ba7      	ldr	r3, [pc, #668]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801012c:	041b      	lsls	r3, r3, #16
 801012e:	0e1b      	lsrs	r3, r3, #24
 8010130:	f003 030f 	and.w	r3, r3, #15
 8010134:	4aa4      	ldr	r2, [pc, #656]	; (80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8010136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801013a:	637b      	str	r3, [r7, #52]	; 0x34
 801013c:	f000 bf1f 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8010140:	2300      	movs	r3, #0
 8010142:	637b      	str	r3, [r7, #52]	; 0x34
 8010144:	f000 bf1b 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8010148:	4b9e      	ldr	r3, [pc, #632]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010154:	d107      	bne.n	8010166 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8010156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801015c:	d103      	bne.n	8010166 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 801015e:	4b9b      	ldr	r3, [pc, #620]	; (80103cc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8010160:	637b      	str	r3, [r7, #52]	; 0x34
 8010162:	f000 bf0c 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8010166:	4b97      	ldr	r3, [pc, #604]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801016e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010172:	d107      	bne.n	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8010174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801017a:	d103      	bne.n	8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 801017c:	4b93      	ldr	r3, [pc, #588]	; (80103cc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 801017e:	637b      	str	r3, [r7, #52]	; 0x34
 8010180:	f000 befd 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8010184:	2300      	movs	r3, #0
 8010186:	637b      	str	r3, [r7, #52]	; 0x34
 8010188:	f000 bef9 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 801018c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010190:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010194:	430b      	orrs	r3, r1
 8010196:	d158      	bne.n	801024a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8010198:	4b8a      	ldr	r3, [pc, #552]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 801019a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801019e:	f003 0307 	and.w	r3, r3, #7
 80101a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	2b04      	cmp	r3, #4
 80101a8:	d84b      	bhi.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80101aa:	a201      	add	r2, pc, #4	; (adr r2, 80101b0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80101ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b0:	080101e9 	.word	0x080101e9
 80101b4:	080101c5 	.word	0x080101c5
 80101b8:	080101d7 	.word	0x080101d7
 80101bc:	080101f3 	.word	0x080101f3
 80101c0:	080101fd 	.word	0x080101fd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80101c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fe ff4f 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80101ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101d2:	f000 bed4 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101d6:	f107 030c 	add.w	r3, r7, #12
 80101da:	4618      	mov	r0, r3
 80101dc:	f7ff f9fa 	bl	800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101e4:	f000 becb 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80101e8:	f7fd ff2c 	bl	800e044 <HAL_RCC_GetHCLKFreq>
 80101ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80101ee:	f000 bec6 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80101f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80101f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101f8:	f000 bec1 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80101fc:	4b71      	ldr	r3, [pc, #452]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 0320 	and.w	r3, r3, #32
 8010204:	2b20      	cmp	r3, #32
 8010206:	d118      	bne.n	801023a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010208:	4b6e      	ldr	r3, [pc, #440]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010210:	2b00      	cmp	r3, #0
 8010212:	d005      	beq.n	8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8010214:	4b6b      	ldr	r3, [pc, #428]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	0e1b      	lsrs	r3, r3, #24
 801021a:	f003 030f 	and.w	r3, r3, #15
 801021e:	e006      	b.n	801022e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8010220:	4b68      	ldr	r3, [pc, #416]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010226:	041b      	lsls	r3, r3, #16
 8010228:	0e1b      	lsrs	r3, r3, #24
 801022a:	f003 030f 	and.w	r3, r3, #15
 801022e:	4a66      	ldr	r2, [pc, #408]	; (80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8010230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010234:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010236:	f000 bea2 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 801023a:	2300      	movs	r3, #0
 801023c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801023e:	f000 be9e 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010242:	2300      	movs	r3, #0
 8010244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010246:	f000 be9a 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 801024a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801024e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8010252:	430b      	orrs	r3, r1
 8010254:	d167      	bne.n	8010326 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8010256:	4b5b      	ldr	r3, [pc, #364]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801025c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010260:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010268:	d036      	beq.n	80102d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010270:	d855      	bhi.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010278:	d029      	beq.n	80102ce <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 801027a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010280:	d84d      	bhi.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8010282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010288:	d013      	beq.n	80102b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 801028a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010290:	d845      	bhi.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	2b00      	cmp	r3, #0
 8010296:	d015      	beq.n	80102c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8010298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801029e:	d13e      	bne.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fe fee1 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80102aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80102ae:	f000 be66 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102b2:	f107 030c 	add.w	r3, r7, #12
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff f98c 	bl	800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80102c0:	f000 be5d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80102c4:	f7fd febe 	bl	800e044 <HAL_RCC_GetHCLKFreq>
 80102c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80102ca:	f000 be58 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80102ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80102d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80102d4:	f000 be53 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80102d8:	4b3a      	ldr	r3, [pc, #232]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f003 0320 	and.w	r3, r3, #32
 80102e0:	2b20      	cmp	r3, #32
 80102e2:	d118      	bne.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80102e4:	4b37      	ldr	r3, [pc, #220]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d005      	beq.n	80102fc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80102f0:	4b34      	ldr	r3, [pc, #208]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	0e1b      	lsrs	r3, r3, #24
 80102f6:	f003 030f 	and.w	r3, r3, #15
 80102fa:	e006      	b.n	801030a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80102fc:	4b31      	ldr	r3, [pc, #196]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80102fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010302:	041b      	lsls	r3, r3, #16
 8010304:	0e1b      	lsrs	r3, r3, #24
 8010306:	f003 030f 	and.w	r3, r3, #15
 801030a:	4a2f      	ldr	r2, [pc, #188]	; (80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 801030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010310:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010312:	f000 be34 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010316:	2300      	movs	r3, #0
 8010318:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801031a:	f000 be30 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 801031e:	2300      	movs	r3, #0
 8010320:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010322:	f000 be2c 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8010326:	e9d7 2300 	ldrd	r2, r3, [r7]
 801032a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 801032e:	430b      	orrs	r3, r1
 8010330:	d152      	bne.n	80103d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8010332:	4b24      	ldr	r3, [pc, #144]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801033c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	2b00      	cmp	r3, #0
 8010342:	d104      	bne.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010344:	f7fd fe98 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 8010348:	6378      	str	r0, [r7, #52]	; 0x34
 801034a:	f000 be18 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 801034e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010354:	d104      	bne.n	8010360 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8010356:	f7fd fd73 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 801035a:	6378      	str	r0, [r7, #52]	; 0x34
 801035c:	f000 be0f 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8010360:	4b18      	ldr	r3, [pc, #96]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801036c:	d107      	bne.n	801037e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 801036e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010374:	d103      	bne.n	801037e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8010376:	4b15      	ldr	r3, [pc, #84]	; (80103cc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8010378:	637b      	str	r3, [r7, #52]	; 0x34
 801037a:	f000 be00 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 801037e:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f003 0320 	and.w	r3, r3, #32
 8010386:	2b20      	cmp	r3, #32
 8010388:	d122      	bne.n	80103d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 801038a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010390:	d11e      	bne.n	80103d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010392:	4b0c      	ldr	r3, [pc, #48]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801039a:	2b00      	cmp	r3, #0
 801039c:	d005      	beq.n	80103aa <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 801039e:	4b09      	ldr	r3, [pc, #36]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	0e1b      	lsrs	r3, r3, #24
 80103a4:	f003 030f 	and.w	r3, r3, #15
 80103a8:	e006      	b.n	80103b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80103aa:	4b06      	ldr	r3, [pc, #24]	; (80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80103ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80103b0:	041b      	lsls	r3, r3, #16
 80103b2:	0e1b      	lsrs	r3, r3, #24
 80103b4:	f003 030f 	and.w	r3, r3, #15
 80103b8:	4a03      	ldr	r2, [pc, #12]	; (80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80103ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103be:	637b      	str	r3, [r7, #52]	; 0x34
 80103c0:	f000 bddd 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 80103c4:	46020c00 	.word	0x46020c00
 80103c8:	08019404 	.word	0x08019404
 80103cc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80103d0:	2300      	movs	r3, #0
 80103d2:	637b      	str	r3, [r7, #52]	; 0x34
 80103d4:	f000 bdd3 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80103d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103dc:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80103e0:	430b      	orrs	r3, r1
 80103e2:	d14c      	bne.n	801047e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80103e4:	4ba8      	ldr	r3, [pc, #672]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80103e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80103ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80103ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d104      	bne.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80103f6:	f7fd fe3f 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 80103fa:	6378      	str	r0, [r7, #52]	; 0x34
 80103fc:	f000 bdbf 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010406:	d104      	bne.n	8010412 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8010408:	f7fd fd1a 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 801040c:	6378      	str	r0, [r7, #52]	; 0x34
 801040e:	f000 bdb6 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8010412:	4b9d      	ldr	r3, [pc, #628]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801041a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801041e:	d107      	bne.n	8010430 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8010420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010426:	d103      	bne.n	8010430 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8010428:	4b98      	ldr	r3, [pc, #608]	; (801068c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 801042a:	637b      	str	r3, [r7, #52]	; 0x34
 801042c:	f000 bda7 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8010430:	4b95      	ldr	r3, [pc, #596]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f003 0320 	and.w	r3, r3, #32
 8010438:	2b20      	cmp	r3, #32
 801043a:	d11c      	bne.n	8010476 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010442:	d118      	bne.n	8010476 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010444:	4b90      	ldr	r3, [pc, #576]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801044c:	2b00      	cmp	r3, #0
 801044e:	d005      	beq.n	801045c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8010450:	4b8d      	ldr	r3, [pc, #564]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	0e1b      	lsrs	r3, r3, #24
 8010456:	f003 030f 	and.w	r3, r3, #15
 801045a:	e006      	b.n	801046a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 801045c:	4b8a      	ldr	r3, [pc, #552]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801045e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010462:	041b      	lsls	r3, r3, #16
 8010464:	0e1b      	lsrs	r3, r3, #24
 8010466:	f003 030f 	and.w	r3, r3, #15
 801046a:	4a89      	ldr	r2, [pc, #548]	; (8010690 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 801046c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010470:	637b      	str	r3, [r7, #52]	; 0x34
 8010472:	f000 bd84 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8010476:	2300      	movs	r3, #0
 8010478:	637b      	str	r3, [r7, #52]	; 0x34
 801047a:	f000 bd80 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 801047e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010482:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010486:	430b      	orrs	r3, r1
 8010488:	d158      	bne.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801048a:	4b7f      	ldr	r3, [pc, #508]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801048c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010490:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010494:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010498:	2bc0      	cmp	r3, #192	; 0xc0
 801049a:	d028      	beq.n	80104ee <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 801049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049e:	2bc0      	cmp	r3, #192	; 0xc0
 80104a0:	d848      	bhi.n	8010534 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80104a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a4:	2b80      	cmp	r3, #128	; 0x80
 80104a6:	d00e      	beq.n	80104c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80104a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104aa:	2b80      	cmp	r3, #128	; 0x80
 80104ac:	d842      	bhi.n	8010534 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80104ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d003      	beq.n	80104bc <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 80104b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b6:	2b40      	cmp	r3, #64	; 0x40
 80104b8:	d014      	beq.n	80104e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80104ba:	e03b      	b.n	8010534 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80104bc:	f7fd fe04 	bl	800e0c8 <HAL_RCC_GetPCLK3Freq>
 80104c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80104c2:	f000 bd5c 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80104c6:	4b70      	ldr	r3, [pc, #448]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80104ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104d2:	d103      	bne.n	80104dc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 80104d4:	4b6d      	ldr	r3, [pc, #436]	; (801068c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80104d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80104d8:	f000 bd51 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80104dc:	2300      	movs	r3, #0
 80104de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80104e0:	f000 bd4d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80104e4:	f7fd fcac 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 80104e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80104ea:	f000 bd48 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80104ee:	4b66      	ldr	r3, [pc, #408]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 0320 	and.w	r3, r3, #32
 80104f6:	2b20      	cmp	r3, #32
 80104f8:	d118      	bne.n	801052c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80104fa:	4b63      	ldr	r3, [pc, #396]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010502:	2b00      	cmp	r3, #0
 8010504:	d005      	beq.n	8010512 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8010506:	4b60      	ldr	r3, [pc, #384]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	0e1b      	lsrs	r3, r3, #24
 801050c:	f003 030f 	and.w	r3, r3, #15
 8010510:	e006      	b.n	8010520 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8010512:	4b5d      	ldr	r3, [pc, #372]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010518:	041b      	lsls	r3, r3, #16
 801051a:	0e1b      	lsrs	r3, r3, #24
 801051c:	f003 030f 	and.w	r3, r3, #15
 8010520:	4a5b      	ldr	r2, [pc, #364]	; (8010690 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8010522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010526:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010528:	f000 bd29 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 801052c:	2300      	movs	r3, #0
 801052e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010530:	f000 bd25 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 8010534:	2300      	movs	r3, #0
 8010536:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010538:	f000 bd21 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 801053c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010540:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8010544:	430b      	orrs	r3, r1
 8010546:	d14c      	bne.n	80105e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8010548:	4b4f      	ldr	r3, [pc, #316]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801054e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010552:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	2b00      	cmp	r3, #0
 8010558:	d104      	bne.n	8010564 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 801055a:	f7fd fd8d 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 801055e:	6378      	str	r0, [r7, #52]	; 0x34
 8010560:	f000 bd0d 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8010564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801056a:	d104      	bne.n	8010576 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801056c:	f7fd fc68 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010570:	6378      	str	r0, [r7, #52]	; 0x34
 8010572:	f000 bd04 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8010576:	4b44      	ldr	r3, [pc, #272]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801057e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010582:	d107      	bne.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8010584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801058a:	d103      	bne.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 801058c:	4b3f      	ldr	r3, [pc, #252]	; (801068c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 801058e:	637b      	str	r3, [r7, #52]	; 0x34
 8010590:	f000 bcf5 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8010594:	4b3c      	ldr	r3, [pc, #240]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f003 0320 	and.w	r3, r3, #32
 801059c:	2b20      	cmp	r3, #32
 801059e:	d11c      	bne.n	80105da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80105a6:	d118      	bne.n	80105da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80105a8:	4b37      	ldr	r3, [pc, #220]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d005      	beq.n	80105c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80105b4:	4b34      	ldr	r3, [pc, #208]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	0e1b      	lsrs	r3, r3, #24
 80105ba:	f003 030f 	and.w	r3, r3, #15
 80105be:	e006      	b.n	80105ce <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80105c0:	4b31      	ldr	r3, [pc, #196]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80105c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80105c6:	041b      	lsls	r3, r3, #16
 80105c8:	0e1b      	lsrs	r3, r3, #24
 80105ca:	f003 030f 	and.w	r3, r3, #15
 80105ce:	4a30      	ldr	r2, [pc, #192]	; (8010690 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80105d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105d4:	637b      	str	r3, [r7, #52]	; 0x34
 80105d6:	f000 bcd2 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80105da:	2300      	movs	r3, #0
 80105dc:	637b      	str	r3, [r7, #52]	; 0x34
 80105de:	f000 bcce 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80105e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105e6:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 80105ea:	430b      	orrs	r3, r1
 80105ec:	d152      	bne.n	8010694 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80105ee:	4b26      	ldr	r3, [pc, #152]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80105f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80105f4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80105f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d104      	bne.n	801060a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010600:	f7fd fd3a 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 8010604:	6378      	str	r0, [r7, #52]	; 0x34
 8010606:	f000 bcba 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 801060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010610:	d104      	bne.n	801061c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8010612:	f7fd fc15 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010616:	6378      	str	r0, [r7, #52]	; 0x34
 8010618:	f000 bcb1 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 801061c:	4b1a      	ldr	r3, [pc, #104]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010628:	d107      	bne.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 801062a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010630:	d103      	bne.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8010632:	4b16      	ldr	r3, [pc, #88]	; (801068c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8010634:	637b      	str	r3, [r7, #52]	; 0x34
 8010636:	f000 bca2 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 801063a:	4b13      	ldr	r3, [pc, #76]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f003 0320 	and.w	r3, r3, #32
 8010642:	2b20      	cmp	r3, #32
 8010644:	d11c      	bne.n	8010680 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8010646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801064c:	d118      	bne.n	8010680 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801064e:	4b0e      	ldr	r3, [pc, #56]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010656:	2b00      	cmp	r3, #0
 8010658:	d005      	beq.n	8010666 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 801065a:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 801065c:	689b      	ldr	r3, [r3, #8]
 801065e:	0e1b      	lsrs	r3, r3, #24
 8010660:	f003 030f 	and.w	r3, r3, #15
 8010664:	e006      	b.n	8010674 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8010666:	4b08      	ldr	r3, [pc, #32]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8010668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801066c:	041b      	lsls	r3, r3, #16
 801066e:	0e1b      	lsrs	r3, r3, #24
 8010670:	f003 030f 	and.w	r3, r3, #15
 8010674:	4a06      	ldr	r2, [pc, #24]	; (8010690 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8010676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801067a:	637b      	str	r3, [r7, #52]	; 0x34
 801067c:	f000 bc7f 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8010680:	2300      	movs	r3, #0
 8010682:	637b      	str	r3, [r7, #52]	; 0x34
 8010684:	f000 bc7b 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8010688:	46020c00 	.word	0x46020c00
 801068c:	00f42400 	.word	0x00f42400
 8010690:	08019404 	.word	0x08019404
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8010694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010698:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801069c:	430b      	orrs	r3, r1
 801069e:	d14c      	bne.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80106a0:	4ba6      	ldr	r3, [pc, #664]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80106a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80106a6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80106aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80106ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d104      	bne.n	80106bc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80106b2:	f7fd fce1 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 80106b6:	6378      	str	r0, [r7, #52]	; 0x34
 80106b8:	f000 bc61 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80106bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106c2:	d104      	bne.n	80106ce <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80106c4:	f7fd fbbc 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 80106c8:	6378      	str	r0, [r7, #52]	; 0x34
 80106ca:	f000 bc58 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80106ce:	4b9b      	ldr	r3, [pc, #620]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80106d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106da:	d107      	bne.n	80106ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80106dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106e2:	d103      	bne.n	80106ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80106e4:	4b96      	ldr	r3, [pc, #600]	; (8010940 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80106e6:	637b      	str	r3, [r7, #52]	; 0x34
 80106e8:	f000 bc49 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80106ec:	4b93      	ldr	r3, [pc, #588]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f003 0320 	and.w	r3, r3, #32
 80106f4:	2b20      	cmp	r3, #32
 80106f6:	d11c      	bne.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 80106f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80106fe:	d118      	bne.n	8010732 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010700:	4b8e      	ldr	r3, [pc, #568]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d005      	beq.n	8010718 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 801070c:	4b8b      	ldr	r3, [pc, #556]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	0e1b      	lsrs	r3, r3, #24
 8010712:	f003 030f 	and.w	r3, r3, #15
 8010716:	e006      	b.n	8010726 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8010718:	4b88      	ldr	r3, [pc, #544]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801071a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801071e:	041b      	lsls	r3, r3, #16
 8010720:	0e1b      	lsrs	r3, r3, #24
 8010722:	f003 030f 	and.w	r3, r3, #15
 8010726:	4a87      	ldr	r2, [pc, #540]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8010728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801072c:	637b      	str	r3, [r7, #52]	; 0x34
 801072e:	f000 bc26 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8010732:	2300      	movs	r3, #0
 8010734:	637b      	str	r3, [r7, #52]	; 0x34
 8010736:	f000 bc22 	b.w	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 801073a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801073e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010742:	430b      	orrs	r3, r1
 8010744:	d164      	bne.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8010746:	4b7d      	ldr	r3, [pc, #500]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801074c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010750:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	2b00      	cmp	r3, #0
 8010756:	d120      	bne.n	801079a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010758:	4b78      	ldr	r3, [pc, #480]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	f003 0320 	and.w	r3, r3, #32
 8010760:	2b20      	cmp	r3, #32
 8010762:	d117      	bne.n	8010794 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010764:	4b75      	ldr	r3, [pc, #468]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d005      	beq.n	801077c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8010770:	4b72      	ldr	r3, [pc, #456]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	0e1b      	lsrs	r3, r3, #24
 8010776:	f003 030f 	and.w	r3, r3, #15
 801077a:	e006      	b.n	801078a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 801077c:	4b6f      	ldr	r3, [pc, #444]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801077e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010782:	041b      	lsls	r3, r3, #16
 8010784:	0e1b      	lsrs	r3, r3, #24
 8010786:	f003 030f 	and.w	r3, r3, #15
 801078a:	4a6e      	ldr	r2, [pc, #440]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 801078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010790:	637b      	str	r3, [r7, #52]	; 0x34
 8010792:	e3f4      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8010794:	2300      	movs	r3, #0
 8010796:	637b      	str	r3, [r7, #52]	; 0x34
 8010798:	e3f1      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 801079a:	4b68      	ldr	r3, [pc, #416]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801079c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80107a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107a8:	d112      	bne.n	80107d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107b0:	d10e      	bne.n	80107d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80107b2:	4b62      	ldr	r3, [pc, #392]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80107b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80107b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107c0:	d102      	bne.n	80107c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 80107c2:	23fa      	movs	r3, #250	; 0xfa
 80107c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80107c6:	e3da      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80107c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80107cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80107ce:	e3d6      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80107d0:	4b5a      	ldr	r3, [pc, #360]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80107d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80107dc:	d106      	bne.n	80107ec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80107de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107e4:	d102      	bne.n	80107ec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 80107e6:	4b56      	ldr	r3, [pc, #344]	; (8010940 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80107e8:	637b      	str	r3, [r7, #52]	; 0x34
 80107ea:	e3c8      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80107ec:	4b53      	ldr	r3, [pc, #332]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80107ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80107f2:	f003 0302 	and.w	r3, r3, #2
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	d107      	bne.n	801080a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 80107fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010800:	d103      	bne.n	801080a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8010802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010806:	637b      	str	r3, [r7, #52]	; 0x34
 8010808:	e3b9      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 801080a:	2300      	movs	r3, #0
 801080c:	637b      	str	r3, [r7, #52]	; 0x34
 801080e:	e3b6      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8010810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010814:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010818:	430b      	orrs	r3, r1
 801081a:	d164      	bne.n	80108e6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 801081c:	4b47      	ldr	r3, [pc, #284]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801081e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010822:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010826:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8010828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082a:	2b00      	cmp	r3, #0
 801082c:	d120      	bne.n	8010870 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801082e:	4b43      	ldr	r3, [pc, #268]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 0320 	and.w	r3, r3, #32
 8010836:	2b20      	cmp	r3, #32
 8010838:	d117      	bne.n	801086a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801083a:	4b40      	ldr	r3, [pc, #256]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8010846:	4b3d      	ldr	r3, [pc, #244]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	0e1b      	lsrs	r3, r3, #24
 801084c:	f003 030f 	and.w	r3, r3, #15
 8010850:	e006      	b.n	8010860 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8010852:	4b3a      	ldr	r3, [pc, #232]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010858:	041b      	lsls	r3, r3, #16
 801085a:	0e1b      	lsrs	r3, r3, #24
 801085c:	f003 030f 	and.w	r3, r3, #15
 8010860:	4a38      	ldr	r2, [pc, #224]	; (8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8010862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010866:	637b      	str	r3, [r7, #52]	; 0x34
 8010868:	e389      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 801086a:	2300      	movs	r3, #0
 801086c:	637b      	str	r3, [r7, #52]	; 0x34
 801086e:	e386      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8010870:	4b32      	ldr	r3, [pc, #200]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801087a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801087e:	d112      	bne.n	80108a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010886:	d10e      	bne.n	80108a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010888:	4b2c      	ldr	r3, [pc, #176]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801088a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010896:	d102      	bne.n	801089e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8010898:	23fa      	movs	r3, #250	; 0xfa
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801089c:	e36f      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 801089e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80108a2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80108a4:	e36b      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80108a6:	4b25      	ldr	r3, [pc, #148]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80108ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108b2:	d106      	bne.n	80108c2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80108ba:	d102      	bne.n	80108c2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 80108bc:	4b20      	ldr	r3, [pc, #128]	; (8010940 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80108be:	637b      	str	r3, [r7, #52]	; 0x34
 80108c0:	e35d      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80108c2:	4b1e      	ldr	r3, [pc, #120]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80108c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80108c8:	f003 0302 	and.w	r3, r3, #2
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	d107      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 80108d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80108d6:	d103      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 80108d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108dc:	637b      	str	r3, [r7, #52]	; 0x34
 80108de:	e34e      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80108e0:	2300      	movs	r3, #0
 80108e2:	637b      	str	r3, [r7, #52]	; 0x34
 80108e4:	e34b      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80108e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108ea:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80108ee:	430b      	orrs	r3, r1
 80108f0:	d14e      	bne.n	8010990 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80108f2:	4b12      	ldr	r3, [pc, #72]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80108f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80108f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80108fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80108fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010900:	2b00      	cmp	r3, #0
 8010902:	d103      	bne.n	801090c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8010904:	f7fd fbb8 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 8010908:	6378      	str	r0, [r7, #52]	; 0x34
 801090a:	e338      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 801090c:	4b0b      	ldr	r3, [pc, #44]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 801090e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801091a:	d119      	bne.n	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 801091c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010922:	d115      	bne.n	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010924:	4b05      	ldr	r3, [pc, #20]	; (801093c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8010926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801092e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010932:	d109      	bne.n	8010948 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8010934:	23fa      	movs	r3, #250	; 0xfa
 8010936:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010938:	e321      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 801093a:	bf00      	nop
 801093c:	46020c00 	.word	0x46020c00
 8010940:	00f42400 	.word	0x00f42400
 8010944:	08019404 	.word	0x08019404
      }
      else
      {
        frequency = LSI_VALUE;
 8010948:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801094c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801094e:	e316      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8010950:	4ba8      	ldr	r3, [pc, #672]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801095c:	d106      	bne.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010964:	d102      	bne.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8010966:	4ba4      	ldr	r3, [pc, #656]	; (8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8010968:	637b      	str	r3, [r7, #52]	; 0x34
 801096a:	e308      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 801096c:	4ba1      	ldr	r3, [pc, #644]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 801096e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010972:	f003 0302 	and.w	r3, r3, #2
 8010976:	2b02      	cmp	r3, #2
 8010978:	d107      	bne.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8010980:	d103      	bne.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8010982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010986:	637b      	str	r3, [r7, #52]	; 0x34
 8010988:	e2f9      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 801098a:	2300      	movs	r3, #0
 801098c:	637b      	str	r3, [r7, #52]	; 0x34
 801098e:	e2f6      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8010990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010994:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8010998:	430b      	orrs	r3, r1
 801099a:	d12d      	bne.n	80109f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 801099c:	4b95      	ldr	r3, [pc, #596]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 801099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80109a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80109a6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80109a8:	4b92      	ldr	r3, [pc, #584]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109b4:	d105      	bne.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80109b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d102      	bne.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 80109bc:	4b8e      	ldr	r3, [pc, #568]	; (8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80109be:	637b      	str	r3, [r7, #52]	; 0x34
 80109c0:	e2dd      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80109c8:	d107      	bne.n	80109da <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80109ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fe fb4c 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80109d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d6:	637b      	str	r3, [r7, #52]	; 0x34
 80109d8:	e2d1      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80109da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109e0:	d107      	bne.n	80109f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109e2:	f107 0318 	add.w	r3, r7, #24
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe fc9a 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	637b      	str	r3, [r7, #52]	; 0x34
 80109f0:	e2c5      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80109f2:	2300      	movs	r3, #0
 80109f4:	637b      	str	r3, [r7, #52]	; 0x34
 80109f6:	e2c2      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80109f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109fc:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8010a00:	430b      	orrs	r3, r1
 8010a02:	d156      	bne.n	8010ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8010a04:	4b7b      	ldr	r3, [pc, #492]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010a0a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010a0e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010a16:	d028      	beq.n	8010a6a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010a1e:	d845      	bhi.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a26:	d013      	beq.n	8010a50 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8010a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a2e:	d83d      	bhi.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a3c:	d004      	beq.n	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8010a3e:	e035      	b.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8010a40:	f7fd fb2e 	bl	800e0a0 <HAL_RCC_GetPCLK2Freq>
 8010a44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010a46:	e29a      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010a48:	f7fd f9fa 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010a4c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010a4e:	e296      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a50:	4b68      	ldr	r3, [pc, #416]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a5c:	d102      	bne.n	8010a64 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8010a5e:	4b66      	ldr	r3, [pc, #408]	; (8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8010a60:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010a62:	e28c      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010a64:	2300      	movs	r3, #0
 8010a66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010a68:	e289      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010a6a:	4b62      	ldr	r3, [pc, #392]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f003 0320 	and.w	r3, r3, #32
 8010a72:	2b20      	cmp	r3, #32
 8010a74:	d117      	bne.n	8010aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010a76:	4b5f      	ldr	r3, [pc, #380]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d005      	beq.n	8010a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8010a82:	4b5c      	ldr	r3, [pc, #368]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	0e1b      	lsrs	r3, r3, #24
 8010a88:	f003 030f 	and.w	r3, r3, #15
 8010a8c:	e006      	b.n	8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8010a8e:	4b59      	ldr	r3, [pc, #356]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010a94:	041b      	lsls	r3, r3, #16
 8010a96:	0e1b      	lsrs	r3, r3, #24
 8010a98:	f003 030f 	and.w	r3, r3, #15
 8010a9c:	4a57      	ldr	r2, [pc, #348]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8010a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010aa2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010aa4:	e26b      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010aaa:	e268      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010aac:	2300      	movs	r3, #0
 8010aae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010ab0:	e265      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8010ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ab6:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8010aba:	430b      	orrs	r3, r1
 8010abc:	d156      	bne.n	8010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8010abe:	4b4d      	ldr	r3, [pc, #308]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010ac8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010ad0:	d028      	beq.n	8010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8010ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010ad8:	d845      	bhi.n	8010b66 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ae0:	d013      	beq.n	8010b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8010ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ae8:	d83d      	bhi.n	8010b66 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8010aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d004      	beq.n	8010afa <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8010af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010af6:	d004      	beq.n	8010b02 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8010af8:	e035      	b.n	8010b66 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8010afa:	f7fd fabd 	bl	800e078 <HAL_RCC_GetPCLK1Freq>
 8010afe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010b00:	e23d      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010b02:	f7fd f99d 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010b06:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010b08:	e239      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010b0a:	4b3a      	ldr	r3, [pc, #232]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b16:	d102      	bne.n	8010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8010b18:	4b37      	ldr	r3, [pc, #220]	; (8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8010b1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010b1c:	e22f      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010b22:	e22c      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010b24:	4b33      	ldr	r3, [pc, #204]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f003 0320 	and.w	r3, r3, #32
 8010b2c:	2b20      	cmp	r3, #32
 8010b2e:	d117      	bne.n	8010b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010b30:	4b30      	ldr	r3, [pc, #192]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d005      	beq.n	8010b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8010b3c:	4b2d      	ldr	r3, [pc, #180]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010b3e:	689b      	ldr	r3, [r3, #8]
 8010b40:	0e1b      	lsrs	r3, r3, #24
 8010b42:	f003 030f 	and.w	r3, r3, #15
 8010b46:	e006      	b.n	8010b56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8010b48:	4b2a      	ldr	r3, [pc, #168]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010b4e:	041b      	lsls	r3, r3, #16
 8010b50:	0e1b      	lsrs	r3, r3, #24
 8010b52:	f003 030f 	and.w	r3, r3, #15
 8010b56:	4a29      	ldr	r2, [pc, #164]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8010b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010b5e:	e20e      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010b60:	2300      	movs	r3, #0
 8010b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010b64:	e20b      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010b66:	2300      	movs	r3, #0
 8010b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010b6a:	e208      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8010b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b70:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8010b74:	430b      	orrs	r3, r1
 8010b76:	d17c      	bne.n	8010c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8010b78:	4b1e      	ldr	r3, [pc, #120]	; (8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8010b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010b7e:	f003 0318 	and.w	r3, r3, #24
 8010b82:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8010b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b86:	2b18      	cmp	r3, #24
 8010b88:	d870      	bhi.n	8010c6c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 8010b8a:	a201      	add	r2, pc, #4	; (adr r2, 8010b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8010b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b90:	08010c01 	.word	0x08010c01
 8010b94:	08010c6d 	.word	0x08010c6d
 8010b98:	08010c6d 	.word	0x08010c6d
 8010b9c:	08010c6d 	.word	0x08010c6d
 8010ba0:	08010c6d 	.word	0x08010c6d
 8010ba4:	08010c6d 	.word	0x08010c6d
 8010ba8:	08010c6d 	.word	0x08010c6d
 8010bac:	08010c6d 	.word	0x08010c6d
 8010bb0:	08010c09 	.word	0x08010c09
 8010bb4:	08010c6d 	.word	0x08010c6d
 8010bb8:	08010c6d 	.word	0x08010c6d
 8010bbc:	08010c6d 	.word	0x08010c6d
 8010bc0:	08010c6d 	.word	0x08010c6d
 8010bc4:	08010c6d 	.word	0x08010c6d
 8010bc8:	08010c6d 	.word	0x08010c6d
 8010bcc:	08010c6d 	.word	0x08010c6d
 8010bd0:	08010c11 	.word	0x08010c11
 8010bd4:	08010c6d 	.word	0x08010c6d
 8010bd8:	08010c6d 	.word	0x08010c6d
 8010bdc:	08010c6d 	.word	0x08010c6d
 8010be0:	08010c6d 	.word	0x08010c6d
 8010be4:	08010c6d 	.word	0x08010c6d
 8010be8:	08010c6d 	.word	0x08010c6d
 8010bec:	08010c6d 	.word	0x08010c6d
 8010bf0:	08010c2b 	.word	0x08010c2b
 8010bf4:	46020c00 	.word	0x46020c00
 8010bf8:	00f42400 	.word	0x00f42400
 8010bfc:	08019404 	.word	0x08019404
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8010c00:	f7fd fa62 	bl	800e0c8 <HAL_RCC_GetPCLK3Freq>
 8010c04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010c06:	e1ba      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010c08:	f7fd f91a 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010c0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010c0e:	e1b6      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010c10:	4b9f      	ldr	r3, [pc, #636]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c1c:	d102      	bne.n	8010c24 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 8010c1e:	4b9d      	ldr	r3, [pc, #628]	; (8010e94 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8010c20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010c22:	e1ac      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010c24:	2300      	movs	r3, #0
 8010c26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010c28:	e1a9      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010c2a:	4b99      	ldr	r3, [pc, #612]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f003 0320 	and.w	r3, r3, #32
 8010c32:	2b20      	cmp	r3, #32
 8010c34:	d117      	bne.n	8010c66 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010c36:	4b96      	ldr	r3, [pc, #600]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010c38:	689b      	ldr	r3, [r3, #8]
 8010c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d005      	beq.n	8010c4e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 8010c42:	4b93      	ldr	r3, [pc, #588]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010c44:	689b      	ldr	r3, [r3, #8]
 8010c46:	0e1b      	lsrs	r3, r3, #24
 8010c48:	f003 030f 	and.w	r3, r3, #15
 8010c4c:	e006      	b.n	8010c5c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8010c4e:	4b90      	ldr	r3, [pc, #576]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010c54:	041b      	lsls	r3, r3, #16
 8010c56:	0e1b      	lsrs	r3, r3, #24
 8010c58:	f003 030f 	and.w	r3, r3, #15
 8010c5c:	4a8e      	ldr	r2, [pc, #568]	; (8010e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8010c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c62:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010c64:	e18b      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010c66:	2300      	movs	r3, #0
 8010c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010c6a:	e188      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010c70:	e185      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8010c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c76:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8010c7a:	430b      	orrs	r3, r1
 8010c7c:	d155      	bne.n	8010d2a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8010c7e:	4b84      	ldr	r3, [pc, #528]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010c80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010c84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010c88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010c90:	d013      	beq.n	8010cba <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010c98:	d844      	bhi.n	8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ca0:	d013      	beq.n	8010cca <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 8010ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ca8:	d83c      	bhi.n	8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d014      	beq.n	8010cda <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cb6:	d014      	beq.n	8010ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 8010cb8:	e034      	b.n	8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cba:	f107 0318 	add.w	r3, r7, #24
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fe fb2e 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010cc8:	e159      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fe f9cc 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010cd8:	e151      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010cda:	f7fd f8b1 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010cde:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010ce0:	e14d      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010ce2:	4b6b      	ldr	r3, [pc, #428]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f003 0320 	and.w	r3, r3, #32
 8010cea:	2b20      	cmp	r3, #32
 8010cec:	d117      	bne.n	8010d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010cee:	4b68      	ldr	r3, [pc, #416]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d005      	beq.n	8010d06 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 8010cfa:	4b65      	ldr	r3, [pc, #404]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010cfc:	689b      	ldr	r3, [r3, #8]
 8010cfe:	0e1b      	lsrs	r3, r3, #24
 8010d00:	f003 030f 	and.w	r3, r3, #15
 8010d04:	e006      	b.n	8010d14 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 8010d06:	4b62      	ldr	r3, [pc, #392]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010d0c:	041b      	lsls	r3, r3, #16
 8010d0e:	0e1b      	lsrs	r3, r3, #24
 8010d10:	f003 030f 	and.w	r3, r3, #15
 8010d14:	4a60      	ldr	r2, [pc, #384]	; (8010e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8010d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010d1c:	e12f      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010d22:	e12c      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010d24:	2300      	movs	r3, #0
 8010d26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010d28:	e129      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8010d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d2e:	1e59      	subs	r1, r3, #1
 8010d30:	ea52 0301 	orrs.w	r3, r2, r1
 8010d34:	d13c      	bne.n	8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8010d36:	4b56      	ldr	r3, [pc, #344]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010d38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010d3c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8010d40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010d48:	d027      	beq.n	8010d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 8010d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010d50:	d82b      	bhi.n	8010daa <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8010d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010d58:	d017      	beq.n	8010d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010d60:	d823      	bhi.n	8010daa <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8010d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d004      	beq.n	8010d72 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 8010d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010d6e:	d004      	beq.n	8010d7a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8010d70:	e01b      	b.n	8010daa <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010d72:	f7fd f865 	bl	800de40 <HAL_RCC_GetSysClockFreq>
 8010d76:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010d78:	e101      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fe f974 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010d88:	e0f9      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d8a:	f107 0318 	add.w	r3, r7, #24
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fe fac6 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010d98:	e0f1      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d9a:	f107 030c 	add.w	r3, r7, #12
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fe fc18 	bl	800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010da8:	e0e9      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010daa:	2300      	movs	r3, #0
 8010dac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010dae:	e0e6      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8010db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010db4:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8010db8:	430b      	orrs	r3, r1
 8010dba:	d131      	bne.n	8010e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8010dbc:	4b34      	ldr	r3, [pc, #208]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dc6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8010dc8:	4b31      	ldr	r3, [pc, #196]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010dce:	f003 0302 	and.w	r3, r3, #2
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d106      	bne.n	8010de4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 8010ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010de0:	637b      	str	r3, [r7, #52]	; 0x34
 8010de2:	e0cc      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8010de4:	4b2a      	ldr	r3, [pc, #168]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010df2:	d112      	bne.n	8010e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 8010df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dfa:	d10e      	bne.n	8010e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010dfc:	4b24      	ldr	r3, [pc, #144]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e0a:	d102      	bne.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 8010e0c:	23fa      	movs	r3, #250	; 0xfa
 8010e0e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010e10:	e0b5      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8010e12:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010e16:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010e18:	e0b1      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e1e:	e0ae      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8010e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e24:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010e28:	430b      	orrs	r3, r1
 8010e2a:	d13b      	bne.n	8010ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8010e2c:	4b18      	ldr	r3, [pc, #96]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010e32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010e36:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8010e38:	4b15      	ldr	r3, [pc, #84]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e44:	d105      	bne.n	8010e52 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d102      	bne.n	8010e52 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 8010e4c:	4b13      	ldr	r3, [pc, #76]	; (8010e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8010e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8010e50:	e095      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8010e52:	4b0f      	ldr	r3, [pc, #60]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e5e:	d106      	bne.n	8010e6e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e66:	d102      	bne.n	8010e6e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 8010e68:	4b0d      	ldr	r3, [pc, #52]	; (8010ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8010e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e6c:	e087      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8010e6e:	4b08      	ldr	r3, [pc, #32]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e7a:	d106      	bne.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e82:	d102      	bne.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 8010e84:	4b03      	ldr	r3, [pc, #12]	; (8010e94 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8010e86:	637b      	str	r3, [r7, #52]	; 0x34
 8010e88:	e079      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e8e:	e076      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8010e90:	46020c00 	.word	0x46020c00
 8010e94:	00f42400 	.word	0x00f42400
 8010e98:	08019404 	.word	0x08019404
 8010e9c:	02dc6c00 	.word	0x02dc6c00
 8010ea0:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8010ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ea8:	1e99      	subs	r1, r3, #2
 8010eaa:	ea52 0301 	orrs.w	r3, r2, r1
 8010eae:	d120      	bne.n	8010ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 8010eb0:	4b35      	ldr	r3, [pc, #212]	; (8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010eba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d004      	beq.n	8010ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010ec8:	d008      	beq.n	8010edc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8010eca:	e00f      	b.n	8010eec <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ecc:	f107 030c 	add.w	r3, r7, #12
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe fb7f 	bl	800f5d4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010eda:	e050      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010edc:	f107 0318 	add.w	r3, r7, #24
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe fa1d 	bl	800f320 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8010ee6:	6a3b      	ldr	r3, [r7, #32]
 8010ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010eea:	e048      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010eec:	2300      	movs	r3, #0
 8010eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010ef0:	e045      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8010ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ef6:	f1a3 0108 	sub.w	r1, r3, #8
 8010efa:	ea52 0301 	orrs.w	r3, r2, r1
 8010efe:	d13c      	bne.n	8010f7a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8010f00:	4b21      	ldr	r3, [pc, #132]	; (8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f06:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8010f0a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8010f0c:	4b1e      	ldr	r3, [pc, #120]	; (8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f18:	d105      	bne.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 8010f20:	4b1a      	ldr	r3, [pc, #104]	; (8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 8010f22:	637b      	str	r3, [r7, #52]	; 0x34
 8010f24:	e02b      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8010f26:	4b18      	ldr	r3, [pc, #96]	; (8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f32:	d106      	bne.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 8010f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f3a:	d102      	bne.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 8010f3c:	4b14      	ldr	r3, [pc, #80]	; (8010f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 8010f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f40:	e01d      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f48:	d107      	bne.n	8010f5a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe f88c 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	637b      	str	r3, [r7, #52]	; 0x34
 8010f58:	e011      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8010f60:	d108      	bne.n	8010f74 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fe f880 	bl	800f06c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	085b      	lsrs	r3, r3, #1
 8010f70:	637b      	str	r3, [r7, #52]	; 0x34
 8010f72:	e004      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8010f74:	2300      	movs	r3, #0
 8010f76:	637b      	str	r3, [r7, #52]	; 0x34
 8010f78:	e001      	b.n	8010f7e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8010f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3738      	adds	r7, #56	; 0x38
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	46020c00 	.word	0x46020c00
 8010f8c:	00f42400 	.word	0x00f42400
 8010f90:	007a1200 	.word	0x007a1200

08010f94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010f9c:	4b47      	ldr	r3, [pc, #284]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a46      	ldr	r2, [pc, #280]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8010fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010fa6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010fa8:	f7f4 fe8a 	bl	8005cc0 <HAL_GetTick>
 8010fac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fae:	e008      	b.n	8010fc2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010fb0:	f7f4 fe86 	bl	8005cc0 <HAL_GetTick>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d901      	bls.n	8010fc2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	e077      	b.n	80110b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010fc2:	4b3e      	ldr	r3, [pc, #248]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1f0      	bne.n	8010fb0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8010fce:	4b3b      	ldr	r3, [pc, #236]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8010fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010fd6:	f023 0303 	bic.w	r3, r3, #3
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	6811      	ldr	r1, [r2, #0]
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	6852      	ldr	r2, [r2, #4]
 8010fe2:	3a01      	subs	r2, #1
 8010fe4:	0212      	lsls	r2, r2, #8
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	4934      	ldr	r1, [pc, #208]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8010fea:	4313      	orrs	r3, r2
 8010fec:	62cb      	str	r3, [r1, #44]	; 0x2c
 8010fee:	4b33      	ldr	r3, [pc, #204]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8010ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ff2:	4b33      	ldr	r3, [pc, #204]	; (80110c0 <RCCEx_PLL2_Config+0x12c>)
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	6892      	ldr	r2, [r2, #8]
 8010ffa:	3a01      	subs	r2, #1
 8010ffc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	68d2      	ldr	r2, [r2, #12]
 8011004:	3a01      	subs	r2, #1
 8011006:	0252      	lsls	r2, r2, #9
 8011008:	b292      	uxth	r2, r2
 801100a:	4311      	orrs	r1, r2
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	6912      	ldr	r2, [r2, #16]
 8011010:	3a01      	subs	r2, #1
 8011012:	0412      	lsls	r2, r2, #16
 8011014:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8011018:	4311      	orrs	r1, r2
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	6952      	ldr	r2, [r2, #20]
 801101e:	3a01      	subs	r2, #1
 8011020:	0612      	lsls	r2, r2, #24
 8011022:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8011026:	430a      	orrs	r2, r1
 8011028:	4924      	ldr	r1, [pc, #144]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 801102a:	4313      	orrs	r3, r2
 801102c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 801102e:	4b23      	ldr	r3, [pc, #140]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011032:	f023 020c 	bic.w	r2, r3, #12
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	4920      	ldr	r1, [pc, #128]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 801103c:	4313      	orrs	r3, r2
 801103e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8011040:	4b1e      	ldr	r3, [pc, #120]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6a1b      	ldr	r3, [r3, #32]
 8011048:	491c      	ldr	r1, [pc, #112]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 801104a:	4313      	orrs	r3, r2
 801104c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 801104e:	4b1b      	ldr	r3, [pc, #108]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011052:	4a1a      	ldr	r2, [pc, #104]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011054:	f023 0310 	bic.w	r3, r3, #16
 8011058:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801105a:	4b18      	ldr	r3, [pc, #96]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 801105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011062:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	69d2      	ldr	r2, [r2, #28]
 801106a:	00d2      	lsls	r2, r2, #3
 801106c:	4913      	ldr	r1, [pc, #76]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 801106e:	4313      	orrs	r3, r2
 8011070:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8011072:	4b12      	ldr	r3, [pc, #72]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011076:	4a11      	ldr	r2, [pc, #68]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011078:	f043 0310 	orr.w	r3, r3, #16
 801107c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 801107e:	4b0f      	ldr	r3, [pc, #60]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4a0e      	ldr	r2, [pc, #56]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 8011084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011088:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801108a:	f7f4 fe19 	bl	8005cc0 <HAL_GetTick>
 801108e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011090:	e008      	b.n	80110a4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011092:	f7f4 fe15 	bl	8005cc0 <HAL_GetTick>
 8011096:	4602      	mov	r2, r0
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	2b02      	cmp	r3, #2
 801109e:	d901      	bls.n	80110a4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e006      	b.n	80110b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80110a4:	4b05      	ldr	r3, [pc, #20]	; (80110bc <RCCEx_PLL2_Config+0x128>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d0f0      	beq.n	8011092 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80110b0:	2300      	movs	r3, #0

}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	46020c00 	.word	0x46020c00
 80110c0:	80800000 	.word	0x80800000

080110c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80110cc:	4b47      	ldr	r3, [pc, #284]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a46      	ldr	r2, [pc, #280]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80110d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80110d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80110d8:	f7f4 fdf2 	bl	8005cc0 <HAL_GetTick>
 80110dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80110de:	e008      	b.n	80110f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80110e0:	f7f4 fdee 	bl	8005cc0 <HAL_GetTick>
 80110e4:	4602      	mov	r2, r0
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	2b02      	cmp	r3, #2
 80110ec:	d901      	bls.n	80110f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80110ee:	2303      	movs	r3, #3
 80110f0:	e077      	b.n	80111e2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80110f2:	4b3e      	ldr	r3, [pc, #248]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1f0      	bne.n	80110e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80110fe:	4b3b      	ldr	r3, [pc, #236]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 8011100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011102:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011106:	f023 0303 	bic.w	r3, r3, #3
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	6811      	ldr	r1, [r2, #0]
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	6852      	ldr	r2, [r2, #4]
 8011112:	3a01      	subs	r2, #1
 8011114:	0212      	lsls	r2, r2, #8
 8011116:	430a      	orrs	r2, r1
 8011118:	4934      	ldr	r1, [pc, #208]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 801111a:	4313      	orrs	r3, r2
 801111c:	630b      	str	r3, [r1, #48]	; 0x30
 801111e:	4b33      	ldr	r3, [pc, #204]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 8011120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011122:	4b33      	ldr	r3, [pc, #204]	; (80111f0 <RCCEx_PLL3_Config+0x12c>)
 8011124:	4013      	ands	r3, r2
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	6892      	ldr	r2, [r2, #8]
 801112a:	3a01      	subs	r2, #1
 801112c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	68d2      	ldr	r2, [r2, #12]
 8011134:	3a01      	subs	r2, #1
 8011136:	0252      	lsls	r2, r2, #9
 8011138:	b292      	uxth	r2, r2
 801113a:	4311      	orrs	r1, r2
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	6912      	ldr	r2, [r2, #16]
 8011140:	3a01      	subs	r2, #1
 8011142:	0412      	lsls	r2, r2, #16
 8011144:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8011148:	4311      	orrs	r1, r2
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	6952      	ldr	r2, [r2, #20]
 801114e:	3a01      	subs	r2, #1
 8011150:	0612      	lsls	r2, r2, #24
 8011152:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8011156:	430a      	orrs	r2, r1
 8011158:	4924      	ldr	r1, [pc, #144]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 801115a:	4313      	orrs	r3, r2
 801115c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 801115e:	4b23      	ldr	r3, [pc, #140]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 8011160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011162:	f023 020c 	bic.w	r2, r3, #12
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	4920      	ldr	r1, [pc, #128]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 801116c:	4313      	orrs	r3, r2
 801116e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8011170:	4b1e      	ldr	r3, [pc, #120]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 8011172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	491c      	ldr	r1, [pc, #112]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 801117a:	4313      	orrs	r3, r2
 801117c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 801117e:	4b1b      	ldr	r3, [pc, #108]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 8011180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011182:	4a1a      	ldr	r2, [pc, #104]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 8011184:	f023 0310 	bic.w	r3, r3, #16
 8011188:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801118a:	4b18      	ldr	r3, [pc, #96]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 801118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801118e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011192:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	69d2      	ldr	r2, [r2, #28]
 801119a:	00d2      	lsls	r2, r2, #3
 801119c:	4913      	ldr	r1, [pc, #76]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 801119e:	4313      	orrs	r3, r2
 80111a0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80111a2:	4b12      	ldr	r3, [pc, #72]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80111a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a6:	4a11      	ldr	r2, [pc, #68]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80111a8:	f043 0310 	orr.w	r3, r3, #16
 80111ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80111ae:	4b0f      	ldr	r3, [pc, #60]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a0e      	ldr	r2, [pc, #56]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80111b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80111ba:	f7f4 fd81 	bl	8005cc0 <HAL_GetTick>
 80111be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80111c0:	e008      	b.n	80111d4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80111c2:	f7f4 fd7d 	bl	8005cc0 <HAL_GetTick>
 80111c6:	4602      	mov	r2, r0
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	d901      	bls.n	80111d4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80111d0:	2303      	movs	r3, #3
 80111d2:	e006      	b.n	80111e2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <RCCEx_PLL3_Config+0x128>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d0f0      	beq.n	80111c2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80111e0:	2300      	movs	r3, #0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	46020c00 	.word	0x46020c00
 80111f0:	80800000 	.word	0x80800000

080111f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80111fc:	2301      	movs	r3, #1
 80111fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d071      	beq.n	80112ea <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7f3 fd64 	bl	8004ce8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2202      	movs	r2, #2
 8011224:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011228:	4b32      	ldr	r3, [pc, #200]	; (80112f4 <HAL_RTC_Init+0x100>)
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	f003 0310 	and.w	r3, r3, #16
 8011230:	2b10      	cmp	r3, #16
 8011232:	d051      	beq.n	80112d8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011234:	4b2f      	ldr	r3, [pc, #188]	; (80112f4 <HAL_RTC_Init+0x100>)
 8011236:	22ca      	movs	r2, #202	; 0xca
 8011238:	625a      	str	r2, [r3, #36]	; 0x24
 801123a:	4b2e      	ldr	r3, [pc, #184]	; (80112f4 <HAL_RTC_Init+0x100>)
 801123c:	2253      	movs	r2, #83	; 0x53
 801123e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 f88b 	bl	801135c <RTC_EnterInitMode>
 8011246:	4603      	mov	r3, r0
 8011248:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 801124a:	7bfb      	ldrb	r3, [r7, #15]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d13f      	bne.n	80112d0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8011250:	4b28      	ldr	r3, [pc, #160]	; (80112f4 <HAL_RTC_Init+0x100>)
 8011252:	699b      	ldr	r3, [r3, #24]
 8011254:	4a27      	ldr	r2, [pc, #156]	; (80112f4 <HAL_RTC_Init+0x100>)
 8011256:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 801125a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801125e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8011260:	4b24      	ldr	r3, [pc, #144]	; (80112f4 <HAL_RTC_Init+0x100>)
 8011262:	699a      	ldr	r2, [r3, #24]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	6859      	ldr	r1, [r3, #4]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	691b      	ldr	r3, [r3, #16]
 801126c:	4319      	orrs	r1, r3
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	699b      	ldr	r3, [r3, #24]
 8011272:	430b      	orrs	r3, r1
 8011274:	491f      	ldr	r1, [pc, #124]	; (80112f4 <HAL_RTC_Init+0x100>)
 8011276:	4313      	orrs	r3, r2
 8011278:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	68da      	ldr	r2, [r3, #12]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	041b      	lsls	r3, r3, #16
 8011284:	491b      	ldr	r1, [pc, #108]	; (80112f4 <HAL_RTC_Init+0x100>)
 8011286:	4313      	orrs	r3, r2
 8011288:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 801128a:	4b1a      	ldr	r3, [pc, #104]	; (80112f4 <HAL_RTC_Init+0x100>)
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129a:	430b      	orrs	r3, r1
 801129c:	4915      	ldr	r1, [pc, #84]	; (80112f4 <HAL_RTC_Init+0x100>)
 801129e:	4313      	orrs	r3, r2
 80112a0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 f896 	bl	80113d4 <RTC_ExitInitMode>
 80112a8:	4603      	mov	r3, r0
 80112aa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80112ac:	7bfb      	ldrb	r3, [r7, #15]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d10e      	bne.n	80112d0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80112b2:	4b10      	ldr	r3, [pc, #64]	; (80112f4 <HAL_RTC_Init+0x100>)
 80112b4:	699b      	ldr	r3, [r3, #24]
 80112b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6a19      	ldr	r1, [r3, #32]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	69db      	ldr	r3, [r3, #28]
 80112c2:	4319      	orrs	r1, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	695b      	ldr	r3, [r3, #20]
 80112c8:	430b      	orrs	r3, r1
 80112ca:	490a      	ldr	r1, [pc, #40]	; (80112f4 <HAL_RTC_Init+0x100>)
 80112cc:	4313      	orrs	r3, r2
 80112ce:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80112d0:	4b08      	ldr	r3, [pc, #32]	; (80112f4 <HAL_RTC_Init+0x100>)
 80112d2:	22ff      	movs	r2, #255	; 0xff
 80112d4:	625a      	str	r2, [r3, #36]	; 0x24
 80112d6:	e001      	b.n	80112dc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80112d8:	2300      	movs	r3, #0
 80112da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d103      	bne.n	80112ea <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2201      	movs	r2, #1
 80112e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80112ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	46007800 	.word	0x46007800

080112f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8011300:	4b15      	ldr	r3, [pc, #84]	; (8011358 <HAL_RTC_WaitForSynchro+0x60>)
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	4a14      	ldr	r2, [pc, #80]	; (8011358 <HAL_RTC_WaitForSynchro+0x60>)
 8011306:	f023 0320 	bic.w	r3, r3, #32
 801130a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 801130c:	f7f4 fcd8 	bl	8005cc0 <HAL_GetTick>
 8011310:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011312:	e013      	b.n	801133c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011314:	f7f4 fcd4 	bl	8005cc0 <HAL_GetTick>
 8011318:	4602      	mov	r2, r0
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011322:	d90b      	bls.n	801133c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8011324:	4b0c      	ldr	r3, [pc, #48]	; (8011358 <HAL_RTC_WaitForSynchro+0x60>)
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	f003 0320 	and.w	r3, r3, #32
 801132c:	2b00      	cmp	r3, #0
 801132e:	d10c      	bne.n	801134a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2203      	movs	r2, #3
 8011334:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8011338:	2303      	movs	r3, #3
 801133a:	e008      	b.n	801134e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801133c:	4b06      	ldr	r3, [pc, #24]	; (8011358 <HAL_RTC_WaitForSynchro+0x60>)
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	f003 0320 	and.w	r3, r3, #32
 8011344:	2b00      	cmp	r3, #0
 8011346:	d0e5      	beq.n	8011314 <HAL_RTC_WaitForSynchro+0x1c>
 8011348:	e000      	b.n	801134c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 801134a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 801134c:	2300      	movs	r3, #0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	46007800 	.word	0x46007800

0801135c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011368:	4b19      	ldr	r3, [pc, #100]	; (80113d0 <RTC_EnterInitMode+0x74>)
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011370:	2b00      	cmp	r3, #0
 8011372:	d128      	bne.n	80113c6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011374:	4b16      	ldr	r3, [pc, #88]	; (80113d0 <RTC_EnterInitMode+0x74>)
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	4a15      	ldr	r2, [pc, #84]	; (80113d0 <RTC_EnterInitMode+0x74>)
 801137a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801137e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8011380:	f7f4 fc9e 	bl	8005cc0 <HAL_GetTick>
 8011384:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011386:	e013      	b.n	80113b0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011388:	f7f4 fc9a 	bl	8005cc0 <HAL_GetTick>
 801138c:	4602      	mov	r2, r0
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011396:	d90b      	bls.n	80113b0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8011398:	4b0d      	ldr	r3, [pc, #52]	; (80113d0 <RTC_EnterInitMode+0x74>)
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d10f      	bne.n	80113c4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80113a4:	2303      	movs	r3, #3
 80113a6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2203      	movs	r2, #3
 80113ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80113b0:	4b07      	ldr	r3, [pc, #28]	; (80113d0 <RTC_EnterInitMode+0x74>)
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d104      	bne.n	80113c6 <RTC_EnterInitMode+0x6a>
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d1e2      	bne.n	8011388 <RTC_EnterInitMode+0x2c>
 80113c2:	e000      	b.n	80113c6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80113c4:	bf00      	nop
        }
      }
    }
  }

  return status;
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	46007800 	.word	0x46007800

080113d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80113dc:	2300      	movs	r3, #0
 80113de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80113e0:	4b1a      	ldr	r3, [pc, #104]	; (801144c <RTC_ExitInitMode+0x78>)
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	4a19      	ldr	r2, [pc, #100]	; (801144c <RTC_ExitInitMode+0x78>)
 80113e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113ea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80113ec:	4b17      	ldr	r3, [pc, #92]	; (801144c <RTC_ExitInitMode+0x78>)
 80113ee:	699b      	ldr	r3, [r3, #24]
 80113f0:	f003 0320 	and.w	r3, r3, #32
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d10c      	bne.n	8011412 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff ff7d 	bl	80112f8 <HAL_RTC_WaitForSynchro>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d01e      	beq.n	8011442 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2203      	movs	r2, #3
 8011408:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 801140c:	2303      	movs	r3, #3
 801140e:	73fb      	strb	r3, [r7, #15]
 8011410:	e017      	b.n	8011442 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011412:	4b0e      	ldr	r3, [pc, #56]	; (801144c <RTC_ExitInitMode+0x78>)
 8011414:	699b      	ldr	r3, [r3, #24]
 8011416:	4a0d      	ldr	r2, [pc, #52]	; (801144c <RTC_ExitInitMode+0x78>)
 8011418:	f023 0320 	bic.w	r3, r3, #32
 801141c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7ff ff6a 	bl	80112f8 <HAL_RTC_WaitForSynchro>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d005      	beq.n	8011436 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2203      	movs	r2, #3
 801142e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8011432:	2303      	movs	r3, #3
 8011434:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011436:	4b05      	ldr	r3, [pc, #20]	; (801144c <RTC_ExitInitMode+0x78>)
 8011438:	699b      	ldr	r3, [r3, #24]
 801143a:	4a04      	ldr	r2, [pc, #16]	; (801144c <RTC_ExitInitMode+0x78>)
 801143c:	f043 0320 	orr.w	r3, r3, #32
 8011440:	6193      	str	r3, [r2, #24]
  }
  return status;
 8011442:	7bfb      	ldrb	r3, [r7, #15]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3710      	adds	r7, #16
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	46007800 	.word	0x46007800

08011450 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	4910      	ldr	r1, [pc, #64]	; (80114a4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8011464:	4313      	orrs	r3, r2
 8011466:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	689a      	ldr	r2, [r3, #8]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	431a      	orrs	r2, r3
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	699b      	ldr	r3, [r3, #24]
 8011476:	490c      	ldr	r1, [pc, #48]	; (80114a8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8011478:	4313      	orrs	r3, r2
 801147a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 801147c:	4b0a      	ldr	r3, [pc, #40]	; (80114a8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801147e:	6a1b      	ldr	r3, [r3, #32]
 8011480:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	6919      	ldr	r1, [r3, #16]
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	695b      	ldr	r3, [r3, #20]
 801148c:	041b      	lsls	r3, r3, #16
 801148e:	430b      	orrs	r3, r1
 8011490:	4905      	ldr	r1, [pc, #20]	; (80114a8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8011492:	4313      	orrs	r3, r2
 8011494:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8011496:	2300      	movs	r3, #0
}
 8011498:	4618      	mov	r0, r3
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr
 80114a4:	46007800 	.word	0x46007800
 80114a8:	46007c00 	.word	0x46007c00

080114ac <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b086      	sub	sp, #24
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	607a      	str	r2, [r7, #4]
 80114b8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d904      	bls.n	80114ca <HAL_SAI_InitProtocol+0x1e>
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	3b03      	subs	r3, #3
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d812      	bhi.n	80114ee <HAL_SAI_InitProtocol+0x42>
 80114c8:	e008      	b.n	80114dc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	68b9      	ldr	r1, [r7, #8]
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f000 faff 	bl	8011ad4 <SAI_InitI2S>
 80114d6:	4603      	mov	r3, r0
 80114d8:	75fb      	strb	r3, [r7, #23]
      break;
 80114da:	e00b      	b.n	80114f4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	68b9      	ldr	r1, [r7, #8]
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f000 fba8 	bl	8011c38 <SAI_InitPCM>
 80114e8:	4603      	mov	r3, r0
 80114ea:	75fb      	strb	r3, [r7, #23]
      break;
 80114ec:	e002      	b.n	80114f4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80114ee:	2301      	movs	r3, #1
 80114f0:	75fb      	strb	r3, [r7, #23]
      break;
 80114f2:	bf00      	nop
  }

  if (status == HAL_OK)
 80114f4:	7dfb      	ldrb	r3, [r7, #23]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d104      	bne.n	8011504 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f000 f808 	bl	8011510 <HAL_SAI_Init>
 8011500:	4603      	mov	r3, r0
 8011502:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8011504:	7dfb      	ldrb	r3, [r7, #23]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3718      	adds	r7, #24
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
	...

08011510 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b08a      	sub	sp, #40	; 0x28
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d101      	bne.n	8011522 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 801151e:	2301      	movs	r3, #1
 8011520:	e1ce      	b.n	80118c0 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011528:	2b01      	cmp	r3, #1
 801152a:	d10e      	bne.n	801154a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4a83      	ldr	r2, [pc, #524]	; (8011740 <HAL_SAI_Init+0x230>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d107      	bne.n	8011546 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 801153a:	2b01      	cmp	r3, #1
 801153c:	d103      	bne.n	8011546 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8011542:	2b00      	cmp	r3, #0
 8011544:	d001      	beq.n	801154a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8011546:	2301      	movs	r3, #1
 8011548:	e1ba      	b.n	80118c0 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8011550:	b2db      	uxtb	r3, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	d106      	bne.n	8011564 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7f3 fd72 	bl	8005048 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 fc21 	bl	8011dac <SAI_Disable>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8011570:	2301      	movs	r3, #1
 8011572:	e1a5      	b.n	80118c0 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2202      	movs	r2, #2
 8011578:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	2b02      	cmp	r3, #2
 8011582:	d00c      	beq.n	801159e <HAL_SAI_Init+0x8e>
 8011584:	2b02      	cmp	r3, #2
 8011586:	d80d      	bhi.n	80115a4 <HAL_SAI_Init+0x94>
 8011588:	2b00      	cmp	r3, #0
 801158a:	d002      	beq.n	8011592 <HAL_SAI_Init+0x82>
 801158c:	2b01      	cmp	r3, #1
 801158e:	d003      	beq.n	8011598 <HAL_SAI_Init+0x88>
 8011590:	e008      	b.n	80115a4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8011592:	2300      	movs	r3, #0
 8011594:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8011596:	e008      	b.n	80115aa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8011598:	2310      	movs	r3, #16
 801159a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801159c:	e005      	b.n	80115aa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 801159e:	2320      	movs	r3, #32
 80115a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80115a2:	e002      	b.n	80115aa <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80115a4:	2300      	movs	r3, #0
 80115a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80115a8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	2b03      	cmp	r3, #3
 80115b0:	d81d      	bhi.n	80115ee <HAL_SAI_Init+0xde>
 80115b2:	a201      	add	r2, pc, #4	; (adr r2, 80115b8 <HAL_SAI_Init+0xa8>)
 80115b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b8:	080115c9 	.word	0x080115c9
 80115bc:	080115cf 	.word	0x080115cf
 80115c0:	080115d7 	.word	0x080115d7
 80115c4:	080115df 	.word	0x080115df
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	61fb      	str	r3, [r7, #28]
      break;
 80115cc:	e012      	b.n	80115f4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80115ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115d2:	61fb      	str	r3, [r7, #28]
      break;
 80115d4:	e00e      	b.n	80115f4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80115d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115da:	61fb      	str	r3, [r7, #28]
      break;
 80115dc:	e00a      	b.n	80115f4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80115de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	f043 0301 	orr.w	r3, r3, #1
 80115ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80115ec:	e002      	b.n	80115f4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80115ee:	2300      	movs	r3, #0
 80115f0:	61fb      	str	r3, [r7, #28]
      break;
 80115f2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4a51      	ldr	r2, [pc, #324]	; (8011740 <HAL_SAI_Init+0x230>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d004      	beq.n	8011608 <HAL_SAI_Init+0xf8>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4a50      	ldr	r2, [pc, #320]	; (8011744 <HAL_SAI_Init+0x234>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d103      	bne.n	8011610 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8011608:	4a4f      	ldr	r2, [pc, #316]	; (8011748 <HAL_SAI_Init+0x238>)
 801160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160c:	6013      	str	r3, [r2, #0]
 801160e:	e002      	b.n	8011616 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8011610:	4a4e      	ldr	r2, [pc, #312]	; (801174c <HAL_SAI_Init+0x23c>)
 8011612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011614:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6a1b      	ldr	r3, [r3, #32]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d077      	beq.n	801170e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4a47      	ldr	r2, [pc, #284]	; (8011740 <HAL_SAI_Init+0x230>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d004      	beq.n	8011632 <HAL_SAI_Init+0x122>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4a45      	ldr	r2, [pc, #276]	; (8011744 <HAL_SAI_Init+0x234>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d107      	bne.n	8011642 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8011632:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011636:	f04f 0100 	mov.w	r1, #0
 801163a:	f7fe f925 	bl	800f888 <HAL_RCCEx_GetPeriphCLKFreq>
 801163e:	61b8      	str	r0, [r7, #24]
 8011640:	e006      	b.n	8011650 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8011642:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011646:	f04f 0100 	mov.w	r1, #0
 801164a:	f7fe f91d 	bl	800f888 <HAL_RCCEx_GetPeriphCLKFreq>
 801164e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011658:	d120      	bne.n	801169c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801165e:	2b04      	cmp	r3, #4
 8011660:	d102      	bne.n	8011668 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8011662:	2340      	movs	r3, #64	; 0x40
 8011664:	613b      	str	r3, [r7, #16]
 8011666:	e00a      	b.n	801167e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801166c:	2b08      	cmp	r3, #8
 801166e:	d103      	bne.n	8011678 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8011670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011674:	613b      	str	r3, [r7, #16]
 8011676:	e002      	b.n	801167e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801167c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 801167e:	69ba      	ldr	r2, [r7, #24]
 8011680:	4613      	mov	r3, r2
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	4413      	add	r3, r2
 8011686:	005b      	lsls	r3, r3, #1
 8011688:	4619      	mov	r1, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	693a      	ldr	r2, [r7, #16]
 8011690:	fb02 f303 	mul.w	r3, r2, r3
 8011694:	fbb1 f3f3 	udiv	r3, r1, r3
 8011698:	617b      	str	r3, [r7, #20]
 801169a:	e017      	b.n	80116cc <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80116a4:	d101      	bne.n	80116aa <HAL_SAI_Init+0x19a>
 80116a6:	2302      	movs	r3, #2
 80116a8:	e000      	b.n	80116ac <HAL_SAI_Init+0x19c>
 80116aa:	2301      	movs	r3, #1
 80116ac:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80116ae:	69ba      	ldr	r2, [r7, #24]
 80116b0:	4613      	mov	r3, r2
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	4413      	add	r3, r2
 80116b6:	005b      	lsls	r3, r3, #1
 80116b8:	4619      	mov	r1, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6a1b      	ldr	r3, [r3, #32]
 80116be:	68fa      	ldr	r2, [r7, #12]
 80116c0:	fb02 f303 	mul.w	r3, r2, r3
 80116c4:	021b      	lsls	r3, r3, #8
 80116c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80116ca:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	4a20      	ldr	r2, [pc, #128]	; (8011750 <HAL_SAI_Init+0x240>)
 80116d0:	fba2 2303 	umull	r2, r3, r2, r3
 80116d4:	08da      	lsrs	r2, r3, #3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80116da:	6979      	ldr	r1, [r7, #20]
 80116dc:	4b1c      	ldr	r3, [pc, #112]	; (8011750 <HAL_SAI_Init+0x240>)
 80116de:	fba3 2301 	umull	r2, r3, r3, r1
 80116e2:	08da      	lsrs	r2, r3, #3
 80116e4:	4613      	mov	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	4413      	add	r3, r2
 80116ea:	005b      	lsls	r3, r3, #1
 80116ec:	1aca      	subs	r2, r1, r3
 80116ee:	2a08      	cmp	r2, #8
 80116f0:	d904      	bls.n	80116fc <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f6:	1c5a      	adds	r2, r3, #1
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011700:	2b04      	cmp	r3, #4
 8011702:	d104      	bne.n	801170e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011708:	085a      	lsrs	r2, r3, #1
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d003      	beq.n	801171e <HAL_SAI_Init+0x20e>
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	2b02      	cmp	r3, #2
 801171c:	d109      	bne.n	8011732 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011722:	2b01      	cmp	r3, #1
 8011724:	d101      	bne.n	801172a <HAL_SAI_Init+0x21a>
 8011726:	2300      	movs	r3, #0
 8011728:	e001      	b.n	801172e <HAL_SAI_Init+0x21e>
 801172a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801172e:	623b      	str	r3, [r7, #32]
 8011730:	e012      	b.n	8011758 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011736:	2b01      	cmp	r3, #1
 8011738:	d10c      	bne.n	8011754 <HAL_SAI_Init+0x244>
 801173a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801173e:	e00a      	b.n	8011756 <HAL_SAI_Init+0x246>
 8011740:	40015404 	.word	0x40015404
 8011744:	40015424 	.word	0x40015424
 8011748:	40015400 	.word	0x40015400
 801174c:	40015800 	.word	0x40015800
 8011750:	cccccccd 	.word	0xcccccccd
 8011754:	2300      	movs	r3, #0
 8011756:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	6819      	ldr	r1, [r3, #0]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	4b59      	ldr	r3, [pc, #356]	; (80118c8 <HAL_SAI_Init+0x3b8>)
 8011764:	400b      	ands	r3, r1
 8011766:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	6819      	ldr	r1, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011776:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801177c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011782:	431a      	orrs	r2, r3
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8011790:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	695b      	ldr	r3, [r3, #20]
 8011796:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801179c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a2:	051b      	lsls	r3, r3, #20
 80117a4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80117aa:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	430a      	orrs	r2, r1
 80117b8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	6812      	ldr	r2, [r2, #0]
 80117c4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80117c8:	f023 030f 	bic.w	r3, r3, #15
 80117cc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	6859      	ldr	r1, [r3, #4]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	69da      	ldr	r2, [r3, #28]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117dc:	431a      	orrs	r2, r3
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117e2:	431a      	orrs	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	430a      	orrs	r2, r1
 80117ea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6899      	ldr	r1, [r3, #8]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	4b35      	ldr	r3, [pc, #212]	; (80118cc <HAL_SAI_Init+0x3bc>)
 80117f8:	400b      	ands	r3, r1
 80117fa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	6899      	ldr	r1, [r3, #8]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011806:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801180c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8011812:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8011818:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801181e:	3b01      	subs	r3, #1
 8011820:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8011822:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	430a      	orrs	r2, r1
 801182a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	68d9      	ldr	r1, [r3, #12]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	f24f 0320 	movw	r3, #61472	; 0xf020
 801183a:	400b      	ands	r3, r1
 801183c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	68d9      	ldr	r1, [r3, #12]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801184c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011852:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011854:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801185a:	3b01      	subs	r3, #1
 801185c:	021b      	lsls	r3, r3, #8
 801185e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	430a      	orrs	r2, r1
 8011866:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a18      	ldr	r2, [pc, #96]	; (80118d0 <HAL_SAI_Init+0x3c0>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d119      	bne.n	80118a6 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8011872:	4b18      	ldr	r3, [pc, #96]	; (80118d4 <HAL_SAI_Init+0x3c4>)
 8011874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011876:	4a17      	ldr	r2, [pc, #92]	; (80118d4 <HAL_SAI_Init+0x3c4>)
 8011878:	f023 0301 	bic.w	r3, r3, #1
 801187c:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011884:	2b01      	cmp	r3, #1
 8011886:	d10e      	bne.n	80118a6 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011890:	3b01      	subs	r3, #1
 8011892:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8011894:	490f      	ldr	r1, [pc, #60]	; (80118d4 <HAL_SAI_Init+0x3c4>)
 8011896:	4313      	orrs	r3, r2
 8011898:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 801189a:	4b0e      	ldr	r3, [pc, #56]	; (80118d4 <HAL_SAI_Init+0x3c4>)
 801189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801189e:	4a0d      	ldr	r2, [pc, #52]	; (80118d4 <HAL_SAI_Init+0x3c4>)
 80118a0:	f043 0301 	orr.w	r3, r3, #1
 80118a4:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3728      	adds	r7, #40	; 0x28
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	f005c010 	.word	0xf005c010
 80118cc:	fff88000 	.word	0xfff88000
 80118d0:	40015404 	.word	0x40015404
 80118d4:	40015400 	.word	0x40015400

080118d8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b086      	sub	sp, #24
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	4613      	mov	r3, r2
 80118e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <HAL_SAI_Receive_DMA+0x1a>
 80118ec:	88fb      	ldrh	r3, [r7, #6]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80118f2:	2301      	movs	r3, #1
 80118f4:	e0c6      	b.n	8011a84 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	2b01      	cmp	r3, #1
 8011900:	f040 80bf 	bne.w	8011a82 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 801190a:	2b01      	cmp	r3, #1
 801190c:	d101      	bne.n	8011912 <HAL_SAI_Receive_DMA+0x3a>
 801190e:	2302      	movs	r3, #2
 8011910:	e0b8      	b.n	8011a84 <HAL_SAI_Receive_DMA+0x1ac>
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2201      	movs	r2, #1
 8011916:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	68ba      	ldr	r2, [r7, #8]
 801191e:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	88fa      	ldrh	r2, [r7, #6]
 8011924:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	88fa      	ldrh	r2, [r7, #6]
 801192c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2200      	movs	r2, #0
 8011934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2222      	movs	r2, #34	; 0x22
 801193c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011946:	4a51      	ldr	r2, [pc, #324]	; (8011a8c <HAL_SAI_Receive_DMA+0x1b4>)
 8011948:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011950:	4a4f      	ldr	r2, [pc, #316]	; (8011a90 <HAL_SAI_Receive_DMA+0x1b8>)
 8011952:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801195a:	4a4e      	ldr	r2, [pc, #312]	; (8011a94 <HAL_SAI_Receive_DMA+0x1bc>)
 801195c:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011964:	2200      	movs	r2, #0
 8011966:	66da      	str	r2, [r3, #108]	; 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801196c:	2b40      	cmp	r3, #64	; 0x40
 801196e:	d106      	bne.n	801197e <HAL_SAI_Receive_DMA+0xa6>
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011974:	2b00      	cmp	r3, #0
 8011976:	d102      	bne.n	801197e <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 8011978:	88fb      	ldrh	r3, [r7, #6]
 801197a:	613b      	str	r3, [r7, #16]
 801197c:	e00a      	b.n	8011994 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011982:	2b80      	cmp	r3, #128	; 0x80
 8011984:	d803      	bhi.n	801198e <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 8011986:	88fb      	ldrh	r3, [r7, #6]
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	613b      	str	r3, [r7, #16]
 801198c:	e002      	b.n	8011994 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 801198e:	88fb      	ldrh	r3, [r7, #6]
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801199a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d02d      	beq.n	8011a00 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d021      	beq.n	80119f4 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	693a      	ldr	r2, [r7, #16]
 80119bc:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f103 021c 	add.w	r2, r3, #28
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f7 fe23 	bl	8009634 <HAL_DMAEx_List_Start_IT>
 80119ee:	4603      	mov	r3, r0
 80119f0:	75fb      	strb	r3, [r7, #23]
 80119f2:	e014      	b.n	8011a1e <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        return  HAL_ERROR;
 80119fc:	2301      	movs	r3, #1
 80119fe:	e041      	b.n	8011a84 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	331c      	adds	r3, #28
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a12:	461a      	mov	r2, r3
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	f7f6 fe7b 	bl	8008710 <HAL_DMA_Start_IT>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 8011a1e:	7dfb      	ldrb	r3, [r7, #23]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d005      	beq.n	8011a30 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2200      	movs	r2, #0
 8011a28:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e029      	b.n	8011a84 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8011a30:	2100      	movs	r1, #0
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f000 f982 	bl	8011d3c <SAI_InterruptFlag>
 8011a38:	4601      	mov	r1, r0
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	691a      	ldr	r2, [r3, #16]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	430a      	orrs	r2, r1
 8011a46:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011a56:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d107      	bne.n	8011a76 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011a74:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	e000      	b.n	8011a84 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 8011a82:	2302      	movs	r3, #2
  }
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3718      	adds	r7, #24
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	08011e7f 	.word	0x08011e7f
 8011a90:	08011e21 	.word	0x08011e21
 8011a94:	08011e9b 	.word	0x08011e9b

08011a98 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b083      	sub	sp, #12
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8011aa0:	bf00      	nop
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr

08011aac <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011ab4:	bf00      	nop
 8011ab6:	370c      	adds	r7, #12
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8011ac8:	bf00      	nop
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b087      	sub	sp, #28
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2200      	movs	r2, #0
 8011af0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d003      	beq.n	8011b02 <SAI_InitI2S+0x2e>
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	2b02      	cmp	r3, #2
 8011b00:	d103      	bne.n	8011b0a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	2200      	movs	r2, #0
 8011b06:	651a      	str	r2, [r3, #80]	; 0x50
 8011b08:	e002      	b.n	8011b10 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011b16:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b1e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2200      	movs	r2, #0
 8011b24:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	683a      	ldr	r2, [r7, #0]
 8011b2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	f003 0301 	and.w	r3, r3, #1
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d001      	beq.n	8011b3a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	e077      	b.n	8011c2a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d107      	bne.n	8011b50 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2200      	movs	r2, #0
 8011b44:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8011b4c:	665a      	str	r2, [r3, #100]	; 0x64
 8011b4e:	e006      	b.n	8011b5e <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011b56:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2b03      	cmp	r3, #3
 8011b62:	d84f      	bhi.n	8011c04 <SAI_InitI2S+0x130>
 8011b64:	a201      	add	r2, pc, #4	; (adr r2, 8011b6c <SAI_InitI2S+0x98>)
 8011b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b6a:	bf00      	nop
 8011b6c:	08011b7d 	.word	0x08011b7d
 8011b70:	08011b9f 	.word	0x08011b9f
 8011b74:	08011bc1 	.word	0x08011bc1
 8011b78:	08011be3 	.word	0x08011be3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2280      	movs	r2, #128	; 0x80
 8011b80:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	085b      	lsrs	r3, r3, #1
 8011b86:	015a      	lsls	r2, r3, #5
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	085b      	lsrs	r3, r3, #1
 8011b90:	011a      	lsls	r2, r3, #4
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2240      	movs	r2, #64	; 0x40
 8011b9a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011b9c:	e035      	b.n	8011c0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2280      	movs	r2, #128	; 0x80
 8011ba2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	085b      	lsrs	r3, r3, #1
 8011ba8:	019a      	lsls	r2, r3, #6
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	085b      	lsrs	r3, r3, #1
 8011bb2:	015a      	lsls	r2, r3, #5
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2280      	movs	r2, #128	; 0x80
 8011bbc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011bbe:	e024      	b.n	8011c0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	22c0      	movs	r2, #192	; 0xc0
 8011bc4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	085b      	lsrs	r3, r3, #1
 8011bca:	019a      	lsls	r2, r3, #6
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	085b      	lsrs	r3, r3, #1
 8011bd4:	015a      	lsls	r2, r3, #5
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2280      	movs	r2, #128	; 0x80
 8011bde:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011be0:	e013      	b.n	8011c0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	22e0      	movs	r2, #224	; 0xe0
 8011be6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	085b      	lsrs	r3, r3, #1
 8011bec:	019a      	lsls	r2, r3, #6
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	085b      	lsrs	r3, r3, #1
 8011bf6:	015a      	lsls	r2, r3, #5
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2280      	movs	r2, #128	; 0x80
 8011c00:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011c02:	e002      	b.n	8011c0a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8011c04:	2301      	movs	r3, #1
 8011c06:	75fb      	strb	r3, [r7, #23]
      break;
 8011c08:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	2b02      	cmp	r3, #2
 8011c0e:	d10b      	bne.n	8011c28 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d102      	bne.n	8011c1c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2210      	movs	r2, #16
 8011c1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d102      	bne.n	8011c28 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2208      	movs	r2, #8
 8011c26:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8011c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	371c      	adds	r7, #28
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop

08011c38 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b087      	sub	sp, #28
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2200      	movs	r2, #0
 8011c54:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d003      	beq.n	8011c66 <SAI_InitPCM+0x2e>
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	2b02      	cmp	r3, #2
 8011c64:	d103      	bne.n	8011c6e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	651a      	str	r2, [r3, #80]	; 0x50
 8011c6c:	e002      	b.n	8011c74 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	2200      	movs	r2, #0
 8011c72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2200      	movs	r2, #0
 8011c78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011c80:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8011c88:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c9c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b04      	cmp	r3, #4
 8011ca2:	d103      	bne.n	8011cac <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	659a      	str	r2, [r3, #88]	; 0x58
 8011caa:	e002      	b.n	8011cb2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	220d      	movs	r2, #13
 8011cb0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b03      	cmp	r3, #3
 8011cb6:	d837      	bhi.n	8011d28 <SAI_InitPCM+0xf0>
 8011cb8:	a201      	add	r2, pc, #4	; (adr r2, 8011cc0 <SAI_InitPCM+0x88>)
 8011cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cbe:	bf00      	nop
 8011cc0:	08011cd1 	.word	0x08011cd1
 8011cc4:	08011ce7 	.word	0x08011ce7
 8011cc8:	08011cfd 	.word	0x08011cfd
 8011ccc:	08011d13 	.word	0x08011d13
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2280      	movs	r2, #128	; 0x80
 8011cd4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	011a      	lsls	r2, r3, #4
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2240      	movs	r2, #64	; 0x40
 8011ce2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011ce4:	e023      	b.n	8011d2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2280      	movs	r2, #128	; 0x80
 8011cea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	015a      	lsls	r2, r3, #5
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2280      	movs	r2, #128	; 0x80
 8011cf8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011cfa:	e018      	b.n	8011d2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	22c0      	movs	r2, #192	; 0xc0
 8011d00:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	015a      	lsls	r2, r3, #5
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2280      	movs	r2, #128	; 0x80
 8011d0e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011d10:	e00d      	b.n	8011d2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	22e0      	movs	r2, #224	; 0xe0
 8011d16:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	015a      	lsls	r2, r3, #5
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2280      	movs	r2, #128	; 0x80
 8011d24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8011d26:	e002      	b.n	8011d2e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8011d28:	2301      	movs	r3, #1
 8011d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8011d2c:	bf00      	nop
  }

  return status;
 8011d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	371c      	adds	r7, #28
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	460b      	mov	r3, r1
 8011d46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8011d4c:	78fb      	ldrb	r3, [r7, #3]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d103      	bne.n	8011d5a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f043 0308 	orr.w	r3, r3, #8
 8011d58:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d5e:	2b08      	cmp	r3, #8
 8011d60:	d10b      	bne.n	8011d7a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	d003      	beq.n	8011d72 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d103      	bne.n	8011d7a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f043 0310 	orr.w	r3, r3, #16
 8011d78:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	2b03      	cmp	r3, #3
 8011d80:	d003      	beq.n	8011d8a <SAI_InterruptFlag+0x4e>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	d104      	bne.n	8011d94 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011d90:	60fb      	str	r3, [r7, #12]
 8011d92:	e003      	b.n	8011d9c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f043 0304 	orr.w	r3, r3, #4
 8011d9a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3714      	adds	r7, #20
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr
	...

08011dac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011db4:	4b18      	ldr	r3, [pc, #96]	; (8011e18 <SAI_Disable+0x6c>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4a18      	ldr	r2, [pc, #96]	; (8011e1c <SAI_Disable+0x70>)
 8011dba:	fba2 2303 	umull	r2, r3, r2, r3
 8011dbe:	0b1b      	lsrs	r3, r3, #12
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011dd6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d10a      	bne.n	8011df4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8011dee:	2303      	movs	r3, #3
 8011df0:	72fb      	strb	r3, [r7, #11]
      break;
 8011df2:	e009      	b.n	8011e08 <SAI_Disable+0x5c>
    }
    count--;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	3b01      	subs	r3, #1
 8011df8:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d1e7      	bne.n	8011dd8 <SAI_Disable+0x2c>

  return status;
 8011e08:	7afb      	ldrb	r3, [r7, #11]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3714      	adds	r7, #20
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	2000018c 	.word	0x2000018c
 8011e1c:	95cbec1b 	.word	0x95cbec1b

08011e20 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e2c:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e32:	2b81      	cmp	r3, #129	; 0x81
 8011e34:	d01c      	beq.n	8011e70 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011e44:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8011e4e:	2100      	movs	r1, #0
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7ff ff73 	bl	8011d3c <SAI_InterruptFlag>
 8011e56:	4603      	mov	r3, r0
 8011e58:	43d9      	mvns	r1, r3
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	691a      	ldr	r2, [r3, #16]
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	400a      	ands	r2, r1
 8011e66:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f7ff fe11 	bl	8011a98 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8011e76:	bf00      	nop
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b084      	sub	sp, #16
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e8a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f7ff fe0d 	bl	8011aac <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8011e92:	bf00      	nop
 8011e94:	3710      	adds	r7, #16
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b084      	sub	sp, #16
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ea6:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011eae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011ec6:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f7ff ff6f 	bl	8011dac <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2200      	movs	r2, #0
 8011eda:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8011ede:	68f8      	ldr	r0, [r7, #12]
 8011ee0:	f7ff fdee 	bl	8011ac0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8011ee4:	bf00      	nop
 8011ee6:	3710      	adds	r7, #16
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d101      	bne.n	8011efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011efa:	2301      	movs	r3, #1
 8011efc:	e049      	b.n	8011f92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d106      	bne.n	8011f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7f2 ff34 	bl	8004d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2202      	movs	r2, #2
 8011f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3304      	adds	r3, #4
 8011f28:	4619      	mov	r1, r3
 8011f2a:	4610      	mov	r0, r2
 8011f2c:	f000 f94a 	bl	80121c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2201      	movs	r2, #1
 8011f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2201      	movs	r2, #1
 8011f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2201      	movs	r2, #1
 8011f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2201      	movs	r2, #1
 8011f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2201      	movs	r2, #1
 8011f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2201      	movs	r2, #1
 8011f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011f90:	2300      	movs	r3, #0
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3708      	adds	r7, #8
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
	...

08011f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	d101      	bne.n	8011fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011fb6:	2302      	movs	r3, #2
 8011fb8:	e0ff      	b.n	80121ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2b14      	cmp	r3, #20
 8011fc6:	f200 80f0 	bhi.w	80121aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011fca:	a201      	add	r2, pc, #4	; (adr r2, 8011fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd0:	08012025 	.word	0x08012025
 8011fd4:	080121ab 	.word	0x080121ab
 8011fd8:	080121ab 	.word	0x080121ab
 8011fdc:	080121ab 	.word	0x080121ab
 8011fe0:	08012065 	.word	0x08012065
 8011fe4:	080121ab 	.word	0x080121ab
 8011fe8:	080121ab 	.word	0x080121ab
 8011fec:	080121ab 	.word	0x080121ab
 8011ff0:	080120a7 	.word	0x080120a7
 8011ff4:	080121ab 	.word	0x080121ab
 8011ff8:	080121ab 	.word	0x080121ab
 8011ffc:	080121ab 	.word	0x080121ab
 8012000:	080120e7 	.word	0x080120e7
 8012004:	080121ab 	.word	0x080121ab
 8012008:	080121ab 	.word	0x080121ab
 801200c:	080121ab 	.word	0x080121ab
 8012010:	08012129 	.word	0x08012129
 8012014:	080121ab 	.word	0x080121ab
 8012018:	080121ab 	.word	0x080121ab
 801201c:	080121ab 	.word	0x080121ab
 8012020:	08012169 	.word	0x08012169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	68b9      	ldr	r1, [r7, #8]
 801202a:	4618      	mov	r0, r3
 801202c:	f000 f9d0 	bl	80123d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	699a      	ldr	r2, [r3, #24]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f042 0208 	orr.w	r2, r2, #8
 801203e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	699a      	ldr	r2, [r3, #24]
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f022 0204 	bic.w	r2, r2, #4
 801204e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	6999      	ldr	r1, [r3, #24]
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	691a      	ldr	r2, [r3, #16]
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	430a      	orrs	r2, r1
 8012060:	619a      	str	r2, [r3, #24]
      break;
 8012062:	e0a5      	b.n	80121b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	68b9      	ldr	r1, [r7, #8]
 801206a:	4618      	mov	r0, r3
 801206c:	f000 fa72 	bl	8012554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	699a      	ldr	r2, [r3, #24]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801207e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	699a      	ldr	r2, [r3, #24]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801208e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	6999      	ldr	r1, [r3, #24]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	021a      	lsls	r2, r3, #8
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	430a      	orrs	r2, r1
 80120a2:	619a      	str	r2, [r3, #24]
      break;
 80120a4:	e084      	b.n	80121b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68b9      	ldr	r1, [r7, #8]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f000 fb01 	bl	80126b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	69da      	ldr	r2, [r3, #28]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f042 0208 	orr.w	r2, r2, #8
 80120c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	69da      	ldr	r2, [r3, #28]
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f022 0204 	bic.w	r2, r2, #4
 80120d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	69d9      	ldr	r1, [r3, #28]
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	691a      	ldr	r2, [r3, #16]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	430a      	orrs	r2, r1
 80120e2:	61da      	str	r2, [r3, #28]
      break;
 80120e4:	e064      	b.n	80121b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	4618      	mov	r0, r3
 80120ee:	f000 fb8f 	bl	8012810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	69da      	ldr	r2, [r3, #28]
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	69da      	ldr	r2, [r3, #28]
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	69d9      	ldr	r1, [r3, #28]
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	691b      	ldr	r3, [r3, #16]
 801211c:	021a      	lsls	r2, r3, #8
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	430a      	orrs	r2, r1
 8012124:	61da      	str	r2, [r3, #28]
      break;
 8012126:	e043      	b.n	80121b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	68b9      	ldr	r1, [r7, #8]
 801212e:	4618      	mov	r0, r3
 8012130:	f000 fc1e 	bl	8012970 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	f042 0208 	orr.w	r2, r2, #8
 8012142:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f022 0204 	bic.w	r2, r2, #4
 8012152:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	691a      	ldr	r2, [r3, #16]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	430a      	orrs	r2, r1
 8012164:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8012166:	e023      	b.n	80121b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	68b9      	ldr	r1, [r7, #8]
 801216e:	4618      	mov	r0, r3
 8012170:	f000 fc80 	bl	8012a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012182:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012192:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	021a      	lsls	r2, r3, #8
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	430a      	orrs	r2, r1
 80121a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80121a8:	e002      	b.n	80121b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80121aa:	2301      	movs	r3, #1
 80121ac:	75fb      	strb	r3, [r7, #23]
      break;
 80121ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2200      	movs	r2, #0
 80121b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80121b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3718      	adds	r7, #24
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop

080121c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	4a6e      	ldr	r2, [pc, #440]	; (8012390 <TIM_Base_SetConfig+0x1cc>)
 80121d8:	4293      	cmp	r3, r2
 80121da:	d02b      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	4a6d      	ldr	r2, [pc, #436]	; (8012394 <TIM_Base_SetConfig+0x1d0>)
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d027      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121ea:	d023      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80121f2:	d01f      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4a68      	ldr	r2, [pc, #416]	; (8012398 <TIM_Base_SetConfig+0x1d4>)
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d01b      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	4a67      	ldr	r2, [pc, #412]	; (801239c <TIM_Base_SetConfig+0x1d8>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d017      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	4a66      	ldr	r2, [pc, #408]	; (80123a0 <TIM_Base_SetConfig+0x1dc>)
 8012208:	4293      	cmp	r3, r2
 801220a:	d013      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	4a65      	ldr	r2, [pc, #404]	; (80123a4 <TIM_Base_SetConfig+0x1e0>)
 8012210:	4293      	cmp	r3, r2
 8012212:	d00f      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	4a64      	ldr	r2, [pc, #400]	; (80123a8 <TIM_Base_SetConfig+0x1e4>)
 8012218:	4293      	cmp	r3, r2
 801221a:	d00b      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	4a63      	ldr	r2, [pc, #396]	; (80123ac <TIM_Base_SetConfig+0x1e8>)
 8012220:	4293      	cmp	r3, r2
 8012222:	d007      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	4a62      	ldr	r2, [pc, #392]	; (80123b0 <TIM_Base_SetConfig+0x1ec>)
 8012228:	4293      	cmp	r3, r2
 801222a:	d003      	beq.n	8012234 <TIM_Base_SetConfig+0x70>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	4a61      	ldr	r2, [pc, #388]	; (80123b4 <TIM_Base_SetConfig+0x1f0>)
 8012230:	4293      	cmp	r3, r2
 8012232:	d108      	bne.n	8012246 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801223a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	68fa      	ldr	r2, [r7, #12]
 8012242:	4313      	orrs	r3, r2
 8012244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	4a51      	ldr	r2, [pc, #324]	; (8012390 <TIM_Base_SetConfig+0x1cc>)
 801224a:	4293      	cmp	r3, r2
 801224c:	d043      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	4a50      	ldr	r2, [pc, #320]	; (8012394 <TIM_Base_SetConfig+0x1d0>)
 8012252:	4293      	cmp	r3, r2
 8012254:	d03f      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801225c:	d03b      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012264:	d037      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4a4b      	ldr	r2, [pc, #300]	; (8012398 <TIM_Base_SetConfig+0x1d4>)
 801226a:	4293      	cmp	r3, r2
 801226c:	d033      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4a4a      	ldr	r2, [pc, #296]	; (801239c <TIM_Base_SetConfig+0x1d8>)
 8012272:	4293      	cmp	r3, r2
 8012274:	d02f      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4a49      	ldr	r2, [pc, #292]	; (80123a0 <TIM_Base_SetConfig+0x1dc>)
 801227a:	4293      	cmp	r3, r2
 801227c:	d02b      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4a48      	ldr	r2, [pc, #288]	; (80123a4 <TIM_Base_SetConfig+0x1e0>)
 8012282:	4293      	cmp	r3, r2
 8012284:	d027      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	4a47      	ldr	r2, [pc, #284]	; (80123a8 <TIM_Base_SetConfig+0x1e4>)
 801228a:	4293      	cmp	r3, r2
 801228c:	d023      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	4a46      	ldr	r2, [pc, #280]	; (80123ac <TIM_Base_SetConfig+0x1e8>)
 8012292:	4293      	cmp	r3, r2
 8012294:	d01f      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	4a45      	ldr	r2, [pc, #276]	; (80123b0 <TIM_Base_SetConfig+0x1ec>)
 801229a:	4293      	cmp	r3, r2
 801229c:	d01b      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	4a44      	ldr	r2, [pc, #272]	; (80123b4 <TIM_Base_SetConfig+0x1f0>)
 80122a2:	4293      	cmp	r3, r2
 80122a4:	d017      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4a43      	ldr	r2, [pc, #268]	; (80123b8 <TIM_Base_SetConfig+0x1f4>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d013      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4a42      	ldr	r2, [pc, #264]	; (80123bc <TIM_Base_SetConfig+0x1f8>)
 80122b2:	4293      	cmp	r3, r2
 80122b4:	d00f      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4a41      	ldr	r2, [pc, #260]	; (80123c0 <TIM_Base_SetConfig+0x1fc>)
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d00b      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a40      	ldr	r2, [pc, #256]	; (80123c4 <TIM_Base_SetConfig+0x200>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d007      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a3f      	ldr	r2, [pc, #252]	; (80123c8 <TIM_Base_SetConfig+0x204>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d003      	beq.n	80122d6 <TIM_Base_SetConfig+0x112>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a3e      	ldr	r2, [pc, #248]	; (80123cc <TIM_Base_SetConfig+0x208>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d108      	bne.n	80122e8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	4313      	orrs	r3, r2
 80122e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	695b      	ldr	r3, [r3, #20]
 80122f2:	4313      	orrs	r3, r2
 80122f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	68fa      	ldr	r2, [r7, #12]
 80122fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	689a      	ldr	r2, [r3, #8]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4a20      	ldr	r2, [pc, #128]	; (8012390 <TIM_Base_SetConfig+0x1cc>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d023      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	4a1f      	ldr	r2, [pc, #124]	; (8012394 <TIM_Base_SetConfig+0x1d0>)
 8012318:	4293      	cmp	r3, r2
 801231a:	d01f      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4a24      	ldr	r2, [pc, #144]	; (80123b0 <TIM_Base_SetConfig+0x1ec>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d01b      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	4a23      	ldr	r2, [pc, #140]	; (80123b4 <TIM_Base_SetConfig+0x1f0>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d017      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	4a22      	ldr	r2, [pc, #136]	; (80123b8 <TIM_Base_SetConfig+0x1f4>)
 8012330:	4293      	cmp	r3, r2
 8012332:	d013      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	4a21      	ldr	r2, [pc, #132]	; (80123bc <TIM_Base_SetConfig+0x1f8>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d00f      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4a20      	ldr	r2, [pc, #128]	; (80123c0 <TIM_Base_SetConfig+0x1fc>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d00b      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a1f      	ldr	r2, [pc, #124]	; (80123c4 <TIM_Base_SetConfig+0x200>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d007      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	4a1e      	ldr	r2, [pc, #120]	; (80123c8 <TIM_Base_SetConfig+0x204>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d003      	beq.n	801235c <TIM_Base_SetConfig+0x198>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	4a1d      	ldr	r2, [pc, #116]	; (80123cc <TIM_Base_SetConfig+0x208>)
 8012358:	4293      	cmp	r3, r2
 801235a:	d103      	bne.n	8012364 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	691a      	ldr	r2, [r3, #16]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2201      	movs	r2, #1
 8012368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	691b      	ldr	r3, [r3, #16]
 801236e:	f003 0301 	and.w	r3, r3, #1
 8012372:	2b01      	cmp	r3, #1
 8012374:	d105      	bne.n	8012382 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	f023 0201 	bic.w	r2, r3, #1
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	611a      	str	r2, [r3, #16]
  }
}
 8012382:	bf00      	nop
 8012384:	3714      	adds	r7, #20
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop
 8012390:	40012c00 	.word	0x40012c00
 8012394:	50012c00 	.word	0x50012c00
 8012398:	40000400 	.word	0x40000400
 801239c:	50000400 	.word	0x50000400
 80123a0:	40000800 	.word	0x40000800
 80123a4:	50000800 	.word	0x50000800
 80123a8:	40000c00 	.word	0x40000c00
 80123ac:	50000c00 	.word	0x50000c00
 80123b0:	40013400 	.word	0x40013400
 80123b4:	50013400 	.word	0x50013400
 80123b8:	40014000 	.word	0x40014000
 80123bc:	50014000 	.word	0x50014000
 80123c0:	40014400 	.word	0x40014400
 80123c4:	50014400 	.word	0x50014400
 80123c8:	40014800 	.word	0x40014800
 80123cc:	50014800 	.word	0x50014800

080123d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b087      	sub	sp, #28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6a1b      	ldr	r3, [r3, #32]
 80123de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a1b      	ldr	r3, [r3, #32]
 80123e4:	f023 0201 	bic.w	r2, r3, #1
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	699b      	ldr	r3, [r3, #24]
 80123f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80123fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f023 0303 	bic.w	r3, r3, #3
 801240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	68fa      	ldr	r2, [r7, #12]
 8012412:	4313      	orrs	r3, r2
 8012414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	f023 0302 	bic.w	r3, r3, #2
 801241c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	697a      	ldr	r2, [r7, #20]
 8012424:	4313      	orrs	r3, r2
 8012426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	4a40      	ldr	r2, [pc, #256]	; (801252c <TIM_OC1_SetConfig+0x15c>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d023      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4a3f      	ldr	r2, [pc, #252]	; (8012530 <TIM_OC1_SetConfig+0x160>)
 8012434:	4293      	cmp	r3, r2
 8012436:	d01f      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	4a3e      	ldr	r2, [pc, #248]	; (8012534 <TIM_OC1_SetConfig+0x164>)
 801243c:	4293      	cmp	r3, r2
 801243e:	d01b      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4a3d      	ldr	r2, [pc, #244]	; (8012538 <TIM_OC1_SetConfig+0x168>)
 8012444:	4293      	cmp	r3, r2
 8012446:	d017      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a3c      	ldr	r2, [pc, #240]	; (801253c <TIM_OC1_SetConfig+0x16c>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d013      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4a3b      	ldr	r2, [pc, #236]	; (8012540 <TIM_OC1_SetConfig+0x170>)
 8012454:	4293      	cmp	r3, r2
 8012456:	d00f      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4a3a      	ldr	r2, [pc, #232]	; (8012544 <TIM_OC1_SetConfig+0x174>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d00b      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4a39      	ldr	r2, [pc, #228]	; (8012548 <TIM_OC1_SetConfig+0x178>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d007      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	4a38      	ldr	r2, [pc, #224]	; (801254c <TIM_OC1_SetConfig+0x17c>)
 801246c:	4293      	cmp	r3, r2
 801246e:	d003      	beq.n	8012478 <TIM_OC1_SetConfig+0xa8>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	4a37      	ldr	r2, [pc, #220]	; (8012550 <TIM_OC1_SetConfig+0x180>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d10c      	bne.n	8012492 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	f023 0308 	bic.w	r3, r3, #8
 801247e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	697a      	ldr	r2, [r7, #20]
 8012486:	4313      	orrs	r3, r2
 8012488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	f023 0304 	bic.w	r3, r3, #4
 8012490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4a25      	ldr	r2, [pc, #148]	; (801252c <TIM_OC1_SetConfig+0x15c>)
 8012496:	4293      	cmp	r3, r2
 8012498:	d023      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4a24      	ldr	r2, [pc, #144]	; (8012530 <TIM_OC1_SetConfig+0x160>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d01f      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4a23      	ldr	r2, [pc, #140]	; (8012534 <TIM_OC1_SetConfig+0x164>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d01b      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a22      	ldr	r2, [pc, #136]	; (8012538 <TIM_OC1_SetConfig+0x168>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d017      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a21      	ldr	r2, [pc, #132]	; (801253c <TIM_OC1_SetConfig+0x16c>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d013      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a20      	ldr	r2, [pc, #128]	; (8012540 <TIM_OC1_SetConfig+0x170>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d00f      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a1f      	ldr	r2, [pc, #124]	; (8012544 <TIM_OC1_SetConfig+0x174>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d00b      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a1e      	ldr	r2, [pc, #120]	; (8012548 <TIM_OC1_SetConfig+0x178>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d007      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a1d      	ldr	r2, [pc, #116]	; (801254c <TIM_OC1_SetConfig+0x17c>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d003      	beq.n	80124e2 <TIM_OC1_SetConfig+0x112>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4a1c      	ldr	r2, [pc, #112]	; (8012550 <TIM_OC1_SetConfig+0x180>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d111      	bne.n	8012506 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80124f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	695b      	ldr	r3, [r3, #20]
 80124f6:	693a      	ldr	r2, [r7, #16]
 80124f8:	4313      	orrs	r3, r2
 80124fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	699b      	ldr	r3, [r3, #24]
 8012500:	693a      	ldr	r2, [r7, #16]
 8012502:	4313      	orrs	r3, r2
 8012504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	693a      	ldr	r2, [r7, #16]
 801250a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	68fa      	ldr	r2, [r7, #12]
 8012510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	685a      	ldr	r2, [r3, #4]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	697a      	ldr	r2, [r7, #20]
 801251e:	621a      	str	r2, [r3, #32]
}
 8012520:	bf00      	nop
 8012522:	371c      	adds	r7, #28
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr
 801252c:	40012c00 	.word	0x40012c00
 8012530:	50012c00 	.word	0x50012c00
 8012534:	40013400 	.word	0x40013400
 8012538:	50013400 	.word	0x50013400
 801253c:	40014000 	.word	0x40014000
 8012540:	50014000 	.word	0x50014000
 8012544:	40014400 	.word	0x40014400
 8012548:	50014400 	.word	0x50014400
 801254c:	40014800 	.word	0x40014800
 8012550:	50014800 	.word	0x50014800

08012554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012554:	b480      	push	{r7}
 8012556:	b087      	sub	sp, #28
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6a1b      	ldr	r3, [r3, #32]
 8012568:	f023 0210 	bic.w	r2, r3, #16
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	699b      	ldr	r3, [r3, #24]
 801257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801258e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	021b      	lsls	r3, r3, #8
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	4313      	orrs	r3, r2
 801259a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	f023 0320 	bic.w	r3, r3, #32
 80125a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	011b      	lsls	r3, r3, #4
 80125aa:	697a      	ldr	r2, [r7, #20]
 80125ac:	4313      	orrs	r3, r2
 80125ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4a36      	ldr	r2, [pc, #216]	; (801268c <TIM_OC2_SetConfig+0x138>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d00b      	beq.n	80125d0 <TIM_OC2_SetConfig+0x7c>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	4a35      	ldr	r2, [pc, #212]	; (8012690 <TIM_OC2_SetConfig+0x13c>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d007      	beq.n	80125d0 <TIM_OC2_SetConfig+0x7c>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	4a34      	ldr	r2, [pc, #208]	; (8012694 <TIM_OC2_SetConfig+0x140>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d003      	beq.n	80125d0 <TIM_OC2_SetConfig+0x7c>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	4a33      	ldr	r2, [pc, #204]	; (8012698 <TIM_OC2_SetConfig+0x144>)
 80125cc:	4293      	cmp	r3, r2
 80125ce:	d10d      	bne.n	80125ec <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80125d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	011b      	lsls	r3, r3, #4
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	4313      	orrs	r3, r2
 80125e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4a27      	ldr	r2, [pc, #156]	; (801268c <TIM_OC2_SetConfig+0x138>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d023      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	4a26      	ldr	r2, [pc, #152]	; (8012690 <TIM_OC2_SetConfig+0x13c>)
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d01f      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	4a25      	ldr	r2, [pc, #148]	; (8012694 <TIM_OC2_SetConfig+0x140>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d01b      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	4a24      	ldr	r2, [pc, #144]	; (8012698 <TIM_OC2_SetConfig+0x144>)
 8012608:	4293      	cmp	r3, r2
 801260a:	d017      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	4a23      	ldr	r2, [pc, #140]	; (801269c <TIM_OC2_SetConfig+0x148>)
 8012610:	4293      	cmp	r3, r2
 8012612:	d013      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	4a22      	ldr	r2, [pc, #136]	; (80126a0 <TIM_OC2_SetConfig+0x14c>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d00f      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4a21      	ldr	r2, [pc, #132]	; (80126a4 <TIM_OC2_SetConfig+0x150>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d00b      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4a20      	ldr	r2, [pc, #128]	; (80126a8 <TIM_OC2_SetConfig+0x154>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d007      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	4a1f      	ldr	r2, [pc, #124]	; (80126ac <TIM_OC2_SetConfig+0x158>)
 8012630:	4293      	cmp	r3, r2
 8012632:	d003      	beq.n	801263c <TIM_OC2_SetConfig+0xe8>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4a1e      	ldr	r2, [pc, #120]	; (80126b0 <TIM_OC2_SetConfig+0x15c>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d113      	bne.n	8012664 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801264a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	695b      	ldr	r3, [r3, #20]
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	693a      	ldr	r2, [r7, #16]
 8012654:	4313      	orrs	r3, r2
 8012656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	699b      	ldr	r3, [r3, #24]
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	693a      	ldr	r2, [r7, #16]
 8012660:	4313      	orrs	r3, r2
 8012662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	693a      	ldr	r2, [r7, #16]
 8012668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	685a      	ldr	r2, [r3, #4]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	697a      	ldr	r2, [r7, #20]
 801267c:	621a      	str	r2, [r3, #32]
}
 801267e:	bf00      	nop
 8012680:	371c      	adds	r7, #28
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	40012c00 	.word	0x40012c00
 8012690:	50012c00 	.word	0x50012c00
 8012694:	40013400 	.word	0x40013400
 8012698:	50013400 	.word	0x50013400
 801269c:	40014000 	.word	0x40014000
 80126a0:	50014000 	.word	0x50014000
 80126a4:	40014400 	.word	0x40014400
 80126a8:	50014400 	.word	0x50014400
 80126ac:	40014800 	.word	0x40014800
 80126b0:	50014800 	.word	0x50014800

080126b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b087      	sub	sp, #28
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6a1b      	ldr	r3, [r3, #32]
 80126c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6a1b      	ldr	r3, [r3, #32]
 80126c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	69db      	ldr	r3, [r3, #28]
 80126da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80126e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f023 0303 	bic.w	r3, r3, #3
 80126ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	4313      	orrs	r3, r2
 80126f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	689b      	ldr	r3, [r3, #8]
 8012706:	021b      	lsls	r3, r3, #8
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	4313      	orrs	r3, r2
 801270c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4a35      	ldr	r2, [pc, #212]	; (80127e8 <TIM_OC3_SetConfig+0x134>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d00b      	beq.n	801272e <TIM_OC3_SetConfig+0x7a>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4a34      	ldr	r2, [pc, #208]	; (80127ec <TIM_OC3_SetConfig+0x138>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d007      	beq.n	801272e <TIM_OC3_SetConfig+0x7a>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	4a33      	ldr	r2, [pc, #204]	; (80127f0 <TIM_OC3_SetConfig+0x13c>)
 8012722:	4293      	cmp	r3, r2
 8012724:	d003      	beq.n	801272e <TIM_OC3_SetConfig+0x7a>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4a32      	ldr	r2, [pc, #200]	; (80127f4 <TIM_OC3_SetConfig+0x140>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d10d      	bne.n	801274a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	021b      	lsls	r3, r3, #8
 801273c:	697a      	ldr	r2, [r7, #20]
 801273e:	4313      	orrs	r3, r2
 8012740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4a26      	ldr	r2, [pc, #152]	; (80127e8 <TIM_OC3_SetConfig+0x134>)
 801274e:	4293      	cmp	r3, r2
 8012750:	d023      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a25      	ldr	r2, [pc, #148]	; (80127ec <TIM_OC3_SetConfig+0x138>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d01f      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	4a24      	ldr	r2, [pc, #144]	; (80127f0 <TIM_OC3_SetConfig+0x13c>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d01b      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4a23      	ldr	r2, [pc, #140]	; (80127f4 <TIM_OC3_SetConfig+0x140>)
 8012766:	4293      	cmp	r3, r2
 8012768:	d017      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4a22      	ldr	r2, [pc, #136]	; (80127f8 <TIM_OC3_SetConfig+0x144>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d013      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4a21      	ldr	r2, [pc, #132]	; (80127fc <TIM_OC3_SetConfig+0x148>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d00f      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4a20      	ldr	r2, [pc, #128]	; (8012800 <TIM_OC3_SetConfig+0x14c>)
 801277e:	4293      	cmp	r3, r2
 8012780:	d00b      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a1f      	ldr	r2, [pc, #124]	; (8012804 <TIM_OC3_SetConfig+0x150>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d007      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a1e      	ldr	r2, [pc, #120]	; (8012808 <TIM_OC3_SetConfig+0x154>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d003      	beq.n	801279a <TIM_OC3_SetConfig+0xe6>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4a1d      	ldr	r2, [pc, #116]	; (801280c <TIM_OC3_SetConfig+0x158>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d113      	bne.n	80127c2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	695b      	ldr	r3, [r3, #20]
 80127ae:	011b      	lsls	r3, r3, #4
 80127b0:	693a      	ldr	r2, [r7, #16]
 80127b2:	4313      	orrs	r3, r2
 80127b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	699b      	ldr	r3, [r3, #24]
 80127ba:	011b      	lsls	r3, r3, #4
 80127bc:	693a      	ldr	r2, [r7, #16]
 80127be:	4313      	orrs	r3, r2
 80127c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	68fa      	ldr	r2, [r7, #12]
 80127cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	685a      	ldr	r2, [r3, #4]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	697a      	ldr	r2, [r7, #20]
 80127da:	621a      	str	r2, [r3, #32]
}
 80127dc:	bf00      	nop
 80127de:	371c      	adds	r7, #28
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr
 80127e8:	40012c00 	.word	0x40012c00
 80127ec:	50012c00 	.word	0x50012c00
 80127f0:	40013400 	.word	0x40013400
 80127f4:	50013400 	.word	0x50013400
 80127f8:	40014000 	.word	0x40014000
 80127fc:	50014000 	.word	0x50014000
 8012800:	40014400 	.word	0x40014400
 8012804:	50014400 	.word	0x50014400
 8012808:	40014800 	.word	0x40014800
 801280c:	50014800 	.word	0x50014800

08012810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012810:	b480      	push	{r7}
 8012812:	b087      	sub	sp, #28
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a1b      	ldr	r3, [r3, #32]
 801281e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6a1b      	ldr	r3, [r3, #32]
 8012824:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	69db      	ldr	r3, [r3, #28]
 8012836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801283e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801284a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	021b      	lsls	r3, r3, #8
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4313      	orrs	r3, r2
 8012856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801285e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	031b      	lsls	r3, r3, #12
 8012866:	697a      	ldr	r2, [r7, #20]
 8012868:	4313      	orrs	r3, r2
 801286a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4a36      	ldr	r2, [pc, #216]	; (8012948 <TIM_OC4_SetConfig+0x138>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d00b      	beq.n	801288c <TIM_OC4_SetConfig+0x7c>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4a35      	ldr	r2, [pc, #212]	; (801294c <TIM_OC4_SetConfig+0x13c>)
 8012878:	4293      	cmp	r3, r2
 801287a:	d007      	beq.n	801288c <TIM_OC4_SetConfig+0x7c>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4a34      	ldr	r2, [pc, #208]	; (8012950 <TIM_OC4_SetConfig+0x140>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d003      	beq.n	801288c <TIM_OC4_SetConfig+0x7c>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4a33      	ldr	r2, [pc, #204]	; (8012954 <TIM_OC4_SetConfig+0x144>)
 8012888:	4293      	cmp	r3, r2
 801288a:	d10d      	bne.n	80128a8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	031b      	lsls	r3, r3, #12
 801289a:	697a      	ldr	r2, [r7, #20]
 801289c:	4313      	orrs	r3, r2
 801289e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80128a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4a27      	ldr	r2, [pc, #156]	; (8012948 <TIM_OC4_SetConfig+0x138>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d023      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4a26      	ldr	r2, [pc, #152]	; (801294c <TIM_OC4_SetConfig+0x13c>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d01f      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4a25      	ldr	r2, [pc, #148]	; (8012950 <TIM_OC4_SetConfig+0x140>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d01b      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4a24      	ldr	r2, [pc, #144]	; (8012954 <TIM_OC4_SetConfig+0x144>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d017      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4a23      	ldr	r2, [pc, #140]	; (8012958 <TIM_OC4_SetConfig+0x148>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d013      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4a22      	ldr	r2, [pc, #136]	; (801295c <TIM_OC4_SetConfig+0x14c>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d00f      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4a21      	ldr	r2, [pc, #132]	; (8012960 <TIM_OC4_SetConfig+0x150>)
 80128dc:	4293      	cmp	r3, r2
 80128de:	d00b      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4a20      	ldr	r2, [pc, #128]	; (8012964 <TIM_OC4_SetConfig+0x154>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d007      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	4a1f      	ldr	r2, [pc, #124]	; (8012968 <TIM_OC4_SetConfig+0x158>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	d003      	beq.n	80128f8 <TIM_OC4_SetConfig+0xe8>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	4a1e      	ldr	r2, [pc, #120]	; (801296c <TIM_OC4_SetConfig+0x15c>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d113      	bne.n	8012920 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80128fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012906:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	695b      	ldr	r3, [r3, #20]
 801290c:	019b      	lsls	r3, r3, #6
 801290e:	693a      	ldr	r2, [r7, #16]
 8012910:	4313      	orrs	r3, r2
 8012912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	699b      	ldr	r3, [r3, #24]
 8012918:	019b      	lsls	r3, r3, #6
 801291a:	693a      	ldr	r2, [r7, #16]
 801291c:	4313      	orrs	r3, r2
 801291e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	693a      	ldr	r2, [r7, #16]
 8012924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	685a      	ldr	r2, [r3, #4]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	697a      	ldr	r2, [r7, #20]
 8012938:	621a      	str	r2, [r3, #32]
}
 801293a:	bf00      	nop
 801293c:	371c      	adds	r7, #28
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	40012c00 	.word	0x40012c00
 801294c:	50012c00 	.word	0x50012c00
 8012950:	40013400 	.word	0x40013400
 8012954:	50013400 	.word	0x50013400
 8012958:	40014000 	.word	0x40014000
 801295c:	50014000 	.word	0x50014000
 8012960:	40014400 	.word	0x40014400
 8012964:	50014400 	.word	0x50014400
 8012968:	40014800 	.word	0x40014800
 801296c:	50014800 	.word	0x50014800

08012970 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012970:	b480      	push	{r7}
 8012972:	b087      	sub	sp, #28
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6a1b      	ldr	r3, [r3, #32]
 801297e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6a1b      	ldr	r3, [r3, #32]
 8012984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	4313      	orrs	r3, r2
 80129ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80129b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	689b      	ldr	r3, [r3, #8]
 80129ba:	041b      	lsls	r3, r3, #16
 80129bc:	693a      	ldr	r2, [r7, #16]
 80129be:	4313      	orrs	r3, r2
 80129c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	4a21      	ldr	r2, [pc, #132]	; (8012a4c <TIM_OC5_SetConfig+0xdc>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d023      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4a20      	ldr	r2, [pc, #128]	; (8012a50 <TIM_OC5_SetConfig+0xe0>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d01f      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4a1f      	ldr	r2, [pc, #124]	; (8012a54 <TIM_OC5_SetConfig+0xe4>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d01b      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	4a1e      	ldr	r2, [pc, #120]	; (8012a58 <TIM_OC5_SetConfig+0xe8>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d017      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	4a1d      	ldr	r2, [pc, #116]	; (8012a5c <TIM_OC5_SetConfig+0xec>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d013      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4a1c      	ldr	r2, [pc, #112]	; (8012a60 <TIM_OC5_SetConfig+0xf0>)
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d00f      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4a1b      	ldr	r2, [pc, #108]	; (8012a64 <TIM_OC5_SetConfig+0xf4>)
 80129f6:	4293      	cmp	r3, r2
 80129f8:	d00b      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	4a1a      	ldr	r2, [pc, #104]	; (8012a68 <TIM_OC5_SetConfig+0xf8>)
 80129fe:	4293      	cmp	r3, r2
 8012a00:	d007      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4a19      	ldr	r2, [pc, #100]	; (8012a6c <TIM_OC5_SetConfig+0xfc>)
 8012a06:	4293      	cmp	r3, r2
 8012a08:	d003      	beq.n	8012a12 <TIM_OC5_SetConfig+0xa2>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4a18      	ldr	r2, [pc, #96]	; (8012a70 <TIM_OC5_SetConfig+0x100>)
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	d109      	bne.n	8012a26 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012a18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	695b      	ldr	r3, [r3, #20]
 8012a1e:	021b      	lsls	r3, r3, #8
 8012a20:	697a      	ldr	r2, [r7, #20]
 8012a22:	4313      	orrs	r3, r2
 8012a24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	697a      	ldr	r2, [r7, #20]
 8012a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	685a      	ldr	r2, [r3, #4]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	693a      	ldr	r2, [r7, #16]
 8012a3e:	621a      	str	r2, [r3, #32]
}
 8012a40:	bf00      	nop
 8012a42:	371c      	adds	r7, #28
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr
 8012a4c:	40012c00 	.word	0x40012c00
 8012a50:	50012c00 	.word	0x50012c00
 8012a54:	40013400 	.word	0x40013400
 8012a58:	50013400 	.word	0x50013400
 8012a5c:	40014000 	.word	0x40014000
 8012a60:	50014000 	.word	0x50014000
 8012a64:	40014400 	.word	0x40014400
 8012a68:	50014400 	.word	0x50014400
 8012a6c:	40014800 	.word	0x40014800
 8012a70:	50014800 	.word	0x50014800

08012a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b087      	sub	sp, #28
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a1b      	ldr	r3, [r3, #32]
 8012a82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6a1b      	ldr	r3, [r3, #32]
 8012a88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	021b      	lsls	r3, r3, #8
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	689b      	ldr	r3, [r3, #8]
 8012ac0:	051b      	lsls	r3, r3, #20
 8012ac2:	693a      	ldr	r2, [r7, #16]
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	4a22      	ldr	r2, [pc, #136]	; (8012b54 <TIM_OC6_SetConfig+0xe0>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d023      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	4a21      	ldr	r2, [pc, #132]	; (8012b58 <TIM_OC6_SetConfig+0xe4>)
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d01f      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	4a20      	ldr	r2, [pc, #128]	; (8012b5c <TIM_OC6_SetConfig+0xe8>)
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d01b      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	4a1f      	ldr	r2, [pc, #124]	; (8012b60 <TIM_OC6_SetConfig+0xec>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d017      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4a1e      	ldr	r2, [pc, #120]	; (8012b64 <TIM_OC6_SetConfig+0xf0>)
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d013      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	4a1d      	ldr	r2, [pc, #116]	; (8012b68 <TIM_OC6_SetConfig+0xf4>)
 8012af4:	4293      	cmp	r3, r2
 8012af6:	d00f      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4a1c      	ldr	r2, [pc, #112]	; (8012b6c <TIM_OC6_SetConfig+0xf8>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d00b      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4a1b      	ldr	r2, [pc, #108]	; (8012b70 <TIM_OC6_SetConfig+0xfc>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d007      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4a1a      	ldr	r2, [pc, #104]	; (8012b74 <TIM_OC6_SetConfig+0x100>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d003      	beq.n	8012b18 <TIM_OC6_SetConfig+0xa4>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4a19      	ldr	r2, [pc, #100]	; (8012b78 <TIM_OC6_SetConfig+0x104>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d109      	bne.n	8012b2c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	695b      	ldr	r3, [r3, #20]
 8012b24:	029b      	lsls	r3, r3, #10
 8012b26:	697a      	ldr	r2, [r7, #20]
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	68fa      	ldr	r2, [r7, #12]
 8012b36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	685a      	ldr	r2, [r3, #4]
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	693a      	ldr	r2, [r7, #16]
 8012b44:	621a      	str	r2, [r3, #32]
}
 8012b46:	bf00      	nop
 8012b48:	371c      	adds	r7, #28
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr
 8012b52:	bf00      	nop
 8012b54:	40012c00 	.word	0x40012c00
 8012b58:	50012c00 	.word	0x50012c00
 8012b5c:	40013400 	.word	0x40013400
 8012b60:	50013400 	.word	0x50013400
 8012b64:	40014000 	.word	0x40014000
 8012b68:	50014000 	.word	0x50014000
 8012b6c:	40014400 	.word	0x40014400
 8012b70:	50014400 	.word	0x50014400
 8012b74:	40014800 	.word	0x40014800
 8012b78:	50014800 	.word	0x50014800

08012b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b085      	sub	sp, #20
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b8c:	2b01      	cmp	r3, #1
 8012b8e:	d101      	bne.n	8012b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012b90:	2302      	movs	r3, #2
 8012b92:	e097      	b.n	8012cc4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2201      	movs	r2, #1
 8012b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	4a45      	ldr	r2, [pc, #276]	; (8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d00e      	beq.n	8012bdc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	4a44      	ldr	r2, [pc, #272]	; (8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d009      	beq.n	8012bdc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	4a42      	ldr	r2, [pc, #264]	; (8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d004      	beq.n	8012bdc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4a41      	ldr	r2, [pc, #260]	; (8012cdc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d108      	bne.n	8012bee <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012be2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	4313      	orrs	r3, r2
 8012bec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8012bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	68fa      	ldr	r2, [r7, #12]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a2f      	ldr	r2, [pc, #188]	; (8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d040      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4a2e      	ldr	r2, [pc, #184]	; (8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d03b      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c28:	d036      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012c32:	d031      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a29      	ldr	r2, [pc, #164]	; (8012ce0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d02c      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a28      	ldr	r2, [pc, #160]	; (8012ce4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d027      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4a26      	ldr	r2, [pc, #152]	; (8012ce8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d022      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4a25      	ldr	r2, [pc, #148]	; (8012cec <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d01d      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4a23      	ldr	r2, [pc, #140]	; (8012cf0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d018      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	4a22      	ldr	r2, [pc, #136]	; (8012cf4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d013      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a18      	ldr	r2, [pc, #96]	; (8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d00e      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a17      	ldr	r2, [pc, #92]	; (8012cdc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d009      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a1b      	ldr	r2, [pc, #108]	; (8012cf8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d004      	beq.n	8012c98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4a1a      	ldr	r2, [pc, #104]	; (8012cfc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d10c      	bne.n	8012cb2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012c9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	4313      	orrs	r3, r2
 8012ca8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	68ba      	ldr	r2, [r7, #8]
 8012cb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012cc2:	2300      	movs	r3, #0
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3714      	adds	r7, #20
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cce:	4770      	bx	lr
 8012cd0:	40012c00 	.word	0x40012c00
 8012cd4:	50012c00 	.word	0x50012c00
 8012cd8:	40013400 	.word	0x40013400
 8012cdc:	50013400 	.word	0x50013400
 8012ce0:	40000400 	.word	0x40000400
 8012ce4:	50000400 	.word	0x50000400
 8012ce8:	40000800 	.word	0x40000800
 8012cec:	50000800 	.word	0x50000800
 8012cf0:	40000c00 	.word	0x40000c00
 8012cf4:	50000c00 	.word	0x50000c00
 8012cf8:	40014000 	.word	0x40014000
 8012cfc:	50014000 	.word	0x50014000

08012d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e042      	b.n	8012d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d106      	bne.n	8012d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f7f2 f887 	bl	8004e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2224      	movs	r2, #36	; 0x24
 8012d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f022 0201 	bic.w	r2, r2, #1
 8012d40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d002      	beq.n	8012d50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 fde2 	bl	8013914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 fc31 	bl	80135b8 <UART_SetConfig>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d101      	bne.n	8012d60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e01b      	b.n	8012d98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	685a      	ldr	r2, [r3, #4]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	689a      	ldr	r2, [r3, #8]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f042 0201 	orr.w	r2, r2, #1
 8012d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 fe61 	bl	8013a58 <UART_CheckIdleState>
 8012d96:	4603      	mov	r3, r0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b08a      	sub	sp, #40	; 0x28
 8012da4:	af02      	add	r7, sp, #8
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	603b      	str	r3, [r7, #0]
 8012dac:	4613      	mov	r3, r2
 8012dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012db6:	2b20      	cmp	r3, #32
 8012db8:	d17b      	bne.n	8012eb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <HAL_UART_Transmit+0x26>
 8012dc0:	88fb      	ldrh	r3, [r7, #6]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d101      	bne.n	8012dca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e074      	b.n	8012eb4 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2221      	movs	r2, #33	; 0x21
 8012dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012dda:	f7f2 ff71 	bl	8005cc0 <HAL_GetTick>
 8012dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	88fa      	ldrh	r2, [r7, #6]
 8012de4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	88fa      	ldrh	r2, [r7, #6]
 8012dec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012df8:	d108      	bne.n	8012e0c <HAL_UART_Transmit+0x6c>
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d104      	bne.n	8012e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012e02:	2300      	movs	r3, #0
 8012e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	61bb      	str	r3, [r7, #24]
 8012e0a:	e003      	b.n	8012e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012e10:	2300      	movs	r3, #0
 8012e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012e14:	e030      	b.n	8012e78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	2180      	movs	r1, #128	; 0x80
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f000 fec3 	bl	8013bac <UART_WaitOnFlagUntilTimeout>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d005      	beq.n	8012e38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	2220      	movs	r2, #32
 8012e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012e34:	2303      	movs	r3, #3
 8012e36:	e03d      	b.n	8012eb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d10b      	bne.n	8012e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	881b      	ldrh	r3, [r3, #0]
 8012e42:	461a      	mov	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012e4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	3302      	adds	r3, #2
 8012e52:	61bb      	str	r3, [r7, #24]
 8012e54:	e007      	b.n	8012e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	781a      	ldrb	r2, [r3, #0]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	3301      	adds	r3, #1
 8012e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	3b01      	subs	r3, #1
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1c8      	bne.n	8012e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	2140      	movs	r1, #64	; 0x40
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f000 fe8c 	bl	8013bac <UART_WaitOnFlagUntilTimeout>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d005      	beq.n	8012ea6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2220      	movs	r2, #32
 8012e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	e006      	b.n	8012eb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2220      	movs	r2, #32
 8012eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e000      	b.n	8012eb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012eb2:	2302      	movs	r3, #2
  }
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3720      	adds	r7, #32
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b08a      	sub	sp, #40	; 0x28
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ed0:	2b20      	cmp	r3, #32
 8012ed2:	d13c      	bne.n	8012f4e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d002      	beq.n	8012ee0 <HAL_UART_Receive_IT+0x24>
 8012eda:	88fb      	ldrh	r3, [r7, #6]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d101      	bne.n	8012ee4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	e035      	b.n	8012f50 <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	66da      	str	r2, [r3, #108]	; 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	4a1a      	ldr	r2, [pc, #104]	; (8012f58 <HAL_UART_Receive_IT+0x9c>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d024      	beq.n	8012f3e <HAL_UART_Receive_IT+0x82>
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	4a18      	ldr	r2, [pc, #96]	; (8012f5c <HAL_UART_Receive_IT+0xa0>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d01f      	beq.n	8012f3e <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d018      	beq.n	8012f3e <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	e853 3f00 	ldrex	r3, [r3]
 8012f18:	613b      	str	r3, [r7, #16]
   return(result);
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012f20:	627b      	str	r3, [r7, #36]	; 0x24
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	461a      	mov	r2, r3
 8012f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2a:	623b      	str	r3, [r7, #32]
 8012f2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f2e:	69f9      	ldr	r1, [r7, #28]
 8012f30:	6a3a      	ldr	r2, [r7, #32]
 8012f32:	e841 2300 	strex	r3, r2, [r1]
 8012f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d1e6      	bne.n	8012f0c <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012f3e:	88fb      	ldrh	r3, [r7, #6]
 8012f40:	461a      	mov	r2, r3
 8012f42:	68b9      	ldr	r1, [r7, #8]
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 fe9f 	bl	8013c88 <UART_Start_Receive_IT>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	e000      	b.n	8012f50 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012f4e:	2302      	movs	r3, #2
  }
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3728      	adds	r7, #40	; 0x28
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	46002400 	.word	0x46002400
 8012f5c:	56002400 	.word	0x56002400

08012f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b0ba      	sub	sp, #232	; 0xe8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	69db      	ldr	r3, [r3, #28]
 8012f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	689b      	ldr	r3, [r3, #8]
 8012f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012f86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012f8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8012f8e:	4013      	ands	r3, r2
 8012f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d11b      	bne.n	8012fd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012fa0:	f003 0320 	and.w	r3, r3, #32
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d015      	beq.n	8012fd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012fac:	f003 0320 	and.w	r3, r3, #32
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d105      	bne.n	8012fc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d009      	beq.n	8012fd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	f000 82cb 	beq.w	8013560 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	4798      	blx	r3
      }
      return;
 8012fd2:	e2c5      	b.n	8013560 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f000 8123 	beq.w	8013224 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012fde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012fe2:	4b8d      	ldr	r3, [pc, #564]	; (8013218 <HAL_UART_IRQHandler+0x2b8>)
 8012fe4:	4013      	ands	r3, r2
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d106      	bne.n	8012ff8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012fea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012fee:	4b8b      	ldr	r3, [pc, #556]	; (801321c <HAL_UART_IRQHandler+0x2bc>)
 8012ff0:	4013      	ands	r3, r2
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	f000 8116 	beq.w	8013224 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ffc:	f003 0301 	and.w	r3, r3, #1
 8013000:	2b00      	cmp	r3, #0
 8013002:	d011      	beq.n	8013028 <HAL_UART_IRQHandler+0xc8>
 8013004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00b      	beq.n	8013028 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	2201      	movs	r2, #1
 8013016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801301e:	f043 0201 	orr.w	r2, r3, #1
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801302c:	f003 0302 	and.w	r3, r3, #2
 8013030:	2b00      	cmp	r3, #0
 8013032:	d011      	beq.n	8013058 <HAL_UART_IRQHandler+0xf8>
 8013034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013038:	f003 0301 	and.w	r3, r3, #1
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00b      	beq.n	8013058 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2202      	movs	r2, #2
 8013046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801304e:	f043 0204 	orr.w	r2, r3, #4
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801305c:	f003 0304 	and.w	r3, r3, #4
 8013060:	2b00      	cmp	r3, #0
 8013062:	d011      	beq.n	8013088 <HAL_UART_IRQHandler+0x128>
 8013064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	d00b      	beq.n	8013088 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2204      	movs	r2, #4
 8013076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801307e:	f043 0202 	orr.w	r2, r3, #2
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801308c:	f003 0308 	and.w	r3, r3, #8
 8013090:	2b00      	cmp	r3, #0
 8013092:	d017      	beq.n	80130c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013098:	f003 0320 	and.w	r3, r3, #32
 801309c:	2b00      	cmp	r3, #0
 801309e:	d105      	bne.n	80130ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80130a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80130a4:	4b5c      	ldr	r3, [pc, #368]	; (8013218 <HAL_UART_IRQHandler+0x2b8>)
 80130a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d00b      	beq.n	80130c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2208      	movs	r2, #8
 80130b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130ba:	f043 0208 	orr.w	r2, r3, #8
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80130c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d012      	beq.n	80130f6 <HAL_UART_IRQHandler+0x196>
 80130d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00c      	beq.n	80130f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80130e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130ec:	f043 0220 	orr.w	r2, r3, #32
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f000 8231 	beq.w	8013564 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013106:	f003 0320 	and.w	r3, r3, #32
 801310a:	2b00      	cmp	r3, #0
 801310c:	d013      	beq.n	8013136 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801310e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013112:	f003 0320 	and.w	r3, r3, #32
 8013116:	2b00      	cmp	r3, #0
 8013118:	d105      	bne.n	8013126 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013122:	2b00      	cmp	r3, #0
 8013124:	d007      	beq.n	8013136 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801312a:	2b00      	cmp	r3, #0
 801312c:	d003      	beq.n	8013136 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801313c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801314a:	2b40      	cmp	r3, #64	; 0x40
 801314c:	d005      	beq.n	801315a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801314e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013152:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013156:	2b00      	cmp	r3, #0
 8013158:	d054      	beq.n	8013204 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 feb6 	bl	8013ecc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	689b      	ldr	r3, [r3, #8]
 8013166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801316a:	2b40      	cmp	r3, #64	; 0x40
 801316c:	d146      	bne.n	80131fc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	3308      	adds	r3, #8
 8013174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801317c:	e853 3f00 	ldrex	r3, [r3]
 8013180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801318c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	3308      	adds	r3, #8
 8013196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801319a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801319e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80131a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80131aa:	e841 2300 	strex	r3, r2, [r1]
 80131ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80131b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d1d9      	bne.n	801316e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d017      	beq.n	80131f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131ca:	4a15      	ldr	r2, [pc, #84]	; (8013220 <HAL_UART_IRQHandler+0x2c0>)
 80131cc:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7f5 fb77 	bl	80088c8 <HAL_DMA_Abort_IT>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d019      	beq.n	8013214 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80131ee:	4610      	mov	r0, r2
 80131f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131f2:	e00f      	b.n	8013214 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f000 f9c9 	bl	801358c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131fa:	e00b      	b.n	8013214 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f000 f9c5 	bl	801358c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013202:	e007      	b.n	8013214 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 f9c1 	bl	801358c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8013212:	e1a7      	b.n	8013564 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013214:	bf00      	nop
    return;
 8013216:	e1a5      	b.n	8013564 <HAL_UART_IRQHandler+0x604>
 8013218:	10000001 	.word	0x10000001
 801321c:	04000120 	.word	0x04000120
 8013220:	08013f99 	.word	0x08013f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013228:	2b01      	cmp	r3, #1
 801322a:	f040 8150 	bne.w	80134ce <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013232:	f003 0310 	and.w	r3, r3, #16
 8013236:	2b00      	cmp	r3, #0
 8013238:	f000 8149 	beq.w	80134ce <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013240:	f003 0310 	and.w	r3, r3, #16
 8013244:	2b00      	cmp	r3, #0
 8013246:	f000 8142 	beq.w	80134ce <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	2210      	movs	r2, #16
 8013250:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801325c:	2b40      	cmp	r3, #64	; 0x40
 801325e:	f040 80b8 	bne.w	80133d2 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801326c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013274:	2b00      	cmp	r3, #0
 8013276:	f000 8177 	beq.w	8013568 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013280:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013284:	429a      	cmp	r2, r3
 8013286:	f080 816f 	bcs.w	8013568 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801329c:	2b81      	cmp	r3, #129	; 0x81
 801329e:	f000 8087 	beq.w	80133b0 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80132ae:	e853 3f00 	ldrex	r3, [r3]
 80132b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80132b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80132ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80132be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	461a      	mov	r2, r3
 80132c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80132cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80132d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80132d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80132dc:	e841 2300 	strex	r3, r2, [r1]
 80132e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80132e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1da      	bne.n	80132a2 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	3308      	adds	r3, #8
 80132f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132f6:	e853 3f00 	ldrex	r3, [r3]
 80132fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80132fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132fe:	f023 0301 	bic.w	r3, r3, #1
 8013302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3308      	adds	r3, #8
 801330c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013310:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013314:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013316:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801331c:	e841 2300 	strex	r3, r2, [r1]
 8013320:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013324:	2b00      	cmp	r3, #0
 8013326:	d1e1      	bne.n	80132ec <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	3308      	adds	r3, #8
 801332e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013332:	e853 3f00 	ldrex	r3, [r3]
 8013336:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801333e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3308      	adds	r3, #8
 8013348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801334c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801334e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013350:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013352:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013354:	e841 2300 	strex	r3, r2, [r1]
 8013358:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801335a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801335c:	2b00      	cmp	r3, #0
 801335e:	d1e3      	bne.n	8013328 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2220      	movs	r2, #32
 8013364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013376:	e853 3f00 	ldrex	r3, [r3]
 801337a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801337c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801337e:	f023 0310 	bic.w	r3, r3, #16
 8013382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	461a      	mov	r2, r3
 801338c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013390:	65bb      	str	r3, [r7, #88]	; 0x58
 8013392:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013398:	e841 2300 	strex	r3, r2, [r1]
 801339c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d1e4      	bne.n	801336e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7f5 fa10 	bl	80087d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2202      	movs	r2, #2
 80133b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	1ad3      	subs	r3, r2, r3
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	4619      	mov	r1, r3
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 f8e8 	bl	80135a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80133d0:	e0ca      	b.n	8013568 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133de:	b29b      	uxth	r3, r3
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	f000 80bc 	beq.w	801356c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80133f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 80b7 	beq.w	801356c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013406:	e853 3f00 	ldrex	r3, [r3]
 801340a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	461a      	mov	r2, r3
 801341c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013420:	647b      	str	r3, [r7, #68]	; 0x44
 8013422:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013428:	e841 2300 	strex	r3, r2, [r1]
 801342c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013430:	2b00      	cmp	r3, #0
 8013432:	d1e4      	bne.n	80133fe <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	3308      	adds	r3, #8
 801343a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343e:	e853 3f00 	ldrex	r3, [r3]
 8013442:	623b      	str	r3, [r7, #32]
   return(result);
 8013444:	6a3b      	ldr	r3, [r7, #32]
 8013446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801344a:	f023 0301 	bic.w	r3, r3, #1
 801344e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	3308      	adds	r3, #8
 8013458:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801345c:	633a      	str	r2, [r7, #48]	; 0x30
 801345e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013464:	e841 2300 	strex	r3, r2, [r1]
 8013468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346c:	2b00      	cmp	r3, #0
 801346e:	d1e1      	bne.n	8013434 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2220      	movs	r2, #32
 8013474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2200      	movs	r2, #0
 801347c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2200      	movs	r2, #0
 8013482:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	e853 3f00 	ldrex	r3, [r3]
 8013490:	60fb      	str	r3, [r7, #12]
   return(result);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f023 0310 	bic.w	r3, r3, #16
 8013498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	461a      	mov	r2, r3
 80134a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80134a6:	61fb      	str	r3, [r7, #28]
 80134a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134aa:	69b9      	ldr	r1, [r7, #24]
 80134ac:	69fa      	ldr	r2, [r7, #28]
 80134ae:	e841 2300 	strex	r3, r2, [r1]
 80134b2:	617b      	str	r3, [r7, #20]
   return(result);
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d1e4      	bne.n	8013484 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2202      	movs	r2, #2
 80134be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80134c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80134c4:	4619      	mov	r1, r3
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f000 f86a 	bl	80135a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80134cc:	e04e      	b.n	801356c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80134ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80134d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d014      	beq.n	8013504 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80134da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80134de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d105      	bne.n	80134f2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80134e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80134ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d008      	beq.n	8013504 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d03a      	beq.n	8013570 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	4798      	blx	r3
    }
    return;
 8013502:	e035      	b.n	8013570 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801350c:	2b00      	cmp	r3, #0
 801350e:	d009      	beq.n	8013524 <HAL_UART_IRQHandler+0x5c4>
 8013510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013518:	2b00      	cmp	r3, #0
 801351a:	d003      	beq.n	8013524 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f000 fd51 	bl	8013fc4 <UART_EndTransmit_IT>
    return;
 8013522:	e026      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801352c:	2b00      	cmp	r3, #0
 801352e:	d009      	beq.n	8013544 <HAL_UART_IRQHandler+0x5e4>
 8013530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013534:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013538:	2b00      	cmp	r3, #0
 801353a:	d003      	beq.n	8013544 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f001 faaf 	bl	8014aa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013542:	e016      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801354c:	2b00      	cmp	r3, #0
 801354e:	d010      	beq.n	8013572 <HAL_UART_IRQHandler+0x612>
 8013550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013554:	2b00      	cmp	r3, #0
 8013556:	da0c      	bge.n	8013572 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f001 fa97 	bl	8014a8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801355e:	e008      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
      return;
 8013560:	bf00      	nop
 8013562:	e006      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
    return;
 8013564:	bf00      	nop
 8013566:	e004      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
      return;
 8013568:	bf00      	nop
 801356a:	e002      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
      return;
 801356c:	bf00      	nop
 801356e:	e000      	b.n	8013572 <HAL_UART_IRQHandler+0x612>
    return;
 8013570:	bf00      	nop
  }
}
 8013572:	37e8      	adds	r7, #232	; 0xe8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013580:	bf00      	nop
 8013582:	370c      	adds	r7, #12
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013594:	bf00      	nop
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b083      	sub	sp, #12
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	460b      	mov	r3, r1
 80135aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80135ac:	bf00      	nop
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135bc:	b094      	sub	sp, #80	; 0x50
 80135be:	af00      	add	r7, sp, #0
 80135c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80135c2:	2300      	movs	r3, #0
 80135c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80135c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ca:	681a      	ldr	r2, [r3, #0]
 80135cc:	4b83      	ldr	r3, [pc, #524]	; (80137dc <UART_SetConfig+0x224>)
 80135ce:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d2:	689a      	ldr	r2, [r3, #8]
 80135d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d6:	691b      	ldr	r3, [r3, #16]
 80135d8:	431a      	orrs	r2, r3
 80135da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135dc:	695b      	ldr	r3, [r3, #20]
 80135de:	431a      	orrs	r2, r3
 80135e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e2:	69db      	ldr	r3, [r3, #28]
 80135e4:	4313      	orrs	r3, r2
 80135e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80135e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	497c      	ldr	r1, [pc, #496]	; (80137e0 <UART_SetConfig+0x228>)
 80135f0:	4019      	ands	r1, r3
 80135f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135f8:	430b      	orrs	r3, r1
 80135fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80135fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013608:	68d9      	ldr	r1, [r3, #12]
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	ea40 0301 	orr.w	r3, r0, r1
 8013612:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013616:	699b      	ldr	r3, [r3, #24]
 8013618:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	4b6f      	ldr	r3, [pc, #444]	; (80137dc <UART_SetConfig+0x224>)
 8013620:	429a      	cmp	r2, r3
 8013622:	d009      	beq.n	8013638 <UART_SetConfig+0x80>
 8013624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	4b6e      	ldr	r3, [pc, #440]	; (80137e4 <UART_SetConfig+0x22c>)
 801362a:	429a      	cmp	r2, r3
 801362c:	d004      	beq.n	8013638 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013630:	6a1a      	ldr	r2, [r3, #32]
 8013632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013634:	4313      	orrs	r3, r2
 8013636:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8013642:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8013646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801364c:	430b      	orrs	r3, r1
 801364e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013656:	f023 000f 	bic.w	r0, r3, #15
 801365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	ea40 0301 	orr.w	r3, r0, r1
 8013666:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	4b5e      	ldr	r3, [pc, #376]	; (80137e8 <UART_SetConfig+0x230>)
 801366e:	429a      	cmp	r2, r3
 8013670:	d102      	bne.n	8013678 <UART_SetConfig+0xc0>
 8013672:	2301      	movs	r3, #1
 8013674:	64bb      	str	r3, [r7, #72]	; 0x48
 8013676:	e032      	b.n	80136de <UART_SetConfig+0x126>
 8013678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	4b5b      	ldr	r3, [pc, #364]	; (80137ec <UART_SetConfig+0x234>)
 801367e:	429a      	cmp	r2, r3
 8013680:	d102      	bne.n	8013688 <UART_SetConfig+0xd0>
 8013682:	2302      	movs	r3, #2
 8013684:	64bb      	str	r3, [r7, #72]	; 0x48
 8013686:	e02a      	b.n	80136de <UART_SetConfig+0x126>
 8013688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368a:	681a      	ldr	r2, [r3, #0]
 801368c:	4b58      	ldr	r3, [pc, #352]	; (80137f0 <UART_SetConfig+0x238>)
 801368e:	429a      	cmp	r2, r3
 8013690:	d102      	bne.n	8013698 <UART_SetConfig+0xe0>
 8013692:	2304      	movs	r3, #4
 8013694:	64bb      	str	r3, [r7, #72]	; 0x48
 8013696:	e022      	b.n	80136de <UART_SetConfig+0x126>
 8013698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	4b55      	ldr	r3, [pc, #340]	; (80137f4 <UART_SetConfig+0x23c>)
 801369e:	429a      	cmp	r2, r3
 80136a0:	d102      	bne.n	80136a8 <UART_SetConfig+0xf0>
 80136a2:	2308      	movs	r3, #8
 80136a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80136a6:	e01a      	b.n	80136de <UART_SetConfig+0x126>
 80136a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	4b52      	ldr	r3, [pc, #328]	; (80137f8 <UART_SetConfig+0x240>)
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d102      	bne.n	80136b8 <UART_SetConfig+0x100>
 80136b2:	2310      	movs	r3, #16
 80136b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80136b6:	e012      	b.n	80136de <UART_SetConfig+0x126>
 80136b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	4b4f      	ldr	r3, [pc, #316]	; (80137fc <UART_SetConfig+0x244>)
 80136be:	429a      	cmp	r2, r3
 80136c0:	d103      	bne.n	80136ca <UART_SetConfig+0x112>
 80136c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80136c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80136c8:	e009      	b.n	80136de <UART_SetConfig+0x126>
 80136ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	4b43      	ldr	r3, [pc, #268]	; (80137dc <UART_SetConfig+0x224>)
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d102      	bne.n	80136da <UART_SetConfig+0x122>
 80136d4:	2320      	movs	r3, #32
 80136d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80136d8:	e001      	b.n	80136de <UART_SetConfig+0x126>
 80136da:	2300      	movs	r3, #0
 80136dc:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	4b3e      	ldr	r3, [pc, #248]	; (80137dc <UART_SetConfig+0x224>)
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d005      	beq.n	80136f4 <UART_SetConfig+0x13c>
 80136e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	4b3d      	ldr	r3, [pc, #244]	; (80137e4 <UART_SetConfig+0x22c>)
 80136ee:	429a      	cmp	r2, r3
 80136f0:	f040 8088 	bne.w	8013804 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80136f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136f6:	2200      	movs	r2, #0
 80136f8:	623b      	str	r3, [r7, #32]
 80136fa:	627a      	str	r2, [r7, #36]	; 0x24
 80136fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013700:	f7fc f8c2 	bl	800f888 <HAL_RCCEx_GetPeriphCLKFreq>
 8013704:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8013706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 80eb 	beq.w	80138e4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013712:	4a3b      	ldr	r2, [pc, #236]	; (8013800 <UART_SetConfig+0x248>)
 8013714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013718:	461a      	mov	r2, r3
 801371a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801371c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013720:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013724:	685a      	ldr	r2, [r3, #4]
 8013726:	4613      	mov	r3, r2
 8013728:	005b      	lsls	r3, r3, #1
 801372a:	4413      	add	r3, r2
 801372c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801372e:	429a      	cmp	r2, r3
 8013730:	d305      	bcc.n	801373e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801373a:	429a      	cmp	r2, r3
 801373c:	d903      	bls.n	8013746 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801373e:	2301      	movs	r3, #1
 8013740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013744:	e048      	b.n	80137d8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013748:	2200      	movs	r2, #0
 801374a:	61bb      	str	r3, [r7, #24]
 801374c:	61fa      	str	r2, [r7, #28]
 801374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013752:	4a2b      	ldr	r2, [pc, #172]	; (8013800 <UART_SetConfig+0x248>)
 8013754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013758:	b29b      	uxth	r3, r3
 801375a:	2200      	movs	r2, #0
 801375c:	613b      	str	r3, [r7, #16]
 801375e:	617a      	str	r2, [r7, #20]
 8013760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013764:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013768:	f7ed fa4c 	bl	8000c04 <__aeabi_uldivmod>
 801376c:	4602      	mov	r2, r0
 801376e:	460b      	mov	r3, r1
 8013770:	4610      	mov	r0, r2
 8013772:	4619      	mov	r1, r3
 8013774:	f04f 0200 	mov.w	r2, #0
 8013778:	f04f 0300 	mov.w	r3, #0
 801377c:	020b      	lsls	r3, r1, #8
 801377e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013782:	0202      	lsls	r2, r0, #8
 8013784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013786:	6849      	ldr	r1, [r1, #4]
 8013788:	0849      	lsrs	r1, r1, #1
 801378a:	2000      	movs	r0, #0
 801378c:	460c      	mov	r4, r1
 801378e:	4605      	mov	r5, r0
 8013790:	eb12 0804 	adds.w	r8, r2, r4
 8013794:	eb43 0905 	adc.w	r9, r3, r5
 8013798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	60bb      	str	r3, [r7, #8]
 80137a0:	60fa      	str	r2, [r7, #12]
 80137a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80137a6:	4640      	mov	r0, r8
 80137a8:	4649      	mov	r1, r9
 80137aa:	f7ed fa2b 	bl	8000c04 <__aeabi_uldivmod>
 80137ae:	4602      	mov	r2, r0
 80137b0:	460b      	mov	r3, r1
 80137b2:	4613      	mov	r3, r2
 80137b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80137b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80137bc:	d308      	bcc.n	80137d0 <UART_SetConfig+0x218>
 80137be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80137c4:	d204      	bcs.n	80137d0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80137c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137cc:	60da      	str	r2, [r3, #12]
 80137ce:	e003      	b.n	80137d8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80137d0:	2301      	movs	r3, #1
 80137d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80137d6:	e085      	b.n	80138e4 <UART_SetConfig+0x32c>
 80137d8:	e084      	b.n	80138e4 <UART_SetConfig+0x32c>
 80137da:	bf00      	nop
 80137dc:	46002400 	.word	0x46002400
 80137e0:	cfff69f3 	.word	0xcfff69f3
 80137e4:	56002400 	.word	0x56002400
 80137e8:	40013800 	.word	0x40013800
 80137ec:	40004400 	.word	0x40004400
 80137f0:	40004800 	.word	0x40004800
 80137f4:	40004c00 	.word	0x40004c00
 80137f8:	40005000 	.word	0x40005000
 80137fc:	40006400 	.word	0x40006400
 8013800:	08019500 	.word	0x08019500
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013806:	69db      	ldr	r3, [r3, #28]
 8013808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801380c:	d13c      	bne.n	8013888 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801380e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013810:	2200      	movs	r2, #0
 8013812:	603b      	str	r3, [r7, #0]
 8013814:	607a      	str	r2, [r7, #4]
 8013816:	e9d7 0100 	ldrd	r0, r1, [r7]
 801381a:	f7fc f835 	bl	800f888 <HAL_RCCEx_GetPeriphCLKFreq>
 801381e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013822:	2b00      	cmp	r3, #0
 8013824:	d05e      	beq.n	80138e4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801382a:	4a39      	ldr	r2, [pc, #228]	; (8013910 <UART_SetConfig+0x358>)
 801382c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013830:	461a      	mov	r2, r3
 8013832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013834:	fbb3 f3f2 	udiv	r3, r3, r2
 8013838:	005a      	lsls	r2, r3, #1
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	085b      	lsrs	r3, r3, #1
 8013840:	441a      	add	r2, r3
 8013842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	fbb2 f3f3 	udiv	r3, r2, r3
 801384a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801384e:	2b0f      	cmp	r3, #15
 8013850:	d916      	bls.n	8013880 <UART_SetConfig+0x2c8>
 8013852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013858:	d212      	bcs.n	8013880 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801385c:	b29b      	uxth	r3, r3
 801385e:	f023 030f 	bic.w	r3, r3, #15
 8013862:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013866:	085b      	lsrs	r3, r3, #1
 8013868:	b29b      	uxth	r3, r3
 801386a:	f003 0307 	and.w	r3, r3, #7
 801386e:	b29a      	uxth	r2, r3
 8013870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013872:	4313      	orrs	r3, r2
 8013874:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8013876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801387c:	60da      	str	r2, [r3, #12]
 801387e:	e031      	b.n	80138e4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8013880:	2301      	movs	r3, #1
 8013882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013886:	e02d      	b.n	80138e4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8013888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801388a:	2200      	movs	r2, #0
 801388c:	469a      	mov	sl, r3
 801388e:	4693      	mov	fp, r2
 8013890:	4650      	mov	r0, sl
 8013892:	4659      	mov	r1, fp
 8013894:	f7fb fff8 	bl	800f888 <HAL_RCCEx_GetPeriphCLKFreq>
 8013898:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801389a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801389c:	2b00      	cmp	r3, #0
 801389e:	d021      	beq.n	80138e4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a4:	4a1a      	ldr	r2, [pc, #104]	; (8013910 <UART_SetConfig+0x358>)
 80138a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138aa:	461a      	mov	r2, r3
 80138ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80138b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	085b      	lsrs	r3, r3, #1
 80138b8:	441a      	add	r2, r3
 80138ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	fbb2 f3f3 	udiv	r3, r2, r3
 80138c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80138c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138c6:	2b0f      	cmp	r3, #15
 80138c8:	d909      	bls.n	80138de <UART_SetConfig+0x326>
 80138ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138d0:	d205      	bcs.n	80138de <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80138d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	60da      	str	r2, [r3, #12]
 80138dc:	e002      	b.n	80138e4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80138de:	2301      	movs	r3, #1
 80138e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80138e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e6:	2201      	movs	r2, #1
 80138e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80138ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ee:	2201      	movs	r2, #1
 80138f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80138f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f6:	2200      	movs	r2, #0
 80138f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80138fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fc:	2200      	movs	r2, #0
 80138fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8013904:	4618      	mov	r0, r3
 8013906:	3750      	adds	r7, #80	; 0x50
 8013908:	46bd      	mov	sp, r7
 801390a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801390e:	bf00      	nop
 8013910:	08019500 	.word	0x08019500

08013914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013920:	f003 0308 	and.w	r3, r3, #8
 8013924:	2b00      	cmp	r3, #0
 8013926:	d00a      	beq.n	801393e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	430a      	orrs	r2, r1
 801393c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013942:	f003 0301 	and.w	r3, r3, #1
 8013946:	2b00      	cmp	r3, #0
 8013948:	d00a      	beq.n	8013960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	430a      	orrs	r2, r1
 801395e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013964:	f003 0302 	and.w	r3, r3, #2
 8013968:	2b00      	cmp	r3, #0
 801396a:	d00a      	beq.n	8013982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	430a      	orrs	r2, r1
 8013980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013986:	f003 0304 	and.w	r3, r3, #4
 801398a:	2b00      	cmp	r3, #0
 801398c:	d00a      	beq.n	80139a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	430a      	orrs	r2, r1
 80139a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139a8:	f003 0310 	and.w	r3, r3, #16
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d00a      	beq.n	80139c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	430a      	orrs	r2, r1
 80139c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ca:	f003 0320 	and.w	r3, r3, #32
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d00a      	beq.n	80139e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	689b      	ldr	r3, [r3, #8]
 80139d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	430a      	orrs	r2, r1
 80139e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d01a      	beq.n	8013a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	430a      	orrs	r2, r1
 8013a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a12:	d10a      	bne.n	8013a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	430a      	orrs	r2, r1
 8013a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d00a      	beq.n	8013a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	430a      	orrs	r2, r1
 8013a4a:	605a      	str	r2, [r3, #4]
  }
}
 8013a4c:	bf00      	nop
 8013a4e:	370c      	adds	r7, #12
 8013a50:	46bd      	mov	sp, r7
 8013a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a56:	4770      	bx	lr

08013a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b098      	sub	sp, #96	; 0x60
 8013a5c:	af02      	add	r7, sp, #8
 8013a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2200      	movs	r2, #0
 8013a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013a68:	f7f2 f92a 	bl	8005cc0 <HAL_GetTick>
 8013a6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	f003 0308 	and.w	r3, r3, #8
 8013a78:	2b08      	cmp	r3, #8
 8013a7a:	d12f      	bne.n	8013adc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013a80:	9300      	str	r3, [sp, #0]
 8013a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a84:	2200      	movs	r2, #0
 8013a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 f88e 	bl	8013bac <UART_WaitOnFlagUntilTimeout>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d022      	beq.n	8013adc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9e:	e853 3f00 	ldrex	r3, [r3]
 8013aa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8013ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013abc:	e841 2300 	strex	r3, r2, [r1]
 8013ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1e6      	bne.n	8013a96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2220      	movs	r2, #32
 8013acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013ad8:	2303      	movs	r3, #3
 8013ada:	e063      	b.n	8013ba4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f003 0304 	and.w	r3, r3, #4
 8013ae6:	2b04      	cmp	r3, #4
 8013ae8:	d149      	bne.n	8013b7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013aea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013af2:	2200      	movs	r2, #0
 8013af4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f000 f857 	bl	8013bac <UART_WaitOnFlagUntilTimeout>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d03c      	beq.n	8013b7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0c:	e853 3f00 	ldrex	r3, [r3]
 8013b10:	623b      	str	r3, [r7, #32]
   return(result);
 8013b12:	6a3b      	ldr	r3, [r7, #32]
 8013b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b22:	633b      	str	r3, [r7, #48]	; 0x30
 8013b24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b2a:	e841 2300 	strex	r3, r2, [r1]
 8013b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d1e6      	bne.n	8013b04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	3308      	adds	r3, #8
 8013b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	e853 3f00 	ldrex	r3, [r3]
 8013b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f023 0301 	bic.w	r3, r3, #1
 8013b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	3308      	adds	r3, #8
 8013b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b56:	61fa      	str	r2, [r7, #28]
 8013b58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b5a:	69b9      	ldr	r1, [r7, #24]
 8013b5c:	69fa      	ldr	r2, [r7, #28]
 8013b5e:	e841 2300 	strex	r3, r2, [r1]
 8013b62:	617b      	str	r3, [r7, #20]
   return(result);
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d1e5      	bne.n	8013b36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2220      	movs	r2, #32
 8013b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2200      	movs	r2, #0
 8013b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	e012      	b.n	8013ba4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2220      	movs	r2, #32
 8013b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2220      	movs	r2, #32
 8013b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2200      	movs	r2, #0
 8013b92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2200      	movs	r2, #0
 8013b98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013ba2:	2300      	movs	r3, #0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3758      	adds	r7, #88	; 0x58
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	603b      	str	r3, [r7, #0]
 8013bb8:	4613      	mov	r3, r2
 8013bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013bbc:	e04f      	b.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc4:	d04b      	beq.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013bc6:	f7f2 f87b 	bl	8005cc0 <HAL_GetTick>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	1ad3      	subs	r3, r2, r3
 8013bd0:	69ba      	ldr	r2, [r7, #24]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d302      	bcc.n	8013bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d101      	bne.n	8013be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013bdc:	2303      	movs	r3, #3
 8013bde:	e04e      	b.n	8013c7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f003 0304 	and.w	r3, r3, #4
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d037      	beq.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	2b80      	cmp	r3, #128	; 0x80
 8013bf2:	d034      	beq.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	2b40      	cmp	r3, #64	; 0x40
 8013bf8:	d031      	beq.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	69db      	ldr	r3, [r3, #28]
 8013c00:	f003 0308 	and.w	r3, r3, #8
 8013c04:	2b08      	cmp	r3, #8
 8013c06:	d110      	bne.n	8013c2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	2208      	movs	r2, #8
 8013c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f000 f95b 	bl	8013ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2208      	movs	r2, #8
 8013c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2200      	movs	r2, #0
 8013c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8013c26:	2301      	movs	r3, #1
 8013c28:	e029      	b.n	8013c7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	69db      	ldr	r3, [r3, #28]
 8013c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c38:	d111      	bne.n	8013c5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f000 f941 	bl	8013ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2220      	movs	r2, #32
 8013c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2200      	movs	r2, #0
 8013c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013c5a:	2303      	movs	r3, #3
 8013c5c:	e00f      	b.n	8013c7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	69da      	ldr	r2, [r3, #28]
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	4013      	ands	r3, r2
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	bf0c      	ite	eq
 8013c6e:	2301      	moveq	r3, #1
 8013c70:	2300      	movne	r3, #0
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	461a      	mov	r2, r3
 8013c76:	79fb      	ldrb	r3, [r7, #7]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d0a0      	beq.n	8013bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013c7c:	2300      	movs	r3, #0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3710      	adds	r7, #16
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
	...

08013c88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b0a3      	sub	sp, #140	; 0x8c
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	4613      	mov	r3, r2
 8013c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	68ba      	ldr	r2, [r7, #8]
 8013c9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	88fa      	ldrh	r2, [r7, #6]
 8013ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	88fa      	ldrh	r2, [r7, #6]
 8013ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	689b      	ldr	r3, [r3, #8]
 8013cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cba:	d10e      	bne.n	8013cda <UART_Start_Receive_IT+0x52>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	691b      	ldr	r3, [r3, #16]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d105      	bne.n	8013cd0 <UART_Start_Receive_IT+0x48>
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013cce:	e02d      	b.n	8013d2c <UART_Start_Receive_IT+0xa4>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	22ff      	movs	r2, #255	; 0xff
 8013cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013cd8:	e028      	b.n	8013d2c <UART_Start_Receive_IT+0xa4>
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	689b      	ldr	r3, [r3, #8]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10d      	bne.n	8013cfe <UART_Start_Receive_IT+0x76>
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d104      	bne.n	8013cf4 <UART_Start_Receive_IT+0x6c>
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	22ff      	movs	r2, #255	; 0xff
 8013cee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013cf2:	e01b      	b.n	8013d2c <UART_Start_Receive_IT+0xa4>
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	227f      	movs	r2, #127	; 0x7f
 8013cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013cfc:	e016      	b.n	8013d2c <UART_Start_Receive_IT+0xa4>
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	689b      	ldr	r3, [r3, #8]
 8013d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013d06:	d10d      	bne.n	8013d24 <UART_Start_Receive_IT+0x9c>
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	691b      	ldr	r3, [r3, #16]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d104      	bne.n	8013d1a <UART_Start_Receive_IT+0x92>
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	227f      	movs	r2, #127	; 0x7f
 8013d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d18:	e008      	b.n	8013d2c <UART_Start_Receive_IT+0xa4>
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	223f      	movs	r2, #63	; 0x3f
 8013d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d22:	e003      	b.n	8013d2c <UART_Start_Receive_IT+0xa4>
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2200      	movs	r2, #0
 8013d28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2222      	movs	r2, #34	; 0x22
 8013d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	3308      	adds	r3, #8
 8013d42:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d46:	e853 3f00 	ldrex	r3, [r3]
 8013d4a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013d4e:	f043 0301 	orr.w	r3, r3, #1
 8013d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	3308      	adds	r3, #8
 8013d5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013d60:	673a      	str	r2, [r7, #112]	; 0x70
 8013d62:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013d66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d68:	e841 2300 	strex	r3, r2, [r1]
 8013d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8013d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d1e3      	bne.n	8013d3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013d7c:	d14f      	bne.n	8013e1e <UART_Start_Receive_IT+0x196>
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013d84:	88fa      	ldrh	r2, [r7, #6]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d349      	bcc.n	8013e1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	689b      	ldr	r3, [r3, #8]
 8013d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d92:	d107      	bne.n	8013da4 <UART_Start_Receive_IT+0x11c>
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	691b      	ldr	r3, [r3, #16]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d103      	bne.n	8013da4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	4a47      	ldr	r2, [pc, #284]	; (8013ebc <UART_Start_Receive_IT+0x234>)
 8013da0:	675a      	str	r2, [r3, #116]	; 0x74
 8013da2:	e002      	b.n	8013daa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	4a46      	ldr	r2, [pc, #280]	; (8013ec0 <UART_Start_Receive_IT+0x238>)
 8013da8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	691b      	ldr	r3, [r3, #16]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d01a      	beq.n	8013de8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dba:	e853 3f00 	ldrex	r3, [r3]
 8013dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	461a      	mov	r2, r3
 8013dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013dd6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013dda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013ddc:	e841 2300 	strex	r3, r2, [r1]
 8013de0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d1e4      	bne.n	8013db2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	3308      	adds	r3, #8
 8013dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013df2:	e853 3f00 	ldrex	r3, [r3]
 8013df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	3308      	adds	r3, #8
 8013e06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e08:	64ba      	str	r2, [r7, #72]	; 0x48
 8013e0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e10:	e841 2300 	strex	r3, r2, [r1]
 8013e14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d1e5      	bne.n	8013de8 <UART_Start_Receive_IT+0x160>
 8013e1c:	e046      	b.n	8013eac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	689b      	ldr	r3, [r3, #8]
 8013e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e26:	d107      	bne.n	8013e38 <UART_Start_Receive_IT+0x1b0>
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	691b      	ldr	r3, [r3, #16]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d103      	bne.n	8013e38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	4a24      	ldr	r2, [pc, #144]	; (8013ec4 <UART_Start_Receive_IT+0x23c>)
 8013e34:	675a      	str	r2, [r3, #116]	; 0x74
 8013e36:	e002      	b.n	8013e3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	4a23      	ldr	r2, [pc, #140]	; (8013ec8 <UART_Start_Receive_IT+0x240>)
 8013e3c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	691b      	ldr	r3, [r3, #16]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d019      	beq.n	8013e7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4e:	e853 3f00 	ldrex	r3, [r3]
 8013e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013e5a:	677b      	str	r3, [r7, #116]	; 0x74
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	461a      	mov	r2, r3
 8013e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e64:	637b      	str	r3, [r7, #52]	; 0x34
 8013e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e6c:	e841 2300 	strex	r3, r2, [r1]
 8013e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d1e6      	bne.n	8013e46 <UART_Start_Receive_IT+0x1be>
 8013e78:	e018      	b.n	8013eac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	e853 3f00 	ldrex	r3, [r3]
 8013e86:	613b      	str	r3, [r7, #16]
   return(result);
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	f043 0320 	orr.w	r3, r3, #32
 8013e8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	461a      	mov	r2, r3
 8013e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e98:	623b      	str	r3, [r7, #32]
 8013e9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e9c:	69f9      	ldr	r1, [r7, #28]
 8013e9e:	6a3a      	ldr	r2, [r7, #32]
 8013ea0:	e841 2300 	strex	r3, r2, [r1]
 8013ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8013ea6:	69bb      	ldr	r3, [r7, #24]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d1e6      	bne.n	8013e7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013eac:	2300      	movs	r3, #0
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	378c      	adds	r7, #140	; 0x8c
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	08014715 	.word	0x08014715
 8013ec0:	080143a5 	.word	0x080143a5
 8013ec4:	080141e1 	.word	0x080141e1
 8013ec8:	0801401d 	.word	0x0801401d

08013ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b095      	sub	sp, #84	; 0x54
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013edc:	e853 3f00 	ldrex	r3, [r3]
 8013ee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	461a      	mov	r2, r3
 8013ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8013ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013efa:	e841 2300 	strex	r3, r2, [r1]
 8013efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d1e6      	bne.n	8013ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	3308      	adds	r3, #8
 8013f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f0e:	6a3b      	ldr	r3, [r7, #32]
 8013f10:	e853 3f00 	ldrex	r3, [r3]
 8013f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8013f16:	69fb      	ldr	r3, [r7, #28]
 8013f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013f1c:	f023 0301 	bic.w	r3, r3, #1
 8013f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	3308      	adds	r3, #8
 8013f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f32:	e841 2300 	strex	r3, r2, [r1]
 8013f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d1e3      	bne.n	8013f06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d118      	bne.n	8013f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	e853 3f00 	ldrex	r3, [r3]
 8013f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	f023 0310 	bic.w	r3, r3, #16
 8013f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	461a      	mov	r2, r3
 8013f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f64:	61bb      	str	r3, [r7, #24]
 8013f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f68:	6979      	ldr	r1, [r7, #20]
 8013f6a:	69ba      	ldr	r2, [r7, #24]
 8013f6c:	e841 2300 	strex	r3, r2, [r1]
 8013f70:	613b      	str	r3, [r7, #16]
   return(result);
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d1e6      	bne.n	8013f46 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2220      	movs	r2, #32
 8013f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2200      	movs	r2, #0
 8013f84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013f8c:	bf00      	nop
 8013f8e:	3754      	adds	r7, #84	; 0x54
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	2200      	movs	r2, #0
 8013faa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013fb6:	68f8      	ldr	r0, [r7, #12]
 8013fb8:	f7ff fae8 	bl	801358c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013fbc:	bf00      	nop
 8013fbe:	3710      	adds	r7, #16
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b088      	sub	sp, #32
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	e853 3f00 	ldrex	r3, [r3]
 8013fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013fe0:	61fb      	str	r3, [r7, #28]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	61bb      	str	r3, [r7, #24]
 8013fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fee:	6979      	ldr	r1, [r7, #20]
 8013ff0:	69ba      	ldr	r2, [r7, #24]
 8013ff2:	e841 2300 	strex	r3, r2, [r1]
 8013ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d1e6      	bne.n	8013fcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2220      	movs	r2, #32
 8014002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2200      	movs	r2, #0
 801400a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7ff fab3 	bl	8013578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014012:	bf00      	nop
 8014014:	3720      	adds	r7, #32
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
	...

0801401c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b09c      	sub	sp, #112	; 0x70
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801402a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014034:	2b22      	cmp	r3, #34	; 0x22
 8014036:	f040 80c3 	bne.w	80141c0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014040:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014044:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8014048:	b2d9      	uxtb	r1, r3
 801404a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801404e:	b2da      	uxtb	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014054:	400a      	ands	r2, r1
 8014056:	b2d2      	uxtb	r2, r2
 8014058:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801405e:	1c5a      	adds	r2, r3, #1
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801406a:	b29b      	uxth	r3, r3
 801406c:	3b01      	subs	r3, #1
 801406e:	b29a      	uxth	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801407c:	b29b      	uxth	r3, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	f040 80a6 	bne.w	80141d0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801408a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801408c:	e853 3f00 	ldrex	r3, [r3]
 8014090:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014098:	66bb      	str	r3, [r7, #104]	; 0x68
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	461a      	mov	r2, r3
 80140a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80140a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80140a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80140aa:	e841 2300 	strex	r3, r2, [r1]
 80140ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80140b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1e6      	bne.n	8014084 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	3308      	adds	r3, #8
 80140bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c0:	e853 3f00 	ldrex	r3, [r3]
 80140c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80140c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140c8:	f023 0301 	bic.w	r3, r3, #1
 80140cc:	667b      	str	r3, [r7, #100]	; 0x64
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	3308      	adds	r3, #8
 80140d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80140d6:	647a      	str	r2, [r7, #68]	; 0x44
 80140d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80140dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80140de:	e841 2300 	strex	r3, r2, [r1]
 80140e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80140e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1e5      	bne.n	80140b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2220      	movs	r2, #32
 80140ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2200      	movs	r2, #0
 80140fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	4a35      	ldr	r2, [pc, #212]	; (80141d8 <UART_RxISR_8BIT+0x1bc>)
 8014104:	4293      	cmp	r3, r2
 8014106:	d024      	beq.n	8014152 <UART_RxISR_8BIT+0x136>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	4a33      	ldr	r2, [pc, #204]	; (80141dc <UART_RxISR_8BIT+0x1c0>)
 801410e:	4293      	cmp	r3, r2
 8014110:	d01f      	beq.n	8014152 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801411c:	2b00      	cmp	r3, #0
 801411e:	d018      	beq.n	8014152 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	e853 3f00 	ldrex	r3, [r3]
 801412c:	623b      	str	r3, [r7, #32]
   return(result);
 801412e:	6a3b      	ldr	r3, [r7, #32]
 8014130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014134:	663b      	str	r3, [r7, #96]	; 0x60
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	461a      	mov	r2, r3
 801413c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801413e:	633b      	str	r3, [r7, #48]	; 0x30
 8014140:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014146:	e841 2300 	strex	r3, r2, [r1]
 801414a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414e:	2b00      	cmp	r3, #0
 8014150:	d1e6      	bne.n	8014120 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014156:	2b01      	cmp	r3, #1
 8014158:	d12e      	bne.n	80141b8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2200      	movs	r2, #0
 801415e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	e853 3f00 	ldrex	r3, [r3]
 801416c:	60fb      	str	r3, [r7, #12]
   return(result);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f023 0310 	bic.w	r3, r3, #16
 8014174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	461a      	mov	r2, r3
 801417c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801417e:	61fb      	str	r3, [r7, #28]
 8014180:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014182:	69b9      	ldr	r1, [r7, #24]
 8014184:	69fa      	ldr	r2, [r7, #28]
 8014186:	e841 2300 	strex	r3, r2, [r1]
 801418a:	617b      	str	r3, [r7, #20]
   return(result);
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1e6      	bne.n	8014160 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	69db      	ldr	r3, [r3, #28]
 8014198:	f003 0310 	and.w	r3, r3, #16
 801419c:	2b10      	cmp	r3, #16
 801419e:	d103      	bne.n	80141a8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2210      	movs	r2, #16
 80141a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80141ae:	4619      	mov	r1, r3
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7ff f9f5 	bl	80135a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80141b6:	e00b      	b.n	80141d0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ec fecf 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 80141be:	e007      	b.n	80141d0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	699a      	ldr	r2, [r3, #24]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f042 0208 	orr.w	r2, r2, #8
 80141ce:	619a      	str	r2, [r3, #24]
}
 80141d0:	bf00      	nop
 80141d2:	3770      	adds	r7, #112	; 0x70
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	46002400 	.word	0x46002400
 80141dc:	56002400 	.word	0x56002400

080141e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b09c      	sub	sp, #112	; 0x70
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141f8:	2b22      	cmp	r3, #34	; 0x22
 80141fa:	f040 80c3 	bne.w	8014384 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014204:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801420c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801420e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8014212:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8014216:	4013      	ands	r3, r2
 8014218:	b29a      	uxth	r2, r3
 801421a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801421c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014222:	1c9a      	adds	r2, r3, #2
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801422e:	b29b      	uxth	r3, r3
 8014230:	3b01      	subs	r3, #1
 8014232:	b29a      	uxth	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014240:	b29b      	uxth	r3, r3
 8014242:	2b00      	cmp	r3, #0
 8014244:	f040 80a6 	bne.w	8014394 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014250:	e853 3f00 	ldrex	r3, [r3]
 8014254:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801425c:	667b      	str	r3, [r7, #100]	; 0x64
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	461a      	mov	r2, r3
 8014264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014266:	657b      	str	r3, [r7, #84]	; 0x54
 8014268:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801426a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801426c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801426e:	e841 2300 	strex	r3, r2, [r1]
 8014272:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014276:	2b00      	cmp	r3, #0
 8014278:	d1e6      	bne.n	8014248 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	3308      	adds	r3, #8
 8014280:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014284:	e853 3f00 	ldrex	r3, [r3]
 8014288:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428c:	f023 0301 	bic.w	r3, r3, #1
 8014290:	663b      	str	r3, [r7, #96]	; 0x60
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	3308      	adds	r3, #8
 8014298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801429a:	643a      	str	r2, [r7, #64]	; 0x40
 801429c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801429e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142a2:	e841 2300 	strex	r3, r2, [r1]
 80142a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80142a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d1e5      	bne.n	801427a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2220      	movs	r2, #32
 80142b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2200      	movs	r2, #0
 80142c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a35      	ldr	r2, [pc, #212]	; (801439c <UART_RxISR_16BIT+0x1bc>)
 80142c8:	4293      	cmp	r3, r2
 80142ca:	d024      	beq.n	8014316 <UART_RxISR_16BIT+0x136>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4a33      	ldr	r2, [pc, #204]	; (80143a0 <UART_RxISR_16BIT+0x1c0>)
 80142d2:	4293      	cmp	r3, r2
 80142d4:	d01f      	beq.n	8014316 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d018      	beq.n	8014316 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ea:	6a3b      	ldr	r3, [r7, #32]
 80142ec:	e853 3f00 	ldrex	r3, [r3]
 80142f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80142f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	461a      	mov	r2, r3
 8014300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014304:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801430a:	e841 2300 	strex	r3, r2, [r1]
 801430e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014312:	2b00      	cmp	r3, #0
 8014314:	d1e6      	bne.n	80142e4 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801431a:	2b01      	cmp	r3, #1
 801431c:	d12e      	bne.n	801437c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2200      	movs	r2, #0
 8014322:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	e853 3f00 	ldrex	r3, [r3]
 8014330:	60bb      	str	r3, [r7, #8]
   return(result);
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	f023 0310 	bic.w	r3, r3, #16
 8014338:	65bb      	str	r3, [r7, #88]	; 0x58
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	461a      	mov	r2, r3
 8014340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014342:	61bb      	str	r3, [r7, #24]
 8014344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014346:	6979      	ldr	r1, [r7, #20]
 8014348:	69ba      	ldr	r2, [r7, #24]
 801434a:	e841 2300 	strex	r3, r2, [r1]
 801434e:	613b      	str	r3, [r7, #16]
   return(result);
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1e6      	bne.n	8014324 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	69db      	ldr	r3, [r3, #28]
 801435c:	f003 0310 	and.w	r3, r3, #16
 8014360:	2b10      	cmp	r3, #16
 8014362:	d103      	bne.n	801436c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	2210      	movs	r2, #16
 801436a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014372:	4619      	mov	r1, r3
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f7ff f913 	bl	80135a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801437a:	e00b      	b.n	8014394 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f7ec fded 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 8014382:	e007      	b.n	8014394 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	699a      	ldr	r2, [r3, #24]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f042 0208 	orr.w	r2, r2, #8
 8014392:	619a      	str	r2, [r3, #24]
}
 8014394:	bf00      	nop
 8014396:	3770      	adds	r7, #112	; 0x70
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	46002400 	.word	0x46002400
 80143a0:	56002400 	.word	0x56002400

080143a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b0ac      	sub	sp, #176	; 0xb0
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80143b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	69db      	ldr	r3, [r3, #28]
 80143bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	689b      	ldr	r3, [r3, #8]
 80143d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143da:	2b22      	cmp	r3, #34	; 0x22
 80143dc:	f040 8187 	bne.w	80146ee <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80143e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80143ea:	e12a      	b.n	8014642 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80143f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80143fa:	b2d9      	uxtb	r1, r3
 80143fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8014400:	b2da      	uxtb	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014406:	400a      	ands	r2, r1
 8014408:	b2d2      	uxtb	r2, r2
 801440a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014410:	1c5a      	adds	r2, r3, #1
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801441c:	b29b      	uxth	r3, r3
 801441e:	3b01      	subs	r3, #1
 8014420:	b29a      	uxth	r2, r3
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	69db      	ldr	r3, [r3, #28]
 801442e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014436:	f003 0307 	and.w	r3, r3, #7
 801443a:	2b00      	cmp	r3, #0
 801443c:	d053      	beq.n	80144e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801443e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014442:	f003 0301 	and.w	r3, r3, #1
 8014446:	2b00      	cmp	r3, #0
 8014448:	d011      	beq.n	801446e <UART_RxISR_8BIT_FIFOEN+0xca>
 801444a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014452:	2b00      	cmp	r3, #0
 8014454:	d00b      	beq.n	801446e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2201      	movs	r2, #1
 801445c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014464:	f043 0201 	orr.w	r2, r3, #1
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801446e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014472:	f003 0302 	and.w	r3, r3, #2
 8014476:	2b00      	cmp	r3, #0
 8014478:	d011      	beq.n	801449e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801447a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801447e:	f003 0301 	and.w	r3, r3, #1
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00b      	beq.n	801449e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2202      	movs	r2, #2
 801448c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014494:	f043 0204 	orr.w	r2, r3, #4
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801449e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80144a2:	f003 0304 	and.w	r3, r3, #4
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d011      	beq.n	80144ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80144aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80144ae:	f003 0301 	and.w	r3, r3, #1
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00b      	beq.n	80144ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2204      	movs	r2, #4
 80144bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144c4:	f043 0202 	orr.w	r2, r3, #2
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d006      	beq.n	80144e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff f857 	bl	801358c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2200      	movs	r2, #0
 80144e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f040 80a7 	bne.w	8014642 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144fc:	e853 3f00 	ldrex	r3, [r3]
 8014500:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8014502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	461a      	mov	r2, r3
 8014512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014518:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801451a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801451c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801451e:	e841 2300 	strex	r3, r2, [r1]
 8014522:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8014524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014526:	2b00      	cmp	r3, #0
 8014528:	d1e4      	bne.n	80144f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	3308      	adds	r3, #8
 8014530:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014534:	e853 3f00 	ldrex	r3, [r3]
 8014538:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801453a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014540:	f023 0301 	bic.w	r3, r3, #1
 8014544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	3308      	adds	r3, #8
 801454e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014552:	66ba      	str	r2, [r7, #104]	; 0x68
 8014554:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014556:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014558:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801455a:	e841 2300 	strex	r3, r2, [r1]
 801455e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014562:	2b00      	cmp	r3, #0
 8014564:	d1e1      	bne.n	801452a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2220      	movs	r2, #32
 801456a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2200      	movs	r2, #0
 8014572:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2200      	movs	r2, #0
 8014578:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	4a62      	ldr	r2, [pc, #392]	; (8014708 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8014580:	4293      	cmp	r3, r2
 8014582:	d026      	beq.n	80145d2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a60      	ldr	r2, [pc, #384]	; (801470c <UART_RxISR_8BIT_FIFOEN+0x368>)
 801458a:	4293      	cmp	r3, r2
 801458c:	d021      	beq.n	80145d2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014598:	2b00      	cmp	r3, #0
 801459a:	d01a      	beq.n	80145d2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145a4:	e853 3f00 	ldrex	r3, [r3]
 80145a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80145aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80145b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	461a      	mov	r2, r3
 80145ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80145be:	657b      	str	r3, [r7, #84]	; 0x54
 80145c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80145c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80145c6:	e841 2300 	strex	r3, r2, [r1]
 80145ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80145cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d1e4      	bne.n	801459c <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d130      	bne.n	801463c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2200      	movs	r2, #0
 80145de:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145e8:	e853 3f00 	ldrex	r3, [r3]
 80145ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80145ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f0:	f023 0310 	bic.w	r3, r3, #16
 80145f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	461a      	mov	r2, r3
 80145fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014602:	643b      	str	r3, [r7, #64]	; 0x40
 8014604:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014606:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801460a:	e841 2300 	strex	r3, r2, [r1]
 801460e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014612:	2b00      	cmp	r3, #0
 8014614:	d1e4      	bne.n	80145e0 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	69db      	ldr	r3, [r3, #28]
 801461c:	f003 0310 	and.w	r3, r3, #16
 8014620:	2b10      	cmp	r3, #16
 8014622:	d103      	bne.n	801462c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	2210      	movs	r2, #16
 801462a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014632:	4619      	mov	r1, r3
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7fe ffb3 	bl	80135a0 <HAL_UARTEx_RxEventCallback>
 801463a:	e002      	b.n	8014642 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f7ec fc8d 	bl	8000f5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014642:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8014646:	2b00      	cmp	r3, #0
 8014648:	d006      	beq.n	8014658 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 801464a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801464e:	f003 0320 	and.w	r3, r3, #32
 8014652:	2b00      	cmp	r3, #0
 8014654:	f47f aeca 	bne.w	80143ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801465e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014662:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014666:	2b00      	cmp	r3, #0
 8014668:	d049      	beq.n	80146fe <UART_RxISR_8BIT_FIFOEN+0x35a>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014670:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8014674:	429a      	cmp	r2, r3
 8014676:	d242      	bcs.n	80146fe <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	3308      	adds	r3, #8
 801467e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014680:	6a3b      	ldr	r3, [r7, #32]
 8014682:	e853 3f00 	ldrex	r3, [r3]
 8014686:	61fb      	str	r3, [r7, #28]
   return(result);
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801468e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	3308      	adds	r3, #8
 8014698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801469c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801469e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146a4:	e841 2300 	strex	r3, r2, [r1]
 80146a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80146aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d1e3      	bne.n	8014678 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	4a17      	ldr	r2, [pc, #92]	; (8014710 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 80146b4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	e853 3f00 	ldrex	r3, [r3]
 80146c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	f043 0320 	orr.w	r3, r3, #32
 80146ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	461a      	mov	r2, r3
 80146d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80146d8:	61bb      	str	r3, [r7, #24]
 80146da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146dc:	6979      	ldr	r1, [r7, #20]
 80146de:	69ba      	ldr	r2, [r7, #24]
 80146e0:	e841 2300 	strex	r3, r2, [r1]
 80146e4:	613b      	str	r3, [r7, #16]
   return(result);
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d1e4      	bne.n	80146b6 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80146ec:	e007      	b.n	80146fe <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	699a      	ldr	r2, [r3, #24]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	f042 0208 	orr.w	r2, r2, #8
 80146fc:	619a      	str	r2, [r3, #24]
}
 80146fe:	bf00      	nop
 8014700:	37b0      	adds	r7, #176	; 0xb0
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	46002400 	.word	0x46002400
 801470c:	56002400 	.word	0x56002400
 8014710:	0801401d 	.word	0x0801401d

08014714 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b0ae      	sub	sp, #184	; 0xb8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014722:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	69db      	ldr	r3, [r3, #28]
 801472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	689b      	ldr	r3, [r3, #8]
 8014740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801474a:	2b22      	cmp	r3, #34	; 0x22
 801474c:	f040 818b 	bne.w	8014a66 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014756:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801475a:	e12e      	b.n	80149ba <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014762:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801476e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014772:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8014776:	4013      	ands	r3, r2
 8014778:	b29a      	uxth	r2, r3
 801477a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801477e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014784:	1c9a      	adds	r2, r3, #2
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014790:	b29b      	uxth	r3, r3
 8014792:	3b01      	subs	r3, #1
 8014794:	b29a      	uxth	r2, r3
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	69db      	ldr	r3, [r3, #28]
 80147a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80147a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147aa:	f003 0307 	and.w	r3, r3, #7
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d053      	beq.n	801485a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80147b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147b6:	f003 0301 	and.w	r3, r3, #1
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d011      	beq.n	80147e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80147be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80147c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d00b      	beq.n	80147e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2201      	movs	r2, #1
 80147d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80147d8:	f043 0201 	orr.w	r2, r3, #1
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80147e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147e6:	f003 0302 	and.w	r3, r3, #2
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d011      	beq.n	8014812 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80147ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147f2:	f003 0301 	and.w	r3, r3, #1
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00b      	beq.n	8014812 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	2202      	movs	r2, #2
 8014800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014808:	f043 0204 	orr.w	r2, r3, #4
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014812:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014816:	f003 0304 	and.w	r3, r3, #4
 801481a:	2b00      	cmp	r3, #0
 801481c:	d011      	beq.n	8014842 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801481e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014822:	f003 0301 	and.w	r3, r3, #1
 8014826:	2b00      	cmp	r3, #0
 8014828:	d00b      	beq.n	8014842 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2204      	movs	r2, #4
 8014830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014838:	f043 0202 	orr.w	r2, r3, #2
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014848:	2b00      	cmp	r3, #0
 801484a:	d006      	beq.n	801485a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7fe fe9d 	bl	801358c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2200      	movs	r2, #0
 8014856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014860:	b29b      	uxth	r3, r3
 8014862:	2b00      	cmp	r3, #0
 8014864:	f040 80a9 	bne.w	80149ba <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801486e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014870:	e853 3f00 	ldrex	r3, [r3]
 8014874:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801487c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	461a      	mov	r2, r3
 8014886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801488a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801488e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014896:	e841 2300 	strex	r3, r2, [r1]
 801489a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d1e2      	bne.n	8014868 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	3308      	adds	r3, #8
 80148a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80148ac:	e853 3f00 	ldrex	r3, [r3]
 80148b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80148b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80148b8:	f023 0301 	bic.w	r3, r3, #1
 80148bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	3308      	adds	r3, #8
 80148c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80148ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80148cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80148d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80148d2:	e841 2300 	strex	r3, r2, [r1]
 80148d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80148d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d1e1      	bne.n	80148a2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2220      	movs	r2, #32
 80148e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2200      	movs	r2, #0
 80148ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2200      	movs	r2, #0
 80148f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4a62      	ldr	r2, [pc, #392]	; (8014a80 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80148f8:	4293      	cmp	r3, r2
 80148fa:	d026      	beq.n	801494a <UART_RxISR_16BIT_FIFOEN+0x236>
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4a60      	ldr	r2, [pc, #384]	; (8014a84 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8014902:	4293      	cmp	r3, r2
 8014904:	d021      	beq.n	801494a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014910:	2b00      	cmp	r3, #0
 8014912:	d01a      	beq.n	801494a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801491c:	e853 3f00 	ldrex	r3, [r3]
 8014920:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014924:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014928:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	461a      	mov	r2, r3
 8014932:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014936:	65bb      	str	r3, [r7, #88]	; 0x58
 8014938:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801493a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801493c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801493e:	e841 2300 	strex	r3, r2, [r1]
 8014942:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014946:	2b00      	cmp	r3, #0
 8014948:	d1e4      	bne.n	8014914 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801494e:	2b01      	cmp	r3, #1
 8014950:	d130      	bne.n	80149b4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2200      	movs	r2, #0
 8014956:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014960:	e853 3f00 	ldrex	r3, [r3]
 8014964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014968:	f023 0310 	bic.w	r3, r3, #16
 801496c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	461a      	mov	r2, r3
 8014976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801497a:	647b      	str	r3, [r7, #68]	; 0x44
 801497c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801497e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014982:	e841 2300 	strex	r3, r2, [r1]
 8014986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1e4      	bne.n	8014958 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	69db      	ldr	r3, [r3, #28]
 8014994:	f003 0310 	and.w	r3, r3, #16
 8014998:	2b10      	cmp	r3, #16
 801499a:	d103      	bne.n	80149a4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	2210      	movs	r2, #16
 80149a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80149aa:	4619      	mov	r1, r3
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7fe fdf7 	bl	80135a0 <HAL_UARTEx_RxEventCallback>
 80149b2:	e002      	b.n	80149ba <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7ec fad1 	bl	8000f5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80149ba:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d006      	beq.n	80149d0 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 80149c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80149c6:	f003 0320 	and.w	r3, r3, #32
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f47f aec6 	bne.w	801475c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80149d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80149da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d049      	beq.n	8014a76 <UART_RxISR_16BIT_FIFOEN+0x362>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80149e8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d242      	bcs.n	8014a76 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	3308      	adds	r3, #8
 80149f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fa:	e853 3f00 	ldrex	r3, [r3]
 80149fe:	623b      	str	r3, [r7, #32]
   return(result);
 8014a00:	6a3b      	ldr	r3, [r7, #32]
 8014a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	3308      	adds	r3, #8
 8014a10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014a14:	633a      	str	r2, [r7, #48]	; 0x30
 8014a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a1c:	e841 2300 	strex	r3, r2, [r1]
 8014a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d1e3      	bne.n	80149f0 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4a17      	ldr	r2, [pc, #92]	; (8014a88 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8014a2c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	e853 3f00 	ldrex	r3, [r3]
 8014a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f043 0320 	orr.w	r3, r3, #32
 8014a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a50:	61fb      	str	r3, [r7, #28]
 8014a52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a54:	69b9      	ldr	r1, [r7, #24]
 8014a56:	69fa      	ldr	r2, [r7, #28]
 8014a58:	e841 2300 	strex	r3, r2, [r1]
 8014a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d1e4      	bne.n	8014a2e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014a64:	e007      	b.n	8014a76 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	699a      	ldr	r2, [r3, #24]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f042 0208 	orr.w	r2, r2, #8
 8014a74:	619a      	str	r2, [r3, #24]
}
 8014a76:	bf00      	nop
 8014a78:	37b8      	adds	r7, #184	; 0xb8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	46002400 	.word	0x46002400
 8014a84:	56002400 	.word	0x56002400
 8014a88:	080141e1 	.word	0x080141e1

08014a8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014a8c:	b480      	push	{r7}
 8014a8e:	b083      	sub	sp, #12
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014a94:	bf00      	nop
 8014a96:	370c      	adds	r7, #12
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr

08014aa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014aa0:	b480      	push	{r7}
 8014aa2:	b083      	sub	sp, #12
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014aa8:	bf00      	nop
 8014aaa:	370c      	adds	r7, #12
 8014aac:	46bd      	mov	sp, r7
 8014aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab2:	4770      	bx	lr

08014ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b085      	sub	sp, #20
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014ac2:	2b01      	cmp	r3, #1
 8014ac4:	d101      	bne.n	8014aca <HAL_UARTEx_DisableFifoMode+0x16>
 8014ac6:	2302      	movs	r3, #2
 8014ac8:	e027      	b.n	8014b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2201      	movs	r2, #1
 8014ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2224      	movs	r2, #36	; 0x24
 8014ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	f022 0201 	bic.w	r2, r2, #1
 8014af0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2200      	movs	r2, #0
 8014afe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2220      	movs	r2, #32
 8014b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014b18:	2300      	movs	r3, #0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3714      	adds	r7, #20
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b24:	4770      	bx	lr

08014b26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014b26:	b580      	push	{r7, lr}
 8014b28:	b084      	sub	sp, #16
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	6078      	str	r0, [r7, #4]
 8014b2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014b36:	2b01      	cmp	r3, #1
 8014b38:	d101      	bne.n	8014b3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014b3a:	2302      	movs	r3, #2
 8014b3c:	e02d      	b.n	8014b9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2201      	movs	r2, #1
 8014b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2224      	movs	r2, #36	; 0x24
 8014b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	f022 0201 	bic.w	r2, r2, #1
 8014b64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	683a      	ldr	r2, [r7, #0]
 8014b76:	430a      	orrs	r2, r1
 8014b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f850 	bl	8014c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2220      	movs	r2, #32
 8014b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014b98:	2300      	movs	r3, #0
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}

08014ba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014ba2:	b580      	push	{r7, lr}
 8014ba4:	b084      	sub	sp, #16
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	6078      	str	r0, [r7, #4]
 8014baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d101      	bne.n	8014bba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014bb6:	2302      	movs	r3, #2
 8014bb8:	e02d      	b.n	8014c16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2224      	movs	r2, #36	; 0x24
 8014bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	681a      	ldr	r2, [r3, #0]
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f022 0201 	bic.w	r2, r2, #1
 8014be0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	689b      	ldr	r3, [r3, #8]
 8014be8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	683a      	ldr	r2, [r7, #0]
 8014bf2:	430a      	orrs	r2, r1
 8014bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 f812 	bl	8014c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2220      	movs	r2, #32
 8014c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014c14:	2300      	movs	r3, #0
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
	...

08014c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014c20:	b480      	push	{r7}
 8014c22:	b085      	sub	sp, #20
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d108      	bne.n	8014c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2201      	movs	r2, #1
 8014c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014c40:	e031      	b.n	8014ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014c42:	2308      	movs	r3, #8
 8014c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014c46:	2308      	movs	r3, #8
 8014c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	689b      	ldr	r3, [r3, #8]
 8014c50:	0e5b      	lsrs	r3, r3, #25
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	f003 0307 	and.w	r3, r3, #7
 8014c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	0f5b      	lsrs	r3, r3, #29
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	f003 0307 	and.w	r3, r3, #7
 8014c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014c6a:	7bbb      	ldrb	r3, [r7, #14]
 8014c6c:	7b3a      	ldrb	r2, [r7, #12]
 8014c6e:	4911      	ldr	r1, [pc, #68]	; (8014cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8014c70:	5c8a      	ldrb	r2, [r1, r2]
 8014c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014c76:	7b3a      	ldrb	r2, [r7, #12]
 8014c78:	490f      	ldr	r1, [pc, #60]	; (8014cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8014c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c80:	b29a      	uxth	r2, r3
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014c88:	7bfb      	ldrb	r3, [r7, #15]
 8014c8a:	7b7a      	ldrb	r2, [r7, #13]
 8014c8c:	4909      	ldr	r1, [pc, #36]	; (8014cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8014c8e:	5c8a      	ldrb	r2, [r1, r2]
 8014c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014c94:	7b7a      	ldrb	r2, [r7, #13]
 8014c96:	4908      	ldr	r1, [pc, #32]	; (8014cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8014c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c9e:	b29a      	uxth	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014ca6:	bf00      	nop
 8014ca8:	3714      	adds	r7, #20
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr
 8014cb2:	bf00      	nop
 8014cb4:	08019518 	.word	0x08019518
 8014cb8:	08019520 	.word	0x08019520

08014cbc <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b086      	sub	sp, #24
 8014cc0:	af02      	add	r7, sp, #8
 8014cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8014cc8:	f7f0 fffa 	bl	8005cc0 <HAL_GetTick>
 8014ccc:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d102      	bne.n	8014cda <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	73fb      	strb	r3, [r7, #15]
 8014cd8:	e137      	b.n	8014f4a <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	4a76      	ldr	r2, [pc, #472]	; (8014eb8 <HAL_XSPI_Init+0x1fc>)
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	d008      	beq.n	8014cf6 <HAL_XSPI_Init+0x3a>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	4a74      	ldr	r2, [pc, #464]	; (8014ebc <HAL_XSPI_Init+0x200>)
 8014cea:	4293      	cmp	r3, r2
 8014cec:	d003      	beq.n	8014cf6 <HAL_XSPI_Init+0x3a>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	4a73      	ldr	r2, [pc, #460]	; (8014ec0 <HAL_XSPI_Init+0x204>)
 8014cf4:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4a72      	ldr	r2, [pc, #456]	; (8014ec4 <HAL_XSPI_Init+0x208>)
 8014cfc:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a6d      	ldr	r2, [pc, #436]	; (8014eb8 <HAL_XSPI_Init+0x1fc>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d008      	beq.n	8014d1a <HAL_XSPI_Init+0x5e>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	4a6b      	ldr	r2, [pc, #428]	; (8014ebc <HAL_XSPI_Init+0x200>)
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d003      	beq.n	8014d1a <HAL_XSPI_Init+0x5e>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	4a6a      	ldr	r2, [pc, #424]	; (8014ec0 <HAL_XSPI_Init+0x204>)
 8014d18:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4a66      	ldr	r2, [pc, #408]	; (8014eb8 <HAL_XSPI_Init+0x1fc>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d008      	beq.n	8014d36 <HAL_XSPI_Init+0x7a>
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	4a64      	ldr	r2, [pc, #400]	; (8014ebc <HAL_XSPI_Init+0x200>)
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d003      	beq.n	8014d36 <HAL_XSPI_Init+0x7a>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	4a63      	ldr	r2, [pc, #396]	; (8014ec0 <HAL_XSPI_Init+0x204>)
 8014d34:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	f040 8102 	bne.w	8014f4a <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f7ef fd26 	bl	8004798 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8014d4c:	f241 3188 	movw	r1, #5000	; 0x1388
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f000 f8ff 	bl	8014f54 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	689a      	ldr	r2, [r3, #8]
 8014d5c:	4b5a      	ldr	r3, [pc, #360]	; (8014ec8 <HAL_XSPI_Init+0x20c>)
 8014d5e:	4013      	ands	r3, r2
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	68d1      	ldr	r1, [r2, #12]
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	6912      	ldr	r2, [r2, #16]
 8014d68:	0412      	lsls	r2, r2, #16
 8014d6a:	4311      	orrs	r1, r2
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	6952      	ldr	r2, [r2, #20]
 8014d70:	3a01      	subs	r2, #1
 8014d72:	0212      	lsls	r2, r2, #8
 8014d74:	4311      	orrs	r1, r2
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	69d2      	ldr	r2, [r2, #28]
 8014d7a:	4311      	orrs	r1, r2
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	6812      	ldr	r2, [r2, #0]
 8014d80:	430b      	orrs	r3, r1
 8014d82:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4a4b      	ldr	r2, [pc, #300]	; (8014eb8 <HAL_XSPI_Init+0x1fc>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d00e      	beq.n	8014dac <HAL_XSPI_Init+0xf0>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	4a4a      	ldr	r2, [pc, #296]	; (8014ebc <HAL_XSPI_Init+0x200>)
 8014d94:	4293      	cmp	r3, r2
 8014d96:	d009      	beq.n	8014dac <HAL_XSPI_Init+0xf0>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	4a48      	ldr	r2, [pc, #288]	; (8014ec0 <HAL_XSPI_Init+0x204>)
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d004      	beq.n	8014dac <HAL_XSPI_Init+0xf0>
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	4a49      	ldr	r2, [pc, #292]	; (8014ecc <HAL_XSPI_Init+0x210>)
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d10a      	bne.n	8014dc2 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	689b      	ldr	r3, [r3, #8]
 8014db2:	f023 0108 	bic.w	r1, r3, #8
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	430a      	orrs	r2, r1
 8014dc0:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6a1a      	ldr	r2, [r3, #32]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	430a      	orrs	r2, r1
 8014dd6:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	691b      	ldr	r3, [r3, #16]
 8014dde:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014de6:	041a      	lsls	r2, r3, #16
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	430a      	orrs	r2, r1
 8014dee:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4a30      	ldr	r2, [pc, #192]	; (8014eb8 <HAL_XSPI_Init+0x1fc>)
 8014df6:	4293      	cmp	r3, r2
 8014df8:	d00e      	beq.n	8014e18 <HAL_XSPI_Init+0x15c>
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	4a2f      	ldr	r2, [pc, #188]	; (8014ebc <HAL_XSPI_Init+0x200>)
 8014e00:	4293      	cmp	r3, r2
 8014e02:	d009      	beq.n	8014e18 <HAL_XSPI_Init+0x15c>
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	4a2d      	ldr	r2, [pc, #180]	; (8014ec0 <HAL_XSPI_Init+0x204>)
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d004      	beq.n	8014e18 <HAL_XSPI_Init+0x15c>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	4a2e      	ldr	r2, [pc, #184]	; (8014ecc <HAL_XSPI_Init+0x210>)
 8014e14:	4293      	cmp	r3, r2
 8014e16:	d10a      	bne.n	8014e2e <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	691b      	ldr	r3, [r3, #16]
 8014e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	430a      	orrs	r2, r1
 8014e2c:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	687a      	ldr	r2, [r7, #4]
 8014e34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014e36:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	3b01      	subs	r3, #1
 8014e48:	021a      	lsls	r2, r3, #8
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	430a      	orrs	r2, r1
 8014e50:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014e56:	9300      	str	r3, [sp, #0]
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	2120      	movs	r1, #32
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f000 f887 	bl	8014f72 <XSPI_WaitFlagStateUntilTimeout>
 8014e64:	4603      	mov	r3, r0
 8014e66:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8014e68:	7bfb      	ldrb	r3, [r7, #15]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d16d      	bne.n	8014f4a <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	430a      	orrs	r2, r1
 8014e82:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	4a0e      	ldr	r2, [pc, #56]	; (8014ec4 <HAL_XSPI_Init+0x208>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d004      	beq.n	8014e98 <HAL_XSPI_Init+0x1dc>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	4a0f      	ldr	r2, [pc, #60]	; (8014ed0 <HAL_XSPI_Init+0x214>)
 8014e94:	4293      	cmp	r3, r2
 8014e96:	d11d      	bne.n	8014ed4 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	2120      	movs	r1, #32
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f000 f864 	bl	8014f72 <XSPI_WaitFlagStateUntilTimeout>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8014eae:	7bfb      	ldrb	r3, [r7, #15]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d00f      	beq.n	8014ed4 <HAL_XSPI_Init+0x218>
          {
            return status;
 8014eb4:	7bfb      	ldrb	r3, [r7, #15]
 8014eb6:	e049      	b.n	8014f4c <HAL_XSPI_Init+0x290>
 8014eb8:	420d1400 	.word	0x420d1400
 8014ebc:	520d1400 	.word	0x520d1400
 8014ec0:	420d2400 	.word	0x420d2400
 8014ec4:	420d3400 	.word	0x420d3400
 8014ec8:	f8e0c0fc 	.word	0xf8e0c0fc
 8014ecc:	520d2400 	.word	0x520d2400
 8014ed0:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	689a      	ldr	r2, [r3, #8]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	430a      	orrs	r2, r1
 8014ee8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014ef2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014efe:	431a      	orrs	r2, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	430a      	orrs	r2, r1
 8014f06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	f042 0201 	orr.w	r2, r2, #1
 8014f18:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	699b      	ldr	r3, [r3, #24]
 8014f1e:	2b02      	cmp	r3, #2
 8014f20:	d107      	bne.n	8014f32 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	689a      	ldr	r2, [r3, #8]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f042 0202 	orr.w	r2, r2, #2
 8014f30:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014f3a:	d103      	bne.n	8014f44 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2201      	movs	r2, #1
 8014f40:	655a      	str	r2, [r3, #84]	; 0x54
 8014f42:	e002      	b.n	8014f4a <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2202      	movs	r2, #2
 8014f48:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 8014f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	3710      	adds	r7, #16
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}

08014f54 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b083      	sub	sp, #12
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	683a      	ldr	r2, [r7, #0]
 8014f62:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8014f64:	2300      	movs	r3, #0
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	370c      	adds	r7, #12
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f70:	4770      	bx	lr

08014f72 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b084      	sub	sp, #16
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	60f8      	str	r0, [r7, #12]
 8014f7a:	60b9      	str	r1, [r7, #8]
 8014f7c:	603b      	str	r3, [r7, #0]
 8014f7e:	4613      	mov	r3, r2
 8014f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8014f82:	e01a      	b.n	8014fba <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014f84:	69bb      	ldr	r3, [r7, #24]
 8014f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f8a:	d016      	beq.n	8014fba <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014f8c:	f7f0 fe98 	bl	8005cc0 <HAL_GetTick>
 8014f90:	4602      	mov	r2, r0
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	1ad3      	subs	r3, r2, r3
 8014f96:	69ba      	ldr	r2, [r7, #24]
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d302      	bcc.n	8014fa2 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10b      	bne.n	8014fba <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014fa8:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014fae:	f043 0201 	orr.w	r2, r3, #1
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8014fb6:	2303      	movs	r3, #3
 8014fb8:	e00e      	b.n	8014fd8 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	6a1a      	ldr	r2, [r3, #32]
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	4013      	ands	r3, r2
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	bf14      	ite	ne
 8014fc8:	2301      	movne	r3, #1
 8014fca:	2300      	moveq	r3, #0
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	461a      	mov	r2, r3
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d1d6      	bne.n	8014f84 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014fd6:	2300      	movs	r3, #0
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3710      	adds	r7, #16
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014fe0:	b084      	sub	sp, #16
 8014fe2:	b580      	push	{r7, lr}
 8014fe4:	b084      	sub	sp, #16
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	6078      	str	r0, [r7, #4]
 8014fea:	f107 001c 	add.w	r0, r7, #28
 8014fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8014ff2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014ff6:	2b03      	cmp	r3, #3
 8014ff8:	d105      	bne.n	8015006 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f000 fa8e 	bl	8015528 <USB_CoreReset>
 801500c:	4603      	mov	r3, r0
 801500e:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8015010:	7fbb      	ldrb	r3, [r7, #30]
 8015012:	2b01      	cmp	r3, #1
 8015014:	d10b      	bne.n	801502e <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	689b      	ldr	r3, [r3, #8]
 801501a:	f043 0208 	orr.w	r2, r3, #8
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	689b      	ldr	r3, [r3, #8]
 8015026:	f043 0220 	orr.w	r2, r3, #32
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 801502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015030:	4618      	mov	r0, r3
 8015032:	3710      	adds	r7, #16
 8015034:	46bd      	mov	sp, r7
 8015036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801503a:	b004      	add	sp, #16
 801503c:	4770      	bx	lr

0801503e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801503e:	b480      	push	{r7}
 8015040:	b083      	sub	sp, #12
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	f023 0201 	bic.w	r2, r3, #1
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015052:	2300      	movs	r3, #0
}
 8015054:	4618      	mov	r0, r3
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b084      	sub	sp, #16
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	460b      	mov	r3, r1
 801506a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801506c:	2300      	movs	r3, #0
 801506e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	68db      	ldr	r3, [r3, #12]
 8015074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801507c:	78fb      	ldrb	r3, [r7, #3]
 801507e:	2b01      	cmp	r3, #1
 8015080:	d115      	bne.n	80150ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801508e:	200a      	movs	r0, #10
 8015090:	f7f0 fe22 	bl	8005cd8 <HAL_Delay>
      ms += 10U;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	330a      	adds	r3, #10
 8015098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f000 fa36 	bl	801550c <USB_GetMode>
 80150a0:	4603      	mov	r3, r0
 80150a2:	2b01      	cmp	r3, #1
 80150a4:	d01e      	beq.n	80150e4 <USB_SetCurrentMode+0x84>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2bc7      	cmp	r3, #199	; 0xc7
 80150aa:	d9f0      	bls.n	801508e <USB_SetCurrentMode+0x2e>
 80150ac:	e01a      	b.n	80150e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80150ae:	78fb      	ldrb	r3, [r7, #3]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d115      	bne.n	80150e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80150c0:	200a      	movs	r0, #10
 80150c2:	f7f0 fe09 	bl	8005cd8 <HAL_Delay>
      ms += 10U;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	330a      	adds	r3, #10
 80150ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f000 fa1d 	bl	801550c <USB_GetMode>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d005      	beq.n	80150e4 <USB_SetCurrentMode+0x84>
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2bc7      	cmp	r3, #199	; 0xc7
 80150dc:	d9f0      	bls.n	80150c0 <USB_SetCurrentMode+0x60>
 80150de:	e001      	b.n	80150e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80150e0:	2301      	movs	r3, #1
 80150e2:	e005      	b.n	80150f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2bc8      	cmp	r3, #200	; 0xc8
 80150e8:	d101      	bne.n	80150ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80150ea:	2301      	movs	r3, #1
 80150ec:	e000      	b.n	80150f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80150ee:	2300      	movs	r3, #0
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3710      	adds	r7, #16
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80150f8:	b084      	sub	sp, #16
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b086      	sub	sp, #24
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
 8015102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801510a:	2300      	movs	r3, #0
 801510c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015112:	2300      	movs	r3, #0
 8015114:	613b      	str	r3, [r7, #16]
 8015116:	e009      	b.n	801512c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	3340      	adds	r3, #64	; 0x40
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	4413      	add	r3, r2
 8015122:	2200      	movs	r2, #0
 8015124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	3301      	adds	r3, #1
 801512a:	613b      	str	r3, [r7, #16]
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	2b0e      	cmp	r3, #14
 8015130:	d9f2      	bls.n	8015118 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801513e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015142:	2b00      	cmp	r3, #0
 8015144:	d11c      	bne.n	8015180 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	68fa      	ldr	r2, [r7, #12]
 8015150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015154:	f043 0302 	orr.w	r3, r3, #2
 8015158:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801515e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801516a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015176:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	639a      	str	r2, [r3, #56]	; 0x38
 801517e:	e011      	b.n	80151a4 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015184:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015190:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801519c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80151aa:	461a      	mov	r2, r3
 80151ac:	2300      	movs	r3, #0
 80151ae:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80151b0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80151b4:	2b03      	cmp	r3, #3
 80151b6:	d10d      	bne.n	80151d4 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80151b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d104      	bne.n	80151ca <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80151c0:	2100      	movs	r1, #0
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f000 f968 	bl	8015498 <USB_SetDevSpeed>
 80151c8:	e008      	b.n	80151dc <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80151ca:	2101      	movs	r1, #1
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f963 	bl	8015498 <USB_SetDevSpeed>
 80151d2:	e003      	b.n	80151dc <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80151d4:	2103      	movs	r1, #3
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f000 f95e 	bl	8015498 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80151dc:	2110      	movs	r1, #16
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f000 f8fa 	bl	80153d8 <USB_FlushTxFifo>
 80151e4:	4603      	mov	r3, r0
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d001      	beq.n	80151ee <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80151ea:	2301      	movs	r3, #1
 80151ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f000 f924 	bl	801543c <USB_FlushRxFifo>
 80151f4:	4603      	mov	r3, r0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d001      	beq.n	80151fe <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80151fa:	2301      	movs	r3, #1
 80151fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015204:	461a      	mov	r2, r3
 8015206:	2300      	movs	r3, #0
 8015208:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015210:	461a      	mov	r2, r3
 8015212:	2300      	movs	r3, #0
 8015214:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801521c:	461a      	mov	r2, r3
 801521e:	2300      	movs	r3, #0
 8015220:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015222:	2300      	movs	r3, #0
 8015224:	613b      	str	r3, [r7, #16]
 8015226:	e043      	b.n	80152b0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	015a      	lsls	r2, r3, #5
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	4413      	add	r3, r2
 8015230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801523a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801523e:	d118      	bne.n	8015272 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d10a      	bne.n	801525c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	015a      	lsls	r2, r3, #5
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	4413      	add	r3, r2
 801524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015252:	461a      	mov	r2, r3
 8015254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015258:	6013      	str	r3, [r2, #0]
 801525a:	e013      	b.n	8015284 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	015a      	lsls	r2, r3, #5
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	4413      	add	r3, r2
 8015264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015268:	461a      	mov	r2, r3
 801526a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	e008      	b.n	8015284 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	015a      	lsls	r2, r3, #5
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	4413      	add	r3, r2
 801527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801527e:	461a      	mov	r2, r3
 8015280:	2300      	movs	r3, #0
 8015282:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	015a      	lsls	r2, r3, #5
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	4413      	add	r3, r2
 801528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015290:	461a      	mov	r2, r3
 8015292:	2300      	movs	r3, #0
 8015294:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	015a      	lsls	r2, r3, #5
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	4413      	add	r3, r2
 801529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152a2:	461a      	mov	r2, r3
 80152a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80152a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	3301      	adds	r3, #1
 80152ae:	613b      	str	r3, [r7, #16]
 80152b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80152b4:	461a      	mov	r2, r3
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d3b5      	bcc.n	8015228 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80152bc:	2300      	movs	r3, #0
 80152be:	613b      	str	r3, [r7, #16]
 80152c0:	e043      	b.n	801534a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	015a      	lsls	r2, r3, #5
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	4413      	add	r3, r2
 80152ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80152d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80152d8:	d118      	bne.n	801530c <USB_DevInit+0x214>
    {
      if (i == 0U)
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d10a      	bne.n	80152f6 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	015a      	lsls	r2, r3, #5
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	4413      	add	r3, r2
 80152e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152ec:	461a      	mov	r2, r3
 80152ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80152f2:	6013      	str	r3, [r2, #0]
 80152f4:	e013      	b.n	801531e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80152f6:	693b      	ldr	r3, [r7, #16]
 80152f8:	015a      	lsls	r2, r3, #5
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	4413      	add	r3, r2
 80152fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015302:	461a      	mov	r2, r3
 8015304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015308:	6013      	str	r3, [r2, #0]
 801530a:	e008      	b.n	801531e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	015a      	lsls	r2, r3, #5
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	4413      	add	r3, r2
 8015314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015318:	461a      	mov	r2, r3
 801531a:	2300      	movs	r3, #0
 801531c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	015a      	lsls	r2, r3, #5
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	4413      	add	r3, r2
 8015326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801532a:	461a      	mov	r2, r3
 801532c:	2300      	movs	r3, #0
 801532e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	015a      	lsls	r2, r3, #5
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	4413      	add	r3, r2
 8015338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801533c:	461a      	mov	r2, r3
 801533e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	3301      	adds	r3, #1
 8015348:	613b      	str	r3, [r7, #16]
 801534a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801534e:	461a      	mov	r2, r3
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	4293      	cmp	r3, r2
 8015354:	d3b5      	bcc.n	80152c2 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801535c:	691b      	ldr	r3, [r3, #16]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015368:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2200      	movs	r2, #0
 801536e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015376:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801537c:	2b00      	cmp	r3, #0
 801537e:	d105      	bne.n	801538c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	699b      	ldr	r3, [r3, #24]
 8015384:	f043 0210 	orr.w	r2, r3, #16
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	699a      	ldr	r2, [r3, #24]
 8015390:	4b10      	ldr	r3, [pc, #64]	; (80153d4 <USB_DevInit+0x2dc>)
 8015392:	4313      	orrs	r3, r2
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015398:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801539c:	2b00      	cmp	r3, #0
 801539e:	d005      	beq.n	80153ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	f043 0208 	orr.w	r2, r3, #8
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80153ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d107      	bne.n	80153c4 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	699b      	ldr	r3, [r3, #24]
 80153b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80153bc:	f043 0304 	orr.w	r3, r3, #4
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80153c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3718      	adds	r7, #24
 80153ca:	46bd      	mov	sp, r7
 80153cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80153d0:	b004      	add	sp, #16
 80153d2:	4770      	bx	lr
 80153d4:	803c3800 	.word	0x803c3800

080153d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80153d8:	b480      	push	{r7}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80153e2:	2300      	movs	r3, #0
 80153e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	3301      	adds	r3, #1
 80153ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80153f2:	d901      	bls.n	80153f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80153f4:	2303      	movs	r3, #3
 80153f6:	e01b      	b.n	8015430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	691b      	ldr	r3, [r3, #16]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	daf2      	bge.n	80153e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015400:	2300      	movs	r3, #0
 8015402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	019b      	lsls	r3, r3, #6
 8015408:	f043 0220 	orr.w	r2, r3, #32
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	3301      	adds	r3, #1
 8015414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801541c:	d901      	bls.n	8015422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801541e:	2303      	movs	r3, #3
 8015420:	e006      	b.n	8015430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	691b      	ldr	r3, [r3, #16]
 8015426:	f003 0320 	and.w	r3, r3, #32
 801542a:	2b20      	cmp	r3, #32
 801542c:	d0f0      	beq.n	8015410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3714      	adds	r7, #20
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801543c:	b480      	push	{r7}
 801543e:	b085      	sub	sp, #20
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015444:	2300      	movs	r3, #0
 8015446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	3301      	adds	r3, #1
 801544c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8015454:	d901      	bls.n	801545a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015456:	2303      	movs	r3, #3
 8015458:	e018      	b.n	801548c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	691b      	ldr	r3, [r3, #16]
 801545e:	2b00      	cmp	r3, #0
 8015460:	daf2      	bge.n	8015448 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015462:	2300      	movs	r3, #0
 8015464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2210      	movs	r2, #16
 801546a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	3301      	adds	r3, #1
 8015470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8015478:	d901      	bls.n	801547e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801547a:	2303      	movs	r3, #3
 801547c:	e006      	b.n	801548c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	f003 0310 	and.w	r3, r3, #16
 8015486:	2b10      	cmp	r3, #16
 8015488:	d0f0      	beq.n	801546c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801548a:	2300      	movs	r3, #0
}
 801548c:	4618      	mov	r0, r3
 801548e:	3714      	adds	r7, #20
 8015490:	46bd      	mov	sp, r7
 8015492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015496:	4770      	bx	lr

08015498 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015498:	b480      	push	{r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	460b      	mov	r3, r1
 80154a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	78fb      	ldrb	r3, [r7, #3]
 80154b2:	68f9      	ldr	r1, [r7, #12]
 80154b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80154b8:	4313      	orrs	r3, r2
 80154ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3714      	adds	r7, #20
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr

080154ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80154ca:	b480      	push	{r7}
 80154cc:	b085      	sub	sp, #20
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	68fa      	ldr	r2, [r7, #12]
 80154e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80154e4:	f023 0303 	bic.w	r3, r3, #3
 80154e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	68fa      	ldr	r2, [r7, #12]
 80154f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80154f8:	f043 0302 	orr.w	r3, r3, #2
 80154fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80154fe:	2300      	movs	r3, #0
}
 8015500:	4618      	mov	r0, r3
 8015502:	3714      	adds	r7, #20
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801550c:	b480      	push	{r7}
 801550e:	b083      	sub	sp, #12
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	695b      	ldr	r3, [r3, #20]
 8015518:	f003 0301 	and.w	r3, r3, #1
}
 801551c:	4618      	mov	r0, r3
 801551e:	370c      	adds	r7, #12
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015530:	2300      	movs	r3, #0
 8015532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	3301      	adds	r3, #1
 8015538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8015540:	d901      	bls.n	8015546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015542:	2303      	movs	r3, #3
 8015544:	e01b      	b.n	801557e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	691b      	ldr	r3, [r3, #16]
 801554a:	2b00      	cmp	r3, #0
 801554c:	daf2      	bge.n	8015534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801554e:	2300      	movs	r3, #0
 8015550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	691b      	ldr	r3, [r3, #16]
 8015556:	f043 0201 	orr.w	r2, r3, #1
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3301      	adds	r3, #1
 8015562:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801556a:	d901      	bls.n	8015570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801556c:	2303      	movs	r3, #3
 801556e:	e006      	b.n	801557e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	691b      	ldr	r3, [r3, #16]
 8015574:	f003 0301 	and.w	r3, r3, #1
 8015578:	2b01      	cmp	r3, #1
 801557a:	d0f0      	beq.n	801555e <USB_CoreReset+0x36>

  return HAL_OK;
 801557c:	2300      	movs	r3, #0
}
 801557e:	4618      	mov	r0, r3
 8015580:	3714      	adds	r7, #20
 8015582:	46bd      	mov	sp, r7
 8015584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015588:	4770      	bx	lr
	...

0801558c <_strtol_l.constprop.0>:
 801558c:	2b01      	cmp	r3, #1
 801558e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015592:	d001      	beq.n	8015598 <_strtol_l.constprop.0+0xc>
 8015594:	2b24      	cmp	r3, #36	; 0x24
 8015596:	d906      	bls.n	80155a6 <_strtol_l.constprop.0+0x1a>
 8015598:	f001 f8da 	bl	8016750 <__errno>
 801559c:	2316      	movs	r3, #22
 801559e:	6003      	str	r3, [r0, #0]
 80155a0:	2000      	movs	r0, #0
 80155a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a6:	460d      	mov	r5, r1
 80155a8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801568c <_strtol_l.constprop.0+0x100>
 80155ac:	462e      	mov	r6, r5
 80155ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80155b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80155b6:	f017 0708 	ands.w	r7, r7, #8
 80155ba:	d1f7      	bne.n	80155ac <_strtol_l.constprop.0+0x20>
 80155bc:	2c2d      	cmp	r4, #45	; 0x2d
 80155be:	d132      	bne.n	8015626 <_strtol_l.constprop.0+0x9a>
 80155c0:	782c      	ldrb	r4, [r5, #0]
 80155c2:	2701      	movs	r7, #1
 80155c4:	1cb5      	adds	r5, r6, #2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d05b      	beq.n	8015682 <_strtol_l.constprop.0+0xf6>
 80155ca:	2b10      	cmp	r3, #16
 80155cc:	d109      	bne.n	80155e2 <_strtol_l.constprop.0+0x56>
 80155ce:	2c30      	cmp	r4, #48	; 0x30
 80155d0:	d107      	bne.n	80155e2 <_strtol_l.constprop.0+0x56>
 80155d2:	782c      	ldrb	r4, [r5, #0]
 80155d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80155d8:	2c58      	cmp	r4, #88	; 0x58
 80155da:	d14d      	bne.n	8015678 <_strtol_l.constprop.0+0xec>
 80155dc:	786c      	ldrb	r4, [r5, #1]
 80155de:	2310      	movs	r3, #16
 80155e0:	3502      	adds	r5, #2
 80155e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80155e6:	f04f 0e00 	mov.w	lr, #0
 80155ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80155ee:	4676      	mov	r6, lr
 80155f0:	fbb8 f9f3 	udiv	r9, r8, r3
 80155f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80155f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80155fc:	f1bc 0f09 	cmp.w	ip, #9
 8015600:	d816      	bhi.n	8015630 <_strtol_l.constprop.0+0xa4>
 8015602:	4664      	mov	r4, ip
 8015604:	42a3      	cmp	r3, r4
 8015606:	dd24      	ble.n	8015652 <_strtol_l.constprop.0+0xc6>
 8015608:	f1be 3fff 	cmp.w	lr, #4294967295
 801560c:	d008      	beq.n	8015620 <_strtol_l.constprop.0+0x94>
 801560e:	45b1      	cmp	r9, r6
 8015610:	d31c      	bcc.n	801564c <_strtol_l.constprop.0+0xc0>
 8015612:	d101      	bne.n	8015618 <_strtol_l.constprop.0+0x8c>
 8015614:	45a2      	cmp	sl, r4
 8015616:	db19      	blt.n	801564c <_strtol_l.constprop.0+0xc0>
 8015618:	fb06 4603 	mla	r6, r6, r3, r4
 801561c:	f04f 0e01 	mov.w	lr, #1
 8015620:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015624:	e7e8      	b.n	80155f8 <_strtol_l.constprop.0+0x6c>
 8015626:	2c2b      	cmp	r4, #43	; 0x2b
 8015628:	bf04      	itt	eq
 801562a:	782c      	ldrbeq	r4, [r5, #0]
 801562c:	1cb5      	addeq	r5, r6, #2
 801562e:	e7ca      	b.n	80155c6 <_strtol_l.constprop.0+0x3a>
 8015630:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015634:	f1bc 0f19 	cmp.w	ip, #25
 8015638:	d801      	bhi.n	801563e <_strtol_l.constprop.0+0xb2>
 801563a:	3c37      	subs	r4, #55	; 0x37
 801563c:	e7e2      	b.n	8015604 <_strtol_l.constprop.0+0x78>
 801563e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015642:	f1bc 0f19 	cmp.w	ip, #25
 8015646:	d804      	bhi.n	8015652 <_strtol_l.constprop.0+0xc6>
 8015648:	3c57      	subs	r4, #87	; 0x57
 801564a:	e7db      	b.n	8015604 <_strtol_l.constprop.0+0x78>
 801564c:	f04f 3eff 	mov.w	lr, #4294967295
 8015650:	e7e6      	b.n	8015620 <_strtol_l.constprop.0+0x94>
 8015652:	f1be 3fff 	cmp.w	lr, #4294967295
 8015656:	d105      	bne.n	8015664 <_strtol_l.constprop.0+0xd8>
 8015658:	2322      	movs	r3, #34	; 0x22
 801565a:	4646      	mov	r6, r8
 801565c:	6003      	str	r3, [r0, #0]
 801565e:	b942      	cbnz	r2, 8015672 <_strtol_l.constprop.0+0xe6>
 8015660:	4630      	mov	r0, r6
 8015662:	e79e      	b.n	80155a2 <_strtol_l.constprop.0+0x16>
 8015664:	b107      	cbz	r7, 8015668 <_strtol_l.constprop.0+0xdc>
 8015666:	4276      	negs	r6, r6
 8015668:	2a00      	cmp	r2, #0
 801566a:	d0f9      	beq.n	8015660 <_strtol_l.constprop.0+0xd4>
 801566c:	f1be 0f00 	cmp.w	lr, #0
 8015670:	d000      	beq.n	8015674 <_strtol_l.constprop.0+0xe8>
 8015672:	1e69      	subs	r1, r5, #1
 8015674:	6011      	str	r1, [r2, #0]
 8015676:	e7f3      	b.n	8015660 <_strtol_l.constprop.0+0xd4>
 8015678:	2430      	movs	r4, #48	; 0x30
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1b1      	bne.n	80155e2 <_strtol_l.constprop.0+0x56>
 801567e:	2308      	movs	r3, #8
 8015680:	e7af      	b.n	80155e2 <_strtol_l.constprop.0+0x56>
 8015682:	2c30      	cmp	r4, #48	; 0x30
 8015684:	d0a5      	beq.n	80155d2 <_strtol_l.constprop.0+0x46>
 8015686:	230a      	movs	r3, #10
 8015688:	e7ab      	b.n	80155e2 <_strtol_l.constprop.0+0x56>
 801568a:	bf00      	nop
 801568c:	08019529 	.word	0x08019529

08015690 <strtol>:
 8015690:	4613      	mov	r3, r2
 8015692:	460a      	mov	r2, r1
 8015694:	4601      	mov	r1, r0
 8015696:	4802      	ldr	r0, [pc, #8]	; (80156a0 <strtol+0x10>)
 8015698:	6800      	ldr	r0, [r0, #0]
 801569a:	f7ff bf77 	b.w	801558c <_strtol_l.constprop.0>
 801569e:	bf00      	nop
 80156a0:	20000200 	.word	0x20000200

080156a4 <__cvt>:
 80156a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80156a8:	ec55 4b10 	vmov	r4, r5, d0
 80156ac:	2d00      	cmp	r5, #0
 80156ae:	460e      	mov	r6, r1
 80156b0:	4619      	mov	r1, r3
 80156b2:	462b      	mov	r3, r5
 80156b4:	bfb4      	ite	lt
 80156b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80156ba:	2300      	movge	r3, #0
 80156bc:	4691      	mov	r9, r2
 80156be:	bfbf      	itttt	lt
 80156c0:	4622      	movlt	r2, r4
 80156c2:	461d      	movlt	r5, r3
 80156c4:	232d      	movlt	r3, #45	; 0x2d
 80156c6:	4614      	movlt	r4, r2
 80156c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80156cc:	700b      	strb	r3, [r1, #0]
 80156ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156d0:	f023 0820 	bic.w	r8, r3, #32
 80156d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80156d8:	d005      	beq.n	80156e6 <__cvt+0x42>
 80156da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80156de:	d100      	bne.n	80156e2 <__cvt+0x3e>
 80156e0:	3601      	adds	r6, #1
 80156e2:	2102      	movs	r1, #2
 80156e4:	e000      	b.n	80156e8 <__cvt+0x44>
 80156e6:	2103      	movs	r1, #3
 80156e8:	ab03      	add	r3, sp, #12
 80156ea:	4632      	mov	r2, r6
 80156ec:	9301      	str	r3, [sp, #4]
 80156ee:	ab02      	add	r3, sp, #8
 80156f0:	ec45 4b10 	vmov	d0, r4, r5
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	4653      	mov	r3, sl
 80156f8:	f001 f922 	bl	8016940 <_dtoa_r>
 80156fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015700:	4607      	mov	r7, r0
 8015702:	d102      	bne.n	801570a <__cvt+0x66>
 8015704:	f019 0f01 	tst.w	r9, #1
 8015708:	d022      	beq.n	8015750 <__cvt+0xac>
 801570a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801570e:	eb07 0906 	add.w	r9, r7, r6
 8015712:	d110      	bne.n	8015736 <__cvt+0x92>
 8015714:	783b      	ldrb	r3, [r7, #0]
 8015716:	2b30      	cmp	r3, #48	; 0x30
 8015718:	d10a      	bne.n	8015730 <__cvt+0x8c>
 801571a:	2200      	movs	r2, #0
 801571c:	2300      	movs	r3, #0
 801571e:	4620      	mov	r0, r4
 8015720:	4629      	mov	r1, r5
 8015722:	f7eb f9ff 	bl	8000b24 <__aeabi_dcmpeq>
 8015726:	b918      	cbnz	r0, 8015730 <__cvt+0x8c>
 8015728:	f1c6 0601 	rsb	r6, r6, #1
 801572c:	f8ca 6000 	str.w	r6, [sl]
 8015730:	f8da 3000 	ldr.w	r3, [sl]
 8015734:	4499      	add	r9, r3
 8015736:	2200      	movs	r2, #0
 8015738:	2300      	movs	r3, #0
 801573a:	4620      	mov	r0, r4
 801573c:	4629      	mov	r1, r5
 801573e:	f7eb f9f1 	bl	8000b24 <__aeabi_dcmpeq>
 8015742:	b108      	cbz	r0, 8015748 <__cvt+0xa4>
 8015744:	f8cd 900c 	str.w	r9, [sp, #12]
 8015748:	2230      	movs	r2, #48	; 0x30
 801574a:	9b03      	ldr	r3, [sp, #12]
 801574c:	454b      	cmp	r3, r9
 801574e:	d307      	bcc.n	8015760 <__cvt+0xbc>
 8015750:	9b03      	ldr	r3, [sp, #12]
 8015752:	4638      	mov	r0, r7
 8015754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015756:	1bdb      	subs	r3, r3, r7
 8015758:	6013      	str	r3, [r2, #0]
 801575a:	b004      	add	sp, #16
 801575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015760:	1c59      	adds	r1, r3, #1
 8015762:	9103      	str	r1, [sp, #12]
 8015764:	701a      	strb	r2, [r3, #0]
 8015766:	e7f0      	b.n	801574a <__cvt+0xa6>

08015768 <__exponent>:
 8015768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801576a:	2900      	cmp	r1, #0
 801576c:	4603      	mov	r3, r0
 801576e:	bfb8      	it	lt
 8015770:	4249      	neglt	r1, r1
 8015772:	f803 2b02 	strb.w	r2, [r3], #2
 8015776:	bfb4      	ite	lt
 8015778:	222d      	movlt	r2, #45	; 0x2d
 801577a:	222b      	movge	r2, #43	; 0x2b
 801577c:	2909      	cmp	r1, #9
 801577e:	7042      	strb	r2, [r0, #1]
 8015780:	dd29      	ble.n	80157d6 <__exponent+0x6e>
 8015782:	f10d 0207 	add.w	r2, sp, #7
 8015786:	260a      	movs	r6, #10
 8015788:	4617      	mov	r7, r2
 801578a:	4694      	mov	ip, r2
 801578c:	3a01      	subs	r2, #1
 801578e:	fb91 f5f6 	sdiv	r5, r1, r6
 8015792:	fb06 1415 	mls	r4, r6, r5, r1
 8015796:	3430      	adds	r4, #48	; 0x30
 8015798:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801579c:	460c      	mov	r4, r1
 801579e:	4629      	mov	r1, r5
 80157a0:	2c63      	cmp	r4, #99	; 0x63
 80157a2:	dcf2      	bgt.n	801578a <__exponent+0x22>
 80157a4:	3130      	adds	r1, #48	; 0x30
 80157a6:	f1ac 0402 	sub.w	r4, ip, #2
 80157aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80157ae:	1c41      	adds	r1, r0, #1
 80157b0:	4622      	mov	r2, r4
 80157b2:	42ba      	cmp	r2, r7
 80157b4:	d30a      	bcc.n	80157cc <__exponent+0x64>
 80157b6:	f10d 0209 	add.w	r2, sp, #9
 80157ba:	eba2 020c 	sub.w	r2, r2, ip
 80157be:	42bc      	cmp	r4, r7
 80157c0:	bf88      	it	hi
 80157c2:	2200      	movhi	r2, #0
 80157c4:	4413      	add	r3, r2
 80157c6:	1a18      	subs	r0, r3, r0
 80157c8:	b003      	add	sp, #12
 80157ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80157d0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80157d4:	e7ed      	b.n	80157b2 <__exponent+0x4a>
 80157d6:	2330      	movs	r3, #48	; 0x30
 80157d8:	3130      	adds	r1, #48	; 0x30
 80157da:	7083      	strb	r3, [r0, #2]
 80157dc:	1d03      	adds	r3, r0, #4
 80157de:	70c1      	strb	r1, [r0, #3]
 80157e0:	e7f1      	b.n	80157c6 <__exponent+0x5e>
	...

080157e4 <_printf_float>:
 80157e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e8:	ed2d 8b02 	vpush	{d8}
 80157ec:	b08d      	sub	sp, #52	; 0x34
 80157ee:	460c      	mov	r4, r1
 80157f0:	4616      	mov	r6, r2
 80157f2:	461f      	mov	r7, r3
 80157f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80157f8:	4605      	mov	r5, r0
 80157fa:	f000 ff5f 	bl	80166bc <_localeconv_r>
 80157fe:	f8d0 a000 	ldr.w	sl, [r0]
 8015802:	4650      	mov	r0, sl
 8015804:	f7ea fd62 	bl	80002cc <strlen>
 8015808:	2300      	movs	r3, #0
 801580a:	f894 b018 	ldrb.w	fp, [r4, #24]
 801580e:	ee08 0a10 	vmov	s16, r0
 8015812:	930a      	str	r3, [sp, #40]	; 0x28
 8015814:	6823      	ldr	r3, [r4, #0]
 8015816:	9305      	str	r3, [sp, #20]
 8015818:	f8d8 3000 	ldr.w	r3, [r8]
 801581c:	3307      	adds	r3, #7
 801581e:	f023 0307 	bic.w	r3, r3, #7
 8015822:	f103 0208 	add.w	r2, r3, #8
 8015826:	f8c8 2000 	str.w	r2, [r8]
 801582a:	f04f 32ff 	mov.w	r2, #4294967295
 801582e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015836:	f8cd 8018 	str.w	r8, [sp, #24]
 801583a:	9307      	str	r3, [sp, #28]
 801583c:	4b9f      	ldr	r3, [pc, #636]	; (8015abc <_printf_float+0x2d8>)
 801583e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015842:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8015846:	f7eb f99f 	bl	8000b88 <__aeabi_dcmpun>
 801584a:	bb88      	cbnz	r0, 80158b0 <_printf_float+0xcc>
 801584c:	f04f 32ff 	mov.w	r2, #4294967295
 8015850:	4b9a      	ldr	r3, [pc, #616]	; (8015abc <_printf_float+0x2d8>)
 8015852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015856:	f7eb f979 	bl	8000b4c <__aeabi_dcmple>
 801585a:	bb48      	cbnz	r0, 80158b0 <_printf_float+0xcc>
 801585c:	2200      	movs	r2, #0
 801585e:	2300      	movs	r3, #0
 8015860:	4640      	mov	r0, r8
 8015862:	4649      	mov	r1, r9
 8015864:	f7eb f968 	bl	8000b38 <__aeabi_dcmplt>
 8015868:	b110      	cbz	r0, 8015870 <_printf_float+0x8c>
 801586a:	232d      	movs	r3, #45	; 0x2d
 801586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015870:	4a93      	ldr	r2, [pc, #588]	; (8015ac0 <_printf_float+0x2dc>)
 8015872:	4b94      	ldr	r3, [pc, #592]	; (8015ac4 <_printf_float+0x2e0>)
 8015874:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015878:	bf94      	ite	ls
 801587a:	4690      	movls	r8, r2
 801587c:	4698      	movhi	r8, r3
 801587e:	2303      	movs	r3, #3
 8015880:	f04f 0900 	mov.w	r9, #0
 8015884:	6123      	str	r3, [r4, #16]
 8015886:	9b05      	ldr	r3, [sp, #20]
 8015888:	f023 0304 	bic.w	r3, r3, #4
 801588c:	6023      	str	r3, [r4, #0]
 801588e:	4633      	mov	r3, r6
 8015890:	aa0b      	add	r2, sp, #44	; 0x2c
 8015892:	4621      	mov	r1, r4
 8015894:	4628      	mov	r0, r5
 8015896:	9700      	str	r7, [sp, #0]
 8015898:	f000 f9da 	bl	8015c50 <_printf_common>
 801589c:	3001      	adds	r0, #1
 801589e:	f040 8090 	bne.w	80159c2 <_printf_float+0x1de>
 80158a2:	f04f 30ff 	mov.w	r0, #4294967295
 80158a6:	b00d      	add	sp, #52	; 0x34
 80158a8:	ecbd 8b02 	vpop	{d8}
 80158ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b0:	4642      	mov	r2, r8
 80158b2:	464b      	mov	r3, r9
 80158b4:	4640      	mov	r0, r8
 80158b6:	4649      	mov	r1, r9
 80158b8:	f7eb f966 	bl	8000b88 <__aeabi_dcmpun>
 80158bc:	b140      	cbz	r0, 80158d0 <_printf_float+0xec>
 80158be:	464b      	mov	r3, r9
 80158c0:	4a81      	ldr	r2, [pc, #516]	; (8015ac8 <_printf_float+0x2e4>)
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	bfbc      	itt	lt
 80158c6:	232d      	movlt	r3, #45	; 0x2d
 80158c8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80158cc:	4b7f      	ldr	r3, [pc, #508]	; (8015acc <_printf_float+0x2e8>)
 80158ce:	e7d1      	b.n	8015874 <_printf_float+0x90>
 80158d0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80158d4:	6863      	ldr	r3, [r4, #4]
 80158d6:	9206      	str	r2, [sp, #24]
 80158d8:	1c5a      	adds	r2, r3, #1
 80158da:	d13f      	bne.n	801595c <_printf_float+0x178>
 80158dc:	2306      	movs	r3, #6
 80158de:	6063      	str	r3, [r4, #4]
 80158e0:	9b05      	ldr	r3, [sp, #20]
 80158e2:	4628      	mov	r0, r5
 80158e4:	6861      	ldr	r1, [r4, #4]
 80158e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80158ea:	2300      	movs	r3, #0
 80158ec:	9303      	str	r3, [sp, #12]
 80158ee:	ab0a      	add	r3, sp, #40	; 0x28
 80158f0:	6022      	str	r2, [r4, #0]
 80158f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80158f6:	ab09      	add	r3, sp, #36	; 0x24
 80158f8:	ec49 8b10 	vmov	d0, r8, r9
 80158fc:	9300      	str	r3, [sp, #0]
 80158fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015902:	f7ff fecf 	bl	80156a4 <__cvt>
 8015906:	9b06      	ldr	r3, [sp, #24]
 8015908:	4680      	mov	r8, r0
 801590a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801590c:	2b47      	cmp	r3, #71	; 0x47
 801590e:	d108      	bne.n	8015922 <_printf_float+0x13e>
 8015910:	1cc8      	adds	r0, r1, #3
 8015912:	db02      	blt.n	801591a <_printf_float+0x136>
 8015914:	6863      	ldr	r3, [r4, #4]
 8015916:	4299      	cmp	r1, r3
 8015918:	dd41      	ble.n	801599e <_printf_float+0x1ba>
 801591a:	f1ab 0302 	sub.w	r3, fp, #2
 801591e:	fa5f fb83 	uxtb.w	fp, r3
 8015922:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015926:	d820      	bhi.n	801596a <_printf_float+0x186>
 8015928:	3901      	subs	r1, #1
 801592a:	465a      	mov	r2, fp
 801592c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015930:	9109      	str	r1, [sp, #36]	; 0x24
 8015932:	f7ff ff19 	bl	8015768 <__exponent>
 8015936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015938:	4681      	mov	r9, r0
 801593a:	1813      	adds	r3, r2, r0
 801593c:	2a01      	cmp	r2, #1
 801593e:	6123      	str	r3, [r4, #16]
 8015940:	dc02      	bgt.n	8015948 <_printf_float+0x164>
 8015942:	6822      	ldr	r2, [r4, #0]
 8015944:	07d2      	lsls	r2, r2, #31
 8015946:	d501      	bpl.n	801594c <_printf_float+0x168>
 8015948:	3301      	adds	r3, #1
 801594a:	6123      	str	r3, [r4, #16]
 801594c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015950:	2b00      	cmp	r3, #0
 8015952:	d09c      	beq.n	801588e <_printf_float+0xaa>
 8015954:	232d      	movs	r3, #45	; 0x2d
 8015956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801595a:	e798      	b.n	801588e <_printf_float+0xaa>
 801595c:	9a06      	ldr	r2, [sp, #24]
 801595e:	2a47      	cmp	r2, #71	; 0x47
 8015960:	d1be      	bne.n	80158e0 <_printf_float+0xfc>
 8015962:	2b00      	cmp	r3, #0
 8015964:	d1bc      	bne.n	80158e0 <_printf_float+0xfc>
 8015966:	2301      	movs	r3, #1
 8015968:	e7b9      	b.n	80158de <_printf_float+0xfa>
 801596a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801596e:	d118      	bne.n	80159a2 <_printf_float+0x1be>
 8015970:	2900      	cmp	r1, #0
 8015972:	6863      	ldr	r3, [r4, #4]
 8015974:	dd0b      	ble.n	801598e <_printf_float+0x1aa>
 8015976:	6121      	str	r1, [r4, #16]
 8015978:	b913      	cbnz	r3, 8015980 <_printf_float+0x19c>
 801597a:	6822      	ldr	r2, [r4, #0]
 801597c:	07d0      	lsls	r0, r2, #31
 801597e:	d502      	bpl.n	8015986 <_printf_float+0x1a2>
 8015980:	3301      	adds	r3, #1
 8015982:	440b      	add	r3, r1
 8015984:	6123      	str	r3, [r4, #16]
 8015986:	f04f 0900 	mov.w	r9, #0
 801598a:	65a1      	str	r1, [r4, #88]	; 0x58
 801598c:	e7de      	b.n	801594c <_printf_float+0x168>
 801598e:	b913      	cbnz	r3, 8015996 <_printf_float+0x1b2>
 8015990:	6822      	ldr	r2, [r4, #0]
 8015992:	07d2      	lsls	r2, r2, #31
 8015994:	d501      	bpl.n	801599a <_printf_float+0x1b6>
 8015996:	3302      	adds	r3, #2
 8015998:	e7f4      	b.n	8015984 <_printf_float+0x1a0>
 801599a:	2301      	movs	r3, #1
 801599c:	e7f2      	b.n	8015984 <_printf_float+0x1a0>
 801599e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80159a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a4:	4299      	cmp	r1, r3
 80159a6:	db05      	blt.n	80159b4 <_printf_float+0x1d0>
 80159a8:	6823      	ldr	r3, [r4, #0]
 80159aa:	6121      	str	r1, [r4, #16]
 80159ac:	07d8      	lsls	r0, r3, #31
 80159ae:	d5ea      	bpl.n	8015986 <_printf_float+0x1a2>
 80159b0:	1c4b      	adds	r3, r1, #1
 80159b2:	e7e7      	b.n	8015984 <_printf_float+0x1a0>
 80159b4:	2900      	cmp	r1, #0
 80159b6:	bfd4      	ite	le
 80159b8:	f1c1 0202 	rsble	r2, r1, #2
 80159bc:	2201      	movgt	r2, #1
 80159be:	4413      	add	r3, r2
 80159c0:	e7e0      	b.n	8015984 <_printf_float+0x1a0>
 80159c2:	6823      	ldr	r3, [r4, #0]
 80159c4:	055a      	lsls	r2, r3, #21
 80159c6:	d407      	bmi.n	80159d8 <_printf_float+0x1f4>
 80159c8:	6923      	ldr	r3, [r4, #16]
 80159ca:	4642      	mov	r2, r8
 80159cc:	4631      	mov	r1, r6
 80159ce:	4628      	mov	r0, r5
 80159d0:	47b8      	blx	r7
 80159d2:	3001      	adds	r0, #1
 80159d4:	d12c      	bne.n	8015a30 <_printf_float+0x24c>
 80159d6:	e764      	b.n	80158a2 <_printf_float+0xbe>
 80159d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80159dc:	f240 80e0 	bls.w	8015ba0 <_printf_float+0x3bc>
 80159e0:	2200      	movs	r2, #0
 80159e2:	2300      	movs	r3, #0
 80159e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80159e8:	f7eb f89c 	bl	8000b24 <__aeabi_dcmpeq>
 80159ec:	2800      	cmp	r0, #0
 80159ee:	d034      	beq.n	8015a5a <_printf_float+0x276>
 80159f0:	2301      	movs	r3, #1
 80159f2:	4a37      	ldr	r2, [pc, #220]	; (8015ad0 <_printf_float+0x2ec>)
 80159f4:	4631      	mov	r1, r6
 80159f6:	4628      	mov	r0, r5
 80159f8:	47b8      	blx	r7
 80159fa:	3001      	adds	r0, #1
 80159fc:	f43f af51 	beq.w	80158a2 <_printf_float+0xbe>
 8015a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a04:	429a      	cmp	r2, r3
 8015a06:	db02      	blt.n	8015a0e <_printf_float+0x22a>
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	07d8      	lsls	r0, r3, #31
 8015a0c:	d510      	bpl.n	8015a30 <_printf_float+0x24c>
 8015a0e:	ee18 3a10 	vmov	r3, s16
 8015a12:	4652      	mov	r2, sl
 8015a14:	4631      	mov	r1, r6
 8015a16:	4628      	mov	r0, r5
 8015a18:	47b8      	blx	r7
 8015a1a:	3001      	adds	r0, #1
 8015a1c:	f43f af41 	beq.w	80158a2 <_printf_float+0xbe>
 8015a20:	f04f 0800 	mov.w	r8, #0
 8015a24:	f104 091a 	add.w	r9, r4, #26
 8015a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a2a:	3b01      	subs	r3, #1
 8015a2c:	4543      	cmp	r3, r8
 8015a2e:	dc09      	bgt.n	8015a44 <_printf_float+0x260>
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	079b      	lsls	r3, r3, #30
 8015a34:	f100 8107 	bmi.w	8015c46 <_printf_float+0x462>
 8015a38:	68e0      	ldr	r0, [r4, #12]
 8015a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a3c:	4298      	cmp	r0, r3
 8015a3e:	bfb8      	it	lt
 8015a40:	4618      	movlt	r0, r3
 8015a42:	e730      	b.n	80158a6 <_printf_float+0xc2>
 8015a44:	2301      	movs	r3, #1
 8015a46:	464a      	mov	r2, r9
 8015a48:	4631      	mov	r1, r6
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	47b8      	blx	r7
 8015a4e:	3001      	adds	r0, #1
 8015a50:	f43f af27 	beq.w	80158a2 <_printf_float+0xbe>
 8015a54:	f108 0801 	add.w	r8, r8, #1
 8015a58:	e7e6      	b.n	8015a28 <_printf_float+0x244>
 8015a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	dc39      	bgt.n	8015ad4 <_printf_float+0x2f0>
 8015a60:	2301      	movs	r3, #1
 8015a62:	4a1b      	ldr	r2, [pc, #108]	; (8015ad0 <_printf_float+0x2ec>)
 8015a64:	4631      	mov	r1, r6
 8015a66:	4628      	mov	r0, r5
 8015a68:	47b8      	blx	r7
 8015a6a:	3001      	adds	r0, #1
 8015a6c:	f43f af19 	beq.w	80158a2 <_printf_float+0xbe>
 8015a70:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015a74:	4313      	orrs	r3, r2
 8015a76:	d102      	bne.n	8015a7e <_printf_float+0x29a>
 8015a78:	6823      	ldr	r3, [r4, #0]
 8015a7a:	07d9      	lsls	r1, r3, #31
 8015a7c:	d5d8      	bpl.n	8015a30 <_printf_float+0x24c>
 8015a7e:	ee18 3a10 	vmov	r3, s16
 8015a82:	4652      	mov	r2, sl
 8015a84:	4631      	mov	r1, r6
 8015a86:	4628      	mov	r0, r5
 8015a88:	47b8      	blx	r7
 8015a8a:	3001      	adds	r0, #1
 8015a8c:	f43f af09 	beq.w	80158a2 <_printf_float+0xbe>
 8015a90:	f04f 0900 	mov.w	r9, #0
 8015a94:	f104 0a1a 	add.w	sl, r4, #26
 8015a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a9a:	425b      	negs	r3, r3
 8015a9c:	454b      	cmp	r3, r9
 8015a9e:	dc01      	bgt.n	8015aa4 <_printf_float+0x2c0>
 8015aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa2:	e792      	b.n	80159ca <_printf_float+0x1e6>
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	4652      	mov	r2, sl
 8015aa8:	4631      	mov	r1, r6
 8015aaa:	4628      	mov	r0, r5
 8015aac:	47b8      	blx	r7
 8015aae:	3001      	adds	r0, #1
 8015ab0:	f43f aef7 	beq.w	80158a2 <_printf_float+0xbe>
 8015ab4:	f109 0901 	add.w	r9, r9, #1
 8015ab8:	e7ee      	b.n	8015a98 <_printf_float+0x2b4>
 8015aba:	bf00      	nop
 8015abc:	7fefffff 	.word	0x7fefffff
 8015ac0:	08019629 	.word	0x08019629
 8015ac4:	0801962d 	.word	0x0801962d
 8015ac8:	08019631 	.word	0x08019631
 8015acc:	08019635 	.word	0x08019635
 8015ad0:	08019639 	.word	0x08019639
 8015ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	bfa8      	it	ge
 8015adc:	461a      	movge	r2, r3
 8015ade:	2a00      	cmp	r2, #0
 8015ae0:	4691      	mov	r9, r2
 8015ae2:	dc37      	bgt.n	8015b54 <_printf_float+0x370>
 8015ae4:	f04f 0b00 	mov.w	fp, #0
 8015ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015aec:	f104 021a 	add.w	r2, r4, #26
 8015af0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015af2:	9305      	str	r3, [sp, #20]
 8015af4:	eba3 0309 	sub.w	r3, r3, r9
 8015af8:	455b      	cmp	r3, fp
 8015afa:	dc33      	bgt.n	8015b64 <_printf_float+0x380>
 8015afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b00:	429a      	cmp	r2, r3
 8015b02:	db3b      	blt.n	8015b7c <_printf_float+0x398>
 8015b04:	6823      	ldr	r3, [r4, #0]
 8015b06:	07da      	lsls	r2, r3, #31
 8015b08:	d438      	bmi.n	8015b7c <_printf_float+0x398>
 8015b0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b0e:	eba2 0903 	sub.w	r9, r2, r3
 8015b12:	9b05      	ldr	r3, [sp, #20]
 8015b14:	1ad2      	subs	r2, r2, r3
 8015b16:	4591      	cmp	r9, r2
 8015b18:	bfa8      	it	ge
 8015b1a:	4691      	movge	r9, r2
 8015b1c:	f1b9 0f00 	cmp.w	r9, #0
 8015b20:	dc35      	bgt.n	8015b8e <_printf_float+0x3aa>
 8015b22:	f04f 0800 	mov.w	r8, #0
 8015b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015b2a:	f104 0a1a 	add.w	sl, r4, #26
 8015b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b32:	1a9b      	subs	r3, r3, r2
 8015b34:	eba3 0309 	sub.w	r3, r3, r9
 8015b38:	4543      	cmp	r3, r8
 8015b3a:	f77f af79 	ble.w	8015a30 <_printf_float+0x24c>
 8015b3e:	2301      	movs	r3, #1
 8015b40:	4652      	mov	r2, sl
 8015b42:	4631      	mov	r1, r6
 8015b44:	4628      	mov	r0, r5
 8015b46:	47b8      	blx	r7
 8015b48:	3001      	adds	r0, #1
 8015b4a:	f43f aeaa 	beq.w	80158a2 <_printf_float+0xbe>
 8015b4e:	f108 0801 	add.w	r8, r8, #1
 8015b52:	e7ec      	b.n	8015b2e <_printf_float+0x34a>
 8015b54:	4613      	mov	r3, r2
 8015b56:	4631      	mov	r1, r6
 8015b58:	4642      	mov	r2, r8
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	47b8      	blx	r7
 8015b5e:	3001      	adds	r0, #1
 8015b60:	d1c0      	bne.n	8015ae4 <_printf_float+0x300>
 8015b62:	e69e      	b.n	80158a2 <_printf_float+0xbe>
 8015b64:	2301      	movs	r3, #1
 8015b66:	4631      	mov	r1, r6
 8015b68:	4628      	mov	r0, r5
 8015b6a:	9205      	str	r2, [sp, #20]
 8015b6c:	47b8      	blx	r7
 8015b6e:	3001      	adds	r0, #1
 8015b70:	f43f ae97 	beq.w	80158a2 <_printf_float+0xbe>
 8015b74:	f10b 0b01 	add.w	fp, fp, #1
 8015b78:	9a05      	ldr	r2, [sp, #20]
 8015b7a:	e7b9      	b.n	8015af0 <_printf_float+0x30c>
 8015b7c:	ee18 3a10 	vmov	r3, s16
 8015b80:	4652      	mov	r2, sl
 8015b82:	4631      	mov	r1, r6
 8015b84:	4628      	mov	r0, r5
 8015b86:	47b8      	blx	r7
 8015b88:	3001      	adds	r0, #1
 8015b8a:	d1be      	bne.n	8015b0a <_printf_float+0x326>
 8015b8c:	e689      	b.n	80158a2 <_printf_float+0xbe>
 8015b8e:	9a05      	ldr	r2, [sp, #20]
 8015b90:	464b      	mov	r3, r9
 8015b92:	4631      	mov	r1, r6
 8015b94:	4628      	mov	r0, r5
 8015b96:	4442      	add	r2, r8
 8015b98:	47b8      	blx	r7
 8015b9a:	3001      	adds	r0, #1
 8015b9c:	d1c1      	bne.n	8015b22 <_printf_float+0x33e>
 8015b9e:	e680      	b.n	80158a2 <_printf_float+0xbe>
 8015ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ba2:	2a01      	cmp	r2, #1
 8015ba4:	dc01      	bgt.n	8015baa <_printf_float+0x3c6>
 8015ba6:	07db      	lsls	r3, r3, #31
 8015ba8:	d53a      	bpl.n	8015c20 <_printf_float+0x43c>
 8015baa:	2301      	movs	r3, #1
 8015bac:	4642      	mov	r2, r8
 8015bae:	4631      	mov	r1, r6
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	47b8      	blx	r7
 8015bb4:	3001      	adds	r0, #1
 8015bb6:	f43f ae74 	beq.w	80158a2 <_printf_float+0xbe>
 8015bba:	ee18 3a10 	vmov	r3, s16
 8015bbe:	4652      	mov	r2, sl
 8015bc0:	4631      	mov	r1, r6
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	47b8      	blx	r7
 8015bc6:	3001      	adds	r0, #1
 8015bc8:	f43f ae6b 	beq.w	80158a2 <_printf_float+0xbe>
 8015bcc:	2200      	movs	r2, #0
 8015bce:	2300      	movs	r3, #0
 8015bd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015bd8:	f7ea ffa4 	bl	8000b24 <__aeabi_dcmpeq>
 8015bdc:	b9d8      	cbnz	r0, 8015c16 <_printf_float+0x432>
 8015bde:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015be2:	f108 0201 	add.w	r2, r8, #1
 8015be6:	4631      	mov	r1, r6
 8015be8:	4628      	mov	r0, r5
 8015bea:	47b8      	blx	r7
 8015bec:	3001      	adds	r0, #1
 8015bee:	d10e      	bne.n	8015c0e <_printf_float+0x42a>
 8015bf0:	e657      	b.n	80158a2 <_printf_float+0xbe>
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	4652      	mov	r2, sl
 8015bf6:	4631      	mov	r1, r6
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	47b8      	blx	r7
 8015bfc:	3001      	adds	r0, #1
 8015bfe:	f43f ae50 	beq.w	80158a2 <_printf_float+0xbe>
 8015c02:	f108 0801 	add.w	r8, r8, #1
 8015c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c08:	3b01      	subs	r3, #1
 8015c0a:	4543      	cmp	r3, r8
 8015c0c:	dcf1      	bgt.n	8015bf2 <_printf_float+0x40e>
 8015c0e:	464b      	mov	r3, r9
 8015c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015c14:	e6da      	b.n	80159cc <_printf_float+0x1e8>
 8015c16:	f04f 0800 	mov.w	r8, #0
 8015c1a:	f104 0a1a 	add.w	sl, r4, #26
 8015c1e:	e7f2      	b.n	8015c06 <_printf_float+0x422>
 8015c20:	2301      	movs	r3, #1
 8015c22:	4642      	mov	r2, r8
 8015c24:	e7df      	b.n	8015be6 <_printf_float+0x402>
 8015c26:	2301      	movs	r3, #1
 8015c28:	464a      	mov	r2, r9
 8015c2a:	4631      	mov	r1, r6
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	47b8      	blx	r7
 8015c30:	3001      	adds	r0, #1
 8015c32:	f43f ae36 	beq.w	80158a2 <_printf_float+0xbe>
 8015c36:	f108 0801 	add.w	r8, r8, #1
 8015c3a:	68e3      	ldr	r3, [r4, #12]
 8015c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c3e:	1a5b      	subs	r3, r3, r1
 8015c40:	4543      	cmp	r3, r8
 8015c42:	dcf0      	bgt.n	8015c26 <_printf_float+0x442>
 8015c44:	e6f8      	b.n	8015a38 <_printf_float+0x254>
 8015c46:	f04f 0800 	mov.w	r8, #0
 8015c4a:	f104 0919 	add.w	r9, r4, #25
 8015c4e:	e7f4      	b.n	8015c3a <_printf_float+0x456>

08015c50 <_printf_common>:
 8015c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c54:	4616      	mov	r6, r2
 8015c56:	4699      	mov	r9, r3
 8015c58:	688a      	ldr	r2, [r1, #8]
 8015c5a:	4607      	mov	r7, r0
 8015c5c:	690b      	ldr	r3, [r1, #16]
 8015c5e:	460c      	mov	r4, r1
 8015c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c64:	4293      	cmp	r3, r2
 8015c66:	bfb8      	it	lt
 8015c68:	4613      	movlt	r3, r2
 8015c6a:	6033      	str	r3, [r6, #0]
 8015c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c70:	b10a      	cbz	r2, 8015c76 <_printf_common+0x26>
 8015c72:	3301      	adds	r3, #1
 8015c74:	6033      	str	r3, [r6, #0]
 8015c76:	6823      	ldr	r3, [r4, #0]
 8015c78:	0699      	lsls	r1, r3, #26
 8015c7a:	bf42      	ittt	mi
 8015c7c:	6833      	ldrmi	r3, [r6, #0]
 8015c7e:	3302      	addmi	r3, #2
 8015c80:	6033      	strmi	r3, [r6, #0]
 8015c82:	6825      	ldr	r5, [r4, #0]
 8015c84:	f015 0506 	ands.w	r5, r5, #6
 8015c88:	d106      	bne.n	8015c98 <_printf_common+0x48>
 8015c8a:	f104 0a19 	add.w	sl, r4, #25
 8015c8e:	68e3      	ldr	r3, [r4, #12]
 8015c90:	6832      	ldr	r2, [r6, #0]
 8015c92:	1a9b      	subs	r3, r3, r2
 8015c94:	42ab      	cmp	r3, r5
 8015c96:	dc2b      	bgt.n	8015cf0 <_printf_common+0xa0>
 8015c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c9c:	1e13      	subs	r3, r2, #0
 8015c9e:	6822      	ldr	r2, [r4, #0]
 8015ca0:	bf18      	it	ne
 8015ca2:	2301      	movne	r3, #1
 8015ca4:	0692      	lsls	r2, r2, #26
 8015ca6:	d430      	bmi.n	8015d0a <_printf_common+0xba>
 8015ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015cac:	4649      	mov	r1, r9
 8015cae:	4638      	mov	r0, r7
 8015cb0:	47c0      	blx	r8
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	d023      	beq.n	8015cfe <_printf_common+0xae>
 8015cb6:	6823      	ldr	r3, [r4, #0]
 8015cb8:	341a      	adds	r4, #26
 8015cba:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8015cbe:	f003 0306 	and.w	r3, r3, #6
 8015cc2:	2b04      	cmp	r3, #4
 8015cc4:	bf0a      	itet	eq
 8015cc6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8015cca:	2500      	movne	r5, #0
 8015ccc:	6833      	ldreq	r3, [r6, #0]
 8015cce:	f04f 0600 	mov.w	r6, #0
 8015cd2:	bf08      	it	eq
 8015cd4:	1aed      	subeq	r5, r5, r3
 8015cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015cda:	bf08      	it	eq
 8015cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ce0:	4293      	cmp	r3, r2
 8015ce2:	bfc4      	itt	gt
 8015ce4:	1a9b      	subgt	r3, r3, r2
 8015ce6:	18ed      	addgt	r5, r5, r3
 8015ce8:	42b5      	cmp	r5, r6
 8015cea:	d11a      	bne.n	8015d22 <_printf_common+0xd2>
 8015cec:	2000      	movs	r0, #0
 8015cee:	e008      	b.n	8015d02 <_printf_common+0xb2>
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	4652      	mov	r2, sl
 8015cf4:	4649      	mov	r1, r9
 8015cf6:	4638      	mov	r0, r7
 8015cf8:	47c0      	blx	r8
 8015cfa:	3001      	adds	r0, #1
 8015cfc:	d103      	bne.n	8015d06 <_printf_common+0xb6>
 8015cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8015d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d06:	3501      	adds	r5, #1
 8015d08:	e7c1      	b.n	8015c8e <_printf_common+0x3e>
 8015d0a:	18e1      	adds	r1, r4, r3
 8015d0c:	1c5a      	adds	r2, r3, #1
 8015d0e:	2030      	movs	r0, #48	; 0x30
 8015d10:	3302      	adds	r3, #2
 8015d12:	4422      	add	r2, r4
 8015d14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d20:	e7c2      	b.n	8015ca8 <_printf_common+0x58>
 8015d22:	2301      	movs	r3, #1
 8015d24:	4622      	mov	r2, r4
 8015d26:	4649      	mov	r1, r9
 8015d28:	4638      	mov	r0, r7
 8015d2a:	47c0      	blx	r8
 8015d2c:	3001      	adds	r0, #1
 8015d2e:	d0e6      	beq.n	8015cfe <_printf_common+0xae>
 8015d30:	3601      	adds	r6, #1
 8015d32:	e7d9      	b.n	8015ce8 <_printf_common+0x98>

08015d34 <_printf_i>:
 8015d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d38:	7e0f      	ldrb	r7, [r1, #24]
 8015d3a:	4691      	mov	r9, r2
 8015d3c:	4680      	mov	r8, r0
 8015d3e:	460c      	mov	r4, r1
 8015d40:	2f78      	cmp	r7, #120	; 0x78
 8015d42:	469a      	mov	sl, r3
 8015d44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015d4a:	d807      	bhi.n	8015d5c <_printf_i+0x28>
 8015d4c:	2f62      	cmp	r7, #98	; 0x62
 8015d4e:	d80a      	bhi.n	8015d66 <_printf_i+0x32>
 8015d50:	2f00      	cmp	r7, #0
 8015d52:	f000 80d3 	beq.w	8015efc <_printf_i+0x1c8>
 8015d56:	2f58      	cmp	r7, #88	; 0x58
 8015d58:	f000 80bf 	beq.w	8015eda <_printf_i+0x1a6>
 8015d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d64:	e03a      	b.n	8015ddc <_printf_i+0xa8>
 8015d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d6a:	2b15      	cmp	r3, #21
 8015d6c:	d8f6      	bhi.n	8015d5c <_printf_i+0x28>
 8015d6e:	a101      	add	r1, pc, #4	; (adr r1, 8015d74 <_printf_i+0x40>)
 8015d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015d74:	08015dcd 	.word	0x08015dcd
 8015d78:	08015de1 	.word	0x08015de1
 8015d7c:	08015d5d 	.word	0x08015d5d
 8015d80:	08015d5d 	.word	0x08015d5d
 8015d84:	08015d5d 	.word	0x08015d5d
 8015d88:	08015d5d 	.word	0x08015d5d
 8015d8c:	08015de1 	.word	0x08015de1
 8015d90:	08015d5d 	.word	0x08015d5d
 8015d94:	08015d5d 	.word	0x08015d5d
 8015d98:	08015d5d 	.word	0x08015d5d
 8015d9c:	08015d5d 	.word	0x08015d5d
 8015da0:	08015ee3 	.word	0x08015ee3
 8015da4:	08015e0d 	.word	0x08015e0d
 8015da8:	08015e9f 	.word	0x08015e9f
 8015dac:	08015d5d 	.word	0x08015d5d
 8015db0:	08015d5d 	.word	0x08015d5d
 8015db4:	08015f05 	.word	0x08015f05
 8015db8:	08015d5d 	.word	0x08015d5d
 8015dbc:	08015e0d 	.word	0x08015e0d
 8015dc0:	08015d5d 	.word	0x08015d5d
 8015dc4:	08015d5d 	.word	0x08015d5d
 8015dc8:	08015ea7 	.word	0x08015ea7
 8015dcc:	682b      	ldr	r3, [r5, #0]
 8015dce:	1d1a      	adds	r2, r3, #4
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	602a      	str	r2, [r5, #0]
 8015dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ddc:	2301      	movs	r3, #1
 8015dde:	e09e      	b.n	8015f1e <_printf_i+0x1ea>
 8015de0:	6820      	ldr	r0, [r4, #0]
 8015de2:	682b      	ldr	r3, [r5, #0]
 8015de4:	0607      	lsls	r7, r0, #24
 8015de6:	f103 0104 	add.w	r1, r3, #4
 8015dea:	6029      	str	r1, [r5, #0]
 8015dec:	d501      	bpl.n	8015df2 <_printf_i+0xbe>
 8015dee:	681e      	ldr	r6, [r3, #0]
 8015df0:	e003      	b.n	8015dfa <_printf_i+0xc6>
 8015df2:	0646      	lsls	r6, r0, #25
 8015df4:	d5fb      	bpl.n	8015dee <_printf_i+0xba>
 8015df6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015dfa:	2e00      	cmp	r6, #0
 8015dfc:	da03      	bge.n	8015e06 <_printf_i+0xd2>
 8015dfe:	232d      	movs	r3, #45	; 0x2d
 8015e00:	4276      	negs	r6, r6
 8015e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e06:	4859      	ldr	r0, [pc, #356]	; (8015f6c <_printf_i+0x238>)
 8015e08:	230a      	movs	r3, #10
 8015e0a:	e012      	b.n	8015e32 <_printf_i+0xfe>
 8015e0c:	682b      	ldr	r3, [r5, #0]
 8015e0e:	6820      	ldr	r0, [r4, #0]
 8015e10:	1d19      	adds	r1, r3, #4
 8015e12:	6029      	str	r1, [r5, #0]
 8015e14:	0605      	lsls	r5, r0, #24
 8015e16:	d501      	bpl.n	8015e1c <_printf_i+0xe8>
 8015e18:	681e      	ldr	r6, [r3, #0]
 8015e1a:	e002      	b.n	8015e22 <_printf_i+0xee>
 8015e1c:	0641      	lsls	r1, r0, #25
 8015e1e:	d5fb      	bpl.n	8015e18 <_printf_i+0xe4>
 8015e20:	881e      	ldrh	r6, [r3, #0]
 8015e22:	2f6f      	cmp	r7, #111	; 0x6f
 8015e24:	4851      	ldr	r0, [pc, #324]	; (8015f6c <_printf_i+0x238>)
 8015e26:	bf0c      	ite	eq
 8015e28:	2308      	moveq	r3, #8
 8015e2a:	230a      	movne	r3, #10
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e32:	6865      	ldr	r5, [r4, #4]
 8015e34:	2d00      	cmp	r5, #0
 8015e36:	60a5      	str	r5, [r4, #8]
 8015e38:	bfa2      	ittt	ge
 8015e3a:	6821      	ldrge	r1, [r4, #0]
 8015e3c:	f021 0104 	bicge.w	r1, r1, #4
 8015e40:	6021      	strge	r1, [r4, #0]
 8015e42:	b90e      	cbnz	r6, 8015e48 <_printf_i+0x114>
 8015e44:	2d00      	cmp	r5, #0
 8015e46:	d04a      	beq.n	8015ede <_printf_i+0x1aa>
 8015e48:	4615      	mov	r5, r2
 8015e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8015e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8015e52:	5dc7      	ldrb	r7, [r0, r7]
 8015e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015e58:	4637      	mov	r7, r6
 8015e5a:	460e      	mov	r6, r1
 8015e5c:	42bb      	cmp	r3, r7
 8015e5e:	d9f4      	bls.n	8015e4a <_printf_i+0x116>
 8015e60:	2b08      	cmp	r3, #8
 8015e62:	d10b      	bne.n	8015e7c <_printf_i+0x148>
 8015e64:	6823      	ldr	r3, [r4, #0]
 8015e66:	07de      	lsls	r6, r3, #31
 8015e68:	d508      	bpl.n	8015e7c <_printf_i+0x148>
 8015e6a:	6923      	ldr	r3, [r4, #16]
 8015e6c:	6861      	ldr	r1, [r4, #4]
 8015e6e:	4299      	cmp	r1, r3
 8015e70:	bfde      	ittt	le
 8015e72:	2330      	movle	r3, #48	; 0x30
 8015e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015e7c:	1b52      	subs	r2, r2, r5
 8015e7e:	6122      	str	r2, [r4, #16]
 8015e80:	464b      	mov	r3, r9
 8015e82:	aa03      	add	r2, sp, #12
 8015e84:	4621      	mov	r1, r4
 8015e86:	4640      	mov	r0, r8
 8015e88:	f8cd a000 	str.w	sl, [sp]
 8015e8c:	f7ff fee0 	bl	8015c50 <_printf_common>
 8015e90:	3001      	adds	r0, #1
 8015e92:	d149      	bne.n	8015f28 <_printf_i+0x1f4>
 8015e94:	f04f 30ff 	mov.w	r0, #4294967295
 8015e98:	b004      	add	sp, #16
 8015e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e9e:	6823      	ldr	r3, [r4, #0]
 8015ea0:	f043 0320 	orr.w	r3, r3, #32
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	2778      	movs	r7, #120	; 0x78
 8015ea8:	4831      	ldr	r0, [pc, #196]	; (8015f70 <_printf_i+0x23c>)
 8015eaa:	6823      	ldr	r3, [r4, #0]
 8015eac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015eb0:	061f      	lsls	r7, r3, #24
 8015eb2:	6829      	ldr	r1, [r5, #0]
 8015eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8015eb8:	d402      	bmi.n	8015ec0 <_printf_i+0x18c>
 8015eba:	065f      	lsls	r7, r3, #25
 8015ebc:	bf48      	it	mi
 8015ebe:	b2b6      	uxthmi	r6, r6
 8015ec0:	07df      	lsls	r7, r3, #31
 8015ec2:	6029      	str	r1, [r5, #0]
 8015ec4:	bf44      	itt	mi
 8015ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8015eca:	6023      	strmi	r3, [r4, #0]
 8015ecc:	b91e      	cbnz	r6, 8015ed6 <_printf_i+0x1a2>
 8015ece:	6823      	ldr	r3, [r4, #0]
 8015ed0:	f023 0320 	bic.w	r3, r3, #32
 8015ed4:	6023      	str	r3, [r4, #0]
 8015ed6:	2310      	movs	r3, #16
 8015ed8:	e7a8      	b.n	8015e2c <_printf_i+0xf8>
 8015eda:	4824      	ldr	r0, [pc, #144]	; (8015f6c <_printf_i+0x238>)
 8015edc:	e7e5      	b.n	8015eaa <_printf_i+0x176>
 8015ede:	4615      	mov	r5, r2
 8015ee0:	e7be      	b.n	8015e60 <_printf_i+0x12c>
 8015ee2:	682b      	ldr	r3, [r5, #0]
 8015ee4:	6826      	ldr	r6, [r4, #0]
 8015ee6:	1d18      	adds	r0, r3, #4
 8015ee8:	6961      	ldr	r1, [r4, #20]
 8015eea:	6028      	str	r0, [r5, #0]
 8015eec:	0635      	lsls	r5, r6, #24
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	d501      	bpl.n	8015ef6 <_printf_i+0x1c2>
 8015ef2:	6019      	str	r1, [r3, #0]
 8015ef4:	e002      	b.n	8015efc <_printf_i+0x1c8>
 8015ef6:	0670      	lsls	r0, r6, #25
 8015ef8:	d5fb      	bpl.n	8015ef2 <_printf_i+0x1be>
 8015efa:	8019      	strh	r1, [r3, #0]
 8015efc:	2300      	movs	r3, #0
 8015efe:	4615      	mov	r5, r2
 8015f00:	6123      	str	r3, [r4, #16]
 8015f02:	e7bd      	b.n	8015e80 <_printf_i+0x14c>
 8015f04:	682b      	ldr	r3, [r5, #0]
 8015f06:	2100      	movs	r1, #0
 8015f08:	1d1a      	adds	r2, r3, #4
 8015f0a:	602a      	str	r2, [r5, #0]
 8015f0c:	681d      	ldr	r5, [r3, #0]
 8015f0e:	6862      	ldr	r2, [r4, #4]
 8015f10:	4628      	mov	r0, r5
 8015f12:	f000 fc4a 	bl	80167aa <memchr>
 8015f16:	b108      	cbz	r0, 8015f1c <_printf_i+0x1e8>
 8015f18:	1b40      	subs	r0, r0, r5
 8015f1a:	6060      	str	r0, [r4, #4]
 8015f1c:	6863      	ldr	r3, [r4, #4]
 8015f1e:	6123      	str	r3, [r4, #16]
 8015f20:	2300      	movs	r3, #0
 8015f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f26:	e7ab      	b.n	8015e80 <_printf_i+0x14c>
 8015f28:	6923      	ldr	r3, [r4, #16]
 8015f2a:	462a      	mov	r2, r5
 8015f2c:	4649      	mov	r1, r9
 8015f2e:	4640      	mov	r0, r8
 8015f30:	47d0      	blx	sl
 8015f32:	3001      	adds	r0, #1
 8015f34:	d0ae      	beq.n	8015e94 <_printf_i+0x160>
 8015f36:	6823      	ldr	r3, [r4, #0]
 8015f38:	079b      	lsls	r3, r3, #30
 8015f3a:	d413      	bmi.n	8015f64 <_printf_i+0x230>
 8015f3c:	68e0      	ldr	r0, [r4, #12]
 8015f3e:	9b03      	ldr	r3, [sp, #12]
 8015f40:	4298      	cmp	r0, r3
 8015f42:	bfb8      	it	lt
 8015f44:	4618      	movlt	r0, r3
 8015f46:	e7a7      	b.n	8015e98 <_printf_i+0x164>
 8015f48:	2301      	movs	r3, #1
 8015f4a:	4632      	mov	r2, r6
 8015f4c:	4649      	mov	r1, r9
 8015f4e:	4640      	mov	r0, r8
 8015f50:	47d0      	blx	sl
 8015f52:	3001      	adds	r0, #1
 8015f54:	d09e      	beq.n	8015e94 <_printf_i+0x160>
 8015f56:	3501      	adds	r5, #1
 8015f58:	68e3      	ldr	r3, [r4, #12]
 8015f5a:	9903      	ldr	r1, [sp, #12]
 8015f5c:	1a5b      	subs	r3, r3, r1
 8015f5e:	42ab      	cmp	r3, r5
 8015f60:	dcf2      	bgt.n	8015f48 <_printf_i+0x214>
 8015f62:	e7eb      	b.n	8015f3c <_printf_i+0x208>
 8015f64:	2500      	movs	r5, #0
 8015f66:	f104 0619 	add.w	r6, r4, #25
 8015f6a:	e7f5      	b.n	8015f58 <_printf_i+0x224>
 8015f6c:	0801963b 	.word	0x0801963b
 8015f70:	0801964c 	.word	0x0801964c

08015f74 <std>:
 8015f74:	2300      	movs	r3, #0
 8015f76:	b510      	push	{r4, lr}
 8015f78:	4604      	mov	r4, r0
 8015f7a:	6083      	str	r3, [r0, #8]
 8015f7c:	8181      	strh	r1, [r0, #12]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	6643      	str	r3, [r0, #100]	; 0x64
 8015f82:	81c2      	strh	r2, [r0, #14]
 8015f84:	2208      	movs	r2, #8
 8015f86:	6183      	str	r3, [r0, #24]
 8015f88:	e9c0 3300 	strd	r3, r3, [r0]
 8015f8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f90:	305c      	adds	r0, #92	; 0x5c
 8015f92:	f000 fb09 	bl	80165a8 <memset>
 8015f96:	4b0d      	ldr	r3, [pc, #52]	; (8015fcc <std+0x58>)
 8015f98:	6224      	str	r4, [r4, #32]
 8015f9a:	6263      	str	r3, [r4, #36]	; 0x24
 8015f9c:	4b0c      	ldr	r3, [pc, #48]	; (8015fd0 <std+0x5c>)
 8015f9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8015fa0:	4b0c      	ldr	r3, [pc, #48]	; (8015fd4 <std+0x60>)
 8015fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015fa4:	4b0c      	ldr	r3, [pc, #48]	; (8015fd8 <std+0x64>)
 8015fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8015fa8:	4b0c      	ldr	r3, [pc, #48]	; (8015fdc <std+0x68>)
 8015faa:	429c      	cmp	r4, r3
 8015fac:	d006      	beq.n	8015fbc <std+0x48>
 8015fae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015fb2:	4294      	cmp	r4, r2
 8015fb4:	d002      	beq.n	8015fbc <std+0x48>
 8015fb6:	33d0      	adds	r3, #208	; 0xd0
 8015fb8:	429c      	cmp	r4, r3
 8015fba:	d105      	bne.n	8015fc8 <std+0x54>
 8015fbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fc4:	f000 bbee 	b.w	80167a4 <__retarget_lock_init_recursive>
 8015fc8:	bd10      	pop	{r4, pc}
 8015fca:	bf00      	nop
 8015fcc:	08016385 	.word	0x08016385
 8015fd0:	080163a7 	.word	0x080163a7
 8015fd4:	080163df 	.word	0x080163df
 8015fd8:	08016403 	.word	0x08016403
 8015fdc:	200048cc 	.word	0x200048cc

08015fe0 <stdio_exit_handler>:
 8015fe0:	4a02      	ldr	r2, [pc, #8]	; (8015fec <stdio_exit_handler+0xc>)
 8015fe2:	4903      	ldr	r1, [pc, #12]	; (8015ff0 <stdio_exit_handler+0x10>)
 8015fe4:	4803      	ldr	r0, [pc, #12]	; (8015ff4 <stdio_exit_handler+0x14>)
 8015fe6:	f000 b869 	b.w	80160bc <_fwalk_sglue>
 8015fea:	bf00      	nop
 8015fec:	200001a8 	.word	0x200001a8
 8015ff0:	080181e1 	.word	0x080181e1
 8015ff4:	200001b4 	.word	0x200001b4

08015ff8 <cleanup_stdio>:
 8015ff8:	6841      	ldr	r1, [r0, #4]
 8015ffa:	4b0c      	ldr	r3, [pc, #48]	; (801602c <cleanup_stdio+0x34>)
 8015ffc:	4299      	cmp	r1, r3
 8015ffe:	b510      	push	{r4, lr}
 8016000:	4604      	mov	r4, r0
 8016002:	d001      	beq.n	8016008 <cleanup_stdio+0x10>
 8016004:	f002 f8ec 	bl	80181e0 <_fflush_r>
 8016008:	68a1      	ldr	r1, [r4, #8]
 801600a:	4b09      	ldr	r3, [pc, #36]	; (8016030 <cleanup_stdio+0x38>)
 801600c:	4299      	cmp	r1, r3
 801600e:	d002      	beq.n	8016016 <cleanup_stdio+0x1e>
 8016010:	4620      	mov	r0, r4
 8016012:	f002 f8e5 	bl	80181e0 <_fflush_r>
 8016016:	68e1      	ldr	r1, [r4, #12]
 8016018:	4b06      	ldr	r3, [pc, #24]	; (8016034 <cleanup_stdio+0x3c>)
 801601a:	4299      	cmp	r1, r3
 801601c:	d004      	beq.n	8016028 <cleanup_stdio+0x30>
 801601e:	4620      	mov	r0, r4
 8016020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016024:	f002 b8dc 	b.w	80181e0 <_fflush_r>
 8016028:	bd10      	pop	{r4, pc}
 801602a:	bf00      	nop
 801602c:	200048cc 	.word	0x200048cc
 8016030:	20004934 	.word	0x20004934
 8016034:	2000499c 	.word	0x2000499c

08016038 <global_stdio_init.part.0>:
 8016038:	b510      	push	{r4, lr}
 801603a:	4b0b      	ldr	r3, [pc, #44]	; (8016068 <global_stdio_init.part.0+0x30>)
 801603c:	2104      	movs	r1, #4
 801603e:	4c0b      	ldr	r4, [pc, #44]	; (801606c <global_stdio_init.part.0+0x34>)
 8016040:	4a0b      	ldr	r2, [pc, #44]	; (8016070 <global_stdio_init.part.0+0x38>)
 8016042:	4620      	mov	r0, r4
 8016044:	601a      	str	r2, [r3, #0]
 8016046:	2200      	movs	r2, #0
 8016048:	f7ff ff94 	bl	8015f74 <std>
 801604c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016050:	2201      	movs	r2, #1
 8016052:	2109      	movs	r1, #9
 8016054:	f7ff ff8e 	bl	8015f74 <std>
 8016058:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801605c:	2202      	movs	r2, #2
 801605e:	2112      	movs	r1, #18
 8016060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016064:	f7ff bf86 	b.w	8015f74 <std>
 8016068:	20004a04 	.word	0x20004a04
 801606c:	200048cc 	.word	0x200048cc
 8016070:	08015fe1 	.word	0x08015fe1

08016074 <__sfp_lock_acquire>:
 8016074:	4801      	ldr	r0, [pc, #4]	; (801607c <__sfp_lock_acquire+0x8>)
 8016076:	f000 bb96 	b.w	80167a6 <__retarget_lock_acquire_recursive>
 801607a:	bf00      	nop
 801607c:	20004a0d 	.word	0x20004a0d

08016080 <__sfp_lock_release>:
 8016080:	4801      	ldr	r0, [pc, #4]	; (8016088 <__sfp_lock_release+0x8>)
 8016082:	f000 bb91 	b.w	80167a8 <__retarget_lock_release_recursive>
 8016086:	bf00      	nop
 8016088:	20004a0d 	.word	0x20004a0d

0801608c <__sinit>:
 801608c:	b510      	push	{r4, lr}
 801608e:	4604      	mov	r4, r0
 8016090:	f7ff fff0 	bl	8016074 <__sfp_lock_acquire>
 8016094:	6a23      	ldr	r3, [r4, #32]
 8016096:	b11b      	cbz	r3, 80160a0 <__sinit+0x14>
 8016098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801609c:	f7ff bff0 	b.w	8016080 <__sfp_lock_release>
 80160a0:	4b04      	ldr	r3, [pc, #16]	; (80160b4 <__sinit+0x28>)
 80160a2:	6223      	str	r3, [r4, #32]
 80160a4:	4b04      	ldr	r3, [pc, #16]	; (80160b8 <__sinit+0x2c>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d1f5      	bne.n	8016098 <__sinit+0xc>
 80160ac:	f7ff ffc4 	bl	8016038 <global_stdio_init.part.0>
 80160b0:	e7f2      	b.n	8016098 <__sinit+0xc>
 80160b2:	bf00      	nop
 80160b4:	08015ff9 	.word	0x08015ff9
 80160b8:	20004a04 	.word	0x20004a04

080160bc <_fwalk_sglue>:
 80160bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c0:	4607      	mov	r7, r0
 80160c2:	4688      	mov	r8, r1
 80160c4:	4614      	mov	r4, r2
 80160c6:	2600      	movs	r6, #0
 80160c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160cc:	f1b9 0901 	subs.w	r9, r9, #1
 80160d0:	d505      	bpl.n	80160de <_fwalk_sglue+0x22>
 80160d2:	6824      	ldr	r4, [r4, #0]
 80160d4:	2c00      	cmp	r4, #0
 80160d6:	d1f7      	bne.n	80160c8 <_fwalk_sglue+0xc>
 80160d8:	4630      	mov	r0, r6
 80160da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160de:	89ab      	ldrh	r3, [r5, #12]
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d907      	bls.n	80160f4 <_fwalk_sglue+0x38>
 80160e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160e8:	3301      	adds	r3, #1
 80160ea:	d003      	beq.n	80160f4 <_fwalk_sglue+0x38>
 80160ec:	4629      	mov	r1, r5
 80160ee:	4638      	mov	r0, r7
 80160f0:	47c0      	blx	r8
 80160f2:	4306      	orrs	r6, r0
 80160f4:	3568      	adds	r5, #104	; 0x68
 80160f6:	e7e9      	b.n	80160cc <_fwalk_sglue+0x10>

080160f8 <putchar>:
 80160f8:	4b02      	ldr	r3, [pc, #8]	; (8016104 <putchar+0xc>)
 80160fa:	4601      	mov	r1, r0
 80160fc:	6818      	ldr	r0, [r3, #0]
 80160fe:	6882      	ldr	r2, [r0, #8]
 8016100:	f002 b909 	b.w	8018316 <_putc_r>
 8016104:	20000200 	.word	0x20000200

08016108 <_puts_r>:
 8016108:	6a03      	ldr	r3, [r0, #32]
 801610a:	b570      	push	{r4, r5, r6, lr}
 801610c:	4605      	mov	r5, r0
 801610e:	460e      	mov	r6, r1
 8016110:	6884      	ldr	r4, [r0, #8]
 8016112:	b90b      	cbnz	r3, 8016118 <_puts_r+0x10>
 8016114:	f7ff ffba 	bl	801608c <__sinit>
 8016118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801611a:	07db      	lsls	r3, r3, #31
 801611c:	d405      	bmi.n	801612a <_puts_r+0x22>
 801611e:	89a3      	ldrh	r3, [r4, #12]
 8016120:	0598      	lsls	r0, r3, #22
 8016122:	d402      	bmi.n	801612a <_puts_r+0x22>
 8016124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016126:	f000 fb3e 	bl	80167a6 <__retarget_lock_acquire_recursive>
 801612a:	89a3      	ldrh	r3, [r4, #12]
 801612c:	0719      	lsls	r1, r3, #28
 801612e:	d513      	bpl.n	8016158 <_puts_r+0x50>
 8016130:	6923      	ldr	r3, [r4, #16]
 8016132:	b18b      	cbz	r3, 8016158 <_puts_r+0x50>
 8016134:	3e01      	subs	r6, #1
 8016136:	68a3      	ldr	r3, [r4, #8]
 8016138:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801613c:	3b01      	subs	r3, #1
 801613e:	60a3      	str	r3, [r4, #8]
 8016140:	b9e9      	cbnz	r1, 801617e <_puts_r+0x76>
 8016142:	2b00      	cmp	r3, #0
 8016144:	da2e      	bge.n	80161a4 <_puts_r+0x9c>
 8016146:	4622      	mov	r2, r4
 8016148:	210a      	movs	r1, #10
 801614a:	4628      	mov	r0, r5
 801614c:	f000 f996 	bl	801647c <__swbuf_r>
 8016150:	3001      	adds	r0, #1
 8016152:	d007      	beq.n	8016164 <_puts_r+0x5c>
 8016154:	250a      	movs	r5, #10
 8016156:	e007      	b.n	8016168 <_puts_r+0x60>
 8016158:	4621      	mov	r1, r4
 801615a:	4628      	mov	r0, r5
 801615c:	f000 f9cc 	bl	80164f8 <__swsetup_r>
 8016160:	2800      	cmp	r0, #0
 8016162:	d0e7      	beq.n	8016134 <_puts_r+0x2c>
 8016164:	f04f 35ff 	mov.w	r5, #4294967295
 8016168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801616a:	07da      	lsls	r2, r3, #31
 801616c:	d405      	bmi.n	801617a <_puts_r+0x72>
 801616e:	89a3      	ldrh	r3, [r4, #12]
 8016170:	059b      	lsls	r3, r3, #22
 8016172:	d402      	bmi.n	801617a <_puts_r+0x72>
 8016174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016176:	f000 fb17 	bl	80167a8 <__retarget_lock_release_recursive>
 801617a:	4628      	mov	r0, r5
 801617c:	bd70      	pop	{r4, r5, r6, pc}
 801617e:	2b00      	cmp	r3, #0
 8016180:	da04      	bge.n	801618c <_puts_r+0x84>
 8016182:	69a2      	ldr	r2, [r4, #24]
 8016184:	429a      	cmp	r2, r3
 8016186:	dc06      	bgt.n	8016196 <_puts_r+0x8e>
 8016188:	290a      	cmp	r1, #10
 801618a:	d004      	beq.n	8016196 <_puts_r+0x8e>
 801618c:	6823      	ldr	r3, [r4, #0]
 801618e:	1c5a      	adds	r2, r3, #1
 8016190:	6022      	str	r2, [r4, #0]
 8016192:	7019      	strb	r1, [r3, #0]
 8016194:	e7cf      	b.n	8016136 <_puts_r+0x2e>
 8016196:	4622      	mov	r2, r4
 8016198:	4628      	mov	r0, r5
 801619a:	f000 f96f 	bl	801647c <__swbuf_r>
 801619e:	3001      	adds	r0, #1
 80161a0:	d1c9      	bne.n	8016136 <_puts_r+0x2e>
 80161a2:	e7df      	b.n	8016164 <_puts_r+0x5c>
 80161a4:	6823      	ldr	r3, [r4, #0]
 80161a6:	250a      	movs	r5, #10
 80161a8:	1c5a      	adds	r2, r3, #1
 80161aa:	6022      	str	r2, [r4, #0]
 80161ac:	701d      	strb	r5, [r3, #0]
 80161ae:	e7db      	b.n	8016168 <_puts_r+0x60>

080161b0 <puts>:
 80161b0:	4b02      	ldr	r3, [pc, #8]	; (80161bc <puts+0xc>)
 80161b2:	4601      	mov	r1, r0
 80161b4:	6818      	ldr	r0, [r3, #0]
 80161b6:	f7ff bfa7 	b.w	8016108 <_puts_r>
 80161ba:	bf00      	nop
 80161bc:	20000200 	.word	0x20000200

080161c0 <setvbuf>:
 80161c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161c4:	461d      	mov	r5, r3
 80161c6:	4b54      	ldr	r3, [pc, #336]	; (8016318 <setvbuf+0x158>)
 80161c8:	4604      	mov	r4, r0
 80161ca:	460e      	mov	r6, r1
 80161cc:	681f      	ldr	r7, [r3, #0]
 80161ce:	4690      	mov	r8, r2
 80161d0:	b127      	cbz	r7, 80161dc <setvbuf+0x1c>
 80161d2:	6a3b      	ldr	r3, [r7, #32]
 80161d4:	b913      	cbnz	r3, 80161dc <setvbuf+0x1c>
 80161d6:	4638      	mov	r0, r7
 80161d8:	f7ff ff58 	bl	801608c <__sinit>
 80161dc:	f1b8 0f02 	cmp.w	r8, #2
 80161e0:	d006      	beq.n	80161f0 <setvbuf+0x30>
 80161e2:	f1b8 0f01 	cmp.w	r8, #1
 80161e6:	f200 8093 	bhi.w	8016310 <setvbuf+0x150>
 80161ea:	2d00      	cmp	r5, #0
 80161ec:	f2c0 8090 	blt.w	8016310 <setvbuf+0x150>
 80161f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80161f2:	07da      	lsls	r2, r3, #31
 80161f4:	d405      	bmi.n	8016202 <setvbuf+0x42>
 80161f6:	89a3      	ldrh	r3, [r4, #12]
 80161f8:	059b      	lsls	r3, r3, #22
 80161fa:	d402      	bmi.n	8016202 <setvbuf+0x42>
 80161fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161fe:	f000 fad2 	bl	80167a6 <__retarget_lock_acquire_recursive>
 8016202:	4621      	mov	r1, r4
 8016204:	4638      	mov	r0, r7
 8016206:	f001 ffeb 	bl	80181e0 <_fflush_r>
 801620a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801620c:	b141      	cbz	r1, 8016220 <setvbuf+0x60>
 801620e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016212:	4299      	cmp	r1, r3
 8016214:	d002      	beq.n	801621c <setvbuf+0x5c>
 8016216:	4638      	mov	r0, r7
 8016218:	f001 f982 	bl	8017520 <_free_r>
 801621c:	2300      	movs	r3, #0
 801621e:	6363      	str	r3, [r4, #52]	; 0x34
 8016220:	2300      	movs	r3, #0
 8016222:	61a3      	str	r3, [r4, #24]
 8016224:	6063      	str	r3, [r4, #4]
 8016226:	89a3      	ldrh	r3, [r4, #12]
 8016228:	0618      	lsls	r0, r3, #24
 801622a:	d503      	bpl.n	8016234 <setvbuf+0x74>
 801622c:	6921      	ldr	r1, [r4, #16]
 801622e:	4638      	mov	r0, r7
 8016230:	f001 f976 	bl	8017520 <_free_r>
 8016234:	89a3      	ldrh	r3, [r4, #12]
 8016236:	f1b8 0f02 	cmp.w	r8, #2
 801623a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801623e:	f023 0303 	bic.w	r3, r3, #3
 8016242:	81a3      	strh	r3, [r4, #12]
 8016244:	d05e      	beq.n	8016304 <setvbuf+0x144>
 8016246:	ab01      	add	r3, sp, #4
 8016248:	466a      	mov	r2, sp
 801624a:	4621      	mov	r1, r4
 801624c:	4638      	mov	r0, r7
 801624e:	f002 f801 	bl	8018254 <__swhatbuf_r>
 8016252:	89a3      	ldrh	r3, [r4, #12]
 8016254:	4318      	orrs	r0, r3
 8016256:	81a0      	strh	r0, [r4, #12]
 8016258:	bb2d      	cbnz	r5, 80162a6 <setvbuf+0xe6>
 801625a:	9d00      	ldr	r5, [sp, #0]
 801625c:	4628      	mov	r0, r5
 801625e:	f001 f9ab 	bl	80175b8 <malloc>
 8016262:	4606      	mov	r6, r0
 8016264:	2800      	cmp	r0, #0
 8016266:	d14f      	bne.n	8016308 <setvbuf+0x148>
 8016268:	f8dd 9000 	ldr.w	r9, [sp]
 801626c:	45a9      	cmp	r9, r5
 801626e:	d13d      	bne.n	80162ec <setvbuf+0x12c>
 8016270:	f04f 35ff 	mov.w	r5, #4294967295
 8016274:	2200      	movs	r2, #0
 8016276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801627a:	60a2      	str	r2, [r4, #8]
 801627c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8016280:	f043 0302 	orr.w	r3, r3, #2
 8016284:	6022      	str	r2, [r4, #0]
 8016286:	6122      	str	r2, [r4, #16]
 8016288:	2201      	movs	r2, #1
 801628a:	81a3      	strh	r3, [r4, #12]
 801628c:	6162      	str	r2, [r4, #20]
 801628e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016290:	07d1      	lsls	r1, r2, #31
 8016292:	d404      	bmi.n	801629e <setvbuf+0xde>
 8016294:	059b      	lsls	r3, r3, #22
 8016296:	d402      	bmi.n	801629e <setvbuf+0xde>
 8016298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801629a:	f000 fa85 	bl	80167a8 <__retarget_lock_release_recursive>
 801629e:	4628      	mov	r0, r5
 80162a0:	b003      	add	sp, #12
 80162a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162a6:	2e00      	cmp	r6, #0
 80162a8:	d0d8      	beq.n	801625c <setvbuf+0x9c>
 80162aa:	6a3b      	ldr	r3, [r7, #32]
 80162ac:	b913      	cbnz	r3, 80162b4 <setvbuf+0xf4>
 80162ae:	4638      	mov	r0, r7
 80162b0:	f7ff feec 	bl	801608c <__sinit>
 80162b4:	f1b8 0f01 	cmp.w	r8, #1
 80162b8:	6026      	str	r6, [r4, #0]
 80162ba:	bf02      	ittt	eq
 80162bc:	89a3      	ldrheq	r3, [r4, #12]
 80162be:	f043 0301 	orreq.w	r3, r3, #1
 80162c2:	81a3      	strheq	r3, [r4, #12]
 80162c4:	89a3      	ldrh	r3, [r4, #12]
 80162c6:	f013 0208 	ands.w	r2, r3, #8
 80162ca:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80162ce:	d01d      	beq.n	801630c <setvbuf+0x14c>
 80162d0:	07da      	lsls	r2, r3, #31
 80162d2:	bf45      	ittet	mi
 80162d4:	2200      	movmi	r2, #0
 80162d6:	426d      	negmi	r5, r5
 80162d8:	60a5      	strpl	r5, [r4, #8]
 80162da:	60a2      	strmi	r2, [r4, #8]
 80162dc:	bf48      	it	mi
 80162de:	61a5      	strmi	r5, [r4, #24]
 80162e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80162e2:	f015 0501 	ands.w	r5, r5, #1
 80162e6:	d0d5      	beq.n	8016294 <setvbuf+0xd4>
 80162e8:	2500      	movs	r5, #0
 80162ea:	e7d8      	b.n	801629e <setvbuf+0xde>
 80162ec:	4648      	mov	r0, r9
 80162ee:	f001 f963 	bl	80175b8 <malloc>
 80162f2:	4606      	mov	r6, r0
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d0bb      	beq.n	8016270 <setvbuf+0xb0>
 80162f8:	89a3      	ldrh	r3, [r4, #12]
 80162fa:	464d      	mov	r5, r9
 80162fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016300:	81a3      	strh	r3, [r4, #12]
 8016302:	e7d2      	b.n	80162aa <setvbuf+0xea>
 8016304:	2500      	movs	r5, #0
 8016306:	e7b5      	b.n	8016274 <setvbuf+0xb4>
 8016308:	46a9      	mov	r9, r5
 801630a:	e7f5      	b.n	80162f8 <setvbuf+0x138>
 801630c:	60a2      	str	r2, [r4, #8]
 801630e:	e7e7      	b.n	80162e0 <setvbuf+0x120>
 8016310:	f04f 35ff 	mov.w	r5, #4294967295
 8016314:	e7c3      	b.n	801629e <setvbuf+0xde>
 8016316:	bf00      	nop
 8016318:	20000200 	.word	0x20000200

0801631c <sniprintf>:
 801631c:	b40c      	push	{r2, r3}
 801631e:	4b18      	ldr	r3, [pc, #96]	; (8016380 <sniprintf+0x64>)
 8016320:	b530      	push	{r4, r5, lr}
 8016322:	1e0c      	subs	r4, r1, #0
 8016324:	b09d      	sub	sp, #116	; 0x74
 8016326:	681d      	ldr	r5, [r3, #0]
 8016328:	da08      	bge.n	801633c <sniprintf+0x20>
 801632a:	238b      	movs	r3, #139	; 0x8b
 801632c:	f04f 30ff 	mov.w	r0, #4294967295
 8016330:	602b      	str	r3, [r5, #0]
 8016332:	b01d      	add	sp, #116	; 0x74
 8016334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016338:	b002      	add	sp, #8
 801633a:	4770      	bx	lr
 801633c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016340:	9002      	str	r0, [sp, #8]
 8016342:	9006      	str	r0, [sp, #24]
 8016344:	a902      	add	r1, sp, #8
 8016346:	f8ad 3014 	strh.w	r3, [sp, #20]
 801634a:	bf14      	ite	ne
 801634c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016350:	4623      	moveq	r3, r4
 8016352:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016354:	4628      	mov	r0, r5
 8016356:	9304      	str	r3, [sp, #16]
 8016358:	9307      	str	r3, [sp, #28]
 801635a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801635e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016362:	ab21      	add	r3, sp, #132	; 0x84
 8016364:	9301      	str	r3, [sp, #4]
 8016366:	f001 fdb9 	bl	8017edc <_svfiprintf_r>
 801636a:	1c43      	adds	r3, r0, #1
 801636c:	bfbc      	itt	lt
 801636e:	238b      	movlt	r3, #139	; 0x8b
 8016370:	602b      	strlt	r3, [r5, #0]
 8016372:	2c00      	cmp	r4, #0
 8016374:	d0dd      	beq.n	8016332 <sniprintf+0x16>
 8016376:	9b02      	ldr	r3, [sp, #8]
 8016378:	2200      	movs	r2, #0
 801637a:	701a      	strb	r2, [r3, #0]
 801637c:	e7d9      	b.n	8016332 <sniprintf+0x16>
 801637e:	bf00      	nop
 8016380:	20000200 	.word	0x20000200

08016384 <__sread>:
 8016384:	b510      	push	{r4, lr}
 8016386:	460c      	mov	r4, r1
 8016388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801638c:	f000 f9bc 	bl	8016708 <_read_r>
 8016390:	2800      	cmp	r0, #0
 8016392:	bfab      	itete	ge
 8016394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016396:	89a3      	ldrhlt	r3, [r4, #12]
 8016398:	181b      	addge	r3, r3, r0
 801639a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801639e:	bfac      	ite	ge
 80163a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80163a2:	81a3      	strhlt	r3, [r4, #12]
 80163a4:	bd10      	pop	{r4, pc}

080163a6 <__swrite>:
 80163a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163aa:	461f      	mov	r7, r3
 80163ac:	898b      	ldrh	r3, [r1, #12]
 80163ae:	4605      	mov	r5, r0
 80163b0:	460c      	mov	r4, r1
 80163b2:	05db      	lsls	r3, r3, #23
 80163b4:	4616      	mov	r6, r2
 80163b6:	d505      	bpl.n	80163c4 <__swrite+0x1e>
 80163b8:	2302      	movs	r3, #2
 80163ba:	2200      	movs	r2, #0
 80163bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163c0:	f000 f990 	bl	80166e4 <_lseek_r>
 80163c4:	89a3      	ldrh	r3, [r4, #12]
 80163c6:	4632      	mov	r2, r6
 80163c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163cc:	4628      	mov	r0, r5
 80163ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163d2:	81a3      	strh	r3, [r4, #12]
 80163d4:	463b      	mov	r3, r7
 80163d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163da:	f000 b9a7 	b.w	801672c <_write_r>

080163de <__sseek>:
 80163de:	b510      	push	{r4, lr}
 80163e0:	460c      	mov	r4, r1
 80163e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163e6:	f000 f97d 	bl	80166e4 <_lseek_r>
 80163ea:	1c43      	adds	r3, r0, #1
 80163ec:	89a3      	ldrh	r3, [r4, #12]
 80163ee:	bf15      	itete	ne
 80163f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80163f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80163f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80163fa:	81a3      	strheq	r3, [r4, #12]
 80163fc:	bf18      	it	ne
 80163fe:	81a3      	strhne	r3, [r4, #12]
 8016400:	bd10      	pop	{r4, pc}

08016402 <__sclose>:
 8016402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016406:	f000 b95d 	b.w	80166c4 <_close_r>

0801640a <_vsniprintf_r>:
 801640a:	b530      	push	{r4, r5, lr}
 801640c:	4614      	mov	r4, r2
 801640e:	b09b      	sub	sp, #108	; 0x6c
 8016410:	4605      	mov	r5, r0
 8016412:	461a      	mov	r2, r3
 8016414:	2c00      	cmp	r4, #0
 8016416:	da05      	bge.n	8016424 <_vsniprintf_r+0x1a>
 8016418:	238b      	movs	r3, #139	; 0x8b
 801641a:	6003      	str	r3, [r0, #0]
 801641c:	f04f 30ff 	mov.w	r0, #4294967295
 8016420:	b01b      	add	sp, #108	; 0x6c
 8016422:	bd30      	pop	{r4, r5, pc}
 8016424:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016428:	9100      	str	r1, [sp, #0]
 801642a:	9104      	str	r1, [sp, #16]
 801642c:	4669      	mov	r1, sp
 801642e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016432:	bf14      	ite	ne
 8016434:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016438:	4623      	moveq	r3, r4
 801643a:	9302      	str	r3, [sp, #8]
 801643c:	9305      	str	r3, [sp, #20]
 801643e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016442:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016446:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016448:	f001 fd48 	bl	8017edc <_svfiprintf_r>
 801644c:	1c43      	adds	r3, r0, #1
 801644e:	bfbc      	itt	lt
 8016450:	238b      	movlt	r3, #139	; 0x8b
 8016452:	602b      	strlt	r3, [r5, #0]
 8016454:	2c00      	cmp	r4, #0
 8016456:	d0e3      	beq.n	8016420 <_vsniprintf_r+0x16>
 8016458:	9b00      	ldr	r3, [sp, #0]
 801645a:	2200      	movs	r2, #0
 801645c:	701a      	strb	r2, [r3, #0]
 801645e:	e7df      	b.n	8016420 <_vsniprintf_r+0x16>

08016460 <vsniprintf>:
 8016460:	b507      	push	{r0, r1, r2, lr}
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	4613      	mov	r3, r2
 8016466:	460a      	mov	r2, r1
 8016468:	4601      	mov	r1, r0
 801646a:	4803      	ldr	r0, [pc, #12]	; (8016478 <vsniprintf+0x18>)
 801646c:	6800      	ldr	r0, [r0, #0]
 801646e:	f7ff ffcc 	bl	801640a <_vsniprintf_r>
 8016472:	b003      	add	sp, #12
 8016474:	f85d fb04 	ldr.w	pc, [sp], #4
 8016478:	20000200 	.word	0x20000200

0801647c <__swbuf_r>:
 801647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801647e:	460e      	mov	r6, r1
 8016480:	4614      	mov	r4, r2
 8016482:	4605      	mov	r5, r0
 8016484:	b118      	cbz	r0, 801648e <__swbuf_r+0x12>
 8016486:	6a03      	ldr	r3, [r0, #32]
 8016488:	b90b      	cbnz	r3, 801648e <__swbuf_r+0x12>
 801648a:	f7ff fdff 	bl	801608c <__sinit>
 801648e:	69a3      	ldr	r3, [r4, #24]
 8016490:	60a3      	str	r3, [r4, #8]
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	071a      	lsls	r2, r3, #28
 8016496:	d525      	bpl.n	80164e4 <__swbuf_r+0x68>
 8016498:	6923      	ldr	r3, [r4, #16]
 801649a:	b31b      	cbz	r3, 80164e4 <__swbuf_r+0x68>
 801649c:	6823      	ldr	r3, [r4, #0]
 801649e:	b2f6      	uxtb	r6, r6
 80164a0:	6922      	ldr	r2, [r4, #16]
 80164a2:	4637      	mov	r7, r6
 80164a4:	1a98      	subs	r0, r3, r2
 80164a6:	6963      	ldr	r3, [r4, #20]
 80164a8:	4283      	cmp	r3, r0
 80164aa:	dc04      	bgt.n	80164b6 <__swbuf_r+0x3a>
 80164ac:	4621      	mov	r1, r4
 80164ae:	4628      	mov	r0, r5
 80164b0:	f001 fe96 	bl	80181e0 <_fflush_r>
 80164b4:	b9e0      	cbnz	r0, 80164f0 <__swbuf_r+0x74>
 80164b6:	68a3      	ldr	r3, [r4, #8]
 80164b8:	3b01      	subs	r3, #1
 80164ba:	60a3      	str	r3, [r4, #8]
 80164bc:	6823      	ldr	r3, [r4, #0]
 80164be:	1c5a      	adds	r2, r3, #1
 80164c0:	6022      	str	r2, [r4, #0]
 80164c2:	701e      	strb	r6, [r3, #0]
 80164c4:	1c43      	adds	r3, r0, #1
 80164c6:	6962      	ldr	r2, [r4, #20]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d004      	beq.n	80164d6 <__swbuf_r+0x5a>
 80164cc:	89a3      	ldrh	r3, [r4, #12]
 80164ce:	07db      	lsls	r3, r3, #31
 80164d0:	d506      	bpl.n	80164e0 <__swbuf_r+0x64>
 80164d2:	2e0a      	cmp	r6, #10
 80164d4:	d104      	bne.n	80164e0 <__swbuf_r+0x64>
 80164d6:	4621      	mov	r1, r4
 80164d8:	4628      	mov	r0, r5
 80164da:	f001 fe81 	bl	80181e0 <_fflush_r>
 80164de:	b938      	cbnz	r0, 80164f0 <__swbuf_r+0x74>
 80164e0:	4638      	mov	r0, r7
 80164e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164e4:	4621      	mov	r1, r4
 80164e6:	4628      	mov	r0, r5
 80164e8:	f000 f806 	bl	80164f8 <__swsetup_r>
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d0d5      	beq.n	801649c <__swbuf_r+0x20>
 80164f0:	f04f 37ff 	mov.w	r7, #4294967295
 80164f4:	e7f4      	b.n	80164e0 <__swbuf_r+0x64>
	...

080164f8 <__swsetup_r>:
 80164f8:	b538      	push	{r3, r4, r5, lr}
 80164fa:	4b2a      	ldr	r3, [pc, #168]	; (80165a4 <__swsetup_r+0xac>)
 80164fc:	4605      	mov	r5, r0
 80164fe:	460c      	mov	r4, r1
 8016500:	6818      	ldr	r0, [r3, #0]
 8016502:	b118      	cbz	r0, 801650c <__swsetup_r+0x14>
 8016504:	6a03      	ldr	r3, [r0, #32]
 8016506:	b90b      	cbnz	r3, 801650c <__swsetup_r+0x14>
 8016508:	f7ff fdc0 	bl	801608c <__sinit>
 801650c:	89a3      	ldrh	r3, [r4, #12]
 801650e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016512:	0718      	lsls	r0, r3, #28
 8016514:	d422      	bmi.n	801655c <__swsetup_r+0x64>
 8016516:	06d9      	lsls	r1, r3, #27
 8016518:	d407      	bmi.n	801652a <__swsetup_r+0x32>
 801651a:	2309      	movs	r3, #9
 801651c:	602b      	str	r3, [r5, #0]
 801651e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016522:	f04f 30ff 	mov.w	r0, #4294967295
 8016526:	81a3      	strh	r3, [r4, #12]
 8016528:	e034      	b.n	8016594 <__swsetup_r+0x9c>
 801652a:	0758      	lsls	r0, r3, #29
 801652c:	d512      	bpl.n	8016554 <__swsetup_r+0x5c>
 801652e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016530:	b141      	cbz	r1, 8016544 <__swsetup_r+0x4c>
 8016532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016536:	4299      	cmp	r1, r3
 8016538:	d002      	beq.n	8016540 <__swsetup_r+0x48>
 801653a:	4628      	mov	r0, r5
 801653c:	f000 fff0 	bl	8017520 <_free_r>
 8016540:	2300      	movs	r3, #0
 8016542:	6363      	str	r3, [r4, #52]	; 0x34
 8016544:	89a3      	ldrh	r3, [r4, #12]
 8016546:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801654a:	81a3      	strh	r3, [r4, #12]
 801654c:	2300      	movs	r3, #0
 801654e:	6063      	str	r3, [r4, #4]
 8016550:	6923      	ldr	r3, [r4, #16]
 8016552:	6023      	str	r3, [r4, #0]
 8016554:	89a3      	ldrh	r3, [r4, #12]
 8016556:	f043 0308 	orr.w	r3, r3, #8
 801655a:	81a3      	strh	r3, [r4, #12]
 801655c:	6923      	ldr	r3, [r4, #16]
 801655e:	b94b      	cbnz	r3, 8016574 <__swsetup_r+0x7c>
 8016560:	89a3      	ldrh	r3, [r4, #12]
 8016562:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801656a:	d003      	beq.n	8016574 <__swsetup_r+0x7c>
 801656c:	4621      	mov	r1, r4
 801656e:	4628      	mov	r0, r5
 8016570:	f001 fe95 	bl	801829e <__smakebuf_r>
 8016574:	89a0      	ldrh	r0, [r4, #12]
 8016576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801657a:	f010 0301 	ands.w	r3, r0, #1
 801657e:	d00a      	beq.n	8016596 <__swsetup_r+0x9e>
 8016580:	2300      	movs	r3, #0
 8016582:	60a3      	str	r3, [r4, #8]
 8016584:	6963      	ldr	r3, [r4, #20]
 8016586:	425b      	negs	r3, r3
 8016588:	61a3      	str	r3, [r4, #24]
 801658a:	6923      	ldr	r3, [r4, #16]
 801658c:	b943      	cbnz	r3, 80165a0 <__swsetup_r+0xa8>
 801658e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016592:	d1c4      	bne.n	801651e <__swsetup_r+0x26>
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	0781      	lsls	r1, r0, #30
 8016598:	bf58      	it	pl
 801659a:	6963      	ldrpl	r3, [r4, #20]
 801659c:	60a3      	str	r3, [r4, #8]
 801659e:	e7f4      	b.n	801658a <__swsetup_r+0x92>
 80165a0:	2000      	movs	r0, #0
 80165a2:	e7f7      	b.n	8016594 <__swsetup_r+0x9c>
 80165a4:	20000200 	.word	0x20000200

080165a8 <memset>:
 80165a8:	4402      	add	r2, r0
 80165aa:	4603      	mov	r3, r0
 80165ac:	4293      	cmp	r3, r2
 80165ae:	d100      	bne.n	80165b2 <memset+0xa>
 80165b0:	4770      	bx	lr
 80165b2:	f803 1b01 	strb.w	r1, [r3], #1
 80165b6:	e7f9      	b.n	80165ac <memset+0x4>

080165b8 <strncat>:
 80165b8:	b530      	push	{r4, r5, lr}
 80165ba:	4604      	mov	r4, r0
 80165bc:	7825      	ldrb	r5, [r4, #0]
 80165be:	4623      	mov	r3, r4
 80165c0:	3401      	adds	r4, #1
 80165c2:	2d00      	cmp	r5, #0
 80165c4:	d1fa      	bne.n	80165bc <strncat+0x4>
 80165c6:	3a01      	subs	r2, #1
 80165c8:	d304      	bcc.n	80165d4 <strncat+0x1c>
 80165ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165ce:	f803 4b01 	strb.w	r4, [r3], #1
 80165d2:	b904      	cbnz	r4, 80165d6 <strncat+0x1e>
 80165d4:	bd30      	pop	{r4, r5, pc}
 80165d6:	2a00      	cmp	r2, #0
 80165d8:	d1f5      	bne.n	80165c6 <strncat+0xe>
 80165da:	701a      	strb	r2, [r3, #0]
 80165dc:	e7f3      	b.n	80165c6 <strncat+0xe>

080165de <strncpy>:
 80165de:	3901      	subs	r1, #1
 80165e0:	4603      	mov	r3, r0
 80165e2:	b510      	push	{r4, lr}
 80165e4:	b132      	cbz	r2, 80165f4 <strncpy+0x16>
 80165e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80165ea:	3a01      	subs	r2, #1
 80165ec:	f803 4b01 	strb.w	r4, [r3], #1
 80165f0:	2c00      	cmp	r4, #0
 80165f2:	d1f7      	bne.n	80165e4 <strncpy+0x6>
 80165f4:	441a      	add	r2, r3
 80165f6:	2100      	movs	r1, #0
 80165f8:	4293      	cmp	r3, r2
 80165fa:	d100      	bne.n	80165fe <strncpy+0x20>
 80165fc:	bd10      	pop	{r4, pc}
 80165fe:	f803 1b01 	strb.w	r1, [r3], #1
 8016602:	e7f9      	b.n	80165f8 <strncpy+0x1a>

08016604 <strtok>:
 8016604:	4b16      	ldr	r3, [pc, #88]	; (8016660 <strtok+0x5c>)
 8016606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016608:	681e      	ldr	r6, [r3, #0]
 801660a:	4605      	mov	r5, r0
 801660c:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801660e:	b9fc      	cbnz	r4, 8016650 <strtok+0x4c>
 8016610:	2050      	movs	r0, #80	; 0x50
 8016612:	9101      	str	r1, [sp, #4]
 8016614:	f000 ffd0 	bl	80175b8 <malloc>
 8016618:	9901      	ldr	r1, [sp, #4]
 801661a:	4602      	mov	r2, r0
 801661c:	6470      	str	r0, [r6, #68]	; 0x44
 801661e:	b920      	cbnz	r0, 801662a <strtok+0x26>
 8016620:	4b10      	ldr	r3, [pc, #64]	; (8016664 <strtok+0x60>)
 8016622:	215b      	movs	r1, #91	; 0x5b
 8016624:	4810      	ldr	r0, [pc, #64]	; (8016668 <strtok+0x64>)
 8016626:	f000 f8db 	bl	80167e0 <__assert_func>
 801662a:	e9c0 4400 	strd	r4, r4, [r0]
 801662e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016632:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016636:	6184      	str	r4, [r0, #24]
 8016638:	7704      	strb	r4, [r0, #28]
 801663a:	6244      	str	r4, [r0, #36]	; 0x24
 801663c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016640:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016644:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016648:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801664c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016650:	2301      	movs	r3, #1
 8016652:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8016654:	4628      	mov	r0, r5
 8016656:	b002      	add	sp, #8
 8016658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801665c:	f000 b806 	b.w	801666c <__strtok_r>
 8016660:	20000200 	.word	0x20000200
 8016664:	0801965d 	.word	0x0801965d
 8016668:	08019674 	.word	0x08019674

0801666c <__strtok_r>:
 801666c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801666e:	b908      	cbnz	r0, 8016674 <__strtok_r+0x8>
 8016670:	6810      	ldr	r0, [r2, #0]
 8016672:	b188      	cbz	r0, 8016698 <__strtok_r+0x2c>
 8016674:	4604      	mov	r4, r0
 8016676:	4620      	mov	r0, r4
 8016678:	460f      	mov	r7, r1
 801667a:	f814 5b01 	ldrb.w	r5, [r4], #1
 801667e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016682:	b91e      	cbnz	r6, 801668c <__strtok_r+0x20>
 8016684:	b965      	cbnz	r5, 80166a0 <__strtok_r+0x34>
 8016686:	4628      	mov	r0, r5
 8016688:	6015      	str	r5, [r2, #0]
 801668a:	e005      	b.n	8016698 <__strtok_r+0x2c>
 801668c:	42b5      	cmp	r5, r6
 801668e:	d1f6      	bne.n	801667e <__strtok_r+0x12>
 8016690:	2b00      	cmp	r3, #0
 8016692:	d1f0      	bne.n	8016676 <__strtok_r+0xa>
 8016694:	6014      	str	r4, [r2, #0]
 8016696:	7003      	strb	r3, [r0, #0]
 8016698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669a:	461c      	mov	r4, r3
 801669c:	e00c      	b.n	80166b8 <__strtok_r+0x4c>
 801669e:	b915      	cbnz	r5, 80166a6 <__strtok_r+0x3a>
 80166a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80166a4:	460e      	mov	r6, r1
 80166a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80166aa:	42ab      	cmp	r3, r5
 80166ac:	d1f7      	bne.n	801669e <__strtok_r+0x32>
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d0f3      	beq.n	801669a <__strtok_r+0x2e>
 80166b2:	2300      	movs	r3, #0
 80166b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80166b8:	6014      	str	r4, [r2, #0]
 80166ba:	e7ed      	b.n	8016698 <__strtok_r+0x2c>

080166bc <_localeconv_r>:
 80166bc:	4800      	ldr	r0, [pc, #0]	; (80166c0 <_localeconv_r+0x4>)
 80166be:	4770      	bx	lr
 80166c0:	200002f4 	.word	0x200002f4

080166c4 <_close_r>:
 80166c4:	b538      	push	{r3, r4, r5, lr}
 80166c6:	2300      	movs	r3, #0
 80166c8:	4d05      	ldr	r5, [pc, #20]	; (80166e0 <_close_r+0x1c>)
 80166ca:	4604      	mov	r4, r0
 80166cc:	4608      	mov	r0, r1
 80166ce:	602b      	str	r3, [r5, #0]
 80166d0:	f7ee ff2f 	bl	8005532 <_close>
 80166d4:	1c43      	adds	r3, r0, #1
 80166d6:	d102      	bne.n	80166de <_close_r+0x1a>
 80166d8:	682b      	ldr	r3, [r5, #0]
 80166da:	b103      	cbz	r3, 80166de <_close_r+0x1a>
 80166dc:	6023      	str	r3, [r4, #0]
 80166de:	bd38      	pop	{r3, r4, r5, pc}
 80166e0:	20004a08 	.word	0x20004a08

080166e4 <_lseek_r>:
 80166e4:	b538      	push	{r3, r4, r5, lr}
 80166e6:	4604      	mov	r4, r0
 80166e8:	4d06      	ldr	r5, [pc, #24]	; (8016704 <_lseek_r+0x20>)
 80166ea:	4608      	mov	r0, r1
 80166ec:	4611      	mov	r1, r2
 80166ee:	2200      	movs	r2, #0
 80166f0:	602a      	str	r2, [r5, #0]
 80166f2:	461a      	mov	r2, r3
 80166f4:	f7ee ff44 	bl	8005580 <_lseek>
 80166f8:	1c43      	adds	r3, r0, #1
 80166fa:	d102      	bne.n	8016702 <_lseek_r+0x1e>
 80166fc:	682b      	ldr	r3, [r5, #0]
 80166fe:	b103      	cbz	r3, 8016702 <_lseek_r+0x1e>
 8016700:	6023      	str	r3, [r4, #0]
 8016702:	bd38      	pop	{r3, r4, r5, pc}
 8016704:	20004a08 	.word	0x20004a08

08016708 <_read_r>:
 8016708:	b538      	push	{r3, r4, r5, lr}
 801670a:	4604      	mov	r4, r0
 801670c:	4d06      	ldr	r5, [pc, #24]	; (8016728 <_read_r+0x20>)
 801670e:	4608      	mov	r0, r1
 8016710:	4611      	mov	r1, r2
 8016712:	2200      	movs	r2, #0
 8016714:	602a      	str	r2, [r5, #0]
 8016716:	461a      	mov	r2, r3
 8016718:	f7ee fed2 	bl	80054c0 <_read>
 801671c:	1c43      	adds	r3, r0, #1
 801671e:	d102      	bne.n	8016726 <_read_r+0x1e>
 8016720:	682b      	ldr	r3, [r5, #0]
 8016722:	b103      	cbz	r3, 8016726 <_read_r+0x1e>
 8016724:	6023      	str	r3, [r4, #0]
 8016726:	bd38      	pop	{r3, r4, r5, pc}
 8016728:	20004a08 	.word	0x20004a08

0801672c <_write_r>:
 801672c:	b538      	push	{r3, r4, r5, lr}
 801672e:	4604      	mov	r4, r0
 8016730:	4d06      	ldr	r5, [pc, #24]	; (801674c <_write_r+0x20>)
 8016732:	4608      	mov	r0, r1
 8016734:	4611      	mov	r1, r2
 8016736:	2200      	movs	r2, #0
 8016738:	602a      	str	r2, [r5, #0]
 801673a:	461a      	mov	r2, r3
 801673c:	f7ee fedd 	bl	80054fa <_write>
 8016740:	1c43      	adds	r3, r0, #1
 8016742:	d102      	bne.n	801674a <_write_r+0x1e>
 8016744:	682b      	ldr	r3, [r5, #0]
 8016746:	b103      	cbz	r3, 801674a <_write_r+0x1e>
 8016748:	6023      	str	r3, [r4, #0]
 801674a:	bd38      	pop	{r3, r4, r5, pc}
 801674c:	20004a08 	.word	0x20004a08

08016750 <__errno>:
 8016750:	4b01      	ldr	r3, [pc, #4]	; (8016758 <__errno+0x8>)
 8016752:	6818      	ldr	r0, [r3, #0]
 8016754:	4770      	bx	lr
 8016756:	bf00      	nop
 8016758:	20000200 	.word	0x20000200

0801675c <__libc_init_array>:
 801675c:	b570      	push	{r4, r5, r6, lr}
 801675e:	4d0d      	ldr	r5, [pc, #52]	; (8016794 <__libc_init_array+0x38>)
 8016760:	2600      	movs	r6, #0
 8016762:	4c0d      	ldr	r4, [pc, #52]	; (8016798 <__libc_init_array+0x3c>)
 8016764:	1b64      	subs	r4, r4, r5
 8016766:	10a4      	asrs	r4, r4, #2
 8016768:	42a6      	cmp	r6, r4
 801676a:	d109      	bne.n	8016780 <__libc_init_array+0x24>
 801676c:	4d0b      	ldr	r5, [pc, #44]	; (801679c <__libc_init_array+0x40>)
 801676e:	2600      	movs	r6, #0
 8016770:	4c0b      	ldr	r4, [pc, #44]	; (80167a0 <__libc_init_array+0x44>)
 8016772:	f002 f84b 	bl	801880c <_init>
 8016776:	1b64      	subs	r4, r4, r5
 8016778:	10a4      	asrs	r4, r4, #2
 801677a:	42a6      	cmp	r6, r4
 801677c:	d105      	bne.n	801678a <__libc_init_array+0x2e>
 801677e:	bd70      	pop	{r4, r5, r6, pc}
 8016780:	f855 3b04 	ldr.w	r3, [r5], #4
 8016784:	3601      	adds	r6, #1
 8016786:	4798      	blx	r3
 8016788:	e7ee      	b.n	8016768 <__libc_init_array+0xc>
 801678a:	f855 3b04 	ldr.w	r3, [r5], #4
 801678e:	3601      	adds	r6, #1
 8016790:	4798      	blx	r3
 8016792:	e7f2      	b.n	801677a <__libc_init_array+0x1e>
 8016794:	08019900 	.word	0x08019900
 8016798:	08019900 	.word	0x08019900
 801679c:	08019900 	.word	0x08019900
 80167a0:	08019904 	.word	0x08019904

080167a4 <__retarget_lock_init_recursive>:
 80167a4:	4770      	bx	lr

080167a6 <__retarget_lock_acquire_recursive>:
 80167a6:	4770      	bx	lr

080167a8 <__retarget_lock_release_recursive>:
 80167a8:	4770      	bx	lr

080167aa <memchr>:
 80167aa:	b2c9      	uxtb	r1, r1
 80167ac:	4402      	add	r2, r0
 80167ae:	b510      	push	{r4, lr}
 80167b0:	4290      	cmp	r0, r2
 80167b2:	4603      	mov	r3, r0
 80167b4:	d101      	bne.n	80167ba <memchr+0x10>
 80167b6:	2300      	movs	r3, #0
 80167b8:	e003      	b.n	80167c2 <memchr+0x18>
 80167ba:	781c      	ldrb	r4, [r3, #0]
 80167bc:	3001      	adds	r0, #1
 80167be:	428c      	cmp	r4, r1
 80167c0:	d1f6      	bne.n	80167b0 <memchr+0x6>
 80167c2:	4618      	mov	r0, r3
 80167c4:	bd10      	pop	{r4, pc}

080167c6 <memcpy>:
 80167c6:	440a      	add	r2, r1
 80167c8:	1e43      	subs	r3, r0, #1
 80167ca:	4291      	cmp	r1, r2
 80167cc:	d100      	bne.n	80167d0 <memcpy+0xa>
 80167ce:	4770      	bx	lr
 80167d0:	b510      	push	{r4, lr}
 80167d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167d6:	4291      	cmp	r1, r2
 80167d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167dc:	d1f9      	bne.n	80167d2 <memcpy+0xc>
 80167de:	bd10      	pop	{r4, pc}

080167e0 <__assert_func>:
 80167e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167e2:	4614      	mov	r4, r2
 80167e4:	461a      	mov	r2, r3
 80167e6:	4b09      	ldr	r3, [pc, #36]	; (801680c <__assert_func+0x2c>)
 80167e8:	4605      	mov	r5, r0
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	68d8      	ldr	r0, [r3, #12]
 80167ee:	b14c      	cbz	r4, 8016804 <__assert_func+0x24>
 80167f0:	4b07      	ldr	r3, [pc, #28]	; (8016810 <__assert_func+0x30>)
 80167f2:	9100      	str	r1, [sp, #0]
 80167f4:	4907      	ldr	r1, [pc, #28]	; (8016814 <__assert_func+0x34>)
 80167f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167fa:	462b      	mov	r3, r5
 80167fc:	f001 fd18 	bl	8018230 <fiprintf>
 8016800:	f001 fe0a 	bl	8018418 <abort>
 8016804:	4b04      	ldr	r3, [pc, #16]	; (8016818 <__assert_func+0x38>)
 8016806:	461c      	mov	r4, r3
 8016808:	e7f3      	b.n	80167f2 <__assert_func+0x12>
 801680a:	bf00      	nop
 801680c:	20000200 	.word	0x20000200
 8016810:	080196ce 	.word	0x080196ce
 8016814:	080196db 	.word	0x080196db
 8016818:	08019709 	.word	0x08019709

0801681c <quorem>:
 801681c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016820:	6903      	ldr	r3, [r0, #16]
 8016822:	4607      	mov	r7, r0
 8016824:	690c      	ldr	r4, [r1, #16]
 8016826:	42a3      	cmp	r3, r4
 8016828:	f2c0 8086 	blt.w	8016938 <quorem+0x11c>
 801682c:	3c01      	subs	r4, #1
 801682e:	f100 0514 	add.w	r5, r0, #20
 8016832:	f101 0814 	add.w	r8, r1, #20
 8016836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801683a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801683e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801684c:	3301      	adds	r3, #1
 801684e:	429a      	cmp	r2, r3
 8016850:	fbb2 f6f3 	udiv	r6, r2, r3
 8016854:	d335      	bcc.n	80168c2 <quorem+0xa6>
 8016856:	f04f 0e00 	mov.w	lr, #0
 801685a:	4640      	mov	r0, r8
 801685c:	46ac      	mov	ip, r5
 801685e:	46f2      	mov	sl, lr
 8016860:	f850 2b04 	ldr.w	r2, [r0], #4
 8016864:	b293      	uxth	r3, r2
 8016866:	4581      	cmp	r9, r0
 8016868:	fb06 e303 	mla	r3, r6, r3, lr
 801686c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016870:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8016874:	b29b      	uxth	r3, r3
 8016876:	fb06 220e 	mla	r2, r6, lr, r2
 801687a:	ebaa 0303 	sub.w	r3, sl, r3
 801687e:	f8dc a000 	ldr.w	sl, [ip]
 8016882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016886:	fa1f fa8a 	uxth.w	sl, sl
 801688a:	b292      	uxth	r2, r2
 801688c:	4453      	add	r3, sl
 801688e:	9300      	str	r3, [sp, #0]
 8016890:	f8dc 3000 	ldr.w	r3, [ip]
 8016894:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 8016898:	9b00      	ldr	r3, [sp, #0]
 801689a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801689e:	f8bd 3000 	ldrh.w	r3, [sp]
 80168a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80168a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80168aa:	f84c 3b04 	str.w	r3, [ip], #4
 80168ae:	d2d7      	bcs.n	8016860 <quorem+0x44>
 80168b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80168b4:	b92b      	cbnz	r3, 80168c2 <quorem+0xa6>
 80168b6:	9b01      	ldr	r3, [sp, #4]
 80168b8:	3b04      	subs	r3, #4
 80168ba:	429d      	cmp	r5, r3
 80168bc:	461a      	mov	r2, r3
 80168be:	d32f      	bcc.n	8016920 <quorem+0x104>
 80168c0:	613c      	str	r4, [r7, #16]
 80168c2:	4638      	mov	r0, r7
 80168c4:	f001 f9aa 	bl	8017c1c <__mcmp>
 80168c8:	2800      	cmp	r0, #0
 80168ca:	db25      	blt.n	8016918 <quorem+0xfc>
 80168cc:	3601      	adds	r6, #1
 80168ce:	4629      	mov	r1, r5
 80168d0:	2000      	movs	r0, #0
 80168d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80168d6:	f8d1 c000 	ldr.w	ip, [r1]
 80168da:	b293      	uxth	r3, r2
 80168dc:	45c1      	cmp	r9, r8
 80168de:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80168e2:	eba0 0303 	sub.w	r3, r0, r3
 80168e6:	fa1f f08c 	uxth.w	r0, ip
 80168ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80168ee:	4403      	add	r3, r0
 80168f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80168fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80168fe:	f841 3b04 	str.w	r3, [r1], #4
 8016902:	d2e6      	bcs.n	80168d2 <quorem+0xb6>
 8016904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801690c:	b922      	cbnz	r2, 8016918 <quorem+0xfc>
 801690e:	3b04      	subs	r3, #4
 8016910:	429d      	cmp	r5, r3
 8016912:	461a      	mov	r2, r3
 8016914:	d30a      	bcc.n	801692c <quorem+0x110>
 8016916:	613c      	str	r4, [r7, #16]
 8016918:	4630      	mov	r0, r6
 801691a:	b003      	add	sp, #12
 801691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016920:	6812      	ldr	r2, [r2, #0]
 8016922:	3b04      	subs	r3, #4
 8016924:	2a00      	cmp	r2, #0
 8016926:	d1cb      	bne.n	80168c0 <quorem+0xa4>
 8016928:	3c01      	subs	r4, #1
 801692a:	e7c6      	b.n	80168ba <quorem+0x9e>
 801692c:	6812      	ldr	r2, [r2, #0]
 801692e:	3b04      	subs	r3, #4
 8016930:	2a00      	cmp	r2, #0
 8016932:	d1f0      	bne.n	8016916 <quorem+0xfa>
 8016934:	3c01      	subs	r4, #1
 8016936:	e7eb      	b.n	8016910 <quorem+0xf4>
 8016938:	2000      	movs	r0, #0
 801693a:	e7ee      	b.n	801691a <quorem+0xfe>
 801693c:	0000      	movs	r0, r0
	...

08016940 <_dtoa_r>:
 8016940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016944:	69c5      	ldr	r5, [r0, #28]
 8016946:	4604      	mov	r4, r0
 8016948:	ed2d 8b04 	vpush	{d8-d9}
 801694c:	b093      	sub	sp, #76	; 0x4c
 801694e:	ec57 6b10 	vmov	r6, r7, d0
 8016952:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016956:	9107      	str	r1, [sp, #28]
 8016958:	920a      	str	r2, [sp, #40]	; 0x28
 801695a:	930d      	str	r3, [sp, #52]	; 0x34
 801695c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016960:	b975      	cbnz	r5, 8016980 <_dtoa_r+0x40>
 8016962:	2010      	movs	r0, #16
 8016964:	f000 fe28 	bl	80175b8 <malloc>
 8016968:	4602      	mov	r2, r0
 801696a:	61e0      	str	r0, [r4, #28]
 801696c:	b920      	cbnz	r0, 8016978 <_dtoa_r+0x38>
 801696e:	4bae      	ldr	r3, [pc, #696]	; (8016c28 <_dtoa_r+0x2e8>)
 8016970:	21ef      	movs	r1, #239	; 0xef
 8016972:	48ae      	ldr	r0, [pc, #696]	; (8016c2c <_dtoa_r+0x2ec>)
 8016974:	f7ff ff34 	bl	80167e0 <__assert_func>
 8016978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801697c:	6005      	str	r5, [r0, #0]
 801697e:	60c5      	str	r5, [r0, #12]
 8016980:	69e3      	ldr	r3, [r4, #28]
 8016982:	6819      	ldr	r1, [r3, #0]
 8016984:	b151      	cbz	r1, 801699c <_dtoa_r+0x5c>
 8016986:	685a      	ldr	r2, [r3, #4]
 8016988:	2301      	movs	r3, #1
 801698a:	4620      	mov	r0, r4
 801698c:	4093      	lsls	r3, r2
 801698e:	604a      	str	r2, [r1, #4]
 8016990:	608b      	str	r3, [r1, #8]
 8016992:	f000 ff05 	bl	80177a0 <_Bfree>
 8016996:	69e3      	ldr	r3, [r4, #28]
 8016998:	2200      	movs	r2, #0
 801699a:	601a      	str	r2, [r3, #0]
 801699c:	1e3b      	subs	r3, r7, #0
 801699e:	bfb7      	itett	lt
 80169a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80169a4:	2300      	movge	r3, #0
 80169a6:	2201      	movlt	r2, #1
 80169a8:	9303      	strlt	r3, [sp, #12]
 80169aa:	bfac      	ite	ge
 80169ac:	f8c8 3000 	strge.w	r3, [r8]
 80169b0:	f8c8 2000 	strlt.w	r2, [r8]
 80169b4:	4b9e      	ldr	r3, [pc, #632]	; (8016c30 <_dtoa_r+0x2f0>)
 80169b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80169ba:	ea33 0308 	bics.w	r3, r3, r8
 80169be:	d11b      	bne.n	80169f8 <_dtoa_r+0xb8>
 80169c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80169c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169c6:	6013      	str	r3, [r2, #0]
 80169c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80169cc:	4333      	orrs	r3, r6
 80169ce:	f000 8592 	beq.w	80174f6 <_dtoa_r+0xbb6>
 80169d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169d4:	b963      	cbnz	r3, 80169f0 <_dtoa_r+0xb0>
 80169d6:	4b97      	ldr	r3, [pc, #604]	; (8016c34 <_dtoa_r+0x2f4>)
 80169d8:	e027      	b.n	8016a2a <_dtoa_r+0xea>
 80169da:	4b97      	ldr	r3, [pc, #604]	; (8016c38 <_dtoa_r+0x2f8>)
 80169dc:	9300      	str	r3, [sp, #0]
 80169de:	3308      	adds	r3, #8
 80169e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80169e2:	6013      	str	r3, [r2, #0]
 80169e4:	9800      	ldr	r0, [sp, #0]
 80169e6:	b013      	add	sp, #76	; 0x4c
 80169e8:	ecbd 8b04 	vpop	{d8-d9}
 80169ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169f0:	4b90      	ldr	r3, [pc, #576]	; (8016c34 <_dtoa_r+0x2f4>)
 80169f2:	9300      	str	r3, [sp, #0]
 80169f4:	3303      	adds	r3, #3
 80169f6:	e7f3      	b.n	80169e0 <_dtoa_r+0xa0>
 80169f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80169fc:	2200      	movs	r2, #0
 80169fe:	2300      	movs	r3, #0
 8016a00:	ec51 0b17 	vmov	r0, r1, d7
 8016a04:	eeb0 8a47 	vmov.f32	s16, s14
 8016a08:	eef0 8a67 	vmov.f32	s17, s15
 8016a0c:	f7ea f88a 	bl	8000b24 <__aeabi_dcmpeq>
 8016a10:	4681      	mov	r9, r0
 8016a12:	b160      	cbz	r0, 8016a2e <_dtoa_r+0xee>
 8016a14:	2301      	movs	r3, #1
 8016a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a18:	6013      	str	r3, [r2, #0]
 8016a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f000 8567 	beq.w	80174f0 <_dtoa_r+0xbb0>
 8016a22:	4b86      	ldr	r3, [pc, #536]	; (8016c3c <_dtoa_r+0x2fc>)
 8016a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a26:	6013      	str	r3, [r2, #0]
 8016a28:	3b01      	subs	r3, #1
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	e7da      	b.n	80169e4 <_dtoa_r+0xa4>
 8016a2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016a32:	eeb0 0a48 	vmov.f32	s0, s16
 8016a36:	eef0 0a68 	vmov.f32	s1, s17
 8016a3a:	aa10      	add	r2, sp, #64	; 0x40
 8016a3c:	a911      	add	r1, sp, #68	; 0x44
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f001 f998 	bl	8017d74 <__d2b>
 8016a44:	4682      	mov	sl, r0
 8016a46:	2d00      	cmp	r5, #0
 8016a48:	d07d      	beq.n	8016b46 <_dtoa_r+0x206>
 8016a4a:	ee18 3a90 	vmov	r3, s17
 8016a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016a52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016a5e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016a62:	ec51 0b18 	vmov	r0, r1, d8
 8016a66:	4619      	mov	r1, r3
 8016a68:	2200      	movs	r2, #0
 8016a6a:	4b75      	ldr	r3, [pc, #468]	; (8016c40 <_dtoa_r+0x300>)
 8016a6c:	f7e9 fc3a 	bl	80002e4 <__aeabi_dsub>
 8016a70:	a367      	add	r3, pc, #412	; (adr r3, 8016c10 <_dtoa_r+0x2d0>)
 8016a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a76:	f7e9 fded 	bl	8000654 <__aeabi_dmul>
 8016a7a:	a367      	add	r3, pc, #412	; (adr r3, 8016c18 <_dtoa_r+0x2d8>)
 8016a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a80:	f7e9 fc32 	bl	80002e8 <__adddf3>
 8016a84:	4606      	mov	r6, r0
 8016a86:	460f      	mov	r7, r1
 8016a88:	4628      	mov	r0, r5
 8016a8a:	f7e9 fd79 	bl	8000580 <__aeabi_i2d>
 8016a8e:	a364      	add	r3, pc, #400	; (adr r3, 8016c20 <_dtoa_r+0x2e0>)
 8016a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a94:	f7e9 fdde 	bl	8000654 <__aeabi_dmul>
 8016a98:	4602      	mov	r2, r0
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	4639      	mov	r1, r7
 8016aa0:	f7e9 fc22 	bl	80002e8 <__adddf3>
 8016aa4:	4606      	mov	r6, r0
 8016aa6:	460f      	mov	r7, r1
 8016aa8:	f7ea f884 	bl	8000bb4 <__aeabi_d2iz>
 8016aac:	2200      	movs	r2, #0
 8016aae:	4683      	mov	fp, r0
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	4639      	mov	r1, r7
 8016ab6:	f7ea f83f 	bl	8000b38 <__aeabi_dcmplt>
 8016aba:	b148      	cbz	r0, 8016ad0 <_dtoa_r+0x190>
 8016abc:	4658      	mov	r0, fp
 8016abe:	f7e9 fd5f 	bl	8000580 <__aeabi_i2d>
 8016ac2:	4632      	mov	r2, r6
 8016ac4:	463b      	mov	r3, r7
 8016ac6:	f7ea f82d 	bl	8000b24 <__aeabi_dcmpeq>
 8016aca:	b908      	cbnz	r0, 8016ad0 <_dtoa_r+0x190>
 8016acc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016ad0:	f1bb 0f16 	cmp.w	fp, #22
 8016ad4:	d857      	bhi.n	8016b86 <_dtoa_r+0x246>
 8016ad6:	4b5b      	ldr	r3, [pc, #364]	; (8016c44 <_dtoa_r+0x304>)
 8016ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016adc:	ec51 0b18 	vmov	r0, r1, d8
 8016ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae4:	f7ea f828 	bl	8000b38 <__aeabi_dcmplt>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d04e      	beq.n	8016b8a <_dtoa_r+0x24a>
 8016aec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016af0:	2300      	movs	r3, #0
 8016af2:	930c      	str	r3, [sp, #48]	; 0x30
 8016af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016af6:	1b5b      	subs	r3, r3, r5
 8016af8:	1e5a      	subs	r2, r3, #1
 8016afa:	bf4c      	ite	mi
 8016afc:	f1c3 0301 	rsbmi	r3, r3, #1
 8016b00:	2300      	movpl	r3, #0
 8016b02:	9206      	str	r2, [sp, #24]
 8016b04:	bf45      	ittet	mi
 8016b06:	9305      	strmi	r3, [sp, #20]
 8016b08:	2300      	movmi	r3, #0
 8016b0a:	9305      	strpl	r3, [sp, #20]
 8016b0c:	9306      	strmi	r3, [sp, #24]
 8016b0e:	f1bb 0f00 	cmp.w	fp, #0
 8016b12:	db3c      	blt.n	8016b8e <_dtoa_r+0x24e>
 8016b14:	9b06      	ldr	r3, [sp, #24]
 8016b16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016b1a:	445b      	add	r3, fp
 8016b1c:	9306      	str	r3, [sp, #24]
 8016b1e:	2300      	movs	r3, #0
 8016b20:	9308      	str	r3, [sp, #32]
 8016b22:	9b07      	ldr	r3, [sp, #28]
 8016b24:	2b09      	cmp	r3, #9
 8016b26:	d868      	bhi.n	8016bfa <_dtoa_r+0x2ba>
 8016b28:	2b05      	cmp	r3, #5
 8016b2a:	bfc5      	ittet	gt
 8016b2c:	3b04      	subgt	r3, #4
 8016b2e:	2500      	movgt	r5, #0
 8016b30:	2501      	movle	r5, #1
 8016b32:	9307      	strgt	r3, [sp, #28]
 8016b34:	9b07      	ldr	r3, [sp, #28]
 8016b36:	3b02      	subs	r3, #2
 8016b38:	2b03      	cmp	r3, #3
 8016b3a:	f200 8087 	bhi.w	8016c4c <_dtoa_r+0x30c>
 8016b3e:	e8df f003 	tbb	[pc, r3]
 8016b42:	3d30      	.short	0x3d30
 8016b44:	5a3b      	.short	0x5a3b
 8016b46:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016b4a:	441d      	add	r5, r3
 8016b4c:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016b50:	2b20      	cmp	r3, #32
 8016b52:	bfc9      	itett	gt
 8016b54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016b58:	f1c3 0320 	rsble	r3, r3, #32
 8016b5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8016b60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016b64:	bfd8      	it	le
 8016b66:	fa06 f003 	lslle.w	r0, r6, r3
 8016b6a:	f105 35ff 	add.w	r5, r5, #4294967295
 8016b6e:	bfc4      	itt	gt
 8016b70:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016b74:	ea48 0003 	orrgt.w	r0, r8, r3
 8016b78:	f7e9 fcf2 	bl	8000560 <__aeabi_ui2d>
 8016b7c:	2201      	movs	r2, #1
 8016b7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016b82:	920e      	str	r2, [sp, #56]	; 0x38
 8016b84:	e76f      	b.n	8016a66 <_dtoa_r+0x126>
 8016b86:	2301      	movs	r3, #1
 8016b88:	e7b3      	b.n	8016af2 <_dtoa_r+0x1b2>
 8016b8a:	900c      	str	r0, [sp, #48]	; 0x30
 8016b8c:	e7b2      	b.n	8016af4 <_dtoa_r+0x1b4>
 8016b8e:	9b05      	ldr	r3, [sp, #20]
 8016b90:	eba3 030b 	sub.w	r3, r3, fp
 8016b94:	9305      	str	r3, [sp, #20]
 8016b96:	f1cb 0300 	rsb	r3, fp, #0
 8016b9a:	9308      	str	r3, [sp, #32]
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ba0:	e7bf      	b.n	8016b22 <_dtoa_r+0x1e2>
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	dc52      	bgt.n	8016c52 <_dtoa_r+0x312>
 8016bac:	2301      	movs	r3, #1
 8016bae:	461a      	mov	r2, r3
 8016bb0:	9301      	str	r3, [sp, #4]
 8016bb2:	9304      	str	r3, [sp, #16]
 8016bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8016bb6:	e00b      	b.n	8016bd0 <_dtoa_r+0x290>
 8016bb8:	2301      	movs	r3, #1
 8016bba:	e7f3      	b.n	8016ba4 <_dtoa_r+0x264>
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bc2:	445b      	add	r3, fp
 8016bc4:	9301      	str	r3, [sp, #4]
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	9304      	str	r3, [sp, #16]
 8016bcc:	bfb8      	it	lt
 8016bce:	2301      	movlt	r3, #1
 8016bd0:	69e0      	ldr	r0, [r4, #28]
 8016bd2:	2100      	movs	r1, #0
 8016bd4:	2204      	movs	r2, #4
 8016bd6:	f102 0614 	add.w	r6, r2, #20
 8016bda:	429e      	cmp	r6, r3
 8016bdc:	d93d      	bls.n	8016c5a <_dtoa_r+0x31a>
 8016bde:	6041      	str	r1, [r0, #4]
 8016be0:	4620      	mov	r0, r4
 8016be2:	f000 fd9d 	bl	8017720 <_Balloc>
 8016be6:	9000      	str	r0, [sp, #0]
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d139      	bne.n	8016c60 <_dtoa_r+0x320>
 8016bec:	4b16      	ldr	r3, [pc, #88]	; (8016c48 <_dtoa_r+0x308>)
 8016bee:	4602      	mov	r2, r0
 8016bf0:	f240 11af 	movw	r1, #431	; 0x1af
 8016bf4:	e6bd      	b.n	8016972 <_dtoa_r+0x32>
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e7e1      	b.n	8016bbe <_dtoa_r+0x27e>
 8016bfa:	2501      	movs	r5, #1
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	9509      	str	r5, [sp, #36]	; 0x24
 8016c00:	9307      	str	r3, [sp, #28]
 8016c02:	f04f 33ff 	mov.w	r3, #4294967295
 8016c06:	2200      	movs	r2, #0
 8016c08:	9301      	str	r3, [sp, #4]
 8016c0a:	9304      	str	r3, [sp, #16]
 8016c0c:	2312      	movs	r3, #18
 8016c0e:	e7d1      	b.n	8016bb4 <_dtoa_r+0x274>
 8016c10:	636f4361 	.word	0x636f4361
 8016c14:	3fd287a7 	.word	0x3fd287a7
 8016c18:	8b60c8b3 	.word	0x8b60c8b3
 8016c1c:	3fc68a28 	.word	0x3fc68a28
 8016c20:	509f79fb 	.word	0x509f79fb
 8016c24:	3fd34413 	.word	0x3fd34413
 8016c28:	0801965d 	.word	0x0801965d
 8016c2c:	08019717 	.word	0x08019717
 8016c30:	7ff00000 	.word	0x7ff00000
 8016c34:	08019713 	.word	0x08019713
 8016c38:	0801970a 	.word	0x0801970a
 8016c3c:	0801963a 	.word	0x0801963a
 8016c40:	3ff80000 	.word	0x3ff80000
 8016c44:	08019808 	.word	0x08019808
 8016c48:	0801976f 	.word	0x0801976f
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c50:	e7d7      	b.n	8016c02 <_dtoa_r+0x2c2>
 8016c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	9304      	str	r3, [sp, #16]
 8016c58:	e7ba      	b.n	8016bd0 <_dtoa_r+0x290>
 8016c5a:	3101      	adds	r1, #1
 8016c5c:	0052      	lsls	r2, r2, #1
 8016c5e:	e7ba      	b.n	8016bd6 <_dtoa_r+0x296>
 8016c60:	69e3      	ldr	r3, [r4, #28]
 8016c62:	9a00      	ldr	r2, [sp, #0]
 8016c64:	601a      	str	r2, [r3, #0]
 8016c66:	9b04      	ldr	r3, [sp, #16]
 8016c68:	2b0e      	cmp	r3, #14
 8016c6a:	f200 80a8 	bhi.w	8016dbe <_dtoa_r+0x47e>
 8016c6e:	2d00      	cmp	r5, #0
 8016c70:	f000 80a5 	beq.w	8016dbe <_dtoa_r+0x47e>
 8016c74:	f1bb 0f00 	cmp.w	fp, #0
 8016c78:	dd38      	ble.n	8016cec <_dtoa_r+0x3ac>
 8016c7a:	f00b 020f 	and.w	r2, fp, #15
 8016c7e:	4bbf      	ldr	r3, [pc, #764]	; (8016f7c <_dtoa_r+0x63c>)
 8016c80:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016c84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c8c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016c90:	d019      	beq.n	8016cc6 <_dtoa_r+0x386>
 8016c92:	4bbb      	ldr	r3, [pc, #748]	; (8016f80 <_dtoa_r+0x640>)
 8016c94:	f008 080f 	and.w	r8, r8, #15
 8016c98:	2503      	movs	r5, #3
 8016c9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016c9e:	ec51 0b18 	vmov	r0, r1, d8
 8016ca2:	f7e9 fe01 	bl	80008a8 <__aeabi_ddiv>
 8016ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016caa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016f80 <_dtoa_r+0x640>
 8016cae:	f1b8 0f00 	cmp.w	r8, #0
 8016cb2:	d10a      	bne.n	8016cca <_dtoa_r+0x38a>
 8016cb4:	4632      	mov	r2, r6
 8016cb6:	463b      	mov	r3, r7
 8016cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016cbc:	f7e9 fdf4 	bl	80008a8 <__aeabi_ddiv>
 8016cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016cc4:	e02b      	b.n	8016d1e <_dtoa_r+0x3de>
 8016cc6:	2502      	movs	r5, #2
 8016cc8:	e7ef      	b.n	8016caa <_dtoa_r+0x36a>
 8016cca:	f018 0f01 	tst.w	r8, #1
 8016cce:	d008      	beq.n	8016ce2 <_dtoa_r+0x3a2>
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	3501      	adds	r5, #1
 8016cd6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016cda:	f7e9 fcbb 	bl	8000654 <__aeabi_dmul>
 8016cde:	4606      	mov	r6, r0
 8016ce0:	460f      	mov	r7, r1
 8016ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ce6:	f109 0908 	add.w	r9, r9, #8
 8016cea:	e7e0      	b.n	8016cae <_dtoa_r+0x36e>
 8016cec:	f000 809f 	beq.w	8016e2e <_dtoa_r+0x4ee>
 8016cf0:	f1cb 0600 	rsb	r6, fp, #0
 8016cf4:	4ba1      	ldr	r3, [pc, #644]	; (8016f7c <_dtoa_r+0x63c>)
 8016cf6:	4fa2      	ldr	r7, [pc, #648]	; (8016f80 <_dtoa_r+0x640>)
 8016cf8:	2502      	movs	r5, #2
 8016cfa:	f006 020f 	and.w	r2, r6, #15
 8016cfe:	1136      	asrs	r6, r6, #4
 8016d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d04:	ec51 0b18 	vmov	r0, r1, d8
 8016d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0c:	f7e9 fca2 	bl	8000654 <__aeabi_dmul>
 8016d10:	2300      	movs	r3, #0
 8016d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d16:	2e00      	cmp	r6, #0
 8016d18:	d17e      	bne.n	8016e18 <_dtoa_r+0x4d8>
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d1d0      	bne.n	8016cc0 <_dtoa_r+0x380>
 8016d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	f000 8084 	beq.w	8016e32 <_dtoa_r+0x4f2>
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	4b95      	ldr	r3, [pc, #596]	; (8016f84 <_dtoa_r+0x644>)
 8016d2e:	4640      	mov	r0, r8
 8016d30:	4649      	mov	r1, r9
 8016d32:	f7e9 ff01 	bl	8000b38 <__aeabi_dcmplt>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d07b      	beq.n	8016e32 <_dtoa_r+0x4f2>
 8016d3a:	9b04      	ldr	r3, [sp, #16]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d078      	beq.n	8016e32 <_dtoa_r+0x4f2>
 8016d40:	9b01      	ldr	r3, [sp, #4]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	dd39      	ble.n	8016dba <_dtoa_r+0x47a>
 8016d46:	2200      	movs	r2, #0
 8016d48:	4b8f      	ldr	r3, [pc, #572]	; (8016f88 <_dtoa_r+0x648>)
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	4649      	mov	r1, r9
 8016d4e:	f7e9 fc81 	bl	8000654 <__aeabi_dmul>
 8016d52:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016d56:	3501      	adds	r5, #1
 8016d58:	9e01      	ldr	r6, [sp, #4]
 8016d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016d62:	4628      	mov	r0, r5
 8016d64:	f7e9 fc0c 	bl	8000580 <__aeabi_i2d>
 8016d68:	4642      	mov	r2, r8
 8016d6a:	464b      	mov	r3, r9
 8016d6c:	f7e9 fc72 	bl	8000654 <__aeabi_dmul>
 8016d70:	4b86      	ldr	r3, [pc, #536]	; (8016f8c <_dtoa_r+0x64c>)
 8016d72:	2200      	movs	r2, #0
 8016d74:	f7e9 fab8 	bl	80002e8 <__adddf3>
 8016d78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d80:	9303      	str	r3, [sp, #12]
 8016d82:	2e00      	cmp	r6, #0
 8016d84:	d158      	bne.n	8016e38 <_dtoa_r+0x4f8>
 8016d86:	2200      	movs	r2, #0
 8016d88:	4b81      	ldr	r3, [pc, #516]	; (8016f90 <_dtoa_r+0x650>)
 8016d8a:	4640      	mov	r0, r8
 8016d8c:	4649      	mov	r1, r9
 8016d8e:	f7e9 faa9 	bl	80002e4 <__aeabi_dsub>
 8016d92:	4680      	mov	r8, r0
 8016d94:	4689      	mov	r9, r1
 8016d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016d9a:	f7e9 feeb 	bl	8000b74 <__aeabi_dcmpgt>
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	f040 8296 	bne.w	80172d0 <_dtoa_r+0x990>
 8016da4:	4640      	mov	r0, r8
 8016da6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016dae:	4649      	mov	r1, r9
 8016db0:	f7e9 fec2 	bl	8000b38 <__aeabi_dcmplt>
 8016db4:	2800      	cmp	r0, #0
 8016db6:	f040 8289 	bne.w	80172cc <_dtoa_r+0x98c>
 8016dba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f2c0 814e 	blt.w	8017062 <_dtoa_r+0x722>
 8016dc6:	f1bb 0f0e 	cmp.w	fp, #14
 8016dca:	f300 814a 	bgt.w	8017062 <_dtoa_r+0x722>
 8016dce:	4b6b      	ldr	r3, [pc, #428]	; (8016f7c <_dtoa_r+0x63c>)
 8016dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f280 80dc 	bge.w	8016f98 <_dtoa_r+0x658>
 8016de0:	9b04      	ldr	r3, [sp, #16]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f300 80d8 	bgt.w	8016f98 <_dtoa_r+0x658>
 8016de8:	f040 826f 	bne.w	80172ca <_dtoa_r+0x98a>
 8016dec:	2200      	movs	r2, #0
 8016dee:	4b68      	ldr	r3, [pc, #416]	; (8016f90 <_dtoa_r+0x650>)
 8016df0:	4640      	mov	r0, r8
 8016df2:	4649      	mov	r1, r9
 8016df4:	f7e9 fc2e 	bl	8000654 <__aeabi_dmul>
 8016df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016dfc:	f7e9 feb0 	bl	8000b60 <__aeabi_dcmpge>
 8016e00:	9e04      	ldr	r6, [sp, #16]
 8016e02:	4637      	mov	r7, r6
 8016e04:	2800      	cmp	r0, #0
 8016e06:	f040 8245 	bne.w	8017294 <_dtoa_r+0x954>
 8016e0a:	9d00      	ldr	r5, [sp, #0]
 8016e0c:	2331      	movs	r3, #49	; 0x31
 8016e0e:	f10b 0b01 	add.w	fp, fp, #1
 8016e12:	f805 3b01 	strb.w	r3, [r5], #1
 8016e16:	e241      	b.n	801729c <_dtoa_r+0x95c>
 8016e18:	07f2      	lsls	r2, r6, #31
 8016e1a:	d505      	bpl.n	8016e28 <_dtoa_r+0x4e8>
 8016e1c:	3501      	adds	r5, #1
 8016e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e22:	f7e9 fc17 	bl	8000654 <__aeabi_dmul>
 8016e26:	2301      	movs	r3, #1
 8016e28:	1076      	asrs	r6, r6, #1
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	e773      	b.n	8016d16 <_dtoa_r+0x3d6>
 8016e2e:	2502      	movs	r5, #2
 8016e30:	e775      	b.n	8016d1e <_dtoa_r+0x3de>
 8016e32:	465f      	mov	r7, fp
 8016e34:	9e04      	ldr	r6, [sp, #16]
 8016e36:	e792      	b.n	8016d5e <_dtoa_r+0x41e>
 8016e38:	9900      	ldr	r1, [sp, #0]
 8016e3a:	4b50      	ldr	r3, [pc, #320]	; (8016f7c <_dtoa_r+0x63c>)
 8016e3c:	4431      	add	r1, r6
 8016e3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016e42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e46:	9102      	str	r1, [sp, #8]
 8016e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e4a:	eeb0 9a47 	vmov.f32	s18, s14
 8016e4e:	eef0 9a67 	vmov.f32	s19, s15
 8016e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016e56:	2900      	cmp	r1, #0
 8016e58:	d044      	beq.n	8016ee4 <_dtoa_r+0x5a4>
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	494d      	ldr	r1, [pc, #308]	; (8016f94 <_dtoa_r+0x654>)
 8016e5e:	f7e9 fd23 	bl	80008a8 <__aeabi_ddiv>
 8016e62:	ec53 2b19 	vmov	r2, r3, d9
 8016e66:	f7e9 fa3d 	bl	80002e4 <__aeabi_dsub>
 8016e6a:	9d00      	ldr	r5, [sp, #0]
 8016e6c:	ec41 0b19 	vmov	d9, r0, r1
 8016e70:	4649      	mov	r1, r9
 8016e72:	4640      	mov	r0, r8
 8016e74:	f7e9 fe9e 	bl	8000bb4 <__aeabi_d2iz>
 8016e78:	4606      	mov	r6, r0
 8016e7a:	f7e9 fb81 	bl	8000580 <__aeabi_i2d>
 8016e7e:	4602      	mov	r2, r0
 8016e80:	3630      	adds	r6, #48	; 0x30
 8016e82:	460b      	mov	r3, r1
 8016e84:	4640      	mov	r0, r8
 8016e86:	4649      	mov	r1, r9
 8016e88:	f7e9 fa2c 	bl	80002e4 <__aeabi_dsub>
 8016e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8016e90:	4680      	mov	r8, r0
 8016e92:	4689      	mov	r9, r1
 8016e94:	ec53 2b19 	vmov	r2, r3, d9
 8016e98:	f7e9 fe4e 	bl	8000b38 <__aeabi_dcmplt>
 8016e9c:	2800      	cmp	r0, #0
 8016e9e:	d164      	bne.n	8016f6a <_dtoa_r+0x62a>
 8016ea0:	4642      	mov	r2, r8
 8016ea2:	464b      	mov	r3, r9
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	4937      	ldr	r1, [pc, #220]	; (8016f84 <_dtoa_r+0x644>)
 8016ea8:	f7e9 fa1c 	bl	80002e4 <__aeabi_dsub>
 8016eac:	ec53 2b19 	vmov	r2, r3, d9
 8016eb0:	f7e9 fe42 	bl	8000b38 <__aeabi_dcmplt>
 8016eb4:	2800      	cmp	r0, #0
 8016eb6:	f040 80b6 	bne.w	8017026 <_dtoa_r+0x6e6>
 8016eba:	9b02      	ldr	r3, [sp, #8]
 8016ebc:	429d      	cmp	r5, r3
 8016ebe:	f43f af7c 	beq.w	8016dba <_dtoa_r+0x47a>
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	4b30      	ldr	r3, [pc, #192]	; (8016f88 <_dtoa_r+0x648>)
 8016ec6:	ec51 0b19 	vmov	r0, r1, d9
 8016eca:	f7e9 fbc3 	bl	8000654 <__aeabi_dmul>
 8016ece:	2200      	movs	r2, #0
 8016ed0:	4b2d      	ldr	r3, [pc, #180]	; (8016f88 <_dtoa_r+0x648>)
 8016ed2:	ec41 0b19 	vmov	d9, r0, r1
 8016ed6:	4640      	mov	r0, r8
 8016ed8:	4649      	mov	r1, r9
 8016eda:	f7e9 fbbb 	bl	8000654 <__aeabi_dmul>
 8016ede:	4680      	mov	r8, r0
 8016ee0:	4689      	mov	r9, r1
 8016ee2:	e7c5      	b.n	8016e70 <_dtoa_r+0x530>
 8016ee4:	ec51 0b17 	vmov	r0, r1, d7
 8016ee8:	f7e9 fbb4 	bl	8000654 <__aeabi_dmul>
 8016eec:	9b02      	ldr	r3, [sp, #8]
 8016eee:	9d00      	ldr	r5, [sp, #0]
 8016ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ef2:	ec41 0b19 	vmov	d9, r0, r1
 8016ef6:	4649      	mov	r1, r9
 8016ef8:	4640      	mov	r0, r8
 8016efa:	f7e9 fe5b 	bl	8000bb4 <__aeabi_d2iz>
 8016efe:	4606      	mov	r6, r0
 8016f00:	f7e9 fb3e 	bl	8000580 <__aeabi_i2d>
 8016f04:	4602      	mov	r2, r0
 8016f06:	460b      	mov	r3, r1
 8016f08:	4640      	mov	r0, r8
 8016f0a:	4649      	mov	r1, r9
 8016f0c:	3630      	adds	r6, #48	; 0x30
 8016f0e:	f7e9 f9e9 	bl	80002e4 <__aeabi_dsub>
 8016f12:	9b02      	ldr	r3, [sp, #8]
 8016f14:	f805 6b01 	strb.w	r6, [r5], #1
 8016f18:	4680      	mov	r8, r0
 8016f1a:	429d      	cmp	r5, r3
 8016f1c:	4689      	mov	r9, r1
 8016f1e:	f04f 0200 	mov.w	r2, #0
 8016f22:	d124      	bne.n	8016f6e <_dtoa_r+0x62e>
 8016f24:	4b1b      	ldr	r3, [pc, #108]	; (8016f94 <_dtoa_r+0x654>)
 8016f26:	ec51 0b19 	vmov	r0, r1, d9
 8016f2a:	f7e9 f9dd 	bl	80002e8 <__adddf3>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	460b      	mov	r3, r1
 8016f32:	4640      	mov	r0, r8
 8016f34:	4649      	mov	r1, r9
 8016f36:	f7e9 fe1d 	bl	8000b74 <__aeabi_dcmpgt>
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	d173      	bne.n	8017026 <_dtoa_r+0x6e6>
 8016f3e:	2000      	movs	r0, #0
 8016f40:	4914      	ldr	r1, [pc, #80]	; (8016f94 <_dtoa_r+0x654>)
 8016f42:	ec53 2b19 	vmov	r2, r3, d9
 8016f46:	f7e9 f9cd 	bl	80002e4 <__aeabi_dsub>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	4640      	mov	r0, r8
 8016f50:	4649      	mov	r1, r9
 8016f52:	f7e9 fdf1 	bl	8000b38 <__aeabi_dcmplt>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f43f af2f 	beq.w	8016dba <_dtoa_r+0x47a>
 8016f5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016f5e:	1e6b      	subs	r3, r5, #1
 8016f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f66:	2b30      	cmp	r3, #48	; 0x30
 8016f68:	d0f8      	beq.n	8016f5c <_dtoa_r+0x61c>
 8016f6a:	46bb      	mov	fp, r7
 8016f6c:	e04a      	b.n	8017004 <_dtoa_r+0x6c4>
 8016f6e:	4b06      	ldr	r3, [pc, #24]	; (8016f88 <_dtoa_r+0x648>)
 8016f70:	f7e9 fb70 	bl	8000654 <__aeabi_dmul>
 8016f74:	4680      	mov	r8, r0
 8016f76:	4689      	mov	r9, r1
 8016f78:	e7bd      	b.n	8016ef6 <_dtoa_r+0x5b6>
 8016f7a:	bf00      	nop
 8016f7c:	08019808 	.word	0x08019808
 8016f80:	080197e0 	.word	0x080197e0
 8016f84:	3ff00000 	.word	0x3ff00000
 8016f88:	40240000 	.word	0x40240000
 8016f8c:	401c0000 	.word	0x401c0000
 8016f90:	40140000 	.word	0x40140000
 8016f94:	3fe00000 	.word	0x3fe00000
 8016f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016f9c:	9d00      	ldr	r5, [sp, #0]
 8016f9e:	4642      	mov	r2, r8
 8016fa0:	464b      	mov	r3, r9
 8016fa2:	4630      	mov	r0, r6
 8016fa4:	4639      	mov	r1, r7
 8016fa6:	f7e9 fc7f 	bl	80008a8 <__aeabi_ddiv>
 8016faa:	f7e9 fe03 	bl	8000bb4 <__aeabi_d2iz>
 8016fae:	9001      	str	r0, [sp, #4]
 8016fb0:	f7e9 fae6 	bl	8000580 <__aeabi_i2d>
 8016fb4:	4642      	mov	r2, r8
 8016fb6:	464b      	mov	r3, r9
 8016fb8:	f7e9 fb4c 	bl	8000654 <__aeabi_dmul>
 8016fbc:	4602      	mov	r2, r0
 8016fbe:	460b      	mov	r3, r1
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	4639      	mov	r1, r7
 8016fc4:	f7e9 f98e 	bl	80002e4 <__aeabi_dsub>
 8016fc8:	9e01      	ldr	r6, [sp, #4]
 8016fca:	9f04      	ldr	r7, [sp, #16]
 8016fcc:	4602      	mov	r2, r0
 8016fce:	3630      	adds	r6, #48	; 0x30
 8016fd0:	460b      	mov	r3, r1
 8016fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8016fd6:	9e00      	ldr	r6, [sp, #0]
 8016fd8:	1bae      	subs	r6, r5, r6
 8016fda:	42b7      	cmp	r7, r6
 8016fdc:	d134      	bne.n	8017048 <_dtoa_r+0x708>
 8016fde:	f7e9 f983 	bl	80002e8 <__adddf3>
 8016fe2:	4642      	mov	r2, r8
 8016fe4:	464b      	mov	r3, r9
 8016fe6:	4606      	mov	r6, r0
 8016fe8:	460f      	mov	r7, r1
 8016fea:	f7e9 fdc3 	bl	8000b74 <__aeabi_dcmpgt>
 8016fee:	b9c8      	cbnz	r0, 8017024 <_dtoa_r+0x6e4>
 8016ff0:	4642      	mov	r2, r8
 8016ff2:	464b      	mov	r3, r9
 8016ff4:	4630      	mov	r0, r6
 8016ff6:	4639      	mov	r1, r7
 8016ff8:	f7e9 fd94 	bl	8000b24 <__aeabi_dcmpeq>
 8016ffc:	b110      	cbz	r0, 8017004 <_dtoa_r+0x6c4>
 8016ffe:	9b01      	ldr	r3, [sp, #4]
 8017000:	07db      	lsls	r3, r3, #31
 8017002:	d40f      	bmi.n	8017024 <_dtoa_r+0x6e4>
 8017004:	4651      	mov	r1, sl
 8017006:	4620      	mov	r0, r4
 8017008:	f000 fbca 	bl	80177a0 <_Bfree>
 801700c:	2300      	movs	r3, #0
 801700e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017010:	702b      	strb	r3, [r5, #0]
 8017012:	f10b 0301 	add.w	r3, fp, #1
 8017016:	6013      	str	r3, [r2, #0]
 8017018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801701a:	2b00      	cmp	r3, #0
 801701c:	f43f ace2 	beq.w	80169e4 <_dtoa_r+0xa4>
 8017020:	601d      	str	r5, [r3, #0]
 8017022:	e4df      	b.n	80169e4 <_dtoa_r+0xa4>
 8017024:	465f      	mov	r7, fp
 8017026:	462b      	mov	r3, r5
 8017028:	461d      	mov	r5, r3
 801702a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801702e:	2a39      	cmp	r2, #57	; 0x39
 8017030:	d106      	bne.n	8017040 <_dtoa_r+0x700>
 8017032:	9a00      	ldr	r2, [sp, #0]
 8017034:	429a      	cmp	r2, r3
 8017036:	d1f7      	bne.n	8017028 <_dtoa_r+0x6e8>
 8017038:	2230      	movs	r2, #48	; 0x30
 801703a:	9900      	ldr	r1, [sp, #0]
 801703c:	3701      	adds	r7, #1
 801703e:	700a      	strb	r2, [r1, #0]
 8017040:	781a      	ldrb	r2, [r3, #0]
 8017042:	3201      	adds	r2, #1
 8017044:	701a      	strb	r2, [r3, #0]
 8017046:	e790      	b.n	8016f6a <_dtoa_r+0x62a>
 8017048:	2200      	movs	r2, #0
 801704a:	4ba3      	ldr	r3, [pc, #652]	; (80172d8 <_dtoa_r+0x998>)
 801704c:	f7e9 fb02 	bl	8000654 <__aeabi_dmul>
 8017050:	2200      	movs	r2, #0
 8017052:	2300      	movs	r3, #0
 8017054:	4606      	mov	r6, r0
 8017056:	460f      	mov	r7, r1
 8017058:	f7e9 fd64 	bl	8000b24 <__aeabi_dcmpeq>
 801705c:	2800      	cmp	r0, #0
 801705e:	d09e      	beq.n	8016f9e <_dtoa_r+0x65e>
 8017060:	e7d0      	b.n	8017004 <_dtoa_r+0x6c4>
 8017062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017064:	2a00      	cmp	r2, #0
 8017066:	f000 80ca 	beq.w	80171fe <_dtoa_r+0x8be>
 801706a:	9a07      	ldr	r2, [sp, #28]
 801706c:	2a01      	cmp	r2, #1
 801706e:	f300 80ad 	bgt.w	80171cc <_dtoa_r+0x88c>
 8017072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017074:	2a00      	cmp	r2, #0
 8017076:	f000 80a5 	beq.w	80171c4 <_dtoa_r+0x884>
 801707a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801707e:	9e08      	ldr	r6, [sp, #32]
 8017080:	9d05      	ldr	r5, [sp, #20]
 8017082:	9a05      	ldr	r2, [sp, #20]
 8017084:	2101      	movs	r1, #1
 8017086:	4620      	mov	r0, r4
 8017088:	441a      	add	r2, r3
 801708a:	9205      	str	r2, [sp, #20]
 801708c:	9a06      	ldr	r2, [sp, #24]
 801708e:	441a      	add	r2, r3
 8017090:	9206      	str	r2, [sp, #24]
 8017092:	f000 fc3d 	bl	8017910 <__i2b>
 8017096:	4607      	mov	r7, r0
 8017098:	b165      	cbz	r5, 80170b4 <_dtoa_r+0x774>
 801709a:	9b06      	ldr	r3, [sp, #24]
 801709c:	2b00      	cmp	r3, #0
 801709e:	dd09      	ble.n	80170b4 <_dtoa_r+0x774>
 80170a0:	42ab      	cmp	r3, r5
 80170a2:	9a05      	ldr	r2, [sp, #20]
 80170a4:	bfa8      	it	ge
 80170a6:	462b      	movge	r3, r5
 80170a8:	1ad2      	subs	r2, r2, r3
 80170aa:	1aed      	subs	r5, r5, r3
 80170ac:	9205      	str	r2, [sp, #20]
 80170ae:	9a06      	ldr	r2, [sp, #24]
 80170b0:	1ad3      	subs	r3, r2, r3
 80170b2:	9306      	str	r3, [sp, #24]
 80170b4:	9b08      	ldr	r3, [sp, #32]
 80170b6:	b1f3      	cbz	r3, 80170f6 <_dtoa_r+0x7b6>
 80170b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	f000 80a3 	beq.w	8017206 <_dtoa_r+0x8c6>
 80170c0:	2e00      	cmp	r6, #0
 80170c2:	dd10      	ble.n	80170e6 <_dtoa_r+0x7a6>
 80170c4:	4639      	mov	r1, r7
 80170c6:	4632      	mov	r2, r6
 80170c8:	4620      	mov	r0, r4
 80170ca:	f000 fce1 	bl	8017a90 <__pow5mult>
 80170ce:	4652      	mov	r2, sl
 80170d0:	4601      	mov	r1, r0
 80170d2:	4607      	mov	r7, r0
 80170d4:	4620      	mov	r0, r4
 80170d6:	f000 fc31 	bl	801793c <__multiply>
 80170da:	4680      	mov	r8, r0
 80170dc:	4651      	mov	r1, sl
 80170de:	4620      	mov	r0, r4
 80170e0:	46c2      	mov	sl, r8
 80170e2:	f000 fb5d 	bl	80177a0 <_Bfree>
 80170e6:	9b08      	ldr	r3, [sp, #32]
 80170e8:	1b9a      	subs	r2, r3, r6
 80170ea:	d004      	beq.n	80170f6 <_dtoa_r+0x7b6>
 80170ec:	4651      	mov	r1, sl
 80170ee:	4620      	mov	r0, r4
 80170f0:	f000 fcce 	bl	8017a90 <__pow5mult>
 80170f4:	4682      	mov	sl, r0
 80170f6:	2101      	movs	r1, #1
 80170f8:	4620      	mov	r0, r4
 80170fa:	f000 fc09 	bl	8017910 <__i2b>
 80170fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017100:	4606      	mov	r6, r0
 8017102:	2b00      	cmp	r3, #0
 8017104:	f340 8081 	ble.w	801720a <_dtoa_r+0x8ca>
 8017108:	461a      	mov	r2, r3
 801710a:	4601      	mov	r1, r0
 801710c:	4620      	mov	r0, r4
 801710e:	f000 fcbf 	bl	8017a90 <__pow5mult>
 8017112:	9b07      	ldr	r3, [sp, #28]
 8017114:	4606      	mov	r6, r0
 8017116:	2b01      	cmp	r3, #1
 8017118:	dd7a      	ble.n	8017210 <_dtoa_r+0x8d0>
 801711a:	f04f 0800 	mov.w	r8, #0
 801711e:	6933      	ldr	r3, [r6, #16]
 8017120:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017124:	6918      	ldr	r0, [r3, #16]
 8017126:	f000 fba5 	bl	8017874 <__hi0bits>
 801712a:	f1c0 0020 	rsb	r0, r0, #32
 801712e:	9b06      	ldr	r3, [sp, #24]
 8017130:	4418      	add	r0, r3
 8017132:	f010 001f 	ands.w	r0, r0, #31
 8017136:	f000 8094 	beq.w	8017262 <_dtoa_r+0x922>
 801713a:	f1c0 0320 	rsb	r3, r0, #32
 801713e:	2b04      	cmp	r3, #4
 8017140:	f340 8085 	ble.w	801724e <_dtoa_r+0x90e>
 8017144:	f1c0 001c 	rsb	r0, r0, #28
 8017148:	9b05      	ldr	r3, [sp, #20]
 801714a:	4403      	add	r3, r0
 801714c:	4405      	add	r5, r0
 801714e:	9305      	str	r3, [sp, #20]
 8017150:	9b06      	ldr	r3, [sp, #24]
 8017152:	4403      	add	r3, r0
 8017154:	9306      	str	r3, [sp, #24]
 8017156:	9b05      	ldr	r3, [sp, #20]
 8017158:	2b00      	cmp	r3, #0
 801715a:	dd05      	ble.n	8017168 <_dtoa_r+0x828>
 801715c:	4651      	mov	r1, sl
 801715e:	461a      	mov	r2, r3
 8017160:	4620      	mov	r0, r4
 8017162:	f000 fcef 	bl	8017b44 <__lshift>
 8017166:	4682      	mov	sl, r0
 8017168:	9b06      	ldr	r3, [sp, #24]
 801716a:	2b00      	cmp	r3, #0
 801716c:	dd05      	ble.n	801717a <_dtoa_r+0x83a>
 801716e:	4631      	mov	r1, r6
 8017170:	461a      	mov	r2, r3
 8017172:	4620      	mov	r0, r4
 8017174:	f000 fce6 	bl	8017b44 <__lshift>
 8017178:	4606      	mov	r6, r0
 801717a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801717c:	2b00      	cmp	r3, #0
 801717e:	d072      	beq.n	8017266 <_dtoa_r+0x926>
 8017180:	4631      	mov	r1, r6
 8017182:	4650      	mov	r0, sl
 8017184:	f000 fd4a 	bl	8017c1c <__mcmp>
 8017188:	2800      	cmp	r0, #0
 801718a:	da6c      	bge.n	8017266 <_dtoa_r+0x926>
 801718c:	2300      	movs	r3, #0
 801718e:	4651      	mov	r1, sl
 8017190:	220a      	movs	r2, #10
 8017192:	4620      	mov	r0, r4
 8017194:	f000 fb26 	bl	80177e4 <__multadd>
 8017198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801719a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801719e:	4682      	mov	sl, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f000 81af 	beq.w	8017504 <_dtoa_r+0xbc4>
 80171a6:	2300      	movs	r3, #0
 80171a8:	4639      	mov	r1, r7
 80171aa:	220a      	movs	r2, #10
 80171ac:	4620      	mov	r0, r4
 80171ae:	f000 fb19 	bl	80177e4 <__multadd>
 80171b2:	9b01      	ldr	r3, [sp, #4]
 80171b4:	4607      	mov	r7, r0
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	f300 8096 	bgt.w	80172e8 <_dtoa_r+0x9a8>
 80171bc:	9b07      	ldr	r3, [sp, #28]
 80171be:	2b02      	cmp	r3, #2
 80171c0:	dc59      	bgt.n	8017276 <_dtoa_r+0x936>
 80171c2:	e091      	b.n	80172e8 <_dtoa_r+0x9a8>
 80171c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80171ca:	e758      	b.n	801707e <_dtoa_r+0x73e>
 80171cc:	9b04      	ldr	r3, [sp, #16]
 80171ce:	1e5e      	subs	r6, r3, #1
 80171d0:	9b08      	ldr	r3, [sp, #32]
 80171d2:	42b3      	cmp	r3, r6
 80171d4:	bfb7      	itett	lt
 80171d6:	9b08      	ldrlt	r3, [sp, #32]
 80171d8:	1b9e      	subge	r6, r3, r6
 80171da:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80171dc:	1af3      	sublt	r3, r6, r3
 80171de:	bfbe      	ittt	lt
 80171e0:	9608      	strlt	r6, [sp, #32]
 80171e2:	2600      	movlt	r6, #0
 80171e4:	18d2      	addlt	r2, r2, r3
 80171e6:	9b04      	ldr	r3, [sp, #16]
 80171e8:	bfb8      	it	lt
 80171ea:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	bfb7      	itett	lt
 80171f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80171f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80171f8:	1a9d      	sublt	r5, r3, r2
 80171fa:	2300      	movlt	r3, #0
 80171fc:	e741      	b.n	8017082 <_dtoa_r+0x742>
 80171fe:	9e08      	ldr	r6, [sp, #32]
 8017200:	9d05      	ldr	r5, [sp, #20]
 8017202:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017204:	e748      	b.n	8017098 <_dtoa_r+0x758>
 8017206:	9a08      	ldr	r2, [sp, #32]
 8017208:	e770      	b.n	80170ec <_dtoa_r+0x7ac>
 801720a:	9b07      	ldr	r3, [sp, #28]
 801720c:	2b01      	cmp	r3, #1
 801720e:	dc19      	bgt.n	8017244 <_dtoa_r+0x904>
 8017210:	9b02      	ldr	r3, [sp, #8]
 8017212:	b9bb      	cbnz	r3, 8017244 <_dtoa_r+0x904>
 8017214:	9b03      	ldr	r3, [sp, #12]
 8017216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801721a:	b99b      	cbnz	r3, 8017244 <_dtoa_r+0x904>
 801721c:	9b03      	ldr	r3, [sp, #12]
 801721e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017222:	0d1b      	lsrs	r3, r3, #20
 8017224:	051b      	lsls	r3, r3, #20
 8017226:	b183      	cbz	r3, 801724a <_dtoa_r+0x90a>
 8017228:	9b05      	ldr	r3, [sp, #20]
 801722a:	f04f 0801 	mov.w	r8, #1
 801722e:	3301      	adds	r3, #1
 8017230:	9305      	str	r3, [sp, #20]
 8017232:	9b06      	ldr	r3, [sp, #24]
 8017234:	3301      	adds	r3, #1
 8017236:	9306      	str	r3, [sp, #24]
 8017238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801723a:	2b00      	cmp	r3, #0
 801723c:	f47f af6f 	bne.w	801711e <_dtoa_r+0x7de>
 8017240:	2001      	movs	r0, #1
 8017242:	e774      	b.n	801712e <_dtoa_r+0x7ee>
 8017244:	f04f 0800 	mov.w	r8, #0
 8017248:	e7f6      	b.n	8017238 <_dtoa_r+0x8f8>
 801724a:	4698      	mov	r8, r3
 801724c:	e7f4      	b.n	8017238 <_dtoa_r+0x8f8>
 801724e:	d082      	beq.n	8017156 <_dtoa_r+0x816>
 8017250:	331c      	adds	r3, #28
 8017252:	9a05      	ldr	r2, [sp, #20]
 8017254:	441a      	add	r2, r3
 8017256:	441d      	add	r5, r3
 8017258:	9205      	str	r2, [sp, #20]
 801725a:	9a06      	ldr	r2, [sp, #24]
 801725c:	441a      	add	r2, r3
 801725e:	9206      	str	r2, [sp, #24]
 8017260:	e779      	b.n	8017156 <_dtoa_r+0x816>
 8017262:	4603      	mov	r3, r0
 8017264:	e7f4      	b.n	8017250 <_dtoa_r+0x910>
 8017266:	9b04      	ldr	r3, [sp, #16]
 8017268:	2b00      	cmp	r3, #0
 801726a:	dc37      	bgt.n	80172dc <_dtoa_r+0x99c>
 801726c:	9b07      	ldr	r3, [sp, #28]
 801726e:	2b02      	cmp	r3, #2
 8017270:	dd34      	ble.n	80172dc <_dtoa_r+0x99c>
 8017272:	9b04      	ldr	r3, [sp, #16]
 8017274:	9301      	str	r3, [sp, #4]
 8017276:	9b01      	ldr	r3, [sp, #4]
 8017278:	b963      	cbnz	r3, 8017294 <_dtoa_r+0x954>
 801727a:	4631      	mov	r1, r6
 801727c:	2205      	movs	r2, #5
 801727e:	4620      	mov	r0, r4
 8017280:	f000 fab0 	bl	80177e4 <__multadd>
 8017284:	4601      	mov	r1, r0
 8017286:	4606      	mov	r6, r0
 8017288:	4650      	mov	r0, sl
 801728a:	f000 fcc7 	bl	8017c1c <__mcmp>
 801728e:	2800      	cmp	r0, #0
 8017290:	f73f adbb 	bgt.w	8016e0a <_dtoa_r+0x4ca>
 8017294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017296:	9d00      	ldr	r5, [sp, #0]
 8017298:	ea6f 0b03 	mvn.w	fp, r3
 801729c:	f04f 0800 	mov.w	r8, #0
 80172a0:	4631      	mov	r1, r6
 80172a2:	4620      	mov	r0, r4
 80172a4:	f000 fa7c 	bl	80177a0 <_Bfree>
 80172a8:	2f00      	cmp	r7, #0
 80172aa:	f43f aeab 	beq.w	8017004 <_dtoa_r+0x6c4>
 80172ae:	f1b8 0f00 	cmp.w	r8, #0
 80172b2:	d005      	beq.n	80172c0 <_dtoa_r+0x980>
 80172b4:	45b8      	cmp	r8, r7
 80172b6:	d003      	beq.n	80172c0 <_dtoa_r+0x980>
 80172b8:	4641      	mov	r1, r8
 80172ba:	4620      	mov	r0, r4
 80172bc:	f000 fa70 	bl	80177a0 <_Bfree>
 80172c0:	4639      	mov	r1, r7
 80172c2:	4620      	mov	r0, r4
 80172c4:	f000 fa6c 	bl	80177a0 <_Bfree>
 80172c8:	e69c      	b.n	8017004 <_dtoa_r+0x6c4>
 80172ca:	2600      	movs	r6, #0
 80172cc:	4637      	mov	r7, r6
 80172ce:	e7e1      	b.n	8017294 <_dtoa_r+0x954>
 80172d0:	46bb      	mov	fp, r7
 80172d2:	4637      	mov	r7, r6
 80172d4:	e599      	b.n	8016e0a <_dtoa_r+0x4ca>
 80172d6:	bf00      	nop
 80172d8:	40240000 	.word	0x40240000
 80172dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172de:	2b00      	cmp	r3, #0
 80172e0:	f000 80c8 	beq.w	8017474 <_dtoa_r+0xb34>
 80172e4:	9b04      	ldr	r3, [sp, #16]
 80172e6:	9301      	str	r3, [sp, #4]
 80172e8:	2d00      	cmp	r5, #0
 80172ea:	dd05      	ble.n	80172f8 <_dtoa_r+0x9b8>
 80172ec:	4639      	mov	r1, r7
 80172ee:	462a      	mov	r2, r5
 80172f0:	4620      	mov	r0, r4
 80172f2:	f000 fc27 	bl	8017b44 <__lshift>
 80172f6:	4607      	mov	r7, r0
 80172f8:	f1b8 0f00 	cmp.w	r8, #0
 80172fc:	d05b      	beq.n	80173b6 <_dtoa_r+0xa76>
 80172fe:	6879      	ldr	r1, [r7, #4]
 8017300:	4620      	mov	r0, r4
 8017302:	f000 fa0d 	bl	8017720 <_Balloc>
 8017306:	4605      	mov	r5, r0
 8017308:	b928      	cbnz	r0, 8017316 <_dtoa_r+0x9d6>
 801730a:	4b82      	ldr	r3, [pc, #520]	; (8017514 <_dtoa_r+0xbd4>)
 801730c:	4602      	mov	r2, r0
 801730e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017312:	f7ff bb2e 	b.w	8016972 <_dtoa_r+0x32>
 8017316:	693a      	ldr	r2, [r7, #16]
 8017318:	f107 010c 	add.w	r1, r7, #12
 801731c:	300c      	adds	r0, #12
 801731e:	3202      	adds	r2, #2
 8017320:	0092      	lsls	r2, r2, #2
 8017322:	f7ff fa50 	bl	80167c6 <memcpy>
 8017326:	2201      	movs	r2, #1
 8017328:	4629      	mov	r1, r5
 801732a:	4620      	mov	r0, r4
 801732c:	f000 fc0a 	bl	8017b44 <__lshift>
 8017330:	9b00      	ldr	r3, [sp, #0]
 8017332:	46b8      	mov	r8, r7
 8017334:	4607      	mov	r7, r0
 8017336:	3301      	adds	r3, #1
 8017338:	9304      	str	r3, [sp, #16]
 801733a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801733e:	4413      	add	r3, r2
 8017340:	9308      	str	r3, [sp, #32]
 8017342:	9b02      	ldr	r3, [sp, #8]
 8017344:	f003 0301 	and.w	r3, r3, #1
 8017348:	9306      	str	r3, [sp, #24]
 801734a:	9b04      	ldr	r3, [sp, #16]
 801734c:	4631      	mov	r1, r6
 801734e:	4650      	mov	r0, sl
 8017350:	3b01      	subs	r3, #1
 8017352:	9301      	str	r3, [sp, #4]
 8017354:	f7ff fa62 	bl	801681c <quorem>
 8017358:	4641      	mov	r1, r8
 801735a:	9002      	str	r0, [sp, #8]
 801735c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017360:	4650      	mov	r0, sl
 8017362:	f000 fc5b 	bl	8017c1c <__mcmp>
 8017366:	463a      	mov	r2, r7
 8017368:	9005      	str	r0, [sp, #20]
 801736a:	4631      	mov	r1, r6
 801736c:	4620      	mov	r0, r4
 801736e:	f000 fc71 	bl	8017c54 <__mdiff>
 8017372:	68c2      	ldr	r2, [r0, #12]
 8017374:	4605      	mov	r5, r0
 8017376:	bb02      	cbnz	r2, 80173ba <_dtoa_r+0xa7a>
 8017378:	4601      	mov	r1, r0
 801737a:	4650      	mov	r0, sl
 801737c:	f000 fc4e 	bl	8017c1c <__mcmp>
 8017380:	4602      	mov	r2, r0
 8017382:	4629      	mov	r1, r5
 8017384:	4620      	mov	r0, r4
 8017386:	9209      	str	r2, [sp, #36]	; 0x24
 8017388:	f000 fa0a 	bl	80177a0 <_Bfree>
 801738c:	9b07      	ldr	r3, [sp, #28]
 801738e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017390:	9d04      	ldr	r5, [sp, #16]
 8017392:	ea43 0102 	orr.w	r1, r3, r2
 8017396:	9b06      	ldr	r3, [sp, #24]
 8017398:	4319      	orrs	r1, r3
 801739a:	d110      	bne.n	80173be <_dtoa_r+0xa7e>
 801739c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80173a0:	d029      	beq.n	80173f6 <_dtoa_r+0xab6>
 80173a2:	9b05      	ldr	r3, [sp, #20]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	dd02      	ble.n	80173ae <_dtoa_r+0xa6e>
 80173a8:	9b02      	ldr	r3, [sp, #8]
 80173aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80173ae:	9b01      	ldr	r3, [sp, #4]
 80173b0:	f883 9000 	strb.w	r9, [r3]
 80173b4:	e774      	b.n	80172a0 <_dtoa_r+0x960>
 80173b6:	4638      	mov	r0, r7
 80173b8:	e7ba      	b.n	8017330 <_dtoa_r+0x9f0>
 80173ba:	2201      	movs	r2, #1
 80173bc:	e7e1      	b.n	8017382 <_dtoa_r+0xa42>
 80173be:	9b05      	ldr	r3, [sp, #20]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	db04      	blt.n	80173ce <_dtoa_r+0xa8e>
 80173c4:	9907      	ldr	r1, [sp, #28]
 80173c6:	430b      	orrs	r3, r1
 80173c8:	9906      	ldr	r1, [sp, #24]
 80173ca:	430b      	orrs	r3, r1
 80173cc:	d120      	bne.n	8017410 <_dtoa_r+0xad0>
 80173ce:	2a00      	cmp	r2, #0
 80173d0:	dded      	ble.n	80173ae <_dtoa_r+0xa6e>
 80173d2:	4651      	mov	r1, sl
 80173d4:	2201      	movs	r2, #1
 80173d6:	4620      	mov	r0, r4
 80173d8:	f000 fbb4 	bl	8017b44 <__lshift>
 80173dc:	4631      	mov	r1, r6
 80173de:	4682      	mov	sl, r0
 80173e0:	f000 fc1c 	bl	8017c1c <__mcmp>
 80173e4:	2800      	cmp	r0, #0
 80173e6:	dc03      	bgt.n	80173f0 <_dtoa_r+0xab0>
 80173e8:	d1e1      	bne.n	80173ae <_dtoa_r+0xa6e>
 80173ea:	f019 0f01 	tst.w	r9, #1
 80173ee:	d0de      	beq.n	80173ae <_dtoa_r+0xa6e>
 80173f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80173f4:	d1d8      	bne.n	80173a8 <_dtoa_r+0xa68>
 80173f6:	2339      	movs	r3, #57	; 0x39
 80173f8:	9a01      	ldr	r2, [sp, #4]
 80173fa:	7013      	strb	r3, [r2, #0]
 80173fc:	462b      	mov	r3, r5
 80173fe:	461d      	mov	r5, r3
 8017400:	3b01      	subs	r3, #1
 8017402:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017406:	2a39      	cmp	r2, #57	; 0x39
 8017408:	d06b      	beq.n	80174e2 <_dtoa_r+0xba2>
 801740a:	3201      	adds	r2, #1
 801740c:	701a      	strb	r2, [r3, #0]
 801740e:	e747      	b.n	80172a0 <_dtoa_r+0x960>
 8017410:	2a00      	cmp	r2, #0
 8017412:	dd07      	ble.n	8017424 <_dtoa_r+0xae4>
 8017414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017418:	d0ed      	beq.n	80173f6 <_dtoa_r+0xab6>
 801741a:	f109 0301 	add.w	r3, r9, #1
 801741e:	9a01      	ldr	r2, [sp, #4]
 8017420:	7013      	strb	r3, [r2, #0]
 8017422:	e73d      	b.n	80172a0 <_dtoa_r+0x960>
 8017424:	9b04      	ldr	r3, [sp, #16]
 8017426:	9a08      	ldr	r2, [sp, #32]
 8017428:	f803 9c01 	strb.w	r9, [r3, #-1]
 801742c:	4293      	cmp	r3, r2
 801742e:	d042      	beq.n	80174b6 <_dtoa_r+0xb76>
 8017430:	4651      	mov	r1, sl
 8017432:	2300      	movs	r3, #0
 8017434:	220a      	movs	r2, #10
 8017436:	4620      	mov	r0, r4
 8017438:	f000 f9d4 	bl	80177e4 <__multadd>
 801743c:	45b8      	cmp	r8, r7
 801743e:	4682      	mov	sl, r0
 8017440:	f04f 0300 	mov.w	r3, #0
 8017444:	f04f 020a 	mov.w	r2, #10
 8017448:	4641      	mov	r1, r8
 801744a:	4620      	mov	r0, r4
 801744c:	d107      	bne.n	801745e <_dtoa_r+0xb1e>
 801744e:	f000 f9c9 	bl	80177e4 <__multadd>
 8017452:	4680      	mov	r8, r0
 8017454:	4607      	mov	r7, r0
 8017456:	9b04      	ldr	r3, [sp, #16]
 8017458:	3301      	adds	r3, #1
 801745a:	9304      	str	r3, [sp, #16]
 801745c:	e775      	b.n	801734a <_dtoa_r+0xa0a>
 801745e:	f000 f9c1 	bl	80177e4 <__multadd>
 8017462:	4639      	mov	r1, r7
 8017464:	4680      	mov	r8, r0
 8017466:	2300      	movs	r3, #0
 8017468:	220a      	movs	r2, #10
 801746a:	4620      	mov	r0, r4
 801746c:	f000 f9ba 	bl	80177e4 <__multadd>
 8017470:	4607      	mov	r7, r0
 8017472:	e7f0      	b.n	8017456 <_dtoa_r+0xb16>
 8017474:	9b04      	ldr	r3, [sp, #16]
 8017476:	9301      	str	r3, [sp, #4]
 8017478:	9d00      	ldr	r5, [sp, #0]
 801747a:	4631      	mov	r1, r6
 801747c:	4650      	mov	r0, sl
 801747e:	f7ff f9cd 	bl	801681c <quorem>
 8017482:	9b00      	ldr	r3, [sp, #0]
 8017484:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017488:	f805 9b01 	strb.w	r9, [r5], #1
 801748c:	1aea      	subs	r2, r5, r3
 801748e:	9b01      	ldr	r3, [sp, #4]
 8017490:	4293      	cmp	r3, r2
 8017492:	dd07      	ble.n	80174a4 <_dtoa_r+0xb64>
 8017494:	4651      	mov	r1, sl
 8017496:	2300      	movs	r3, #0
 8017498:	220a      	movs	r2, #10
 801749a:	4620      	mov	r0, r4
 801749c:	f000 f9a2 	bl	80177e4 <__multadd>
 80174a0:	4682      	mov	sl, r0
 80174a2:	e7ea      	b.n	801747a <_dtoa_r+0xb3a>
 80174a4:	9b01      	ldr	r3, [sp, #4]
 80174a6:	f04f 0800 	mov.w	r8, #0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	bfcc      	ite	gt
 80174ae:	461d      	movgt	r5, r3
 80174b0:	2501      	movle	r5, #1
 80174b2:	9b00      	ldr	r3, [sp, #0]
 80174b4:	441d      	add	r5, r3
 80174b6:	4651      	mov	r1, sl
 80174b8:	2201      	movs	r2, #1
 80174ba:	4620      	mov	r0, r4
 80174bc:	f000 fb42 	bl	8017b44 <__lshift>
 80174c0:	4631      	mov	r1, r6
 80174c2:	4682      	mov	sl, r0
 80174c4:	f000 fbaa 	bl	8017c1c <__mcmp>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	dc97      	bgt.n	80173fc <_dtoa_r+0xabc>
 80174cc:	d102      	bne.n	80174d4 <_dtoa_r+0xb94>
 80174ce:	f019 0f01 	tst.w	r9, #1
 80174d2:	d193      	bne.n	80173fc <_dtoa_r+0xabc>
 80174d4:	462b      	mov	r3, r5
 80174d6:	461d      	mov	r5, r3
 80174d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80174dc:	2a30      	cmp	r2, #48	; 0x30
 80174de:	d0fa      	beq.n	80174d6 <_dtoa_r+0xb96>
 80174e0:	e6de      	b.n	80172a0 <_dtoa_r+0x960>
 80174e2:	9a00      	ldr	r2, [sp, #0]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d18a      	bne.n	80173fe <_dtoa_r+0xabe>
 80174e8:	f10b 0b01 	add.w	fp, fp, #1
 80174ec:	2331      	movs	r3, #49	; 0x31
 80174ee:	e797      	b.n	8017420 <_dtoa_r+0xae0>
 80174f0:	4b09      	ldr	r3, [pc, #36]	; (8017518 <_dtoa_r+0xbd8>)
 80174f2:	f7ff ba9a 	b.w	8016a2a <_dtoa_r+0xea>
 80174f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f47f aa6e 	bne.w	80169da <_dtoa_r+0x9a>
 80174fe:	4b07      	ldr	r3, [pc, #28]	; (801751c <_dtoa_r+0xbdc>)
 8017500:	f7ff ba93 	b.w	8016a2a <_dtoa_r+0xea>
 8017504:	9b01      	ldr	r3, [sp, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	dcb6      	bgt.n	8017478 <_dtoa_r+0xb38>
 801750a:	9b07      	ldr	r3, [sp, #28]
 801750c:	2b02      	cmp	r3, #2
 801750e:	f73f aeb2 	bgt.w	8017276 <_dtoa_r+0x936>
 8017512:	e7b1      	b.n	8017478 <_dtoa_r+0xb38>
 8017514:	0801976f 	.word	0x0801976f
 8017518:	08019639 	.word	0x08019639
 801751c:	0801970a 	.word	0x0801970a

08017520 <_free_r>:
 8017520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017522:	2900      	cmp	r1, #0
 8017524:	d043      	beq.n	80175ae <_free_r+0x8e>
 8017526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801752a:	1f0c      	subs	r4, r1, #4
 801752c:	9001      	str	r0, [sp, #4]
 801752e:	2b00      	cmp	r3, #0
 8017530:	bfb8      	it	lt
 8017532:	18e4      	addlt	r4, r4, r3
 8017534:	f000 f8e8 	bl	8017708 <__malloc_lock>
 8017538:	4a1e      	ldr	r2, [pc, #120]	; (80175b4 <_free_r+0x94>)
 801753a:	9801      	ldr	r0, [sp, #4]
 801753c:	6813      	ldr	r3, [r2, #0]
 801753e:	b933      	cbnz	r3, 801754e <_free_r+0x2e>
 8017540:	6063      	str	r3, [r4, #4]
 8017542:	6014      	str	r4, [r2, #0]
 8017544:	b003      	add	sp, #12
 8017546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801754a:	f000 b8e3 	b.w	8017714 <__malloc_unlock>
 801754e:	42a3      	cmp	r3, r4
 8017550:	d908      	bls.n	8017564 <_free_r+0x44>
 8017552:	6825      	ldr	r5, [r4, #0]
 8017554:	1961      	adds	r1, r4, r5
 8017556:	428b      	cmp	r3, r1
 8017558:	bf01      	itttt	eq
 801755a:	6819      	ldreq	r1, [r3, #0]
 801755c:	685b      	ldreq	r3, [r3, #4]
 801755e:	1949      	addeq	r1, r1, r5
 8017560:	6021      	streq	r1, [r4, #0]
 8017562:	e7ed      	b.n	8017540 <_free_r+0x20>
 8017564:	461a      	mov	r2, r3
 8017566:	685b      	ldr	r3, [r3, #4]
 8017568:	b10b      	cbz	r3, 801756e <_free_r+0x4e>
 801756a:	42a3      	cmp	r3, r4
 801756c:	d9fa      	bls.n	8017564 <_free_r+0x44>
 801756e:	6811      	ldr	r1, [r2, #0]
 8017570:	1855      	adds	r5, r2, r1
 8017572:	42a5      	cmp	r5, r4
 8017574:	d10b      	bne.n	801758e <_free_r+0x6e>
 8017576:	6824      	ldr	r4, [r4, #0]
 8017578:	4421      	add	r1, r4
 801757a:	1854      	adds	r4, r2, r1
 801757c:	6011      	str	r1, [r2, #0]
 801757e:	42a3      	cmp	r3, r4
 8017580:	d1e0      	bne.n	8017544 <_free_r+0x24>
 8017582:	681c      	ldr	r4, [r3, #0]
 8017584:	685b      	ldr	r3, [r3, #4]
 8017586:	440c      	add	r4, r1
 8017588:	6053      	str	r3, [r2, #4]
 801758a:	6014      	str	r4, [r2, #0]
 801758c:	e7da      	b.n	8017544 <_free_r+0x24>
 801758e:	d902      	bls.n	8017596 <_free_r+0x76>
 8017590:	230c      	movs	r3, #12
 8017592:	6003      	str	r3, [r0, #0]
 8017594:	e7d6      	b.n	8017544 <_free_r+0x24>
 8017596:	6825      	ldr	r5, [r4, #0]
 8017598:	1961      	adds	r1, r4, r5
 801759a:	428b      	cmp	r3, r1
 801759c:	bf02      	ittt	eq
 801759e:	6819      	ldreq	r1, [r3, #0]
 80175a0:	685b      	ldreq	r3, [r3, #4]
 80175a2:	1949      	addeq	r1, r1, r5
 80175a4:	6063      	str	r3, [r4, #4]
 80175a6:	bf08      	it	eq
 80175a8:	6021      	streq	r1, [r4, #0]
 80175aa:	6054      	str	r4, [r2, #4]
 80175ac:	e7ca      	b.n	8017544 <_free_r+0x24>
 80175ae:	b003      	add	sp, #12
 80175b0:	bd30      	pop	{r4, r5, pc}
 80175b2:	bf00      	nop
 80175b4:	20004a10 	.word	0x20004a10

080175b8 <malloc>:
 80175b8:	4b02      	ldr	r3, [pc, #8]	; (80175c4 <malloc+0xc>)
 80175ba:	4601      	mov	r1, r0
 80175bc:	6818      	ldr	r0, [r3, #0]
 80175be:	f000 b823 	b.w	8017608 <_malloc_r>
 80175c2:	bf00      	nop
 80175c4:	20000200 	.word	0x20000200

080175c8 <sbrk_aligned>:
 80175c8:	b570      	push	{r4, r5, r6, lr}
 80175ca:	4e0e      	ldr	r6, [pc, #56]	; (8017604 <sbrk_aligned+0x3c>)
 80175cc:	460c      	mov	r4, r1
 80175ce:	4605      	mov	r5, r0
 80175d0:	6831      	ldr	r1, [r6, #0]
 80175d2:	b911      	cbnz	r1, 80175da <sbrk_aligned+0x12>
 80175d4:	f000 ff10 	bl	80183f8 <_sbrk_r>
 80175d8:	6030      	str	r0, [r6, #0]
 80175da:	4621      	mov	r1, r4
 80175dc:	4628      	mov	r0, r5
 80175de:	f000 ff0b 	bl	80183f8 <_sbrk_r>
 80175e2:	1c43      	adds	r3, r0, #1
 80175e4:	d00a      	beq.n	80175fc <sbrk_aligned+0x34>
 80175e6:	1cc4      	adds	r4, r0, #3
 80175e8:	f024 0403 	bic.w	r4, r4, #3
 80175ec:	42a0      	cmp	r0, r4
 80175ee:	d007      	beq.n	8017600 <sbrk_aligned+0x38>
 80175f0:	1a21      	subs	r1, r4, r0
 80175f2:	4628      	mov	r0, r5
 80175f4:	f000 ff00 	bl	80183f8 <_sbrk_r>
 80175f8:	3001      	adds	r0, #1
 80175fa:	d101      	bne.n	8017600 <sbrk_aligned+0x38>
 80175fc:	f04f 34ff 	mov.w	r4, #4294967295
 8017600:	4620      	mov	r0, r4
 8017602:	bd70      	pop	{r4, r5, r6, pc}
 8017604:	20004a14 	.word	0x20004a14

08017608 <_malloc_r>:
 8017608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801760c:	1ccd      	adds	r5, r1, #3
 801760e:	4607      	mov	r7, r0
 8017610:	f025 0503 	bic.w	r5, r5, #3
 8017614:	3508      	adds	r5, #8
 8017616:	2d0c      	cmp	r5, #12
 8017618:	bf38      	it	cc
 801761a:	250c      	movcc	r5, #12
 801761c:	2d00      	cmp	r5, #0
 801761e:	db01      	blt.n	8017624 <_malloc_r+0x1c>
 8017620:	42a9      	cmp	r1, r5
 8017622:	d905      	bls.n	8017630 <_malloc_r+0x28>
 8017624:	230c      	movs	r3, #12
 8017626:	2600      	movs	r6, #0
 8017628:	603b      	str	r3, [r7, #0]
 801762a:	4630      	mov	r0, r6
 801762c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017704 <_malloc_r+0xfc>
 8017634:	f000 f868 	bl	8017708 <__malloc_lock>
 8017638:	f8d8 3000 	ldr.w	r3, [r8]
 801763c:	461c      	mov	r4, r3
 801763e:	bb5c      	cbnz	r4, 8017698 <_malloc_r+0x90>
 8017640:	4629      	mov	r1, r5
 8017642:	4638      	mov	r0, r7
 8017644:	f7ff ffc0 	bl	80175c8 <sbrk_aligned>
 8017648:	1c43      	adds	r3, r0, #1
 801764a:	4604      	mov	r4, r0
 801764c:	d155      	bne.n	80176fa <_malloc_r+0xf2>
 801764e:	f8d8 4000 	ldr.w	r4, [r8]
 8017652:	4626      	mov	r6, r4
 8017654:	2e00      	cmp	r6, #0
 8017656:	d145      	bne.n	80176e4 <_malloc_r+0xdc>
 8017658:	2c00      	cmp	r4, #0
 801765a:	d048      	beq.n	80176ee <_malloc_r+0xe6>
 801765c:	6823      	ldr	r3, [r4, #0]
 801765e:	4631      	mov	r1, r6
 8017660:	4638      	mov	r0, r7
 8017662:	eb04 0903 	add.w	r9, r4, r3
 8017666:	f000 fec7 	bl	80183f8 <_sbrk_r>
 801766a:	4581      	cmp	r9, r0
 801766c:	d13f      	bne.n	80176ee <_malloc_r+0xe6>
 801766e:	6821      	ldr	r1, [r4, #0]
 8017670:	4638      	mov	r0, r7
 8017672:	1a6d      	subs	r5, r5, r1
 8017674:	4629      	mov	r1, r5
 8017676:	f7ff ffa7 	bl	80175c8 <sbrk_aligned>
 801767a:	3001      	adds	r0, #1
 801767c:	d037      	beq.n	80176ee <_malloc_r+0xe6>
 801767e:	6823      	ldr	r3, [r4, #0]
 8017680:	442b      	add	r3, r5
 8017682:	6023      	str	r3, [r4, #0]
 8017684:	f8d8 3000 	ldr.w	r3, [r8]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d038      	beq.n	80176fe <_malloc_r+0xf6>
 801768c:	685a      	ldr	r2, [r3, #4]
 801768e:	42a2      	cmp	r2, r4
 8017690:	d12b      	bne.n	80176ea <_malloc_r+0xe2>
 8017692:	2200      	movs	r2, #0
 8017694:	605a      	str	r2, [r3, #4]
 8017696:	e00f      	b.n	80176b8 <_malloc_r+0xb0>
 8017698:	6822      	ldr	r2, [r4, #0]
 801769a:	1b52      	subs	r2, r2, r5
 801769c:	d41f      	bmi.n	80176de <_malloc_r+0xd6>
 801769e:	2a0b      	cmp	r2, #11
 80176a0:	d917      	bls.n	80176d2 <_malloc_r+0xca>
 80176a2:	1961      	adds	r1, r4, r5
 80176a4:	42a3      	cmp	r3, r4
 80176a6:	6025      	str	r5, [r4, #0]
 80176a8:	bf18      	it	ne
 80176aa:	6059      	strne	r1, [r3, #4]
 80176ac:	6863      	ldr	r3, [r4, #4]
 80176ae:	bf08      	it	eq
 80176b0:	f8c8 1000 	streq.w	r1, [r8]
 80176b4:	5162      	str	r2, [r4, r5]
 80176b6:	604b      	str	r3, [r1, #4]
 80176b8:	f104 060b 	add.w	r6, r4, #11
 80176bc:	4638      	mov	r0, r7
 80176be:	f000 f829 	bl	8017714 <__malloc_unlock>
 80176c2:	1d23      	adds	r3, r4, #4
 80176c4:	f026 0607 	bic.w	r6, r6, #7
 80176c8:	1af2      	subs	r2, r6, r3
 80176ca:	d0ae      	beq.n	801762a <_malloc_r+0x22>
 80176cc:	1b9b      	subs	r3, r3, r6
 80176ce:	50a3      	str	r3, [r4, r2]
 80176d0:	e7ab      	b.n	801762a <_malloc_r+0x22>
 80176d2:	42a3      	cmp	r3, r4
 80176d4:	6862      	ldr	r2, [r4, #4]
 80176d6:	d1dd      	bne.n	8017694 <_malloc_r+0x8c>
 80176d8:	f8c8 2000 	str.w	r2, [r8]
 80176dc:	e7ec      	b.n	80176b8 <_malloc_r+0xb0>
 80176de:	4623      	mov	r3, r4
 80176e0:	6864      	ldr	r4, [r4, #4]
 80176e2:	e7ac      	b.n	801763e <_malloc_r+0x36>
 80176e4:	4634      	mov	r4, r6
 80176e6:	6876      	ldr	r6, [r6, #4]
 80176e8:	e7b4      	b.n	8017654 <_malloc_r+0x4c>
 80176ea:	4613      	mov	r3, r2
 80176ec:	e7cc      	b.n	8017688 <_malloc_r+0x80>
 80176ee:	230c      	movs	r3, #12
 80176f0:	4638      	mov	r0, r7
 80176f2:	603b      	str	r3, [r7, #0]
 80176f4:	f000 f80e 	bl	8017714 <__malloc_unlock>
 80176f8:	e797      	b.n	801762a <_malloc_r+0x22>
 80176fa:	6025      	str	r5, [r4, #0]
 80176fc:	e7dc      	b.n	80176b8 <_malloc_r+0xb0>
 80176fe:	605b      	str	r3, [r3, #4]
 8017700:	deff      	udf	#255	; 0xff
 8017702:	bf00      	nop
 8017704:	20004a10 	.word	0x20004a10

08017708 <__malloc_lock>:
 8017708:	4801      	ldr	r0, [pc, #4]	; (8017710 <__malloc_lock+0x8>)
 801770a:	f7ff b84c 	b.w	80167a6 <__retarget_lock_acquire_recursive>
 801770e:	bf00      	nop
 8017710:	20004a0c 	.word	0x20004a0c

08017714 <__malloc_unlock>:
 8017714:	4801      	ldr	r0, [pc, #4]	; (801771c <__malloc_unlock+0x8>)
 8017716:	f7ff b847 	b.w	80167a8 <__retarget_lock_release_recursive>
 801771a:	bf00      	nop
 801771c:	20004a0c 	.word	0x20004a0c

08017720 <_Balloc>:
 8017720:	b570      	push	{r4, r5, r6, lr}
 8017722:	69c6      	ldr	r6, [r0, #28]
 8017724:	4604      	mov	r4, r0
 8017726:	460d      	mov	r5, r1
 8017728:	b976      	cbnz	r6, 8017748 <_Balloc+0x28>
 801772a:	2010      	movs	r0, #16
 801772c:	f7ff ff44 	bl	80175b8 <malloc>
 8017730:	4602      	mov	r2, r0
 8017732:	61e0      	str	r0, [r4, #28]
 8017734:	b920      	cbnz	r0, 8017740 <_Balloc+0x20>
 8017736:	4b18      	ldr	r3, [pc, #96]	; (8017798 <_Balloc+0x78>)
 8017738:	216b      	movs	r1, #107	; 0x6b
 801773a:	4818      	ldr	r0, [pc, #96]	; (801779c <_Balloc+0x7c>)
 801773c:	f7ff f850 	bl	80167e0 <__assert_func>
 8017740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017744:	6006      	str	r6, [r0, #0]
 8017746:	60c6      	str	r6, [r0, #12]
 8017748:	69e6      	ldr	r6, [r4, #28]
 801774a:	68f3      	ldr	r3, [r6, #12]
 801774c:	b183      	cbz	r3, 8017770 <_Balloc+0x50>
 801774e:	69e3      	ldr	r3, [r4, #28]
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017756:	b9b8      	cbnz	r0, 8017788 <_Balloc+0x68>
 8017758:	2101      	movs	r1, #1
 801775a:	4620      	mov	r0, r4
 801775c:	fa01 f605 	lsl.w	r6, r1, r5
 8017760:	1d72      	adds	r2, r6, #5
 8017762:	0092      	lsls	r2, r2, #2
 8017764:	f000 fe5f 	bl	8018426 <_calloc_r>
 8017768:	b160      	cbz	r0, 8017784 <_Balloc+0x64>
 801776a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801776e:	e00e      	b.n	801778e <_Balloc+0x6e>
 8017770:	2221      	movs	r2, #33	; 0x21
 8017772:	2104      	movs	r1, #4
 8017774:	4620      	mov	r0, r4
 8017776:	f000 fe56 	bl	8018426 <_calloc_r>
 801777a:	69e3      	ldr	r3, [r4, #28]
 801777c:	60f0      	str	r0, [r6, #12]
 801777e:	68db      	ldr	r3, [r3, #12]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1e4      	bne.n	801774e <_Balloc+0x2e>
 8017784:	2000      	movs	r0, #0
 8017786:	bd70      	pop	{r4, r5, r6, pc}
 8017788:	6802      	ldr	r2, [r0, #0]
 801778a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801778e:	2300      	movs	r3, #0
 8017790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017794:	e7f7      	b.n	8017786 <_Balloc+0x66>
 8017796:	bf00      	nop
 8017798:	0801965d 	.word	0x0801965d
 801779c:	08019780 	.word	0x08019780

080177a0 <_Bfree>:
 80177a0:	b570      	push	{r4, r5, r6, lr}
 80177a2:	69c6      	ldr	r6, [r0, #28]
 80177a4:	4605      	mov	r5, r0
 80177a6:	460c      	mov	r4, r1
 80177a8:	b976      	cbnz	r6, 80177c8 <_Bfree+0x28>
 80177aa:	2010      	movs	r0, #16
 80177ac:	f7ff ff04 	bl	80175b8 <malloc>
 80177b0:	4602      	mov	r2, r0
 80177b2:	61e8      	str	r0, [r5, #28]
 80177b4:	b920      	cbnz	r0, 80177c0 <_Bfree+0x20>
 80177b6:	4b09      	ldr	r3, [pc, #36]	; (80177dc <_Bfree+0x3c>)
 80177b8:	218f      	movs	r1, #143	; 0x8f
 80177ba:	4809      	ldr	r0, [pc, #36]	; (80177e0 <_Bfree+0x40>)
 80177bc:	f7ff f810 	bl	80167e0 <__assert_func>
 80177c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80177c4:	6006      	str	r6, [r0, #0]
 80177c6:	60c6      	str	r6, [r0, #12]
 80177c8:	b13c      	cbz	r4, 80177da <_Bfree+0x3a>
 80177ca:	69eb      	ldr	r3, [r5, #28]
 80177cc:	6862      	ldr	r2, [r4, #4]
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80177d4:	6021      	str	r1, [r4, #0]
 80177d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80177da:	bd70      	pop	{r4, r5, r6, pc}
 80177dc:	0801965d 	.word	0x0801965d
 80177e0:	08019780 	.word	0x08019780

080177e4 <__multadd>:
 80177e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177e8:	f101 0c14 	add.w	ip, r1, #20
 80177ec:	4607      	mov	r7, r0
 80177ee:	460c      	mov	r4, r1
 80177f0:	461e      	mov	r6, r3
 80177f2:	690d      	ldr	r5, [r1, #16]
 80177f4:	2000      	movs	r0, #0
 80177f6:	f8dc 3000 	ldr.w	r3, [ip]
 80177fa:	3001      	adds	r0, #1
 80177fc:	b299      	uxth	r1, r3
 80177fe:	4285      	cmp	r5, r0
 8017800:	fb02 6101 	mla	r1, r2, r1, r6
 8017804:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017808:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801780c:	b289      	uxth	r1, r1
 801780e:	fb02 3306 	mla	r3, r2, r6, r3
 8017812:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017816:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801781a:	f84c 1b04 	str.w	r1, [ip], #4
 801781e:	dcea      	bgt.n	80177f6 <__multadd+0x12>
 8017820:	b30e      	cbz	r6, 8017866 <__multadd+0x82>
 8017822:	68a3      	ldr	r3, [r4, #8]
 8017824:	42ab      	cmp	r3, r5
 8017826:	dc19      	bgt.n	801785c <__multadd+0x78>
 8017828:	6861      	ldr	r1, [r4, #4]
 801782a:	4638      	mov	r0, r7
 801782c:	3101      	adds	r1, #1
 801782e:	f7ff ff77 	bl	8017720 <_Balloc>
 8017832:	4680      	mov	r8, r0
 8017834:	b928      	cbnz	r0, 8017842 <__multadd+0x5e>
 8017836:	4602      	mov	r2, r0
 8017838:	4b0c      	ldr	r3, [pc, #48]	; (801786c <__multadd+0x88>)
 801783a:	21ba      	movs	r1, #186	; 0xba
 801783c:	480c      	ldr	r0, [pc, #48]	; (8017870 <__multadd+0x8c>)
 801783e:	f7fe ffcf 	bl	80167e0 <__assert_func>
 8017842:	6922      	ldr	r2, [r4, #16]
 8017844:	f104 010c 	add.w	r1, r4, #12
 8017848:	300c      	adds	r0, #12
 801784a:	3202      	adds	r2, #2
 801784c:	0092      	lsls	r2, r2, #2
 801784e:	f7fe ffba 	bl	80167c6 <memcpy>
 8017852:	4621      	mov	r1, r4
 8017854:	4644      	mov	r4, r8
 8017856:	4638      	mov	r0, r7
 8017858:	f7ff ffa2 	bl	80177a0 <_Bfree>
 801785c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017860:	3501      	adds	r5, #1
 8017862:	615e      	str	r6, [r3, #20]
 8017864:	6125      	str	r5, [r4, #16]
 8017866:	4620      	mov	r0, r4
 8017868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801786c:	0801976f 	.word	0x0801976f
 8017870:	08019780 	.word	0x08019780

08017874 <__hi0bits>:
 8017874:	0c03      	lsrs	r3, r0, #16
 8017876:	041b      	lsls	r3, r3, #16
 8017878:	b9d3      	cbnz	r3, 80178b0 <__hi0bits+0x3c>
 801787a:	0400      	lsls	r0, r0, #16
 801787c:	2310      	movs	r3, #16
 801787e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017882:	bf04      	itt	eq
 8017884:	0200      	lsleq	r0, r0, #8
 8017886:	3308      	addeq	r3, #8
 8017888:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801788c:	bf04      	itt	eq
 801788e:	0100      	lsleq	r0, r0, #4
 8017890:	3304      	addeq	r3, #4
 8017892:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017896:	bf04      	itt	eq
 8017898:	0080      	lsleq	r0, r0, #2
 801789a:	3302      	addeq	r3, #2
 801789c:	2800      	cmp	r0, #0
 801789e:	db05      	blt.n	80178ac <__hi0bits+0x38>
 80178a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80178a4:	f103 0301 	add.w	r3, r3, #1
 80178a8:	bf08      	it	eq
 80178aa:	2320      	moveq	r3, #32
 80178ac:	4618      	mov	r0, r3
 80178ae:	4770      	bx	lr
 80178b0:	2300      	movs	r3, #0
 80178b2:	e7e4      	b.n	801787e <__hi0bits+0xa>

080178b4 <__lo0bits>:
 80178b4:	6803      	ldr	r3, [r0, #0]
 80178b6:	f013 0207 	ands.w	r2, r3, #7
 80178ba:	d00c      	beq.n	80178d6 <__lo0bits+0x22>
 80178bc:	07d9      	lsls	r1, r3, #31
 80178be:	d422      	bmi.n	8017906 <__lo0bits+0x52>
 80178c0:	079a      	lsls	r2, r3, #30
 80178c2:	bf47      	ittee	mi
 80178c4:	085b      	lsrmi	r3, r3, #1
 80178c6:	2201      	movmi	r2, #1
 80178c8:	089b      	lsrpl	r3, r3, #2
 80178ca:	2202      	movpl	r2, #2
 80178cc:	bf4c      	ite	mi
 80178ce:	6003      	strmi	r3, [r0, #0]
 80178d0:	6003      	strpl	r3, [r0, #0]
 80178d2:	4610      	mov	r0, r2
 80178d4:	4770      	bx	lr
 80178d6:	b299      	uxth	r1, r3
 80178d8:	b909      	cbnz	r1, 80178de <__lo0bits+0x2a>
 80178da:	0c1b      	lsrs	r3, r3, #16
 80178dc:	2210      	movs	r2, #16
 80178de:	b2d9      	uxtb	r1, r3
 80178e0:	b909      	cbnz	r1, 80178e6 <__lo0bits+0x32>
 80178e2:	3208      	adds	r2, #8
 80178e4:	0a1b      	lsrs	r3, r3, #8
 80178e6:	0719      	lsls	r1, r3, #28
 80178e8:	bf04      	itt	eq
 80178ea:	091b      	lsreq	r3, r3, #4
 80178ec:	3204      	addeq	r2, #4
 80178ee:	0799      	lsls	r1, r3, #30
 80178f0:	bf04      	itt	eq
 80178f2:	089b      	lsreq	r3, r3, #2
 80178f4:	3202      	addeq	r2, #2
 80178f6:	07d9      	lsls	r1, r3, #31
 80178f8:	d403      	bmi.n	8017902 <__lo0bits+0x4e>
 80178fa:	085b      	lsrs	r3, r3, #1
 80178fc:	f102 0201 	add.w	r2, r2, #1
 8017900:	d003      	beq.n	801790a <__lo0bits+0x56>
 8017902:	6003      	str	r3, [r0, #0]
 8017904:	e7e5      	b.n	80178d2 <__lo0bits+0x1e>
 8017906:	2200      	movs	r2, #0
 8017908:	e7e3      	b.n	80178d2 <__lo0bits+0x1e>
 801790a:	2220      	movs	r2, #32
 801790c:	e7e1      	b.n	80178d2 <__lo0bits+0x1e>
	...

08017910 <__i2b>:
 8017910:	b510      	push	{r4, lr}
 8017912:	460c      	mov	r4, r1
 8017914:	2101      	movs	r1, #1
 8017916:	f7ff ff03 	bl	8017720 <_Balloc>
 801791a:	4602      	mov	r2, r0
 801791c:	b928      	cbnz	r0, 801792a <__i2b+0x1a>
 801791e:	4b05      	ldr	r3, [pc, #20]	; (8017934 <__i2b+0x24>)
 8017920:	f240 1145 	movw	r1, #325	; 0x145
 8017924:	4804      	ldr	r0, [pc, #16]	; (8017938 <__i2b+0x28>)
 8017926:	f7fe ff5b 	bl	80167e0 <__assert_func>
 801792a:	2301      	movs	r3, #1
 801792c:	6144      	str	r4, [r0, #20]
 801792e:	6103      	str	r3, [r0, #16]
 8017930:	bd10      	pop	{r4, pc}
 8017932:	bf00      	nop
 8017934:	0801976f 	.word	0x0801976f
 8017938:	08019780 	.word	0x08019780

0801793c <__multiply>:
 801793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017940:	4691      	mov	r9, r2
 8017942:	690a      	ldr	r2, [r1, #16]
 8017944:	460c      	mov	r4, r1
 8017946:	b085      	sub	sp, #20
 8017948:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801794c:	429a      	cmp	r2, r3
 801794e:	bfbe      	ittt	lt
 8017950:	460b      	movlt	r3, r1
 8017952:	464c      	movlt	r4, r9
 8017954:	4699      	movlt	r9, r3
 8017956:	6927      	ldr	r7, [r4, #16]
 8017958:	68a3      	ldr	r3, [r4, #8]
 801795a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801795e:	6861      	ldr	r1, [r4, #4]
 8017960:	eb07 060a 	add.w	r6, r7, sl
 8017964:	42b3      	cmp	r3, r6
 8017966:	bfb8      	it	lt
 8017968:	3101      	addlt	r1, #1
 801796a:	f7ff fed9 	bl	8017720 <_Balloc>
 801796e:	b930      	cbnz	r0, 801797e <__multiply+0x42>
 8017970:	4602      	mov	r2, r0
 8017972:	4b45      	ldr	r3, [pc, #276]	; (8017a88 <__multiply+0x14c>)
 8017974:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017978:	4844      	ldr	r0, [pc, #272]	; (8017a8c <__multiply+0x150>)
 801797a:	f7fe ff31 	bl	80167e0 <__assert_func>
 801797e:	f100 0514 	add.w	r5, r0, #20
 8017982:	2200      	movs	r2, #0
 8017984:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017988:	462b      	mov	r3, r5
 801798a:	4543      	cmp	r3, r8
 801798c:	d321      	bcc.n	80179d2 <__multiply+0x96>
 801798e:	f104 0314 	add.w	r3, r4, #20
 8017992:	f104 0115 	add.w	r1, r4, #21
 8017996:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801799a:	f109 0314 	add.w	r3, r9, #20
 801799e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80179a2:	9202      	str	r2, [sp, #8]
 80179a4:	1b3a      	subs	r2, r7, r4
 80179a6:	3a15      	subs	r2, #21
 80179a8:	f022 0203 	bic.w	r2, r2, #3
 80179ac:	3204      	adds	r2, #4
 80179ae:	428f      	cmp	r7, r1
 80179b0:	bf38      	it	cc
 80179b2:	2204      	movcc	r2, #4
 80179b4:	9201      	str	r2, [sp, #4]
 80179b6:	9a02      	ldr	r2, [sp, #8]
 80179b8:	9303      	str	r3, [sp, #12]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d80c      	bhi.n	80179d8 <__multiply+0x9c>
 80179be:	2e00      	cmp	r6, #0
 80179c0:	dd03      	ble.n	80179ca <__multiply+0x8e>
 80179c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d05b      	beq.n	8017a82 <__multiply+0x146>
 80179ca:	6106      	str	r6, [r0, #16]
 80179cc:	b005      	add	sp, #20
 80179ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d2:	f843 2b04 	str.w	r2, [r3], #4
 80179d6:	e7d8      	b.n	801798a <__multiply+0x4e>
 80179d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80179dc:	f1ba 0f00 	cmp.w	sl, #0
 80179e0:	d024      	beq.n	8017a2c <__multiply+0xf0>
 80179e2:	f104 0e14 	add.w	lr, r4, #20
 80179e6:	46a9      	mov	r9, r5
 80179e8:	f04f 0c00 	mov.w	ip, #0
 80179ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80179f0:	f8d9 1000 	ldr.w	r1, [r9]
 80179f4:	fa1f fb82 	uxth.w	fp, r2
 80179f8:	4577      	cmp	r7, lr
 80179fa:	b289      	uxth	r1, r1
 80179fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8017a00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017a04:	f8d9 2000 	ldr.w	r2, [r9]
 8017a08:	4461      	add	r1, ip
 8017a0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017a0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8017a12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017a16:	b289      	uxth	r1, r1
 8017a18:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017a20:	f849 1b04 	str.w	r1, [r9], #4
 8017a24:	d8e2      	bhi.n	80179ec <__multiply+0xb0>
 8017a26:	9a01      	ldr	r2, [sp, #4]
 8017a28:	f845 c002 	str.w	ip, [r5, r2]
 8017a2c:	9a03      	ldr	r2, [sp, #12]
 8017a2e:	3304      	adds	r3, #4
 8017a30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017a34:	f1b9 0f00 	cmp.w	r9, #0
 8017a38:	d021      	beq.n	8017a7e <__multiply+0x142>
 8017a3a:	6829      	ldr	r1, [r5, #0]
 8017a3c:	f104 0c14 	add.w	ip, r4, #20
 8017a40:	46ae      	mov	lr, r5
 8017a42:	f04f 0a00 	mov.w	sl, #0
 8017a46:	f8bc b000 	ldrh.w	fp, [ip]
 8017a4a:	b289      	uxth	r1, r1
 8017a4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017a50:	fb09 220b 	mla	r2, r9, fp, r2
 8017a54:	4452      	add	r2, sl
 8017a56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017a5a:	f84e 1b04 	str.w	r1, [lr], #4
 8017a5e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017a62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017a66:	f8be 1000 	ldrh.w	r1, [lr]
 8017a6a:	4567      	cmp	r7, ip
 8017a6c:	fb09 110a 	mla	r1, r9, sl, r1
 8017a70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017a78:	d8e5      	bhi.n	8017a46 <__multiply+0x10a>
 8017a7a:	9a01      	ldr	r2, [sp, #4]
 8017a7c:	50a9      	str	r1, [r5, r2]
 8017a7e:	3504      	adds	r5, #4
 8017a80:	e799      	b.n	80179b6 <__multiply+0x7a>
 8017a82:	3e01      	subs	r6, #1
 8017a84:	e79b      	b.n	80179be <__multiply+0x82>
 8017a86:	bf00      	nop
 8017a88:	0801976f 	.word	0x0801976f
 8017a8c:	08019780 	.word	0x08019780

08017a90 <__pow5mult>:
 8017a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a94:	4615      	mov	r5, r2
 8017a96:	f012 0203 	ands.w	r2, r2, #3
 8017a9a:	4606      	mov	r6, r0
 8017a9c:	460f      	mov	r7, r1
 8017a9e:	d007      	beq.n	8017ab0 <__pow5mult+0x20>
 8017aa0:	3a01      	subs	r2, #1
 8017aa2:	4c25      	ldr	r4, [pc, #148]	; (8017b38 <__pow5mult+0xa8>)
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017aaa:	f7ff fe9b 	bl	80177e4 <__multadd>
 8017aae:	4607      	mov	r7, r0
 8017ab0:	10ad      	asrs	r5, r5, #2
 8017ab2:	d03d      	beq.n	8017b30 <__pow5mult+0xa0>
 8017ab4:	69f4      	ldr	r4, [r6, #28]
 8017ab6:	b97c      	cbnz	r4, 8017ad8 <__pow5mult+0x48>
 8017ab8:	2010      	movs	r0, #16
 8017aba:	f7ff fd7d 	bl	80175b8 <malloc>
 8017abe:	4602      	mov	r2, r0
 8017ac0:	61f0      	str	r0, [r6, #28]
 8017ac2:	b928      	cbnz	r0, 8017ad0 <__pow5mult+0x40>
 8017ac4:	4b1d      	ldr	r3, [pc, #116]	; (8017b3c <__pow5mult+0xac>)
 8017ac6:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017aca:	481d      	ldr	r0, [pc, #116]	; (8017b40 <__pow5mult+0xb0>)
 8017acc:	f7fe fe88 	bl	80167e0 <__assert_func>
 8017ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ad4:	6004      	str	r4, [r0, #0]
 8017ad6:	60c4      	str	r4, [r0, #12]
 8017ad8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017ae0:	b94c      	cbnz	r4, 8017af6 <__pow5mult+0x66>
 8017ae2:	f240 2171 	movw	r1, #625	; 0x271
 8017ae6:	4630      	mov	r0, r6
 8017ae8:	f7ff ff12 	bl	8017910 <__i2b>
 8017aec:	2300      	movs	r3, #0
 8017aee:	4604      	mov	r4, r0
 8017af0:	f8c8 0008 	str.w	r0, [r8, #8]
 8017af4:	6003      	str	r3, [r0, #0]
 8017af6:	f04f 0900 	mov.w	r9, #0
 8017afa:	07eb      	lsls	r3, r5, #31
 8017afc:	d50a      	bpl.n	8017b14 <__pow5mult+0x84>
 8017afe:	4639      	mov	r1, r7
 8017b00:	4622      	mov	r2, r4
 8017b02:	4630      	mov	r0, r6
 8017b04:	f7ff ff1a 	bl	801793c <__multiply>
 8017b08:	4680      	mov	r8, r0
 8017b0a:	4639      	mov	r1, r7
 8017b0c:	4630      	mov	r0, r6
 8017b0e:	4647      	mov	r7, r8
 8017b10:	f7ff fe46 	bl	80177a0 <_Bfree>
 8017b14:	106d      	asrs	r5, r5, #1
 8017b16:	d00b      	beq.n	8017b30 <__pow5mult+0xa0>
 8017b18:	6820      	ldr	r0, [r4, #0]
 8017b1a:	b938      	cbnz	r0, 8017b2c <__pow5mult+0x9c>
 8017b1c:	4622      	mov	r2, r4
 8017b1e:	4621      	mov	r1, r4
 8017b20:	4630      	mov	r0, r6
 8017b22:	f7ff ff0b 	bl	801793c <__multiply>
 8017b26:	6020      	str	r0, [r4, #0]
 8017b28:	f8c0 9000 	str.w	r9, [r0]
 8017b2c:	4604      	mov	r4, r0
 8017b2e:	e7e4      	b.n	8017afa <__pow5mult+0x6a>
 8017b30:	4638      	mov	r0, r7
 8017b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b36:	bf00      	nop
 8017b38:	080198d0 	.word	0x080198d0
 8017b3c:	0801965d 	.word	0x0801965d
 8017b40:	08019780 	.word	0x08019780

08017b44 <__lshift>:
 8017b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b48:	460c      	mov	r4, r1
 8017b4a:	4607      	mov	r7, r0
 8017b4c:	4691      	mov	r9, r2
 8017b4e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017b52:	6923      	ldr	r3, [r4, #16]
 8017b54:	6849      	ldr	r1, [r1, #4]
 8017b56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017b5a:	68a3      	ldr	r3, [r4, #8]
 8017b5c:	f108 0601 	add.w	r6, r8, #1
 8017b60:	42b3      	cmp	r3, r6
 8017b62:	db0b      	blt.n	8017b7c <__lshift+0x38>
 8017b64:	4638      	mov	r0, r7
 8017b66:	f7ff fddb 	bl	8017720 <_Balloc>
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	b948      	cbnz	r0, 8017b82 <__lshift+0x3e>
 8017b6e:	4602      	mov	r2, r0
 8017b70:	4b28      	ldr	r3, [pc, #160]	; (8017c14 <__lshift+0xd0>)
 8017b72:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017b76:	4828      	ldr	r0, [pc, #160]	; (8017c18 <__lshift+0xd4>)
 8017b78:	f7fe fe32 	bl	80167e0 <__assert_func>
 8017b7c:	3101      	adds	r1, #1
 8017b7e:	005b      	lsls	r3, r3, #1
 8017b80:	e7ee      	b.n	8017b60 <__lshift+0x1c>
 8017b82:	2300      	movs	r3, #0
 8017b84:	f100 0114 	add.w	r1, r0, #20
 8017b88:	f100 0210 	add.w	r2, r0, #16
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	4553      	cmp	r3, sl
 8017b90:	db33      	blt.n	8017bfa <__lshift+0xb6>
 8017b92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017b96:	f104 0314 	add.w	r3, r4, #20
 8017b9a:	6920      	ldr	r0, [r4, #16]
 8017b9c:	f019 091f 	ands.w	r9, r9, #31
 8017ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017ba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ba8:	d02b      	beq.n	8017c02 <__lshift+0xbe>
 8017baa:	f1c9 0e20 	rsb	lr, r9, #32
 8017bae:	468a      	mov	sl, r1
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	6818      	ldr	r0, [r3, #0]
 8017bb4:	fa00 f009 	lsl.w	r0, r0, r9
 8017bb8:	4310      	orrs	r0, r2
 8017bba:	f84a 0b04 	str.w	r0, [sl], #4
 8017bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bc2:	459c      	cmp	ip, r3
 8017bc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8017bc8:	d8f3      	bhi.n	8017bb2 <__lshift+0x6e>
 8017bca:	ebac 0304 	sub.w	r3, ip, r4
 8017bce:	f104 0015 	add.w	r0, r4, #21
 8017bd2:	3b15      	subs	r3, #21
 8017bd4:	f023 0303 	bic.w	r3, r3, #3
 8017bd8:	3304      	adds	r3, #4
 8017bda:	4584      	cmp	ip, r0
 8017bdc:	bf38      	it	cc
 8017bde:	2304      	movcc	r3, #4
 8017be0:	50ca      	str	r2, [r1, r3]
 8017be2:	b10a      	cbz	r2, 8017be8 <__lshift+0xa4>
 8017be4:	f108 0602 	add.w	r6, r8, #2
 8017be8:	3e01      	subs	r6, #1
 8017bea:	4638      	mov	r0, r7
 8017bec:	4621      	mov	r1, r4
 8017bee:	612e      	str	r6, [r5, #16]
 8017bf0:	f7ff fdd6 	bl	80177a0 <_Bfree>
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	f842 0f04 	str.w	r0, [r2, #4]!
 8017c00:	e7c5      	b.n	8017b8e <__lshift+0x4a>
 8017c02:	3904      	subs	r1, #4
 8017c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c08:	459c      	cmp	ip, r3
 8017c0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c0e:	d8f9      	bhi.n	8017c04 <__lshift+0xc0>
 8017c10:	e7ea      	b.n	8017be8 <__lshift+0xa4>
 8017c12:	bf00      	nop
 8017c14:	0801976f 	.word	0x0801976f
 8017c18:	08019780 	.word	0x08019780

08017c1c <__mcmp>:
 8017c1c:	6902      	ldr	r2, [r0, #16]
 8017c1e:	b530      	push	{r4, r5, lr}
 8017c20:	690c      	ldr	r4, [r1, #16]
 8017c22:	1b12      	subs	r2, r2, r4
 8017c24:	d10e      	bne.n	8017c44 <__mcmp+0x28>
 8017c26:	f100 0314 	add.w	r3, r0, #20
 8017c2a:	3114      	adds	r1, #20
 8017c2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017c30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017c34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017c38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017c3c:	42a5      	cmp	r5, r4
 8017c3e:	d003      	beq.n	8017c48 <__mcmp+0x2c>
 8017c40:	d305      	bcc.n	8017c4e <__mcmp+0x32>
 8017c42:	2201      	movs	r2, #1
 8017c44:	4610      	mov	r0, r2
 8017c46:	bd30      	pop	{r4, r5, pc}
 8017c48:	4283      	cmp	r3, r0
 8017c4a:	d3f3      	bcc.n	8017c34 <__mcmp+0x18>
 8017c4c:	e7fa      	b.n	8017c44 <__mcmp+0x28>
 8017c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c52:	e7f7      	b.n	8017c44 <__mcmp+0x28>

08017c54 <__mdiff>:
 8017c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c58:	460c      	mov	r4, r1
 8017c5a:	4606      	mov	r6, r0
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	4692      	mov	sl, r2
 8017c60:	4620      	mov	r0, r4
 8017c62:	f7ff ffdb 	bl	8017c1c <__mcmp>
 8017c66:	1e05      	subs	r5, r0, #0
 8017c68:	d110      	bne.n	8017c8c <__mdiff+0x38>
 8017c6a:	4629      	mov	r1, r5
 8017c6c:	4630      	mov	r0, r6
 8017c6e:	f7ff fd57 	bl	8017720 <_Balloc>
 8017c72:	b930      	cbnz	r0, 8017c82 <__mdiff+0x2e>
 8017c74:	4b3d      	ldr	r3, [pc, #244]	; (8017d6c <__mdiff+0x118>)
 8017c76:	4602      	mov	r2, r0
 8017c78:	f240 2137 	movw	r1, #567	; 0x237
 8017c7c:	483c      	ldr	r0, [pc, #240]	; (8017d70 <__mdiff+0x11c>)
 8017c7e:	f7fe fdaf 	bl	80167e0 <__assert_func>
 8017c82:	2301      	movs	r3, #1
 8017c84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c8c:	bfa4      	itt	ge
 8017c8e:	4653      	movge	r3, sl
 8017c90:	46a2      	movge	sl, r4
 8017c92:	4630      	mov	r0, r6
 8017c94:	bfa8      	it	ge
 8017c96:	2500      	movge	r5, #0
 8017c98:	f8da 1004 	ldr.w	r1, [sl, #4]
 8017c9c:	bfac      	ite	ge
 8017c9e:	461c      	movge	r4, r3
 8017ca0:	2501      	movlt	r5, #1
 8017ca2:	f7ff fd3d 	bl	8017720 <_Balloc>
 8017ca6:	b920      	cbnz	r0, 8017cb2 <__mdiff+0x5e>
 8017ca8:	4b30      	ldr	r3, [pc, #192]	; (8017d6c <__mdiff+0x118>)
 8017caa:	4602      	mov	r2, r0
 8017cac:	f240 2145 	movw	r1, #581	; 0x245
 8017cb0:	e7e4      	b.n	8017c7c <__mdiff+0x28>
 8017cb2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8017cb6:	f104 0914 	add.w	r9, r4, #20
 8017cba:	6926      	ldr	r6, [r4, #16]
 8017cbc:	f100 0814 	add.w	r8, r0, #20
 8017cc0:	60c5      	str	r5, [r0, #12]
 8017cc2:	f10a 0514 	add.w	r5, sl, #20
 8017cc6:	f10a 0210 	add.w	r2, sl, #16
 8017cca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017cce:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8017cd2:	46c2      	mov	sl, r8
 8017cd4:	f04f 0c00 	mov.w	ip, #0
 8017cd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017cdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8017ce0:	fa1f f18b 	uxth.w	r1, fp
 8017ce4:	454e      	cmp	r6, r9
 8017ce6:	4461      	add	r1, ip
 8017ce8:	fa1f fc83 	uxth.w	ip, r3
 8017cec:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8017cf0:	eba1 010c 	sub.w	r1, r1, ip
 8017cf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017cf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017cfc:	b289      	uxth	r1, r1
 8017cfe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8017d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8017d06:	f84a 1b04 	str.w	r1, [sl], #4
 8017d0a:	d8e5      	bhi.n	8017cd8 <__mdiff+0x84>
 8017d0c:	1b33      	subs	r3, r6, r4
 8017d0e:	3415      	adds	r4, #21
 8017d10:	3b15      	subs	r3, #21
 8017d12:	f023 0303 	bic.w	r3, r3, #3
 8017d16:	3304      	adds	r3, #4
 8017d18:	42a6      	cmp	r6, r4
 8017d1a:	bf38      	it	cc
 8017d1c:	2304      	movcc	r3, #4
 8017d1e:	441d      	add	r5, r3
 8017d20:	4443      	add	r3, r8
 8017d22:	462c      	mov	r4, r5
 8017d24:	461e      	mov	r6, r3
 8017d26:	4574      	cmp	r4, lr
 8017d28:	d30e      	bcc.n	8017d48 <__mdiff+0xf4>
 8017d2a:	f10e 0203 	add.w	r2, lr, #3
 8017d2e:	1b52      	subs	r2, r2, r5
 8017d30:	3d03      	subs	r5, #3
 8017d32:	f022 0203 	bic.w	r2, r2, #3
 8017d36:	45ae      	cmp	lr, r5
 8017d38:	bf38      	it	cc
 8017d3a:	2200      	movcc	r2, #0
 8017d3c:	4413      	add	r3, r2
 8017d3e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017d42:	b18a      	cbz	r2, 8017d68 <__mdiff+0x114>
 8017d44:	6107      	str	r7, [r0, #16]
 8017d46:	e79f      	b.n	8017c88 <__mdiff+0x34>
 8017d48:	f854 8b04 	ldr.w	r8, [r4], #4
 8017d4c:	fa1f f288 	uxth.w	r2, r8
 8017d50:	4462      	add	r2, ip
 8017d52:	1411      	asrs	r1, r2, #16
 8017d54:	b292      	uxth	r2, r2
 8017d56:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8017d5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8017d5e:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8017d62:	f846 2b04 	str.w	r2, [r6], #4
 8017d66:	e7de      	b.n	8017d26 <__mdiff+0xd2>
 8017d68:	3f01      	subs	r7, #1
 8017d6a:	e7e8      	b.n	8017d3e <__mdiff+0xea>
 8017d6c:	0801976f 	.word	0x0801976f
 8017d70:	08019780 	.word	0x08019780

08017d74 <__d2b>:
 8017d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d78:	460f      	mov	r7, r1
 8017d7a:	2101      	movs	r1, #1
 8017d7c:	4616      	mov	r6, r2
 8017d7e:	ec59 8b10 	vmov	r8, r9, d0
 8017d82:	f7ff fccd 	bl	8017720 <_Balloc>
 8017d86:	4604      	mov	r4, r0
 8017d88:	b930      	cbnz	r0, 8017d98 <__d2b+0x24>
 8017d8a:	4602      	mov	r2, r0
 8017d8c:	4b24      	ldr	r3, [pc, #144]	; (8017e20 <__d2b+0xac>)
 8017d8e:	f240 310f 	movw	r1, #783	; 0x30f
 8017d92:	4824      	ldr	r0, [pc, #144]	; (8017e24 <__d2b+0xb0>)
 8017d94:	f7fe fd24 	bl	80167e0 <__assert_func>
 8017d98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017d9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017da0:	bb2d      	cbnz	r5, 8017dee <__d2b+0x7a>
 8017da2:	9301      	str	r3, [sp, #4]
 8017da4:	f1b8 0300 	subs.w	r3, r8, #0
 8017da8:	d026      	beq.n	8017df8 <__d2b+0x84>
 8017daa:	4668      	mov	r0, sp
 8017dac:	9300      	str	r3, [sp, #0]
 8017dae:	f7ff fd81 	bl	80178b4 <__lo0bits>
 8017db2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017db6:	b1e8      	cbz	r0, 8017df4 <__d2b+0x80>
 8017db8:	f1c0 0320 	rsb	r3, r0, #32
 8017dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8017dc0:	40c2      	lsrs	r2, r0
 8017dc2:	430b      	orrs	r3, r1
 8017dc4:	9201      	str	r2, [sp, #4]
 8017dc6:	6163      	str	r3, [r4, #20]
 8017dc8:	9b01      	ldr	r3, [sp, #4]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	61a3      	str	r3, [r4, #24]
 8017dce:	bf14      	ite	ne
 8017dd0:	2202      	movne	r2, #2
 8017dd2:	2201      	moveq	r2, #1
 8017dd4:	6122      	str	r2, [r4, #16]
 8017dd6:	b1bd      	cbz	r5, 8017e08 <__d2b+0x94>
 8017dd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017ddc:	4405      	add	r5, r0
 8017dde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017de2:	603d      	str	r5, [r7, #0]
 8017de4:	6030      	str	r0, [r6, #0]
 8017de6:	4620      	mov	r0, r4
 8017de8:	b003      	add	sp, #12
 8017dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017df2:	e7d6      	b.n	8017da2 <__d2b+0x2e>
 8017df4:	6161      	str	r1, [r4, #20]
 8017df6:	e7e7      	b.n	8017dc8 <__d2b+0x54>
 8017df8:	a801      	add	r0, sp, #4
 8017dfa:	f7ff fd5b 	bl	80178b4 <__lo0bits>
 8017dfe:	9b01      	ldr	r3, [sp, #4]
 8017e00:	3020      	adds	r0, #32
 8017e02:	2201      	movs	r2, #1
 8017e04:	6163      	str	r3, [r4, #20]
 8017e06:	e7e5      	b.n	8017dd4 <__d2b+0x60>
 8017e08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017e0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017e10:	6038      	str	r0, [r7, #0]
 8017e12:	6918      	ldr	r0, [r3, #16]
 8017e14:	f7ff fd2e 	bl	8017874 <__hi0bits>
 8017e18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017e1c:	e7e2      	b.n	8017de4 <__d2b+0x70>
 8017e1e:	bf00      	nop
 8017e20:	0801976f 	.word	0x0801976f
 8017e24:	08019780 	.word	0x08019780

08017e28 <__ssputs_r>:
 8017e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e2c:	461f      	mov	r7, r3
 8017e2e:	688e      	ldr	r6, [r1, #8]
 8017e30:	4682      	mov	sl, r0
 8017e32:	460c      	mov	r4, r1
 8017e34:	42be      	cmp	r6, r7
 8017e36:	4690      	mov	r8, r2
 8017e38:	680b      	ldr	r3, [r1, #0]
 8017e3a:	d82c      	bhi.n	8017e96 <__ssputs_r+0x6e>
 8017e3c:	898a      	ldrh	r2, [r1, #12]
 8017e3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e42:	d026      	beq.n	8017e92 <__ssputs_r+0x6a>
 8017e44:	6965      	ldr	r5, [r4, #20]
 8017e46:	6909      	ldr	r1, [r1, #16]
 8017e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e4c:	eba3 0901 	sub.w	r9, r3, r1
 8017e50:	1c7b      	adds	r3, r7, #1
 8017e52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e56:	444b      	add	r3, r9
 8017e58:	106d      	asrs	r5, r5, #1
 8017e5a:	429d      	cmp	r5, r3
 8017e5c:	bf38      	it	cc
 8017e5e:	461d      	movcc	r5, r3
 8017e60:	0553      	lsls	r3, r2, #21
 8017e62:	d527      	bpl.n	8017eb4 <__ssputs_r+0x8c>
 8017e64:	4629      	mov	r1, r5
 8017e66:	f7ff fbcf 	bl	8017608 <_malloc_r>
 8017e6a:	4606      	mov	r6, r0
 8017e6c:	b360      	cbz	r0, 8017ec8 <__ssputs_r+0xa0>
 8017e6e:	464a      	mov	r2, r9
 8017e70:	6921      	ldr	r1, [r4, #16]
 8017e72:	f7fe fca8 	bl	80167c6 <memcpy>
 8017e76:	89a3      	ldrh	r3, [r4, #12]
 8017e78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e80:	81a3      	strh	r3, [r4, #12]
 8017e82:	6126      	str	r6, [r4, #16]
 8017e84:	444e      	add	r6, r9
 8017e86:	6165      	str	r5, [r4, #20]
 8017e88:	eba5 0509 	sub.w	r5, r5, r9
 8017e8c:	6026      	str	r6, [r4, #0]
 8017e8e:	463e      	mov	r6, r7
 8017e90:	60a5      	str	r5, [r4, #8]
 8017e92:	42be      	cmp	r6, r7
 8017e94:	d900      	bls.n	8017e98 <__ssputs_r+0x70>
 8017e96:	463e      	mov	r6, r7
 8017e98:	4632      	mov	r2, r6
 8017e9a:	4641      	mov	r1, r8
 8017e9c:	6820      	ldr	r0, [r4, #0]
 8017e9e:	f000 fa6e 	bl	801837e <memmove>
 8017ea2:	68a3      	ldr	r3, [r4, #8]
 8017ea4:	2000      	movs	r0, #0
 8017ea6:	1b9b      	subs	r3, r3, r6
 8017ea8:	60a3      	str	r3, [r4, #8]
 8017eaa:	6823      	ldr	r3, [r4, #0]
 8017eac:	4433      	add	r3, r6
 8017eae:	6023      	str	r3, [r4, #0]
 8017eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eb4:	462a      	mov	r2, r5
 8017eb6:	f000 fade 	bl	8018476 <_realloc_r>
 8017eba:	4606      	mov	r6, r0
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d1e0      	bne.n	8017e82 <__ssputs_r+0x5a>
 8017ec0:	6921      	ldr	r1, [r4, #16]
 8017ec2:	4650      	mov	r0, sl
 8017ec4:	f7ff fb2c 	bl	8017520 <_free_r>
 8017ec8:	230c      	movs	r3, #12
 8017eca:	f04f 30ff 	mov.w	r0, #4294967295
 8017ece:	f8ca 3000 	str.w	r3, [sl]
 8017ed2:	89a3      	ldrh	r3, [r4, #12]
 8017ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ed8:	81a3      	strh	r3, [r4, #12]
 8017eda:	e7e9      	b.n	8017eb0 <__ssputs_r+0x88>

08017edc <_svfiprintf_r>:
 8017edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee0:	4698      	mov	r8, r3
 8017ee2:	898b      	ldrh	r3, [r1, #12]
 8017ee4:	b09d      	sub	sp, #116	; 0x74
 8017ee6:	4607      	mov	r7, r0
 8017ee8:	061b      	lsls	r3, r3, #24
 8017eea:	460d      	mov	r5, r1
 8017eec:	4614      	mov	r4, r2
 8017eee:	d50e      	bpl.n	8017f0e <_svfiprintf_r+0x32>
 8017ef0:	690b      	ldr	r3, [r1, #16]
 8017ef2:	b963      	cbnz	r3, 8017f0e <_svfiprintf_r+0x32>
 8017ef4:	2140      	movs	r1, #64	; 0x40
 8017ef6:	f7ff fb87 	bl	8017608 <_malloc_r>
 8017efa:	6028      	str	r0, [r5, #0]
 8017efc:	6128      	str	r0, [r5, #16]
 8017efe:	b920      	cbnz	r0, 8017f0a <_svfiprintf_r+0x2e>
 8017f00:	230c      	movs	r3, #12
 8017f02:	603b      	str	r3, [r7, #0]
 8017f04:	f04f 30ff 	mov.w	r0, #4294967295
 8017f08:	e0d0      	b.n	80180ac <_svfiprintf_r+0x1d0>
 8017f0a:	2340      	movs	r3, #64	; 0x40
 8017f0c:	616b      	str	r3, [r5, #20]
 8017f0e:	2300      	movs	r3, #0
 8017f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f14:	f04f 0901 	mov.w	r9, #1
 8017f18:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80180c4 <_svfiprintf_r+0x1e8>
 8017f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8017f1e:	2320      	movs	r3, #32
 8017f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f24:	2330      	movs	r3, #48	; 0x30
 8017f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f2a:	4623      	mov	r3, r4
 8017f2c:	469a      	mov	sl, r3
 8017f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f32:	b10a      	cbz	r2, 8017f38 <_svfiprintf_r+0x5c>
 8017f34:	2a25      	cmp	r2, #37	; 0x25
 8017f36:	d1f9      	bne.n	8017f2c <_svfiprintf_r+0x50>
 8017f38:	ebba 0b04 	subs.w	fp, sl, r4
 8017f3c:	d00b      	beq.n	8017f56 <_svfiprintf_r+0x7a>
 8017f3e:	465b      	mov	r3, fp
 8017f40:	4622      	mov	r2, r4
 8017f42:	4629      	mov	r1, r5
 8017f44:	4638      	mov	r0, r7
 8017f46:	f7ff ff6f 	bl	8017e28 <__ssputs_r>
 8017f4a:	3001      	adds	r0, #1
 8017f4c:	f000 80a9 	beq.w	80180a2 <_svfiprintf_r+0x1c6>
 8017f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f52:	445a      	add	r2, fp
 8017f54:	9209      	str	r2, [sp, #36]	; 0x24
 8017f56:	f89a 3000 	ldrb.w	r3, [sl]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	f000 80a1 	beq.w	80180a2 <_svfiprintf_r+0x1c6>
 8017f60:	2300      	movs	r3, #0
 8017f62:	f04f 32ff 	mov.w	r2, #4294967295
 8017f66:	f10a 0a01 	add.w	sl, sl, #1
 8017f6a:	9304      	str	r3, [sp, #16]
 8017f6c:	9307      	str	r3, [sp, #28]
 8017f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f72:	931a      	str	r3, [sp, #104]	; 0x68
 8017f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f78:	4654      	mov	r4, sl
 8017f7a:	2205      	movs	r2, #5
 8017f7c:	4851      	ldr	r0, [pc, #324]	; (80180c4 <_svfiprintf_r+0x1e8>)
 8017f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f82:	f7fe fc12 	bl	80167aa <memchr>
 8017f86:	9a04      	ldr	r2, [sp, #16]
 8017f88:	b9d8      	cbnz	r0, 8017fc2 <_svfiprintf_r+0xe6>
 8017f8a:	06d0      	lsls	r0, r2, #27
 8017f8c:	bf44      	itt	mi
 8017f8e:	2320      	movmi	r3, #32
 8017f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f94:	0711      	lsls	r1, r2, #28
 8017f96:	bf44      	itt	mi
 8017f98:	232b      	movmi	r3, #43	; 0x2b
 8017f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8017fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8017fa4:	d015      	beq.n	8017fd2 <_svfiprintf_r+0xf6>
 8017fa6:	9a07      	ldr	r2, [sp, #28]
 8017fa8:	4654      	mov	r4, sl
 8017faa:	2000      	movs	r0, #0
 8017fac:	f04f 0c0a 	mov.w	ip, #10
 8017fb0:	4621      	mov	r1, r4
 8017fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fb6:	3b30      	subs	r3, #48	; 0x30
 8017fb8:	2b09      	cmp	r3, #9
 8017fba:	d94d      	bls.n	8018058 <_svfiprintf_r+0x17c>
 8017fbc:	b1b0      	cbz	r0, 8017fec <_svfiprintf_r+0x110>
 8017fbe:	9207      	str	r2, [sp, #28]
 8017fc0:	e014      	b.n	8017fec <_svfiprintf_r+0x110>
 8017fc2:	eba0 0308 	sub.w	r3, r0, r8
 8017fc6:	46a2      	mov	sl, r4
 8017fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8017fcc:	4313      	orrs	r3, r2
 8017fce:	9304      	str	r3, [sp, #16]
 8017fd0:	e7d2      	b.n	8017f78 <_svfiprintf_r+0x9c>
 8017fd2:	9b03      	ldr	r3, [sp, #12]
 8017fd4:	1d19      	adds	r1, r3, #4
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	9103      	str	r1, [sp, #12]
 8017fdc:	bfbb      	ittet	lt
 8017fde:	425b      	neglt	r3, r3
 8017fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8017fe4:	9307      	strge	r3, [sp, #28]
 8017fe6:	9307      	strlt	r3, [sp, #28]
 8017fe8:	bfb8      	it	lt
 8017fea:	9204      	strlt	r2, [sp, #16]
 8017fec:	7823      	ldrb	r3, [r4, #0]
 8017fee:	2b2e      	cmp	r3, #46	; 0x2e
 8017ff0:	d10c      	bne.n	801800c <_svfiprintf_r+0x130>
 8017ff2:	7863      	ldrb	r3, [r4, #1]
 8017ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8017ff6:	d134      	bne.n	8018062 <_svfiprintf_r+0x186>
 8017ff8:	9b03      	ldr	r3, [sp, #12]
 8017ffa:	3402      	adds	r4, #2
 8017ffc:	1d1a      	adds	r2, r3, #4
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	9203      	str	r2, [sp, #12]
 8018004:	bfb8      	it	lt
 8018006:	f04f 33ff 	movlt.w	r3, #4294967295
 801800a:	9305      	str	r3, [sp, #20]
 801800c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80180d4 <_svfiprintf_r+0x1f8>
 8018010:	2203      	movs	r2, #3
 8018012:	7821      	ldrb	r1, [r4, #0]
 8018014:	4650      	mov	r0, sl
 8018016:	f7fe fbc8 	bl	80167aa <memchr>
 801801a:	b138      	cbz	r0, 801802c <_svfiprintf_r+0x150>
 801801c:	eba0 000a 	sub.w	r0, r0, sl
 8018020:	2240      	movs	r2, #64	; 0x40
 8018022:	9b04      	ldr	r3, [sp, #16]
 8018024:	3401      	adds	r4, #1
 8018026:	4082      	lsls	r2, r0
 8018028:	4313      	orrs	r3, r2
 801802a:	9304      	str	r3, [sp, #16]
 801802c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018030:	2206      	movs	r2, #6
 8018032:	4825      	ldr	r0, [pc, #148]	; (80180c8 <_svfiprintf_r+0x1ec>)
 8018034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018038:	f7fe fbb7 	bl	80167aa <memchr>
 801803c:	2800      	cmp	r0, #0
 801803e:	d038      	beq.n	80180b2 <_svfiprintf_r+0x1d6>
 8018040:	4b22      	ldr	r3, [pc, #136]	; (80180cc <_svfiprintf_r+0x1f0>)
 8018042:	bb1b      	cbnz	r3, 801808c <_svfiprintf_r+0x1b0>
 8018044:	9b03      	ldr	r3, [sp, #12]
 8018046:	3307      	adds	r3, #7
 8018048:	f023 0307 	bic.w	r3, r3, #7
 801804c:	3308      	adds	r3, #8
 801804e:	9303      	str	r3, [sp, #12]
 8018050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018052:	4433      	add	r3, r6
 8018054:	9309      	str	r3, [sp, #36]	; 0x24
 8018056:	e768      	b.n	8017f2a <_svfiprintf_r+0x4e>
 8018058:	fb0c 3202 	mla	r2, ip, r2, r3
 801805c:	460c      	mov	r4, r1
 801805e:	2001      	movs	r0, #1
 8018060:	e7a6      	b.n	8017fb0 <_svfiprintf_r+0xd4>
 8018062:	2300      	movs	r3, #0
 8018064:	3401      	adds	r4, #1
 8018066:	f04f 0c0a 	mov.w	ip, #10
 801806a:	4619      	mov	r1, r3
 801806c:	9305      	str	r3, [sp, #20]
 801806e:	4620      	mov	r0, r4
 8018070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018074:	3a30      	subs	r2, #48	; 0x30
 8018076:	2a09      	cmp	r2, #9
 8018078:	d903      	bls.n	8018082 <_svfiprintf_r+0x1a6>
 801807a:	2b00      	cmp	r3, #0
 801807c:	d0c6      	beq.n	801800c <_svfiprintf_r+0x130>
 801807e:	9105      	str	r1, [sp, #20]
 8018080:	e7c4      	b.n	801800c <_svfiprintf_r+0x130>
 8018082:	fb0c 2101 	mla	r1, ip, r1, r2
 8018086:	4604      	mov	r4, r0
 8018088:	2301      	movs	r3, #1
 801808a:	e7f0      	b.n	801806e <_svfiprintf_r+0x192>
 801808c:	ab03      	add	r3, sp, #12
 801808e:	462a      	mov	r2, r5
 8018090:	a904      	add	r1, sp, #16
 8018092:	4638      	mov	r0, r7
 8018094:	9300      	str	r3, [sp, #0]
 8018096:	4b0e      	ldr	r3, [pc, #56]	; (80180d0 <_svfiprintf_r+0x1f4>)
 8018098:	f7fd fba4 	bl	80157e4 <_printf_float>
 801809c:	1c42      	adds	r2, r0, #1
 801809e:	4606      	mov	r6, r0
 80180a0:	d1d6      	bne.n	8018050 <_svfiprintf_r+0x174>
 80180a2:	89ab      	ldrh	r3, [r5, #12]
 80180a4:	065b      	lsls	r3, r3, #25
 80180a6:	f53f af2d 	bmi.w	8017f04 <_svfiprintf_r+0x28>
 80180aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180ac:	b01d      	add	sp, #116	; 0x74
 80180ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b2:	ab03      	add	r3, sp, #12
 80180b4:	462a      	mov	r2, r5
 80180b6:	a904      	add	r1, sp, #16
 80180b8:	4638      	mov	r0, r7
 80180ba:	9300      	str	r3, [sp, #0]
 80180bc:	4b04      	ldr	r3, [pc, #16]	; (80180d0 <_svfiprintf_r+0x1f4>)
 80180be:	f7fd fe39 	bl	8015d34 <_printf_i>
 80180c2:	e7eb      	b.n	801809c <_svfiprintf_r+0x1c0>
 80180c4:	080198dc 	.word	0x080198dc
 80180c8:	080198e6 	.word	0x080198e6
 80180cc:	080157e5 	.word	0x080157e5
 80180d0:	08017e29 	.word	0x08017e29
 80180d4:	080198e2 	.word	0x080198e2

080180d8 <__sflush_r>:
 80180d8:	898a      	ldrh	r2, [r1, #12]
 80180da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180de:	4605      	mov	r5, r0
 80180e0:	0710      	lsls	r0, r2, #28
 80180e2:	460c      	mov	r4, r1
 80180e4:	d458      	bmi.n	8018198 <__sflush_r+0xc0>
 80180e6:	684b      	ldr	r3, [r1, #4]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	dc05      	bgt.n	80180f8 <__sflush_r+0x20>
 80180ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	dc02      	bgt.n	80180f8 <__sflush_r+0x20>
 80180f2:	2000      	movs	r0, #0
 80180f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80180fa:	2e00      	cmp	r6, #0
 80180fc:	d0f9      	beq.n	80180f2 <__sflush_r+0x1a>
 80180fe:	2300      	movs	r3, #0
 8018100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018104:	682f      	ldr	r7, [r5, #0]
 8018106:	6a21      	ldr	r1, [r4, #32]
 8018108:	602b      	str	r3, [r5, #0]
 801810a:	d032      	beq.n	8018172 <__sflush_r+0x9a>
 801810c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801810e:	89a3      	ldrh	r3, [r4, #12]
 8018110:	075a      	lsls	r2, r3, #29
 8018112:	d505      	bpl.n	8018120 <__sflush_r+0x48>
 8018114:	6863      	ldr	r3, [r4, #4]
 8018116:	1ac0      	subs	r0, r0, r3
 8018118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801811a:	b10b      	cbz	r3, 8018120 <__sflush_r+0x48>
 801811c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801811e:	1ac0      	subs	r0, r0, r3
 8018120:	2300      	movs	r3, #0
 8018122:	4602      	mov	r2, r0
 8018124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018126:	4628      	mov	r0, r5
 8018128:	6a21      	ldr	r1, [r4, #32]
 801812a:	47b0      	blx	r6
 801812c:	1c43      	adds	r3, r0, #1
 801812e:	89a3      	ldrh	r3, [r4, #12]
 8018130:	d106      	bne.n	8018140 <__sflush_r+0x68>
 8018132:	6829      	ldr	r1, [r5, #0]
 8018134:	291d      	cmp	r1, #29
 8018136:	d82b      	bhi.n	8018190 <__sflush_r+0xb8>
 8018138:	4a28      	ldr	r2, [pc, #160]	; (80181dc <__sflush_r+0x104>)
 801813a:	410a      	asrs	r2, r1
 801813c:	07d6      	lsls	r6, r2, #31
 801813e:	d427      	bmi.n	8018190 <__sflush_r+0xb8>
 8018140:	2200      	movs	r2, #0
 8018142:	04d9      	lsls	r1, r3, #19
 8018144:	6062      	str	r2, [r4, #4]
 8018146:	6922      	ldr	r2, [r4, #16]
 8018148:	6022      	str	r2, [r4, #0]
 801814a:	d504      	bpl.n	8018156 <__sflush_r+0x7e>
 801814c:	1c42      	adds	r2, r0, #1
 801814e:	d101      	bne.n	8018154 <__sflush_r+0x7c>
 8018150:	682b      	ldr	r3, [r5, #0]
 8018152:	b903      	cbnz	r3, 8018156 <__sflush_r+0x7e>
 8018154:	6560      	str	r0, [r4, #84]	; 0x54
 8018156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018158:	602f      	str	r7, [r5, #0]
 801815a:	2900      	cmp	r1, #0
 801815c:	d0c9      	beq.n	80180f2 <__sflush_r+0x1a>
 801815e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018162:	4299      	cmp	r1, r3
 8018164:	d002      	beq.n	801816c <__sflush_r+0x94>
 8018166:	4628      	mov	r0, r5
 8018168:	f7ff f9da 	bl	8017520 <_free_r>
 801816c:	2000      	movs	r0, #0
 801816e:	6360      	str	r0, [r4, #52]	; 0x34
 8018170:	e7c0      	b.n	80180f4 <__sflush_r+0x1c>
 8018172:	2301      	movs	r3, #1
 8018174:	4628      	mov	r0, r5
 8018176:	47b0      	blx	r6
 8018178:	1c41      	adds	r1, r0, #1
 801817a:	d1c8      	bne.n	801810e <__sflush_r+0x36>
 801817c:	682b      	ldr	r3, [r5, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d0c5      	beq.n	801810e <__sflush_r+0x36>
 8018182:	2b1d      	cmp	r3, #29
 8018184:	d001      	beq.n	801818a <__sflush_r+0xb2>
 8018186:	2b16      	cmp	r3, #22
 8018188:	d101      	bne.n	801818e <__sflush_r+0xb6>
 801818a:	602f      	str	r7, [r5, #0]
 801818c:	e7b1      	b.n	80180f2 <__sflush_r+0x1a>
 801818e:	89a3      	ldrh	r3, [r4, #12]
 8018190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018194:	81a3      	strh	r3, [r4, #12]
 8018196:	e7ad      	b.n	80180f4 <__sflush_r+0x1c>
 8018198:	690f      	ldr	r7, [r1, #16]
 801819a:	2f00      	cmp	r7, #0
 801819c:	d0a9      	beq.n	80180f2 <__sflush_r+0x1a>
 801819e:	0793      	lsls	r3, r2, #30
 80181a0:	680e      	ldr	r6, [r1, #0]
 80181a2:	600f      	str	r7, [r1, #0]
 80181a4:	bf0c      	ite	eq
 80181a6:	694b      	ldreq	r3, [r1, #20]
 80181a8:	2300      	movne	r3, #0
 80181aa:	eba6 0807 	sub.w	r8, r6, r7
 80181ae:	608b      	str	r3, [r1, #8]
 80181b0:	f1b8 0f00 	cmp.w	r8, #0
 80181b4:	dd9d      	ble.n	80180f2 <__sflush_r+0x1a>
 80181b6:	4643      	mov	r3, r8
 80181b8:	463a      	mov	r2, r7
 80181ba:	6a21      	ldr	r1, [r4, #32]
 80181bc:	4628      	mov	r0, r5
 80181be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80181c0:	47b0      	blx	r6
 80181c2:	2800      	cmp	r0, #0
 80181c4:	dc06      	bgt.n	80181d4 <__sflush_r+0xfc>
 80181c6:	89a3      	ldrh	r3, [r4, #12]
 80181c8:	f04f 30ff 	mov.w	r0, #4294967295
 80181cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181d0:	81a3      	strh	r3, [r4, #12]
 80181d2:	e78f      	b.n	80180f4 <__sflush_r+0x1c>
 80181d4:	4407      	add	r7, r0
 80181d6:	eba8 0800 	sub.w	r8, r8, r0
 80181da:	e7e9      	b.n	80181b0 <__sflush_r+0xd8>
 80181dc:	dfbffffe 	.word	0xdfbffffe

080181e0 <_fflush_r>:
 80181e0:	b538      	push	{r3, r4, r5, lr}
 80181e2:	690b      	ldr	r3, [r1, #16]
 80181e4:	4605      	mov	r5, r0
 80181e6:	460c      	mov	r4, r1
 80181e8:	b913      	cbnz	r3, 80181f0 <_fflush_r+0x10>
 80181ea:	2500      	movs	r5, #0
 80181ec:	4628      	mov	r0, r5
 80181ee:	bd38      	pop	{r3, r4, r5, pc}
 80181f0:	b118      	cbz	r0, 80181fa <_fflush_r+0x1a>
 80181f2:	6a03      	ldr	r3, [r0, #32]
 80181f4:	b90b      	cbnz	r3, 80181fa <_fflush_r+0x1a>
 80181f6:	f7fd ff49 	bl	801608c <__sinit>
 80181fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d0f3      	beq.n	80181ea <_fflush_r+0xa>
 8018202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018204:	07d0      	lsls	r0, r2, #31
 8018206:	d404      	bmi.n	8018212 <_fflush_r+0x32>
 8018208:	0599      	lsls	r1, r3, #22
 801820a:	d402      	bmi.n	8018212 <_fflush_r+0x32>
 801820c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801820e:	f7fe faca 	bl	80167a6 <__retarget_lock_acquire_recursive>
 8018212:	4628      	mov	r0, r5
 8018214:	4621      	mov	r1, r4
 8018216:	f7ff ff5f 	bl	80180d8 <__sflush_r>
 801821a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801821c:	4605      	mov	r5, r0
 801821e:	07da      	lsls	r2, r3, #31
 8018220:	d4e4      	bmi.n	80181ec <_fflush_r+0xc>
 8018222:	89a3      	ldrh	r3, [r4, #12]
 8018224:	059b      	lsls	r3, r3, #22
 8018226:	d4e1      	bmi.n	80181ec <_fflush_r+0xc>
 8018228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801822a:	f7fe fabd 	bl	80167a8 <__retarget_lock_release_recursive>
 801822e:	e7dd      	b.n	80181ec <_fflush_r+0xc>

08018230 <fiprintf>:
 8018230:	b40e      	push	{r1, r2, r3}
 8018232:	b503      	push	{r0, r1, lr}
 8018234:	ab03      	add	r3, sp, #12
 8018236:	4601      	mov	r1, r0
 8018238:	4805      	ldr	r0, [pc, #20]	; (8018250 <fiprintf+0x20>)
 801823a:	f853 2b04 	ldr.w	r2, [r3], #4
 801823e:	6800      	ldr	r0, [r0, #0]
 8018240:	9301      	str	r3, [sp, #4]
 8018242:	f000 f97d 	bl	8018540 <_vfiprintf_r>
 8018246:	b002      	add	sp, #8
 8018248:	f85d eb04 	ldr.w	lr, [sp], #4
 801824c:	b003      	add	sp, #12
 801824e:	4770      	bx	lr
 8018250:	20000200 	.word	0x20000200

08018254 <__swhatbuf_r>:
 8018254:	b570      	push	{r4, r5, r6, lr}
 8018256:	460c      	mov	r4, r1
 8018258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801825c:	b096      	sub	sp, #88	; 0x58
 801825e:	4615      	mov	r5, r2
 8018260:	2900      	cmp	r1, #0
 8018262:	461e      	mov	r6, r3
 8018264:	da0c      	bge.n	8018280 <__swhatbuf_r+0x2c>
 8018266:	89a3      	ldrh	r3, [r4, #12]
 8018268:	2100      	movs	r1, #0
 801826a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801826e:	bf0c      	ite	eq
 8018270:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018274:	2340      	movne	r3, #64	; 0x40
 8018276:	2000      	movs	r0, #0
 8018278:	6031      	str	r1, [r6, #0]
 801827a:	602b      	str	r3, [r5, #0]
 801827c:	b016      	add	sp, #88	; 0x58
 801827e:	bd70      	pop	{r4, r5, r6, pc}
 8018280:	466a      	mov	r2, sp
 8018282:	f000 f897 	bl	80183b4 <_fstat_r>
 8018286:	2800      	cmp	r0, #0
 8018288:	dbed      	blt.n	8018266 <__swhatbuf_r+0x12>
 801828a:	9901      	ldr	r1, [sp, #4]
 801828c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018290:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018294:	4259      	negs	r1, r3
 8018296:	4159      	adcs	r1, r3
 8018298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801829c:	e7eb      	b.n	8018276 <__swhatbuf_r+0x22>

0801829e <__smakebuf_r>:
 801829e:	898b      	ldrh	r3, [r1, #12]
 80182a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80182a2:	079d      	lsls	r5, r3, #30
 80182a4:	4606      	mov	r6, r0
 80182a6:	460c      	mov	r4, r1
 80182a8:	d507      	bpl.n	80182ba <__smakebuf_r+0x1c>
 80182aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80182ae:	6023      	str	r3, [r4, #0]
 80182b0:	6123      	str	r3, [r4, #16]
 80182b2:	2301      	movs	r3, #1
 80182b4:	6163      	str	r3, [r4, #20]
 80182b6:	b002      	add	sp, #8
 80182b8:	bd70      	pop	{r4, r5, r6, pc}
 80182ba:	ab01      	add	r3, sp, #4
 80182bc:	466a      	mov	r2, sp
 80182be:	f7ff ffc9 	bl	8018254 <__swhatbuf_r>
 80182c2:	9900      	ldr	r1, [sp, #0]
 80182c4:	4605      	mov	r5, r0
 80182c6:	4630      	mov	r0, r6
 80182c8:	f7ff f99e 	bl	8017608 <_malloc_r>
 80182cc:	b948      	cbnz	r0, 80182e2 <__smakebuf_r+0x44>
 80182ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182d2:	059a      	lsls	r2, r3, #22
 80182d4:	d4ef      	bmi.n	80182b6 <__smakebuf_r+0x18>
 80182d6:	f023 0303 	bic.w	r3, r3, #3
 80182da:	f043 0302 	orr.w	r3, r3, #2
 80182de:	81a3      	strh	r3, [r4, #12]
 80182e0:	e7e3      	b.n	80182aa <__smakebuf_r+0xc>
 80182e2:	89a3      	ldrh	r3, [r4, #12]
 80182e4:	6020      	str	r0, [r4, #0]
 80182e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182ea:	6120      	str	r0, [r4, #16]
 80182ec:	81a3      	strh	r3, [r4, #12]
 80182ee:	9b00      	ldr	r3, [sp, #0]
 80182f0:	6163      	str	r3, [r4, #20]
 80182f2:	9b01      	ldr	r3, [sp, #4]
 80182f4:	b15b      	cbz	r3, 801830e <__smakebuf_r+0x70>
 80182f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182fa:	4630      	mov	r0, r6
 80182fc:	f000 f86c 	bl	80183d8 <_isatty_r>
 8018300:	b128      	cbz	r0, 801830e <__smakebuf_r+0x70>
 8018302:	89a3      	ldrh	r3, [r4, #12]
 8018304:	f023 0303 	bic.w	r3, r3, #3
 8018308:	f043 0301 	orr.w	r3, r3, #1
 801830c:	81a3      	strh	r3, [r4, #12]
 801830e:	89a3      	ldrh	r3, [r4, #12]
 8018310:	431d      	orrs	r5, r3
 8018312:	81a5      	strh	r5, [r4, #12]
 8018314:	e7cf      	b.n	80182b6 <__smakebuf_r+0x18>

08018316 <_putc_r>:
 8018316:	b570      	push	{r4, r5, r6, lr}
 8018318:	460d      	mov	r5, r1
 801831a:	4614      	mov	r4, r2
 801831c:	4606      	mov	r6, r0
 801831e:	b118      	cbz	r0, 8018328 <_putc_r+0x12>
 8018320:	6a03      	ldr	r3, [r0, #32]
 8018322:	b90b      	cbnz	r3, 8018328 <_putc_r+0x12>
 8018324:	f7fd feb2 	bl	801608c <__sinit>
 8018328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801832a:	07d8      	lsls	r0, r3, #31
 801832c:	d405      	bmi.n	801833a <_putc_r+0x24>
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	0599      	lsls	r1, r3, #22
 8018332:	d402      	bmi.n	801833a <_putc_r+0x24>
 8018334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018336:	f7fe fa36 	bl	80167a6 <__retarget_lock_acquire_recursive>
 801833a:	68a3      	ldr	r3, [r4, #8]
 801833c:	3b01      	subs	r3, #1
 801833e:	2b00      	cmp	r3, #0
 8018340:	60a3      	str	r3, [r4, #8]
 8018342:	da05      	bge.n	8018350 <_putc_r+0x3a>
 8018344:	69a2      	ldr	r2, [r4, #24]
 8018346:	4293      	cmp	r3, r2
 8018348:	db12      	blt.n	8018370 <_putc_r+0x5a>
 801834a:	b2eb      	uxtb	r3, r5
 801834c:	2b0a      	cmp	r3, #10
 801834e:	d00f      	beq.n	8018370 <_putc_r+0x5a>
 8018350:	6823      	ldr	r3, [r4, #0]
 8018352:	1c5a      	adds	r2, r3, #1
 8018354:	6022      	str	r2, [r4, #0]
 8018356:	701d      	strb	r5, [r3, #0]
 8018358:	b2ed      	uxtb	r5, r5
 801835a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801835c:	07da      	lsls	r2, r3, #31
 801835e:	d405      	bmi.n	801836c <_putc_r+0x56>
 8018360:	89a3      	ldrh	r3, [r4, #12]
 8018362:	059b      	lsls	r3, r3, #22
 8018364:	d402      	bmi.n	801836c <_putc_r+0x56>
 8018366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018368:	f7fe fa1e 	bl	80167a8 <__retarget_lock_release_recursive>
 801836c:	4628      	mov	r0, r5
 801836e:	bd70      	pop	{r4, r5, r6, pc}
 8018370:	4629      	mov	r1, r5
 8018372:	4622      	mov	r2, r4
 8018374:	4630      	mov	r0, r6
 8018376:	f7fe f881 	bl	801647c <__swbuf_r>
 801837a:	4605      	mov	r5, r0
 801837c:	e7ed      	b.n	801835a <_putc_r+0x44>

0801837e <memmove>:
 801837e:	4288      	cmp	r0, r1
 8018380:	b510      	push	{r4, lr}
 8018382:	eb01 0402 	add.w	r4, r1, r2
 8018386:	d902      	bls.n	801838e <memmove+0x10>
 8018388:	4284      	cmp	r4, r0
 801838a:	4623      	mov	r3, r4
 801838c:	d807      	bhi.n	801839e <memmove+0x20>
 801838e:	1e43      	subs	r3, r0, #1
 8018390:	42a1      	cmp	r1, r4
 8018392:	d008      	beq.n	80183a6 <memmove+0x28>
 8018394:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018398:	f803 2f01 	strb.w	r2, [r3, #1]!
 801839c:	e7f8      	b.n	8018390 <memmove+0x12>
 801839e:	4402      	add	r2, r0
 80183a0:	4601      	mov	r1, r0
 80183a2:	428a      	cmp	r2, r1
 80183a4:	d100      	bne.n	80183a8 <memmove+0x2a>
 80183a6:	bd10      	pop	{r4, pc}
 80183a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80183b0:	e7f7      	b.n	80183a2 <memmove+0x24>
	...

080183b4 <_fstat_r>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	2300      	movs	r3, #0
 80183b8:	4d06      	ldr	r5, [pc, #24]	; (80183d4 <_fstat_r+0x20>)
 80183ba:	4604      	mov	r4, r0
 80183bc:	4608      	mov	r0, r1
 80183be:	4611      	mov	r1, r2
 80183c0:	602b      	str	r3, [r5, #0]
 80183c2:	f7ed f8c2 	bl	800554a <_fstat>
 80183c6:	1c43      	adds	r3, r0, #1
 80183c8:	d102      	bne.n	80183d0 <_fstat_r+0x1c>
 80183ca:	682b      	ldr	r3, [r5, #0]
 80183cc:	b103      	cbz	r3, 80183d0 <_fstat_r+0x1c>
 80183ce:	6023      	str	r3, [r4, #0]
 80183d0:	bd38      	pop	{r3, r4, r5, pc}
 80183d2:	bf00      	nop
 80183d4:	20004a08 	.word	0x20004a08

080183d8 <_isatty_r>:
 80183d8:	b538      	push	{r3, r4, r5, lr}
 80183da:	2300      	movs	r3, #0
 80183dc:	4d05      	ldr	r5, [pc, #20]	; (80183f4 <_isatty_r+0x1c>)
 80183de:	4604      	mov	r4, r0
 80183e0:	4608      	mov	r0, r1
 80183e2:	602b      	str	r3, [r5, #0]
 80183e4:	f7ed f8c1 	bl	800556a <_isatty>
 80183e8:	1c43      	adds	r3, r0, #1
 80183ea:	d102      	bne.n	80183f2 <_isatty_r+0x1a>
 80183ec:	682b      	ldr	r3, [r5, #0]
 80183ee:	b103      	cbz	r3, 80183f2 <_isatty_r+0x1a>
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	bd38      	pop	{r3, r4, r5, pc}
 80183f4:	20004a08 	.word	0x20004a08

080183f8 <_sbrk_r>:
 80183f8:	b538      	push	{r3, r4, r5, lr}
 80183fa:	2300      	movs	r3, #0
 80183fc:	4d05      	ldr	r5, [pc, #20]	; (8018414 <_sbrk_r+0x1c>)
 80183fe:	4604      	mov	r4, r0
 8018400:	4608      	mov	r0, r1
 8018402:	602b      	str	r3, [r5, #0]
 8018404:	f7ed f8ca 	bl	800559c <_sbrk>
 8018408:	1c43      	adds	r3, r0, #1
 801840a:	d102      	bne.n	8018412 <_sbrk_r+0x1a>
 801840c:	682b      	ldr	r3, [r5, #0]
 801840e:	b103      	cbz	r3, 8018412 <_sbrk_r+0x1a>
 8018410:	6023      	str	r3, [r4, #0]
 8018412:	bd38      	pop	{r3, r4, r5, pc}
 8018414:	20004a08 	.word	0x20004a08

08018418 <abort>:
 8018418:	2006      	movs	r0, #6
 801841a:	b508      	push	{r3, lr}
 801841c:	f000 f9d2 	bl	80187c4 <raise>
 8018420:	2001      	movs	r0, #1
 8018422:	f7ed f843 	bl	80054ac <_exit>

08018426 <_calloc_r>:
 8018426:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018428:	fba1 2402 	umull	r2, r4, r1, r2
 801842c:	b94c      	cbnz	r4, 8018442 <_calloc_r+0x1c>
 801842e:	4611      	mov	r1, r2
 8018430:	9201      	str	r2, [sp, #4]
 8018432:	f7ff f8e9 	bl	8017608 <_malloc_r>
 8018436:	9a01      	ldr	r2, [sp, #4]
 8018438:	4605      	mov	r5, r0
 801843a:	b930      	cbnz	r0, 801844a <_calloc_r+0x24>
 801843c:	4628      	mov	r0, r5
 801843e:	b003      	add	sp, #12
 8018440:	bd30      	pop	{r4, r5, pc}
 8018442:	220c      	movs	r2, #12
 8018444:	2500      	movs	r5, #0
 8018446:	6002      	str	r2, [r0, #0]
 8018448:	e7f8      	b.n	801843c <_calloc_r+0x16>
 801844a:	4621      	mov	r1, r4
 801844c:	f7fe f8ac 	bl	80165a8 <memset>
 8018450:	e7f4      	b.n	801843c <_calloc_r+0x16>

08018452 <__ascii_mbtowc>:
 8018452:	b082      	sub	sp, #8
 8018454:	b901      	cbnz	r1, 8018458 <__ascii_mbtowc+0x6>
 8018456:	a901      	add	r1, sp, #4
 8018458:	b142      	cbz	r2, 801846c <__ascii_mbtowc+0x1a>
 801845a:	b14b      	cbz	r3, 8018470 <__ascii_mbtowc+0x1e>
 801845c:	7813      	ldrb	r3, [r2, #0]
 801845e:	600b      	str	r3, [r1, #0]
 8018460:	7812      	ldrb	r2, [r2, #0]
 8018462:	1e10      	subs	r0, r2, #0
 8018464:	bf18      	it	ne
 8018466:	2001      	movne	r0, #1
 8018468:	b002      	add	sp, #8
 801846a:	4770      	bx	lr
 801846c:	4610      	mov	r0, r2
 801846e:	e7fb      	b.n	8018468 <__ascii_mbtowc+0x16>
 8018470:	f06f 0001 	mvn.w	r0, #1
 8018474:	e7f8      	b.n	8018468 <__ascii_mbtowc+0x16>

08018476 <_realloc_r>:
 8018476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847a:	4680      	mov	r8, r0
 801847c:	4614      	mov	r4, r2
 801847e:	460e      	mov	r6, r1
 8018480:	b921      	cbnz	r1, 801848c <_realloc_r+0x16>
 8018482:	4611      	mov	r1, r2
 8018484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018488:	f7ff b8be 	b.w	8017608 <_malloc_r>
 801848c:	b92a      	cbnz	r2, 801849a <_realloc_r+0x24>
 801848e:	4625      	mov	r5, r4
 8018490:	f7ff f846 	bl	8017520 <_free_r>
 8018494:	4628      	mov	r0, r5
 8018496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801849a:	f000 f9af 	bl	80187fc <_malloc_usable_size_r>
 801849e:	4284      	cmp	r4, r0
 80184a0:	4607      	mov	r7, r0
 80184a2:	d802      	bhi.n	80184aa <_realloc_r+0x34>
 80184a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80184a8:	d812      	bhi.n	80184d0 <_realloc_r+0x5a>
 80184aa:	4621      	mov	r1, r4
 80184ac:	4640      	mov	r0, r8
 80184ae:	f7ff f8ab 	bl	8017608 <_malloc_r>
 80184b2:	4605      	mov	r5, r0
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d0ed      	beq.n	8018494 <_realloc_r+0x1e>
 80184b8:	42bc      	cmp	r4, r7
 80184ba:	4622      	mov	r2, r4
 80184bc:	4631      	mov	r1, r6
 80184be:	bf28      	it	cs
 80184c0:	463a      	movcs	r2, r7
 80184c2:	f7fe f980 	bl	80167c6 <memcpy>
 80184c6:	4631      	mov	r1, r6
 80184c8:	4640      	mov	r0, r8
 80184ca:	f7ff f829 	bl	8017520 <_free_r>
 80184ce:	e7e1      	b.n	8018494 <_realloc_r+0x1e>
 80184d0:	4635      	mov	r5, r6
 80184d2:	e7df      	b.n	8018494 <_realloc_r+0x1e>

080184d4 <__ascii_wctomb>:
 80184d4:	b149      	cbz	r1, 80184ea <__ascii_wctomb+0x16>
 80184d6:	2aff      	cmp	r2, #255	; 0xff
 80184d8:	bf8d      	iteet	hi
 80184da:	238a      	movhi	r3, #138	; 0x8a
 80184dc:	2001      	movls	r0, #1
 80184de:	700a      	strbls	r2, [r1, #0]
 80184e0:	6003      	strhi	r3, [r0, #0]
 80184e2:	bf88      	it	hi
 80184e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80184e8:	4770      	bx	lr
 80184ea:	4608      	mov	r0, r1
 80184ec:	4770      	bx	lr

080184ee <__sfputc_r>:
 80184ee:	6893      	ldr	r3, [r2, #8]
 80184f0:	3b01      	subs	r3, #1
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	6093      	str	r3, [r2, #8]
 80184f6:	b410      	push	{r4}
 80184f8:	da08      	bge.n	801850c <__sfputc_r+0x1e>
 80184fa:	6994      	ldr	r4, [r2, #24]
 80184fc:	42a3      	cmp	r3, r4
 80184fe:	db01      	blt.n	8018504 <__sfputc_r+0x16>
 8018500:	290a      	cmp	r1, #10
 8018502:	d103      	bne.n	801850c <__sfputc_r+0x1e>
 8018504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018508:	f7fd bfb8 	b.w	801647c <__swbuf_r>
 801850c:	6813      	ldr	r3, [r2, #0]
 801850e:	1c58      	adds	r0, r3, #1
 8018510:	6010      	str	r0, [r2, #0]
 8018512:	4608      	mov	r0, r1
 8018514:	7019      	strb	r1, [r3, #0]
 8018516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801851a:	4770      	bx	lr

0801851c <__sfputs_r>:
 801851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801851e:	4606      	mov	r6, r0
 8018520:	460f      	mov	r7, r1
 8018522:	4614      	mov	r4, r2
 8018524:	18d5      	adds	r5, r2, r3
 8018526:	42ac      	cmp	r4, r5
 8018528:	d101      	bne.n	801852e <__sfputs_r+0x12>
 801852a:	2000      	movs	r0, #0
 801852c:	e007      	b.n	801853e <__sfputs_r+0x22>
 801852e:	463a      	mov	r2, r7
 8018530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018534:	4630      	mov	r0, r6
 8018536:	f7ff ffda 	bl	80184ee <__sfputc_r>
 801853a:	1c43      	adds	r3, r0, #1
 801853c:	d1f3      	bne.n	8018526 <__sfputs_r+0xa>
 801853e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018540 <_vfiprintf_r>:
 8018540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018544:	460d      	mov	r5, r1
 8018546:	b09d      	sub	sp, #116	; 0x74
 8018548:	4614      	mov	r4, r2
 801854a:	4698      	mov	r8, r3
 801854c:	4606      	mov	r6, r0
 801854e:	b118      	cbz	r0, 8018558 <_vfiprintf_r+0x18>
 8018550:	6a03      	ldr	r3, [r0, #32]
 8018552:	b90b      	cbnz	r3, 8018558 <_vfiprintf_r+0x18>
 8018554:	f7fd fd9a 	bl	801608c <__sinit>
 8018558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801855a:	07d9      	lsls	r1, r3, #31
 801855c:	d405      	bmi.n	801856a <_vfiprintf_r+0x2a>
 801855e:	89ab      	ldrh	r3, [r5, #12]
 8018560:	059a      	lsls	r2, r3, #22
 8018562:	d402      	bmi.n	801856a <_vfiprintf_r+0x2a>
 8018564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018566:	f7fe f91e 	bl	80167a6 <__retarget_lock_acquire_recursive>
 801856a:	89ab      	ldrh	r3, [r5, #12]
 801856c:	071b      	lsls	r3, r3, #28
 801856e:	d501      	bpl.n	8018574 <_vfiprintf_r+0x34>
 8018570:	692b      	ldr	r3, [r5, #16]
 8018572:	b99b      	cbnz	r3, 801859c <_vfiprintf_r+0x5c>
 8018574:	4629      	mov	r1, r5
 8018576:	4630      	mov	r0, r6
 8018578:	f7fd ffbe 	bl	80164f8 <__swsetup_r>
 801857c:	b170      	cbz	r0, 801859c <_vfiprintf_r+0x5c>
 801857e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018580:	07dc      	lsls	r4, r3, #31
 8018582:	d504      	bpl.n	801858e <_vfiprintf_r+0x4e>
 8018584:	f04f 30ff 	mov.w	r0, #4294967295
 8018588:	b01d      	add	sp, #116	; 0x74
 801858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801858e:	89ab      	ldrh	r3, [r5, #12]
 8018590:	0598      	lsls	r0, r3, #22
 8018592:	d4f7      	bmi.n	8018584 <_vfiprintf_r+0x44>
 8018594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018596:	f7fe f907 	bl	80167a8 <__retarget_lock_release_recursive>
 801859a:	e7f3      	b.n	8018584 <_vfiprintf_r+0x44>
 801859c:	2300      	movs	r3, #0
 801859e:	f8cd 800c 	str.w	r8, [sp, #12]
 80185a2:	f04f 0901 	mov.w	r9, #1
 80185a6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8018760 <_vfiprintf_r+0x220>
 80185aa:	9309      	str	r3, [sp, #36]	; 0x24
 80185ac:	2320      	movs	r3, #32
 80185ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80185b2:	2330      	movs	r3, #48	; 0x30
 80185b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80185b8:	4623      	mov	r3, r4
 80185ba:	469a      	mov	sl, r3
 80185bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185c0:	b10a      	cbz	r2, 80185c6 <_vfiprintf_r+0x86>
 80185c2:	2a25      	cmp	r2, #37	; 0x25
 80185c4:	d1f9      	bne.n	80185ba <_vfiprintf_r+0x7a>
 80185c6:	ebba 0b04 	subs.w	fp, sl, r4
 80185ca:	d00b      	beq.n	80185e4 <_vfiprintf_r+0xa4>
 80185cc:	465b      	mov	r3, fp
 80185ce:	4622      	mov	r2, r4
 80185d0:	4629      	mov	r1, r5
 80185d2:	4630      	mov	r0, r6
 80185d4:	f7ff ffa2 	bl	801851c <__sfputs_r>
 80185d8:	3001      	adds	r0, #1
 80185da:	f000 80a9 	beq.w	8018730 <_vfiprintf_r+0x1f0>
 80185de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185e0:	445a      	add	r2, fp
 80185e2:	9209      	str	r2, [sp, #36]	; 0x24
 80185e4:	f89a 3000 	ldrb.w	r3, [sl]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f000 80a1 	beq.w	8018730 <_vfiprintf_r+0x1f0>
 80185ee:	2300      	movs	r3, #0
 80185f0:	f04f 32ff 	mov.w	r2, #4294967295
 80185f4:	f10a 0a01 	add.w	sl, sl, #1
 80185f8:	9304      	str	r3, [sp, #16]
 80185fa:	9307      	str	r3, [sp, #28]
 80185fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018600:	931a      	str	r3, [sp, #104]	; 0x68
 8018602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018606:	4654      	mov	r4, sl
 8018608:	2205      	movs	r2, #5
 801860a:	4855      	ldr	r0, [pc, #340]	; (8018760 <_vfiprintf_r+0x220>)
 801860c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018610:	f7fe f8cb 	bl	80167aa <memchr>
 8018614:	9a04      	ldr	r2, [sp, #16]
 8018616:	b9d8      	cbnz	r0, 8018650 <_vfiprintf_r+0x110>
 8018618:	06d1      	lsls	r1, r2, #27
 801861a:	bf44      	itt	mi
 801861c:	2320      	movmi	r3, #32
 801861e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018622:	0713      	lsls	r3, r2, #28
 8018624:	bf44      	itt	mi
 8018626:	232b      	movmi	r3, #43	; 0x2b
 8018628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801862c:	f89a 3000 	ldrb.w	r3, [sl]
 8018630:	2b2a      	cmp	r3, #42	; 0x2a
 8018632:	d015      	beq.n	8018660 <_vfiprintf_r+0x120>
 8018634:	9a07      	ldr	r2, [sp, #28]
 8018636:	4654      	mov	r4, sl
 8018638:	2000      	movs	r0, #0
 801863a:	f04f 0c0a 	mov.w	ip, #10
 801863e:	4621      	mov	r1, r4
 8018640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018644:	3b30      	subs	r3, #48	; 0x30
 8018646:	2b09      	cmp	r3, #9
 8018648:	d94d      	bls.n	80186e6 <_vfiprintf_r+0x1a6>
 801864a:	b1b0      	cbz	r0, 801867a <_vfiprintf_r+0x13a>
 801864c:	9207      	str	r2, [sp, #28]
 801864e:	e014      	b.n	801867a <_vfiprintf_r+0x13a>
 8018650:	eba0 0308 	sub.w	r3, r0, r8
 8018654:	46a2      	mov	sl, r4
 8018656:	fa09 f303 	lsl.w	r3, r9, r3
 801865a:	4313      	orrs	r3, r2
 801865c:	9304      	str	r3, [sp, #16]
 801865e:	e7d2      	b.n	8018606 <_vfiprintf_r+0xc6>
 8018660:	9b03      	ldr	r3, [sp, #12]
 8018662:	1d19      	adds	r1, r3, #4
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	9103      	str	r1, [sp, #12]
 801866a:	bfbb      	ittet	lt
 801866c:	425b      	neglt	r3, r3
 801866e:	f042 0202 	orrlt.w	r2, r2, #2
 8018672:	9307      	strge	r3, [sp, #28]
 8018674:	9307      	strlt	r3, [sp, #28]
 8018676:	bfb8      	it	lt
 8018678:	9204      	strlt	r2, [sp, #16]
 801867a:	7823      	ldrb	r3, [r4, #0]
 801867c:	2b2e      	cmp	r3, #46	; 0x2e
 801867e:	d10c      	bne.n	801869a <_vfiprintf_r+0x15a>
 8018680:	7863      	ldrb	r3, [r4, #1]
 8018682:	2b2a      	cmp	r3, #42	; 0x2a
 8018684:	d134      	bne.n	80186f0 <_vfiprintf_r+0x1b0>
 8018686:	9b03      	ldr	r3, [sp, #12]
 8018688:	3402      	adds	r4, #2
 801868a:	1d1a      	adds	r2, r3, #4
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	2b00      	cmp	r3, #0
 8018690:	9203      	str	r2, [sp, #12]
 8018692:	bfb8      	it	lt
 8018694:	f04f 33ff 	movlt.w	r3, #4294967295
 8018698:	9305      	str	r3, [sp, #20]
 801869a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018770 <_vfiprintf_r+0x230>
 801869e:	2203      	movs	r2, #3
 80186a0:	7821      	ldrb	r1, [r4, #0]
 80186a2:	4650      	mov	r0, sl
 80186a4:	f7fe f881 	bl	80167aa <memchr>
 80186a8:	b138      	cbz	r0, 80186ba <_vfiprintf_r+0x17a>
 80186aa:	eba0 000a 	sub.w	r0, r0, sl
 80186ae:	2240      	movs	r2, #64	; 0x40
 80186b0:	9b04      	ldr	r3, [sp, #16]
 80186b2:	3401      	adds	r4, #1
 80186b4:	4082      	lsls	r2, r0
 80186b6:	4313      	orrs	r3, r2
 80186b8:	9304      	str	r3, [sp, #16]
 80186ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186be:	2206      	movs	r2, #6
 80186c0:	4828      	ldr	r0, [pc, #160]	; (8018764 <_vfiprintf_r+0x224>)
 80186c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80186c6:	f7fe f870 	bl	80167aa <memchr>
 80186ca:	2800      	cmp	r0, #0
 80186cc:	d03f      	beq.n	801874e <_vfiprintf_r+0x20e>
 80186ce:	4b26      	ldr	r3, [pc, #152]	; (8018768 <_vfiprintf_r+0x228>)
 80186d0:	bb1b      	cbnz	r3, 801871a <_vfiprintf_r+0x1da>
 80186d2:	9b03      	ldr	r3, [sp, #12]
 80186d4:	3307      	adds	r3, #7
 80186d6:	f023 0307 	bic.w	r3, r3, #7
 80186da:	3308      	adds	r3, #8
 80186dc:	9303      	str	r3, [sp, #12]
 80186de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186e0:	443b      	add	r3, r7
 80186e2:	9309      	str	r3, [sp, #36]	; 0x24
 80186e4:	e768      	b.n	80185b8 <_vfiprintf_r+0x78>
 80186e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80186ea:	460c      	mov	r4, r1
 80186ec:	2001      	movs	r0, #1
 80186ee:	e7a6      	b.n	801863e <_vfiprintf_r+0xfe>
 80186f0:	2300      	movs	r3, #0
 80186f2:	3401      	adds	r4, #1
 80186f4:	f04f 0c0a 	mov.w	ip, #10
 80186f8:	4619      	mov	r1, r3
 80186fa:	9305      	str	r3, [sp, #20]
 80186fc:	4620      	mov	r0, r4
 80186fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018702:	3a30      	subs	r2, #48	; 0x30
 8018704:	2a09      	cmp	r2, #9
 8018706:	d903      	bls.n	8018710 <_vfiprintf_r+0x1d0>
 8018708:	2b00      	cmp	r3, #0
 801870a:	d0c6      	beq.n	801869a <_vfiprintf_r+0x15a>
 801870c:	9105      	str	r1, [sp, #20]
 801870e:	e7c4      	b.n	801869a <_vfiprintf_r+0x15a>
 8018710:	fb0c 2101 	mla	r1, ip, r1, r2
 8018714:	4604      	mov	r4, r0
 8018716:	2301      	movs	r3, #1
 8018718:	e7f0      	b.n	80186fc <_vfiprintf_r+0x1bc>
 801871a:	ab03      	add	r3, sp, #12
 801871c:	462a      	mov	r2, r5
 801871e:	a904      	add	r1, sp, #16
 8018720:	4630      	mov	r0, r6
 8018722:	9300      	str	r3, [sp, #0]
 8018724:	4b11      	ldr	r3, [pc, #68]	; (801876c <_vfiprintf_r+0x22c>)
 8018726:	f7fd f85d 	bl	80157e4 <_printf_float>
 801872a:	4607      	mov	r7, r0
 801872c:	1c78      	adds	r0, r7, #1
 801872e:	d1d6      	bne.n	80186de <_vfiprintf_r+0x19e>
 8018730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018732:	07d9      	lsls	r1, r3, #31
 8018734:	d405      	bmi.n	8018742 <_vfiprintf_r+0x202>
 8018736:	89ab      	ldrh	r3, [r5, #12]
 8018738:	059a      	lsls	r2, r3, #22
 801873a:	d402      	bmi.n	8018742 <_vfiprintf_r+0x202>
 801873c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801873e:	f7fe f833 	bl	80167a8 <__retarget_lock_release_recursive>
 8018742:	89ab      	ldrh	r3, [r5, #12]
 8018744:	065b      	lsls	r3, r3, #25
 8018746:	f53f af1d 	bmi.w	8018584 <_vfiprintf_r+0x44>
 801874a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801874c:	e71c      	b.n	8018588 <_vfiprintf_r+0x48>
 801874e:	ab03      	add	r3, sp, #12
 8018750:	462a      	mov	r2, r5
 8018752:	a904      	add	r1, sp, #16
 8018754:	4630      	mov	r0, r6
 8018756:	9300      	str	r3, [sp, #0]
 8018758:	4b04      	ldr	r3, [pc, #16]	; (801876c <_vfiprintf_r+0x22c>)
 801875a:	f7fd faeb 	bl	8015d34 <_printf_i>
 801875e:	e7e4      	b.n	801872a <_vfiprintf_r+0x1ea>
 8018760:	080198dc 	.word	0x080198dc
 8018764:	080198e6 	.word	0x080198e6
 8018768:	080157e5 	.word	0x080157e5
 801876c:	0801851d 	.word	0x0801851d
 8018770:	080198e2 	.word	0x080198e2

08018774 <_raise_r>:
 8018774:	291f      	cmp	r1, #31
 8018776:	b538      	push	{r3, r4, r5, lr}
 8018778:	4604      	mov	r4, r0
 801877a:	460d      	mov	r5, r1
 801877c:	d904      	bls.n	8018788 <_raise_r+0x14>
 801877e:	2316      	movs	r3, #22
 8018780:	6003      	str	r3, [r0, #0]
 8018782:	f04f 30ff 	mov.w	r0, #4294967295
 8018786:	bd38      	pop	{r3, r4, r5, pc}
 8018788:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801878a:	b112      	cbz	r2, 8018792 <_raise_r+0x1e>
 801878c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018790:	b94b      	cbnz	r3, 80187a6 <_raise_r+0x32>
 8018792:	4620      	mov	r0, r4
 8018794:	f000 f830 	bl	80187f8 <_getpid_r>
 8018798:	462a      	mov	r2, r5
 801879a:	4601      	mov	r1, r0
 801879c:	4620      	mov	r0, r4
 801879e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187a2:	f000 b817 	b.w	80187d4 <_kill_r>
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d00a      	beq.n	80187c0 <_raise_r+0x4c>
 80187aa:	1c59      	adds	r1, r3, #1
 80187ac:	d103      	bne.n	80187b6 <_raise_r+0x42>
 80187ae:	2316      	movs	r3, #22
 80187b0:	6003      	str	r3, [r0, #0]
 80187b2:	2001      	movs	r0, #1
 80187b4:	e7e7      	b.n	8018786 <_raise_r+0x12>
 80187b6:	2400      	movs	r4, #0
 80187b8:	4628      	mov	r0, r5
 80187ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80187be:	4798      	blx	r3
 80187c0:	2000      	movs	r0, #0
 80187c2:	e7e0      	b.n	8018786 <_raise_r+0x12>

080187c4 <raise>:
 80187c4:	4b02      	ldr	r3, [pc, #8]	; (80187d0 <raise+0xc>)
 80187c6:	4601      	mov	r1, r0
 80187c8:	6818      	ldr	r0, [r3, #0]
 80187ca:	f7ff bfd3 	b.w	8018774 <_raise_r>
 80187ce:	bf00      	nop
 80187d0:	20000200 	.word	0x20000200

080187d4 <_kill_r>:
 80187d4:	b538      	push	{r3, r4, r5, lr}
 80187d6:	2300      	movs	r3, #0
 80187d8:	4d06      	ldr	r5, [pc, #24]	; (80187f4 <_kill_r+0x20>)
 80187da:	4604      	mov	r4, r0
 80187dc:	4608      	mov	r0, r1
 80187de:	4611      	mov	r1, r2
 80187e0:	602b      	str	r3, [r5, #0]
 80187e2:	f7ec fe53 	bl	800548c <_kill>
 80187e6:	1c43      	adds	r3, r0, #1
 80187e8:	d102      	bne.n	80187f0 <_kill_r+0x1c>
 80187ea:	682b      	ldr	r3, [r5, #0]
 80187ec:	b103      	cbz	r3, 80187f0 <_kill_r+0x1c>
 80187ee:	6023      	str	r3, [r4, #0]
 80187f0:	bd38      	pop	{r3, r4, r5, pc}
 80187f2:	bf00      	nop
 80187f4:	20004a08 	.word	0x20004a08

080187f8 <_getpid_r>:
 80187f8:	f7ec be40 	b.w	800547c <_getpid>

080187fc <_malloc_usable_size_r>:
 80187fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018800:	1f18      	subs	r0, r3, #4
 8018802:	2b00      	cmp	r3, #0
 8018804:	bfbc      	itt	lt
 8018806:	580b      	ldrlt	r3, [r1, r0]
 8018808:	18c0      	addlt	r0, r0, r3
 801880a:	4770      	bx	lr

0801880c <_init>:
 801880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801880e:	bf00      	nop
 8018810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018812:	bc08      	pop	{r3}
 8018814:	469e      	mov	lr, r3
 8018816:	4770      	bx	lr

08018818 <_fini>:
 8018818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801881a:	bf00      	nop
 801881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801881e:	bc08      	pop	{r3}
 8018820:	469e      	mov	lr, r3
 8018822:	4770      	bx	lr
