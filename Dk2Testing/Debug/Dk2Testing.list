
Dk2Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dac  08000278  08000278  00001278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c4  08017028  08017028  00018028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080180ec  080180ec  0001a370  2**0
                  CONTENTS
  4 .ARM          00000008  080180ec  080180ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080180f4  080180f4  0001a370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080180f4  080180f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080180f8  080180f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  080180fc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004198  20000370  0801846c  0001a370  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20004508  0801846c  0001a508  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001a370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000338d7  00000000  00000000  0001a3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a16  00000000  00000000  0004dc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b88  00000000  00000000  00053698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021f3  00000000  00000000  00056220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00049553  00000000  00000000  00058413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037d06  00000000  00000000  000a1966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bee79  00000000  00000000  000d966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002984e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d178  00000000  00000000  00298528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  002a56a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000278 <__do_global_dtors_aux>:
 8000278:	b510      	push	{r4, lr}
 800027a:	4c05      	ldr	r4, [pc, #20]	@ (8000290 <__do_global_dtors_aux+0x18>)
 800027c:	7823      	ldrb	r3, [r4, #0]
 800027e:	b933      	cbnz	r3, 800028e <__do_global_dtors_aux+0x16>
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x1c>)
 8000282:	b113      	cbz	r3, 800028a <__do_global_dtors_aux+0x12>
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <__do_global_dtors_aux+0x20>)
 8000286:	f3af 8000 	nop.w
 800028a:	2301      	movs	r3, #1
 800028c:	7023      	strb	r3, [r4, #0]
 800028e:	bd10      	pop	{r4, pc}
 8000290:	20000370 	.word	0x20000370
 8000294:	00000000 	.word	0x00000000
 8000298:	0801700c 	.word	0x0801700c

0800029c <frame_dummy>:
 800029c:	b508      	push	{r3, lr}
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <frame_dummy+0x10>)
 80002a0:	b11b      	cbz	r3, 80002aa <frame_dummy+0xe>
 80002a2:	4903      	ldr	r1, [pc, #12]	@ (80002b0 <frame_dummy+0x14>)
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <frame_dummy+0x18>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	00000000 	.word	0x00000000
 80002b0:	20000374 	.word	0x20000374
 80002b4:	0801700c 	.word	0x0801700c

080002b8 <strcmp>:
 80002b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c0:	2a01      	cmp	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	429a      	cmpcs	r2, r3
 80002c6:	d0f7      	beq.n	80002b8 <strcmp>
 80002c8:	1ad0      	subs	r0, r2, r3
 80002ca:	4770      	bx	lr

080002cc <strlen>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1fb      	bne.n	80002ce <strlen+0x2>
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	3801      	subs	r0, #1
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	@ 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_uldivmod>:
 8000c04:	b953      	cbnz	r3, 8000c1c <__aeabi_uldivmod+0x18>
 8000c06:	b94a      	cbnz	r2, 8000c1c <__aeabi_uldivmod+0x18>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	2800      	cmpeq	r0, #0
 8000c0e:	bf1c      	itt	ne
 8000c10:	f04f 31ff 	movne.w	r1, #4294967295
 8000c14:	f04f 30ff 	movne.w	r0, #4294967295
 8000c18:	f000 b97e 	b.w	8000f18 <__aeabi_idiv0>
 8000c1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c24:	f000 f806 	bl	8000c34 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr

08000c34 <__udivmoddi4>:
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c38:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d14d      	bne.n	8000cdc <__udivmoddi4+0xa8>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	460f      	mov	r7, r1
 8000c44:	4684      	mov	ip, r0
 8000c46:	4696      	mov	lr, r2
 8000c48:	fab2 f382 	clz	r3, r2
 8000c4c:	d960      	bls.n	8000d10 <__udivmoddi4+0xdc>
 8000c4e:	b14b      	cbz	r3, 8000c64 <__udivmoddi4+0x30>
 8000c50:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c68:	fa1f f48e 	uxth.w	r4, lr
 8000c6c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c70:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c74:	fb06 7711 	mls	r7, r6, r1, r7
 8000c78:	fb01 f004 	mul.w	r0, r1, r4
 8000c7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c84:	eb1e 0202 	adds.w	r2, lr, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x60>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 812d 	bhi.w	8000eee <__udivmoddi4+0x2ba>
 8000c94:	4639      	mov	r1, r7
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fa1f fc8c 	uxth.w	ip, ip
 8000c9c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000ca0:	fb06 2210 	mls	r2, r6, r0, r2
 8000ca4:	fb00 f404 	mul.w	r4, r0, r4
 8000ca8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cac:	4564      	cmp	r4, ip
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x8e>
 8000cb0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x8c>
 8000cba:	4564      	cmp	r4, ip
 8000cbc:	f200 811a 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc6:	ebac 0c04 	sub.w	ip, ip, r4
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b125      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cce:	fa2c f303 	lsr.w	r3, ip, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d905      	bls.n	8000cec <__udivmoddi4+0xb8>
 8000ce0:	b10d      	cbz	r5, 8000ce6 <__udivmoddi4+0xb2>
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	e7f5      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000cec:	fab3 f183 	clz	r1, r3
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d14d      	bne.n	8000d90 <__udivmoddi4+0x15c>
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	f0c0 80f2 	bcc.w	8000ede <__udivmoddi4+0x2aa>
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f080 80ef 	bcs.w	8000ede <__udivmoddi4+0x2aa>
 8000d00:	4606      	mov	r6, r0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4608      	mov	r0, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e6      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d0a:	e9c5 6300 	strd	r6, r3, [r5]
 8000d0e:	e7e3      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 80a2 	bne.w	8000e5a <__udivmoddi4+0x226>
 8000d16:	1a8a      	subs	r2, r1, r2
 8000d18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d1c:	fa1f f68e 	uxth.w	r6, lr
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d26:	fb07 2014 	mls	r0, r7, r4, r2
 8000d2a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb06 f004 	mul.w	r0, r6, r4
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d90f      	bls.n	8000d5a <__udivmoddi4+0x126>
 8000d3a:	eb1e 0202 	adds.w	r2, lr, r2
 8000d3e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0901 	movcs.w	r9, #1
 8000d48:	f04f 0900 	movcc.w	r9, #0
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d903      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d50:	f1b9 0f00 	cmp.w	r9, #0
 8000d54:	f000 80c8 	beq.w	8000ee8 <__udivmoddi4+0x2b4>
 8000d58:	4644      	mov	r4, r8
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	fa1f fc8c 	uxth.w	ip, ip
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	fb00 f606 	mul.w	r6, r0, r6
 8000d6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d70:	4566      	cmp	r6, ip
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x152>
 8000d74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x150>
 8000d7e:	4566      	cmp	r6, ip
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d84:	4610      	mov	r0, r2
 8000d86:	ebac 0c06 	sub.w	ip, ip, r6
 8000d8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d8e:	e79d      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da2:	40f4      	lsrs	r4, r6
 8000da4:	408a      	lsls	r2, r1
 8000da6:	431f      	orrs	r7, r3
 8000da8:	ea4e 030c 	orr.w	r3, lr, ip
 8000dac:	fa00 fe01 	lsl.w	lr, r0, r1
 8000db0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dc0:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc8:	fb00 f90c 	mul.w	r9, r0, ip
 8000dcc:	45a1      	cmp	r9, r4
 8000dce:	d90e      	bls.n	8000dee <__udivmoddi4+0x1ba>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0b01 	movcs.w	fp, #1
 8000ddc:	f04f 0b00 	movcc.w	fp, #0
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000de4:	f1bb 0f00 	cmp.w	fp, #0
 8000de8:	f000 8093 	beq.w	8000f12 <__udivmoddi4+0x2de>
 8000dec:	4650      	mov	r0, sl
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dfa:	fb08 4413 	mls	r4, r8, r3, r4
 8000dfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d906      	bls.n	8000e18 <__udivmoddi4+0x1e4>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e10:	d201      	bcs.n	8000e16 <__udivmoddi4+0x1e2>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d87a      	bhi.n	8000f0c <__udivmoddi4+0x2d8>
 8000e16:	4643      	mov	r3, r8
 8000e18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	fba0 9802 	umull	r9, r8, r0, r2
 8000e24:	4544      	cmp	r4, r8
 8000e26:	46cc      	mov	ip, r9
 8000e28:	4643      	mov	r3, r8
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0x1fe>
 8000e2c:	d106      	bne.n	8000e3c <__udivmoddi4+0x208>
 8000e2e:	45ce      	cmp	lr, r9
 8000e30:	d204      	bcs.n	8000e3c <__udivmoddi4+0x208>
 8000e32:	3801      	subs	r0, #1
 8000e34:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e38:	eb68 0307 	sbc.w	r3, r8, r7
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x222>
 8000e3e:	ebbe 020c 	subs.w	r2, lr, ip
 8000e42:	eb64 0403 	sbc.w	r4, r4, r3
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	40cc      	lsrs	r4, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e73e      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000e5a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e5e:	f1c3 0120 	rsb	r1, r3, #32
 8000e62:	fa04 f203 	lsl.w	r2, r4, r3
 8000e66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e6a:	40cc      	lsrs	r4, r1
 8000e6c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e70:	fa20 f101 	lsr.w	r1, r0, r1
 8000e74:	fa1f f68e 	uxth.w	r6, lr
 8000e78:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	fb07 4410 	mls	r4, r7, r0, r4
 8000e82:	0c11      	lsrs	r1, r2, #16
 8000e84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e88:	fb00 f406 	mul.w	r4, r0, r6
 8000e8c:	428c      	cmp	r4, r1
 8000e8e:	d90e      	bls.n	8000eae <__udivmoddi4+0x27a>
 8000e90:	eb1e 0101 	adds.w	r1, lr, r1
 8000e94:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e98:	bf2c      	ite	cs
 8000e9a:	f04f 0901 	movcs.w	r9, #1
 8000e9e:	f04f 0900 	movcc.w	r9, #0
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	d902      	bls.n	8000eac <__udivmoddi4+0x278>
 8000ea6:	f1b9 0f00 	cmp.w	r9, #0
 8000eaa:	d02c      	beq.n	8000f06 <__udivmoddi4+0x2d2>
 8000eac:	4640      	mov	r0, r8
 8000eae:	1b09      	subs	r1, r1, r4
 8000eb0:	b292      	uxth	r2, r2
 8000eb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000eb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ebe:	fb04 f106 	mul.w	r1, r4, r6
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x2a2>
 8000ec6:	eb1e 0202 	adds.w	r2, lr, r2
 8000eca:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ece:	d201      	bcs.n	8000ed4 <__udivmoddi4+0x2a0>
 8000ed0:	4291      	cmp	r1, r2
 8000ed2:	d815      	bhi.n	8000f00 <__udivmoddi4+0x2cc>
 8000ed4:	4644      	mov	r4, r8
 8000ed6:	1a52      	subs	r2, r2, r1
 8000ed8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000edc:	e721      	b.n	8000d22 <__udivmoddi4+0xee>
 8000ede:	1a86      	subs	r6, r0, r2
 8000ee0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	e70e      	b.n	8000d06 <__udivmoddi4+0xd2>
 8000ee8:	3c02      	subs	r4, #2
 8000eea:	4472      	add	r2, lr
 8000eec:	e735      	b.n	8000d5a <__udivmoddi4+0x126>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4472      	add	r2, lr
 8000ef2:	e6d0      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ef4:	44f4      	add	ip, lr
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	e6e3      	b.n	8000cc2 <__udivmoddi4+0x8e>
 8000efa:	44f4      	add	ip, lr
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x152>
 8000f00:	3c02      	subs	r4, #2
 8000f02:	4472      	add	r2, lr
 8000f04:	e7e7      	b.n	8000ed6 <__udivmoddi4+0x2a2>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4471      	add	r1, lr
 8000f0a:	e7d0      	b.n	8000eae <__udivmoddi4+0x27a>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e782      	b.n	8000e18 <__udivmoddi4+0x1e4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	e76a      	b.n	8000dee <__udivmoddi4+0x1ba>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__io_putchar>:
//
// @param ch character to write to stdout
// @return character
//
int __io_putchar(int ch)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    char data = (char)ch;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]

    // Critical section begin.
    bspInterruptEnable(false);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f9d0 	bl	80012d0 <bspInterruptEnable>

    // Write to ring buffer.
    ringWrite(bsp()->hStdout, &data, sizeof(data));
 8000f30:	f000 f842 	bl	8000fb8 <bsp>
 8000f34:	4603      	mov	r3, r0
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	f107 010f 	add.w	r1, r7, #15
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 ff5a 	bl	8002df8 <ringWrite>

    // Critical section end.
    bspInterruptEnable(true);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f9c3 	bl	80012d0 <bspInterruptEnable>

    return ch;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_UART_RxCpltCallback>:
//
// @param pUart pointer to UART instance
// @return none
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pUart)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pUart);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2d8      	uxtb	r0, r3
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_UART_RxCpltCallback+0x58>)
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f6e:	223b      	movs	r2, #59	@ 0x3b
 8000f70:	4910      	ldr	r1, [pc, #64]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x60>)
 8000f72:	f000 fb61 	bl	8001638 <logAssert>

    // Write character to ring.
    ringWrite(bsp()->hStdin, &bsp()->stdRx, sizeof(bsp()->stdRx));
 8000f76:	f000 f81f 	bl	8000fb8 <bsp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6a1c      	ldr	r4, [r3, #32]
 8000f7e:	f000 f81b 	bl	8000fb8 <bsp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	331c      	adds	r3, #28
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f001 ff34 	bl	8002df8 <ringWrite>

    // Receive character in interrupt mode.
    HAL_UART_Receive_IT(pUart, (uint8_t*)&bsp()->stdRx, sizeof(bsp()->stdRx));
 8000f90:	f000 f812 	bl	8000fb8 <bsp>
 8000f94:	4603      	mov	r3, r0
 8000f96:	331c      	adds	r3, #28
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f010 fea3 	bl	8011ce8 <HAL_UART_Receive_IT>
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0801703c 	.word	0x0801703c
 8000fb0:	08017ab8 	.word	0x08017ab8
 8000fb4:	08017028 	.word	0x08017028

08000fb8 <bsp>:
// @brief Get the BSP.
//
// @return pointer to BSP structure
//
inline trBsp* bsp(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
    // Validate BSP pointer.
    //ASSERT(NULL != gprBsp);

    return gprBsp;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <bsp+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000038c 	.word	0x2000038c

08000fd0 <bspConsoleDrain>:
// @brief Drain console stdout buffer.
//
// @return void
//
void bspConsoleDrain(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
    char ch;

    // Try to drain a character from the log.
    if (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8000fd6:	f7ff ffef 	bl	8000fb8 <bsp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	1df9      	adds	r1, r7, #7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 ff58 	bl	8002e98 <ringRead>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <bspConsoleDrain+0x26>
    {
        bspConsoleWrite(ch);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f853 	bl	800109c <bspConsoleWrite>
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <bspConsoleEmpty>:
// @brief Determine if console stdin is empty.
//
// @return true = empty, false = not empty
//
bool bspConsoleEmpty(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
    return ringEmpty(bsp()->hStdin);
 8001002:	f7ff ffd9 	bl	8000fb8 <bsp>
 8001006:	4603      	mov	r3, r0
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fed2 	bl	8002db4 <ringEmpty>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}

08001016 <bspConsoleFlush>:
// @brief Flush console stdout buffer.
//
// @return void
//
void bspConsoleFlush(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
    char ch;

    // Drain character to stdout.
    while (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 800101c:	e003      	b.n	8001026 <bspConsoleFlush+0x10>
    {
        bspConsoleWrite(ch);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f83b 	bl	800109c <bspConsoleWrite>
    while (ringRead(bsp()->hStdout, &ch, sizeof(ch)) > 0)
 8001026:	f7ff ffc7 	bl	8000fb8 <bsp>
 800102a:	4603      	mov	r3, r0
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	1df9      	adds	r1, r7, #7
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 ff30 	bl	8002e98 <ringRead>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1ef      	bne.n	800101e <bspConsoleFlush+0x8>
    }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <bspConsoleRead>:
//
// @param pCh pointer to character
// @return true = read, false = not read
//
bool bspConsoleRead(char *pCh)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pCh);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2d8      	uxtb	r0, r3
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <bspConsoleRead+0x48>)
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <bspConsoleRead+0x4c>)
 8001062:	2285      	movs	r2, #133	@ 0x85
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <bspConsoleRead+0x50>)
 8001066:	f000 fae7 	bl	8001638 <logAssert>

    return (ringRead(bsp()->hStdin, pCh, sizeof(*pCh)) > 0) ? true : false;
 800106a:	f7ff ffa5 	bl	8000fb8 <bsp>
 800106e:	4603      	mov	r3, r0
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	2201      	movs	r2, #1
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f001 ff0e 	bl	8002e98 <ringRead>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0801704c 	.word	0x0801704c
 8001094:	08017ad0 	.word	0x08017ad0
 8001098:	08017028 	.word	0x08017028

0800109c <bspConsoleWrite>:
//
// @param ch character to write to UART
// @return character
//
void bspConsoleWrite(char ch)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(bsp()->pUart1, (const uint8_t*)&ch, sizeof(ch),
 80010a6:	f7ff ff87 	bl	8000fb8 <bsp>
 80010aa:	4603      	mov	r3, r0
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	1df9      	adds	r1, r7, #7
 80010b0:	230a      	movs	r3, #10
 80010b2:	2201      	movs	r2, #1
 80010b4:	f010 fd8a 	bl	8011bcc <HAL_UART_Transmit>
        BSP_UART_TIMEOUT);
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <bspCycleCounter>:
// @brief Read cycle counter value.
//
// @return counter value
//
inline uint32_t bspCycleCounter(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <bspCycleCounter+0x14>)
 80010c6:	685b      	ldr	r3, [r3, #4]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e0001000 	.word	0xe0001000

080010d8 <bspCycleCounterFrequency>:
// @brief Retrieve cycle counter frequency.
//
// @return frequency
//
inline uint32_t bspCycleCounterFrequency(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    return BSP_CPU_CLOCK_FREQUENCY;
 80010dc:	4b02      	ldr	r3, [pc, #8]	@ (80010e8 <bspCycleCounterFrequency+0x10>)
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	07a12000 	.word	0x07a12000

080010ec <bspMillisecondDelay>:
//
// @param milliseconds number of milliseconds to delay execution
// @return none
//
inline void bspMillisecondDelay(uint32_t milliseconds)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    HAL_Delay(milliseconds);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f004 fd0b 	bl	8005b10 <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <bspI2cRead>:
// @param pBuffer pointer to data buffer
// @param length size of data buffer in bytes
// @return true = success, false = timeout
//
bool bspI2cRead(uint8_t address, uint8_t *pBuffer, uint16_t length)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pBuffer);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf14      	ite	ne
 800111a:	2301      	movne	r3, #1
 800111c:	2300      	moveq	r3, #0
 800111e:	b2d8      	uxtb	r0, r3
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <bspI2cRead+0x70>)
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <bspI2cRead+0x74>)
 8001126:	22e0      	movs	r2, #224	@ 0xe0
 8001128:	4914      	ldr	r1, [pc, #80]	@ (800117c <bspI2cRead+0x78>)
 800112a:	f000 fa85 	bl	8001638 <logAssert>
    ASSERT(length > 0);
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2d8      	uxtb	r0, r3
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <bspI2cRead+0x7c>)
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <bspI2cRead+0x74>)
 8001140:	22e1      	movs	r2, #225	@ 0xe1
 8001142:	490e      	ldr	r1, [pc, #56]	@ (800117c <bspI2cRead+0x78>)
 8001144:	f000 fa78 	bl	8001638 <logAssert>

    // Send data.
    if (HAL_OK != HAL_I2C_Master_Receive(bsp()->pI2c1, address,
 8001148:	f7ff ff36 	bl	8000fb8 <bsp>
 800114c:	4603      	mov	r3, r0
 800114e:	6858      	ldr	r0, [r3, #4]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b299      	uxth	r1, r3
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	2264      	movs	r2, #100	@ 0x64
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	f008 ffb6 	bl	800a0cc <HAL_I2C_Master_Receive>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <bspI2cRead+0x66>
        pBuffer, length, BSP_I2C_TIMEOUT))
    {
        return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <bspI2cRead+0x68>
    }

    return true;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08017058 	.word	0x08017058
 8001178:	08017ae0 	.word	0x08017ae0
 800117c:	08017028 	.word	0x08017028
 8001180:	08017068 	.word	0x08017068

08001184 <bspI2cWrite>:
// @param pBuffer pointer to data buffer
// @param length size of data buffer in bytes
// @return true = success, false = timeout
//
bool bspI2cWrite(uint8_t address, uint8_t *pBuffer, uint16_t length)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != pBuffer);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <bspI2cWrite+0x74>)
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <bspI2cWrite+0x78>)
 80011a6:	f240 122f 	movw	r2, #303	@ 0x12f
 80011aa:	4915      	ldr	r1, [pc, #84]	@ (8001200 <bspI2cWrite+0x7c>)
 80011ac:	f000 fa44 	bl	8001638 <logAssert>
    ASSERT(length > 0);
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <bspI2cWrite+0x80>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <bspI2cWrite+0x78>)
 80011c2:	f44f 7298 	mov.w	r2, #304	@ 0x130
 80011c6:	490e      	ldr	r1, [pc, #56]	@ (8001200 <bspI2cWrite+0x7c>)
 80011c8:	f000 fa36 	bl	8001638 <logAssert>

    // Send data.
    if (HAL_OK != HAL_I2C_Master_Transmit(bsp()->pI2c1, address,
 80011cc:	f7ff fef4 	bl	8000fb8 <bsp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	6858      	ldr	r0, [r3, #4]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	b299      	uxth	r1, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	2264      	movs	r2, #100	@ 0x64
 80011dc:	9200      	str	r2, [sp, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	f008 fe80 	bl	8009ee4 <HAL_I2C_Master_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <bspI2cWrite+0x6a>
        pBuffer, length, BSP_I2C_TIMEOUT))
    {
        return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <bspI2cWrite+0x6c>
    }

    return true;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08017058 	.word	0x08017058
 80011fc:	08017aec 	.word	0x08017aec
 8001200:	08017028 	.word	0x08017028
 8001204:	08017068 	.word	0x08017068

08001208 <bspInit>:
//
// @param prBsp pointer to BSP structure
// @return true = success, false = failure
//
bool bspInit(trBsp *prBsp)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
	// Validate argument[s].
	ASSERT(NULL != prBsp);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf14      	ite	ne
 8001216:	2301      	movne	r3, #1
 8001218:	2300      	moveq	r3, #0
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <bspInit+0xa4>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <bspInit+0xa8>)
 8001222:	f240 1245 	movw	r2, #325	@ 0x145
 8001226:	4923      	ldr	r1, [pc, #140]	@ (80012b4 <bspInit+0xac>)
 8001228:	f000 fa06 	bl	8001638 <logAssert>

	// Set local BSP structure pointer.
	gprBsp = prBsp;
 800122c:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <bspInit+0xb0>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]

	// Disable I/O buffering.
	setvbuf(stdout, NULL, _IONBF, 0);
 8001232:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <bspInit+0xb4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	2300      	movs	r3, #0
 800123a:	2202      	movs	r2, #2
 800123c:	2100      	movs	r1, #0
 800123e:	f013 fbeb 	bl	8014a18 <setvbuf>

	// Enable trace and cycle counter.
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <bspInit+0xb8>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <bspInit+0xb8>)
 8001248:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800124c:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT       = 0;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <bspInit+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
	DWT->CTRL        |= DWT_CTRL_CYCCNTENA_Msk;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <bspInit+0xbc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <bspInit+0xbc>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

    // Create ring buffers.
    bsp()->hStdin   = ringInit(gStdinBuffer, sizeof(gStdinBuffer));
 8001260:	f7ff feaa 	bl	8000fb8 <bsp>
 8001264:	4604      	mov	r4, r0
 8001266:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126a:	4817      	ldr	r0, [pc, #92]	@ (80012c8 <bspInit+0xc0>)
 800126c:	f001 fd64 	bl	8002d38 <ringInit>
 8001270:	4603      	mov	r3, r0
 8001272:	6223      	str	r3, [r4, #32]
    bsp()->hStdout  = ringInit(gStdoutBuffer, sizeof(gStdoutBuffer));
 8001274:	f7ff fea0 	bl	8000fb8 <bsp>
 8001278:	4604      	mov	r4, r0
 800127a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800127e:	4813      	ldr	r0, [pc, #76]	@ (80012cc <bspInit+0xc4>)
 8001280:	f001 fd5a 	bl	8002d38 <ringInit>
 8001284:	4603      	mov	r3, r0
 8001286:	6263      	str	r3, [r4, #36]	@ 0x24

	// Receive character in interrupt mode.
	HAL_UART_Receive_IT(bsp()->pUart1, (uint8_t*)&bsp()->stdRx,
 8001288:	f7ff fe96 	bl	8000fb8 <bsp>
 800128c:	4603      	mov	r3, r0
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	f7ff fe92 	bl	8000fb8 <bsp>
 8001294:	4603      	mov	r3, r0
 8001296:	331c      	adds	r3, #28
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f010 fd23 	bl	8011ce8 <HAL_UART_Receive_IT>
        sizeof(bsp()->stdRx));

	return true;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	08017074 	.word	0x08017074
 80012b0:	08017af8 	.word	0x08017af8
 80012b4:	08017028 	.word	0x08017028
 80012b8:	2000038c 	.word	0x2000038c
 80012bc:	200001b4 	.word	0x200001b4
 80012c0:	e000edf0 	.word	0xe000edf0
 80012c4:	e0001000 	.word	0xe0001000
 80012c8:	20000390 	.word	0x20000390
 80012cc:	20000790 	.word	0x20000790

080012d0 <bspInterruptEnable>:
//
// @param state true = enable, false = disable
// @return none
//
void bspInterruptEnable(bool state)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	// Evaluate state.
	if (state)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <bspInterruptEnable+0x14>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80012e0:	b662      	cpsie	i
}
 80012e2:	e001      	b.n	80012e8 <bspInterruptEnable+0x18>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
	}
	else
	{
		__disable_irq();
	}
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <bspPrintf>:
// @param pFormat pointer to null terminated format string
// @param ... variable arguments
// @return number of characters printed
//
int bspPrintf(const char *pFormat, ...)
{
 80012f4:	b40f      	push	{r0, r1, r2, r3}
 80012f6:	b590      	push	{r4, r7, lr}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
    va_list     args;
    static char buffer[BSP_PRINTF_BUFFER_SIZE];

    // Print formatted string to buffer.
    //lint -save -e530
    va_start(args, pFormat);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	603b      	str	r3, [r7, #0]
    //lint -restore
    length = vsnprintf(buffer, sizeof(buffer), pFormat, args);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	2150      	movs	r1, #80	@ 0x50
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <bspPrintf+0x54>)
 800130a:	f013 fcdb 	bl	8014cc4 <vsniprintf>
 800130e:	6078      	str	r0, [r7, #4]
    va_end(args);

    // Critical section begin.
    bspInterruptEnable(false);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff ffdd 	bl	80012d0 <bspInterruptEnable>

    // Write to ring buffer.
    ringWrite(bsp()->hStdout, buffer, strlen(buffer));
 8001316:	f7ff fe4f 	bl	8000fb8 <bsp>
 800131a:	4603      	mov	r3, r0
 800131c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <bspPrintf+0x54>)
 8001320:	f7fe ffd4 	bl	80002cc <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <bspPrintf+0x54>)
 800132a:	4620      	mov	r0, r4
 800132c:	f001 fd64 	bl	8002df8 <ringWrite>

    // Critical section end.
    bspInterruptEnable(true);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff ffcd 	bl	80012d0 <bspInterruptEnable>

    return length;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001342:	b004      	add	sp, #16
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20001790 	.word	0x20001790

0800134c <bspReset>:
// @brief Reset the board.
//
// @return none
//
void bspReset(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    // Reset MCU.
    HAL_NVIC_SystemReset();
 8001350:	f006 fc43 	bl	8007bda <HAL_NVIC_SystemReset>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <bspTick>:
// @brief Handle tick.
//
// @return void
//
void bspTick(void)
{
 8001358:	b598      	push	{r3, r4, r7, lr}
 800135a:	af00      	add	r7, sp, #0
	// Validate BSP structure.
	if (NULL != bsp())
 800135c:	f7ff fe2c 	bl	8000fb8 <bsp>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00f      	beq.n	8001386 <bspTick+0x2e>
	{
		// Validate callback.
		if (NULL != bsp()->pTickHandler)
 8001366:	f7ff fe27 	bl	8000fb8 <bsp>
 800136a:	4603      	mov	r3, r0
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <bspTick+0x2e>
		{
			// Invoke callback.
		    bsp()->pTickHandler(bsp()->pTickContext);
 8001372:	f7ff fe21 	bl	8000fb8 <bsp>
 8001376:	4603      	mov	r3, r0
 8001378:	695c      	ldr	r4, [r3, #20]
 800137a:	f7ff fe1d 	bl	8000fb8 <bsp>
 800137e:	4603      	mov	r3, r0
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4618      	mov	r0, r3
 8001384:	47a0      	blx	r4
		}
	}
}
 8001386:	bf00      	nop
 8001388:	bd98      	pop	{r3, r4, r7, pc}
	...

0800138c <bspTickHandler>:
// @param pCallback pointer to callback function
// @param pContext optional pointer to callback context
// @return character
//
void bspTickHandler(tpBspTickHandler pHandler, void *pContext)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	// Validate argument[s].
	ASSERT(NULL != pHandler);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2d8      	uxtb	r0, r3
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <bspTickHandler+0x50>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <bspTickHandler+0x54>)
 80013a8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80013ac:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <bspTickHandler+0x58>)
 80013ae:	f000 f943 	bl	8001638 <logAssert>

	// Disable interrupts.
	bspInterruptEnable(false);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff8c 	bl	80012d0 <bspInterruptEnable>

	// Assign callback.
	bsp()->pTickHandler = pHandler;
 80013b8:	f7ff fdfe 	bl	8000fb8 <bsp>
 80013bc:	4602      	mov	r2, r0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6153      	str	r3, [r2, #20]
	bsp()->pTickContext = pContext;
 80013c2:	f7ff fdf9 	bl	8000fb8 <bsp>
 80013c6:	4602      	mov	r2, r0
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6193      	str	r3, [r2, #24]

	// Enable interrupts.
	bspInterruptEnable(true);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff ff7f 	bl	80012d0 <bspInterruptEnable>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08017084 	.word	0x08017084
 80013e0:	08017b00 	.word	0x08017b00
 80013e4:	08017028 	.word	0x08017028

080013e8 <bspHeartbeatLed>:
//
// @param state true = on, false = off
// @return character
//
void bspHeartbeatLed(bool state)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, (state) ?
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	461a      	mov	r2, r3
 80013f6:	2104      	movs	r1, #4
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <bspHeartbeatLed+0x20>)
 80013fa:	f008 fc83 	bl	8009d04 <HAL_GPIO_WritePin>
        GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	42020c00 	.word	0x42020c00

0800140c <errorString>:
//
// @param eError enumerated error value
// @return enumerated error code
//
const char * errorString(teError eError)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
    // Validate argument[s].
    ASSERT(eError < DIM(grError));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b27      	cmp	r3, #39	@ 0x27
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2d8      	uxtb	r0, r3
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <errorString+0x58>)
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <errorString+0x5c>)
 8001428:	2253      	movs	r2, #83	@ 0x53
 800142a:	4910      	ldr	r1, [pc, #64]	@ (800146c <errorString+0x60>)
 800142c:	f000 f904 	bl	8001638 <logAssert>
    ASSERT(eError == grError[eError].eError);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <errorString+0x64>)
 8001434:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	429a      	cmp	r2, r3
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <errorString+0x68>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <errorString+0x5c>)
 800144a:	2254      	movs	r2, #84	@ 0x54
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <errorString+0x60>)
 800144e:	f000 f8f3 	bl	8001638 <logAssert>

    return grError[eError].pDescription;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <errorString+0x64>)
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08017224 	.word	0x08017224
 8001468:	08017b10 	.word	0x08017b10
 800146c:	08017210 	.word	0x08017210
 8001470:	20000000 	.word	0x20000000
 8001474:	0801723c 	.word	0x0801723c

08001478 <logFilename>:
//
// @param pFilename pointer to null terminated string
// @return pointer to null terminated string
//
static char * logFilename(const char *pFilename)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
    char *pString;

    // Validate argument[s].
    ASSERT(NULL != pFilename);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <logFilename+0x58>)
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <logFilename+0x5c>)
 8001492:	2223      	movs	r2, #35	@ 0x23
 8001494:	4910      	ldr	r1, [pc, #64]	@ (80014d8 <logFilename+0x60>)
 8001496:	f000 f8cf 	bl	8001638 <logAssert>

    // Scan for last forward slash if present.
    pString = (char*)pFilename + strlen(pFilename);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7fe ff16 	bl	80002cc <strlen>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
    while (pString != pFilename)
 80014a8:	e009      	b.n	80014be <logFilename+0x46>
    {
        // Check for forward slash.
        if ('/' == *(pString - 1))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80014b2:	d101      	bne.n	80014b8 <logFilename+0x40>
        {
            return pString;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	e007      	b.n	80014c8 <logFilename+0x50>
        }

        // Move to previous character.
        pString--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
    while (pString != pFilename)
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d1f1      	bne.n	80014aa <logFilename+0x32>
    }

    return pString;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08017284 	.word	0x08017284
 80014d4:	08017b1c 	.word	0x08017b1c
 80014d8:	08017270 	.word	0x08017270

080014dc <logPrefix>:
// @return none
//
static void logPrefix(teLogLevel eLogLevel, const char *pFilename,
			   	      const uint16_t line, const char *pFunction,
					  char *pBuffer, uint16_t length)
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b093      	sub	sp, #76	@ 0x4c
 80014e0:	af08      	add	r7, sp, #32
 80014e2:	61b9      	str	r1, [r7, #24]
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4603      	mov	r3, r0
 80014e8:	77fb      	strb	r3, [r7, #31]
 80014ea:	4613      	mov	r3, r2
 80014ec:	83bb      	strh	r3, [r7, #28]
	trTimerTimestamp   rTimestamp;
    static const char *pPrefix[] = { "NONE", "FATAL", "ASSERT", "ERR",
    								 "WARN", "INFO", "DBG", "MAX" };

    // Validate arguments.
    ASSERT(NULL != pFilename);
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2d8      	uxtb	r0, r3
 80014fa:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <logPrefix+0x118>)
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4b3e      	ldr	r3, [pc, #248]	@ (80015f8 <logPrefix+0x11c>)
 8001500:	2249      	movs	r2, #73	@ 0x49
 8001502:	493e      	ldr	r1, [pc, #248]	@ (80015fc <logPrefix+0x120>)
 8001504:	f000 f898 	bl	8001638 <logAssert>
    ASSERT(line > 0);
 8001508:	8bbb      	ldrh	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2d8      	uxtb	r0, r3
 8001514:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <logPrefix+0x124>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <logPrefix+0x11c>)
 800151a:	224a      	movs	r2, #74	@ 0x4a
 800151c:	4937      	ldr	r1, [pc, #220]	@ (80015fc <logPrefix+0x120>)
 800151e:	f000 f88b 	bl	8001638 <logAssert>
    ASSERT(NULL != pFunction);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf14      	ite	ne
 8001528:	2301      	movne	r3, #1
 800152a:	2300      	moveq	r3, #0
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <logPrefix+0x128>)
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <logPrefix+0x11c>)
 8001534:	224b      	movs	r2, #75	@ 0x4b
 8001536:	4931      	ldr	r1, [pc, #196]	@ (80015fc <logPrefix+0x120>)
 8001538:	f000 f87e 	bl	8001638 <logAssert>
    ASSERT(eLogLevel <= eLogLevelMax);
 800153c:	7ffb      	ldrb	r3, [r7, #31]
 800153e:	2b07      	cmp	r3, #7
 8001540:	bf94      	ite	ls
 8001542:	2301      	movls	r3, #1
 8001544:	2300      	movhi	r3, #0
 8001546:	b2d8      	uxtb	r0, r3
 8001548:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <logPrefix+0x12c>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <logPrefix+0x11c>)
 800154e:	224c      	movs	r2, #76	@ 0x4c
 8001550:	492a      	ldr	r1, [pc, #168]	@ (80015fc <logPrefix+0x120>)
 8001552:	f000 f871 	bl	8001638 <logAssert>
    ASSERT(NULL != pBuffer);
 8001556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <logPrefix+0x130>)
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <logPrefix+0x11c>)
 8001568:	224d      	movs	r2, #77	@ 0x4d
 800156a:	4924      	ldr	r1, [pc, #144]	@ (80015fc <logPrefix+0x120>)
 800156c:	f000 f864 	bl	8001638 <logAssert>
    ASSERT(length > 0);
 8001570:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <logPrefix+0x134>)
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <logPrefix+0x11c>)
 8001584:	224e      	movs	r2, #78	@ 0x4e
 8001586:	491d      	ldr	r1, [pc, #116]	@ (80015fc <logPrefix+0x120>)
 8001588:	f000 f856 	bl	8001638 <logAssert>

    // Format and log string.
    timerTimestamp(&rTimestamp);
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fff9 	bl	8005588 <timerTimestamp>
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 8001596:	f8b7 4044 	ldrh.w	r4, [r7, #68]	@ 0x44
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	4a1d      	ldr	r2, [pc, #116]	@ (8001614 <logPrefix+0x138>)
 800159e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015a2:	8c3b      	ldrh	r3, [r7, #32]
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015a4:	461e      	mov	r6, r3
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015aa:	613b      	str	r3, [r7, #16]
        pPrefix[eLogLevel], rTimestamp.days, rTimestamp.hours, rTimestamp.minutes,
 80015ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015b0:	60fb      	str	r3, [r7, #12]
        rTimestamp.seconds, rTimestamp.milliseconds, logFilename(pFilename),
 80015b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015b6:	60bb      	str	r3, [r7, #8]
        rTimestamp.seconds, rTimestamp.milliseconds, logFilename(pFilename),
 80015b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
    snprintf(pBuffer, length, "%s[%d.%02u:%02u:%02u.%03u,%s,%u,%s]: ",
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	69b8      	ldr	r0, [r7, #24]
 80015be:	f7ff ff5b 	bl	8001478 <logFilename>
 80015c2:	4601      	mov	r1, r0
 80015c4:	8bbb      	ldrh	r3, [r7, #28]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	9207      	str	r2, [sp, #28]
 80015ca:	9306      	str	r3, [sp, #24]
 80015cc:	9105      	str	r1, [sp, #20]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	9204      	str	r2, [sp, #16]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	9203      	str	r2, [sp, #12]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9600      	str	r6, [sp, #0]
 80015e0:	462b      	mov	r3, r5
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <logPrefix+0x13c>)
 80015e4:	4621      	mov	r1, r4
 80015e6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80015e8:	f013 faca 	bl	8014b80 <sniprintf>
        line, pFunction);
}
 80015ec:	bf00      	nop
 80015ee:	372c      	adds	r7, #44	@ 0x2c
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f4:	08017284 	.word	0x08017284
 80015f8:	08017b28 	.word	0x08017b28
 80015fc:	08017270 	.word	0x08017270
 8001600:	08017298 	.word	0x08017298
 8001604:	080172a4 	.word	0x080172a4
 8001608:	080172b8 	.word	0x080172b8
 800160c:	080172d4 	.word	0x080172d4
 8001610:	080172e4 	.word	0x080172e4
 8001614:	20000144 	.word	0x20000144
 8001618:	080172f0 	.word	0x080172f0

0800161c <logInit>:
// @brief Initialize log.
//
// @return enumerated error code
//
teError logInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	// Initialize history buffer.
	memset(grLogErrorHistory, 0, sizeof(grLogErrorHistory));
 8001620:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001624:	2100      	movs	r1, #0
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <logInit+0x18>)
 8001628:	f013 fbee 	bl	8014e08 <memset>

	return eErrorNone;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200017e0 	.word	0x200017e0

08001638 <logAssert>:
// @return void
//
void logAssert(bool bIgnore, const char *pFilename,
    const uint16_t line, const char *pFunction,
    const char *pDescription)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af02      	add	r7, sp, #8
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	4613      	mov	r3, r2
 8001648:	81bb      	strh	r3, [r7, #12]
    bool state = true;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]

    // Check condition.
    if (!bIgnore)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d020      	beq.n	800169c <logAssert+0x64>
    {
        // Display location information.
    	logEntry(eLogLevelAssert, pFilename, line, pFunction, pDescription);
 800165a:	89ba      	ldrh	r2, [r7, #12]
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	2002      	movs	r0, #2
 8001666:	f000 f81d 	bl	80016a4 <logEntry>

        // Flush the console.
        bspConsoleFlush();
 800166a:	f7ff fcd4 	bl	8001016 <bspConsoleFlush>

        // Spin forever!
        for (;;)
        {
            // Set heartbeat LED to indicate fault.
            bspHeartbeatLed(state = !state);
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f083 0301 	eor.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	75fb      	strb	r3, [r7, #23]
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff feab 	bl	80013e8 <bspHeartbeatLed>

            // Wait for a bit.
            bspMillisecondDelay(BSP_FAULT_LED_FLASH_PERIOD);
 8001692:	2064      	movs	r0, #100	@ 0x64
 8001694:	f7ff fd2a 	bl	80010ec <bspMillisecondDelay>
            bspHeartbeatLed(state = !state);
 8001698:	bf00      	nop
 800169a:	e7e8      	b.n	800166e <logAssert+0x36>
        }
    }
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <logEntry>:
// @return void
//
void logEntry(teLogLevel eLogLevel, const char *pFilename,
    const uint16_t line, const char *pFunction,
    const char *pFormat, ...)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09c      	sub	sp, #112	@ 0x70
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	4613      	mov	r3, r2
 80016b4:	81bb      	strh	r3, [r7, #12]
    va_list args;
    char    buffer[LOG_LINE_LENGTH_MAX];

    // Filter log level.
    if (eLogLevel > geLogLevel)
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <logEntry+0xb4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d847      	bhi.n	8001750 <logEntry+0xac>
    {
        return;
    }

    // Validate argument[s].
    ASSERT(NULL != pFilename);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2d8      	uxtb	r0, r3
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <logEntry+0xb8>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <logEntry+0xbc>)
 80016d2:	22be      	movs	r2, #190	@ 0xbe
 80016d4:	4923      	ldr	r1, [pc, #140]	@ (8001764 <logEntry+0xc0>)
 80016d6:	f7ff ffaf 	bl	8001638 <logAssert>
    ASSERT(line > 0);
 80016da:	89bb      	ldrh	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2d8      	uxtb	r0, r3
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <logEntry+0xc4>)
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <logEntry+0xbc>)
 80016ec:	22bf      	movs	r2, #191	@ 0xbf
 80016ee:	491d      	ldr	r1, [pc, #116]	@ (8001764 <logEntry+0xc0>)
 80016f0:	f7ff ffa2 	bl	8001638 <logAssert>
    ASSERT(NULL != pFunction);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2d8      	uxtb	r0, r3
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <logEntry+0xc8>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <logEntry+0xbc>)
 8001706:	22c0      	movs	r2, #192	@ 0xc0
 8001708:	4916      	ldr	r1, [pc, #88]	@ (8001764 <logEntry+0xc0>)
 800170a:	f7ff ff95 	bl	8001638 <logAssert>

    // Print prefix information.
    logPrefix(eLogLevel, pFilename, line, pFunction, buffer, sizeof(buffer));
 800170e:	89ba      	ldrh	r2, [r7, #12]
 8001710:	7bf8      	ldrb	r0, [r7, #15]
 8001712:	2350      	movs	r3, #80	@ 0x50
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	f7ff fedc 	bl	80014dc <logPrefix>
    bspPrintf("\r\n%s", buffer);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4811      	ldr	r0, [pc, #68]	@ (8001770 <logEntry+0xcc>)
 800172c:	f7ff fde2 	bl	80012f4 <bspPrintf>

    // Print formatted string.
	//lint -save -e530
	va_start(args, pFormat);
 8001730:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001734:	667b      	str	r3, [r7, #100]	@ 0x64
	//lint -restore
	vsnprintf(buffer, sizeof(buffer), pFormat, args);
 8001736:	f107 0014 	add.w	r0, r7, #20
 800173a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800173c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800173e:	2150      	movs	r1, #80	@ 0x50
 8001740:	f013 fac0 	bl	8014cc4 <vsniprintf>
	va_end(args);
	bspPrintf(buffer);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fdd3 	bl	80012f4 <bspPrintf>
 800174e:	e000      	b.n	8001752 <logEntry+0xae>
        return;
 8001750:	bf00      	nop
}
 8001752:	3768      	adds	r7, #104	@ 0x68
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000140 	.word	0x20000140
 800175c:	08017284 	.word	0x08017284
 8001760:	08017b34 	.word	0x08017b34
 8001764:	08017270 	.word	0x08017270
 8001768:	08017298 	.word	0x08017298
 800176c:	080172a4 	.word	0x080172a4
 8001770:	08017318 	.word	0x08017318

08001774 <logError>:
// @param line source code line number
// @param pFunction pointer to function name string
// @return enumerated error code
teError logError(teError eError, const char *pFilename,
    const uint16_t line, const char *pFunction)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af02      	add	r7, sp, #8
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	4613      	mov	r3, r2
 8001784:	81bb      	strh	r3, [r7, #12]
    // Validate argument[s].
    ASSERT(NULL != pFilename);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2d8      	uxtb	r0, r3
 8001792:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <logError+0xd4>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <logError+0xd8>)
 8001798:	f240 1215 	movw	r2, #277	@ 0x115
 800179c:	492c      	ldr	r1, [pc, #176]	@ (8001850 <logError+0xdc>)
 800179e:	f7ff ff4b 	bl	8001638 <logAssert>
    ASSERT(NULL != pFunction);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <logError+0xe0>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4b26      	ldr	r3, [pc, #152]	@ (800184c <logError+0xd8>)
 80017b4:	f44f 728b 	mov.w	r2, #278	@ 0x116
 80017b8:	4925      	ldr	r1, [pc, #148]	@ (8001850 <logError+0xdc>)
 80017ba:	f7ff ff3d 	bl	8001638 <logAssert>

    // Advance head.
    gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <logError+0xe4>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <logError+0xe4>)
 80017ce:	801a      	strh	r2, [r3, #0]

    // Assign error entry.
    grLogErrorHistory[gLogErrorHistoryHead].eError = eError;
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <logError+0xe4>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4a21      	ldr	r2, [pc, #132]	@ (800185c <logError+0xe8>)
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	701a      	strb	r2, [r3, #0]
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <logError+0xe4>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4a19      	ldr	r2, [pc, #100]	@ (800185c <logError+0xe8>)
 80017f6:	4413      	add	r3, r2
 80017f8:	1c5c      	adds	r4, r3, #1
        logFilename(pFilename), sizeof(grLogErrorHistory[0].file) - 1);
 80017fa:	68b8      	ldr	r0, [r7, #8]
 80017fc:	f7ff fe3c 	bl	8001478 <logFilename>
 8001800:	4603      	mov	r3, r0
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 8001802:	221f      	movs	r2, #31
 8001804:	4619      	mov	r1, r3
 8001806:	4620      	mov	r0, r4
 8001808:	f013 fb19 	bl	8014e3e <strncpy>
    grLogErrorHistory[gLogErrorHistoryHead].line = line;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <logError+0xe4>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	89ba      	ldrh	r2, [r7, #12]
 8001814:	4911      	ldr	r1, [pc, #68]	@ (800185c <logError+0xe8>)
 8001816:	4603      	mov	r3, r0
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4403      	add	r3, r0
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3324      	adds	r3, #36	@ 0x24
 8001822:	601a      	str	r2, [r3, #0]

    // Issue log entry.
    logEntry(eLogLevelError, pFilename, line, pFunction, errorString(eError));
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdf0 	bl	800140c <errorString>
 800182c:	4603      	mov	r3, r0
 800182e:	89ba      	ldrh	r2, [r7, #12]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	2003      	movs	r0, #3
 8001838:	f7ff ff34 	bl	80016a4 <logEntry>

    return eErrorNone;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	08017284 	.word	0x08017284
 800184c:	08017b40 	.word	0x08017b40
 8001850:	08017270 	.word	0x08017270
 8001854:	080172a4 	.word	0x080172a4
 8001858:	20001920 	.word	0x20001920
 800185c:	200017e0 	.word	0x200017e0

08001860 <logFatal>:
//                  name
// @return none
//
void logFatal(teError eError, const char *pFilename,
    const uint16_t line, const char *pFunction)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af02      	add	r7, sp, #8
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	4613      	mov	r3, r2
 8001870:	81bb      	strh	r3, [r7, #12]
    bool state = true;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]

    // Advance head.
    gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <logFatal+0xc8>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <logFatal+0xc8>)
 8001886:	801a      	strh	r2, [r3, #0]

    // Assign error entry.
    grLogErrorHistory[gLogErrorHistoryHead].eError = eError;
 8001888:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <logFatal+0xc8>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	4a27      	ldr	r2, [pc, #156]	@ (800192c <logFatal+0xcc>)
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	701a      	strb	r2, [r3, #0]
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <logFatal+0xc8>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4a1f      	ldr	r2, [pc, #124]	@ (800192c <logFatal+0xcc>)
 80018ae:	4413      	add	r3, r2
 80018b0:	1c5c      	adds	r4, r3, #1
        logFilename(pFilename), sizeof(grLogErrorHistory[0].file) - 1);
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	f7ff fde0 	bl	8001478 <logFilename>
 80018b8:	4603      	mov	r3, r0
    strncpy(grLogErrorHistory[gLogErrorHistoryHead].file,
 80018ba:	221f      	movs	r2, #31
 80018bc:	4619      	mov	r1, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	f013 fabd 	bl	8014e3e <strncpy>
    grLogErrorHistory[gLogErrorHistoryHead].line = line;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <logFatal+0xc8>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	89ba      	ldrh	r2, [r7, #12]
 80018cc:	4917      	ldr	r1, [pc, #92]	@ (800192c <logFatal+0xcc>)
 80018ce:	4603      	mov	r3, r0
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4403      	add	r3, r0
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3324      	adds	r3, #36	@ 0x24
 80018da:	601a      	str	r2, [r3, #0]

    // Issue log entry.
    logEntry(eLogLevelFatal, pFilename, line, pFunction, errorString(eError));
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd94 	bl	800140c <errorString>
 80018e4:	4603      	mov	r3, r0
 80018e6:	89ba      	ldrh	r2, [r7, #12]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fed8 	bl	80016a4 <logEntry>

    // Flush the console.
    bspConsoleFlush();
 80018f4:	f7ff fb8f 	bl	8001016 <bspConsoleFlush>

    // Spin forever!
    for (;;)
    {
        // Set heartbeat LED to indicate fault.
        bspHeartbeatLed(state = !state);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	75fb      	strb	r3, [r7, #23]
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fd66 	bl	80013e8 <bspHeartbeatLed>

        // Wait for a bit.
        bspMillisecondDelay(BSP_FAULT_LED_FLASH_PERIOD);
 800191c:	2064      	movs	r0, #100	@ 0x64
 800191e:	f7ff fbe5 	bl	80010ec <bspMillisecondDelay>
        bspHeartbeatLed(state = !state);
 8001922:	bf00      	nop
 8001924:	e7e8      	b.n	80018f8 <logFatal+0x98>
 8001926:	bf00      	nop
 8001928:	20001920 	.word	0x20001920
 800192c:	200017e0 	.word	0x200017e0

08001930 <logErrorHistory>:
// @param pBuffer pointer to buffer
// @param length size of buffer in bytes
// @return true = content, false = empty
//
bool logErrorHistory(trLogError *prError)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af02      	add	r7, sp, #8
 8001936:	6078      	str	r0, [r7, #4]
	// Validate argument[s].
	ASSERT(NULL != prError);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2d8      	uxtb	r0, r3
 8001944:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <logErrorHistory+0x94>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <logErrorHistory+0x98>)
 800194a:	f44f 72ad 	mov.w	r2, #346	@ 0x15a
 800194e:	491f      	ldr	r1, [pc, #124]	@ (80019cc <logErrorHistory+0x9c>)
 8001950:	f7ff fe72 	bl	8001638 <logAssert>

	// Check content.
	if (eErrorNone != grLogErrorHistory[gLogErrorHistoryHead].eError)
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <logErrorHistory+0xa0>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <logErrorHistory+0xa4>)
 800195c:	460b      	mov	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d026      	beq.n	80019ba <logErrorHistory+0x8a>
	{
		// Copy and clear entry.
	    memcpy(prError, &grLogErrorHistory[gLogErrorHistoryHead],
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <logErrorHistory+0xa0>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <logErrorHistory+0xa4>)
 800197c:	4413      	add	r3, r2
 800197e:	2228      	movs	r2, #40	@ 0x28
 8001980:	4619      	mov	r1, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f013 fb4f 	bl	8015026 <memcpy>
            sizeof(*prError));
		memset(&grLogErrorHistory[gLogErrorHistoryHead], 0,
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <logErrorHistory+0xa0>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <logErrorHistory+0xa4>)
 8001998:	4413      	add	r3, r2
 800199a:	2228      	movs	r2, #40	@ 0x28
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f013 fa32 	bl	8014e08 <memset>
            sizeof(grLogErrorHistory[0]));
    	gLogErrorHistoryHead = (gLogErrorHistoryHead + 1)%DIM(grLogErrorHistory);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <logErrorHistory+0xa0>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <logErrorHistory+0xa0>)
 80019b4:	801a      	strh	r2, [r3, #0]

    	return true;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <logErrorHistory+0x8c>
	}

	return false;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0801734c 	.word	0x0801734c
 80019c8:	08017b4c 	.word	0x08017b4c
 80019cc:	08017270 	.word	0x08017270
 80019d0:	20001920 	.word	0x20001920
 80019d4:	200017e0 	.word	0x200017e0

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019dc:	f003 ffd2 	bl	8005984 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e0:	f000 f846 	bl	8001a70 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019e4:	f000 f8b0 	bl	8001b48 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80019e8:	f000 f8e5 	bl	8001bb6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ec:	f000 fdd4 	bl	8002598 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80019f0:	f000 fae0 	bl	8001fb4 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80019f4:	f000 faa0 	bl	8001f38 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80019f8:	f000 fb14 	bl	8002024 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80019fc:	f000 fb90 	bl	8002120 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8001a00:	f000 fbce 	bl	80021a0 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8001a04:	f000 fbe0 	bl	80021c8 <MX_LTDC_Init>
  MX_RTC_Init();
 8001a08:	f000 fc5e 	bl	80022c8 <MX_RTC_Init>
  MX_TIM3_Init();
 8001a0c:	f000 fd16 	bl	800243c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001a10:	f000 f8e0 	bl	8001bd4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001a14:	f000 fd74 	bl	8002500 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8001a18:	f000 fca4 	bl	8002364 <MX_SAI2_Init>
  MX_ADC4_Init();
 8001a1c:	f000 fa12 	bl	8001e44 <MX_ADC4_Init>
  MX_I2C1_Init();
 8001a20:	f000 fb3e 	bl	80020a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize BSP structure.
  memset(&rBsp, 0, sizeof(rBsp));
 8001a24:	2228      	movs	r2, #40	@ 0x28
 8001a26:	2100      	movs	r1, #0
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <main+0x80>)
 8001a2a:	f013 f9ed 	bl	8014e08 <memset>
  rBsp.pUart1      = &huart1;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <main+0x80>)
 8001a30:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <main+0x84>)
 8001a32:	601a      	str	r2, [r3, #0]
  rBsp.pI2c1       = &hi2c1;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <main+0x80>)
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <main+0x88>)
 8001a38:	605a      	str	r2, [r3, #4]
  rBsp.pSaiBlockB2 = &hsai_BlockB2;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <main+0x80>)
 8001a3c:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <main+0x8c>)
 8001a3e:	609a      	str	r2, [r3, #8]
  rBsp.pAdc1	   = &hadc1;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <main+0x80>)
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <main+0x90>)
 8001a44:	60da      	str	r2, [r3, #12]
  rBsp.pAdc4	   = &hadc4;
 8001a46:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <main+0x80>)
 8001a48:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <main+0x94>)
 8001a4a:	611a      	str	r2, [r3, #16]
  platformInit(&rBsp);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <main+0x80>)
 8001a4e:	f001 f801 	bl	8002a54 <platformInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  platformService();
 8001a52:	f001 f8c9 	bl	8002be8 <platformService>
 8001a56:	e7fc      	b.n	8001a52 <main+0x7a>
 8001a58:	200020ec 	.word	0x200020ec
 8001a5c:	20002058 	.word	0x20002058
 8001a60:	20001c30 	.word	0x20001c30
 8001a64:	20001e48 	.word	0x20001e48
 8001a68:	20001924 	.word	0x20001924
 8001a6c:	200019b0 	.word	0x200019b0

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b09e      	sub	sp, #120	@ 0x78
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0318 	add.w	r3, r7, #24
 8001a7a:	2260      	movs	r2, #96	@ 0x60
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f013 f9c2 	bl	8014e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a94:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001a98:	f00a f8ba 	bl	800bc10 <HAL_PWREx_ControlVoltageScaling>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001aa2:	f000 febd 	bl	8002820 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aa6:	f00a f8a3 	bl	800bbf0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <SystemClock_Config+0xd4>)
 8001aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ab0:	4a24      	ldr	r2, [pc, #144]	@ (8001b44 <SystemClock_Config+0xd4>)
 8001ab2:	f023 0318 	bic.w	r3, r3, #24
 8001ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001aba:	2307      	movs	r3, #7
 8001abc:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ac4:	2381      	movs	r3, #129	@ 0x81
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ace:	2310      	movs	r3, #16
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001af2:	230c      	movs	r3, #12
 8001af4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00a f982 	bl	800be08 <HAL_RCC_OscConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b0a:	f000 fe89 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	231f      	movs	r3, #31
 8001b10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b12:	2303      	movs	r3, #3
 8001b14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2103      	movs	r1, #3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00b f848 	bl	800cbc0 <HAL_RCC_ClockConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b36:	f000 fe73 	bl	8002820 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3778      	adds	r7, #120	@ 0x78
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	46020c00 	.word	0x46020c00

08001b48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0b8      	sub	sp, #224	@ 0xe0
 8001b4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4e:	463b      	mov	r3, r7
 8001b50:	22e0      	movs	r2, #224	@ 0xe0
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f013 f957 	bl	8014e08 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8001b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5e:	f04f 0301 	mov.w	r3, #1
 8001b62:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8001b6c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001b74:	2303      	movs	r3, #3
 8001b76:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8001b84:	2303      	movs	r3, #3
 8001b86:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8001b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8001b96:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00b fbde 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8001baa:	f000 fe39 	bl	8002820 <Error_Handler>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	37e0      	adds	r7, #224	@ 0xe0
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001bba:	f00a f905 	bl	800bdc8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f00a f8b2 	bl	800bd28 <HAL_PWREx_ConfigSupply>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001bca:	f000 fe29 	bl	8002820 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2220      	movs	r2, #32
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f013 f911 	bl	8014e08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001be6:	4b88      	ldr	r3, [pc, #544]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001be8:	4a88      	ldr	r2, [pc, #544]	@ (8001e0c <MX_ADC1_Init+0x238>)
 8001bea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bec:	4b86      	ldr	r3, [pc, #536]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001bf2:	4b85      	ldr	r3, [pc, #532]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001bf8:	4b83      	ldr	r3, [pc, #524]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bfe:	4b82      	ldr	r3, [pc, #520]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c04:	4b80      	ldr	r3, [pc, #512]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8001c10:	4b7d      	ldr	r3, [pc, #500]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c16:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c20:	220d      	movs	r2, #13
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c24:	4b78      	ldr	r3, [pc, #480]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c2c:	4b76      	ldr	r3, [pc, #472]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c32:	4b75      	ldr	r3, [pc, #468]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c38:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001c40:	4b71      	ldr	r3, [pc, #452]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c46:	4b70      	ldr	r3, [pc, #448]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c4c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001c52:	4b6d      	ldr	r3, [pc, #436]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c54:	2203      	movs	r2, #3
 8001c56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c58:	4b6b      	ldr	r3, [pc, #428]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c60:	4869      	ldr	r0, [pc, #420]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c62:	f004 faa3 	bl	80061ac <HAL_ADC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001c6c:	f000 fdd8 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c70:	4b67      	ldr	r3, [pc, #412]	@ (8001e10 <MX_ADC1_Init+0x23c>)
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c74:	2306      	movs	r3, #6
 8001c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c82:	2304      	movs	r3, #4
 8001c84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	485e      	ldr	r0, [pc, #376]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001c90:	f005 f866 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001c9a:	f000 fdc1 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e14 <MX_ADC1_Init+0x240>)
 8001ca0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4857      	ldr	r0, [pc, #348]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001cac:	f005 f858 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001cb6:	f000 fdb3 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cba:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <MX_ADC1_Init+0x244>)
 8001cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4850      	ldr	r0, [pc, #320]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001cc8:	f005 f84a 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001cd2:	f000 fda5 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cd6:	4b51      	ldr	r3, [pc, #324]	@ (8001e1c <MX_ADC1_Init+0x248>)
 8001cd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cda:	2318      	movs	r3, #24
 8001cdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cde:	463b      	mov	r3, r7
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4849      	ldr	r0, [pc, #292]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001ce4:	f005 f83c 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001cee:	f000 fd97 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <MX_ADC1_Init+0x24c>)
 8001cf4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4841      	ldr	r0, [pc, #260]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001d02:	f005 f82d 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001d0c:	f000 fd88 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d10:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <MX_ADC1_Init+0x250>)
 8001d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d14:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001d18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	483a      	ldr	r0, [pc, #232]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001d20:	f005 f81e 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8001d2a:	f000 fd79 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <MX_ADC1_Init+0x254>)
 8001d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d32:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4832      	ldr	r0, [pc, #200]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001d3e:	f005 f80f 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8001d48:	f000 fd6a 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d4c:	4b37      	ldr	r3, [pc, #220]	@ (8001e2c <MX_ADC1_Init+0x258>)
 8001d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001d50:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001d54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	482b      	ldr	r0, [pc, #172]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001d5c:	f005 f800 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8001d66:	f000 fd5b 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d6a:	4b31      	ldr	r3, [pc, #196]	@ (8001e30 <MX_ADC1_Init+0x25c>)
 8001d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001d6e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	4823      	ldr	r0, [pc, #140]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001d7a:	f004 fff1 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8001d84:	f000 fd4c 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d88:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <MX_ADC1_Init+0x260>)
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	481c      	ldr	r0, [pc, #112]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001d98:	f004 ffe2 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8001da2:	f000 fd3d 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <MX_ADC1_Init+0x264>)
 8001da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001daa:	f240 2306 	movw	r3, #518	@ 0x206
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4814      	ldr	r0, [pc, #80]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001db6:	f004 ffd3 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8001dc0:	f000 fd2e 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_ADC1_Init+0x268>)
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001dc8:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480d      	ldr	r0, [pc, #52]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001dd4:	f004 ffc4 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8001dde:	f000 fd1f 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_ADC1_Init+0x26c>)
 8001de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001de6:	f240 2312 	movw	r3, #530	@ 0x212
 8001dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dec:	463b      	mov	r3, r7
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_ADC1_Init+0x234>)
 8001df2:	f004 ffb5 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8001dfc:	f000 fd10 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20001924 	.word	0x20001924
 8001e0c:	42028000 	.word	0x42028000
 8001e10:	04000002 	.word	0x04000002
 8001e14:	08000004 	.word	0x08000004
 8001e18:	0c000008 	.word	0x0c000008
 8001e1c:	10000010 	.word	0x10000010
 8001e20:	14000020 	.word	0x14000020
 8001e24:	1c000080 	.word	0x1c000080
 8001e28:	20000100 	.word	0x20000100
 8001e2c:	2a000400 	.word	0x2a000400
 8001e30:	2e000800 	.word	0x2e000800
 8001e34:	32001000 	.word	0x32001000
 8001e38:	3e008000 	.word	0x3e008000
 8001e3c:	42010000 	.word	0x42010000
 8001e40:	ce080000 	.word	0xce080000

08001e44 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f012 ffd9 	bl	8014e08 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001e56:	4b34      	ldr	r3, [pc, #208]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e58:	4a34      	ldr	r2, [pc, #208]	@ (8001f2c <MX_ADC4_Init+0xe8>)
 8001e5a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e5c:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e70:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e74:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e76:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e78:	2204      	movs	r2, #4
 8001e7a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001e82:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001e88:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001eac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001eb0:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001ecc:	4816      	ldr	r0, [pc, #88]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001ece:	f004 f96d 	bl	80061ac <HAL_ADC_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001ed8:	f000 fca2 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_ADC4_Init+0xec>)
 8001ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001ef6:	f004 ff33 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8001f00:	f000 fc8e 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <MX_ADC4_Init+0xf0>)
 8001f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <MX_ADC4_Init+0xe4>)
 8001f12:	f004 ff25 	bl	8006d60 <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8001f1c:	f000 fc80 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200019b0 	.word	0x200019b0
 8001f2c:	46021000 	.word	0x46021000
 8001f30:	1c000080 	.word	0x1c000080
 8001f34:	20000100 	.word	0x20000100

08001f38 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <MX_DMA2D_Init+0x78>)
 8001f40:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001f48:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001f84:	4809      	ldr	r0, [pc, #36]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f86:	f006 fcdd 	bl	8008944 <HAL_DMA2D_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001f90:	f000 fc46 	bl	8002820 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001f94:	2101      	movs	r1, #1
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_DMA2D_Init+0x74>)
 8001f98:	f006 fd36 	bl	8008a08 <HAL_DMA2D_ConfigLayer>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001fa2:	f000 fc3d 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20001b68 	.word	0x20001b68
 8001fb0:	4002b000 	.word	0x4002b000

08001fb4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001fba:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <MX_GPDMA1_Init+0x6c>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc0:	4a17      	ldr	r2, [pc, #92]	@ (8002020 <MX_GPDMA1_Init+0x6c>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <MX_GPDMA1_Init+0x6c>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	201d      	movs	r0, #29
 8001fde:	f005 fdd4 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001fe2:	201d      	movs	r0, #29
 8001fe4:	f005 fdeb 	bl	8007bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	201e      	movs	r0, #30
 8001fee:	f005 fdcc 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001ff2:	201e      	movs	r0, #30
 8001ff4:	f005 fde3 	bl	8007bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	201f      	movs	r0, #31
 8001ffe:	f005 fdc4 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8002002:	201f      	movs	r0, #31
 8002004:	f005 fddb 	bl	8007bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2020      	movs	r0, #32
 800200e:	f005 fdbc 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8002012:	2020      	movs	r0, #32
 8002014:	f005 fdd3 	bl	8007bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	46020c00 	.word	0x46020c00

08002024 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_HSPI1_Init+0x74>)
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <MX_HSPI1_Init+0x78>)
 800202c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002030:	2204      	movs	r2, #4
 8002032:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <MX_HSPI1_Init+0x74>)
 800203c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002040:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002044:	221a      	movs	r2, #26
 8002046:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <MX_HSPI1_Init+0x74>)
 800204a:	2202      	movs	r2, #2
 800204c:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8002054:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <MX_HSPI1_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8002066:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <MX_HSPI1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8002078:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <MX_HSPI1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <MX_HSPI1_Init+0x74>)
 8002086:	f011 fd2f 	bl	8013ae8 <HAL_XSPI_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8002090:	f000 fbc6 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20001bd0 	.word	0x20001bd0
 800209c:	420d3400 	.word	0x420d3400

080020a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <MX_I2C1_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <MX_I2C1_Init+0x7c>)
 80020ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020c2:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020da:	480e      	ldr	r0, [pc, #56]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020dc:	f007 fe66 	bl	8009dac <HAL_I2C_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020e6:	f000 fb9b 	bl	8002820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4809      	ldr	r0, [pc, #36]	@ (8002114 <MX_I2C1_Init+0x74>)
 80020ee:	f009 f973 	bl	800b3d8 <HAL_I2CEx_ConfigAnalogFilter>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f000 fb92 	bl	8002820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_I2C1_Init+0x74>)
 8002100:	f009 f9b5 	bl	800b46e <HAL_I2CEx_ConfigDigitalFilter>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 fb89 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20001c30 	.word	0x20001c30
 8002118:	40005400 	.word	0x40005400
 800211c:	20a0c4df 	.word	0x20a0c4df

08002120 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <MX_I2C2_Init+0x78>)
 8002128:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_I2C2_Init+0x74>)
 800212c:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <MX_I2C2_Init+0x7c>)
 800212e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002138:	2201      	movs	r2, #1
 800213a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_I2C2_Init+0x74>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002144:	2200      	movs	r2, #0
 8002146:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <MX_I2C2_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800215a:	480e      	ldr	r0, [pc, #56]	@ (8002194 <MX_I2C2_Init+0x74>)
 800215c:	f007 fe26 	bl	8009dac <HAL_I2C_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002166:	f000 fb5b 	bl	8002820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216a:	2100      	movs	r1, #0
 800216c:	4809      	ldr	r0, [pc, #36]	@ (8002194 <MX_I2C2_Init+0x74>)
 800216e:	f009 f933 	bl	800b3d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002178:	f000 fb52 	bl	8002820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800217c:	2100      	movs	r1, #0
 800217e:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_I2C2_Init+0x74>)
 8002180:	f009 f975 	bl	800b46e <HAL_I2CEx_ConfigDigitalFilter>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800218a:	f000 fb49 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20001c84 	.word	0x20001c84
 8002198:	40005800 	.word	0x40005800
 800219c:	20a0c4df 	.word	0x20a0c4df

080021a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80021a4:	2000      	movs	r0, #0
 80021a6:	f009 f9af 	bl	800b508 <HAL_ICACHE_ConfigAssociativityMode>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80021b0:	f000 fb36 	bl	8002820 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80021b4:	f009 f9c8 	bl	800b548 <HAL_ICACHE_Enable>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80021be:	f000 fb2f 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	@ 0x38
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2234      	movs	r2, #52	@ 0x34
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f012 fe17 	bl	8014e08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021da:	4b39      	ldr	r3, [pc, #228]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80021dc:	4a39      	ldr	r2, [pc, #228]	@ (80022c4 <MX_LTDC_Init+0xfc>)
 80021de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021e0:	4b37      	ldr	r3, [pc, #220]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021e6:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021ec:	4b34      	ldr	r3, [pc, #208]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021f2:	4b33      	ldr	r3, [pc, #204]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80021f8:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80021fa:	2203      	movs	r2, #3
 80021fc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80021fe:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 8002200:	2203      	movs	r2, #3
 8002202:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8002204:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 8002206:	220b      	movs	r2, #11
 8002208:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800220a:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 800220c:	220b      	movs	r2, #11
 800220e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 8002212:	f240 322b 	movw	r2, #811	@ 0x32b
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8002218:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 800221a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8002220:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 8002222:	f240 3233 	movw	r2, #819	@ 0x333
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 800222a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002238:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002248:	481d      	ldr	r0, [pc, #116]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 800224a:	f009 f98d 	bl	800b568 <HAL_LTDC_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002254:	f000 fae4 	bl	8002820 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 800225c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002260:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8002266:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800226a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800226c:	2301      	movs	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002270:	23ff      	movs	r3, #255	@ 0xff
 8002272:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002278:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800227c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800227e:	2307      	movs	r3, #7
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	4619      	mov	r1, r3
 80022a6:	4806      	ldr	r0, [pc, #24]	@ (80022c0 <MX_LTDC_Init+0xf8>)
 80022a8:	f009 faf0 	bl	800b88c <HAL_LTDC_ConfigLayer>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80022b2:	f000 fab5 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	3738      	adds	r7, #56	@ 0x38
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20001cd8 	.word	0x20001cd8
 80022c4:	40016800 	.word	0x40016800

080022c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
 80022dc:	615a      	str	r2, [r3, #20]
 80022de:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <MX_RTC_Init+0x94>)
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <MX_RTC_Init+0x98>)
 80022e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <MX_RTC_Init+0x94>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <MX_RTC_Init+0x94>)
 80022ee:	227f      	movs	r2, #127	@ 0x7f
 80022f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <MX_RTC_Init+0x94>)
 80022f4:	22ff      	movs	r2, #255	@ 0xff
 80022f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022f8:	4b18      	ldr	r3, [pc, #96]	@ (800235c <MX_RTC_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022fe:	4b17      	ldr	r3, [pc, #92]	@ (800235c <MX_RTC_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002304:	4b15      	ldr	r3, [pc, #84]	@ (800235c <MX_RTC_Init+0x94>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800230a:	4b14      	ldr	r3, [pc, #80]	@ (800235c <MX_RTC_Init+0x94>)
 800230c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002310:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <MX_RTC_Init+0x94>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <MX_RTC_Init+0x94>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800231e:	480f      	ldr	r0, [pc, #60]	@ (800235c <MX_RTC_Init+0x94>)
 8002320:	f00e f81a 	bl	8010358 <HAL_RTC_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800232a:	f000 fa79 	bl	8002820 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4806      	ldr	r0, [pc, #24]	@ (800235c <MX_RTC_Init+0x94>)
 8002344:	f00e f936 	bl	80105b4 <HAL_RTCEx_PrivilegeModeSet>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800234e:	f000 fa67 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20001d80 	.word	0x20001d80
 8002360:	46007800 	.word	0x46007800

08002364 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002368:	4b2f      	ldr	r3, [pc, #188]	@ (8002428 <MX_SAI2_Init+0xc4>)
 800236a:	4a30      	ldr	r2, [pc, #192]	@ (800242c <MX_SAI2_Init+0xc8>)
 800236c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800236e:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <MX_SAI2_Init+0xc4>)
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002374:	4b2c      	ldr	r3, [pc, #176]	@ (8002428 <MX_SAI2_Init+0xc4>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800237a:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <MX_SAI2_Init+0xc4>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <MX_SAI2_Init+0xc4>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002386:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <MX_SAI2_Init+0xc4>)
 8002388:	2200      	movs	r2, #0
 800238a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800238c:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <MX_SAI2_Init+0xc4>)
 800238e:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <MX_SAI2_Init+0xcc>)
 8002390:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002392:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <MX_SAI2_Init+0xc4>)
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <MX_SAI2_Init+0xc4>)
 800239a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800239e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <MX_SAI2_Init+0xc4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <MX_SAI2_Init+0xc4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <MX_SAI2_Init+0xc4>)
 80023ae:	2210      	movs	r2, #16
 80023b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80023b2:	2302      	movs	r3, #2
 80023b4:	2202      	movs	r2, #2
 80023b6:	2101      	movs	r1, #1
 80023b8:	481b      	ldr	r0, [pc, #108]	@ (8002428 <MX_SAI2_Init+0xc4>)
 80023ba:	f00e f929 	bl	8010610 <HAL_SAI_InitProtocol>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 80023c4:	f000 fa2c 	bl	8002820 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <MX_SAI2_Init+0xd4>)
 80023cc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80023ce:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 80023e6:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023ee:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <MX_SAI2_Init+0xcc>)
 80023f0:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <MX_SAI2_Init+0xd0>)
 80023fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023fe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <MX_SAI2_Init+0xd0>)
 8002402:	2200      	movs	r2, #0
 8002404:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002406:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <MX_SAI2_Init+0xd0>)
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 4) != HAL_OK)
 800240c:	2304      	movs	r3, #4
 800240e:	2202      	movs	r2, #2
 8002410:	2100      	movs	r1, #0
 8002412:	4808      	ldr	r0, [pc, #32]	@ (8002434 <MX_SAI2_Init+0xd0>)
 8002414:	f00e f8fc 	bl	8010610 <HAL_SAI_InitProtocol>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 800241e:	f000 f9ff 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20001db0 	.word	0x20001db0
 800242c:	40015804 	.word	0x40015804
 8002430:	00017700 	.word	0x00017700
 8002434:	20001e48 	.word	0x20001e48
 8002438:	40015824 	.word	0x40015824

0800243c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800244e:	463b      	mov	r3, r7
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002460:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 8002462:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <MX_TIM3_Init+0xc0>)
 8002464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 8002468:	22a0      	movs	r2, #160	@ 0xa0
 800246a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002472:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 8002474:	2264      	movs	r2, #100	@ 0x64
 8002476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002484:	481c      	ldr	r0, [pc, #112]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 8002486:	f00e fc47 	bl	8010d18 <HAL_TIM_PWM_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002490:	f000 f9c6 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	4619      	mov	r1, r3
 80024a2:	4815      	ldr	r0, [pc, #84]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 80024a4:	f00f fa80 	bl	80119a8 <HAL_TIMEx_MasterConfigSynchronization>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80024ae:	f000 f9b7 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b2:	2360      	movs	r3, #96	@ 0x60
 80024b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80024b6:	234b      	movs	r3, #75	@ 0x4b
 80024b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024c2:	463b      	mov	r3, r7
 80024c4:	220c      	movs	r2, #12
 80024c6:	4619      	mov	r1, r3
 80024c8:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 80024ca:	f00e fc7d 	bl	8010dc8 <HAL_TIM_PWM_ConfigChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80024d4:	f000 f9a4 	bl	8002820 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80024d8:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e6:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024e8:	4803      	ldr	r0, [pc, #12]	@ (80024f8 <MX_TIM3_Init+0xbc>)
 80024ea:	f002 fc09 	bl	8004d00 <HAL_TIM_MspPostInit>

}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	@ 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000200c 	.word	0x2000200c
 80024fc:	40000400 	.word	0x40000400

08002500 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002506:	4a23      	ldr	r2, [pc, #140]	@ (8002594 <MX_USART1_UART_Init+0x94>)
 8002508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800250a:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002542:	4b13      	ldr	r3, [pc, #76]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002548:	4811      	ldr	r0, [pc, #68]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800254a:	f00f faef 	bl	8011b2c <HAL_UART_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002554:	f000 f964 	bl	8002820 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002558:	2100      	movs	r1, #0
 800255a:	480d      	ldr	r0, [pc, #52]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800255c:	f011 f9f9 	bl	8013952 <HAL_UARTEx_SetTxFifoThreshold>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002566:	f000 f95b 	bl	8002820 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256a:	2100      	movs	r1, #0
 800256c:	4808      	ldr	r0, [pc, #32]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800256e:	f011 fa2e 	bl	80139ce <HAL_UARTEx_SetRxFifoThreshold>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002578:	f000 f952 	bl	8002820 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800257c:	4804      	ldr	r0, [pc, #16]	@ (8002590 <MX_USART1_UART_Init+0x90>)
 800257e:	f011 f9af 	bl	80138e0 <HAL_UARTEx_DisableFifoMode>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002588:	f000 f94a 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20002058 	.word	0x20002058
 8002594:	40013800 	.word	0x40013800

08002598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	@ 0x38
 800259c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ae:	4b93      	ldr	r3, [pc, #588]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b4:	4a91      	ldr	r2, [pc, #580]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025be:	4b8f      	ldr	r3, [pc, #572]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025cc:	4b8b      	ldr	r3, [pc, #556]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d2:	4a8a      	ldr	r2, [pc, #552]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025dc:	4b87      	ldr	r3, [pc, #540]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ea:	4b84      	ldr	r3, [pc, #528]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f0:	4a82      	ldr	r2, [pc, #520]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025f2:	f043 0320 	orr.w	r3, r3, #32
 80025f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025fa:	4b80      	ldr	r3, [pc, #512]	@ (80027fc <MX_GPIO_Init+0x264>)
 80025fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002608:	4b7c      	ldr	r3, [pc, #496]	@ (80027fc <MX_GPIO_Init+0x264>)
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800260e:	4a7b      	ldr	r2, [pc, #492]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002614:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002618:	4b78      	ldr	r3, [pc, #480]	@ (80027fc <MX_GPIO_Init+0x264>)
 800261a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800261e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b75      	ldr	r3, [pc, #468]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800262c:	4a73      	ldr	r2, [pc, #460]	@ (80027fc <MX_GPIO_Init+0x264>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002636:	4b71      	ldr	r3, [pc, #452]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	4b6d      	ldr	r3, [pc, #436]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800264a:	4a6c      	ldr	r2, [pc, #432]	@ (80027fc <MX_GPIO_Init+0x264>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002654:	4b69      	ldr	r3, [pc, #420]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002662:	4b66      	ldr	r3, [pc, #408]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002668:	4a64      	ldr	r2, [pc, #400]	@ (80027fc <MX_GPIO_Init+0x264>)
 800266a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800266e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002672:	4b62      	ldr	r3, [pc, #392]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002680:	4b5e      	ldr	r3, [pc, #376]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002686:	4a5d      	ldr	r2, [pc, #372]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002690:	4b5a      	ldr	r3, [pc, #360]	@ (80027fc <MX_GPIO_Init+0x264>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800269e:	4b57      	ldr	r3, [pc, #348]	@ (80027fc <MX_GPIO_Init+0x264>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a4:	4a55      	ldr	r2, [pc, #340]	@ (80027fc <MX_GPIO_Init+0x264>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026ae:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <MX_GPIO_Init+0x264>)
 80026b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 80026bc:	2200      	movs	r2, #0
 80026be:	2104      	movs	r1, #4
 80026c0:	484f      	ldr	r0, [pc, #316]	@ (8002800 <MX_GPIO_Init+0x268>)
 80026c2:	f007 fb1f 	bl	8009d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	2110      	movs	r1, #16
 80026ca:	484d      	ldr	r0, [pc, #308]	@ (8002800 <MX_GPIO_Init+0x268>)
 80026cc:	f007 fb1a 	bl	8009d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2114      	movs	r1, #20
 80026d4:	484b      	ldr	r0, [pc, #300]	@ (8002804 <MX_GPIO_Init+0x26c>)
 80026d6:	f007 fb15 	bl	8009d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 80026da:	2314      	movs	r3, #20
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ee:	4619      	mov	r1, r3
 80026f0:	4843      	ldr	r0, [pc, #268]	@ (8002800 <MX_GPIO_Init+0x268>)
 80026f2:	f007 f92f 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80026f6:	2320      	movs	r3, #32
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fa:	4b43      	ldr	r3, [pc, #268]	@ (8002808 <MX_GPIO_Init+0x270>)
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	483d      	ldr	r0, [pc, #244]	@ (8002800 <MX_GPIO_Init+0x268>)
 800270a:	f007 f923 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800270e:	2302      	movs	r3, #2
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002712:	4b3e      	ldr	r3, [pc, #248]	@ (800280c <MX_GPIO_Init+0x274>)
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	483b      	ldr	r0, [pc, #236]	@ (8002810 <MX_GPIO_Init+0x278>)
 8002722:	f007 f917 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8002726:	2310      	movs	r3, #16
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800272a:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <MX_GPIO_Init+0x27c>)
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272e:	2301      	movs	r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002736:	4619      	mov	r1, r3
 8002738:	4835      	ldr	r0, [pc, #212]	@ (8002810 <MX_GPIO_Init+0x278>)
 800273a:	f007 f90b 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800273e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002754:	4619      	mov	r1, r3
 8002756:	482e      	ldr	r0, [pc, #184]	@ (8002810 <MX_GPIO_Init+0x278>)
 8002758:	f007 f8fc 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800275c:	2314      	movs	r3, #20
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	4619      	mov	r1, r3
 8002772:	4824      	ldr	r0, [pc, #144]	@ (8002804 <MX_GPIO_Init+0x26c>)
 8002774:	f007 f8ee 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	481e      	ldr	r0, [pc, #120]	@ (8002804 <MX_GPIO_Init+0x26c>)
 800278c:	f007 f8e2 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8002790:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002796:	2300      	movs	r3, #0
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a2:	4619      	mov	r1, r3
 80027a4:	481c      	ldr	r0, [pc, #112]	@ (8002818 <MX_GPIO_Init+0x280>)
 80027a6:	f007 f8d5 	bl	8009954 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80027aa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027bc:	4619      	mov	r1, r3
 80027be:	4817      	ldr	r0, [pc, #92]	@ (800281c <MX_GPIO_Init+0x284>)
 80027c0:	f007 f8c8 	bl	8009954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	200c      	movs	r0, #12
 80027ca:	f005 f9de 	bl	8007b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027ce:	200c      	movs	r0, #12
 80027d0:	f005 f9f5 	bl	8007bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	200f      	movs	r0, #15
 80027da:	f005 f9d6 	bl	8007b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80027de:	200f      	movs	r0, #15
 80027e0:	f005 f9ed 	bl	8007bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2010      	movs	r0, #16
 80027ea:	f005 f9ce 	bl	8007b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80027ee:	2010      	movs	r0, #16
 80027f0:	f005 f9e5 	bl	8007bbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027f4:	bf00      	nop
 80027f6:	3738      	adds	r7, #56	@ 0x38
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	46020c00 	.word	0x46020c00
 8002800:	42021000 	.word	0x42021000
 8002804:	42020c00 	.word	0x42020c00
 8002808:	10110000 	.word	0x10110000
 800280c:	10310000 	.word	0x10310000
 8002810:	42020000 	.word	0x42020000
 8002814:	10210000 	.word	0x10210000
 8002818:	42021800 	.word	0x42021800
 800281c:	42020400 	.word	0x42020400

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <Error_Handler+0x8>

0800282c <pcm6260Init>:
// @brief Intialize the ADC.
//
// @return enumerated error code
//
teError pcm6260Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
	int index;

	// Wait for a bit and take the ADC out of reset.
	bspMillisecondDelay(100);
 8002832:	2064      	movs	r0, #100	@ 0x64
 8002834:	f7fe fc5a 	bl	80010ec <bspMillisecondDelay>
	HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET);
 8002838:	2201      	movs	r2, #1
 800283a:	2104      	movs	r1, #4
 800283c:	4813      	ldr	r0, [pc, #76]	@ (800288c <pcm6260Init+0x60>)
 800283e:	f007 fa61 	bl	8009d04 <HAL_GPIO_WritePin>
	bspMillisecondDelay(100);
 8002842:	2064      	movs	r0, #100	@ 0x64
 8002844:	f7fe fc52 	bl	80010ec <bspMillisecondDelay>
	// Iterate over configuration.
	for (index = 0; index < DIM(grPcm6260Config); index++)
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	e016      	b.n	800287c <pcm6260Init+0x50>
	{
		// Set register value.
		if (!bspI2cWrite(PCM6260_I2C_ADDRESS,
			(uint8_t*)&grPcm6260Config[index],
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4a0f      	ldr	r2, [pc, #60]	@ (8002890 <pcm6260Init+0x64>)
 8002854:	4413      	add	r3, r2
		if (!bspI2cWrite(PCM6260_I2C_ADDRESS,
 8002856:	2202      	movs	r2, #2
 8002858:	4619      	mov	r1, r3
 800285a:	2090      	movs	r0, #144	@ 0x90
 800285c:	f7fe fc92 	bl	8001184 <bspI2cWrite>
 8002860:	4603      	mov	r3, r0
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <pcm6260Init+0x44>
			sizeof(grPcm6260Config[index])))
		{
			return eErrorInit;
 800286c:	230d      	movs	r3, #13
 800286e:	e009      	b.n	8002884 <pcm6260Init+0x58>
		}
		bspMillisecondDelay(100);
 8002870:	2064      	movs	r0, #100	@ 0x64
 8002872:	f7fe fc3b 	bl	80010ec <bspMillisecondDelay>
	for (index = 0; index < DIM(grPcm6260Config); index++)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b0b      	cmp	r3, #11
 8002880:	d9e5      	bls.n	800284e <pcm6260Init+0x22>
	}

	return eErrorNone;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	42021000 	.word	0x42021000
 8002890:	20000164 	.word	0x20000164

08002894 <dump>:
// @brief Print performance stats.
//
// @return enumerated error code
//
static void dump(trPerf *prPerf)
{
 8002894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002898:	b087      	sub	sp, #28
 800289a:	af04      	add	r7, sp, #16
 800289c:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prPerf);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2d8      	uxtb	r0, r3
 80028aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <dump+0xcc>)
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <dump+0xd0>)
 80028b0:	221e      	movs	r2, #30
 80028b2:	492d      	ldr	r1, [pc, #180]	@ (8002968 <dump+0xd4>)
 80028b4:	f7fe fec0 	bl	8001638 <logAssert>

    // Print stats.
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1c5e      	adds	r6, r3, #1
        (double)prPerf->rMeasure.min / (double)bspCycleCounterFrequency(),
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe4d 	bl	8000560 <__aeabi_ui2d>
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	f7fe fc05 	bl	80010d8 <bspCycleCounterFrequency>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe45 	bl	8000560 <__aeabi_ui2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f7fd ffe3 	bl	80008a8 <__aeabi_ddiv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4692      	mov	sl, r2
 80028e8:	469b      	mov	fp, r3
        (double)prPerf->rMeasure.max / (double)bspCycleCounterFrequency(),
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe36 	bl	8000560 <__aeabi_ui2d>
 80028f4:	4604      	mov	r4, r0
 80028f6:	460d      	mov	r5, r1
 80028f8:	f7fe fbee 	bl	80010d8 <bspCycleCounterFrequency>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe2e 	bl	8000560 <__aeabi_ui2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd ffcc 	bl	80008a8 <__aeabi_ddiv>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4690      	mov	r8, r2
 8002916:	4699      	mov	r9, r3
        (double)prPerf->rMeasure.avg / (double)bspCycleCounterFrequency());
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe1f 	bl	8000560 <__aeabi_ui2d>
 8002922:	4604      	mov	r4, r0
 8002924:	460d      	mov	r5, r1
 8002926:	f7fe fbd7 	bl	80010d8 <bspCycleCounterFrequency>
 800292a:	4603      	mov	r3, r0
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fe17 	bl	8000560 <__aeabi_ui2d>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
    bspPrintf("\r\n%s(min/max/avg): %1.6E/%1.6E/%1.6E", prPerf->name,
 8002936:	4620      	mov	r0, r4
 8002938:	4629      	mov	r1, r5
 800293a:	f7fd ffb5 	bl	80008a8 <__aeabi_ddiv>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002946:	e9cd 8900 	strd	r8, r9, [sp]
 800294a:	4652      	mov	r2, sl
 800294c:	465b      	mov	r3, fp
 800294e:	4631      	mov	r1, r6
 8002950:	4806      	ldr	r0, [pc, #24]	@ (800296c <dump+0xd8>)
 8002952:	f7fe fccf 	bl	80012f4 <bspPrintf>
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002960:	080173a4 	.word	0x080173a4
 8002964:	08017b5c 	.word	0x08017b5c
 8002968:	08017390 	.word	0x08017390
 800296c:	080173b4 	.word	0x080173b4

08002970 <perfInit>:
// @brief Initialize performance module.
//
// @return enumerated error code
//
teError perfInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
    // Initialize performance resources.
    memset(grPerf, 0, sizeof(grPerf));
 8002974:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8002978:	2100      	movs	r1, #0
 800297a:	4803      	ldr	r0, [pc, #12]	@ (8002988 <perfInit+0x18>)
 800297c:	f012 fa44 	bl	8014e08 <memset>

    return eErrorNone;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20002114 	.word	0x20002114

0800298c <perfPrint>:
//
// @param prPerf optional pointer to performance structure
// @return enumerated error code
//
void perfPrint(trPerf *prPerf)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    int index;

    // Check pointer.
    if (NULL != prPerf)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <perfPrint+0x16>
    {
        dump(prPerf);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ff7a 	bl	8002894 <dump>

        return;
 80029a0:	e01c      	b.n	80029dc <perfPrint+0x50>
    }

    // Iterate over resources.
    for (index = 0; index < DIM(grPerf); index++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e016      	b.n	80029d6 <perfPrint+0x4a>
    {
        // Check allocation.
        if (grPerf[index].allocated)
 80029a8:	490e      	ldr	r1, [pc, #56]	@ (80029e4 <perfPrint+0x58>)
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <perfPrint+0x44>
        {
            dump(&grPerf[index]);
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4a07      	ldr	r2, [pc, #28]	@ (80029e4 <perfPrint+0x58>)
 80029c8:	4413      	add	r3, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff62 	bl	8002894 <dump>
    for (index = 0; index < DIM(grPerf); index++)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b07      	cmp	r3, #7
 80029da:	d9e5      	bls.n	80029a8 <perfPrint+0x1c>
        }
    }
}
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20002114 	.word	0x20002114

080029e8 <heartbeatHandler>:
//
// @param pContext pointer to callback context
// @return none
//
static void heartbeatHandler(void *pContext)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	static bool state = false;

	// Toggle LED.
	bspHeartbeatLed(state = !state);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <heartbeatHandler+0x38>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <heartbeatHandler+0x38>)
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <heartbeatHandler+0x38>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fce8 	bl	80013e8 <bspHeartbeatLed>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200022d4 	.word	0x200022d4

08002a24 <version>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError version(int argc, char *argv[])
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	// Print version.
    bspPrintf("\r\n%u.%u.%u %s", VERSION_MAJOR, VERSION_MINOR,
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f002 ff5c 	bl	80058ec <versionConfidence>
 8002a34:	4603      	mov	r3, r0
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4804      	ldr	r0, [pc, #16]	@ (8002a50 <version+0x2c>)
 8002a40:	f7fe fc58 	bl	80012f4 <bspPrintf>
		VERSION_BUILD, versionConfidence(VERSION_CONF));

    return eErrorNone;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	080173fc 	.word	0x080173fc

08002a54 <platformInit>:
//
// @param prBsp pointer to BSP data.
// @return true = success, false = failure
//
bool platformInit(trBsp *prBsp)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af04      	add	r7, sp, #16
 8002a5a:	6078      	str	r0, [r7, #4]
	teError eError;

	// Initialize BSP.
	if (!bspInit(prBsp))
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe fbd3 	bl	8001208 <bspInit>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f083 0301 	eor.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <platformInit+0x1e>
	{
		return false;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e091      	b.n	8002b96 <platformInit+0x142>
	}

	// Disable I/O buffering.
	setvbuf(stdout, NULL, _IONBF, 0);
 8002a72:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <platformInit+0x14c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6898      	ldr	r0, [r3, #8]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f011 ffcb 	bl	8014a18 <setvbuf>

	// Initialize ADC.
	if (eErrorNone != (eError = pcm6260Init()))
 8002a82:	f7ff fed3 	bl	800282c <pcm6260Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <platformInit+0x48>
	{
		LOGFATAL(eError);
 8002a90:	7bf8      	ldrb	r0, [r7, #15]
 8002a92:	4b44      	ldr	r3, [pc, #272]	@ (8002ba4 <platformInit+0x150>)
 8002a94:	2251      	movs	r2, #81	@ 0x51
 8002a96:	4944      	ldr	r1, [pc, #272]	@ (8002ba8 <platformInit+0x154>)
 8002a98:	f7fe fee2 	bl	8001860 <logFatal>
	}

    // Initialize performance.
    if (eErrorNone != (eError = perfInit()))
 8002a9c:	f7ff ff68 	bl	8002970 <perfInit>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <platformInit+0x62>
    {
        LOGFATAL(eError);
 8002aaa:	7bf8      	ldrb	r0, [r7, #15]
 8002aac:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <platformInit+0x150>)
 8002aae:	2257      	movs	r2, #87	@ 0x57
 8002ab0:	493d      	ldr	r1, [pc, #244]	@ (8002ba8 <platformInit+0x154>)
 8002ab2:	f7fe fed5 	bl	8001860 <logFatal>
    }

	// Initialize timer.
	if (eErrorNone != (eError = timerInit()))
 8002ab6:	f002 fd47 	bl	8005548 <timerInit>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <platformInit+0x7c>
	{
		LOGFATAL(eError);
 8002ac4:	7bf8      	ldrb	r0, [r7, #15]
 8002ac6:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <platformInit+0x150>)
 8002ac8:	225d      	movs	r2, #93	@ 0x5d
 8002aca:	4937      	ldr	r1, [pc, #220]	@ (8002ba8 <platformInit+0x154>)
 8002acc:	f7fe fec8 	bl	8001860 <logFatal>
	}

	// Initialize log.
	if (eErrorNone != (eError = logInit()))
 8002ad0:	f7fe fda4 	bl	800161c <logInit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <platformInit+0x96>
	{
		LOGFATAL(eError);
 8002ade:	7bf8      	ldrb	r0, [r7, #15]
 8002ae0:	4b30      	ldr	r3, [pc, #192]	@ (8002ba4 <platformInit+0x150>)
 8002ae2:	2263      	movs	r2, #99	@ 0x63
 8002ae4:	4930      	ldr	r1, [pc, #192]	@ (8002ba8 <platformInit+0x154>)
 8002ae6:	f7fe febb 	bl	8001860 <logFatal>
		LOGFATAL(eError);
	}
	*/

	// Initialize shell.
	if (eErrorNone != (eError = shellInit()))
 8002aea:	f000 ff57 	bl	800399c <shellInit>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <platformInit+0xb0>
	{
		LOGFATAL(eError);
 8002af8:	7bf8      	ldrb	r0, [r7, #15]
 8002afa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <platformInit+0x150>)
 8002afc:	2271      	movs	r2, #113	@ 0x71
 8002afe:	492a      	ldr	r1, [pc, #168]	@ (8002ba8 <platformInit+0x154>)
 8002b00:	f7fe feae 	bl	8001860 <logFatal>
	}

    // Add shell commands.
    if (eErrorNone != (eError = shellAdd("ver",
 8002b04:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <platformInit+0x158>)
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <platformInit+0x15c>)
 8002b0e:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <platformInit+0x15c>)
 8002b10:	4928      	ldr	r1, [pc, #160]	@ (8002bb4 <platformInit+0x160>)
 8002b12:	4829      	ldr	r0, [pc, #164]	@ (8002bb8 <platformInit+0x164>)
 8002b14:	f001 fa9e 	bl	8004054 <shellAdd>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <platformInit+0xda>
        "version information", "", "", 1, version)))
    {
        LOGERROR(eError);
 8002b22:	7bf8      	ldrb	r0, [r7, #15]
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <platformInit+0x150>)
 8002b26:	2278      	movs	r2, #120	@ 0x78
 8002b28:	491f      	ldr	r1, [pc, #124]	@ (8002ba8 <platformInit+0x154>)
 8002b2a:	f7fe fe23 	bl	8001774 <logError>
    }

	// Add LED heartbeat callback.
	if (eErrorNone != (eError = timerAdd(PLATFORM_HEARTBEAT_INTERVAL,
 8002b2e:	2301      	movs	r3, #1
 8002b30:	2200      	movs	r2, #0
 8002b32:	4922      	ldr	r1, [pc, #136]	@ (8002bbc <platformInit+0x168>)
 8002b34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b38:	f002 fdae 	bl	8005698 <timerAdd>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <platformInit+0xfe>
		heartbeatHandler, NULL, true)))
	{
		LOGFATAL(eError);
 8002b46:	7bf8      	ldrb	r0, [r7, #15]
 8002b48:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <platformInit+0x150>)
 8002b4a:	227f      	movs	r2, #127	@ 0x7f
 8002b4c:	4916      	ldr	r1, [pc, #88]	@ (8002ba8 <platformInit+0x154>)
 8002b4e:	f7fe fe87 	bl	8001860 <logFatal>
	}

	// Clear terminal.
	puts(VT100_CLEAR_SCREEN);
 8002b52:	481b      	ldr	r0, [pc, #108]	@ (8002bc0 <platformInit+0x16c>)
 8002b54:	f011 ff58 	bl	8014a08 <puts>
	puts(VT100_CURSOR_HOME);
 8002b58:	481a      	ldr	r0, [pc, #104]	@ (8002bc4 <platformInit+0x170>)
 8002b5a:	f011 ff55 	bl	8014a08 <puts>

    // Print shell banner.
    bspPrintf("\r\n\n%s %s Version %d.%d.%d %s (%s)" , PLATFORM_MDL,
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f002 fec4 	bl	80058ec <versionConfidence>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <platformInit+0x174>)
 8002b68:	9203      	str	r2, [sp, #12]
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2300      	movs	r3, #0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	4a15      	ldr	r2, [pc, #84]	@ (8002bcc <platformInit+0x178>)
 8002b78:	4915      	ldr	r1, [pc, #84]	@ (8002bd0 <platformInit+0x17c>)
 8002b7a:	4816      	ldr	r0, [pc, #88]	@ (8002bd4 <platformInit+0x180>)
 8002b7c:	f7fe fbba 	bl	80012f4 <bspPrintf>
		PLATFORM_DESCRIPTION, VERSION_MAJOR, VERSION_MINOR,
		VERSION_BUILD, versionConfidence(VERSION_CONF), PLATFORM_TYPE);
    bspPrintf("\r\n%s %s %s" ,PLATFORM_COPYRIGHT, PLATFORM_MFG_FULL,
 8002b80:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <platformInit+0x184>)
 8002b82:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <platformInit+0x188>)
 8002b84:	4916      	ldr	r1, [pc, #88]	@ (8002be0 <platformInit+0x18c>)
 8002b86:	4817      	ldr	r0, [pc, #92]	@ (8002be4 <platformInit+0x190>)
 8002b88:	f7fe fbb4 	bl	80012f4 <bspPrintf>
		PLATFORM_RIGHTS);

    // Wait for power rails to stabilize.
    bspMillisecondDelay(BSP_WAIT_RAIL_STABLIZE);
 8002b8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b90:	f7fe faac 	bl	80010ec <bspMillisecondDelay>

    // TODO: Perform self-test.

	return true;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001b4 	.word	0x200001b4
 8002ba4:	08017b64 	.word	0x08017b64
 8002ba8:	0801740c 	.word	0x0801740c
 8002bac:	08002a25 	.word	0x08002a25
 8002bb0:	08017424 	.word	0x08017424
 8002bb4:	08017428 	.word	0x08017428
 8002bb8:	0801743c 	.word	0x0801743c
 8002bbc:	080029e9 	.word	0x080029e9
 8002bc0:	08017440 	.word	0x08017440
 8002bc4:	08017448 	.word	0x08017448
 8002bc8:	0801748c 	.word	0x0801748c
 8002bcc:	0801744c 	.word	0x0801744c
 8002bd0:	08017464 	.word	0x08017464
 8002bd4:	08017468 	.word	0x08017468
 8002bd8:	08017490 	.word	0x08017490
 8002bdc:	080174a8 	.word	0x080174a8
 8002be0:	080174c0 	.word	0x080174c0
 8002be4:	080174cc 	.word	0x080174cc

08002be8 <platformService>:
// @brief Platform thread of execution.
//
// @return true = success, false = failure
//
bool platformService(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
	teError eError;

    // Service timers.
    timerService();
 8002bee:	f002 fe15 	bl	800581c <timerService>

	// Service diagnostic shell.
	if (eErrorNone != (eError = shellService()))
 8002bf2:	f001 f8e5 	bl	8003dc0 <shellService>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <platformService+0x24>
	{
		LOGERROR(eError);
 8002c00:	79f8      	ldrb	r0, [r7, #7]
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <platformService+0x34>)
 8002c04:	22a4      	movs	r2, #164	@ 0xa4
 8002c06:	4906      	ldr	r1, [pc, #24]	@ (8002c20 <platformService+0x38>)
 8002c08:	f7fe fdb4 	bl	8001774 <logError>
		LOGERROR(eError);
	}
	*/

    // Try to drain stdout.
    bspConsoleDrain();
 8002c0c:	f7fe f9e0 	bl	8000fd0 <bspConsoleDrain>

	return true;
 8002c10:	2301      	movs	r3, #1
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	08017b74 	.word	0x08017b74
 8002c20:	0801740c 	.word	0x0801740c

08002c24 <empty>:
//
// @param prRing pointer to ring structure
// @return true = empty, false = not empty
//
static inline bool empty(trRing *prRing)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2d8      	uxtb	r0, r3
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <empty+0x3c>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <empty+0x40>)
 8002c3e:	2225      	movs	r2, #37	@ 0x25
 8002c40:	4909      	ldr	r1, [pc, #36]	@ (8002c68 <empty+0x44>)
 8002c42:	f7fe fcf9 	bl	8001638 <logAssert>

    return (prRing->head == prRing->tail) ? true : false;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	080174ec 	.word	0x080174ec
 8002c64:	08017b9c 	.word	0x08017b9c
 8002c68:	080174d8 	.word	0x080174d8

08002c6c <full>:
//
// @param trRing pointer to ring structure
// @return true = full, false = not full
//
static inline bool full(trRing *prRing)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2d8      	uxtb	r0, r3
 8002c80:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <full+0x4c>)
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <full+0x50>)
 8002c86:	2233      	movs	r2, #51	@ 0x33
 8002c88:	490d      	ldr	r1, [pc, #52]	@ (8002cc0 <full+0x54>)
 8002c8a:	f7fe fcd5 	bl	8001638 <logAssert>

    return ((prRing->head + 1) % prRing->length == prRing->tail) ? true : false;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c9c:	fb01 f202 	mul.w	r2, r1, r2
 8002ca0:	1a9a      	subs	r2, r3, r2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	080174ec 	.word	0x080174ec
 8002cbc:	08017ba4 	.word	0x08017ba4
 8002cc0:	080174d8 	.word	0x080174d8

08002cc4 <space>:
//
// @param thRing handle to ring structure
// @return length of free space
//
static inline uint32_t space(trRing *prRing)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	6078      	str	r0, [r7, #4]
    // Validate argument[s].
    ASSERT(NULL != prRing);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2d8      	uxtb	r0, r3
 8002cd8:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <space+0x68>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <space+0x6c>)
 8002cde:	2241      	movs	r2, #65	@ 0x41
 8002ce0:	4914      	ldr	r1, [pc, #80]	@ (8002d34 <space+0x70>)
 8002ce2:	f7fe fca9 	bl	8001638 <logAssert>

    // Check empty state.
    if (empty(prRing))
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ff9c 	bl	8002c24 <empty>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <space+0x34>
    {
        return prRing->length;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	e014      	b.n	8002d22 <space+0x5e>
    }

    return (prRing->head > prRing->tail) ?
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
            prRing->length - prRing->head + prRing->tail - 1 :
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d909      	bls.n	8002d18 <space+0x54>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1ad2      	subs	r2, r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	3b01      	subs	r3, #1
 8002d16:	e004      	b.n	8002d22 <space+0x5e>
            prRing->tail - prRing->head;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
            prRing->length - prRing->head + prRing->tail - 1 :
 8002d20:	1ad3      	subs	r3, r2, r3
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	080174ec 	.word	0x080174ec
 8002d30:	08017bac 	.word	0x08017bac
 8002d34:	080174d8 	.word	0x080174d8

08002d38 <ringInit>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return handle to ring
//
thRing ringInit(char *pBuffer, uint32_t length)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
	trRing *prRing = (trRing*)pBuffer;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60fb      	str	r3, [r7, #12]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2d8      	uxtb	r0, r3
 8002d52:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <ringInit+0x6c>)
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <ringInit+0x70>)
 8002d58:	225c      	movs	r2, #92	@ 0x5c
 8002d5a:	4914      	ldr	r1, [pc, #80]	@ (8002dac <ringInit+0x74>)
 8002d5c:	f7fe fc6c 	bl	8001638 <logAssert>
	ASSERT(length > 0);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <ringInit+0x78>)
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <ringInit+0x70>)
 8002d72:	225d      	movs	r2, #93	@ 0x5d
 8002d74:	490d      	ldr	r1, [pc, #52]	@ (8002dac <ringInit+0x74>)
 8002d76:	f7fe fc5f 	bl	8001638 <logAssert>

	// Initialize ring.
	memset((void*)prRing, 0, length);
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f012 f842 	bl	8014e08 <memset>
	prRing->length  = length - sizeof(*prRing);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f1a3 0210 	sub.w	r2, r3, #16
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
	prRing->pBuffer = pBuffer + sizeof(*prRing);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f103 0210 	add.w	r2, r3, #16
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]

	return (thRing)prRing;
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	080174ec 	.word	0x080174ec
 8002da8:	08017b84 	.word	0x08017b84
 8002dac:	080174d8 	.word	0x080174d8
 8002db0:	080174fc 	.word	0x080174fc

08002db4 <ringEmpty>:
//
// @param hRing handle to ring structure
// @return true = empty, false = not empty
//
bool ringEmpty(thRing hRing)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
	trRing *prRing = (trRing*)hRing;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <ringEmpty+0x38>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <ringEmpty+0x3c>)
 8002dd2:	2272      	movs	r2, #114	@ 0x72
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <ringEmpty+0x40>)
 8002dd6:	f7fe fc2f 	bl	8001638 <logAssert>

	return empty(prRing);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff ff22 	bl	8002c24 <empty>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	080174ec 	.word	0x080174ec
 8002df0:	08017b90 	.word	0x08017b90
 8002df4:	080174d8 	.word	0x080174d8

08002df8 <ringWrite>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return number of bytes written
//
uint32_t ringWrite(thRing hRing, const char *pBuffer, const uint32_t length)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	uint32_t  bytes  = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
	trRing   *prRing = (trRing*)hRing;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	613b      	str	r3, [r7, #16]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2d8      	uxtb	r0, r3
 8002e18:	4b1c      	ldr	r3, [pc, #112]	@ (8002e8c <ringWrite+0x94>)
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e90 <ringWrite+0x98>)
 8002e1e:	22a5      	movs	r2, #165	@ 0xa5
 8002e20:	491c      	ldr	r1, [pc, #112]	@ (8002e94 <ringWrite+0x9c>)
 8002e22:	f7fe fc09 	bl	8001638 <logAssert>

    // Check free space.
    if (space(prRing) >= length)
 8002e26:	6938      	ldr	r0, [r7, #16]
 8002e28:	f7ff ff4c 	bl	8002cc4 <space>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d825      	bhi.n	8002e80 <ringWrite+0x88>
    {
        // Write buffer to ring.
        while (!full(prRing) && (bytes < length))
 8002e34:	e017      	b.n	8002e66 <ringWrite+0x6e>
        {
            // Write character.
            prRing->pBuffer[prRing->head] = pBuffer[bytes++];
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	617a      	str	r2, [r7, #20]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	441a      	add	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	68d9      	ldr	r1, [r3, #12]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	440b      	add	r3, r1
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	701a      	strb	r2, [r3, #0]

            // Update head index.
            prRing->head = (prRing->head + 1) % prRing->length;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e5c:	fb01 f202 	mul.w	r2, r1, r2
 8002e60:	1a9a      	subs	r2, r3, r2
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	601a      	str	r2, [r3, #0]
        while (!full(prRing) && (bytes < length))
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f7ff ff00 	bl	8002c6c <full>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <ringWrite+0x88>
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3da      	bcc.n	8002e36 <ringWrite+0x3e>
        }
    }

	return bytes;
 8002e80:	697b      	ldr	r3, [r7, #20]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	080174ec 	.word	0x080174ec
 8002e90:	08017bb4 	.word	0x08017bb4
 8002e94:	080174d8 	.word	0x080174d8

08002e98 <ringRead>:
// @param pBuffer pointer to buffer.
// @param length length of buffer in bytes
// @return number of bytes read
//
uint32_t ringRead(thRing hRing, char *pBuffer, const uint32_t length)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	uint32_t  bytes  = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
	trRing   *prRing = (trRing*)hRing;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	613b      	str	r3, [r7, #16]

	// Validate argument[s].
	ASSERT(NULL != prRing);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2d8      	uxtb	r0, r3
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <ringRead+0xa0>)
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <ringRead+0xa4>)
 8002ebe:	22c6      	movs	r2, #198	@ 0xc6
 8002ec0:	491f      	ldr	r1, [pc, #124]	@ (8002f40 <ringRead+0xa8>)
 8002ec2:	f7fe fbb9 	bl	8001638 <logAssert>
	ASSERT(length > 0);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2d8      	uxtb	r0, r3
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <ringRead+0xac>)
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4b19      	ldr	r3, [pc, #100]	@ (8002f3c <ringRead+0xa4>)
 8002ed8:	22c7      	movs	r2, #199	@ 0xc7
 8002eda:	4919      	ldr	r1, [pc, #100]	@ (8002f40 <ringRead+0xa8>)
 8002edc:	f7fe fbac 	bl	8001638 <logAssert>

	// Read buffer from ring.
	while (!empty(prRing) && (bytes < length))
 8002ee0:	e017      	b.n	8002f12 <ringRead+0x7a>
	{
		// Read character.
		pBuffer[bytes++] = prRing->pBuffer[prRing->tail];
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	441a      	add	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	6179      	str	r1, [r7, #20]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	440b      	add	r3, r1
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	701a      	strb	r2, [r3, #0]

		// Update tail index.
		prRing->tail = (prRing->tail + 1) % prRing->length;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	6892      	ldr	r2, [r2, #8]
 8002f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f08:	fb01 f202 	mul.w	r2, r1, r2
 8002f0c:	1a9a      	subs	r2, r3, r2
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	605a      	str	r2, [r3, #4]
	while (!empty(prRing) && (bytes < length))
 8002f12:	6938      	ldr	r0, [r7, #16]
 8002f14:	f7ff fe86 	bl	8002c24 <empty>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <ringRead+0x94>
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3da      	bcc.n	8002ee2 <ringRead+0x4a>
	}

	return bytes;
 8002f2c:	697b      	ldr	r3, [r7, #20]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	080174ec 	.word	0x080174ec
 8002f3c:	08017bc0 	.word	0x08017bc0
 8002f40:	080174d8 	.word	0x080174d8
 8002f44:	080174fc 	.word	0x080174fc

08002f48 <command>:
//
// @param pString pointer to null terminated command line
// @return enumerated error code
//
static teError command(char *pString)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0a4      	sub	sp, #144	@ 0x90
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    uint32_t  index;
    int       argc;
    char 	 *argv[SHELL_CMD_ARGS_MAX];

    // Tokenize command line.
    argv[argc = 0] = strtok(pString, " ");
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f56:	493a      	ldr	r1, [pc, #232]	@ (8003040 <command+0xf8>)
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f011 ff83 	bl	8014e64 <strtok>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	3390      	adds	r3, #144	@ 0x90
 8002f68:	443b      	add	r3, r7
 8002f6a:	f843 2c88 	str.w	r2, [r3, #-136]
    while ((argc < (int)DIM(argv)) && (NULL != argv[argc]))
 8002f6e:	e010      	b.n	8002f92 <command+0x4a>
    {
        //lint -save -e661
        argv[++argc] = strtok(NULL, " ");
 8002f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f74:	3301      	adds	r3, #1
 8002f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f7a:	4931      	ldr	r1, [pc, #196]	@ (8003040 <command+0xf8>)
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f011 ff71 	bl	8014e64 <strtok>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3390      	adds	r3, #144	@ 0x90
 8002f8c:	443b      	add	r3, r7
 8002f8e:	f843 2c88 	str.w	r2, [r3, #-136]
    while ((argc < (int)DIM(argv)) && (NULL != argv[argc]))
 8002f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f96:	2b1f      	cmp	r3, #31
 8002f98:	dc08      	bgt.n	8002fac <command+0x64>
 8002f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3390      	adds	r3, #144	@ 0x90
 8002fa2:	443b      	add	r3, r7
 8002fa4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e1      	bne.n	8002f70 <command+0x28>
        //lint -restore
    }

    // Check for no command.
    if (0 == argc)
 8002fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <command+0x70>
    {
        return eErrorNone;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e03e      	b.n	8003036 <command+0xee>
    }

    // Iterate over commands.
    for (index = 0; index < DIM(grCmd); index++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fbe:	e035      	b.n	800302c <command+0xe4>
    {
        // Check for matching string.
        if (0 == strcmp(argv[0], grCmd[index].name))
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fc6:	21a8      	movs	r1, #168	@ 0xa8
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	491d      	ldr	r1, [pc, #116]	@ (8003044 <command+0xfc>)
 8002fce:	440b      	add	r3, r1
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7fd f96f 	bl	80002b8 <strcmp>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d120      	bne.n	8003022 <command+0xda>
        {
            // Check for minimum arguments.
            if (argc < (int)grCmd[index].minArgs)
 8002fe0:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <command+0xfc>)
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe6:	21a8      	movs	r1, #168	@ 0xa8
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	33a0      	adds	r3, #160	@ 0xa0
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	da01      	bge.n	8003000 <command+0xb8>
            {
                return eErrorArgument;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e01a      	b.n	8003036 <command+0xee>
            }

            // Execute command.
            return grCmd[index].pCmd(argc, argv);
 8003000:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <command+0xfc>)
 8003002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003006:	21a8      	movs	r1, #168	@ 0xa8
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	33a4      	adds	r3, #164	@ 0xa4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f107 0208 	add.w	r2, r7, #8
 8003016:	4611      	mov	r1, r2
 8003018:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800301c:	4798      	blx	r3
 800301e:	4603      	mov	r3, r0
 8003020:	e009      	b.n	8003036 <command+0xee>
    for (index = 0; index < DIM(grCmd); index++)
 8003022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003026:	3301      	adds	r3, #1
 8003028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800302c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003030:	2b27      	cmp	r3, #39	@ 0x27
 8003032:	d9c5      	bls.n	8002fc0 <command+0x78>
        }
    }

    return eErrorUnsupported;
 8003034:	2321      	movs	r3, #33	@ 0x21
}
 8003036:	4618      	mov	r0, r3
 8003038:	3790      	adds	r7, #144	@ 0x90
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	08017508 	.word	0x08017508
 8003044:	2000289c 	.word	0x2000289c

08003048 <clear>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError clear(int argc, char *argv[])
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
    bspPrintf(VT100_CLEAR_SCREEN);
 8003052:	4804      	ldr	r0, [pc, #16]	@ (8003064 <clear+0x1c>)
 8003054:	f7fe f94e 	bl	80012f4 <bspPrintf>

    return eErrorNone;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	0801750c 	.word	0x0801750c

08003068 <build>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError build(int argc, char *argv[])
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
    bspPrintf("\r\n%s %s", __DATE__, __TIME__);
 8003072:	4a05      	ldr	r2, [pc, #20]	@ (8003088 <build+0x20>)
 8003074:	4905      	ldr	r1, [pc, #20]	@ (800308c <build+0x24>)
 8003076:	4806      	ldr	r0, [pc, #24]	@ (8003090 <build+0x28>)
 8003078:	f7fe f93c 	bl	80012f4 <bspPrintf>

    return eErrorNone;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	08017514 	.word	0x08017514
 800308c:	08017520 	.word	0x08017520
 8003090:	0801752c 	.word	0x0801752c

08003094 <comment>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError comment(int argc, char *argv[])
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    return eErrorNone;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <delay>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError delay(int argc, char *argv[])
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
    uint32_t milliseconds;

    // Parse command line.
    milliseconds = strtol(argv[1], NULL, 0);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3304      	adds	r3, #4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f010 ff1d 	bl	8013f00 <strtol>
 80030c6:	4603      	mov	r3, r0
 80030c8:	60fb      	str	r3, [r7, #12]

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <delay+0x2a>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	e000      	b.n	80030d8 <delay+0x2c>
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]

	// Wait a bit.
	bspMillisecondDelay(milliseconds);
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fe f806 	bl	80010ec <bspMillisecondDelay>

    return eErrorNone;
 80030e0:	2300      	movs	r3, #0

}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <error>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError error(int argc, char *argv[])
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
	static trLogError rError;

	// Dump error history.
    while (logErrorHistory(&rError))
 80030f6:	e008      	b.n	800310a <error+0x1e>
	{
		bspPrintf("\r\n%d,%s,%lu", rError.eError, rError.file, rError.line);
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <error+0x34>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <error+0x34>)
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <error+0x38>)
 8003104:	4808      	ldr	r0, [pc, #32]	@ (8003128 <error+0x3c>)
 8003106:	f7fe f8f5 	bl	80012f4 <bspPrintf>
    while (logErrorHistory(&rError))
 800310a:	4805      	ldr	r0, [pc, #20]	@ (8003120 <error+0x34>)
 800310c:	f7fe fc10 	bl	8001930 <logErrorHistory>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <error+0xc>
	}

	return eErrorNone;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	200042dc 	.word	0x200042dc
 8003124:	200042dd 	.word	0x200042dd
 8003128:	08017534 	.word	0x08017534

0800312c <help>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError help(int argc, char *argv[])
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
    uint32_t index;

    // Check for specific command.
    if (2 == argc)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d13c      	bne.n	80031b6 <help+0x8a>
    {
        // Iterate over commands.
        for (index = 0; index < DIM(grCmd); index++)
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e034      	b.n	80031ac <help+0x80>
        {
            // Check for matching string.
            if (0 == strcmp(argv[1], grCmd[index].name))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3304      	adds	r3, #4
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	21a8      	movs	r1, #168	@ 0xa8
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4931      	ldr	r1, [pc, #196]	@ (8003218 <help+0xec>)
 8003152:	440b      	add	r3, r1
 8003154:	3301      	adds	r3, #1
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fd f8ad 	bl	80002b8 <strcmp>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d120      	bne.n	80031a6 <help+0x7a>
            {
                // Print command usage.
                bspPrintf("\r\n%s %s", grCmd[index].name,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	22a8      	movs	r2, #168	@ 0xa8
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <help+0xec>)
 800316e:	4413      	add	r3, r2
 8003170:	1c59      	adds	r1, r3, #1
                    grCmd[index].arguments);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	22a8      	movs	r2, #168	@ 0xa8
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	3308      	adds	r3, #8
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <help+0xec>)
 800317e:	4413      	add	r3, r2
 8003180:	3301      	adds	r3, #1
                bspPrintf("\r\n%s %s", grCmd[index].name,
 8003182:	461a      	mov	r2, r3
 8003184:	4825      	ldr	r0, [pc, #148]	@ (800321c <help+0xf0>)
 8003186:	f7fe f8b5 	bl	80012f4 <bspPrintf>
                bspPrintf("\r\n%s", grCmd[index].detail);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	22a8      	movs	r2, #168	@ 0xa8
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	3348      	adds	r3, #72	@ 0x48
 8003194:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <help+0xec>)
 8003196:	4413      	add	r3, r2
 8003198:	3305      	adds	r3, #5
 800319a:	4619      	mov	r1, r3
 800319c:	4820      	ldr	r0, [pc, #128]	@ (8003220 <help+0xf4>)
 800319e:	f7fe f8a9 	bl	80012f4 <bspPrintf>

                return eErrorNone;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e034      	b.n	8003210 <help+0xe4>
        for (index = 0; index < DIM(grCmd); index++)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b27      	cmp	r3, #39	@ 0x27
 80031b0:	d9c7      	bls.n	8003142 <help+0x16>
            }
        }

        return eErrorArgument;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e02c      	b.n	8003210 <help+0xe4>
    }

    // Iterate over commands.
    for (index = 0; index < DIM(grCmd); index++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e025      	b.n	8003208 <help+0xdc>
    {
        // Print command usage.
    	if (grCmd[index].allocated)
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <help+0xec>)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	21a8      	movs	r1, #168	@ 0xa8
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <help+0xd6>
    	{
			bspPrintf("\r\n%8s %-40s %-28s", grCmd[index].name,
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	22a8      	movs	r2, #168	@ 0xa8
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <help+0xec>)
 80031d8:	4413      	add	r3, r2
 80031da:	1c59      	adds	r1, r3, #1
				grCmd[index].arguments, grCmd[index].description);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	22a8      	movs	r2, #168	@ 0xa8
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	3308      	adds	r3, #8
 80031e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003218 <help+0xec>)
 80031e8:	4413      	add	r3, r2
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	20a8      	movs	r0, #168	@ 0xa8
 80031f0:	fb00 f303 	mul.w	r3, r0, r3
 80031f4:	3330      	adds	r3, #48	@ 0x30
 80031f6:	4808      	ldr	r0, [pc, #32]	@ (8003218 <help+0xec>)
 80031f8:	4403      	add	r3, r0
 80031fa:	3301      	adds	r3, #1
			bspPrintf("\r\n%8s %-40s %-28s", grCmd[index].name,
 80031fc:	4809      	ldr	r0, [pc, #36]	@ (8003224 <help+0xf8>)
 80031fe:	f7fe f879 	bl	80012f4 <bspPrintf>
    for (index = 0; index < DIM(grCmd); index++)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b27      	cmp	r3, #39	@ 0x27
 800320c:	d9d6      	bls.n	80031bc <help+0x90>
    	}
    }

    return eErrorNone;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	2000289c 	.word	0x2000289c
 800321c:	0801752c 	.word	0x0801752c
 8003220:	08017540 	.word	0x08017540
 8003224:	08017548 	.word	0x08017548

08003228 <i2cRead>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError i2cRead(int argc, char *argv[])
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    uint8_t      address;
    uint16_t     index;
    uint16_t     length;

    // Parse arguments.
    address  = (uint8_t)strtol(argv[1], NULL, 0);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3304      	adds	r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f010 fe5f 	bl	8013f00 <strtol>
 8003242:	4603      	mov	r3, r0
 8003244:	757b      	strb	r3, [r7, #21]
    length   = (uint16_t)strtol(argv[2], NULL, 0);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	3308      	adds	r3, #8
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f010 fe55 	bl	8013f00 <strtol>
 8003256:	4603      	mov	r3, r0
 8003258:	827b      	strh	r3, [r7, #18]

    // Santize length.
    length   = (length > sizeof(buffer)) ? sizeof(buffer) : length;
 800325a:	8a7b      	ldrh	r3, [r7, #18]
 800325c:	2b04      	cmp	r3, #4
 800325e:	bf28      	it	cs
 8003260:	2304      	movcs	r3, #4
 8003262:	827b      	strh	r3, [r7, #18]

    // Read bus.
    if (!bspI2cRead(address, buffer, length))
 8003264:	8a7a      	ldrh	r2, [r7, #18]
 8003266:	f107 010c 	add.w	r1, r7, #12
 800326a:	7d7b      	ldrb	r3, [r7, #21]
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd ff49 	bl	8001104 <bspI2cRead>
 8003272:	4603      	mov	r3, r0
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <i2cRead+0x5a>
    {
        return eErrorTimeout;
 800327e:	231f      	movs	r3, #31
 8003280:	e016      	b.n	80032b0 <i2cRead+0x88>
    }

    // Print data.
    bspPrintf("\r\n");
 8003282:	480d      	ldr	r0, [pc, #52]	@ (80032b8 <i2cRead+0x90>)
 8003284:	f7fe f836 	bl	80012f4 <bspPrintf>
    for (index = 0; index < length; index++)
 8003288:	2300      	movs	r3, #0
 800328a:	82fb      	strh	r3, [r7, #22]
 800328c:	e00b      	b.n	80032a6 <i2cRead+0x7e>
    {
        bspPrintf("0x%02x ", buffer[index]);
 800328e:	8afb      	ldrh	r3, [r7, #22]
 8003290:	3318      	adds	r3, #24
 8003292:	443b      	add	r3, r7
 8003294:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003298:	4619      	mov	r1, r3
 800329a:	4808      	ldr	r0, [pc, #32]	@ (80032bc <i2cRead+0x94>)
 800329c:	f7fe f82a 	bl	80012f4 <bspPrintf>
    for (index = 0; index < length; index++)
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	3301      	adds	r3, #1
 80032a4:	82fb      	strh	r3, [r7, #22]
 80032a6:	8afa      	ldrh	r2, [r7, #22]
 80032a8:	8a7b      	ldrh	r3, [r7, #18]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d3ef      	bcc.n	800328e <i2cRead+0x66>
    }

    return eErrorNone;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	0801755c 	.word	0x0801755c
 80032bc:	08017560 	.word	0x08017560

080032c0 <i2cWrite>:
// @param argc argument count
// @param argv pointer to array of pointers to null terminated argument strings
// @return enumerated error code
//
static teError i2cWrite(int argc, char *argv[])
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    uint8_t      buffer[BSP_I2C_BUFFER_MAX];
    uint8_t      address;
    uint16_t     length;

    // Parse arguments.
    address = (uint8_t)strtol(argv[1], NULL, 0);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	3304      	adds	r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f010 fe13 	bl	8013f00 <strtol>
 80032da:	4603      	mov	r3, r0
 80032dc:	737b      	strb	r3, [r7, #13]
    for (length = 0; ((length + 2) < argc) &&
 80032de:	2300      	movs	r3, #0
 80032e0:	81fb      	strh	r3, [r7, #14]
 80032e2:	e014      	b.n	800330e <i2cWrite+0x4e>
        (length < sizeof(buffer)); length++)
    {
        buffer[length] = (uint8_t)strtol(argv[length + 2], NULL, 0);
 80032e4:	89fb      	ldrh	r3, [r7, #14]
 80032e6:	3302      	adds	r3, #2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4413      	add	r3, r2
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f010 fe03 	bl	8013f00 <strtol>
 80032fa:	4602      	mov	r2, r0
 80032fc:	89fb      	ldrh	r3, [r7, #14]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	3310      	adds	r3, #16
 8003302:	443b      	add	r3, r7
 8003304:	f803 2c08 	strb.w	r2, [r3, #-8]
        (length < sizeof(buffer)); length++)
 8003308:	89fb      	ldrh	r3, [r7, #14]
 800330a:	3301      	adds	r3, #1
 800330c:	81fb      	strh	r3, [r7, #14]
    for (length = 0; ((length + 2) < argc) &&
 800330e:	89fb      	ldrh	r3, [r7, #14]
 8003310:	3302      	adds	r3, #2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	dd02      	ble.n	800331e <i2cWrite+0x5e>
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d9e2      	bls.n	80032e4 <i2cWrite+0x24>
    }

    // Write channel.
    if (!bspI2cWrite(address, buffer, length))
 800331e:	89fa      	ldrh	r2, [r7, #14]
 8003320:	f107 0108 	add.w	r1, r7, #8
 8003324:	7b7b      	ldrb	r3, [r7, #13]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd ff2c 	bl	8001184 <bspI2cWrite>
 800332c:	4603      	mov	r3, r0
 800332e:	f083 0301 	eor.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <i2cWrite+0x7c>
    {
        return eErrorTimeout;
 8003338:	231f      	movs	r3, #31
 800333a:	e000      	b.n	800333e <i2cWrite+0x7e>
    }

    return eErrorNone;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <monitor>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError monitor(int argc, char *argv[])
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0ae      	sub	sp, #184	@ 0xb8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    char    	   	   buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Parse command line.
    milliseconds = strtol(argv[1], NULL, 0);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f010 fdcf 	bl	8013f00 <strtol>
 8003362:	4603      	mov	r3, r0
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 8003368:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <monitor+0x30>
 8003370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003374:	3b01      	subs	r3, #1
 8003376:	e000      	b.n	800337a <monitor+0x32>
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // Wait for user abort.
    while (bspConsoleEmpty())
 800337e:	e045      	b.n	800340c <monitor+0xc4>
    {
        // Clear screen and place cursor in home position.
        bspPrintf(VT100_CLEAR_SCREEN);
 8003380:	4827      	ldr	r0, [pc, #156]	@ (8003420 <monitor+0xd8>)
 8003382:	f7fd ffb7 	bl	80012f4 <bspPrintf>
        bspPrintf(VT100_CURSOR_HOME);
 8003386:	4827      	ldr	r0, [pc, #156]	@ (8003424 <monitor+0xdc>)
 8003388:	f7fd ffb4 	bl	80012f4 <bspPrintf>

        // Build command buffer.
        memset(buffer, 0, sizeof(buffer));
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	22a0      	movs	r2, #160	@ 0xa0
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f011 fd37 	bl	8014e08 <memset>
        for (index = 2; index < argc; index++)
 800339a:	2302      	movs	r3, #2
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a0:	e018      	b.n	80033d4 <monitor+0x8c>
        {
            strncat(buffer, argv[index], sizeof(buffer)-1);
 80033a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	229f      	movs	r2, #159	@ 0x9f
 80033b4:	4618      	mov	r0, r3
 80033b6:	f011 fd2f 	bl	8014e18 <strncat>
            strncat(buffer, pSpace, sizeof(buffer)-1);
 80033ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <monitor+0xe0>)
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	229f      	movs	r2, #159	@ 0x9f
 80033c4:	4618      	mov	r0, r3
 80033c6:	f011 fd27 	bl	8014e18 <strncat>
        for (index = 2; index < argc; index++)
 80033ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033ce:	3301      	adds	r3, #1
 80033d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	dbe1      	blt.n	80033a2 <monitor+0x5a>
        }

        // Execute command.
        if (eErrorNone != (eError = command(buffer)))
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fdb0 	bl	8002f48 <command>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80033ee:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <monitor+0xb4>
        {
            return eError;
 80033f6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80033fa:	e00d      	b.n	8003418 <monitor+0xd0>
        }

        // Wait for specified time.
        bspMillisecondDelay(milliseconds);
 80033fc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003400:	f7fd fe74 	bl	80010ec <bspMillisecondDelay>

        // Service timers.
        timerService();
 8003404:	f002 fa0a 	bl	800581c <timerService>

        // Try to drain stdout.
        bspConsoleFlush();
 8003408:	f7fd fe05 	bl	8001016 <bspConsoleFlush>
    while (bspConsoleEmpty())
 800340c:	f7fd fdf7 	bl	8000ffe <bspConsoleEmpty>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1b4      	bne.n	8003380 <monitor+0x38>
    }

    return eErrorNone;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	37b8      	adds	r7, #184	@ 0xb8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	0801750c 	.word	0x0801750c
 8003424:	08017568 	.word	0x08017568
 8003428:	20000180 	.word	0x20000180

0800342c <memRead>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError memRead(int argc, char *argv[])
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08e      	sub	sp, #56	@ 0x38
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	uint8_t  *pByte;
	uint16_t *pHalf;
	uint32_t *pWord;

    // Set defaults.
    width  = 'w';
 8003436:	2377      	movs	r3, #119	@ 0x77
 8003438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    length = 1;
 800343c:	2301      	movs	r3, #1
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Parse arguments.
    address = strtol(argv[1], NULL, 0);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	3304      	adds	r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f010 fd58 	bl	8013f00 <strtol>
 8003450:	4603      	mov	r3, r0
 8003452:	61bb      	str	r3, [r7, #24]
    if (argc > 2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	dd0e      	ble.n	8003478 <memRead+0x4c>
    {
    	length = strtol(argv[2], NULL, 0);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f010 fd4b 	bl	8013f00 <strtol>
 800346a:	4603      	mov	r3, r0
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (0 == length)
 800346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <memRead+0x4c>
        {
            return eErrorArgument;
 8003474:	2303      	movs	r3, #3
 8003476:	e0f5      	b.n	8003664 <memRead+0x238>
        }
    }
    if (argc > 3)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b03      	cmp	r3, #3
 800347c:	dd05      	ble.n	800348a <memRead+0x5e>
    {
        width = *argv[3];
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Assign address types.
    pByte = (uint8_t*)address;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
    pHalf = (uint16_t*)address;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	623b      	str	r3, [r7, #32]
    pWord = (uint32_t*)address;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	61fb      	str	r3, [r7, #28]

    // Read and display memory contents.
    memset(buffer, 0, sizeof(buffer));
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	2210      	movs	r2, #16
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f011 fcb2 	bl	8014e08 <memset>
    for (index = 0; bspConsoleEmpty() && (index < length); index++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a8:	e08e      	b.n	80035c8 <memRead+0x19c>
    {
        // Process width.
        switch (width)
 80034aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ae:	2b77      	cmp	r3, #119	@ 0x77
 80034b0:	d06b      	beq.n	800358a <memRead+0x15e>
 80034b2:	2b77      	cmp	r3, #119	@ 0x77
 80034b4:	f300 8083 	bgt.w	80035be <memRead+0x192>
 80034b8:	2b62      	cmp	r3, #98	@ 0x62
 80034ba:	d002      	beq.n	80034c2 <memRead+0x96>
 80034bc:	2b68      	cmp	r3, #104	@ 0x68
 80034be:	d04a      	beq.n	8003556 <memRead+0x12a>
 80034c0:	e07d      	b.n	80035be <memRead+0x192>
        {
            case 'b':
                if (0 == index%sizeof(buffer))
 80034c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d12b      	bne.n	8003524 <memRead+0xf8>
                {
                    if (index > 0)
 80034cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d023      	beq.n	800351a <memRead+0xee>
                    {
                        bspPrintf(" ");
 80034d2:	4866      	ldr	r0, [pc, #408]	@ (800366c <memRead+0x240>)
 80034d4:	f7fd ff0e 	bl	80012f4 <bspPrintf>
                        for (offset = 0; offset < sizeof(buffer); offset++)
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
 80034dc:	e01a      	b.n	8003514 <memRead+0xe8>
                        {
                            bspPrintf("%c",
                                (isprint(buffer[offset])) ?
 80034de:	f107 0208 	add.w	r2, r7, #8
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a61      	ldr	r2, [pc, #388]	@ (8003670 <memRead+0x244>)
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f003 0397 	and.w	r3, r3, #151	@ 0x97
                            bspPrintf("%c",
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <memRead+0xd8>
                                buffer[offset] : '.');
 80034f8:	f107 0208 	add.w	r2, r7, #8
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	e000      	b.n	8003506 <memRead+0xda>
                            bspPrintf("%c",
 8003504:	232e      	movs	r3, #46	@ 0x2e
 8003506:	4619      	mov	r1, r3
 8003508:	485a      	ldr	r0, [pc, #360]	@ (8003674 <memRead+0x248>)
 800350a:	f7fd fef3 	bl	80012f4 <bspPrintf>
                        for (offset = 0; offset < sizeof(buffer); offset++)
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	3301      	adds	r3, #1
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d9e1      	bls.n	80034de <memRead+0xb2>
                        }
                    }
                    bspPrintf("\r\n%08lx: ", (uint32_t)pByte);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	4619      	mov	r1, r3
 800351e:	4856      	ldr	r0, [pc, #344]	@ (8003678 <memRead+0x24c>)
 8003520:	f7fd fee8 	bl	80012f4 <bspPrintf>
                }
                buffer[index%sizeof(buffer)] = (char)*pByte++;
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	627a      	str	r2, [r7, #36]	@ 0x24
 800352a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800352c:	f002 020f 	and.w	r2, r2, #15
 8003530:	7819      	ldrb	r1, [r3, #0]
 8003532:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 8003536:	443b      	add	r3, r7
 8003538:	460a      	mov	r2, r1
 800353a:	f803 2c30 	strb.w	r2, [r3, #-48]
                bspPrintf("%02x ", buffer[index%sizeof(buffer)] & 0xff);
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	3338      	adds	r3, #56	@ 0x38
 8003546:	443b      	add	r3, r7
 8003548:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800354c:	4619      	mov	r1, r3
 800354e:	484b      	ldr	r0, [pc, #300]	@ (800367c <memRead+0x250>)
 8003550:	f7fd fed0 	bl	80012f4 <bspPrintf>
                break;
 8003554:	e035      	b.n	80035c2 <memRead+0x196>

            case 'h':
                if (0 != address%(sizeof(uint16_t)))
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <memRead+0x138>
                {
                    return eErrorArgument;
 8003560:	2303      	movs	r3, #3
 8003562:	e07f      	b.n	8003664 <memRead+0x238>
                }
                if (0 == index%(sizeof(buffer)/sizeof(uint16_t)))
 8003564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <memRead+0x14c>
                {
                    bspPrintf("\r\n%08lx: ", (uint32_t)pHalf);
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	4619      	mov	r1, r3
 8003572:	4841      	ldr	r0, [pc, #260]	@ (8003678 <memRead+0x24c>)
 8003574:	f7fd febe 	bl	80012f4 <bspPrintf>
                }
                bspPrintf("%04x ", *pHalf++);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	623a      	str	r2, [r7, #32]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	483f      	ldr	r0, [pc, #252]	@ (8003680 <memRead+0x254>)
 8003584:	f7fd feb6 	bl	80012f4 <bspPrintf>
                break;
 8003588:	e01b      	b.n	80035c2 <memRead+0x196>

            case 'w':
                    if (0 != address%(sizeof(uint32_t)))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <memRead+0x16c>
                    {
                        return eErrorArgument;
 8003594:	2303      	movs	r3, #3
 8003596:	e065      	b.n	8003664 <memRead+0x238>
                    }
                    if (0 == index%(sizeof(buffer)/sizeof(uint32_t)))
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <memRead+0x180>
                    {
                        bspPrintf("\r\n%08lx: ", (uint32_t)pWord);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4619      	mov	r1, r3
 80035a6:	4834      	ldr	r0, [pc, #208]	@ (8003678 <memRead+0x24c>)
 80035a8:	f7fd fea4 	bl	80012f4 <bspPrintf>
                    }
                    bspPrintf("%08lx ", *pWord++);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	61fa      	str	r2, [r7, #28]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	4833      	ldr	r0, [pc, #204]	@ (8003684 <memRead+0x258>)
 80035b8:	f7fd fe9c 	bl	80012f4 <bspPrintf>
                    break;
 80035bc:	e001      	b.n	80035c2 <memRead+0x196>

            default:
                    return eErrorArgument;
 80035be:	2303      	movs	r3, #3
 80035c0:	e050      	b.n	8003664 <memRead+0x238>
    for (index = 0; bspConsoleEmpty() && (index < length); index++)
 80035c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c4:	3301      	adds	r3, #1
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c8:	f7fd fd19 	bl	8000ffe <bspConsoleEmpty>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <memRead+0x1b0>
 80035d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	429a      	cmp	r2, r3
 80035d8:	f4ff af67 	bcc.w	80034aa <memRead+0x7e>
        }
    }

    // Print remaining character line.
    if ('b' == width)
 80035dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035e0:	2b62      	cmp	r3, #98	@ 0x62
 80035e2:	d13e      	bne.n	8003662 <memRead+0x236>
    {
        bspPrintf(" ");
 80035e4:	4821      	ldr	r0, [pc, #132]	@ (800366c <memRead+0x240>)
 80035e6:	f7fd fe85 	bl	80012f4 <bspPrintf>
        length = length%sizeof(buffer);
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        length = (0 == length) ? sizeof(buffer) : length;
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <memRead+0x1d0>
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	e000      	b.n	80035fe <memRead+0x1d2>
 80035fc:	2310      	movs	r3, #16
 80035fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (index = 0; index < (sizeof(buffer)-length); index++)
 8003600:	2300      	movs	r3, #0
 8003602:	637b      	str	r3, [r7, #52]	@ 0x34
 8003604:	e005      	b.n	8003612 <memRead+0x1e6>
        {
            bspPrintf("   ");
 8003606:	4820      	ldr	r0, [pc, #128]	@ (8003688 <memRead+0x25c>)
 8003608:	f7fd fe74 	bl	80012f4 <bspPrintf>
        for (index = 0; index < (sizeof(buffer)-length); index++)
 800360c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360e:	3301      	adds	r3, #1
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
 8003612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003614:	f1c3 0310 	rsb	r3, r3, #16
 8003618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800361a:	429a      	cmp	r2, r3
 800361c:	d3f3      	bcc.n	8003606 <memRead+0x1da>
        }
        for (offset = 0; offset < length; offset++)
 800361e:	2300      	movs	r3, #0
 8003620:	633b      	str	r3, [r7, #48]	@ 0x30
 8003622:	e01a      	b.n	800365a <memRead+0x22e>
        {
            bspPrintf("%c", (isprint(buffer[offset])) ?
 8003624:	f107 0208 	add.w	r2, r7, #8
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a0f      	ldr	r2, [pc, #60]	@ (8003670 <memRead+0x244>)
 8003632:	4413      	add	r3, r2
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <memRead+0x21e>
                buffer[offset] : '.');
 800363e:	f107 0208 	add.w	r2, r7, #8
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	4413      	add	r3, r2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	e000      	b.n	800364c <memRead+0x220>
            bspPrintf("%c", (isprint(buffer[offset])) ?
 800364a:	232e      	movs	r3, #46	@ 0x2e
 800364c:	4619      	mov	r1, r3
 800364e:	4809      	ldr	r0, [pc, #36]	@ (8003674 <memRead+0x248>)
 8003650:	f7fd fe50 	bl	80012f4 <bspPrintf>
        for (offset = 0; offset < length; offset++)
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	3301      	adds	r3, #1
 8003658:	633b      	str	r3, [r7, #48]	@ 0x30
 800365a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	429a      	cmp	r2, r3
 8003660:	d3e0      	bcc.n	8003624 <memRead+0x1f8>
        }
    }

    return eErrorNone;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3738      	adds	r7, #56	@ 0x38
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08017508 	.word	0x08017508
 8003670:	08017d20 	.word	0x08017d20
 8003674:	0801756c 	.word	0x0801756c
 8003678:	08017570 	.word	0x08017570
 800367c:	0801757c 	.word	0x0801757c
 8003680:	08017584 	.word	0x08017584
 8003684:	0801758c 	.word	0x0801758c
 8003688:	08017594 	.word	0x08017594

0800368c <memWrite>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError memWrite(int argc, char *argv[])
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	uint16_t *pHalf;
	uint32_t *pWord;


    // Set defaults.
    width  = 'w';
 8003696:	2377      	movs	r3, #119	@ 0x77
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    length = 1;
 800369c:	2301      	movs	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]

    // Parse arguments.
    address = strtol(argv[1], NULL, 0);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	3304      	adds	r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f010 fc28 	bl	8013f00 <strtol>
 80036b0:	4603      	mov	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]
    value   = strtol(argv[2], NULL, 0);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	3308      	adds	r3, #8
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f010 fc1e 	bl	8013f00 <strtol>
 80036c4:	4603      	mov	r3, r0
 80036c6:	60bb      	str	r3, [r7, #8]
    if (argc > 3)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	dd09      	ble.n	80036e2 <memWrite+0x56>
    {
        length = strtol(argv[3], NULL, 0);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f010 fc11 	bl	8013f00 <strtol>
 80036de:	4603      	mov	r3, r0
 80036e0:	61fb      	str	r3, [r7, #28]
    }
    if (argc > 4)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	dd05      	ble.n	80036f4 <memWrite+0x68>
    {
        width = *argv[4];
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	3310      	adds	r3, #16
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Assign address types.
    pByte = (uint8_t*)address;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	61bb      	str	r3, [r7, #24]
    pHalf = (uint16_t*)address;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	617b      	str	r3, [r7, #20]
    pWord = (uint32_t*)address;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	613b      	str	r3, [r7, #16]

    // Write to memory.
    for (index = 0; index < length; index++)
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
 8003704:	e023      	b.n	800374e <memWrite+0xc2>
    {
        // Process width.
        switch (width)
 8003706:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800370a:	2b77      	cmp	r3, #119	@ 0x77
 800370c:	d014      	beq.n	8003738 <memWrite+0xac>
 800370e:	2b77      	cmp	r3, #119	@ 0x77
 8003710:	dc18      	bgt.n	8003744 <memWrite+0xb8>
 8003712:	2b62      	cmp	r3, #98	@ 0x62
 8003714:	d002      	beq.n	800371c <memWrite+0x90>
 8003716:	2b68      	cmp	r3, #104	@ 0x68
 8003718:	d007      	beq.n	800372a <memWrite+0x9e>
 800371a:	e013      	b.n	8003744 <memWrite+0xb8>
        {
            case 'b':
            	*pByte++ = value;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	61ba      	str	r2, [r7, #24]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]
                break;
 8003728:	e00e      	b.n	8003748 <memWrite+0xbc>

            case 'h':
            	*pHalf++ = value;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	617a      	str	r2, [r7, #20]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	b292      	uxth	r2, r2
 8003734:	801a      	strh	r2, [r3, #0]
                break;
 8003736:	e007      	b.n	8003748 <memWrite+0xbc>

            case 'w':
            	*pWord++ = value;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	613a      	str	r2, [r7, #16]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	601a      	str	r2, [r3, #0]
                break;
 8003742:	e001      	b.n	8003748 <memWrite+0xbc>

            default:
                return eErrorArgument;
 8003744:	2303      	movs	r3, #3
 8003746:	e007      	b.n	8003758 <memWrite+0xcc>
    for (index = 0; index < length; index++)
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	3301      	adds	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3d7      	bcc.n	8003706 <memWrite+0x7a>
        }
    }

    return eErrorNone;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3728      	adds	r7, #40	@ 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <xtime>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError xtime(int argc, char *argv[])
{
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b0ae      	sub	sp, #184	@ 0xb8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
    char               buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Build command buffer.
    memset(buffer, 0, sizeof(buffer));
 800376a:	f107 0308 	add.w	r3, r7, #8
 800376e:	22a0      	movs	r2, #160	@ 0xa0
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f011 fb48 	bl	8014e08 <memset>
    for (index = 1; index < argc; index++)
 8003778:	2301      	movs	r3, #1
 800377a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800377e:	e018      	b.n	80037b2 <xtime+0x52>
    {
        strncat(buffer, argv[index], sizeof(buffer)-1);
 8003780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	229f      	movs	r2, #159	@ 0x9f
 8003792:	4618      	mov	r0, r3
 8003794:	f011 fb40 	bl	8014e18 <strncat>
        strncat(buffer, pSpace, sizeof(buffer)-1);
 8003798:	4b21      	ldr	r3, [pc, #132]	@ (8003820 <xtime+0xc0>)
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	229f      	movs	r2, #159	@ 0x9f
 80037a2:	4618      	mov	r0, r3
 80037a4:	f011 fb38 	bl	8014e18 <strncat>
    for (index = 1; index < argc; index++)
 80037a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80037ac:	3301      	adds	r3, #1
 80037ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbe1      	blt.n	8003780 <xtime+0x20>
    }

    // Sample start time.
    start = bspCycleCounter();
 80037bc:	f7fd fc80 	bl	80010c0 <bspCycleCounter>
 80037c0:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

    // Execute command.
    eError = command(buffer);
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fbbd 	bl	8002f48 <command>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

    // Compute duration.
    delta = bspCycleCounter() - start;
 80037d4:	f7fd fc74 	bl	80010c0 <bspCycleCounter>
 80037d8:	4602      	mov	r2, r0
 80037da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    // Display execution time.
    bspPrintf("\r\n%1.6E", (double)delta / (double)bspCycleCounterFrequency());
 80037e4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80037e8:	f7fc feba 	bl	8000560 <__aeabi_ui2d>
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	f7fd fc72 	bl	80010d8 <bspCycleCounterFrequency>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc feb2 	bl	8000560 <__aeabi_ui2d>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4620      	mov	r0, r4
 8003802:	4629      	mov	r1, r5
 8003804:	f7fd f850 	bl	80008a8 <__aeabi_ddiv>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4805      	ldr	r0, [pc, #20]	@ (8003824 <xtime+0xc4>)
 800380e:	f7fd fd71 	bl	80012f4 <bspPrintf>

    return eError;
 8003812:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8003816:	4618      	mov	r0, r3
 8003818:	37b8      	adds	r7, #184	@ 0xb8
 800381a:	46bd      	mov	sp, r7
 800381c:	bdb0      	pop	{r4, r5, r7, pc}
 800381e:	bf00      	nop
 8003820:	20000184 	.word	0x20000184
 8003824:	08017598 	.word	0x08017598

08003828 <perf>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError perf(int argc, char *argv[])
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    // Dump all performance stats.
    perfPrint(NULL);
 8003832:	2000      	movs	r0, #0
 8003834:	f7ff f8aa 	bl	800298c <perfPrint>

    return eErrorNone;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <repeat>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError repeat(int argc, char *argv[])
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b0ae      	sub	sp, #184	@ 0xb8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    char               buffer[SHELL_LINE_LENGTH_MAX];
    static char const *pSpace = " ";
    teError			   eError;

    // Parse command line.
    count = strtol(argv[1], NULL, 0);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	3304      	adds	r3, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2200      	movs	r2, #0
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f010 fb51 	bl	8013f00 <strtol>
 800385e:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
    if (0 == count)
 8003862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <repeat+0x2a>
    {
        return eErrorArgument;
 800386a:	2303      	movs	r3, #3
 800386c:	e063      	b.n	8003936 <repeat+0xf2>
    }
    milliseconds = strtol(argv[2], NULL, 0);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2200      	movs	r2, #0
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f010 fb41 	bl	8013f00 <strtol>
 800387e:	4603      	mov	r3, r0
 8003880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    // Apply correction.
    milliseconds = (milliseconds > 0) ? milliseconds - 1 : 0;
 8003884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <repeat+0x50>
 800388c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003890:	3b01      	subs	r3, #1
 8003892:	e000      	b.n	8003896 <repeat+0x52>
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    // Wait for user abort or terminal count.
    while (bspConsoleEmpty() && (count-- > 0))
 800389a:	e03f      	b.n	800391c <repeat+0xd8>
    {
        // Build command buffer.
        memset(buffer, 0, sizeof(buffer));
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	22a0      	movs	r2, #160	@ 0xa0
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f011 faaf 	bl	8014e08 <memset>
        for (index = 3; index < argc; index++)
 80038aa:	2303      	movs	r3, #3
 80038ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038b0:	e018      	b.n	80038e4 <repeat+0xa0>
        {
            strncat(buffer, argv[index], sizeof(buffer)-1);
 80038b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	f107 0308 	add.w	r3, r7, #8
 80038c2:	229f      	movs	r2, #159	@ 0x9f
 80038c4:	4618      	mov	r0, r3
 80038c6:	f011 faa7 	bl	8014e18 <strncat>
            strncat(buffer, pSpace, sizeof(buffer)-1);
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <repeat+0xfc>)
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	229f      	movs	r2, #159	@ 0x9f
 80038d4:	4618      	mov	r0, r3
 80038d6:	f011 fa9f 	bl	8014e18 <strncat>
        for (index = 3; index < argc; index++)
 80038da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038de:	3301      	adds	r3, #1
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	dbe1      	blt.n	80038b2 <repeat+0x6e>
        }

        // Execute command.
        if (eErrorNone != (eError = command(buffer)))
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fb28 	bl	8002f48 <command>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 80038fe:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <repeat+0xc8>
        {
            return eError;
 8003906:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800390a:	e014      	b.n	8003936 <repeat+0xf2>
        }

        // Wait for specified time.
        bspMillisecondDelay(milliseconds);
 800390c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003910:	f7fd fbec 	bl	80010ec <bspMillisecondDelay>

        // Service timers.
        timerService();
 8003914:	f001 ff82 	bl	800581c <timerService>

        // Flush stdout.
        bspConsoleFlush();
 8003918:	f7fd fb7d 	bl	8001016 <bspConsoleFlush>
    while (bspConsoleEmpty() && (count-- > 0))
 800391c:	f7fd fb6f 	bl	8000ffe <bspConsoleEmpty>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d006      	beq.n	8003934 <repeat+0xf0>
 8003926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800392a:	1e5a      	subs	r2, r3, #1
 800392c:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8003930:	2b00      	cmp	r3, #0
 8003932:	dcb3      	bgt.n	800389c <repeat+0x58>
    }

    return eErrorNone;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	37b8      	adds	r7, #184	@ 0xb8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000188 	.word	0x20000188

08003944 <reboot>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError reboot(int argc, char *argv[])
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
	bspReset();
 800394e:	f7fd fcfd 	bl	800134c <bspReset>

    return eErrorNone;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <uptime>:
// @param argc number of arguments
// @param argv array of pointers to arguments
// @return enumerated error code
//
static teError uptime(int argc, char *argv[])
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b087      	sub	sp, #28
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
    trTimerTimestamp rTimestamp;

    // Get timestamp.
    timerTimestamp(&rTimestamp);
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fe0c 	bl	8005588 <timerTimestamp>

    // Print update.
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 8003970:	893b      	ldrh	r3, [r7, #8]
 8003972:	4619      	mov	r1, r3
 8003974:	7abb      	ldrb	r3, [r7, #10]
 8003976:	4618      	mov	r0, r3
        rTimestamp.minutes, rTimestamp.seconds, rTimestamp.milliseconds);
 8003978:	7afb      	ldrb	r3, [r7, #11]
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 800397a:	461c      	mov	r4, r3
        rTimestamp.minutes, rTimestamp.seconds, rTimestamp.milliseconds);
 800397c:	7b3b      	ldrb	r3, [r7, #12]
 800397e:	89fa      	ldrh	r2, [r7, #14]
    bspPrintf("\r\n%d.%02u:%02u:%02u.%03u", rTimestamp.days, rTimestamp.hours,
 8003980:	9201      	str	r2, [sp, #4]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4623      	mov	r3, r4
 8003986:	4602      	mov	r2, r0
 8003988:	4803      	ldr	r0, [pc, #12]	@ (8003998 <uptime+0x3c>)
 800398a:	f7fd fcb3 	bl	80012f4 <bspPrintf>

    return eErrorNone;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	080175a0 	.word	0x080175a0

0800399c <shellInit>:
// @brief Initialize shell.
//
// @return enumerated error code
//
teError shellInit(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
	teError eError;

	// Initialize line and history buffers.
	memset(&grLine, 0, sizeof(grLine));
 80039a2:	22a4      	movs	r2, #164	@ 0xa4
 80039a4:	2100      	movs	r1, #0
 80039a6:	48a2      	ldr	r0, [pc, #648]	@ (8003c30 <shellInit+0x294>)
 80039a8:	f011 fa2e 	bl	8014e08 <memset>
    memset(&grLineHistory, 0, sizeof(grLineHistory));
 80039ac:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80039b0:	2100      	movs	r1, #0
 80039b2:	48a0      	ldr	r0, [pc, #640]	@ (8003c34 <shellInit+0x298>)
 80039b4:	f011 fa28 	bl	8014e08 <memset>

    // Clear commands.
    memset(grCmd, 0, sizeof(grCmd));
 80039b8:	f44f 52d2 	mov.w	r2, #6720	@ 0x1a40
 80039bc:	2100      	movs	r1, #0
 80039be:	489e      	ldr	r0, [pc, #632]	@ (8003c38 <shellInit+0x29c>)
 80039c0:	f011 fa22 	bl	8014e08 <memset>

    // Add built-in commands.
    if (eErrorNone != (eError = shellAdd("build",
 80039c4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c3c <shellInit+0x2a0>)
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	2301      	movs	r3, #1
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003c40 <shellInit+0x2a4>)
 80039ce:	4a9c      	ldr	r2, [pc, #624]	@ (8003c40 <shellInit+0x2a4>)
 80039d0:	499c      	ldr	r1, [pc, #624]	@ (8003c44 <shellInit+0x2a8>)
 80039d2:	489d      	ldr	r0, [pc, #628]	@ (8003c48 <shellInit+0x2ac>)
 80039d4:	f000 fb3e 	bl	8004054 <shellAdd>
 80039d8:	4603      	mov	r3, r0
 80039da:	71fb      	strb	r3, [r7, #7]
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <shellInit+0x54>
        "build date/time", "", "", 1, build)))
    {
        LOGERROR(eError);
 80039e2:	79f8      	ldrb	r0, [r7, #7]
 80039e4:	4b99      	ldr	r3, [pc, #612]	@ (8003c4c <shellInit+0x2b0>)
 80039e6:	f240 22c6 	movw	r2, #710	@ 0x2c6
 80039ea:	4999      	ldr	r1, [pc, #612]	@ (8003c50 <shellInit+0x2b4>)
 80039ec:	f7fd fec2 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("#",
 80039f0:	4b98      	ldr	r3, [pc, #608]	@ (8003c54 <shellInit+0x2b8>)
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2301      	movs	r3, #1
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4b91      	ldr	r3, [pc, #580]	@ (8003c40 <shellInit+0x2a4>)
 80039fa:	4a91      	ldr	r2, [pc, #580]	@ (8003c40 <shellInit+0x2a4>)
 80039fc:	4996      	ldr	r1, [pc, #600]	@ (8003c58 <shellInit+0x2bc>)
 80039fe:	4897      	ldr	r0, [pc, #604]	@ (8003c5c <shellInit+0x2c0>)
 8003a00:	f000 fb28 	bl	8004054 <shellAdd>
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <shellInit+0x80>
        "comment", "", "", 1, comment)))
    {
        LOGERROR(eError);
 8003a0e:	79f8      	ldrb	r0, [r7, #7]
 8003a10:	4b8e      	ldr	r3, [pc, #568]	@ (8003c4c <shellInit+0x2b0>)
 8003a12:	f240 22cb 	movw	r2, #715	@ 0x2cb
 8003a16:	498e      	ldr	r1, [pc, #568]	@ (8003c50 <shellInit+0x2b4>)
 8003a18:	f7fd feac 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("clear",
 8003a1c:	4b90      	ldr	r3, [pc, #576]	@ (8003c60 <shellInit+0x2c4>)
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	2301      	movs	r3, #1
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4b86      	ldr	r3, [pc, #536]	@ (8003c40 <shellInit+0x2a4>)
 8003a26:	4a86      	ldr	r2, [pc, #536]	@ (8003c40 <shellInit+0x2a4>)
 8003a28:	498e      	ldr	r1, [pc, #568]	@ (8003c64 <shellInit+0x2c8>)
 8003a2a:	488f      	ldr	r0, [pc, #572]	@ (8003c68 <shellInit+0x2cc>)
 8003a2c:	f000 fb12 	bl	8004054 <shellAdd>
 8003a30:	4603      	mov	r3, r0
 8003a32:	71fb      	strb	r3, [r7, #7]
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <shellInit+0xac>
		"clear the terminal screen", "", "", 1, clear)))
    {
    	LOGERROR(eError);
 8003a3a:	79f8      	ldrb	r0, [r7, #7]
 8003a3c:	4b83      	ldr	r3, [pc, #524]	@ (8003c4c <shellInit+0x2b0>)
 8003a3e:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8003a42:	4983      	ldr	r1, [pc, #524]	@ (8003c50 <shellInit+0x2b4>)
 8003a44:	f7fd fe96 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("delay",
 8003a48:	4b88      	ldr	r3, [pc, #544]	@ (8003c6c <shellInit+0x2d0>)
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4b87      	ldr	r3, [pc, #540]	@ (8003c70 <shellInit+0x2d4>)
 8003a52:	4a88      	ldr	r2, [pc, #544]	@ (8003c74 <shellInit+0x2d8>)
 8003a54:	4988      	ldr	r1, [pc, #544]	@ (8003c78 <shellInit+0x2dc>)
 8003a56:	4889      	ldr	r0, [pc, #548]	@ (8003c7c <shellInit+0x2e0>)
 8003a58:	f000 fafc 	bl	8004054 <shellAdd>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	71fb      	strb	r3, [r7, #7]
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <shellInit+0xd8>
        "delay for a period of time", "<milliseconds>",
        "milliseconds=<0..n>",
        2, delay)))
    {
        LOGERROR(eError);
 8003a66:	79f8      	ldrb	r0, [r7, #7]
 8003a68:	4b78      	ldr	r3, [pc, #480]	@ (8003c4c <shellInit+0x2b0>)
 8003a6a:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8003a6e:	4978      	ldr	r1, [pc, #480]	@ (8003c50 <shellInit+0x2b4>)
 8003a70:	f7fd fe80 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("error",
 8003a74:	4b82      	ldr	r3, [pc, #520]	@ (8003c80 <shellInit+0x2e4>)
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	4b70      	ldr	r3, [pc, #448]	@ (8003c40 <shellInit+0x2a4>)
 8003a7e:	4a70      	ldr	r2, [pc, #448]	@ (8003c40 <shellInit+0x2a4>)
 8003a80:	4980      	ldr	r1, [pc, #512]	@ (8003c84 <shellInit+0x2e8>)
 8003a82:	4881      	ldr	r0, [pc, #516]	@ (8003c88 <shellInit+0x2ec>)
 8003a84:	f000 fae6 	bl	8004054 <shellAdd>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <shellInit+0x104>
		"print error history", "", "", 1, error)))
    {
    	LOGERROR(eError);
 8003a92:	79f8      	ldrb	r0, [r7, #7]
 8003a94:	4b6d      	ldr	r3, [pc, #436]	@ (8003c4c <shellInit+0x2b0>)
 8003a96:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8003a9a:	496d      	ldr	r1, [pc, #436]	@ (8003c50 <shellInit+0x2b4>)
 8003a9c:	f7fd fe6a 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("help",
 8003aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8003c8c <shellInit+0x2f0>)
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4b79      	ldr	r3, [pc, #484]	@ (8003c90 <shellInit+0x2f4>)
 8003aaa:	4a7a      	ldr	r2, [pc, #488]	@ (8003c94 <shellInit+0x2f8>)
 8003aac:	497a      	ldr	r1, [pc, #488]	@ (8003c98 <shellInit+0x2fc>)
 8003aae:	487b      	ldr	r0, [pc, #492]	@ (8003c9c <shellInit+0x300>)
 8003ab0:	f000 fad0 	bl	8004054 <shellAdd>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71fb      	strb	r3, [r7, #7]
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <shellInit+0x130>
		"print help information", "[cmd]",
		"cmd=<any supported command>", 1, help)))
    {
    	LOGERROR(eError);
 8003abe:	79f8      	ldrb	r0, [r7, #7]
 8003ac0:	4b62      	ldr	r3, [pc, #392]	@ (8003c4c <shellInit+0x2b0>)
 8003ac2:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8003ac6:	4962      	ldr	r1, [pc, #392]	@ (8003c50 <shellInit+0x2b4>)
 8003ac8:	f7fd fe54 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("ir",
 8003acc:	4b74      	ldr	r3, [pc, #464]	@ (8003ca0 <shellInit+0x304>)
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4b73      	ldr	r3, [pc, #460]	@ (8003ca4 <shellInit+0x308>)
 8003ad6:	4a74      	ldr	r2, [pc, #464]	@ (8003ca8 <shellInit+0x30c>)
 8003ad8:	4974      	ldr	r1, [pc, #464]	@ (8003cac <shellInit+0x310>)
 8003ada:	4875      	ldr	r0, [pc, #468]	@ (8003cb0 <shellInit+0x314>)
 8003adc:	f000 faba 	bl	8004054 <shellAdd>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <shellInit+0x15c>
        "i2c read", "<address> <length>",
        "address=<7-bit>, length=<1-n>", 2, i2cRead)))
    {
        LOGERROR(eError);
 8003aea:	79f8      	ldrb	r0, [r7, #7]
 8003aec:	4b57      	ldr	r3, [pc, #348]	@ (8003c4c <shellInit+0x2b0>)
 8003aee:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8003af2:	4957      	ldr	r1, [pc, #348]	@ (8003c50 <shellInit+0x2b4>)
 8003af4:	f7fd fe3e 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("iw",
 8003af8:	4b6e      	ldr	r3, [pc, #440]	@ (8003cb4 <shellInit+0x318>)
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2302      	movs	r3, #2
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb8 <shellInit+0x31c>)
 8003b02:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <shellInit+0x320>)
 8003b04:	496e      	ldr	r1, [pc, #440]	@ (8003cc0 <shellInit+0x324>)
 8003b06:	486f      	ldr	r0, [pc, #444]	@ (8003cc4 <shellInit+0x328>)
 8003b08:	f000 faa4 	bl	8004054 <shellAdd>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	71fb      	strb	r3, [r7, #7]
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <shellInit+0x188>
        "i2c write", "<address> <data>",
        "address=<7-bit>, data=<...>", 2, i2cWrite)))
    {
        LOGERROR(eError);
 8003b16:	79f8      	ldrb	r0, [r7, #7]
 8003b18:	4b4c      	ldr	r3, [pc, #304]	@ (8003c4c <shellInit+0x2b0>)
 8003b1a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003b1e:	494c      	ldr	r1, [pc, #304]	@ (8003c50 <shellInit+0x2b4>)
 8003b20:	f7fd fe28 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("mon",
 8003b24:	4b68      	ldr	r3, [pc, #416]	@ (8003cc8 <shellInit+0x32c>)
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2303      	movs	r3, #3
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4b67      	ldr	r3, [pc, #412]	@ (8003ccc <shellInit+0x330>)
 8003b2e:	4a68      	ldr	r2, [pc, #416]	@ (8003cd0 <shellInit+0x334>)
 8003b30:	4968      	ldr	r1, [pc, #416]	@ (8003cd4 <shellInit+0x338>)
 8003b32:	4869      	ldr	r0, [pc, #420]	@ (8003cd8 <shellInit+0x33c>)
 8003b34:	f000 fa8e 	bl	8004054 <shellAdd>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	71fb      	strb	r3, [r7, #7]
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <shellInit+0x1b4>
		"monitor command", "<milliseconds> <cmd>",
		"milliseconds=<0..n>, cmd=<any supported command>",
		3, monitor)))
    {
    	LOGERROR(eError);
 8003b42:	79f8      	ldrb	r0, [r7, #7]
 8003b44:	4b41      	ldr	r3, [pc, #260]	@ (8003c4c <shellInit+0x2b0>)
 8003b46:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8003b4a:	4941      	ldr	r1, [pc, #260]	@ (8003c50 <shellInit+0x2b4>)
 8003b4c:	f7fd fe12 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("mr",
 8003b50:	4b62      	ldr	r3, [pc, #392]	@ (8003cdc <shellInit+0x340>)
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <shellInit+0x344>)
 8003b5a:	4a62      	ldr	r2, [pc, #392]	@ (8003ce4 <shellInit+0x348>)
 8003b5c:	4962      	ldr	r1, [pc, #392]	@ (8003ce8 <shellInit+0x34c>)
 8003b5e:	4863      	ldr	r0, [pc, #396]	@ (8003cec <shellInit+0x350>)
 8003b60:	f000 fa78 	bl	8004054 <shellAdd>
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <shellInit+0x1e0>
		"memory read", "<address> [length] [b|h|w]",
		"address=<hex>, length=<dec>, b=byte, h=halfword, w=word",
		2, memRead)))
    {
    	LOGERROR(eError);
 8003b6e:	79f8      	ldrb	r0, [r7, #7]
 8003b70:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <shellInit+0x2b0>)
 8003b72:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8003b76:	4936      	ldr	r1, [pc, #216]	@ (8003c50 <shellInit+0x2b4>)
 8003b78:	f7fd fdfc 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("mw",
 8003b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003cf0 <shellInit+0x354>)
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	2303      	movs	r3, #3
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <shellInit+0x358>)
 8003b86:	4a5c      	ldr	r2, [pc, #368]	@ (8003cf8 <shellInit+0x35c>)
 8003b88:	495c      	ldr	r1, [pc, #368]	@ (8003cfc <shellInit+0x360>)
 8003b8a:	485d      	ldr	r0, [pc, #372]	@ (8003d00 <shellInit+0x364>)
 8003b8c:	f000 fa62 	bl	8004054 <shellAdd>
 8003b90:	4603      	mov	r3, r0
 8003b92:	71fb      	strb	r3, [r7, #7]
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <shellInit+0x20c>
		"memory write", "<address> <value> [length] [b|h|w]",
		"address=<hex>, value=<hex>, length=<dec>, b=byte, h=half, w=word",
		3, memWrite)))
    {
    	LOGERROR(eError);
 8003b9a:	79f8      	ldrb	r0, [r7, #7]
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <shellInit+0x2b0>)
 8003b9e:	f240 3203 	movw	r2, #771	@ 0x303
 8003ba2:	492b      	ldr	r1, [pc, #172]	@ (8003c50 <shellInit+0x2b4>)
 8003ba4:	f7fd fde6 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("perf",
 8003ba8:	4b56      	ldr	r3, [pc, #344]	@ (8003d04 <shellInit+0x368>)
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	2301      	movs	r3, #1
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <shellInit+0x2a4>)
 8003bb2:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <shellInit+0x2a4>)
 8003bb4:	4954      	ldr	r1, [pc, #336]	@ (8003d08 <shellInit+0x36c>)
 8003bb6:	4855      	ldr	r0, [pc, #340]	@ (8003d0c <shellInit+0x370>)
 8003bb8:	f000 fa4c 	bl	8004054 <shellAdd>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	71fb      	strb	r3, [r7, #7]
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <shellInit+0x238>
        "performance statistics", "", "",
        1, perf)))
    {
        LOGERROR(eError);
 8003bc6:	79f8      	ldrb	r0, [r7, #7]
 8003bc8:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <shellInit+0x2b0>)
 8003bca:	f240 3209 	movw	r2, #777	@ 0x309
 8003bce:	4920      	ldr	r1, [pc, #128]	@ (8003c50 <shellInit+0x2b4>)
 8003bd0:	f7fd fdd0 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("reboot",
 8003bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8003d10 <shellInit+0x374>)
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4b18      	ldr	r3, [pc, #96]	@ (8003c40 <shellInit+0x2a4>)
 8003bde:	4a18      	ldr	r2, [pc, #96]	@ (8003c40 <shellInit+0x2a4>)
 8003be0:	494c      	ldr	r1, [pc, #304]	@ (8003d14 <shellInit+0x378>)
 8003be2:	484d      	ldr	r0, [pc, #308]	@ (8003d18 <shellInit+0x37c>)
 8003be4:	f000 fa36 	bl	8004054 <shellAdd>
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <shellInit+0x264>
        "reboot firmware", "", "",
        1, reboot)))
    {
        LOGERROR(eError);
 8003bf2:	79f8      	ldrb	r0, [r7, #7]
 8003bf4:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <shellInit+0x2b0>)
 8003bf6:	f240 320f 	movw	r2, #783	@ 0x30f
 8003bfa:	4915      	ldr	r1, [pc, #84]	@ (8003c50 <shellInit+0x2b4>)
 8003bfc:	f7fd fdba 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("rep",
 8003c00:	4b46      	ldr	r3, [pc, #280]	@ (8003d1c <shellInit+0x380>)
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2304      	movs	r3, #4
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4b45      	ldr	r3, [pc, #276]	@ (8003d20 <shellInit+0x384>)
 8003c0a:	4a46      	ldr	r2, [pc, #280]	@ (8003d24 <shellInit+0x388>)
 8003c0c:	4946      	ldr	r1, [pc, #280]	@ (8003d28 <shellInit+0x38c>)
 8003c0e:	4847      	ldr	r0, [pc, #284]	@ (8003d2c <shellInit+0x390>)
 8003c10:	f000 fa20 	bl	8004054 <shellAdd>
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8088 	beq.w	8003d30 <shellInit+0x394>
		"repeat command", "<count> <milliseconds> <cmd>",
		"count=<1..n>, milliseconds=<0..n>, cmd=<any supported command>",
		4, repeat)))
    {
    	LOGERROR(eError);
 8003c20:	79f8      	ldrb	r0, [r7, #7]
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <shellInit+0x2b0>)
 8003c24:	f240 3216 	movw	r2, #790	@ 0x316
 8003c28:	4909      	ldr	r1, [pc, #36]	@ (8003c50 <shellInit+0x2b4>)
 8003c2a:	f7fd fda3 	bl	8001774 <logError>
 8003c2e:	e07f      	b.n	8003d30 <shellInit+0x394>
 8003c30:	200022d8 	.word	0x200022d8
 8003c34:	2000237c 	.word	0x2000237c
 8003c38:	2000289c 	.word	0x2000289c
 8003c3c:	08003069 	.word	0x08003069
 8003c40:	080175bc 	.word	0x080175bc
 8003c44:	080175c0 	.word	0x080175c0
 8003c48:	080175d0 	.word	0x080175d0
 8003c4c:	08017bcc 	.word	0x08017bcc
 8003c50:	080175d8 	.word	0x080175d8
 8003c54:	08003095 	.word	0x08003095
 8003c58:	080175ec 	.word	0x080175ec
 8003c5c:	080175f4 	.word	0x080175f4
 8003c60:	08003049 	.word	0x08003049
 8003c64:	080175f8 	.word	0x080175f8
 8003c68:	08017614 	.word	0x08017614
 8003c6c:	080030ad 	.word	0x080030ad
 8003c70:	0801761c 	.word	0x0801761c
 8003c74:	08017630 	.word	0x08017630
 8003c78:	08017640 	.word	0x08017640
 8003c7c:	0801765c 	.word	0x0801765c
 8003c80:	080030ed 	.word	0x080030ed
 8003c84:	08017664 	.word	0x08017664
 8003c88:	08017678 	.word	0x08017678
 8003c8c:	0800312d 	.word	0x0800312d
 8003c90:	08017680 	.word	0x08017680
 8003c94:	0801769c 	.word	0x0801769c
 8003c98:	080176a4 	.word	0x080176a4
 8003c9c:	080176bc 	.word	0x080176bc
 8003ca0:	08003229 	.word	0x08003229
 8003ca4:	080176c4 	.word	0x080176c4
 8003ca8:	080176e4 	.word	0x080176e4
 8003cac:	080176f8 	.word	0x080176f8
 8003cb0:	08017704 	.word	0x08017704
 8003cb4:	080032c1 	.word	0x080032c1
 8003cb8:	08017708 	.word	0x08017708
 8003cbc:	08017724 	.word	0x08017724
 8003cc0:	08017738 	.word	0x08017738
 8003cc4:	08017744 	.word	0x08017744
 8003cc8:	08003349 	.word	0x08003349
 8003ccc:	08017748 	.word	0x08017748
 8003cd0:	0801777c 	.word	0x0801777c
 8003cd4:	08017794 	.word	0x08017794
 8003cd8:	080177a4 	.word	0x080177a4
 8003cdc:	0800342d 	.word	0x0800342d
 8003ce0:	080177a8 	.word	0x080177a8
 8003ce4:	080177e0 	.word	0x080177e0
 8003ce8:	080177fc 	.word	0x080177fc
 8003cec:	08017808 	.word	0x08017808
 8003cf0:	0800368d 	.word	0x0800368d
 8003cf4:	0801780c 	.word	0x0801780c
 8003cf8:	08017850 	.word	0x08017850
 8003cfc:	08017874 	.word	0x08017874
 8003d00:	08017884 	.word	0x08017884
 8003d04:	08003829 	.word	0x08003829
 8003d08:	08017888 	.word	0x08017888
 8003d0c:	080178a0 	.word	0x080178a0
 8003d10:	08003945 	.word	0x08003945
 8003d14:	080178a8 	.word	0x080178a8
 8003d18:	080178b8 	.word	0x080178b8
 8003d1c:	08003845 	.word	0x08003845
 8003d20:	080178c0 	.word	0x080178c0
 8003d24:	08017900 	.word	0x08017900
 8003d28:	08017920 	.word	0x08017920
 8003d2c:	08017930 	.word	0x08017930
    }
    if (eErrorNone != (eError = shellAdd("xtime",
 8003d30:	4b18      	ldr	r3, [pc, #96]	@ (8003d94 <shellInit+0x3f8>)
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	2302      	movs	r3, #2
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <shellInit+0x3fc>)
 8003d3a:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <shellInit+0x400>)
 8003d3c:	4918      	ldr	r1, [pc, #96]	@ (8003da0 <shellInit+0x404>)
 8003d3e:	4819      	ldr	r0, [pc, #100]	@ (8003da4 <shellInit+0x408>)
 8003d40:	f000 f988 	bl	8004054 <shellAdd>
 8003d44:	4603      	mov	r3, r0
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <shellInit+0x3c0>
		"measure execution time", "<cmd>",
		"cmd=<any supported command>",
		2, xtime)))
    {
    	LOGERROR(eError);
 8003d4e:	79f8      	ldrb	r0, [r7, #7]
 8003d50:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <shellInit+0x40c>)
 8003d52:	f240 321d 	movw	r2, #797	@ 0x31d
 8003d56:	4915      	ldr	r1, [pc, #84]	@ (8003dac <shellInit+0x410>)
 8003d58:	f7fd fd0c 	bl	8001774 <logError>
    }
    if (eErrorNone != (eError = shellAdd("up",
 8003d5c:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <shellInit+0x414>)
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	2301      	movs	r3, #1
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4b13      	ldr	r3, [pc, #76]	@ (8003db4 <shellInit+0x418>)
 8003d66:	4a13      	ldr	r2, [pc, #76]	@ (8003db4 <shellInit+0x418>)
 8003d68:	4913      	ldr	r1, [pc, #76]	@ (8003db8 <shellInit+0x41c>)
 8003d6a:	4814      	ldr	r0, [pc, #80]	@ (8003dbc <shellInit+0x420>)
 8003d6c:	f000 f972 	bl	8004054 <shellAdd>
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <shellInit+0x3ec>
		"print time since boot", "", "",
		1, uptime)))
    {
    	LOGERROR(eError);
 8003d7a:	79f8      	ldrb	r0, [r7, #7]
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <shellInit+0x40c>)
 8003d7e:	f240 3223 	movw	r2, #803	@ 0x323
 8003d82:	490a      	ldr	r1, [pc, #40]	@ (8003dac <shellInit+0x410>)
 8003d84:	f7fd fcf6 	bl	8001774 <logError>
    }

	return eErrorNone;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	08003761 	.word	0x08003761
 8003d98:	08017680 	.word	0x08017680
 8003d9c:	08017934 	.word	0x08017934
 8003da0:	0801793c 	.word	0x0801793c
 8003da4:	08017954 	.word	0x08017954
 8003da8:	08017bcc 	.word	0x08017bcc
 8003dac:	080175d8 	.word	0x080175d8
 8003db0:	0800395d 	.word	0x0800395d
 8003db4:	080175bc 	.word	0x080175bc
 8003db8:	0801795c 	.word	0x0801795c
 8003dbc:	08017974 	.word	0x08017974

08003dc0 <shellService>:
// @brief Service shell activity.
//
// @return enumerated error code
//
teError shellService(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
	char        ch;
	static uint history = 0;
	teError     eError;

	// Check state.
	if (!gShellEnable)
 8003dc6:	4b97      	ldr	r3, [pc, #604]	@ (8004024 <shellService+0x264>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <shellService+0x18>
	{
		return eErrorNone;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e121      	b.n	800401c <shellService+0x25c>
	}

	// Check prompt.
	if (!grLine.prompt)
 8003dd8:	4b93      	ldr	r3, [pc, #588]	@ (8004028 <shellService+0x268>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	f083 0301 	eor.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <shellService+0x34>
	{
		// Print prompt.
		bspPrintf("\r\n\n%s ", SHELL_PROMPT);
 8003de6:	4991      	ldr	r1, [pc, #580]	@ (800402c <shellService+0x26c>)
 8003de8:	4891      	ldr	r0, [pc, #580]	@ (8004030 <shellService+0x270>)
 8003dea:	f7fd fa83 	bl	80012f4 <bspPrintf>

		// Set state.
		grLine.prompt = true;
 8003dee:	4b8e      	ldr	r3, [pc, #568]	@ (8004028 <shellService+0x268>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
	}

	// Try to read character.
	if (bspConsoleRead(&ch))
 8003df4:	1dbb      	adds	r3, r7, #6
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd f926 	bl	8001048 <bspConsoleRead>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 810b 	beq.w	800401a <shellService+0x25a>
	{
		// Process character.
		switch (ch)
 8003e04:	79bb      	ldrb	r3, [r7, #6]
 8003e06:	3b08      	subs	r3, #8
 8003e08:	2b13      	cmp	r3, #19
 8003e0a:	f200 80e6 	bhi.w	8003fda <shellService+0x21a>
 8003e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <shellService+0x54>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e65 	.word	0x08003e65
 8003e18:	08003fdb 	.word	0x08003fdb
 8003e1c:	08003e91 	.word	0x08003e91
 8003e20:	08003fdb 	.word	0x08003fdb
 8003e24:	08003fdb 	.word	0x08003fdb
 8003e28:	08003e91 	.word	0x08003e91
 8003e2c:	08003fdb 	.word	0x08003fdb
 8003e30:	08003fdb 	.word	0x08003fdb
 8003e34:	08003fdb 	.word	0x08003fdb
 8003e38:	08003fdb 	.word	0x08003fdb
 8003e3c:	08003fdb 	.word	0x08003fdb
 8003e40:	08003fdb 	.word	0x08003fdb
 8003e44:	08003fdb 	.word	0x08003fdb
 8003e48:	08003fdb 	.word	0x08003fdb
 8003e4c:	08003fdb 	.word	0x08003fdb
 8003e50:	08003fdb 	.word	0x08003fdb
 8003e54:	08003fdb 	.word	0x08003fdb
 8003e58:	08003fdb 	.word	0x08003fdb
 8003e5c:	08003fdb 	.word	0x08003fdb
 8003e60:	08003eef 	.word	0x08003eef
		{
			case '\b':

				// Check character count.
				if (grLine.position > 0)
 8003e64:	4b70      	ldr	r3, [pc, #448]	@ (8004028 <shellService+0x268>)
 8003e66:	885b      	ldrh	r3, [r3, #2]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80d3 	beq.w	8004014 <shellService+0x254>
				{
					// Echo backspace sequence.
					bspPrintf("\b \b");
 8003e6e:	4871      	ldr	r0, [pc, #452]	@ (8004034 <shellService+0x274>)
 8003e70:	f7fd fa40 	bl	80012f4 <bspPrintf>

					// Delete character.
					grLine.buffer[--grLine.position] = 0;
 8003e74:	4b6c      	ldr	r3, [pc, #432]	@ (8004028 <shellService+0x268>)
 8003e76:	885b      	ldrh	r3, [r3, #2]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004028 <shellService+0x268>)
 8003e7e:	805a      	strh	r2, [r3, #2]
 8003e80:	4b69      	ldr	r3, [pc, #420]	@ (8004028 <shellService+0x268>)
 8003e82:	885b      	ldrh	r3, [r3, #2]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b68      	ldr	r3, [pc, #416]	@ (8004028 <shellService+0x268>)
 8003e88:	4413      	add	r3, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	711a      	strb	r2, [r3, #4]
				}
				break;
 8003e8e:	e0c1      	b.n	8004014 <shellService+0x254>

			case '\r':
			case '\n':

				// Print newline.
		        putchar(ch);
 8003e90:	79bb      	ldrb	r3, [r7, #6]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f010 fd5a 	bl	801494c <putchar>

		        // Preserve command in circular history buffer.
		        memcpy(&grLineHistory[history], &grLine, sizeof(grLineHistory[history]));
 8003e98:	4b67      	ldr	r3, [pc, #412]	@ (8004038 <shellService+0x278>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	22a4      	movs	r2, #164	@ 0xa4
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	4a66      	ldr	r2, [pc, #408]	@ (800403c <shellService+0x27c>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	22a4      	movs	r2, #164	@ 0xa4
 8003ea8:	495f      	ldr	r1, [pc, #380]	@ (8004028 <shellService+0x268>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f011 f8bb 	bl	8015026 <memcpy>
		        history = (history + 1)%DIM(grLineHistory);
 8003eb0:	4b61      	ldr	r3, [pc, #388]	@ (8004038 <shellService+0x278>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	4a5f      	ldr	r2, [pc, #380]	@ (8004038 <shellService+0x278>)
 8003ebc:	6013      	str	r3, [r2, #0]

		        // Process command.
		        if (eErrorNone != (eError = command(grLine.buffer)))
 8003ebe:	4860      	ldr	r0, [pc, #384]	@ (8004040 <shellService+0x280>)
 8003ec0:	f7ff f842 	bl	8002f48 <command>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	71fb      	strb	r3, [r7, #7]
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <shellService+0x120>
		        {
		            bspPrintf("\r\nmalformed or failed command (%s)",
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd fa9b 	bl	800140c <errorString>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	485a      	ldr	r0, [pc, #360]	@ (8004044 <shellService+0x284>)
 8003edc:	f7fd fa0a 	bl	80012f4 <bspPrintf>
						errorString(eError));
		        }

				// Clear line buffer.
				memset(&grLine, 0, sizeof(grLine));
 8003ee0:	22a4      	movs	r2, #164	@ 0xa4
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4850      	ldr	r0, [pc, #320]	@ (8004028 <shellService+0x268>)
 8003ee6:	f010 ff8f 	bl	8014e08 <memset>

				return eErrorNone;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e096      	b.n	800401c <shellService+0x25c>

			case '\e':

		        // Read character.
		        bspConsoleRead(&ch);
 8003eee:	1dbb      	adds	r3, r7, #6
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fd f8a9 	bl	8001048 <bspConsoleRead>

		        // Process character.
		        switch (ch)
 8003ef6:	79bb      	ldrb	r3, [r7, #6]
 8003ef8:	2b5b      	cmp	r3, #91	@ 0x5b
 8003efa:	d16c      	bne.n	8003fd6 <shellService+0x216>
		        {
		            case '[':

		                // Read character.
		                bspConsoleRead(&ch);
 8003efc:	1dbb      	adds	r3, r7, #6
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd f8a2 	bl	8001048 <bspConsoleRead>

		                // Process character.
		                switch (ch)
 8003f04:	79bb      	ldrb	r3, [r7, #6]
 8003f06:	3b41      	subs	r3, #65	@ 0x41
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d85f      	bhi.n	8003fcc <shellService+0x20c>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <shellService+0x154>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f79 	.word	0x08003f79
 8003f1c:	08003fcd 	.word	0x08003fcd
 8003f20:	08003fcd 	.word	0x08003fcd
		                {
		                    // Up arrow.
		                    case 'A':
		                        history = (history - 1 + DIM(grLineHistory))%DIM(grLineHistory);
 8003f24:	4b44      	ldr	r3, [pc, #272]	@ (8004038 <shellService+0x278>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3307      	adds	r3, #7
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	4a42      	ldr	r2, [pc, #264]	@ (8004038 <shellService+0x278>)
 8003f30:	6013      	str	r3, [r2, #0]
		                        if (strlen(grLineHistory[history].buffer) > 0)
 8003f32:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <shellService+0x278>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	22a4      	movs	r2, #164	@ 0xa4
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800403c <shellService+0x27c>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d043      	beq.n	8003fd0 <shellService+0x210>
		                        {
                                    memcpy(&grLine, &grLineHistory[history], sizeof(grLine));
 8003f48:	4b3b      	ldr	r3, [pc, #236]	@ (8004038 <shellService+0x278>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	22a4      	movs	r2, #164	@ 0xa4
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a3a      	ldr	r2, [pc, #232]	@ (800403c <shellService+0x27c>)
 8003f54:	4413      	add	r3, r2
 8003f56:	22a4      	movs	r2, #164	@ 0xa4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4833      	ldr	r0, [pc, #204]	@ (8004028 <shellService+0x268>)
 8003f5c:	f011 f863 	bl	8015026 <memcpy>
                                    grLine.prompt = true;
 8003f60:	4b31      	ldr	r3, [pc, #196]	@ (8004028 <shellService+0x268>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
                                    bspPrintf(VT100_CLEAR_LINE);
 8003f66:	4838      	ldr	r0, [pc, #224]	@ (8004048 <shellService+0x288>)
 8003f68:	f7fd f9c4 	bl	80012f4 <bspPrintf>
                                    bspPrintf("\r%s %s", SHELL_PROMPT, grLine.buffer);
 8003f6c:	4a34      	ldr	r2, [pc, #208]	@ (8004040 <shellService+0x280>)
 8003f6e:	492f      	ldr	r1, [pc, #188]	@ (800402c <shellService+0x26c>)
 8003f70:	4836      	ldr	r0, [pc, #216]	@ (800404c <shellService+0x28c>)
 8003f72:	f7fd f9bf 	bl	80012f4 <bspPrintf>
		                        }
		                        break;
 8003f76:	e02b      	b.n	8003fd0 <shellService+0x210>

                            // Down arrow.
		                    case 'B':
		                        history = (history + 1)%DIM(grLineHistory);
 8003f78:	4b2f      	ldr	r3, [pc, #188]	@ (8004038 <shellService+0x278>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	4a2d      	ldr	r2, [pc, #180]	@ (8004038 <shellService+0x278>)
 8003f84:	6013      	str	r3, [r2, #0]
                                if (strlen(grLineHistory[history].buffer) > 0)
 8003f86:	4b2c      	ldr	r3, [pc, #176]	@ (8004038 <shellService+0x278>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	22a4      	movs	r2, #164	@ 0xa4
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	4a2a      	ldr	r2, [pc, #168]	@ (800403c <shellService+0x27c>)
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <shellService+0x214>
                                {
                                    memcpy(&grLine, &grLineHistory[history], sizeof(grLine));
 8003f9c:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <shellService+0x278>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	22a4      	movs	r2, #164	@ 0xa4
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	4a25      	ldr	r2, [pc, #148]	@ (800403c <shellService+0x27c>)
 8003fa8:	4413      	add	r3, r2
 8003faa:	22a4      	movs	r2, #164	@ 0xa4
 8003fac:	4619      	mov	r1, r3
 8003fae:	481e      	ldr	r0, [pc, #120]	@ (8004028 <shellService+0x268>)
 8003fb0:	f011 f839 	bl	8015026 <memcpy>
                                    grLine.prompt = true;
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004028 <shellService+0x268>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
                                    bspPrintf(VT100_CLEAR_LINE);
 8003fba:	4823      	ldr	r0, [pc, #140]	@ (8004048 <shellService+0x288>)
 8003fbc:	f7fd f99a 	bl	80012f4 <bspPrintf>
                                    bspPrintf("\r%s %s", SHELL_PROMPT, grLine.buffer);
 8003fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004040 <shellService+0x280>)
 8003fc2:	491a      	ldr	r1, [pc, #104]	@ (800402c <shellService+0x26c>)
 8003fc4:	4821      	ldr	r0, [pc, #132]	@ (800404c <shellService+0x28c>)
 8003fc6:	f7fd f995 	bl	80012f4 <bspPrintf>
                                }
                                break;
 8003fca:	e003      	b.n	8003fd4 <shellService+0x214>
                            // Left arrow.
                            case 'D':
                                break;

		                    default:
		                        break;
 8003fcc:	bf00      	nop
 8003fce:	e002      	b.n	8003fd6 <shellService+0x216>
		                        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <shellService+0x216>
                                break;
 8003fd4:	bf00      	nop
		                }

		            default:
		                break;
 8003fd6:	bf00      	nop

		        }
			    break;
 8003fd8:	e01f      	b.n	800401a <shellService+0x25a>

			default:

				// Check for printable character and acceptable length
				if (isprint(ch) && (grLine.position < sizeof(grLine.buffer)))
 8003fda:	79bb      	ldrb	r3, [r7, #6]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <shellService+0x290>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <shellService+0x258>
 8003fec:	4b0e      	ldr	r3, [pc, #56]	@ (8004028 <shellService+0x268>)
 8003fee:	885b      	ldrh	r3, [r3, #2]
 8003ff0:	2b9f      	cmp	r3, #159	@ 0x9f
 8003ff2:	d811      	bhi.n	8004018 <shellService+0x258>
				{
					// Echo character.
					putchar(ch);
 8003ff4:	79bb      	ldrb	r3, [r7, #6]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f010 fca8 	bl	801494c <putchar>

					// Add character to buffer.
					grLine.buffer[grLine.position++] = (char)ch;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <shellService+0x268>)
 8003ffe:	885b      	ldrh	r3, [r3, #2]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	b291      	uxth	r1, r2
 8004004:	4a08      	ldr	r2, [pc, #32]	@ (8004028 <shellService+0x268>)
 8004006:	8051      	strh	r1, [r2, #2]
 8004008:	4619      	mov	r1, r3
 800400a:	79ba      	ldrb	r2, [r7, #6]
 800400c:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <shellService+0x268>)
 800400e:	440b      	add	r3, r1
 8004010:	711a      	strb	r2, [r3, #4]
				}
				break;
 8004012:	e001      	b.n	8004018 <shellService+0x258>
				break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <shellService+0x25a>
				break;
 8004018:	bf00      	nop
		}
	}

	return eErrorNone;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	2000017c 	.word	0x2000017c
 8004028:	200022d8 	.word	0x200022d8
 800402c:	08017978 	.word	0x08017978
 8004030:	0801797c 	.word	0x0801797c
 8004034:	08017984 	.word	0x08017984
 8004038:	20004304 	.word	0x20004304
 800403c:	2000237c 	.word	0x2000237c
 8004040:	200022dc 	.word	0x200022dc
 8004044:	08017988 	.word	0x08017988
 8004048:	080179ac 	.word	0x080179ac
 800404c:	080179b4 	.word	0x080179b4
 8004050:	08017d20 	.word	0x08017d20

08004054 <shellAdd>:
// @return enumerated error code
//
teError shellAdd(const char *pName, const char *pDescription,
			     const char *pArguments, const char *pDetail,
				 uint8_t minArgs, tpCmd pCmd)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pName);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2d8      	uxtb	r0, r3
 800406e:	4b5c      	ldr	r3, [pc, #368]	@ (80041e0 <shellAdd+0x18c>)
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4b5c      	ldr	r3, [pc, #368]	@ (80041e4 <shellAdd+0x190>)
 8004074:	f240 32cb 	movw	r2, #971	@ 0x3cb
 8004078:	495b      	ldr	r1, [pc, #364]	@ (80041e8 <shellAdd+0x194>)
 800407a:	f7fd fadd 	bl	8001638 <logAssert>
	ASSERT(NULL != pArguments);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2d8      	uxtb	r0, r3
 800408a:	4b58      	ldr	r3, [pc, #352]	@ (80041ec <shellAdd+0x198>)
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4b55      	ldr	r3, [pc, #340]	@ (80041e4 <shellAdd+0x190>)
 8004090:	f44f 7273 	mov.w	r2, #972	@ 0x3cc
 8004094:	4954      	ldr	r1, [pc, #336]	@ (80041e8 <shellAdd+0x194>)
 8004096:	f7fd facf 	bl	8001638 <logAssert>
	ASSERT(NULL != pDescription);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2d8      	uxtb	r0, r3
 80040a6:	4b52      	ldr	r3, [pc, #328]	@ (80041f0 <shellAdd+0x19c>)
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	4b4e      	ldr	r3, [pc, #312]	@ (80041e4 <shellAdd+0x190>)
 80040ac:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80040b0:	494d      	ldr	r1, [pc, #308]	@ (80041e8 <shellAdd+0x194>)
 80040b2:	f7fd fac1 	bl	8001638 <logAssert>
	ASSERT(NULL != pDetail);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2d8      	uxtb	r0, r3
 80040c2:	4b4c      	ldr	r3, [pc, #304]	@ (80041f4 <shellAdd+0x1a0>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <shellAdd+0x190>)
 80040c8:	f240 32ce 	movw	r2, #974	@ 0x3ce
 80040cc:	4946      	ldr	r1, [pc, #280]	@ (80041e8 <shellAdd+0x194>)
 80040ce:	f7fd fab3 	bl	8001638 <logAssert>
	ASSERT(minArgs > 0);
 80040d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2d8      	uxtb	r0, r3
 80040e0:	4b45      	ldr	r3, [pc, #276]	@ (80041f8 <shellAdd+0x1a4>)
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	4b3f      	ldr	r3, [pc, #252]	@ (80041e4 <shellAdd+0x190>)
 80040e6:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80040ea:	493f      	ldr	r1, [pc, #252]	@ (80041e8 <shellAdd+0x194>)
 80040ec:	f7fd faa4 	bl	8001638 <logAssert>
	ASSERT(NULL != pCmd);
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2d8      	uxtb	r0, r3
 80040fc:	4b3f      	ldr	r3, [pc, #252]	@ (80041fc <shellAdd+0x1a8>)
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4b38      	ldr	r3, [pc, #224]	@ (80041e4 <shellAdd+0x190>)
 8004102:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8004106:	4938      	ldr	r1, [pc, #224]	@ (80041e8 <shellAdd+0x194>)
 8004108:	f7fd fa96 	bl	8001638 <logAssert>

	// Iterate over command array.
	for (index = 0; index < DIM(grCmd); index++)
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e05e      	b.n	80041d0 <shellAdd+0x17c>
	{
		// Check for non-allocated command.
		if (!grCmd[index].allocated)
 8004112:	4a3b      	ldr	r2, [pc, #236]	@ (8004200 <shellAdd+0x1ac>)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	21a8      	movs	r1, #168	@ 0xa8
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f083 0301 	eor.w	r3, r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04f      	beq.n	80041ca <shellAdd+0x176>
		{
			// Assign command.
			strncpy(grCmd[index].name, pName, sizeof(grCmd[index].name)-1);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	22a8      	movs	r2, #168	@ 0xa8
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	4a33      	ldr	r2, [pc, #204]	@ (8004200 <shellAdd+0x1ac>)
 8004134:	4413      	add	r3, r2
 8004136:	3301      	adds	r3, #1
 8004138:	2207      	movs	r2, #7
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	4618      	mov	r0, r3
 800413e:	f010 fe7e 	bl	8014e3e <strncpy>
			strncpy(grCmd[index].arguments, pArguments, sizeof(grCmd[index].arguments)-1);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	22a8      	movs	r2, #168	@ 0xa8
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	3308      	adds	r3, #8
 800414c:	4a2c      	ldr	r2, [pc, #176]	@ (8004200 <shellAdd+0x1ac>)
 800414e:	4413      	add	r3, r2
 8004150:	3301      	adds	r3, #1
 8004152:	2227      	movs	r2, #39	@ 0x27
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	f010 fe71 	bl	8014e3e <strncpy>
			strncpy(grCmd[index].description, pDescription, sizeof(grCmd[index].description)-1);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	22a8      	movs	r2, #168	@ 0xa8
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	3330      	adds	r3, #48	@ 0x30
 8004166:	4a26      	ldr	r2, [pc, #152]	@ (8004200 <shellAdd+0x1ac>)
 8004168:	4413      	add	r3, r2
 800416a:	3301      	adds	r3, #1
 800416c:	221b      	movs	r2, #27
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f010 fe64 	bl	8014e3e <strncpy>
			strncpy(grCmd[index].detail, pDetail, sizeof(grCmd[index].detail)-1);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	22a8      	movs	r2, #168	@ 0xa8
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	3348      	adds	r3, #72	@ 0x48
 8004180:	4a1f      	ldr	r2, [pc, #124]	@ (8004200 <shellAdd+0x1ac>)
 8004182:	4413      	add	r3, r2
 8004184:	3305      	adds	r3, #5
 8004186:	224f      	movs	r2, #79	@ 0x4f
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f010 fe57 	bl	8014e3e <strncpy>
			grCmd[index].minArgs = minArgs;
 8004190:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004194:	491a      	ldr	r1, [pc, #104]	@ (8004200 <shellAdd+0x1ac>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	20a8      	movs	r0, #168	@ 0xa8
 800419a:	fb00 f303 	mul.w	r3, r0, r3
 800419e:	440b      	add	r3, r1
 80041a0:	33a0      	adds	r3, #160	@ 0xa0
 80041a2:	601a      	str	r2, [r3, #0]
			grCmd[index].pCmd    = pCmd;
 80041a4:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <shellAdd+0x1ac>)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	21a8      	movs	r1, #168	@ 0xa8
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	33a4      	adds	r3, #164	@ 0xa4
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	601a      	str	r2, [r3, #0]

			// Mark as allocated.
			grCmd[index].allocated = true;
 80041b6:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <shellAdd+0x1ac>)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	21a8      	movs	r1, #168	@ 0xa8
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]

			return eErrorNone;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e006      	b.n	80041d8 <shellAdd+0x184>
	for (index = 0; index < DIM(grCmd); index++)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3301      	adds	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b27      	cmp	r3, #39	@ 0x27
 80041d4:	d99d      	bls.n	8004112 <shellAdd+0xbe>
		}
	}

	return eErrorOutOfResources;
 80041d6:	2312      	movs	r3, #18
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	080179bc 	.word	0x080179bc
 80041e4:	08017bd8 	.word	0x08017bd8
 80041e8:	080175d8 	.word	0x080175d8
 80041ec:	080179cc 	.word	0x080179cc
 80041f0:	080179e0 	.word	0x080179e0
 80041f4:	080179f8 	.word	0x080179f8
 80041f8:	08017a08 	.word	0x08017a08
 80041fc:	08017a14 	.word	0x08017a14
 8004200:	2000289c 	.word	0x2000289c

08004204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <HAL_MspInit+0x30>)
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004210:	4a08      	ldr	r2, [pc, #32]	@ (8004234 <HAL_MspInit+0x30>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_MspInit+0x30>)
 800421c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8004228:	f007 fdde 	bl	800bde8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	46020c00 	.word	0x46020c00

08004238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b0e0      	sub	sp, #384	@ 0x180
 800423c:	af00      	add	r7, sp, #0
 800423e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004242:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004246:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004248:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004258:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800425c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004260:	4618      	mov	r0, r3
 8004262:	23e0      	movs	r3, #224	@ 0xe0
 8004264:	461a      	mov	r2, r3
 8004266:	2100      	movs	r1, #0
 8004268:	f010 fdce 	bl	8014e08 <memset>
  if(hadc->Instance==ADC1)
 800426c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004270:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a9d      	ldr	r2, [pc, #628]	@ (80044f0 <HAL_ADC_MspInit+0x2b8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f040 814a 	bne.w	8004514 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8004280:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004284:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8004288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8004294:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004298:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800429c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042a4:	f107 0320 	add.w	r3, r7, #32
 80042a8:	4618      	mov	r0, r3
 80042aa:	f009 f859 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80042b4:	f7fe fab4 	bl	8002820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80042b8:	4b8e      	ldr	r3, [pc, #568]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 80042ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042be:	4a8d      	ldr	r2, [pc, #564]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 80042c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042c8:	4b8a      	ldr	r3, [pc, #552]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ce:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80042d2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80042d6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80042e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042e4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e6:	4b83      	ldr	r3, [pc, #524]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 80042e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ec:	4a81      	ldr	r2, [pc, #516]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042f6:	4b7f      	ldr	r3, [pc, #508]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042fc:	f003 0204 	and.w	r2, r3, #4
 8004300:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004304:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800430e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004312:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004314:	4b77      	ldr	r3, [pc, #476]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 8004316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800431a:	4a76      	ldr	r2, [pc, #472]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004324:	4b73      	ldr	r3, [pc, #460]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 8004326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800432a:	f003 0201 	and.w	r2, r3, #1
 800432e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004332:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800433c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004340:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004342:	4b6c      	ldr	r3, [pc, #432]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004348:	4a6a      	ldr	r2, [pc, #424]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004352:	4b68      	ldr	r3, [pc, #416]	@ (80044f4 <HAL_ADC_MspInit+0x2bc>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004358:	f003 0202 	and.w	r2, r3, #2
 800435c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004360:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800436a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800436e:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8004370:	230f      	movs	r3, #15
 8004372:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004376:	2303      	movs	r3, #3
 8004378:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004382:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8004386:	4619      	mov	r1, r3
 8004388:	485b      	ldr	r0, [pc, #364]	@ (80044f8 <HAL_ADC_MspInit+0x2c0>)
 800438a:	f005 fae3 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 800438e:	23ed      	movs	r3, #237	@ 0xed
 8004390:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004394:	2303      	movs	r3, #3
 8004396:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80043a4:	4619      	mov	r1, r3
 80043a6:	4855      	ldr	r0, [pc, #340]	@ (80044fc <HAL_ADC_MspInit+0x2c4>)
 80043a8:	f005 fad4 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 80043ac:	2303      	movs	r3, #3
 80043ae:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043be:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80043c2:	4619      	mov	r1, r3
 80043c4:	484e      	ldr	r0, [pc, #312]	@ (8004500 <HAL_ADC_MspInit+0x2c8>)
 80043c6:	f005 fac5 	bl	8009954 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80043ca:	2321      	movs	r3, #33	@ 0x21
 80043cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80043e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80043ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80043f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8004404:	2301      	movs	r3, #1
 8004406:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800440a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800440e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8004418:	2300      	movs	r3, #0
 800441a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800441e:	2300      	movs	r3, #0
 8004420:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8004430:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8004434:	4933      	ldr	r1, [pc, #204]	@ (8004504 <HAL_ADC_MspInit+0x2cc>)
 8004436:	4618      	mov	r0, r3
 8004438:	f004 fcc0 	bl	8008dbc <HAL_DMAEx_List_BuildNode>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 8004442:	f7fe f9ed 	bl	8002820 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8004446:	4a2f      	ldr	r2, [pc, #188]	@ (8004504 <HAL_ADC_MspInit+0x2cc>)
 8004448:	2100      	movs	r1, #0
 800444a:	482f      	ldr	r0, [pc, #188]	@ (8004508 <HAL_ADC_MspInit+0x2d0>)
 800444c:	f004 fccc 	bl	8008de8 <HAL_DMAEx_List_InsertNode>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 8004456:	f7fe f9e3 	bl	8002820 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800445a:	482b      	ldr	r0, [pc, #172]	@ (8004508 <HAL_ADC_MspInit+0x2d0>)
 800445c:	f004 fd8d 	bl	8008f7a <HAL_DMAEx_List_SetCircularMode>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 8004466:	f7fe f9db 	bl	8002820 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800446a:	4b28      	ldr	r3, [pc, #160]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 800446c:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <HAL_ADC_MspInit+0x2d8>)
 800446e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8004470:	4b26      	ldr	r3, [pc, #152]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 8004472:	2200      	movs	r2, #0
 8004474:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8004476:	4b25      	ldr	r3, [pc, #148]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 8004478:	2200      	movs	r2, #0
 800447a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800447c:	4b23      	ldr	r3, [pc, #140]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 800447e:	2200      	movs	r2, #0
 8004480:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8004482:	4b22      	ldr	r3, [pc, #136]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 8004484:	2200      	movs	r2, #0
 8004486:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8004488:	4b20      	ldr	r3, [pc, #128]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 800448a:	2281      	movs	r2, #129	@ 0x81
 800448c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800448e:	481f      	ldr	r0, [pc, #124]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 8004490:	f004 fb68 	bl	8008b64 <HAL_DMAEx_List_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 800449a:	f7fe f9c1 	bl	8002820 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 800449e:	491a      	ldr	r1, [pc, #104]	@ (8004508 <HAL_ADC_MspInit+0x2d0>)
 80044a0:	481a      	ldr	r0, [pc, #104]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 80044a2:	f004 fdcb 	bl	800903c <HAL_DMAEx_List_LinkQ>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 80044ac:	f7fe f9b8 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80044b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80044b4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a14      	ldr	r2, [pc, #80]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 80044bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80044be:	4a13      	ldr	r2, [pc, #76]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 80044c0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80044c4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80044cc:	2110      	movs	r1, #16
 80044ce:	480f      	ldr	r0, [pc, #60]	@ (800450c <HAL_ADC_MspInit+0x2d4>)
 80044d0:	f003 ff7c 	bl	80083cc <HAL_DMA_ConfigChannelAttributes>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 80044da:	f7fe f9a1 	bl	8002820 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	2100      	movs	r1, #0
 80044e2:	2025      	movs	r0, #37	@ 0x25
 80044e4:	f003 fb51 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80044e8:	2025      	movs	r0, #37	@ 0x25
 80044ea:	f003 fb68 	bl	8007bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80044ee:	e0bf      	b.n	8004670 <HAL_ADC_MspInit+0x438>
 80044f0:	42028000 	.word	0x42028000
 80044f4:	46020c00 	.word	0x46020c00
 80044f8:	42020800 	.word	0x42020800
 80044fc:	42020000 	.word	0x42020000
 8004500:	42020400 	.word	0x42020400
 8004504:	20001a3c 	.word	0x20001a3c
 8004508:	20001a60 	.word	0x20001a60
 800450c:	20001a78 	.word	0x20001a78
 8004510:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8004514:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004518:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a56      	ldr	r2, [pc, #344]	@ (800467c <HAL_ADC_MspInit+0x444>)
 8004522:	4293      	cmp	r3, r2
 8004524:	f040 80a4 	bne.w	8004670 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8004528:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800452c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8004530:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800453c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004540:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004544:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004548:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800454c:	f107 0320 	add.w	r3, r7, #32
 8004550:	4618      	mov	r0, r3
 8004552:	f008 ff05 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 800455c:	f7fe f960 	bl	8002820 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8004560:	4b47      	ldr	r3, [pc, #284]	@ (8004680 <HAL_ADC_MspInit+0x448>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004566:	4a46      	ldr	r2, [pc, #280]	@ (8004680 <HAL_ADC_MspInit+0x448>)
 8004568:	f043 0320 	orr.w	r3, r3, #32
 800456c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004570:	4b43      	ldr	r3, [pc, #268]	@ (8004680 <HAL_ADC_MspInit+0x448>)
 8004572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004576:	f003 0220 	and.w	r2, r3, #32
 800457a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800457e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004588:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800458c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800458e:	4b3c      	ldr	r3, [pc, #240]	@ (8004680 <HAL_ADC_MspInit+0x448>)
 8004590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004594:	4a3a      	ldr	r2, [pc, #232]	@ (8004680 <HAL_ADC_MspInit+0x448>)
 8004596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800459e:	4b38      	ldr	r3, [pc, #224]	@ (8004680 <HAL_ADC_MspInit+0x448>)
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a4:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80045a8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80045ac:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80045b6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80045ba:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 80045bc:	2303      	movs	r3, #3
 80045be:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c2:	2303      	movs	r3, #3
 80045c4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045ce:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80045d2:	4619      	mov	r1, r3
 80045d4:	482b      	ldr	r0, [pc, #172]	@ (8004684 <HAL_ADC_MspInit+0x44c>)
 80045d6:	f005 f9bd 	bl	8009954 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80045da:	4b2b      	ldr	r3, [pc, #172]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 80045dc:	4a2b      	ldr	r2, [pc, #172]	@ (800468c <HAL_ADC_MspInit+0x454>)
 80045de:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 80045e0:	4b29      	ldr	r3, [pc, #164]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80045e6:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ec:	4b26      	ldr	r3, [pc, #152]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 80045f2:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80045f8:	4b23      	ldr	r3, [pc, #140]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 80045fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80045fe:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8004600:	4b21      	ldr	r3, [pc, #132]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004602:	2201      	movs	r2, #1
 8004604:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8004606:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004608:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800460c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800460e:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004610:	2200      	movs	r2, #0
 8004612:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8004614:	4b1c      	ldr	r3, [pc, #112]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004616:	2201      	movs	r2, #1
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800461a:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 800461c:	2201      	movs	r2, #1
 800461e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8004620:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004622:	2200      	movs	r2, #0
 8004624:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8004626:	4b18      	ldr	r3, [pc, #96]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800462c:	4b16      	ldr	r3, [pc, #88]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 800462e:	2200      	movs	r2, #0
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8004632:	4815      	ldr	r0, [pc, #84]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004634:	f003 fb8a 	bl	8007d4c <HAL_DMA_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 800463e:	f7fe f8ef 	bl	8002820 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8004642:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004646:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0e      	ldr	r2, [pc, #56]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 800464e:	671a      	str	r2, [r3, #112]	@ 0x70
 8004650:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004652:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004656:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800465e:	2110      	movs	r1, #16
 8004660:	4809      	ldr	r0, [pc, #36]	@ (8004688 <HAL_ADC_MspInit+0x450>)
 8004662:	f003 feb3 	bl	80083cc <HAL_DMA_ConfigChannelAttributes>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 800466c:	f7fe f8d8 	bl	8002820 <Error_Handler>
}
 8004670:	bf00      	nop
 8004672:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	46021000 	.word	0x46021000
 8004680:	46020c00 	.word	0x46020c00
 8004684:	42021800 	.word	0x42021800
 8004688:	20001af0 	.word	0x20001af0
 800468c:	40020150 	.word	0x40020150

08004690 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0b      	ldr	r2, [pc, #44]	@ (80046cc <HAL_DMA2D_MspInit+0x3c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10e      	bne.n	80046c0 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_DMA2D_MspInit+0x40>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a8:	4a09      	ldr	r2, [pc, #36]	@ (80046d0 <HAL_DMA2D_MspInit+0x40>)
 80046aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80046b2:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <HAL_DMA2D_MspInit+0x40>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	4002b000 	.word	0x4002b000
 80046d0:	46020c00 	.word	0x46020c00

080046d4 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <HAL_XSPI_MspInit+0xc8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d14d      	bne.n	8004792 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80046f6:	4b2a      	ldr	r3, [pc, #168]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	4a28      	ldr	r2, [pc, #160]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 80046fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004706:	4b26      	ldr	r3, [pc, #152]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004714:	4b22      	ldr	r3, [pc, #136]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 8004716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800471a:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 800471c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004720:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004724:	4b1e      	ldr	r3, [pc, #120]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800472a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004732:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004738:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004742:	4b17      	ldr	r3, [pc, #92]	@ (80047a0 <HAL_XSPI_MspInit+0xcc>)
 8004744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8004750:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8004754:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8004762:	2308      	movs	r3, #8
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	480d      	ldr	r0, [pc, #52]	@ (80047a4 <HAL_XSPI_MspInit+0xd0>)
 800476e:	f005 f8f1 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004772:	230f      	movs	r3, #15
 8004774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004776:	2302      	movs	r3, #2
 8004778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477e:	2303      	movs	r3, #3
 8004780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8004782:	2308      	movs	r3, #8
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004786:	f107 0314 	add.w	r3, r7, #20
 800478a:	4619      	mov	r1, r3
 800478c:	4806      	ldr	r0, [pc, #24]	@ (80047a8 <HAL_XSPI_MspInit+0xd4>)
 800478e:	f005 f8e1 	bl	8009954 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8004792:	bf00      	nop
 8004794:	3728      	adds	r7, #40	@ 0x28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	420d3400 	.word	0x420d3400
 80047a0:	46020c00 	.word	0x46020c00
 80047a4:	42021c00 	.word	0x42021c00
 80047a8:	42022000 	.word	0x42022000

080047ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b0c4      	sub	sp, #272	@ 0x110
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047bc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047cc:	f107 0318 	add.w	r3, r7, #24
 80047d0:	22e0      	movs	r2, #224	@ 0xe0
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f010 fb17 	bl	8014e08 <memset>
  if(hi2c->Instance==I2C1)
 80047da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a63      	ldr	r2, [pc, #396]	@ (8004974 <HAL_I2C_MspInit+0x1c8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d14f      	bne.n	800488c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80047ec:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	4618      	mov	r0, r3
 8004804:	f008 fdac 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800480e:	f7fe f807 	bl	8002820 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004812:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004818:	4a57      	ldr	r2, [pc, #348]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 800481a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800481e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004822:	4b55      	ldr	r3, [pc, #340]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004830:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004834:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004838:	2312      	movs	r3, #18
 800483a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800484a:	2304      	movs	r3, #4
 800484c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004850:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004854:	4619      	mov	r1, r3
 8004856:	4849      	ldr	r0, [pc, #292]	@ (800497c <HAL_I2C_MspInit+0x1d0>)
 8004858:	f005 f87c 	bl	8009954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800485c:	4b46      	ldr	r3, [pc, #280]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004862:	4a45      	ldr	r2, [pc, #276]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 8004864:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004868:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800486c:	4b42      	ldr	r3, [pc, #264]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 800486e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004872:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800487a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004884:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004888:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800488a:	e06e      	b.n	800496a <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 800488c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004890:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a39      	ldr	r2, [pc, #228]	@ (8004980 <HAL_I2C_MspInit+0x1d4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d165      	bne.n	800496a <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800489e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048b0:	f107 0318 	add.w	r3, r7, #24
 80048b4:	4618      	mov	r0, r3
 80048b6:	f008 fd53 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80048c0:	f7fd ffae 	bl	8002820 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80048c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 80048c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048d4:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 80048d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048da:	f003 0220 	and.w	r2, r3, #32
 80048de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048f0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048f2:	2303      	movs	r3, #3
 80048f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048f8:	2312      	movs	r3, #18
 80048fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800490a:	2304      	movs	r3, #4
 800490c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004910:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8004914:	4619      	mov	r1, r3
 8004916:	481b      	ldr	r0, [pc, #108]	@ (8004984 <HAL_I2C_MspInit+0x1d8>)
 8004918:	f005 f81c 	bl	8009954 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800491c:	4b16      	ldr	r3, [pc, #88]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 800491e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004922:	4a15      	ldr	r2, [pc, #84]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 8004924:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004928:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800492c:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <HAL_I2C_MspInit+0x1cc>)
 800492e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004932:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800493a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004948:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2100      	movs	r1, #0
 800494e:	2039      	movs	r0, #57	@ 0x39
 8004950:	f003 f91b 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004954:	2039      	movs	r0, #57	@ 0x39
 8004956:	f003 f932 	bl	8007bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	2100      	movs	r1, #0
 800495e:	203a      	movs	r0, #58	@ 0x3a
 8004960:	f003 f913 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004964:	203a      	movs	r0, #58	@ 0x3a
 8004966:	f003 f92a 	bl	8007bbe <HAL_NVIC_EnableIRQ>
}
 800496a:	bf00      	nop
 800496c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40005400 	.word	0x40005400
 8004978:	46020c00 	.word	0x46020c00
 800497c:	42021800 	.word	0x42021800
 8004980:	40005800 	.word	0x40005800
 8004984:	42021400 	.word	0x42021400

08004988 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0c6      	sub	sp, #280	@ 0x118
 800498c:	af00      	add	r7, sp, #0
 800498e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004992:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004996:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049a8:	f107 0320 	add.w	r3, r7, #32
 80049ac:	22e0      	movs	r2, #224	@ 0xe0
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f010 fa29 	bl	8014e08 <memset>
  if(hltdc->Instance==LTDC)
 80049b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a92      	ldr	r2, [pc, #584]	@ (8004c0c <HAL_LTDC_MspInit+0x284>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	f040 811b 	bne.w	8004c00 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0302 	mov.w	r3, #2
 80049d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80049dc:	2303      	movs	r3, #3
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 80049e0:	2304      	movs	r3, #4
 80049e2:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 80049e4:	2332      	movs	r3, #50	@ 0x32
 80049e6:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 80049e8:	2302      	movs	r3, #2
 80049ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 80049ec:	2302      	movs	r3, #2
 80049ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 80049f0:	2308      	movs	r3, #8
 80049f2:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 80049fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a02:	f107 0320 	add.w	r3, r7, #32
 8004a06:	4618      	mov	r0, r3
 8004a08:	f008 fcaa 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8004a12:	f7fd ff05 	bl	8002820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004a16:	4b7e      	ldr	r3, [pc, #504]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a22:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004a26:	4b7a      	ldr	r3, [pc, #488]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a34:	4b76      	ldr	r3, [pc, #472]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a3a:	4a75      	ldr	r2, [pc, #468]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a44:	4b72      	ldr	r3, [pc, #456]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a4a:	f003 0202 	and.w	r2, r3, #2
 8004a4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a5c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004a60:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a62:	4b6b      	ldr	r3, [pc, #428]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a68:	4a69      	ldr	r2, [pc, #420]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a6a:	f043 0310 	orr.w	r3, r3, #16
 8004a6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a72:	4b67      	ldr	r3, [pc, #412]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a78:	f003 0210 	and.w	r2, r3, #16
 8004a7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a8e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a90:	4b5f      	ldr	r3, [pc, #380]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a96:	4a5e      	ldr	r2, [pc, #376]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aa6:	f003 0208 	and.w	r2, r3, #8
 8004aaa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004abc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004abe:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ac4:	4a52      	ldr	r2, [pc, #328]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004ac6:	f043 0304 	orr.w	r3, r3, #4
 8004aca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ace:	4b50      	ldr	r3, [pc, #320]	@ (8004c10 <HAL_LTDC_MspInit+0x288>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad4:	f003 0204 	and.w	r2, r3, #4
 8004ad8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004adc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ae6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004aea:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004aec:	2304      	movs	r3, #4
 8004aee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af2:	2302      	movs	r3, #2
 8004af4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004b04:	2308      	movs	r3, #8
 8004b06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4840      	ldr	r0, [pc, #256]	@ (8004c14 <HAL_LTDC_MspInit+0x28c>)
 8004b12:	f004 ff1f 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004b16:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8004b1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004b30:	2308      	movs	r3, #8
 8004b32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b36:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4836      	ldr	r0, [pc, #216]	@ (8004c18 <HAL_LTDC_MspInit+0x290>)
 8004b3e:	f004 ff09 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b42:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8004b46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b62:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004b66:	4619      	mov	r1, r3
 8004b68:	482c      	ldr	r0, [pc, #176]	@ (8004c1c <HAL_LTDC_MspInit+0x294>)
 8004b6a:	f004 fef3 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b6e:	23c0      	movs	r3, #192	@ 0xc0
 8004b70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b74:	2302      	movs	r3, #2
 8004b76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8004b86:	2307      	movs	r3, #7
 8004b88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b8c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004b90:	4619      	mov	r1, r3
 8004b92:	4823      	ldr	r0, [pc, #140]	@ (8004c20 <HAL_LTDC_MspInit+0x298>)
 8004b94:	f004 fede 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bb8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4818      	ldr	r0, [pc, #96]	@ (8004c20 <HAL_LTDC_MspInit+0x298>)
 8004bc0:	f004 fec8 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8004bde:	2307      	movs	r3, #7
 8004be0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004be4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004be8:	4619      	mov	r1, r3
 8004bea:	480a      	ldr	r0, [pc, #40]	@ (8004c14 <HAL_LTDC_MspInit+0x28c>)
 8004bec:	f004 feb2 	bl	8009954 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	2087      	movs	r0, #135	@ 0x87
 8004bf6:	f002 ffc8 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004bfa:	2087      	movs	r0, #135	@ 0x87
 8004bfc:	f002 ffdf 	bl	8007bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004c00:	bf00      	nop
 8004c02:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40016800 	.word	0x40016800
 8004c10:	46020c00 	.word	0x46020c00
 8004c14:	42020400 	.word	0x42020400
 8004c18:	42021000 	.word	0x42021000
 8004c1c:	42020c00 	.word	0x42020c00
 8004c20:	42020800 	.word	0x42020800

08004c24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0bc      	sub	sp, #240	@ 0xf0
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	22e0      	movs	r2, #224	@ 0xe0
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f010 f8e7 	bl	8014e08 <memset>
  if(hrtc->Instance==RTC)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_RTC_MspInit+0x90>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d132      	bne.n	8004caa <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c58:	f107 0310 	add.w	r3, r7, #16
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f008 fb7f 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004c68:	f7fd fdda 	bl	8002820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c6c:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c72:	4a11      	ldr	r2, [pc, #68]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c82:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004c84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c88:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ca0:	4a05      	ldr	r2, [pc, #20]	@ (8004cb8 <HAL_RTC_MspInit+0x94>)
 8004ca2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ca6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004caa:	bf00      	nop
 8004cac:	37f0      	adds	r7, #240	@ 0xf0
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	46007800 	.word	0x46007800
 8004cb8:	46020c00 	.word	0x46020c00

08004cbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cce:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <HAL_TIM_PWM_MspInit+0x40>)
 8004cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd4:	4a09      	ldr	r2, [pc, #36]	@ (8004cfc <HAL_TIM_PWM_MspInit+0x40>)
 8004cd6:	f043 0302 	orr.w	r3, r3, #2
 8004cda:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004cde:	4b07      	ldr	r3, [pc, #28]	@ (8004cfc <HAL_TIM_PWM_MspInit+0x40>)
 8004ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	46020c00 	.word	0x46020c00

08004d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a12      	ldr	r2, [pc, #72]	@ (8004d68 <HAL_TIM_MspPostInit+0x68>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d11e      	bne.n	8004d60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <HAL_TIM_MspPostInit+0x6c>)
 8004d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d28:	4a10      	ldr	r2, [pc, #64]	@ (8004d6c <HAL_TIM_MspPostInit+0x6c>)
 8004d2a:	f043 0310 	orr.w	r3, r3, #16
 8004d2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d32:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <HAL_TIM_MspPostInit+0x6c>)
 8004d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8004d40:	2340      	movs	r3, #64	@ 0x40
 8004d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d44:	2302      	movs	r3, #2
 8004d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d50:	2302      	movs	r3, #2
 8004d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004d54:	f107 030c 	add.w	r3, r7, #12
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4805      	ldr	r0, [pc, #20]	@ (8004d70 <HAL_TIM_MspPostInit+0x70>)
 8004d5c:	f004 fdfa 	bl	8009954 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d60:	bf00      	nop
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	46020c00 	.word	0x46020c00
 8004d70:	42021000 	.word	0x42021000

08004d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b0c2      	sub	sp, #264	@ 0x108
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d82:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	22e0      	movs	r2, #224	@ 0xe0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f010 f833 	bl	8014e08 <memset>
  if(huart->Instance==USART1)
 8004da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	@ (8004e6c <HAL_UART_MspInit+0xf8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d155      	bne.n	8004e60 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004db4:	f04f 0201 	mov.w	r2, #1
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dc4:	f107 0310 	add.w	r3, r7, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f008 fac9 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8004dd4:	f7fd fd24 	bl	8002820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dd8:	4b25      	ldr	r3, [pc, #148]	@ (8004e70 <HAL_UART_MspInit+0xfc>)
 8004dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004dde:	4a24      	ldr	r2, [pc, #144]	@ (8004e70 <HAL_UART_MspInit+0xfc>)
 8004de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004de4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004de8:	4b21      	ldr	r3, [pc, #132]	@ (8004e70 <HAL_UART_MspInit+0xfc>)
 8004dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <HAL_UART_MspInit+0xfc>)
 8004df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <HAL_UART_MspInit+0xfc>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e06:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <HAL_UART_MspInit+0xfc>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e0c:	f003 0201 	and.w	r2, r3, #1
 8004e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e22:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004e28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e3e:	2307      	movs	r3, #7
 8004e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e44:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	480a      	ldr	r0, [pc, #40]	@ (8004e74 <HAL_UART_MspInit+0x100>)
 8004e4c:	f004 fd82 	bl	8009954 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	203d      	movs	r0, #61	@ 0x3d
 8004e56:	f002 fe98 	bl	8007b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e5a:	203d      	movs	r0, #61	@ 0x3d
 8004e5c:	f002 feaf 	bl	8007bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004e60:	bf00      	nop
 8004e62:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40013800 	.word	0x40013800
 8004e70:	46020c00 	.word	0x46020c00
 8004e74:	42020000 	.word	0x42020000

08004e78 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0a4      	sub	sp, #144	@ 0x90
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4aae      	ldr	r2, [pc, #696]	@ (8005140 <HAL_SAI_MspInit+0x2c8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	f040 8086 	bne.w	8004f98 <HAL_SAI_MspInit+0x120>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004e8c:	4bad      	ldr	r3, [pc, #692]	@ (8005144 <HAL_SAI_MspInit+0x2cc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10e      	bne.n	8004eb2 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004e94:	4bac      	ldr	r3, [pc, #688]	@ (8005148 <HAL_SAI_MspInit+0x2d0>)
 8004e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e9a:	4aab      	ldr	r2, [pc, #684]	@ (8005148 <HAL_SAI_MspInit+0x2d0>)
 8004e9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ea0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004ea4:	4ba8      	ldr	r3, [pc, #672]	@ (8005148 <HAL_SAI_MspInit+0x2d0>)
 8004ea6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8004eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8005144 <HAL_SAI_MspInit+0x2cc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	4aa2      	ldr	r2, [pc, #648]	@ (8005144 <HAL_SAI_MspInit+0x2cc>)
 8004eba:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004ebc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004ed4:	230d      	movs	r3, #13
 8004ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eda:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004ede:	4619      	mov	r1, r3
 8004ee0:	489a      	ldr	r0, [pc, #616]	@ (800514c <HAL_SAI_MspInit+0x2d4>)
 8004ee2:	f004 fd37 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eec:	2302      	movs	r3, #2
 8004eee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004efe:	230d      	movs	r3, #13
 8004f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f04:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4891      	ldr	r0, [pc, #580]	@ (8005150 <HAL_SAI_MspInit+0x2d8>)
 8004f0c:	f004 fd22 	bl	8009954 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8004f10:	4b90      	ldr	r3, [pc, #576]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f12:	4a91      	ldr	r2, [pc, #580]	@ (8005158 <HAL_SAI_MspInit+0x2e0>)
 8004f14:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8004f16:	4b8f      	ldr	r3, [pc, #572]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f18:	2226      	movs	r2, #38	@ 0x26
 8004f1a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8004f1c:	4b8d      	ldr	r3, [pc, #564]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f22:	4b8c      	ldr	r3, [pc, #560]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f28:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8004f2a:	4b8a      	ldr	r3, [pc, #552]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8004f30:	4b88      	ldr	r3, [pc, #544]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8004f36:	4b87      	ldr	r3, [pc, #540]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f38:	2202      	movs	r2, #2
 8004f3a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8004f3c:	4b85      	ldr	r3, [pc, #532]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8004f42:	4b84      	ldr	r3, [pc, #528]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f48:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8004f4a:	4b82      	ldr	r3, [pc, #520]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8004f50:	4b80      	ldr	r3, [pc, #512]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8004f56:	4b7f      	ldr	r3, [pc, #508]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8004f5c:	4b7d      	ldr	r3, [pc, #500]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8004f62:	4b7c      	ldr	r3, [pc, #496]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8004f68:	487a      	ldr	r0, [pc, #488]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f6a:	f002 feef 	bl	8007d4c <HAL_DMA_Init>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8004f74:	f7fd fc54 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a76      	ldr	r2, [pc, #472]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004f80:	4a74      	ldr	r2, [pc, #464]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8004f86:	2110      	movs	r1, #16
 8004f88:	4872      	ldr	r0, [pc, #456]	@ (8005154 <HAL_SAI_MspInit+0x2dc>)
 8004f8a:	f003 fa1f 	bl	80083cc <HAL_DMA_ConfigChannelAttributes>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 8004f94:	f7fd fc44 	bl	8002820 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6f      	ldr	r2, [pc, #444]	@ (800515c <HAL_SAI_MspInit+0x2e4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f040 80ca 	bne.w	8005138 <HAL_SAI_MspInit+0x2c0>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004fa4:	4b67      	ldr	r3, [pc, #412]	@ (8005144 <HAL_SAI_MspInit+0x2cc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10e      	bne.n	8004fca <HAL_SAI_MspInit+0x152>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004fac:	4b66      	ldr	r3, [pc, #408]	@ (8005148 <HAL_SAI_MspInit+0x2d0>)
 8004fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fb2:	4a65      	ldr	r2, [pc, #404]	@ (8005148 <HAL_SAI_MspInit+0x2d0>)
 8004fb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fb8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004fbc:	4b62      	ldr	r3, [pc, #392]	@ (8005148 <HAL_SAI_MspInit+0x2d0>)
 8004fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8004fca:	4b5e      	ldr	r3, [pc, #376]	@ (8005144 <HAL_SAI_MspInit+0x2cc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8005144 <HAL_SAI_MspInit+0x2cc>)
 8004fd2:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004fec:	230d      	movs	r3, #13
 8004fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4859      	ldr	r0, [pc, #356]	@ (8005160 <HAL_SAI_MspInit+0x2e8>)
 8004ffa:	f004 fcab 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ffe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005002:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005004:	2302      	movs	r3, #2
 8005006:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500a:	2300      	movs	r3, #0
 800500c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8005016:	230d      	movs	r3, #13
 8005018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800501c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8005020:	4619      	mov	r1, r3
 8005022:	4850      	ldr	r0, [pc, #320]	@ (8005164 <HAL_SAI_MspInit+0x2ec>)
 8005024:	f004 fc96 	bl	8009954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800502c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	2302      	movs	r3, #2
 8005030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8005040:	230d      	movs	r3, #13
 8005042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005046:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800504a:	4619      	mov	r1, r3
 800504c:	4845      	ldr	r0, [pc, #276]	@ (8005164 <HAL_SAI_MspInit+0x2ec>)
 800504e:	f004 fc81 	bl	8009954 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8005052:	2321      	movs	r3, #33	@ 0x21
 8005054:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8005056:	2327      	movs	r3, #39	@ 0x27
 8005058:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005066:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800506c:	2302      	movs	r3, #2
 800506e:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8005070:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8005076:	2301      	movs	r3, #1
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800507a:	2301      	movs	r3, #1
 800507c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800507e:	2300      	movs	r3, #0
 8005080:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8005082:	2300      	movs	r3, #0
 8005084:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8005086:	2300      	movs	r3, #0
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800508a:	2300      	movs	r3, #0
 800508c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800508e:	2300      	movs	r3, #0
 8005090:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005092:	2300      	movs	r3, #0
 8005094:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	4933      	ldr	r1, [pc, #204]	@ (8005168 <HAL_SAI_MspInit+0x2f0>)
 800509c:	4618      	mov	r0, r3
 800509e:	f003 fe8d 	bl	8008dbc <HAL_DMAEx_List_BuildNode>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_SAI_MspInit+0x234>
    {
      Error_Handler();
 80050a8:	f7fd fbba 	bl	8002820 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_SAI_MspInit+0x2f0>)
 80050ae:	2100      	movs	r1, #0
 80050b0:	482e      	ldr	r0, [pc, #184]	@ (800516c <HAL_SAI_MspInit+0x2f4>)
 80050b2:	f003 fe99 	bl	8008de8 <HAL_DMAEx_List_InsertNode>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_SAI_MspInit+0x248>
    {
      Error_Handler();
 80050bc:	f7fd fbb0 	bl	8002820 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80050c0:	482a      	ldr	r0, [pc, #168]	@ (800516c <HAL_SAI_MspInit+0x2f4>)
 80050c2:	f003 ff5a 	bl	8008f7a <HAL_DMAEx_List_SetCircularMode>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 80050cc:	f7fd fba8 	bl	8002820 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80050d0:	4b27      	ldr	r3, [pc, #156]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050d2:	4a28      	ldr	r2, [pc, #160]	@ (8005174 <HAL_SAI_MspInit+0x2fc>)
 80050d4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80050d6:	4b26      	ldr	r3, [pc, #152]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80050de:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80050e4:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80050ea:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80050f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050f2:	2281      	movs	r2, #129	@ 0x81
 80050f4:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80050f6:	481e      	ldr	r0, [pc, #120]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 80050f8:	f003 fd34 	bl	8008b64 <HAL_DMAEx_List_Init>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_SAI_MspInit+0x28e>
    {
      Error_Handler();
 8005102:	f7fd fb8d 	bl	8002820 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8005106:	4919      	ldr	r1, [pc, #100]	@ (800516c <HAL_SAI_MspInit+0x2f4>)
 8005108:	4819      	ldr	r0, [pc, #100]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 800510a:	f003 ff97 	bl	800903c <HAL_DMAEx_List_LinkQ>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 8005114:	f7fd fb84 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 800511c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005120:	4a13      	ldr	r2, [pc, #76]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8005126:	2110      	movs	r1, #16
 8005128:	4811      	ldr	r0, [pc, #68]	@ (8005170 <HAL_SAI_MspInit+0x2f8>)
 800512a:	f003 f94f 	bl	80083cc <HAL_DMA_ConfigChannelAttributes>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_SAI_MspInit+0x2c0>
    {
      Error_Handler();
 8005134:	f7fd fb74 	bl	8002820 <Error_Handler>
    }

    }
}
 8005138:	bf00      	nop
 800513a:	3790      	adds	r7, #144	@ 0x90
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40015804 	.word	0x40015804
 8005144:	20004308 	.word	0x20004308
 8005148:	46020c00 	.word	0x46020c00
 800514c:	42020400 	.word	0x42020400
 8005150:	42021800 	.word	0x42021800
 8005154:	20001ee0 	.word	0x20001ee0
 8005158:	400201d0 	.word	0x400201d0
 800515c:	40015824 	.word	0x40015824
 8005160:	42020000 	.word	0x42020000
 8005164:	42020800 	.word	0x42020800
 8005168:	20001f58 	.word	0x20001f58
 800516c:	20001f7c 	.word	0x20001f7c
 8005170:	20001f94 	.word	0x20001f94
 8005174:	400200d0 	.word	0x400200d0

08005178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800517c:	bf00      	nop
 800517e:	e7fd      	b.n	800517c <NMI_Handler+0x4>

08005180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <HardFault_Handler+0x4>

08005188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <MemManage_Handler+0x4>

08005190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <BusFault_Handler+0x4>

08005198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <UsageFault_Handler+0x4>

080051a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  bspTick();
 80051ce:	f7fc f8c3 	bl	8001358 <bspTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051d2:	f000 fc7d 	bl	8005ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}

080051da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80051de:	2002      	movs	r0, #2
 80051e0:	f004 fda8 	bl	8009d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80051e4:	bf00      	nop
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80051ec:	2010      	movs	r0, #16
 80051ee:	f004 fda1 	bl	8009d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80051fa:	2020      	movs	r0, #32
 80051fc:	f004 fd9a 	bl	8009d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8005200:	bf00      	nop
 8005202:	bd80      	pop	{r7, pc}

08005204 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8005208:	4802      	ldr	r0, [pc, #8]	@ (8005214 <GPDMA1_Channel0_IRQHandler+0x10>)
 800520a:	f002 ff70 	bl	80080ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20001a78 	.word	0x20001a78

08005218 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800521c:	4802      	ldr	r0, [pc, #8]	@ (8005228 <GPDMA1_Channel1_IRQHandler+0x10>)
 800521e:	f002 ff66 	bl	80080ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20001f94 	.word	0x20001f94

0800522c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8005230:	4802      	ldr	r0, [pc, #8]	@ (800523c <GPDMA1_Channel2_IRQHandler+0x10>)
 8005232:	f002 ff5c 	bl	80080ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20001af0 	.word	0x20001af0

08005240 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8005244:	4802      	ldr	r0, [pc, #8]	@ (8005250 <GPDMA1_Channel3_IRQHandler+0x10>)
 8005246:	f002 ff52 	bl	80080ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20001ee0 	.word	0x20001ee0

08005254 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005258:	4802      	ldr	r0, [pc, #8]	@ (8005264 <ADC1_2_IRQHandler+0x10>)
 800525a:	f001 fa8f 	bl	800677c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20001924 	.word	0x20001924

08005268 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800526c:	4802      	ldr	r0, [pc, #8]	@ (8005278 <I2C2_EV_IRQHandler+0x10>)
 800526e:	f005 f823 	bl	800a2b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20001c84 	.word	0x20001c84

0800527c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005280:	4802      	ldr	r0, [pc, #8]	@ (800528c <I2C2_ER_IRQHandler+0x10>)
 8005282:	f005 f833 	bl	800a2ec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20001c84 	.word	0x20001c84

08005290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005294:	4802      	ldr	r0, [pc, #8]	@ (80052a0 <USART1_IRQHandler+0x10>)
 8005296:	f00c fd79 	bl	8011d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20002058 	.word	0x20002058

080052a4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80052a8:	4802      	ldr	r0, [pc, #8]	@ (80052b4 <LTDC_IRQHandler+0x10>)
 80052aa:	f006 fa2d 	bl	800b708 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20001cd8 	.word	0x20001cd8

080052b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return 1;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <_kill>:

int _kill(int pid, int sig)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80052d2:	f00f fe6d 	bl	8014fb0 <__errno>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2216      	movs	r2, #22
 80052da:	601a      	str	r2, [r3, #0]
  return -1;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_exit>:

void _exit (int status)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052f0:	f04f 31ff 	mov.w	r1, #4294967295
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ffe7 	bl	80052c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <_exit+0x12>

080052fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e00a      	b.n	8005326 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005310:	f3af 8000 	nop.w
 8005314:	4601      	mov	r1, r0
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	60ba      	str	r2, [r7, #8]
 800531c:	b2ca      	uxtb	r2, r1
 800531e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	3301      	adds	r3, #1
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	dbf0      	blt.n	8005310 <_read+0x12>
  }

  return len;
 800532e:	687b      	ldr	r3, [r7, #4]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e009      	b.n	800535e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	60ba      	str	r2, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb fde2 	bl	8000f1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	dbf1      	blt.n	800534a <_write+0x12>
  }
  return len;
 8005366:	687b      	ldr	r3, [r7, #4]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_close>:

int _close(int file)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005398:	605a      	str	r2, [r3, #4]
  return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <_isatty>:

int _isatty(int file)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053b0:	2301      	movs	r3, #1
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053e0:	4a14      	ldr	r2, [pc, #80]	@ (8005434 <_sbrk+0x5c>)
 80053e2:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <_sbrk+0x60>)
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053ec:	4b13      	ldr	r3, [pc, #76]	@ (800543c <_sbrk+0x64>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <_sbrk+0x64>)
 80053f6:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <_sbrk+0x68>)
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053fa:	4b10      	ldr	r3, [pc, #64]	@ (800543c <_sbrk+0x64>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	429a      	cmp	r2, r3
 8005406:	d207      	bcs.n	8005418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005408:	f00f fdd2 	bl	8014fb0 <__errno>
 800540c:	4603      	mov	r3, r0
 800540e:	220c      	movs	r2, #12
 8005410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	e009      	b.n	800542c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005418:	4b08      	ldr	r3, [pc, #32]	@ (800543c <_sbrk+0x64>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800541e:	4b07      	ldr	r3, [pc, #28]	@ (800543c <_sbrk+0x64>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4413      	add	r3, r2
 8005426:	4a05      	ldr	r2, [pc, #20]	@ (800543c <_sbrk+0x64>)
 8005428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	202f0000 	.word	0x202f0000
 8005438:	00000800 	.word	0x00000800
 800543c:	2000430c 	.word	0x2000430c
 8005440:	20004508 	.word	0x20004508

08005444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005448:	4b18      	ldr	r3, [pc, #96]	@ (80054ac <SystemInit+0x68>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544e:	4a17      	ldr	r2, [pc, #92]	@ (80054ac <SystemInit+0x68>)
 8005450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8005458:	4b15      	ldr	r3, [pc, #84]	@ (80054b0 <SystemInit+0x6c>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <SystemInit+0x6c>)
 8005460:	2200      	movs	r2, #0
 8005462:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005464:	4b12      	ldr	r3, [pc, #72]	@ (80054b0 <SystemInit+0x6c>)
 8005466:	2200      	movs	r2, #0
 8005468:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800546a:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <SystemInit+0x6c>)
 800546c:	2200      	movs	r2, #0
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <SystemInit+0x6c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a0e      	ldr	r2, [pc, #56]	@ (80054b0 <SystemInit+0x6c>)
 8005476:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800547a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800547e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <SystemInit+0x6c>)
 8005482:	2200      	movs	r2, #0
 8005484:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <SystemInit+0x6c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a09      	ldr	r2, [pc, #36]	@ (80054b0 <SystemInit+0x6c>)
 800548c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005490:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005492:	4b07      	ldr	r3, [pc, #28]	@ (80054b0 <SystemInit+0x6c>)
 8005494:	2200      	movs	r2, #0
 8005496:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <SystemInit+0x68>)
 800549a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800549e:	609a      	str	r2, [r3, #8]
  #endif
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	e000ed00 	.word	0xe000ed00
 80054b0:	46020c00 	.word	0x46020c00

080054b4 <tickHandler>:
//
// @param pContext pointer to context data
// @return none
//
static void tickHandler(void *pContext)
{
 80054b4:	b4b0      	push	{r4, r5, r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	int index;

	// Increment millisecond counter.
	grTimerMilliseconds++;
 80054bc:	4b20      	ldr	r3, [pc, #128]	@ (8005540 <tickHandler+0x8c>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	1c54      	adds	r4, r2, #1
 80054c4:	f143 0500 	adc.w	r5, r3, #0
 80054c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <tickHandler+0x8c>)
 80054ca:	e9c3 4500 	strd	r4, r5, [r3]

	// Iterate over callbacks.
	for (index = 0; index < DIM(grTimerCallback); index++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e02b      	b.n	800552c <tickHandler+0x78>
	{
		// Check entry.
		if (NULL != grTimerCallback[index].pCallback)
 80054d4:	491b      	ldr	r1, [pc, #108]	@ (8005544 <tickHandler+0x90>)
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	330c      	adds	r3, #12
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01d      	beq.n	8005526 <tickHandler+0x72>
		{
			// Update remaining time.
			if (grTimerCallback[index].remaining > 0)
 80054ea:	4916      	ldr	r1, [pc, #88]	@ (8005544 <tickHandler+0x90>)
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	3308      	adds	r3, #8
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d012      	beq.n	8005526 <tickHandler+0x72>
			{
				grTimerCallback[index].remaining--;
 8005500:	4910      	ldr	r1, [pc, #64]	@ (8005544 <tickHandler+0x90>)
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	3308      	adds	r3, #8
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	1e59      	subs	r1, r3, #1
 8005514:	480b      	ldr	r0, [pc, #44]	@ (8005544 <tickHandler+0x90>)
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4403      	add	r3, r0
 8005522:	3308      	adds	r3, #8
 8005524:	6019      	str	r1, [r3, #0]
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b07      	cmp	r3, #7
 8005530:	d9d0      	bls.n	80054d4 <tickHandler+0x20>
			}
		}
	}
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bcb0      	pop	{r4, r5, r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20004310 	.word	0x20004310
 8005544:	20004318 	.word	0x20004318

08005548 <timerInit>:
// @brief Timer initialization.
//
// @return enumerated error code.
//
teError timerInit(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
	// Initialize timer callbacks.
	memset((void*)grTimerCallback, 0, sizeof(grTimerCallback));
 800554c:	22a0      	movs	r2, #160	@ 0xa0
 800554e:	2100      	movs	r1, #0
 8005550:	4804      	ldr	r0, [pc, #16]	@ (8005564 <timerInit+0x1c>)
 8005552:	f00f fc59 	bl	8014e08 <memset>

	// Install timer tick callback.
	bspTickHandler(tickHandler, NULL);
 8005556:	2100      	movs	r1, #0
 8005558:	4803      	ldr	r0, [pc, #12]	@ (8005568 <timerInit+0x20>)
 800555a:	f7fb ff17 	bl	800138c <bspTickHandler>

	return eErrorNone;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20004318 	.word	0x20004318
 8005568:	080054b5 	.word	0x080054b5

0800556c <timerMilliseconds>:
// @brief Retrieve the number of milliseconds since boot.
//
// @return milliseconds
//
uint64_t timerMilliseconds(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
	return grTimerMilliseconds;
 8005570:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <timerMilliseconds+0x18>)
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20004310 	.word	0x20004310

08005588 <timerTimestamp>:
//
// @param prTimestamp pointer to timestamp data structure.
// @return void
//
void timerTimestamp(trTimerTimestamp *prTimestamp)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
	uint64_t uptime;

    // Validate argument[s].
    ASSERT(NULL != prTimestamp);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2d8      	uxtb	r0, r3
 800559c:	4b3a      	ldr	r3, [pc, #232]	@ (8005688 <timerTimestamp+0x100>)
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4b3a      	ldr	r3, [pc, #232]	@ (800568c <timerTimestamp+0x104>)
 80055a2:	2267      	movs	r2, #103	@ 0x67
 80055a4:	493a      	ldr	r1, [pc, #232]	@ (8005690 <timerTimestamp+0x108>)
 80055a6:	f7fc f847 	bl	8001638 <logAssert>

    // Get total uptime in milliseconds.
	uptime = timerMilliseconds();
 80055aa:	f7ff ffdf 	bl	800556c <timerMilliseconds>
 80055ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
	prTimestamp->seconds = uptime / 1000;
 80055b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	f7fb fb21 	bl	8000c04 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	711a      	strb	r2, [r3, #4]

	// Calculate uptime units.
	prTimestamp->days         =  (uptime / 1000) / (60 * 60 * 24);
 80055cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8005680 <timerTimestamp+0xf8>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb fb15 	bl	8000c04 <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	b292      	uxth	r2, r2
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	801a      	strh	r2, [r3, #0]
	prTimestamp->hours        = ((uptime / 1000) / (60 * 60)) % 24;
 80055e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005694 <timerTimestamp+0x10c>)
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f7fb fb09 	bl	8000c04 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	f04f 0218 	mov.w	r2, #24
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	f7fb faff 	bl	8000c04 <__aeabi_uldivmod>
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	709a      	strb	r2, [r3, #2]
	prTimestamp->minutes      = ((uptime / 1000) / 60) % 60;
 800560c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005610:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	f7fb faf4 	bl	8000c04 <__aeabi_uldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f7fb faea 	bl	8000c04 <__aeabi_uldivmod>
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	70da      	strb	r2, [r3, #3]
	prTimestamp->seconds      =  (uptime / 1000) % 60;
 8005636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800563a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	f7fb fadf 	bl	8000c04 <__aeabi_uldivmod>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	f7fb fad5 	bl	8000c04 <__aeabi_uldivmod>
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	711a      	strb	r2, [r3, #4]
	prTimestamp->milliseconds =   uptime % 1000;
 8005660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005664:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	f7fb faca 	bl	8000c04 <__aeabi_uldivmod>
 8005670:	b292      	uxth	r2, r2
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	80da      	strh	r2, [r3, #6]
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	05265c00 	.word	0x05265c00
 8005684:	00000000 	.word	0x00000000
 8005688:	08017a38 	.word	0x08017a38
 800568c:	08017c3c 	.word	0x08017c3c
 8005690:	08017a24 	.word	0x08017a24
 8005694:	0036ee80 	.word	0x0036ee80

08005698 <timerAdd>:
// @param periodic true = periodic, false = one-shot
// @return enumerated error code
//
teError timerAdd(uint32_t interval, tpTimerCallback pCallback,
					     void *pContext, bool periodic)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	70fb      	strb	r3, [r7, #3]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pCallback);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2d8      	uxtb	r0, r3
 80056b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005770 <timerAdd+0xd8>)
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005774 <timerAdd+0xdc>)
 80056b8:	2284      	movs	r2, #132	@ 0x84
 80056ba:	492f      	ldr	r1, [pc, #188]	@ (8005778 <timerAdd+0xe0>)
 80056bc:	f7fb ffbc 	bl	8001638 <logAssert>

	// Find callback resource.
	for (index = 0; index < DIM(grTimerCallback); index++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e046      	b.n	8005754 <timerAdd+0xbc>
	{
		// Check entry.
		if (NULL == grTimerCallback[index].pCallback)
 80056c6:	492d      	ldr	r1, [pc, #180]	@ (800577c <timerAdd+0xe4>)
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	330c      	adds	r3, #12
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d138      	bne.n	800574e <timerAdd+0xb6>
		{
			// Critical section begin.
			bspInterruptEnable(false);
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fb fdf7 	bl	80012d0 <bspInterruptEnable>

			// Initialize entry.
			grTimerCallback[index].periodic  = periodic;
 80056e2:	4926      	ldr	r1, [pc, #152]	@ (800577c <timerAdd+0xe4>)
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	701a      	strb	r2, [r3, #0]
			grTimerCallback[index].interval  = interval;
 80056f4:	4921      	ldr	r1, [pc, #132]	@ (800577c <timerAdd+0xe4>)
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	3304      	adds	r3, #4
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].remaining = interval;
 8005708:	491c      	ldr	r1, [pc, #112]	@ (800577c <timerAdd+0xe4>)
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3308      	adds	r3, #8
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].pCallback = pCallback;
 800571c:	4917      	ldr	r1, [pc, #92]	@ (800577c <timerAdd+0xe4>)
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	330c      	adds	r3, #12
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	601a      	str	r2, [r3, #0]
			grTimerCallback[index].pContext  = pContext;
 8005730:	4912      	ldr	r1, [pc, #72]	@ (800577c <timerAdd+0xe4>)
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	3310      	adds	r3, #16
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]

			// Critical section end.
			bspInterruptEnable(true);
 8005744:	2001      	movs	r0, #1
 8005746:	f7fb fdc3 	bl	80012d0 <bspInterruptEnable>

			return eErrorNone;
 800574a:	2300      	movs	r3, #0
 800574c:	e00c      	b.n	8005768 <timerAdd+0xd0>
	for (index = 0; index < DIM(grTimerCallback); index++)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	3301      	adds	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b07      	cmp	r3, #7
 8005758:	d9b5      	bls.n	80056c6 <timerAdd+0x2e>
		}
	}
	LOGERROR(eErrorOutOfResources);
 800575a:	4b06      	ldr	r3, [pc, #24]	@ (8005774 <timerAdd+0xdc>)
 800575c:	229c      	movs	r2, #156	@ 0x9c
 800575e:	4906      	ldr	r1, [pc, #24]	@ (8005778 <timerAdd+0xe0>)
 8005760:	2012      	movs	r0, #18
 8005762:	f7fc f807 	bl	8001774 <logError>

	return eErrorOutOfResources;
 8005766:	2312      	movs	r3, #18
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	08017a4c 	.word	0x08017a4c
 8005774:	08017c4c 	.word	0x08017c4c
 8005778:	08017a24 	.word	0x08017a24
 800577c:	20004318 	.word	0x20004318

08005780 <timerDelete>:
//
// @param pCallback pointer to callback function
// @return enumerated error code
//
teError timerDelete(tpTimerCallback pCallback)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
	int index;

	// Validate argument[s].
	ASSERT(NULL != pCallback);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf14      	ite	ne
 800578e:	2301      	movne	r3, #1
 8005790:	2300      	moveq	r3, #0
 8005792:	b2d8      	uxtb	r0, r3
 8005794:	4b1d      	ldr	r3, [pc, #116]	@ (800580c <timerDelete+0x8c>)
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <timerDelete+0x90>)
 800579a:	22ac      	movs	r2, #172	@ 0xac
 800579c:	491d      	ldr	r1, [pc, #116]	@ (8005814 <timerDelete+0x94>)
 800579e:	f7fb ff4b 	bl	8001638 <logAssert>

	// Find callback resource.
	for (index = 0; index < DIM(grTimerCallback); index++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e022      	b.n	80057ee <timerDelete+0x6e>
	{
		// Check entry.
		if (pCallback == grTimerCallback[index].pCallback)
 80057a8:	491b      	ldr	r1, [pc, #108]	@ (8005818 <timerDelete+0x98>)
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	330c      	adds	r3, #12
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d113      	bne.n	80057e8 <timerDelete+0x68>
		{
			// Critical section begin.
			bspInterruptEnable(false);
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7fb fd85 	bl	80012d0 <bspInterruptEnable>

			// Clear entry.
			memset((void*)&grTimerCallback[index], 0,
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a11      	ldr	r2, [pc, #68]	@ (8005818 <timerDelete+0x98>)
 80057d2:	4413      	add	r3, r2
 80057d4:	2214      	movs	r2, #20
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f00f fb15 	bl	8014e08 <memset>
                sizeof(grTimerCallback[index]));

			// Critical section end.
			bspInterruptEnable(true);
 80057de:	2001      	movs	r0, #1
 80057e0:	f7fb fd76 	bl	80012d0 <bspInterruptEnable>

			return eErrorNone;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e00c      	b.n	8005802 <timerDelete+0x82>
	for (index = 0; index < DIM(grTimerCallback); index++)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b07      	cmp	r3, #7
 80057f2:	d9d9      	bls.n	80057a8 <timerDelete+0x28>
		}
	}
	LOGERROR(eErrorNotFound);
 80057f4:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <timerDelete+0x90>)
 80057f6:	22c1      	movs	r2, #193	@ 0xc1
 80057f8:	4906      	ldr	r1, [pc, #24]	@ (8005814 <timerDelete+0x94>)
 80057fa:	2011      	movs	r0, #17
 80057fc:	f7fb ffba 	bl	8001774 <logError>

	return eErrorNotFound;
 8005800:	2311      	movs	r3, #17
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	08017a4c 	.word	0x08017a4c
 8005810:	08017c58 	.word	0x08017c58
 8005814:	08017a24 	.word	0x08017a24
 8005818:	20004318 	.word	0x20004318

0800581c <timerService>:
// @brief Process pending timer callback[s].
//
// @return none
//
void timerService(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
	int index;

	// Iterate over timer callbacks.
	for (index = 0; index < DIM(grTimerCallback); index++)
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	e056      	b.n	80058d6 <timerService+0xba>
	{
		// Check entry.
		if (NULL != grTimerCallback[index].pCallback)
 8005828:	492f      	ldr	r1, [pc, #188]	@ (80058e8 <timerService+0xcc>)
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	330c      	adds	r3, #12
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d048      	beq.n	80058d0 <timerService+0xb4>
		{
			// Check remaining time.
			if (0 == grTimerCallback[index].remaining)
 800583e:	492a      	ldr	r1, [pc, #168]	@ (80058e8 <timerService+0xcc>)
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	3308      	adds	r3, #8
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13d      	bne.n	80058d0 <timerService+0xb4>
			{
				// Invoke callback.
				grTimerCallback[index].pCallback(grTimerCallback[index].pContext);
 8005854:	4924      	ldr	r1, [pc, #144]	@ (80058e8 <timerService+0xcc>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	330c      	adds	r3, #12
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	4820      	ldr	r0, [pc, #128]	@ (80058e8 <timerService+0xcc>)
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4403      	add	r3, r0
 8005874:	3310      	adds	r3, #16
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	4788      	blx	r1

				// Check periodicity.
				if (grTimerCallback[index].periodic)
 800587c:	491a      	ldr	r1, [pc, #104]	@ (80058e8 <timerService+0xcc>)
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <timerService+0x9c>
				{
					// Reset interval.
					grTimerCallback[index].remaining = grTimerCallback[index].interval;
 8005892:	4915      	ldr	r1, [pc, #84]	@ (80058e8 <timerService+0xcc>)
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	3304      	adds	r3, #4
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	4810      	ldr	r0, [pc, #64]	@ (80058e8 <timerService+0xcc>)
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4403      	add	r3, r0
 80058b2:	3308      	adds	r3, #8
 80058b4:	6019      	str	r1, [r3, #0]
 80058b6:	e00b      	b.n	80058d0 <timerService+0xb4>
				}
				else
				{
					// Delete entry.
					timerDelete(grTimerCallback[index].pCallback);
 80058b8:	490b      	ldr	r1, [pc, #44]	@ (80058e8 <timerService+0xcc>)
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	330c      	adds	r3, #12
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff ff58 	bl	8005780 <timerDelete>
	for (index = 0; index < DIM(grTimerCallback); index++)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3301      	adds	r3, #1
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b07      	cmp	r3, #7
 80058da:	d9a5      	bls.n	8005828 <timerService+0xc>
				}

			}
		}
	}
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20004318 	.word	0x20004318

080058ec <versionConfidence>:
//
// @param confidence value
// @return pointer to null terminated string
//
const char * versionConfidence(uint16_t confidence)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	4603      	mov	r3, r0
 80058f4:	80fb      	strh	r3, [r7, #6]
    static const char *pConfidence[] = { "omega", "alpha", "beta", "release" };

    // Validate argument[s].
    ASSERT(confidence < DIM(pConfidence));
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	bf94      	ite	ls
 80058fc:	2301      	movls	r3, #1
 80058fe:	2300      	movhi	r3, #0
 8005900:	b2d8      	uxtb	r0, r3
 8005902:	4b07      	ldr	r3, [pc, #28]	@ (8005920 <versionConfidence+0x34>)
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4b07      	ldr	r3, [pc, #28]	@ (8005924 <versionConfidence+0x38>)
 8005908:	221f      	movs	r2, #31
 800590a:	4907      	ldr	r1, [pc, #28]	@ (8005928 <versionConfidence+0x3c>)
 800590c:	f7fb fe94 	bl	8001638 <logAssert>

    return pConfidence[confidence];
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	4a06      	ldr	r2, [pc, #24]	@ (800592c <versionConfidence+0x40>)
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	08017a78 	.word	0x08017a78
 8005924:	08017c64 	.word	0x08017c64
 8005928:	08017a60 	.word	0x08017a60
 800592c:	20000190 	.word	0x20000190

08005930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005968 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005934:	f7ff fd86 	bl	8005444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005938:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800593a:	e003      	b.n	8005944 <LoopCopyDataInit>

0800593c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800593e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005940:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005942:	3104      	adds	r1, #4

08005944 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005944:	480a      	ldr	r0, [pc, #40]	@ (8005970 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005948:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800594a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800594c:	d3f6      	bcc.n	800593c <CopyDataInit>
	ldr	r2, =_sbss
 800594e:	4a0a      	ldr	r2, [pc, #40]	@ (8005978 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005950:	e002      	b.n	8005958 <LoopFillZerobss>

08005952 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005952:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005954:	f842 3b04 	str.w	r3, [r2], #4

08005958 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005958:	4b08      	ldr	r3, [pc, #32]	@ (800597c <LoopForever+0x16>)
	cmp	r2, r3
 800595a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800595c:	d3f9      	bcc.n	8005952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800595e:	f00f fb2d 	bl	8014fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005962:	f7fc f839 	bl	80019d8 <main>

08005966 <LoopForever>:

LoopForever:
    b LoopForever
 8005966:	e7fe      	b.n	8005966 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005968:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 800596c:	080180fc 	.word	0x080180fc
	ldr	r0, =_sdata
 8005970:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005974:	20000370 	.word	0x20000370
	ldr	r2, =_sbss
 8005978:	20000370 	.word	0x20000370
	ldr	r3, = _ebss
 800597c:	20004508 	.word	0x20004508

08005980 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005980:	e7fe      	b.n	8005980 <ADC4_IRQHandler>
	...

08005984 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005988:	4b12      	ldr	r3, [pc, #72]	@ (80059d4 <HAL_Init+0x50>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a11      	ldr	r2, [pc, #68]	@ (80059d4 <HAL_Init+0x50>)
 800598e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005994:	2003      	movs	r0, #3
 8005996:	f002 f8ed 	bl	8007b74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800599a:	f007 fb03 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <HAL_Init+0x54>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	490c      	ldr	r1, [pc, #48]	@ (80059dc <HAL_Init+0x58>)
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
 80059b0:	4a0b      	ldr	r2, [pc, #44]	@ (80059e0 <HAL_Init+0x5c>)
 80059b2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80059b4:	2004      	movs	r0, #4
 80059b6:	f002 f937 	bl	8007c28 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059ba:	200f      	movs	r0, #15
 80059bc:	f000 f812 	bl	80059e4 <HAL_InitTick>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e002      	b.n	80059d0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059ca:	f7fe fc1b 	bl	8004204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40022000 	.word	0x40022000
 80059d8:	46020c00 	.word	0x46020c00
 80059dc:	08017be4 	.word	0x08017be4
 80059e0:	2000018c 	.word	0x2000018c

080059e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80059f0:	4b33      	ldr	r3, [pc, #204]	@ (8005ac0 <HAL_InitTick+0xdc>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e05c      	b.n	8005ab6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80059fc:	4b31      	ldr	r3, [pc, #196]	@ (8005ac4 <HAL_InitTick+0xe0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d10c      	bne.n	8005a22 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005a08:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac8 <HAL_InitTick+0xe4>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac0 <HAL_InitTick+0xdc>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e037      	b.n	8005a92 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8005a22:	f002 f959 	bl	8007cd8 <HAL_SYSTICK_GetCLKSourceConfig>
 8005a26:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d023      	beq.n	8005a76 <HAL_InitTick+0x92>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d82d      	bhi.n	8005a90 <HAL_InitTick+0xac>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_InitTick+0x5e>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d00d      	beq.n	8005a5c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005a40:	e026      	b.n	8005a90 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8005a42:	4b21      	ldr	r3, [pc, #132]	@ (8005ac8 <HAL_InitTick+0xe4>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac0 <HAL_InitTick+0xdc>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	60fb      	str	r3, [r7, #12]
        break;
 8005a5a:	e01a      	b.n	8005a92 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005a5c:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <HAL_InitTick+0xdc>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	60fb      	str	r3, [r7, #12]
        break;
 8005a74:	e00d      	b.n	8005a92 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <HAL_InitTick+0xdc>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	60fb      	str	r3, [r7, #12]
        break;
 8005a8e:	e000      	b.n	8005a92 <HAL_InitTick+0xae>
        break;
 8005a90:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f002 f8a6 	bl	8007be4 <HAL_SYSTICK_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e009      	b.n	8005ab6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	f002 f86e 	bl	8007b8a <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005aae:	4a07      	ldr	r2, [pc, #28]	@ (8005acc <HAL_InitTick+0xe8>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200001a4 	.word	0x200001a4
 8005ac4:	e000e010 	.word	0xe000e010
 8005ac8:	2000018c 	.word	0x2000018c
 8005acc:	200001a0 	.word	0x200001a0

08005ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <HAL_IncTick+0x20>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <HAL_IncTick+0x24>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4413      	add	r3, r2
 8005ae0:	4a04      	ldr	r2, [pc, #16]	@ (8005af4 <HAL_IncTick+0x24>)
 8005ae2:	6013      	str	r3, [r2, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	200001a4 	.word	0x200001a4
 8005af4:	200043b8 	.word	0x200043b8

08005af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return uwTick;
 8005afc:	4b03      	ldr	r3, [pc, #12]	@ (8005b0c <HAL_GetTick+0x14>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	200043b8 	.word	0x200043b8

08005b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b18:	f7ff ffee 	bl	8005af8 <HAL_GetTick>
 8005b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d005      	beq.n	8005b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b54 <HAL_Delay+0x44>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b36:	bf00      	nop
 8005b38:	f7ff ffde 	bl	8005af8 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d8f7      	bhi.n	8005b38 <HAL_Delay+0x28>
  {
  }
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200001a4 	.word	0x200001a4

08005b58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bfc <LL_ADC_SetResolution+0x3c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d104      	bne.n	8005be0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f023 020c 	bic.w	r2, r3, #12
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	46021000 	.word	0x46021000

08005c00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3360      	adds	r3, #96	@ 0x60
 8005c12:	461a      	mov	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	431a      	orrs	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3360      	adds	r3, #96	@ 0x60
 8005c50:	461a      	mov	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3360      	adds	r3, #96	@ 0x60
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	601a      	str	r2, [r3, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3360      	adds	r3, #96	@ 0x60
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3360      	adds	r3, #96	@ 0x60
 8005cea:	461a      	mov	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	d002      	beq.n	8005d42 <LL_ADC_SetGainCompensation+0x32>
 8005d3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d40:	e000      	b.n	8005d44 <LL_ADC_SetGainCompensation+0x34>
 8005d42:	2200      	movs	r2, #0
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	695a      	ldr	r2, [r3, #20]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2107      	movs	r1, #7
 8005d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	401a      	ands	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	431a      	orrs	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	@ 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a2b      	ldr	r2, [pc, #172]	@ (8005e78 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d020      	beq.n	8005e12 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3330      	adds	r3, #48	@ 0x30
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	0a1b      	lsrs	r3, r3, #8
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	f003 030c 	and.w	r3, r3, #12
 8005de0:	4413      	add	r3, r2
 8005de2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	211f      	movs	r1, #31
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0e9b      	lsrs	r3, r3, #26
 8005dfc:	f003 011f 	and.w	r1, r3, #31
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8005e10:	e02b      	b.n	8005e6a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	210f      	movs	r1, #15
 8005e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e22:	43db      	mvns	r3, r3
 8005e24:	401a      	ands	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0e9b      	lsrs	r3, r3, #26
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	e010      	b.n	8005e5c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	613b      	str	r3, [r7, #16]
  return result;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8005e50:	2320      	movs	r3, #32
 8005e52:	e003      	b.n	8005e5c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	fab3 f383 	clz	r3, r3
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	f001 011f 	and.w	r1, r1, #31
 8005e62:	408b      	lsls	r3, r1
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e6a:	bf00      	nop
 8005e6c:	3724      	adds	r7, #36	@ 0x24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	46021000 	.word	0x46021000

08005e7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d107      	bne.n	8005ea0 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	0e9b      	lsrs	r3, r3, #26
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	2201      	movs	r2, #1
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	e015      	b.n	8005ecc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	fa93 f3a3 	rbit	r3, r3
 8005eaa:	60fb      	str	r3, [r7, #12]
  return result;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	e003      	b.n	8005ec2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	fab3 f383 	clz	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	0e9b      	lsrs	r3, r3, #26
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	401a      	ands	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b08b      	sub	sp, #44	@ 0x2c
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a2d      	ldr	r2, [pc, #180]	@ (8006018 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d042      	beq.n	8005fee <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <LL_ADC_SetChannelSamplingTime+0x28>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	0e9b      	lsrs	r3, r3, #26
 8005f76:	f003 021f 	and.w	r2, r3, #31
 8005f7a:	e011      	b.n	8005fa0 <LL_ADC_SetChannelSamplingTime+0x4c>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	fa93 f3a3 	rbit	r3, r3
 8005f86:	617b      	str	r3, [r7, #20]
  return result;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8005f92:	2320      	movs	r3, #32
 8005f94:	e003      	b.n	8005f9e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	fab3 f383 	clz	r3, r3
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	0e5b      	lsrs	r3, r3, #25
 8005fa4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005fa8:	460b      	mov	r3, r1
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	4413      	add	r3, r2
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	0e5b      	lsrs	r3, r3, #25
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	4413      	add	r3, r2
 8005fcc:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	2107      	movs	r1, #7
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	401a      	ands	r2, r3
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8005fec:	e00e      	b.n	800600c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	401a      	ands	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	0219      	lsls	r1, r3, #8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	400b      	ands	r3, r1
 8006002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006006:	431a      	orrs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	615a      	str	r2, [r3, #20]
}
 800600c:	bf00      	nop
 800600e:	372c      	adds	r7, #44	@ 0x2c
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	46021000 	.word	0x46021000

0800601c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f003 0318 	and.w	r3, r3, #24
 800603e:	4908      	ldr	r1, [pc, #32]	@ (8006060 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006040:	40d9      	lsrs	r1, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	400b      	ands	r3, r1
 8006046:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800604a:	431a      	orrs	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	000fffff 	.word	0x000fffff

08006064 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 031f 	and.w	r3, r3, #31
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80060ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6093      	str	r3, [r2, #8]
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d4:	d101      	bne.n	80060da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80060f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006124:	d101      	bne.n	800612a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <LL_ADC_IsEnabled+0x18>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <LL_ADC_IsEnabled+0x1a>
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b04      	cmp	r3, #4
 8006170:	d101      	bne.n	8006176 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d101      	bne.n	800619c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b08b      	sub	sp, #44	@ 0x2c
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80061be:	2300      	movs	r3, #0
 80061c0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e2ce      	b.n	800676a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a95      	ldr	r2, [pc, #596]	@ (8006430 <HAL_ADC_Init+0x284>)
 80061da:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fe f827 	bl	8004238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff ff5f 	bl	80060c0 <LL_ADC_IsDeepPowerDownEnabled>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff ff45 	bl	800609c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff ff7a 	bl	8006110 <LL_ADC_IsInternalRegulatorEnabled>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d115      	bne.n	800624e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff ff5e 	bl	80060e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800622c:	4b81      	ldr	r3, [pc, #516]	@ (8006434 <HAL_ADC_Init+0x288>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	099b      	lsrs	r3, r3, #6
 8006232:	4a81      	ldr	r2, [pc, #516]	@ (8006438 <HAL_ADC_Init+0x28c>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	3301      	adds	r3, #1
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006240:	e002      	b.n	8006248 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3b01      	subs	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f9      	bne.n	8006242 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ff5c 	bl	8006110 <LL_ADC_IsInternalRegulatorEnabled>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10e      	bne.n	800627c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006262:	f043 0210 	orr.w	r2, r3, #16
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff ff6c 	bl	800615e <LL_ADC_REG_IsConversionOngoing>
 8006286:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 825f 	bne.w	8006754 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 825b 	bne.w	8006754 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062a2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80062a6:	f043 0202 	orr.w	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ff40 	bl	8006138 <LL_ADC_IsEnabled>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d14f      	bne.n	800635e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006430 <HAL_ADC_Init+0x284>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d037      	beq.n	8006338 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a5b      	ldr	r2, [pc, #364]	@ (800643c <HAL_ADC_Init+0x290>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_ADC_Init+0x130>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a5a      	ldr	r2, [pc, #360]	@ (8006440 <HAL_ADC_Init+0x294>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10e      	bne.n	80062fa <HAL_ADC_Init+0x14e>
 80062dc:	4857      	ldr	r0, [pc, #348]	@ (800643c <HAL_ADC_Init+0x290>)
 80062de:	f7ff ff2b 	bl	8006138 <LL_ADC_IsEnabled>
 80062e2:	4604      	mov	r4, r0
 80062e4:	4856      	ldr	r0, [pc, #344]	@ (8006440 <HAL_ADC_Init+0x294>)
 80062e6:	f7ff ff27 	bl	8006138 <LL_ADC_IsEnabled>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4323      	orrs	r3, r4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e008      	b.n	800630c <HAL_ADC_Init+0x160>
 80062fa:	484d      	ldr	r0, [pc, #308]	@ (8006430 <HAL_ADC_Init+0x284>)
 80062fc:	f7ff ff1c 	bl	8006138 <LL_ADC_IsEnabled>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d026      	beq.n	800635e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a49      	ldr	r2, [pc, #292]	@ (800643c <HAL_ADC_Init+0x290>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_ADC_Init+0x178>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a48      	ldr	r2, [pc, #288]	@ (8006440 <HAL_ADC_Init+0x294>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <HAL_ADC_Init+0x17c>
 8006324:	4a47      	ldr	r2, [pc, #284]	@ (8006444 <HAL_ADC_Init+0x298>)
 8006326:	e000      	b.n	800632a <HAL_ADC_Init+0x17e>
 8006328:	4a47      	ldr	r2, [pc, #284]	@ (8006448 <HAL_ADC_Init+0x29c>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7ff fc11 	bl	8005b58 <LL_ADC_SetCommonClock>
 8006336:	e012      	b.n	800635e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7ff fc3c 	bl	8005bc0 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8006348:	4b3f      	ldr	r3, [pc, #252]	@ (8006448 <HAL_ADC_Init+0x29c>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8006358:	493b      	ldr	r1, [pc, #236]	@ (8006448 <HAL_ADC_Init+0x29c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a33      	ldr	r2, [pc, #204]	@ (8006430 <HAL_ADC_Init+0x284>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d010      	beq.n	800638a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800636e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006374:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800637a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006382:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8006384:	4313      	orrs	r3, r2
 8006386:	623b      	str	r3, [r7, #32]
 8006388:	e035      	b.n	80063f6 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7f1b      	ldrb	r3, [r3, #28]
 800638e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006396:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006398:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800639e:	2a00      	cmp	r2, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_ADC_Init+0x1fc>
 80063a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063a6:	e000      	b.n	80063aa <HAL_ADC_Init+0x1fe>
 80063a8:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80063aa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80063b0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da04      	bge.n	80063c4 <HAL_ADC_Init+0x218>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063c2:	e001      	b.n	80063c8 <HAL_ADC_Init+0x21c>
 80063c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80063c8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	491b      	ldr	r1, [pc, #108]	@ (800643c <HAL_ADC_Init+0x290>)
 80063d0:	428b      	cmp	r3, r1
 80063d2:	d004      	beq.n	80063de <HAL_ADC_Init+0x232>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4919      	ldr	r1, [pc, #100]	@ (8006440 <HAL_ADC_Init+0x294>)
 80063da:	428b      	cmp	r3, r1
 80063dc:	d103      	bne.n	80063e6 <HAL_ADC_Init+0x23a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063e4:	e003      	b.n	80063ee <HAL_ADC_Init+0x242>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063ec:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80063ee:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d131      	bne.n	8006464 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <HAL_ADC_Init+0x284>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d007      	beq.n	800641a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640e:	3b01      	subs	r3, #1
 8006410:	045b      	lsls	r3, r3, #17
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	4313      	orrs	r3, r2
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	e024      	b.n	8006464 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d113      	bne.n	800644c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	e01a      	b.n	8006464 <HAL_ADC_Init+0x2b8>
 800642e:	bf00      	nop
 8006430:	46021000 	.word	0x46021000
 8006434:	2000018c 	.word	0x2000018c
 8006438:	053e2d63 	.word	0x053e2d63
 800643c:	42028000 	.word	0x42028000
 8006440:	42028100 	.word	0x42028100
 8006444:	42028300 	.word	0x42028300
 8006448:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a75      	ldr	r2, [pc, #468]	@ (8006640 <HAL_ADC_Init+0x494>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d018      	beq.n	80064a0 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	4313      	orrs	r3, r2
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	4313      	orrs	r3, r2
 8006488:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	4b6c      	ldr	r3, [pc, #432]	@ (8006644 <HAL_ADC_Init+0x498>)
 8006492:	4013      	ands	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	6a39      	ldr	r1, [r7, #32]
 800649a:	430b      	orrs	r3, r1
 800649c:	60d3      	str	r3, [r2, #12]
 800649e:	e031      	b.n	8006504 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ac:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	4313      	orrs	r3, r2
 80064b6:	6a3a      	ldr	r2, [r7, #32]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	4b61      	ldr	r3, [pc, #388]	@ (8006648 <HAL_ADC_Init+0x49c>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	6a39      	ldr	r1, [r7, #32]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1a      	ldr	r2, [r3, #32]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a4d      	ldr	r2, [pc, #308]	@ (8006640 <HAL_ADC_Init+0x494>)
 800650a:	4293      	cmp	r3, r2
 800650c:	f000 80a4 	beq.w	8006658 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fe22 	bl	800615e <LL_ADC_REG_IsConversionOngoing>
 800651a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fe2f 	bl	8006184 <LL_ADC_INJ_IsConversionOngoing>
 8006526:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d166      	bne.n	80065fc <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d163      	bne.n	80065fc <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7f1b      	ldrb	r3, [r3, #28]
 8006538:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4943      	ldr	r1, [pc, #268]	@ (800664c <HAL_ADC_Init+0x4a0>)
 8006540:	428b      	cmp	r3, r1
 8006542:	d004      	beq.n	800654e <HAL_ADC_Init+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4941      	ldr	r1, [pc, #260]	@ (8006650 <HAL_ADC_Init+0x4a4>)
 800654a:	428b      	cmp	r3, r1
 800654c:	d102      	bne.n	8006554 <HAL_ADC_Init+0x3a8>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006552:	e002      	b.n	800655a <HAL_ADC_Init+0x3ae>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800655a:	4313      	orrs	r3, r2
 800655c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006568:	f023 0303 	bic.w	r3, r3, #3
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	6a39      	ldr	r1, [r7, #32]
 8006572:	430b      	orrs	r3, r1
 8006574:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7ff fbc1 	bl	8005d10 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006594:	2b01      	cmp	r3, #1
 8006596:	d11e      	bne.n	80065d6 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006654 <HAL_ADC_Init+0x4a8>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80065ac:	0411      	lsls	r1, r2, #16
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80065b2:	4311      	orrs	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80065b8:	4311      	orrs	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80065be:	4311      	orrs	r1, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80065c4:	0892      	lsrs	r2, r2, #2
 80065c6:	430a      	orrs	r2, r1
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	611a      	str	r2, [r3, #16]
 80065d4:	e007      	b.n	80065e6 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10c      	bne.n	800661e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660a:	f023 010f 	bic.w	r1, r3, #15
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	1e5a      	subs	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	631a      	str	r2, [r3, #48]	@ 0x30
 800661c:	e007      	b.n	800662e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 020f 	bic.w	r2, r2, #15
 800662c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800663e:	e092      	b.n	8006766 <HAL_ADC_Init+0x5ba>
 8006640:	46021000 	.word	0x46021000
 8006644:	fff0c013 	.word	0xfff0c013
 8006648:	ffde800d 	.word	0xffde800d
 800664c:	42028000 	.word	0x42028000
 8006650:	42028100 	.word	0x42028100
 8006654:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800665e:	2b01      	cmp	r3, #1
 8006660:	d111      	bne.n	8006686 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800666a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8006670:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8006676:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	4313      	orrs	r3, r2
 800667c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	4b39      	ldr	r3, [pc, #228]	@ (8006774 <HAL_ADC_Init+0x5c8>)
 800668e:	4013      	ands	r3, r2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	69f9      	ldr	r1, [r7, #28]
 8006696:	430b      	orrs	r3, r1
 8006698:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066a2:	461a      	mov	r2, r3
 80066a4:	2100      	movs	r1, #0
 80066a6:	f7ff fb56 	bl	8005d56 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b2:	461a      	mov	r2, r3
 80066b4:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80066b8:	f7ff fb4d 	bl	8005d56 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d108      	bne.n	80066d6 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f062 020f 	orn	r2, r2, #15
 80066d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80066d4:	e018      	b.n	8006708 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066de:	d113      	bne.n	8006708 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	3b01      	subs	r3, #1
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	f003 031c 	and.w	r3, r3, #28
 80066f2:	f06f 020f 	mvn.w	r2, #15
 80066f6:	fa02 f103 	lsl.w	r1, r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <HAL_ADC_Init+0x5cc>)
 8006710:	4013      	ands	r3, r2
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	429a      	cmp	r2, r3
 8006716:	d10b      	bne.n	8006730 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800672e:	e01a      	b.n	8006766 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006734:	f023 0312 	bic.w	r3, r3, #18
 8006738:	f043 0210 	orr.w	r2, r3, #16
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006744:	f043 0201 	orr.w	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006752:	e008      	b.n	8006766 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006758:	f043 0210 	orr.w	r2, r3, #16
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8006766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800676a:	4618      	mov	r0, r3
 800676c:	372c      	adds	r7, #44	@ 0x2c
 800676e:	46bd      	mov	sp, r7
 8006770:	bd90      	pop	{r4, r7, pc}
 8006772:	bf00      	nop
 8006774:	f7fffc02 	.word	0xf7fffc02
 8006778:	833ffff3 	.word	0x833ffff3

0800677c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006784:	2300      	movs	r3, #0
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a77      	ldr	r2, [pc, #476]	@ (800697c <HAL_ADC_IRQHandler+0x200>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_ADC_IRQHandler+0x30>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a76      	ldr	r2, [pc, #472]	@ (8006980 <HAL_ADC_IRQHandler+0x204>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <HAL_ADC_IRQHandler+0x34>
 80067ac:	4b75      	ldr	r3, [pc, #468]	@ (8006984 <HAL_ADC_IRQHandler+0x208>)
 80067ae:	e000      	b.n	80067b2 <HAL_ADC_IRQHandler+0x36>
 80067b0:	4b75      	ldr	r3, [pc, #468]	@ (8006988 <HAL_ADC_IRQHandler+0x20c>)
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fc56 	bl	8006064 <LL_ADC_GetMultimode>
 80067b8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <HAL_ADC_IRQHandler+0x78>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d105      	bne.n	80067e6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f8f6 	bl	80079d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2202      	movs	r2, #2
 80067f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <HAL_ADC_IRQHandler+0x8c>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80d1 	beq.w	80069b6 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80cb 	beq.w	80069b6 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006830:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a53      	ldr	r2, [pc, #332]	@ (800698c <HAL_ADC_IRQHandler+0x210>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d06c      	beq.n	800691c <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff faa4 	bl	8005d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 80aa 	beq.w	80069a8 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a49      	ldr	r2, [pc, #292]	@ (8006980 <HAL_ADC_IRQHandler+0x204>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d002      	beq.n	8006864 <HAL_ADC_IRQHandler+0xe8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	e000      	b.n	8006866 <HAL_ADC_IRQHandler+0xea>
 8006864:	4b45      	ldr	r3, [pc, #276]	@ (800697c <HAL_ADC_IRQHandler+0x200>)
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	4293      	cmp	r3, r2
 800686c:	d008      	beq.n	8006880 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b05      	cmp	r3, #5
 8006878:	d002      	beq.n	8006880 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b09      	cmp	r3, #9
 800687e:	d104      	bne.n	800688a <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	e00c      	b.n	80068a4 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3c      	ldr	r2, [pc, #240]	@ (8006980 <HAL_ADC_IRQHandler+0x204>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d002      	beq.n	800689a <HAL_ADC_IRQHandler+0x11e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	e000      	b.n	800689c <HAL_ADC_IRQHandler+0x120>
 800689a:	4b38      	ldr	r3, [pc, #224]	@ (800697c <HAL_ADC_IRQHandler+0x200>)
 800689c:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d17c      	bne.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d175      	bne.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fc4c 	bl	800615e <LL_ADC_REG_IsConversionOngoing>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d11a      	bne.n	8006902 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 020c 	bic.w	r2, r2, #12
 80068da:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d159      	bne.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068f8:	f043 0201 	orr.w	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	679a      	str	r2, [r3, #120]	@ 0x78
 8006900:	e052      	b.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006906:	f043 0210 	orr.w	r2, r3, #16
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006912:	f043 0201 	orr.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	67da      	str	r2, [r3, #124]	@ 0x7c
 800691a:	e045      	b.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fa37 	bl	8005d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d03d      	beq.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	d138      	bne.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d131      	bne.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fc08 	bl	800615e <LL_ADC_REG_IsConversionOngoing>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11d      	bne.n	8006990 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 020c 	bic.w	r2, r2, #12
 8006962:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	f043 0201 	orr.w	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	679a      	str	r2, [r3, #120]	@ 0x78
 8006978:	e016      	b.n	80069a8 <HAL_ADC_IRQHandler+0x22c>
 800697a:	bf00      	nop
 800697c:	42028000 	.word	0x42028000
 8006980:	42028100 	.word	0x42028100
 8006984:	42028300 	.word	0x42028300
 8006988:	46021300 	.word	0x46021300
 800698c:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f99d 	bl	8006ce8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	220c      	movs	r2, #12
 80069b4:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a8c      	ldr	r2, [pc, #560]	@ (8006bec <HAL_ADC_IRQHandler+0x470>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	f000 8095 	beq.w	8006aec <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <HAL_ADC_IRQHandler+0x25a>
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8085 	beq.w	8006aec <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d07f      	beq.n	8006aec <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff fa90 	bl	8005f2e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006a0e:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff f9bd 	bl	8005d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a1a:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a73      	ldr	r2, [pc, #460]	@ (8006bf0 <HAL_ADC_IRQHandler+0x474>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d002      	beq.n	8006a2c <HAL_ADC_IRQHandler+0x2b0>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	e000      	b.n	8006a2e <HAL_ADC_IRQHandler+0x2b2>
 8006a2c:	4b71      	ldr	r3, [pc, #452]	@ (8006bf4 <HAL_ADC_IRQHandler+0x478>)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d008      	beq.n	8006a48 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b06      	cmp	r3, #6
 8006a40:	d002      	beq.n	8006a48 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b07      	cmp	r3, #7
 8006a46:	d104      	bne.n	8006a52 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	e00c      	b.n	8006a6c <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a66      	ldr	r2, [pc, #408]	@ (8006bf0 <HAL_ADC_IRQHandler+0x474>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d002      	beq.n	8006a62 <HAL_ADC_IRQHandler+0x2e6>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	e000      	b.n	8006a64 <HAL_ADC_IRQHandler+0x2e8>
 8006a62:	4b64      	ldr	r3, [pc, #400]	@ (8006bf4 <HAL_ADC_IRQHandler+0x478>)
 8006a64:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d035      	beq.n	8006ade <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <HAL_ADC_IRQHandler+0x310>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d02d      	beq.n	8006ade <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d128      	bne.n	8006ade <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	d121      	bne.n	8006ade <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fb70 	bl	8006184 <LL_ADC_INJ_IsConversionOngoing>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d119      	bne.n	8006ade <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ab8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006abe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d105      	bne.n	8006ade <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 ff5c 	bl	800799c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2260      	movs	r2, #96	@ 0x60
 8006aea:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d011      	beq.n	8006b1a <HAL_ADC_IRQHandler+0x39e>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f8f5 	bl	8006cfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2280      	movs	r2, #128	@ 0x80
 8006b18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d012      	beq.n	8006b4a <HAL_ADC_IRQHandler+0x3ce>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 ff38 	bl	80079b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <HAL_ADC_IRQHandler+0x3fe>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 ff2a 	bl	80079c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d05d      	beq.n	8006c40 <HAL_ADC_IRQHandler+0x4c4>
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d058      	beq.n	8006c40 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8006b96:	2301      	movs	r3, #1
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b9a:	e03b      	b.n	8006c14 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a12      	ldr	r2, [pc, #72]	@ (8006bec <HAL_ADC_IRQHandler+0x470>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d02c      	beq.n	8006c00 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d015      	beq.n	8006bd8 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a10      	ldr	r2, [pc, #64]	@ (8006bf4 <HAL_ADC_IRQHandler+0x478>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_ADC_IRQHandler+0x444>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a0d      	ldr	r2, [pc, #52]	@ (8006bf0 <HAL_ADC_IRQHandler+0x474>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d101      	bne.n	8006bc4 <HAL_ADC_IRQHandler+0x448>
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <HAL_ADC_IRQHandler+0x47c>)
 8006bc2:	e000      	b.n	8006bc6 <HAL_ADC_IRQHandler+0x44a>
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <HAL_ADC_IRQHandler+0x480>)
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fa5a 	bl	8006080 <LL_ADC_GetMultiDMATransfer>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d020      	beq.n	8006c14 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bd6:	e01d      	b.n	8006c14 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d016      	beq.n	8006c14 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8006be6:	2301      	movs	r3, #1
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bea:	e013      	b.n	8006c14 <HAL_ADC_IRQHandler+0x498>
 8006bec:	46021000 	.word	0x46021000
 8006bf0:	42028100 	.word	0x42028100
 8006bf4:	42028000 	.word	0x42028000
 8006bf8:	42028300 	.word	0x42028300
 8006bfc:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff f984 	bl	8005f12 <LL_ADC_REG_GetDMATransfer>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8006c10:	2301      	movs	r3, #1
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d10e      	bne.n	8006c38 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2a:	f043 0202 	orr.w	r2, r3, #2
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f86c 	bl	8006d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01b      	beq.n	8006c82 <HAL_ADC_IRQHandler+0x506>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d016      	beq.n	8006c82 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f86d 	bl	8006d4c <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a17      	ldr	r2, [pc, #92]	@ (8006ce4 <HAL_ADC_IRQHandler+0x568>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d126      	bne.n	8006cda <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00c      	beq.n	8006cb0 <HAL_ADC_IRQHandler+0x534>
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f83f 	bl	8006d24 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cae:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <HAL_ADC_IRQHandler+0x55e>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f837 	bl	8006d38 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cd8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3728      	adds	r7, #40	@ 0x28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	46021000 	.word	0x46021000

08006ce8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8006d60:	b590      	push	{r4, r7, lr}
 8006d62:	b0b7      	sub	sp, #220	@ 0xdc
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4aa8      	ldr	r2, [pc, #672]	@ (800701c <HAL_ADC_ConfigChannel+0x2bc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d103      	bne.n	8006d86 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d102      	bne.n	8006d96 <HAL_ADC_ConfigChannel+0x36>
 8006d90:	2302      	movs	r3, #2
 8006d92:	f000 bdfe 	b.w	8007992 <HAL_ADC_ConfigChannel+0xc32>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff f9db 	bl	800615e <LL_ADC_REG_IsConversionOngoing>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 85c1 	bne.w	8007932 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a99      	ldr	r2, [pc, #612]	@ (800701c <HAL_ADC_ConfigChannel+0x2bc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	f000 8409 	beq.w	80075ce <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d108      	bne.n	8006dda <HAL_ADC_ConfigChannel+0x7a>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	0e9b      	lsrs	r3, r3, #26
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	e01d      	b.n	8006e16 <HAL_ADC_ConfigChannel+0xb6>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006de6:	fa93 f3a3 	rbit	r3, r3
 8006dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8006dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006df2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8006df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8006dfe:	2320      	movs	r3, #32
 8006e00:	e004      	b.n	8006e0c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8006e02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e06:	fab3 f383 	clz	r3, r3
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2201      	movs	r2, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	69d1      	ldr	r1, [r2, #28]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6812      	ldr	r2, [r2, #0]
 8006e20:	430b      	orrs	r3, r1
 8006e22:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6859      	ldr	r1, [r3, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f7fe ffc3 	bl	8005dbc <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff f98f 	bl	800615e <LL_ADC_REG_IsConversionOngoing>
 8006e40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff f99b 	bl	8006184 <LL_ADC_INJ_IsConversionOngoing>
 8006e4e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 81df 	bne.w	800721a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 81da 	bne.w	800721a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6819      	ldr	r1, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7ff f86e 	bl	8005f54 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	695a      	ldr	r2, [r3, #20]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d046      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6919      	ldr	r1, [r3, #16]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006eaa:	f7fe fea9 	bl	8005c00 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6919      	ldr	r1, [r3, #16]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f7fe fed7 	bl	8005c6e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	7e9b      	ldrb	r3, [r3, #26]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d11e      	bne.n	8006f06 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_ADC_ConfigChannel+0x17e>
 8006ed8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006edc:	e000      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x180>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f7fe fefa 	bl	8005cda <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <HAL_ADC_ConfigChannel+0x19c>
 8006ef6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006efa:	e000      	b.n	8006efe <HAL_ADC_ConfigChannel+0x19e>
 8006efc:	2300      	movs	r3, #0
 8006efe:	461a      	mov	r2, r3
 8006f00:	f7fe fed0 	bl	8005ca4 <LL_ADC_SetOffsetSignedSaturation>
 8006f04:	e189      	b.n	800721a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4619      	mov	r1, r3
 8006f12:	f7fe fee2 	bl	8005cda <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4619      	mov	r1, r3
 8006f22:	f7fe febf 	bl	8005ca4 <LL_ADC_SetOffsetSignedSaturation>
 8006f26:	e178      	b.n	800721a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fe87 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <HAL_ADC_ConfigChannel+0x1f4>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fe7c 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	0e9b      	lsrs	r3, r3, #26
 8006f4e:	f003 021f 	and.w	r2, r3, #31
 8006f52:	e01e      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x232>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fe71 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f6a:	fa93 f3a3 	rbit	r3, r3
 8006f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006f7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8006f82:	2320      	movs	r3, #32
 8006f84:	e004      	b.n	8006f90 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8006f86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f8a:	fab3 f383 	clz	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x24a>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	0e9b      	lsrs	r3, r3, #26
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	e018      	b.n	8006fdc <HAL_ADC_ConfigChannel+0x27c>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fb6:	fa93 f3a3 	rbit	r3, r3
 8006fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8006fce:	2320      	movs	r3, #32
 8006fd0:	e004      	b.n	8006fdc <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8006fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fd6:	fab3 f383 	clz	r3, r3
 8006fda:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d107      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2100      	movs	r1, #0
 8006fec:	f7fe fe08 	bl	8005c00 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fe23 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <HAL_ADC_ConfigChannel+0x2c0>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fe18 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 8007012:	4603      	mov	r3, r0
 8007014:	0e9b      	lsrs	r3, r3, #26
 8007016:	f003 021f 	and.w	r2, r3, #31
 800701a:	e020      	b.n	800705e <HAL_ADC_ConfigChannel+0x2fe>
 800701c:	46021000 	.word	0x46021000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2101      	movs	r1, #1
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fe0b 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 800702c:	4603      	mov	r3, r0
 800702e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007036:	fa93 f3a3 	rbit	r3, r3
 800703a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800703e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8007046:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800704e:	2320      	movs	r3, #32
 8007050:	e004      	b.n	800705c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8007052:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007056:	fab3 f383 	clz	r3, r3
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <HAL_ADC_ConfigChannel+0x316>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	0e9b      	lsrs	r3, r3, #26
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	e018      	b.n	80070a8 <HAL_ADC_ConfigChannel+0x348>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007082:	fa93 f3a3 	rbit	r3, r3
 8007086:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800708a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800708e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800709a:	2320      	movs	r3, #32
 800709c:	e004      	b.n	80070a8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800709e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070a2:	fab3 f383 	clz	r3, r3
 80070a6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d107      	bne.n	80070bc <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	2101      	movs	r1, #1
 80070b8:	f7fe fda2 	bl	8005c00 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2102      	movs	r1, #2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fdbd 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x388>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2102      	movs	r1, #2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fdb2 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 80070de:	4603      	mov	r3, r0
 80070e0:	0e9b      	lsrs	r3, r3, #26
 80070e2:	f003 021f 	and.w	r2, r3, #31
 80070e6:	e01a      	b.n	800711e <HAL_ADC_ConfigChannel+0x3be>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2102      	movs	r1, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fda7 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 80070f4:	4603      	mov	r3, r0
 80070f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070fa:	fa93 f3a3 	rbit	r3, r3
 80070fe:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007106:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800710e:	2320      	movs	r3, #32
 8007110:	e004      	b.n	800711c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8007112:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007116:	fab3 f383 	clz	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x3d6>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	0e9b      	lsrs	r3, r3, #26
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	e011      	b.n	800715a <HAL_ADC_ConfigChannel+0x3fa>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800713e:	fa93 f3a3 	rbit	r3, r3
 8007142:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007146:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007148:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800714e:	2320      	movs	r3, #32
 8007150:	e003      	b.n	800715a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8007152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007154:	fab3 f383 	clz	r3, r3
 8007158:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800715a:	429a      	cmp	r2, r3
 800715c:	d107      	bne.n	800716e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	2300      	movs	r3, #0
 8007168:	2102      	movs	r1, #2
 800716a:	f7fe fd49 	bl	8005c00 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2103      	movs	r1, #3
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fd64 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 800717a:	4603      	mov	r3, r0
 800717c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <HAL_ADC_ConfigChannel+0x43a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2103      	movs	r1, #3
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fd59 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 8007190:	4603      	mov	r3, r0
 8007192:	0e9b      	lsrs	r3, r3, #26
 8007194:	f003 021f 	and.w	r2, r3, #31
 8007198:	e017      	b.n	80071ca <HAL_ADC_ConfigChannel+0x46a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2103      	movs	r1, #3
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fd4e 	bl	8005c42 <LL_ADC_GetOffsetChannel>
 80071a6:	4603      	mov	r3, r0
 80071a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ac:	fa93 f3a3 	rbit	r3, r3
 80071b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80071b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80071b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80071bc:	2320      	movs	r3, #32
 80071be:	e003      	b.n	80071c8 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80071c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071c2:	fab3 f383 	clz	r3, r3
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d105      	bne.n	80071e2 <HAL_ADC_ConfigChannel+0x482>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	0e9b      	lsrs	r3, r3, #26
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	e011      	b.n	8007206 <HAL_ADC_ConfigChannel+0x4a6>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071ea:	fa93 f3a3 	rbit	r3, r3
 80071ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80071f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80071f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80071fa:	2320      	movs	r3, #32
 80071fc:	e003      	b.n	8007206 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80071fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007200:	fab3 f383 	clz	r3, r3
 8007204:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007206:	429a      	cmp	r2, r3
 8007208:	d107      	bne.n	800721a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	2103      	movs	r1, #3
 8007216:	f7fe fcf3 	bl	8005c00 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe ff8a 	bl	8006138 <LL_ADC_IsEnabled>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	f040 83ad 	bne.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	461a      	mov	r2, r3
 800723a:	f7fe feef 	bl	800601c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007246:	f040 80d6 	bne.w	80073f6 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <HAL_ADC_ConfigChannel+0x50e>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	0e9b      	lsrs	r3, r3, #26
 800725c:	3301      	adds	r3, #1
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2b09      	cmp	r3, #9
 8007264:	bf94      	ite	ls
 8007266:	2301      	movls	r3, #1
 8007268:	2300      	movhi	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	e019      	b.n	80072a2 <HAL_ADC_ConfigChannel+0x542>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007276:	fa93 f3a3 	rbit	r3, r3
 800727a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800727c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800727e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007286:	2320      	movs	r3, #32
 8007288:	e003      	b.n	8007292 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800728a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800728c:	fab3 f383 	clz	r3, r3
 8007290:	b2db      	uxtb	r3, r3
 8007292:	3301      	adds	r3, #1
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2b09      	cmp	r3, #9
 800729a:	bf94      	ite	ls
 800729c:	2301      	movls	r3, #1
 800729e:	2300      	movhi	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d04d      	beq.n	8007342 <HAL_ADC_ConfigChannel+0x5e2>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <HAL_ADC_ConfigChannel+0x562>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	0e9b      	lsrs	r3, r3, #26
 80072b8:	3301      	adds	r3, #1
 80072ba:	069b      	lsls	r3, r3, #26
 80072bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072c0:	e015      	b.n	80072ee <HAL_ADC_ConfigChannel+0x58e>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ca:	fa93 f3a3 	rbit	r3, r3
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80072d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80072d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80072da:	2320      	movs	r3, #32
 80072dc:	e003      	b.n	80072e6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80072de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e0:	fab3 f383 	clz	r3, r3
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	3301      	adds	r3, #1
 80072e8:	069b      	lsls	r3, r3, #26
 80072ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <HAL_ADC_ConfigChannel+0x5ae>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	0e9b      	lsrs	r3, r3, #26
 8007300:	3301      	adds	r3, #1
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2101      	movs	r1, #1
 8007308:	fa01 f303 	lsl.w	r3, r1, r3
 800730c:	e017      	b.n	800733e <HAL_ADC_ConfigChannel+0x5de>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8007326:	2320      	movs	r3, #32
 8007328:	e003      	b.n	8007332 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800732a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732c:	fab3 f383 	clz	r3, r3
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3301      	adds	r3, #1
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2101      	movs	r1, #1
 800733a:	fa01 f303 	lsl.w	r3, r1, r3
 800733e:	4313      	orrs	r3, r2
 8007340:	e04e      	b.n	80073e0 <HAL_ADC_ConfigChannel+0x680>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d107      	bne.n	800735e <HAL_ADC_ConfigChannel+0x5fe>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	0e9b      	lsrs	r3, r3, #26
 8007354:	3301      	adds	r3, #1
 8007356:	069b      	lsls	r3, r3, #26
 8007358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800735c:	e015      	b.n	800738a <HAL_ADC_ConfigChannel+0x62a>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	fa93 f3a3 	rbit	r3, r3
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8007376:	2320      	movs	r3, #32
 8007378:	e003      	b.n	8007382 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800737a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737c:	fab3 f383 	clz	r3, r3
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3301      	adds	r3, #1
 8007384:	069b      	lsls	r3, r3, #26
 8007386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <HAL_ADC_ConfigChannel+0x64a>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	0e9b      	lsrs	r3, r3, #26
 800739c:	3301      	adds	r3, #1
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	2101      	movs	r1, #1
 80073a4:	fa01 f303 	lsl.w	r3, r1, r3
 80073a8:	e017      	b.n	80073da <HAL_ADC_ConfigChannel+0x67a>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	fa93 f3a3 	rbit	r3, r3
 80073b6:	61bb      	str	r3, [r7, #24]
  return result;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80073c2:	2320      	movs	r3, #32
 80073c4:	e003      	b.n	80073ce <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	fab3 f383 	clz	r3, r3
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	3301      	adds	r3, #1
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	2101      	movs	r1, #1
 80073d6:	fa01 f303 	lsl.w	r3, r1, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80073e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	461a      	mov	r2, r3
 80073ee:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80073f2:	f7fe fdaf 	bl	8005f54 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f280 82c3 	bge.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a92      	ldr	r2, [pc, #584]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_ADC_ConfigChannel+0x6b4>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a91      	ldr	r2, [pc, #580]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d101      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x6b8>
 8007414:	4b90      	ldr	r3, [pc, #576]	@ (8007658 <HAL_ADC_ConfigChannel+0x8f8>)
 8007416:	e000      	b.n	800741a <HAL_ADC_ConfigChannel+0x6ba>
 8007418:	4b90      	ldr	r3, [pc, #576]	@ (800765c <HAL_ADC_ConfigChannel+0x8fc>)
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fbc2 	bl	8005ba4 <LL_ADC_GetCommonPathInternalCh>
 8007420:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a89      	ldr	r2, [pc, #548]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <HAL_ADC_ConfigChannel+0x6d8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a88      	ldr	r2, [pc, #544]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d10e      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x6f6>
 8007438:	4885      	ldr	r0, [pc, #532]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 800743a:	f7fe fe7d 	bl	8006138 <LL_ADC_IsEnabled>
 800743e:	4604      	mov	r4, r0
 8007440:	4884      	ldr	r0, [pc, #528]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 8007442:	f7fe fe79 	bl	8006138 <LL_ADC_IsEnabled>
 8007446:	4603      	mov	r3, r0
 8007448:	4323      	orrs	r3, r4
 800744a:	2b00      	cmp	r3, #0
 800744c:	bf0c      	ite	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	2300      	movne	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	e008      	b.n	8007468 <HAL_ADC_ConfigChannel+0x708>
 8007456:	4882      	ldr	r0, [pc, #520]	@ (8007660 <HAL_ADC_ConfigChannel+0x900>)
 8007458:	f7fe fe6e 	bl	8006138 <LL_ADC_IsEnabled>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf0c      	ite	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	2300      	movne	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80a6 	beq.w	80075ba <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a7c      	ldr	r2, [pc, #496]	@ (8007664 <HAL_ADC_ConfigChannel+0x904>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d13c      	bne.n	80074f2 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800747c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d136      	bne.n	80074f2 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a71      	ldr	r2, [pc, #452]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00a      	beq.n	80074a4 <HAL_ADC_ConfigChannel+0x744>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a70      	ldr	r2, [pc, #448]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d005      	beq.n	80074a4 <HAL_ADC_ConfigChannel+0x744>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a70      	ldr	r2, [pc, #448]	@ (8007660 <HAL_ADC_ConfigChannel+0x900>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	f040 826e 	bne.w	8007980 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a69      	ldr	r2, [pc, #420]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <HAL_ADC_ConfigChannel+0x758>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a68      	ldr	r2, [pc, #416]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d101      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x75c>
 80074b8:	4a67      	ldr	r2, [pc, #412]	@ (8007658 <HAL_ADC_ConfigChannel+0x8f8>)
 80074ba:	e000      	b.n	80074be <HAL_ADC_ConfigChannel+0x75e>
 80074bc:	4a67      	ldr	r2, [pc, #412]	@ (800765c <HAL_ADC_ConfigChannel+0x8fc>)
 80074be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f7fe fb58 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074ce:	4b66      	ldr	r3, [pc, #408]	@ (8007668 <HAL_ADC_ConfigChannel+0x908>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	099b      	lsrs	r3, r3, #6
 80074d4:	4a65      	ldr	r2, [pc, #404]	@ (800766c <HAL_ADC_ConfigChannel+0x90c>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	099b      	lsrs	r3, r3, #6
 80074dc:	3301      	adds	r3, #1
 80074de:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80074e0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80074e2:	e002      	b.n	80074ea <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f9      	bne.n	80074e4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074f0:	e246      	b.n	8007980 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a5e      	ldr	r2, [pc, #376]	@ (8007670 <HAL_ADC_ConfigChannel+0x910>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d12b      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80074fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8007504:	2b00      	cmp	r3, #0
 8007506:	d125      	bne.n	8007554 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a50      	ldr	r2, [pc, #320]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00a      	beq.n	8007528 <HAL_ADC_ConfigChannel+0x7c8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4f      	ldr	r2, [pc, #316]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d005      	beq.n	8007528 <HAL_ADC_ConfigChannel+0x7c8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a4f      	ldr	r2, [pc, #316]	@ (8007660 <HAL_ADC_ConfigChannel+0x900>)
 8007522:	4293      	cmp	r3, r2
 8007524:	f040 822e 	bne.w	8007984 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a48      	ldr	r2, [pc, #288]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d004      	beq.n	800753c <HAL_ADC_ConfigChannel+0x7dc>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a47      	ldr	r2, [pc, #284]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d101      	bne.n	8007540 <HAL_ADC_ConfigChannel+0x7e0>
 800753c:	4a46      	ldr	r2, [pc, #280]	@ (8007658 <HAL_ADC_ConfigChannel+0x8f8>)
 800753e:	e000      	b.n	8007542 <HAL_ADC_ConfigChannel+0x7e2>
 8007540:	4a46      	ldr	r2, [pc, #280]	@ (800765c <HAL_ADC_ConfigChannel+0x8fc>)
 8007542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7fe fb16 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007552:	e217      	b.n	8007984 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a46      	ldr	r2, [pc, #280]	@ (8007674 <HAL_ADC_ConfigChannel+0x914>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f040 8213 	bne.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 820c 	bne.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a37      	ldr	r2, [pc, #220]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00a      	beq.n	800758e <HAL_ADC_ConfigChannel+0x82e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a35      	ldr	r2, [pc, #212]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d005      	beq.n	800758e <HAL_ADC_ConfigChannel+0x82e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a36      	ldr	r2, [pc, #216]	@ (8007660 <HAL_ADC_ConfigChannel+0x900>)
 8007588:	4293      	cmp	r3, r2
 800758a:	f040 81fc 	bne.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a2f      	ldr	r2, [pc, #188]	@ (8007650 <HAL_ADC_ConfigChannel+0x8f0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_ADC_ConfigChannel+0x842>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <HAL_ADC_ConfigChannel+0x8f4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <HAL_ADC_ConfigChannel+0x846>
 80075a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007658 <HAL_ADC_ConfigChannel+0x8f8>)
 80075a4:	e000      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x848>
 80075a6:	4a2d      	ldr	r2, [pc, #180]	@ (800765c <HAL_ADC_ConfigChannel+0x8fc>)
 80075a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7fe fae3 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
 80075b8:	e1e5      	b.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075be:	f043 0220 	orr.w	r2, r3, #32
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80075cc:	e1db      	b.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	f000 811b 	beq.w	8007816 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075e8:	d004      	beq.n	80075f4 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80075ee:	4a22      	ldr	r2, [pc, #136]	@ (8007678 <HAL_ADC_ConfigChannel+0x918>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d107      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fc3d 	bl	8005e7c <LL_ADC_REG_SetSequencerChAdd>
 8007602:	e059      	b.n	80076b8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	210f      	movs	r1, #15
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007620:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_ADC_ConfigChannel+0x8d4>
 8007628:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800762c:	0e9b      	lsrs	r3, r3, #26
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	e027      	b.n	8007684 <HAL_ADC_ConfigChannel+0x924>
 8007634:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007638:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	fa93 f3a3 	rbit	r3, r3
 8007640:	60fb      	str	r3, [r7, #12]
  return result;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d117      	bne.n	800767c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 800764c:	2320      	movs	r3, #32
 800764e:	e019      	b.n	8007684 <HAL_ADC_ConfigChannel+0x924>
 8007650:	42028000 	.word	0x42028000
 8007654:	42028100 	.word	0x42028100
 8007658:	42028300 	.word	0x42028300
 800765c:	46021300 	.word	0x46021300
 8007660:	46021000 	.word	0x46021000
 8007664:	ce080000 	.word	0xce080000
 8007668:	2000018c 	.word	0x2000018c
 800766c:	053e2d63 	.word	0x053e2d63
 8007670:	ca040000 	.word	0xca040000
 8007674:	80000001 	.word	0x80000001
 8007678:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	fab3 f383 	clz	r3, r3
 8007682:	b2db      	uxtb	r3, r3
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6849      	ldr	r1, [r1, #4]
 8007688:	f001 011f 	and.w	r1, r1, #31
 800768c:	408b      	lsls	r3, r1
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	089b      	lsrs	r3, r3, #2
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d808      	bhi.n	80076b8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076b2:	4619      	mov	r1, r3
 80076b4:	f7fe fb82 	bl	8005dbc <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80076c6:	f7fe fc45 	bl	8005f54 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f280 8159 	bge.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a9b      	ldr	r2, [pc, #620]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_ADC_ConfigChannel+0x988>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a9a      	ldr	r2, [pc, #616]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d101      	bne.n	80076ec <HAL_ADC_ConfigChannel+0x98c>
 80076e8:	4b99      	ldr	r3, [pc, #612]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 80076ea:	e000      	b.n	80076ee <HAL_ADC_ConfigChannel+0x98e>
 80076ec:	4b99      	ldr	r3, [pc, #612]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fa58 	bl	8005ba4 <LL_ADC_GetCommonPathInternalCh>
 80076f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a96      	ldr	r2, [pc, #600]	@ (8007958 <HAL_ADC_ConfigChannel+0xbf8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d12b      	bne.n	800775a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d125      	bne.n	800775a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a8d      	ldr	r2, [pc, #564]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_ADC_ConfigChannel+0x9c2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a8b      	ldr	r2, [pc, #556]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d101      	bne.n	8007726 <HAL_ADC_ConfigChannel+0x9c6>
 8007722:	4a8b      	ldr	r2, [pc, #556]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 8007724:	e000      	b.n	8007728 <HAL_ADC_ConfigChannel+0x9c8>
 8007726:	4a8b      	ldr	r2, [pc, #556]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 8007728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800772c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7fe fa23 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007738:	4b88      	ldr	r3, [pc, #544]	@ (800795c <HAL_ADC_ConfigChannel+0xbfc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	099b      	lsrs	r3, r3, #6
 800773e:	4a88      	ldr	r2, [pc, #544]	@ (8007960 <HAL_ADC_ConfigChannel+0xc00>)
 8007740:	fba2 2303 	umull	r2, r3, r2, r3
 8007744:	099b      	lsrs	r3, r3, #6
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800774a:	e002      	b.n	8007752 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3b01      	subs	r3, #1
 8007750:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f9      	bne.n	800774c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007758:	e045      	b.n	80077e6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a81      	ldr	r2, [pc, #516]	@ (8007964 <HAL_ADC_ConfigChannel+0xc04>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d11b      	bne.n	800779c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007768:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800776c:	2b00      	cmp	r3, #0
 800776e:	d115      	bne.n	800779c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a74      	ldr	r2, [pc, #464]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d004      	beq.n	8007784 <HAL_ADC_ConfigChannel+0xa24>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a73      	ldr	r2, [pc, #460]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d101      	bne.n	8007788 <HAL_ADC_ConfigChannel+0xa28>
 8007784:	4a72      	ldr	r2, [pc, #456]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 8007786:	e000      	b.n	800778a <HAL_ADC_ConfigChannel+0xa2a>
 8007788:	4a72      	ldr	r2, [pc, #456]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 800778a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800778e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f7fe f9f2 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
 800779a:	e024      	b.n	80077e6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a71      	ldr	r2, [pc, #452]	@ (8007968 <HAL_ADC_ConfigChannel+0xc08>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d11f      	bne.n	80077e6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80077a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d115      	bne.n	80077de <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a64      	ldr	r2, [pc, #400]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_ADC_ConfigChannel+0xa66>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a62      	ldr	r2, [pc, #392]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <HAL_ADC_ConfigChannel+0xa6a>
 80077c6:	4a62      	ldr	r2, [pc, #392]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 80077c8:	e000      	b.n	80077cc <HAL_ADC_ConfigChannel+0xa6c>
 80077ca:	4a62      	ldr	r2, [pc, #392]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 80077cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe f9d1 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
 80077dc:	e003      	b.n	80077e6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a62      	ldr	r2, [pc, #392]	@ (800796c <HAL_ADC_ConfigChannel+0xc0c>)
 80077e4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a61      	ldr	r2, [pc, #388]	@ (8007970 <HAL_ADC_ConfigChannel+0xc10>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	f040 80ca 	bne.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80077f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 80c3 	bne.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007814:	e0b7      	b.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800781e:	d004      	beq.n	800782a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007824:	4a53      	ldr	r2, [pc, #332]	@ (8007974 <HAL_ADC_ConfigChannel+0xc14>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d106      	bne.n	8007838 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fb55 	bl	8005ee2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f280 80a2 	bge.w	8007986 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a40      	ldr	r2, [pc, #256]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <HAL_ADC_ConfigChannel+0xaf6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a3e      	ldr	r2, [pc, #248]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d101      	bne.n	800785a <HAL_ADC_ConfigChannel+0xafa>
 8007856:	4b3e      	ldr	r3, [pc, #248]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 8007858:	e000      	b.n	800785c <HAL_ADC_ConfigChannel+0xafc>
 800785a:	4b3e      	ldr	r3, [pc, #248]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe f9a1 	bl	8005ba4 <LL_ADC_GetCommonPathInternalCh>
 8007862:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a43      	ldr	r2, [pc, #268]	@ (8007978 <HAL_ADC_ConfigChannel+0xc18>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d115      	bne.n	800789c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a34      	ldr	r2, [pc, #208]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d004      	beq.n	8007884 <HAL_ADC_ConfigChannel+0xb24>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a33      	ldr	r2, [pc, #204]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d101      	bne.n	8007888 <HAL_ADC_ConfigChannel+0xb28>
 8007884:	4a32      	ldr	r2, [pc, #200]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 8007886:	e000      	b.n	800788a <HAL_ADC_ConfigChannel+0xb2a>
 8007888:	4a32      	ldr	r2, [pc, #200]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 800788a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800788e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7fe f972 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
 800789a:	e034      	b.n	8007906 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a36      	ldr	r2, [pc, #216]	@ (800797c <HAL_ADC_ConfigChannel+0xc1c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d115      	bne.n	80078d2 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a27      	ldr	r2, [pc, #156]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d004      	beq.n	80078ba <HAL_ADC_ConfigChannel+0xb5a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a25      	ldr	r2, [pc, #148]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d101      	bne.n	80078be <HAL_ADC_ConfigChannel+0xb5e>
 80078ba:	4a25      	ldr	r2, [pc, #148]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 80078bc:	e000      	b.n	80078c0 <HAL_ADC_ConfigChannel+0xb60>
 80078be:	4a25      	ldr	r2, [pc, #148]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 80078c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f7fe f957 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
 80078d0:	e019      	b.n	8007906 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a24      	ldr	r2, [pc, #144]	@ (8007968 <HAL_ADC_ConfigChannel+0xc08>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d114      	bne.n	8007906 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a19      	ldr	r2, [pc, #100]	@ (8007948 <HAL_ADC_ConfigChannel+0xbe8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_ADC_ConfigChannel+0xb90>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a18      	ldr	r2, [pc, #96]	@ (800794c <HAL_ADC_ConfigChannel+0xbec>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d101      	bne.n	80078f4 <HAL_ADC_ConfigChannel+0xb94>
 80078f0:	4a17      	ldr	r2, [pc, #92]	@ (8007950 <HAL_ADC_ConfigChannel+0xbf0>)
 80078f2:	e000      	b.n	80078f6 <HAL_ADC_ConfigChannel+0xb96>
 80078f4:	4a17      	ldr	r2, [pc, #92]	@ (8007954 <HAL_ADC_ConfigChannel+0xbf4>)
 80078f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078fa:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f7fe f93c 	bl	8005b7e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <HAL_ADC_ConfigChannel+0xc10>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d13a      	bne.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d134      	bne.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007930:	e029      	b.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007936:	f043 0220 	orr.w	r2, r3, #32
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007944:	e01f      	b.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
 8007946:	bf00      	nop
 8007948:	42028000 	.word	0x42028000
 800794c:	42028100 	.word	0x42028100
 8007950:	42028300 	.word	0x42028300
 8007954:	46021300 	.word	0x46021300
 8007958:	b6002000 	.word	0xb6002000
 800795c:	2000018c 	.word	0x2000018c
 8007960:	053e2d63 	.word	0x053e2d63
 8007964:	ba004000 	.word	0xba004000
 8007968:	80000001 	.word	0x80000001
 800796c:	b2001000 	.word	0xb2001000
 8007970:	d7200000 	.word	0xd7200000
 8007974:	80000010 	.word	0x80000010
 8007978:	ce080000 	.word	0xce080000
 800797c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007984:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800798e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007992:	4618      	mov	r0, r3
 8007994:	37dc      	adds	r7, #220	@ 0xdc
 8007996:	46bd      	mov	sp, r7
 8007998:	bd90      	pop	{r4, r7, pc}
 800799a:	bf00      	nop

0800799c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007a30 <__NVIC_SetPriorityGrouping+0x44>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a1e:	4a04      	ldr	r2, [pc, #16]	@ (8007a30 <__NVIC_SetPriorityGrouping+0x44>)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	60d3      	str	r3, [r2, #12]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000ed00 	.word	0xe000ed00

08007a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a38:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <__NVIC_GetPriorityGrouping+0x18>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	0a1b      	lsrs	r3, r3, #8
 8007a3e:	f003 0307 	and.w	r3, r3, #7
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	e000ed00 	.word	0xe000ed00

08007a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	db0b      	blt.n	8007a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	f003 021f 	and.w	r2, r3, #31
 8007a68:	4907      	ldr	r1, [pc, #28]	@ (8007a88 <__NVIC_EnableIRQ+0x38>)
 8007a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	2001      	movs	r0, #1
 8007a72:	fa00 f202 	lsl.w	r2, r0, r2
 8007a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	e000e100 	.word	0xe000e100

08007a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	db0a      	blt.n	8007ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	490c      	ldr	r1, [pc, #48]	@ (8007ad8 <__NVIC_SetPriority+0x4c>)
 8007aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007aaa:	0112      	lsls	r2, r2, #4
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	440b      	add	r3, r1
 8007ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ab4:	e00a      	b.n	8007acc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	4908      	ldr	r1, [pc, #32]	@ (8007adc <__NVIC_SetPriority+0x50>)
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	3b04      	subs	r3, #4
 8007ac4:	0112      	lsls	r2, r2, #4
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	440b      	add	r3, r1
 8007aca:	761a      	strb	r2, [r3, #24]
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	e000e100 	.word	0xe000e100
 8007adc:	e000ed00 	.word	0xe000ed00

08007ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b089      	sub	sp, #36	@ 0x24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	f1c3 0307 	rsb	r3, r3, #7
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	bf28      	it	cs
 8007afe:	2304      	movcs	r3, #4
 8007b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	3304      	adds	r3, #4
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d902      	bls.n	8007b10 <NVIC_EncodePriority+0x30>
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	3b03      	subs	r3, #3
 8007b0e:	e000      	b.n	8007b12 <NVIC_EncodePriority+0x32>
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b14:	f04f 32ff 	mov.w	r2, #4294967295
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	43da      	mvns	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	401a      	ands	r2, r3
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b28:	f04f 31ff 	mov.w	r1, #4294967295
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b32:	43d9      	mvns	r1, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b38:	4313      	orrs	r3, r2
         );
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3724      	adds	r7, #36	@ 0x24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007b4c:	f3bf 8f4f 	dsb	sy
}
 8007b50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007b52:	4b06      	ldr	r3, [pc, #24]	@ (8007b6c <__NVIC_SystemReset+0x24>)
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007b5a:	4904      	ldr	r1, [pc, #16]	@ (8007b6c <__NVIC_SystemReset+0x24>)
 8007b5c:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <__NVIC_SystemReset+0x28>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007b62:	f3bf 8f4f 	dsb	sy
}
 8007b66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <__NVIC_SystemReset+0x20>
 8007b6c:	e000ed00 	.word	0xe000ed00
 8007b70:	05fa0004 	.word	0x05fa0004

08007b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff35 	bl	80079ec <__NVIC_SetPriorityGrouping>
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	4603      	mov	r3, r0
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b98:	f7ff ff4c 	bl	8007a34 <__NVIC_GetPriorityGrouping>
 8007b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	6978      	ldr	r0, [r7, #20]
 8007ba4:	f7ff ff9c 	bl	8007ae0 <NVIC_EncodePriority>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff ff6b 	bl	8007a8c <__NVIC_SetPriority>
}
 8007bb6:	bf00      	nop
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff ff3f 	bl	8007a50 <__NVIC_EnableIRQ>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007bde:	f7ff ffb3 	bl	8007b48 <__NVIC_SystemReset>
	...

08007be4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bf4:	d301      	bcc.n	8007bfa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e00d      	b.n	8007c16 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8007bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8007c24 <HAL_SYSTICK_Config+0x40>)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8007c02:	4b08      	ldr	r3, [pc, #32]	@ (8007c24 <HAL_SYSTICK_Config+0x40>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8007c08:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <HAL_SYSTICK_Config+0x40>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a05      	ldr	r2, [pc, #20]	@ (8007c24 <HAL_SYSTICK_Config+0x40>)
 8007c0e:	f043 0303 	orr.w	r3, r3, #3
 8007c12:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	e000e010 	.word	0xe000e010

08007c28 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d844      	bhi.n	8007cc0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c5f 	.word	0x08007c5f
 8007c40:	08007c7d 	.word	0x08007c7d
 8007c44:	08007c9f 	.word	0x08007c9f
 8007c48:	08007cc1 	.word	0x08007cc1
 8007c4c:	08007c51 	.word	0x08007c51
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8007c50:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007c56:	f043 0304 	orr.w	r3, r3, #4
 8007c5a:	6013      	str	r3, [r2, #0]
      break;
 8007c5c:	e031      	b.n	8007cc2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8007c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007c64:	f023 0304 	bic.w	r3, r3, #4
 8007c68:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8007c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cd4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c70:	4a18      	ldr	r2, [pc, #96]	@ (8007cd4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007c72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8007c7a:	e022      	b.n	8007cc2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8007c7c:	4b14      	ldr	r3, [pc, #80]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a13      	ldr	r2, [pc, #76]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007c82:	f023 0304 	bic.w	r3, r3, #4
 8007c86:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8007c88:	4b12      	ldr	r3, [pc, #72]	@ (8007cd4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007c92:	4a10      	ldr	r2, [pc, #64]	@ (8007cd4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007c94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8007c9c:	e011      	b.n	8007cc2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8007c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8007cd0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ca4:	f023 0304 	bic.w	r3, r3, #4
 8007ca8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8007caa:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cb0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007cb4:	4a07      	ldr	r2, [pc, #28]	@ (8007cd4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007cb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8007cbe:	e000      	b.n	8007cc2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8007cc0:	bf00      	nop
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000e010 	.word	0xe000e010
 8007cd4:	46020c00 	.word	0x46020c00

08007cd8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8007cde:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8007cea:	2304      	movs	r3, #4
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	e021      	b.n	8007d34 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8007cf0:	4b15      	ldr	r3, [pc, #84]	@ (8007d48 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8007cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cf6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007cfa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d02:	d011      	beq.n	8007d28 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d0a:	d810      	bhi.n	8007d2e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d18:	d003      	beq.n	8007d22 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8007d1a:	e008      	b.n	8007d2e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	607b      	str	r3, [r7, #4]
        break;
 8007d20:	e008      	b.n	8007d34 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8007d22:	2301      	movs	r3, #1
 8007d24:	607b      	str	r3, [r7, #4]
        break;
 8007d26:	e005      	b.n	8007d34 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	607b      	str	r3, [r7, #4]
        break;
 8007d2c:	e002      	b.n	8007d34 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	607b      	str	r3, [r7, #4]
        break;
 8007d32:	bf00      	nop
    }
  }
  return systick_source;
 8007d34:	687b      	ldr	r3, [r7, #4]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	e000e010 	.word	0xe000e010
 8007d48:	46020c00 	.word	0x46020c00

08007d4c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8007d54:	f7fd fed0 	bl	8005af8 <HAL_GetTick>
 8007d58:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0db      	b.n	8007f1c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6e      	ldr	r2, [pc, #440]	@ (8007f24 <HAL_DMA_Init+0x1d8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	f000 809f 	beq.w	8007eae <HAL_DMA_Init+0x162>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a6c      	ldr	r2, [pc, #432]	@ (8007f28 <HAL_DMA_Init+0x1dc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	f000 8099 	beq.w	8007eae <HAL_DMA_Init+0x162>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a6a      	ldr	r2, [pc, #424]	@ (8007f2c <HAL_DMA_Init+0x1e0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	f000 8093 	beq.w	8007eae <HAL_DMA_Init+0x162>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a68      	ldr	r2, [pc, #416]	@ (8007f30 <HAL_DMA_Init+0x1e4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	f000 808d 	beq.w	8007eae <HAL_DMA_Init+0x162>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a66      	ldr	r2, [pc, #408]	@ (8007f34 <HAL_DMA_Init+0x1e8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	f000 8087 	beq.w	8007eae <HAL_DMA_Init+0x162>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a64      	ldr	r2, [pc, #400]	@ (8007f38 <HAL_DMA_Init+0x1ec>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	f000 8081 	beq.w	8007eae <HAL_DMA_Init+0x162>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a62      	ldr	r2, [pc, #392]	@ (8007f3c <HAL_DMA_Init+0x1f0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d07b      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a61      	ldr	r2, [pc, #388]	@ (8007f40 <HAL_DMA_Init+0x1f4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d076      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a5f      	ldr	r2, [pc, #380]	@ (8007f44 <HAL_DMA_Init+0x1f8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d071      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a5e      	ldr	r2, [pc, #376]	@ (8007f48 <HAL_DMA_Init+0x1fc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d06c      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a5c      	ldr	r2, [pc, #368]	@ (8007f4c <HAL_DMA_Init+0x200>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d067      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a5b      	ldr	r2, [pc, #364]	@ (8007f50 <HAL_DMA_Init+0x204>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d062      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a59      	ldr	r2, [pc, #356]	@ (8007f54 <HAL_DMA_Init+0x208>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d05d      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a58      	ldr	r2, [pc, #352]	@ (8007f58 <HAL_DMA_Init+0x20c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d058      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a56      	ldr	r2, [pc, #344]	@ (8007f5c <HAL_DMA_Init+0x210>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d053      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a55      	ldr	r2, [pc, #340]	@ (8007f60 <HAL_DMA_Init+0x214>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04e      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a53      	ldr	r2, [pc, #332]	@ (8007f64 <HAL_DMA_Init+0x218>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d049      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a52      	ldr	r2, [pc, #328]	@ (8007f68 <HAL_DMA_Init+0x21c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d044      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a50      	ldr	r2, [pc, #320]	@ (8007f6c <HAL_DMA_Init+0x220>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d03f      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a4f      	ldr	r2, [pc, #316]	@ (8007f70 <HAL_DMA_Init+0x224>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d03a      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8007f74 <HAL_DMA_Init+0x228>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d035      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a4c      	ldr	r2, [pc, #304]	@ (8007f78 <HAL_DMA_Init+0x22c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d030      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a4a      	ldr	r2, [pc, #296]	@ (8007f7c <HAL_DMA_Init+0x230>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d02b      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a49      	ldr	r2, [pc, #292]	@ (8007f80 <HAL_DMA_Init+0x234>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d026      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a47      	ldr	r2, [pc, #284]	@ (8007f84 <HAL_DMA_Init+0x238>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d021      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a46      	ldr	r2, [pc, #280]	@ (8007f88 <HAL_DMA_Init+0x23c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d01c      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a44      	ldr	r2, [pc, #272]	@ (8007f8c <HAL_DMA_Init+0x240>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d017      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a43      	ldr	r2, [pc, #268]	@ (8007f90 <HAL_DMA_Init+0x244>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d012      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a41      	ldr	r2, [pc, #260]	@ (8007f94 <HAL_DMA_Init+0x248>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00d      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a40      	ldr	r2, [pc, #256]	@ (8007f98 <HAL_DMA_Init+0x24c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d008      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8007f9c <HAL_DMA_Init+0x250>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d003      	beq.n	8007eae <HAL_DMA_Init+0x162>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8007fa0 <HAL_DMA_Init+0x254>)
 8007eac:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0206 	orr.w	r2, r2, #6
 8007ecc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007ece:	e00f      	b.n	8007ef0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007ed0:	f7fd fe12 	bl	8005af8 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b05      	cmp	r3, #5
 8007edc:	d908      	bls.n	8007ef0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e015      	b.n	8007f1c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e8      	bne.n	8007ed0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 faa0 	bl	8008444 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	40020050 	.word	0x40020050
 8007f28:	50020050 	.word	0x50020050
 8007f2c:	400200d0 	.word	0x400200d0
 8007f30:	500200d0 	.word	0x500200d0
 8007f34:	40020150 	.word	0x40020150
 8007f38:	50020150 	.word	0x50020150
 8007f3c:	400201d0 	.word	0x400201d0
 8007f40:	500201d0 	.word	0x500201d0
 8007f44:	40020250 	.word	0x40020250
 8007f48:	50020250 	.word	0x50020250
 8007f4c:	400202d0 	.word	0x400202d0
 8007f50:	500202d0 	.word	0x500202d0
 8007f54:	40020350 	.word	0x40020350
 8007f58:	50020350 	.word	0x50020350
 8007f5c:	400203d0 	.word	0x400203d0
 8007f60:	500203d0 	.word	0x500203d0
 8007f64:	40020450 	.word	0x40020450
 8007f68:	50020450 	.word	0x50020450
 8007f6c:	400204d0 	.word	0x400204d0
 8007f70:	500204d0 	.word	0x500204d0
 8007f74:	40020550 	.word	0x40020550
 8007f78:	50020550 	.word	0x50020550
 8007f7c:	400205d0 	.word	0x400205d0
 8007f80:	500205d0 	.word	0x500205d0
 8007f84:	40020650 	.word	0x40020650
 8007f88:	50020650 	.word	0x50020650
 8007f8c:	400206d0 	.word	0x400206d0
 8007f90:	500206d0 	.word	0x500206d0
 8007f94:	40020750 	.word	0x40020750
 8007f98:	50020750 	.word	0x50020750
 8007f9c:	400207d0 	.word	0x400207d0
 8007fa0:	500207d0 	.word	0x500207d0

08007fa4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8007fac:	f7fd fda4 	bl	8005af8 <HAL_GetTick>
 8007fb0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e06b      	b.n	8008094 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d008      	beq.n	8007fda <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e05c      	b.n	8008094 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0204 	orr.w	r2, r2, #4
 8007fe8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2205      	movs	r2, #5
 8007fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007ff2:	e020      	b.n	8008036 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007ff4:	f7fd fd80 	bl	8005af8 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d919      	bls.n	8008036 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008006:	f043 0210 	orr.w	r2, r3, #16
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2203      	movs	r2, #3
 8008012:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008026:	2201      	movs	r2, #1
 8008028:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e02e      	b.n	8008094 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0d7      	beq.n	8007ff4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0202 	orr.w	r2, r2, #2
 8008052:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2204      	movs	r2, #4
 8008058:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8008064:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800807e:	2201      	movs	r2, #1
 8008080:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e019      	b.n	80080e2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d004      	beq.n	80080c4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e00e      	b.n	80080e2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2204      	movs	r2, #4
 80080c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80080da:	f043 0304 	orr.w	r3, r3, #4
 80080de:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b086      	sub	sp, #24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80080fe:	f023 030f 	bic.w	r3, r3, #15
 8008102:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800810c:	3b50      	subs	r3, #80	@ 0x50
 800810e:	09db      	lsrs	r3, r3, #7
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	2201      	movs	r2, #1
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4013      	ands	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 813b 	beq.w	80083a4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008138:	2b00      	cmp	r3, #0
 800813a:	d011      	beq.n	8008160 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008152:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008158:	f043 0201 	orr.w	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800816a:	2b00      	cmp	r3, #0
 800816c:	d011      	beq.n	8008192 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008184:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818a:	f043 0202 	orr.w	r2, r3, #2
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d011      	beq.n	80081c4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80081b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081bc:	f043 0204 	orr.w	r2, r3, #4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d011      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80081e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ee:	f043 0208 	orr.w	r2, r3, #8
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008200:	2b00      	cmp	r3, #0
 8008202:	d013      	beq.n	800822c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800821a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d04c      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d045      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008250:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b04      	cmp	r3, #4
 800825c:	d12e      	bne.n	80082bc <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695a      	ldr	r2, [r3, #20]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800826c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	695a      	ldr	r2, [r3, #20]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0202 	orr.w	r2, r2, #2
 800827c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008296:	2201      	movs	r2, #1
 8008298:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d07a      	beq.n	80083a8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
        }

        return;
 80082ba:	e075      	b.n	80083a8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2205      	movs	r2, #5
 80082c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d039      	beq.n	8008356 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d032      	beq.n	8008356 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d012      	beq.n	8008322 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d116      	bne.n	8008334 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800830c:	2b00      	cmp	r3, #0
 800830e:	d111      	bne.n	8008334 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831c:	2201      	movs	r2, #1
 800831e:	731a      	strb	r2, [r3, #12]
 8008320:	e008      	b.n	8008334 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008328:	2b00      	cmp	r3, #0
 800832a:	d103      	bne.n	8008334 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800833c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800835a:	2b00      	cmp	r3, #0
 800835c:	d025      	beq.n	80083aa <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	695a      	ldr	r2, [r3, #20]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f042 0202 	orr.w	r2, r2, #2
 800836c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008386:	2201      	movs	r2, #1
 8008388:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
 80083a2:	e002      	b.n	80083aa <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80083a4:	bf00      	nop
 80083a6:	e000      	b.n	80083aa <HAL_DMA_IRQHandler+0x2bc>
        return;
 80083a8:	bf00      	nop
    }
  }
}
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80083be:	b2db      	uxtb	r3, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e02b      	b.n	8008438 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80083e8:	f023 030f 	bic.w	r3, r3, #15
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083f6:	3b50      	subs	r3, #80	@ 0x50
 80083f8:	09db      	lsrs	r3, r3, #7
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2201      	movs	r2, #1
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b00      	cmp	r3, #0
 800840e:	d012      	beq.n	8008436 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f003 0311 	and.w	r3, r3, #17
 8008416:	2b11      	cmp	r3, #17
 8008418:	d106      	bne.n	8008428 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	431a      	orrs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	e006      	b.n	8008436 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	43db      	mvns	r3, r3
 8008430:	401a      	ands	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	430a      	orrs	r2, r1
 8008464:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695a      	ldr	r2, [r3, #20]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a53      	ldr	r2, [pc, #332]	@ (80085d0 <DMA_Init+0x18c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	f000 80a0 	beq.w	80085ca <DMA_Init+0x186>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a51      	ldr	r2, [pc, #324]	@ (80085d4 <DMA_Init+0x190>)
 8008490:	4293      	cmp	r3, r2
 8008492:	f000 809a 	beq.w	80085ca <DMA_Init+0x186>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a4f      	ldr	r2, [pc, #316]	@ (80085d8 <DMA_Init+0x194>)
 800849c:	4293      	cmp	r3, r2
 800849e:	f000 8094 	beq.w	80085ca <DMA_Init+0x186>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a4d      	ldr	r2, [pc, #308]	@ (80085dc <DMA_Init+0x198>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	f000 808e 	beq.w	80085ca <DMA_Init+0x186>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a4b      	ldr	r2, [pc, #300]	@ (80085e0 <DMA_Init+0x19c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	f000 8088 	beq.w	80085ca <DMA_Init+0x186>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a49      	ldr	r2, [pc, #292]	@ (80085e4 <DMA_Init+0x1a0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	f000 8082 	beq.w	80085ca <DMA_Init+0x186>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a47      	ldr	r2, [pc, #284]	@ (80085e8 <DMA_Init+0x1a4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d07c      	beq.n	80085ca <DMA_Init+0x186>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a45      	ldr	r2, [pc, #276]	@ (80085ec <DMA_Init+0x1a8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d077      	beq.n	80085ca <DMA_Init+0x186>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a44      	ldr	r2, [pc, #272]	@ (80085f0 <DMA_Init+0x1ac>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d072      	beq.n	80085ca <DMA_Init+0x186>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a42      	ldr	r2, [pc, #264]	@ (80085f4 <DMA_Init+0x1b0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d06d      	beq.n	80085ca <DMA_Init+0x186>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a41      	ldr	r2, [pc, #260]	@ (80085f8 <DMA_Init+0x1b4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d068      	beq.n	80085ca <DMA_Init+0x186>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a3f      	ldr	r2, [pc, #252]	@ (80085fc <DMA_Init+0x1b8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d063      	beq.n	80085ca <DMA_Init+0x186>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a3e      	ldr	r2, [pc, #248]	@ (8008600 <DMA_Init+0x1bc>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d05e      	beq.n	80085ca <DMA_Init+0x186>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a3c      	ldr	r2, [pc, #240]	@ (8008604 <DMA_Init+0x1c0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d059      	beq.n	80085ca <DMA_Init+0x186>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a3b      	ldr	r2, [pc, #236]	@ (8008608 <DMA_Init+0x1c4>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d054      	beq.n	80085ca <DMA_Init+0x186>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a39      	ldr	r2, [pc, #228]	@ (800860c <DMA_Init+0x1c8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d04f      	beq.n	80085ca <DMA_Init+0x186>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a38      	ldr	r2, [pc, #224]	@ (8008610 <DMA_Init+0x1cc>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d04a      	beq.n	80085ca <DMA_Init+0x186>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a36      	ldr	r2, [pc, #216]	@ (8008614 <DMA_Init+0x1d0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d045      	beq.n	80085ca <DMA_Init+0x186>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a35      	ldr	r2, [pc, #212]	@ (8008618 <DMA_Init+0x1d4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d040      	beq.n	80085ca <DMA_Init+0x186>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a33      	ldr	r2, [pc, #204]	@ (800861c <DMA_Init+0x1d8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d03b      	beq.n	80085ca <DMA_Init+0x186>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a32      	ldr	r2, [pc, #200]	@ (8008620 <DMA_Init+0x1dc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d036      	beq.n	80085ca <DMA_Init+0x186>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a30      	ldr	r2, [pc, #192]	@ (8008624 <DMA_Init+0x1e0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d031      	beq.n	80085ca <DMA_Init+0x186>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a2f      	ldr	r2, [pc, #188]	@ (8008628 <DMA_Init+0x1e4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d02c      	beq.n	80085ca <DMA_Init+0x186>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a2d      	ldr	r2, [pc, #180]	@ (800862c <DMA_Init+0x1e8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d027      	beq.n	80085ca <DMA_Init+0x186>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a2c      	ldr	r2, [pc, #176]	@ (8008630 <DMA_Init+0x1ec>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d022      	beq.n	80085ca <DMA_Init+0x186>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a2a      	ldr	r2, [pc, #168]	@ (8008634 <DMA_Init+0x1f0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d01d      	beq.n	80085ca <DMA_Init+0x186>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a29      	ldr	r2, [pc, #164]	@ (8008638 <DMA_Init+0x1f4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d018      	beq.n	80085ca <DMA_Init+0x186>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a27      	ldr	r2, [pc, #156]	@ (800863c <DMA_Init+0x1f8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d013      	beq.n	80085ca <DMA_Init+0x186>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a26      	ldr	r2, [pc, #152]	@ (8008640 <DMA_Init+0x1fc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00e      	beq.n	80085ca <DMA_Init+0x186>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a24      	ldr	r2, [pc, #144]	@ (8008644 <DMA_Init+0x200>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d009      	beq.n	80085ca <DMA_Init+0x186>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a23      	ldr	r2, [pc, #140]	@ (8008648 <DMA_Init+0x204>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d004      	beq.n	80085ca <DMA_Init+0x186>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a21      	ldr	r2, [pc, #132]	@ (800864c <DMA_Init+0x208>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d142      	bne.n	8008650 <DMA_Init+0x20c>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e041      	b.n	8008652 <DMA_Init+0x20e>
 80085ce:	bf00      	nop
 80085d0:	40020050 	.word	0x40020050
 80085d4:	50020050 	.word	0x50020050
 80085d8:	400200d0 	.word	0x400200d0
 80085dc:	500200d0 	.word	0x500200d0
 80085e0:	40020150 	.word	0x40020150
 80085e4:	50020150 	.word	0x50020150
 80085e8:	400201d0 	.word	0x400201d0
 80085ec:	500201d0 	.word	0x500201d0
 80085f0:	40020250 	.word	0x40020250
 80085f4:	50020250 	.word	0x50020250
 80085f8:	400202d0 	.word	0x400202d0
 80085fc:	500202d0 	.word	0x500202d0
 8008600:	40020350 	.word	0x40020350
 8008604:	50020350 	.word	0x50020350
 8008608:	400203d0 	.word	0x400203d0
 800860c:	500203d0 	.word	0x500203d0
 8008610:	40020450 	.word	0x40020450
 8008614:	50020450 	.word	0x50020450
 8008618:	400204d0 	.word	0x400204d0
 800861c:	500204d0 	.word	0x500204d0
 8008620:	40020550 	.word	0x40020550
 8008624:	50020550 	.word	0x50020550
 8008628:	400205d0 	.word	0x400205d0
 800862c:	500205d0 	.word	0x500205d0
 8008630:	40020650 	.word	0x40020650
 8008634:	50020650 	.word	0x50020650
 8008638:	400206d0 	.word	0x400206d0
 800863c:	500206d0 	.word	0x500206d0
 8008640:	40020750 	.word	0x40020750
 8008644:	50020750 	.word	0x50020750
 8008648:	400207d0 	.word	0x400207d0
 800864c:	500207d0 	.word	0x500207d0
 8008650:	2300      	movs	r3, #0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d012      	beq.n	800867c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865e:	3b01      	subs	r3, #1
 8008660:	051b      	lsls	r3, r3, #20
 8008662:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008666:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866c:	3b01      	subs	r3, #1
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008674:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008682:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	430a      	orrs	r2, r1
 800868e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ae:	f040 80b0 	bne.w	8008812 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a82      	ldr	r2, [pc, #520]	@ (80088c0 <DMA_Init+0x47c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	f000 80a0 	beq.w	80087fe <DMA_Init+0x3ba>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a80      	ldr	r2, [pc, #512]	@ (80088c4 <DMA_Init+0x480>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	f000 809a 	beq.w	80087fe <DMA_Init+0x3ba>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a7e      	ldr	r2, [pc, #504]	@ (80088c8 <DMA_Init+0x484>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	f000 8094 	beq.w	80087fe <DMA_Init+0x3ba>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a7c      	ldr	r2, [pc, #496]	@ (80088cc <DMA_Init+0x488>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	f000 808e 	beq.w	80087fe <DMA_Init+0x3ba>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a7a      	ldr	r2, [pc, #488]	@ (80088d0 <DMA_Init+0x48c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	f000 8088 	beq.w	80087fe <DMA_Init+0x3ba>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a78      	ldr	r2, [pc, #480]	@ (80088d4 <DMA_Init+0x490>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	f000 8082 	beq.w	80087fe <DMA_Init+0x3ba>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a76      	ldr	r2, [pc, #472]	@ (80088d8 <DMA_Init+0x494>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d07c      	beq.n	80087fe <DMA_Init+0x3ba>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a74      	ldr	r2, [pc, #464]	@ (80088dc <DMA_Init+0x498>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d077      	beq.n	80087fe <DMA_Init+0x3ba>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a73      	ldr	r2, [pc, #460]	@ (80088e0 <DMA_Init+0x49c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d072      	beq.n	80087fe <DMA_Init+0x3ba>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a71      	ldr	r2, [pc, #452]	@ (80088e4 <DMA_Init+0x4a0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d06d      	beq.n	80087fe <DMA_Init+0x3ba>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a70      	ldr	r2, [pc, #448]	@ (80088e8 <DMA_Init+0x4a4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d068      	beq.n	80087fe <DMA_Init+0x3ba>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a6e      	ldr	r2, [pc, #440]	@ (80088ec <DMA_Init+0x4a8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d063      	beq.n	80087fe <DMA_Init+0x3ba>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a6d      	ldr	r2, [pc, #436]	@ (80088f0 <DMA_Init+0x4ac>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d05e      	beq.n	80087fe <DMA_Init+0x3ba>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a6b      	ldr	r2, [pc, #428]	@ (80088f4 <DMA_Init+0x4b0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d059      	beq.n	80087fe <DMA_Init+0x3ba>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a6a      	ldr	r2, [pc, #424]	@ (80088f8 <DMA_Init+0x4b4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d054      	beq.n	80087fe <DMA_Init+0x3ba>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a68      	ldr	r2, [pc, #416]	@ (80088fc <DMA_Init+0x4b8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d04f      	beq.n	80087fe <DMA_Init+0x3ba>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a67      	ldr	r2, [pc, #412]	@ (8008900 <DMA_Init+0x4bc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d04a      	beq.n	80087fe <DMA_Init+0x3ba>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a65      	ldr	r2, [pc, #404]	@ (8008904 <DMA_Init+0x4c0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d045      	beq.n	80087fe <DMA_Init+0x3ba>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a64      	ldr	r2, [pc, #400]	@ (8008908 <DMA_Init+0x4c4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d040      	beq.n	80087fe <DMA_Init+0x3ba>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a62      	ldr	r2, [pc, #392]	@ (800890c <DMA_Init+0x4c8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d03b      	beq.n	80087fe <DMA_Init+0x3ba>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a61      	ldr	r2, [pc, #388]	@ (8008910 <DMA_Init+0x4cc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d036      	beq.n	80087fe <DMA_Init+0x3ba>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a5f      	ldr	r2, [pc, #380]	@ (8008914 <DMA_Init+0x4d0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d031      	beq.n	80087fe <DMA_Init+0x3ba>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a5e      	ldr	r2, [pc, #376]	@ (8008918 <DMA_Init+0x4d4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d02c      	beq.n	80087fe <DMA_Init+0x3ba>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a5c      	ldr	r2, [pc, #368]	@ (800891c <DMA_Init+0x4d8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d027      	beq.n	80087fe <DMA_Init+0x3ba>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a5b      	ldr	r2, [pc, #364]	@ (8008920 <DMA_Init+0x4dc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d022      	beq.n	80087fe <DMA_Init+0x3ba>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a59      	ldr	r2, [pc, #356]	@ (8008924 <DMA_Init+0x4e0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d01d      	beq.n	80087fe <DMA_Init+0x3ba>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a58      	ldr	r2, [pc, #352]	@ (8008928 <DMA_Init+0x4e4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d018      	beq.n	80087fe <DMA_Init+0x3ba>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a56      	ldr	r2, [pc, #344]	@ (800892c <DMA_Init+0x4e8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d013      	beq.n	80087fe <DMA_Init+0x3ba>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a55      	ldr	r2, [pc, #340]	@ (8008930 <DMA_Init+0x4ec>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00e      	beq.n	80087fe <DMA_Init+0x3ba>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a53      	ldr	r2, [pc, #332]	@ (8008934 <DMA_Init+0x4f0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d009      	beq.n	80087fe <DMA_Init+0x3ba>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a52      	ldr	r2, [pc, #328]	@ (8008938 <DMA_Init+0x4f4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d004      	beq.n	80087fe <DMA_Init+0x3ba>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a50      	ldr	r2, [pc, #320]	@ (800893c <DMA_Init+0x4f8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d101      	bne.n	8008802 <DMA_Init+0x3be>
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <DMA_Init+0x3c0>
 8008802:	2300      	movs	r3, #0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00d      	beq.n	8008824 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e008      	b.n	8008824 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800881a:	d103      	bne.n	8008824 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008822:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800882a:	4b45      	ldr	r3, [pc, #276]	@ (8008940 <DMA_Init+0x4fc>)
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	68f9      	ldr	r1, [r7, #12]
 8008834:	430b      	orrs	r3, r1
 8008836:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a36      	ldr	r2, [pc, #216]	@ (8008920 <DMA_Init+0x4dc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d022      	beq.n	8008890 <DMA_Init+0x44c>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a35      	ldr	r2, [pc, #212]	@ (8008924 <DMA_Init+0x4e0>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d01d      	beq.n	8008890 <DMA_Init+0x44c>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a33      	ldr	r2, [pc, #204]	@ (8008928 <DMA_Init+0x4e4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d018      	beq.n	8008890 <DMA_Init+0x44c>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a32      	ldr	r2, [pc, #200]	@ (800892c <DMA_Init+0x4e8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d013      	beq.n	8008890 <DMA_Init+0x44c>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a30      	ldr	r2, [pc, #192]	@ (8008930 <DMA_Init+0x4ec>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00e      	beq.n	8008890 <DMA_Init+0x44c>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a2f      	ldr	r2, [pc, #188]	@ (8008934 <DMA_Init+0x4f0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d009      	beq.n	8008890 <DMA_Init+0x44c>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a2d      	ldr	r2, [pc, #180]	@ (8008938 <DMA_Init+0x4f4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d004      	beq.n	8008890 <DMA_Init+0x44c>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a2c      	ldr	r2, [pc, #176]	@ (800893c <DMA_Init+0x4f8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d101      	bne.n	8008894 <DMA_Init+0x450>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <DMA_Init+0x452>
 8008894:	2300      	movs	r3, #0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80088b2:	bf00      	nop
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40020050 	.word	0x40020050
 80088c4:	50020050 	.word	0x50020050
 80088c8:	400200d0 	.word	0x400200d0
 80088cc:	500200d0 	.word	0x500200d0
 80088d0:	40020150 	.word	0x40020150
 80088d4:	50020150 	.word	0x50020150
 80088d8:	400201d0 	.word	0x400201d0
 80088dc:	500201d0 	.word	0x500201d0
 80088e0:	40020250 	.word	0x40020250
 80088e4:	50020250 	.word	0x50020250
 80088e8:	400202d0 	.word	0x400202d0
 80088ec:	500202d0 	.word	0x500202d0
 80088f0:	40020350 	.word	0x40020350
 80088f4:	50020350 	.word	0x50020350
 80088f8:	400203d0 	.word	0x400203d0
 80088fc:	500203d0 	.word	0x500203d0
 8008900:	40020450 	.word	0x40020450
 8008904:	50020450 	.word	0x50020450
 8008908:	400204d0 	.word	0x400204d0
 800890c:	500204d0 	.word	0x500204d0
 8008910:	40020550 	.word	0x40020550
 8008914:	50020550 	.word	0x50020550
 8008918:	400205d0 	.word	0x400205d0
 800891c:	500205d0 	.word	0x500205d0
 8008920:	40020650 	.word	0x40020650
 8008924:	50020650 	.word	0x50020650
 8008928:	400206d0 	.word	0x400206d0
 800892c:	500206d0 	.word	0x500206d0
 8008930:	40020750 	.word	0x40020750
 8008934:	50020750 	.word	0x50020750
 8008938:	400207d0 	.word	0x400207d0
 800893c:	500207d0 	.word	0x500207d0
 8008940:	3c803180 	.word	0x3c803180

08008944 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e053      	b.n	80089fe <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fb fe90 	bl	8004690 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6851      	ldr	r1, [r2, #4]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	69d2      	ldr	r2, [r2, #28]
 800898e:	4311      	orrs	r1, r2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	430b      	orrs	r3, r1
 8008996:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899e:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6891      	ldr	r1, [r2, #8]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6992      	ldr	r2, [r2, #24]
 80089ae:	4311      	orrs	r1, r2
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	430b      	orrs	r3, r1
 80089b6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68d1      	ldr	r1, [r2, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	430b      	orrs	r3, r1
 80089cc:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	051a      	lsls	r2, r3, #20
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	055b      	lsls	r3, r3, #21
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_DMA2D_ConfigLayer+0x24>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e092      	b.n	8008b52 <HAL_DMA2D_ConfigLayer+0x14a>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	3328      	adds	r3, #40	@ 0x28
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	041b      	lsls	r3, r3, #16
 8008a58:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a60:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b60 <HAL_DMA2D_ConfigLayer+0x158>)
 8008a6e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b0a      	cmp	r3, #10
 8008a76:	d003      	beq.n	8008a80 <HAL_DMA2D_ConfigLayer+0x78>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d107      	bne.n	8008a90 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
 8008a8e:	e005      	b.n	8008a9c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	061b      	lsls	r3, r3, #24
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d120      	bne.n	8008ae4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	ea02 0103 	and.w	r1, r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b0a      	cmp	r3, #10
 8008aca:	d003      	beq.n	8008ad4 <HAL_DMA2D_ConfigLayer+0xcc>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b09      	cmp	r3, #9
 8008ad2:	d135      	bne.n	8008b40 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008ae0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ae2:	e02d      	b.n	8008b40 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b0b      	cmp	r3, #11
 8008aea:	d109      	bne.n	8008b00 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	049b      	lsls	r3, r3, #18
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8008afe:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69da      	ldr	r2, [r3, #28]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	ea02 0103 	and.w	r1, r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b0a      	cmp	r3, #10
 8008b28:	d003      	beq.n	8008b32 <HAL_DMA2D_ConfigLayer+0x12a>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b09      	cmp	r3, #9
 8008b30:	d106      	bne.n	8008b40 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008b3e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	ff33000f 	.word	0xff33000f

08008b64 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8008b6c:	f7fc ffc4 	bl	8005af8 <HAL_GetTick>
 8008b70:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e0db      	b.n	8008d34 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a6e      	ldr	r2, [pc, #440]	@ (8008d3c <HAL_DMAEx_List_Init+0x1d8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	f000 809f 	beq.w	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a6c      	ldr	r2, [pc, #432]	@ (8008d40 <HAL_DMAEx_List_Init+0x1dc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	f000 8099 	beq.w	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a6a      	ldr	r2, [pc, #424]	@ (8008d44 <HAL_DMAEx_List_Init+0x1e0>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	f000 8093 	beq.w	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a68      	ldr	r2, [pc, #416]	@ (8008d48 <HAL_DMAEx_List_Init+0x1e4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	f000 808d 	beq.w	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a66      	ldr	r2, [pc, #408]	@ (8008d4c <HAL_DMAEx_List_Init+0x1e8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f000 8087 	beq.w	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a64      	ldr	r2, [pc, #400]	@ (8008d50 <HAL_DMAEx_List_Init+0x1ec>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	f000 8081 	beq.w	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a62      	ldr	r2, [pc, #392]	@ (8008d54 <HAL_DMAEx_List_Init+0x1f0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d07b      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a61      	ldr	r2, [pc, #388]	@ (8008d58 <HAL_DMAEx_List_Init+0x1f4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d076      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a5f      	ldr	r2, [pc, #380]	@ (8008d5c <HAL_DMAEx_List_Init+0x1f8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d071      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a5e      	ldr	r2, [pc, #376]	@ (8008d60 <HAL_DMAEx_List_Init+0x1fc>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d06c      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a5c      	ldr	r2, [pc, #368]	@ (8008d64 <HAL_DMAEx_List_Init+0x200>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d067      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8008d68 <HAL_DMAEx_List_Init+0x204>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d062      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a59      	ldr	r2, [pc, #356]	@ (8008d6c <HAL_DMAEx_List_Init+0x208>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d05d      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a58      	ldr	r2, [pc, #352]	@ (8008d70 <HAL_DMAEx_List_Init+0x20c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d058      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a56      	ldr	r2, [pc, #344]	@ (8008d74 <HAL_DMAEx_List_Init+0x210>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d053      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a55      	ldr	r2, [pc, #340]	@ (8008d78 <HAL_DMAEx_List_Init+0x214>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d04e      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a53      	ldr	r2, [pc, #332]	@ (8008d7c <HAL_DMAEx_List_Init+0x218>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d049      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a52      	ldr	r2, [pc, #328]	@ (8008d80 <HAL_DMAEx_List_Init+0x21c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d044      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a50      	ldr	r2, [pc, #320]	@ (8008d84 <HAL_DMAEx_List_Init+0x220>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d03f      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a4f      	ldr	r2, [pc, #316]	@ (8008d88 <HAL_DMAEx_List_Init+0x224>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d03a      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a4d      	ldr	r2, [pc, #308]	@ (8008d8c <HAL_DMAEx_List_Init+0x228>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d035      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a4c      	ldr	r2, [pc, #304]	@ (8008d90 <HAL_DMAEx_List_Init+0x22c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d030      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a4a      	ldr	r2, [pc, #296]	@ (8008d94 <HAL_DMAEx_List_Init+0x230>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d02b      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a49      	ldr	r2, [pc, #292]	@ (8008d98 <HAL_DMAEx_List_Init+0x234>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d026      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a47      	ldr	r2, [pc, #284]	@ (8008d9c <HAL_DMAEx_List_Init+0x238>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d021      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a46      	ldr	r2, [pc, #280]	@ (8008da0 <HAL_DMAEx_List_Init+0x23c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d01c      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a44      	ldr	r2, [pc, #272]	@ (8008da4 <HAL_DMAEx_List_Init+0x240>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d017      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a43      	ldr	r2, [pc, #268]	@ (8008da8 <HAL_DMAEx_List_Init+0x244>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d012      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a41      	ldr	r2, [pc, #260]	@ (8008dac <HAL_DMAEx_List_Init+0x248>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00d      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a40      	ldr	r2, [pc, #256]	@ (8008db0 <HAL_DMAEx_List_Init+0x24c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d008      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8008db4 <HAL_DMAEx_List_Init+0x250>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d003      	beq.n	8008cc6 <HAL_DMAEx_List_Init+0x162>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8008db8 <HAL_DMAEx_List_Init+0x254>)
 8008cc4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	695a      	ldr	r2, [r3, #20]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0206 	orr.w	r2, r2, #6
 8008ce4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008ce6:	e00f      	b.n	8008d08 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008ce8:	f7fc ff06 	bl	8005af8 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d908      	bls.n	8008d08 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2210      	movs	r2, #16
 8008cfa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2203      	movs	r2, #3
 8008d00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e015      	b.n	8008d34 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e8      	bne.n	8008ce8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa36 	bl	8009188 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40020050 	.word	0x40020050
 8008d40:	50020050 	.word	0x50020050
 8008d44:	400200d0 	.word	0x400200d0
 8008d48:	500200d0 	.word	0x500200d0
 8008d4c:	40020150 	.word	0x40020150
 8008d50:	50020150 	.word	0x50020150
 8008d54:	400201d0 	.word	0x400201d0
 8008d58:	500201d0 	.word	0x500201d0
 8008d5c:	40020250 	.word	0x40020250
 8008d60:	50020250 	.word	0x50020250
 8008d64:	400202d0 	.word	0x400202d0
 8008d68:	500202d0 	.word	0x500202d0
 8008d6c:	40020350 	.word	0x40020350
 8008d70:	50020350 	.word	0x50020350
 8008d74:	400203d0 	.word	0x400203d0
 8008d78:	500203d0 	.word	0x500203d0
 8008d7c:	40020450 	.word	0x40020450
 8008d80:	50020450 	.word	0x50020450
 8008d84:	400204d0 	.word	0x400204d0
 8008d88:	500204d0 	.word	0x500204d0
 8008d8c:	40020550 	.word	0x40020550
 8008d90:	50020550 	.word	0x50020550
 8008d94:	400205d0 	.word	0x400205d0
 8008d98:	500205d0 	.word	0x500205d0
 8008d9c:	40020650 	.word	0x40020650
 8008da0:	50020650 	.word	0x50020650
 8008da4:	400206d0 	.word	0x400206d0
 8008da8:	500206d0 	.word	0x500206d0
 8008dac:	40020750 	.word	0x40020750
 8008db0:	50020750 	.word	0x50020750
 8008db4:	400207d0 	.word	0x400207d0
 8008db8:	500207d0 	.word	0x500207d0

08008dbc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <HAL_DMAEx_List_BuildNode+0x16>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e004      	b.n	8008de0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb2d 	bl	8009438 <DMA_List_BuildNode>

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08c      	sub	sp, #48	@ 0x30
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_DMAEx_List_InsertNode+0x18>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e0b6      	b.n	8008f72 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d104      	bne.n	8008e16 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2204      	movs	r2, #4
 8008e10:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e0ad      	b.n	8008f72 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fc5c 	bl	80096dc <DMA_List_CheckNodesBaseAddresses>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d004      	beq.n	8008e34 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e09e      	b.n	8008f72 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fc7d 	bl	800973c <DMA_List_CheckNodesTypes>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e08f      	b.n	8008f72 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2202      	movs	r2, #2
 8008e56:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8008e5e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8008e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fca3 	bl	80097b4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d11a      	bne.n	8008eac <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	609a      	str	r2, [r3, #8]
 8008e88:	e06c      	b.n	8008f64 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008e96:	4013      	ands	r3, r2
 8008e98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e9c:	4319      	orrs	r1, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	609a      	str	r2, [r3, #8]
 8008eaa:	e05b      	b.n	8008f64 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10f      	bne.n	8008ed2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec2:	4319      	orrs	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e043      	b.n	8008f5a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8008ed6:	f107 0314 	add.w	r3, r7, #20
 8008eda:	461a      	mov	r2, r3
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fc98 	bl	8009814 <DMA_List_FindNode>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d132      	bne.n	8008f50 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d11a      	bne.n	8008f2a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	461a      	mov	r2, r3
 8008f02:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008f06:	4013      	ands	r3, r2
 8008f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f0c:	4319      	orrs	r1, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f20:	4319      	orrs	r1, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f28:	e017      	b.n	8008f5a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8008f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8008f40:	4013      	ands	r3, r2
 8008f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f46:	4319      	orrs	r1, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f4e:	e004      	b.n	8008f5a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2206      	movs	r2, #6
 8008f54:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e00b      	b.n	8008f72 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3730      	adds	r7, #48	@ 0x30
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b08a      	sub	sp, #40	@ 0x28
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e052      	b.n	8009032 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e049      	b.n	8009032 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00c      	beq.n	8008fc0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d101      	bne.n	8008fb6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e03d      	b.n	8009032 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2204      	movs	r2, #4
 8008fba:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e038      	b.n	8009032 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d104      	bne.n	8008fd2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e02f      	b.n	8009032 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f107 0220 	add.w	r2, r7, #32
 8008fe6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fbe2 	bl	80097b4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8008ff4:	f107 030c 	add.w	r3, r7, #12
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc09 	bl	8009814 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800900c:	4013      	ands	r3, r2
 800900e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4610      	mov	r0, r2
 8009014:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8009016:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8009018:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3728      	adds	r7, #40	@ 0x28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <HAL_DMAEx_List_LinkQ+0x16>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e072      	b.n	800913c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800905c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d002      	beq.n	8009070 <HAL_DMAEx_List_LinkQ+0x34>
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	2b05      	cmp	r3, #5
 800906e:	d108      	bne.n	8009082 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2240      	movs	r2, #64	@ 0x40
 8009074:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e05c      	b.n	800913c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	7b1b      	ldrb	r3, [r3, #12]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d104      	bne.n	8009096 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2201      	movs	r2, #1
 8009090:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e052      	b.n	800913c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a2b      	ldr	r2, [pc, #172]	@ (8009148 <HAL_DMAEx_List_LinkQ+0x10c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d022      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a29      	ldr	r2, [pc, #164]	@ (800914c <HAL_DMAEx_List_LinkQ+0x110>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01d      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a28      	ldr	r2, [pc, #160]	@ (8009150 <HAL_DMAEx_List_LinkQ+0x114>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d018      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a26      	ldr	r2, [pc, #152]	@ (8009154 <HAL_DMAEx_List_LinkQ+0x118>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d013      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a25      	ldr	r2, [pc, #148]	@ (8009158 <HAL_DMAEx_List_LinkQ+0x11c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00e      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a23      	ldr	r2, [pc, #140]	@ (800915c <HAL_DMAEx_List_LinkQ+0x120>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d009      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a22      	ldr	r2, [pc, #136]	@ (8009160 <HAL_DMAEx_List_LinkQ+0x124>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d004      	beq.n	80090e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a20      	ldr	r2, [pc, #128]	@ (8009164 <HAL_DMAEx_List_LinkQ+0x128>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d101      	bne.n	80090ea <HAL_DMAEx_List_LinkQ+0xae>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <HAL_DMAEx_List_LinkQ+0xb0>
 80090ea:	2300      	movs	r3, #0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10b      	bne.n	8009108 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2203      	movs	r2, #3
 8009102:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e019      	b.n	800913c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800910c:	2b81      	cmp	r3, #129	@ 0x81
 800910e:	d108      	bne.n	8009122 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2204      	movs	r2, #4
 800911c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e00c      	b.n	800913c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2204      	movs	r2, #4
 800912e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e003      	b.n	800913c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	40020650 	.word	0x40020650
 800914c:	50020650 	.word	0x50020650
 8009150:	400206d0 	.word	0x400206d0
 8009154:	500206d0 	.word	0x500206d0
 8009158:	40020750 	.word	0x40020750
 800915c:	50020750 	.word	0x50020750
 8009160:	400207d0 	.word	0x400207d0
 8009164:	500207d0 	.word	0x500207d0

08009168 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	0c1b      	lsrs	r3, r3, #16
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
	...

08009188 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a85      	ldr	r2, [pc, #532]	@ (80093b8 <DMA_List_Init+0x230>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	f000 80a0 	beq.w	80092e8 <DMA_List_Init+0x160>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a83      	ldr	r2, [pc, #524]	@ (80093bc <DMA_List_Init+0x234>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	f000 809a 	beq.w	80092e8 <DMA_List_Init+0x160>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a81      	ldr	r2, [pc, #516]	@ (80093c0 <DMA_List_Init+0x238>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	f000 8094 	beq.w	80092e8 <DMA_List_Init+0x160>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a7f      	ldr	r2, [pc, #508]	@ (80093c4 <DMA_List_Init+0x23c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	f000 808e 	beq.w	80092e8 <DMA_List_Init+0x160>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a7d      	ldr	r2, [pc, #500]	@ (80093c8 <DMA_List_Init+0x240>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	f000 8088 	beq.w	80092e8 <DMA_List_Init+0x160>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a7b      	ldr	r2, [pc, #492]	@ (80093cc <DMA_List_Init+0x244>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	f000 8082 	beq.w	80092e8 <DMA_List_Init+0x160>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a79      	ldr	r2, [pc, #484]	@ (80093d0 <DMA_List_Init+0x248>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d07c      	beq.n	80092e8 <DMA_List_Init+0x160>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a78      	ldr	r2, [pc, #480]	@ (80093d4 <DMA_List_Init+0x24c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d077      	beq.n	80092e8 <DMA_List_Init+0x160>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a76      	ldr	r2, [pc, #472]	@ (80093d8 <DMA_List_Init+0x250>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d072      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a75      	ldr	r2, [pc, #468]	@ (80093dc <DMA_List_Init+0x254>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d06d      	beq.n	80092e8 <DMA_List_Init+0x160>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a73      	ldr	r2, [pc, #460]	@ (80093e0 <DMA_List_Init+0x258>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d068      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a72      	ldr	r2, [pc, #456]	@ (80093e4 <DMA_List_Init+0x25c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d063      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a70      	ldr	r2, [pc, #448]	@ (80093e8 <DMA_List_Init+0x260>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d05e      	beq.n	80092e8 <DMA_List_Init+0x160>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a6f      	ldr	r2, [pc, #444]	@ (80093ec <DMA_List_Init+0x264>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d059      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a6d      	ldr	r2, [pc, #436]	@ (80093f0 <DMA_List_Init+0x268>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d054      	beq.n	80092e8 <DMA_List_Init+0x160>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a6c      	ldr	r2, [pc, #432]	@ (80093f4 <DMA_List_Init+0x26c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d04f      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a6a      	ldr	r2, [pc, #424]	@ (80093f8 <DMA_List_Init+0x270>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d04a      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a69      	ldr	r2, [pc, #420]	@ (80093fc <DMA_List_Init+0x274>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d045      	beq.n	80092e8 <DMA_List_Init+0x160>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a67      	ldr	r2, [pc, #412]	@ (8009400 <DMA_List_Init+0x278>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d040      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a66      	ldr	r2, [pc, #408]	@ (8009404 <DMA_List_Init+0x27c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d03b      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a64      	ldr	r2, [pc, #400]	@ (8009408 <DMA_List_Init+0x280>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d036      	beq.n	80092e8 <DMA_List_Init+0x160>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a63      	ldr	r2, [pc, #396]	@ (800940c <DMA_List_Init+0x284>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d031      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a61      	ldr	r2, [pc, #388]	@ (8009410 <DMA_List_Init+0x288>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02c      	beq.n	80092e8 <DMA_List_Init+0x160>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a60      	ldr	r2, [pc, #384]	@ (8009414 <DMA_List_Init+0x28c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d027      	beq.n	80092e8 <DMA_List_Init+0x160>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a5e      	ldr	r2, [pc, #376]	@ (8009418 <DMA_List_Init+0x290>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d022      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a5d      	ldr	r2, [pc, #372]	@ (800941c <DMA_List_Init+0x294>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d01d      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a5b      	ldr	r2, [pc, #364]	@ (8009420 <DMA_List_Init+0x298>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d018      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a5a      	ldr	r2, [pc, #360]	@ (8009424 <DMA_List_Init+0x29c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d013      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a58      	ldr	r2, [pc, #352]	@ (8009428 <DMA_List_Init+0x2a0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00e      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a57      	ldr	r2, [pc, #348]	@ (800942c <DMA_List_Init+0x2a4>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d009      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a55      	ldr	r2, [pc, #340]	@ (8009430 <DMA_List_Init+0x2a8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d004      	beq.n	80092e8 <DMA_List_Init+0x160>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a54      	ldr	r2, [pc, #336]	@ (8009434 <DMA_List_Init+0x2ac>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <DMA_List_Init+0x164>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <DMA_List_Init+0x166>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	430a      	orrs	r2, r1
 800930e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2200      	movs	r2, #0
 8009316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009320:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2200      	movs	r2, #0
 8009330:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2200      	movs	r2, #0
 8009338:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a36      	ldr	r2, [pc, #216]	@ (8009418 <DMA_List_Init+0x290>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d022      	beq.n	800938a <DMA_List_Init+0x202>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a34      	ldr	r2, [pc, #208]	@ (800941c <DMA_List_Init+0x294>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01d      	beq.n	800938a <DMA_List_Init+0x202>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a33      	ldr	r2, [pc, #204]	@ (8009420 <DMA_List_Init+0x298>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d018      	beq.n	800938a <DMA_List_Init+0x202>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a31      	ldr	r2, [pc, #196]	@ (8009424 <DMA_List_Init+0x29c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d013      	beq.n	800938a <DMA_List_Init+0x202>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a30      	ldr	r2, [pc, #192]	@ (8009428 <DMA_List_Init+0x2a0>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <DMA_List_Init+0x202>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a2e      	ldr	r2, [pc, #184]	@ (800942c <DMA_List_Init+0x2a4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <DMA_List_Init+0x202>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a2d      	ldr	r2, [pc, #180]	@ (8009430 <DMA_List_Init+0x2a8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <DMA_List_Init+0x202>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a2b      	ldr	r2, [pc, #172]	@ (8009434 <DMA_List_Init+0x2ac>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d101      	bne.n	800938e <DMA_List_Init+0x206>
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <DMA_List_Init+0x208>
 800938e:	2300      	movs	r3, #0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2200      	movs	r2, #0
 800939a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2200      	movs	r2, #0
 80093a2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2200      	movs	r2, #0
 80093aa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	40020050 	.word	0x40020050
 80093bc:	50020050 	.word	0x50020050
 80093c0:	400200d0 	.word	0x400200d0
 80093c4:	500200d0 	.word	0x500200d0
 80093c8:	40020150 	.word	0x40020150
 80093cc:	50020150 	.word	0x50020150
 80093d0:	400201d0 	.word	0x400201d0
 80093d4:	500201d0 	.word	0x500201d0
 80093d8:	40020250 	.word	0x40020250
 80093dc:	50020250 	.word	0x50020250
 80093e0:	400202d0 	.word	0x400202d0
 80093e4:	500202d0 	.word	0x500202d0
 80093e8:	40020350 	.word	0x40020350
 80093ec:	50020350 	.word	0x50020350
 80093f0:	400203d0 	.word	0x400203d0
 80093f4:	500203d0 	.word	0x500203d0
 80093f8:	40020450 	.word	0x40020450
 80093fc:	50020450 	.word	0x50020450
 8009400:	400204d0 	.word	0x400204d0
 8009404:	500204d0 	.word	0x500204d0
 8009408:	40020550 	.word	0x40020550
 800940c:	50020550 	.word	0x50020550
 8009410:	400205d0 	.word	0x400205d0
 8009414:	500205d0 	.word	0x500205d0
 8009418:	40020650 	.word	0x40020650
 800941c:	50020650 	.word	0x50020650
 8009420:	400206d0 	.word	0x400206d0
 8009424:	500206d0 	.word	0x500206d0
 8009428:	40020750 	.word	0x40020750
 800942c:	50020750 	.word	0x50020750
 8009430:	400207d0 	.word	0x400207d0
 8009434:	500207d0 	.word	0x500207d0

08009438 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800944a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8009450:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8009456:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800945c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d017      	beq.n	800949e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	3b01      	subs	r3, #1
 8009482:	051b      	lsls	r3, r3, #20
 8009484:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8009488:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948e:	3b01      	subs	r3, #1
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8009496:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8009498:	431a      	orrs	r2, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	f240 237f 	movw	r3, #639	@ 0x27f
 80094aa:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80094ac:	431a      	orrs	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ba:	d10c      	bne.n	80094d6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d011      	beq.n	80094ec <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	605a      	str	r2, [r3, #4]
 80094d4:	e00a      	b.n	80094ec <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094de:	d105      	bne.n	80094ec <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00f      	beq.n	8009514 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009500:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009506:	041b      	lsls	r3, r3, #16
 8009508:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800950c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800950e:	431a      	orrs	r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009518:	b29a      	uxth	r2, r3
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d04e      	beq.n	80095c8 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009532:	3b01      	subs	r3, #1
 8009534:	0419      	lsls	r1, r3, #16
 8009536:	4b67      	ldr	r3, [pc, #412]	@ (80096d4 <DMA_List_BuildNode+0x29c>)
 8009538:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800953a:	431a      	orrs	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009544:	2b00      	cmp	r3, #0
 8009546:	da06      	bge.n	8009556 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	609a      	str	r2, [r3, #8]
 8009554:	e005      	b.n	8009562 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009566:	2b00      	cmp	r3, #0
 8009568:	da06      	bge.n	8009578 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	609a      	str	r2, [r3, #8]
 8009576:	e005      	b.n	8009584 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009588:	2b00      	cmp	r3, #0
 800958a:	da06      	bge.n	800959a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	609a      	str	r2, [r3, #8]
 8009598:	e005      	b.n	80095a6 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da06      	bge.n	80095bc <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	609a      	str	r2, [r3, #8]
 80095ba:	e005      	b.n	80095c8 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d059      	beq.n	8009698 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da09      	bge.n	8009600 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f0:	425b      	negs	r3, r3
 80095f2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	615a      	str	r2, [r3, #20]
 80095fe:	e005      	b.n	800960c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009604:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009610:	2b00      	cmp	r3, #0
 8009612:	da0d      	bge.n	8009630 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009618:	425b      	negs	r3, r3
 800961a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	695a      	ldr	r2, [r3, #20]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	0419      	lsls	r1, r3, #16
 8009624:	4b2c      	ldr	r3, [pc, #176]	@ (80096d8 <DMA_List_BuildNode+0x2a0>)
 8009626:	400b      	ands	r3, r1
 8009628:	431a      	orrs	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	615a      	str	r2, [r3, #20]
 800962e:	e009      	b.n	8009644 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009638:	0419      	lsls	r1, r3, #16
 800963a:	4b27      	ldr	r3, [pc, #156]	@ (80096d8 <DMA_List_BuildNode+0x2a0>)
 800963c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800963e:	431a      	orrs	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009648:	2b00      	cmp	r3, #0
 800964a:	da08      	bge.n	800965e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009650:	425b      	negs	r3, r3
 8009652:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	b29a      	uxth	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	619a      	str	r2, [r3, #24]
 800965c:	e004      	b.n	8009668 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009662:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800966c:	2b00      	cmp	r3, #0
 800966e:	da0b      	bge.n	8009688 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009674:	425b      	negs	r3, r3
 8009676:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009680:	431a      	orrs	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	619a      	str	r2, [r3, #24]
 8009686:	e007      	b.n	8009698 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009690:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8009692:	431a      	orrs	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80096b8:	e005      	b.n	80096c6 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	07ff0000 	.word	0x07ff0000
 80096d8:	1fff0000 	.word	0x1fff0000

080096dc <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	0c1b      	lsrs	r3, r3, #16
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e00a      	b.n	800971e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	e004      	b.n	800971e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	0c1b      	lsrs	r3, r3, #16
 8009722:	041b      	lsls	r3, r3, #16
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	429a      	cmp	r2, r3
 8009728:	d001      	beq.n	800972e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d004      	beq.n	800975c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	e00e      	b.n	800977a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e006      	b.n	800977a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	429a      	cmp	r2, r3
 800978a:	d001      	beq.n	8009790 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800978c:	2302      	movs	r3, #2
 800978e:	e00b      	b.n	80097a8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d001      	beq.n	80097a6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e000      	b.n	80097a8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4a0d      	ldr	r2, [pc, #52]	@ (800980c <DMA_List_GetCLLRNodeInfo+0x58>)
 80097d6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00f      	beq.n	80097fe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80097e4:	e00b      	b.n	80097fe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4a08      	ldr	r2, [pc, #32]	@ (8009810 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80097f0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2205      	movs	r2, #5
 80097fc:	601a      	str	r2, [r3, #0]
}
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	fe010000 	.word	0xfe010000
 8009810:	f8010000 	.word	0xf8010000

08009814 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8009814:	b480      	push	{r7}
 8009816:	b089      	sub	sp, #36	@ 0x24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8009824:	2300      	movs	r3, #0
 8009826:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d142      	bne.n	80098be <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8009838:	e01d      	b.n	8009876 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d107      	bne.n	8009850 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800984a:	4013      	ands	r3, r2
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e00f      	b.n	8009870 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	4413      	add	r3, r2
 8009860:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8009868:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800986c:	4013      	ands	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	3301      	adds	r3, #1
 8009874:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	429a      	cmp	r2, r3
 800987e:	d3dc      	bcc.n	800983a <DMA_List_FindNode+0x26>
 8009880:	e029      	b.n	80098d6 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d107      	bne.n	8009898 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009892:	4013      	ands	r3, r2
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	e00f      	b.n	80098b8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	0c1b      	lsrs	r3, r3, #16
 80098a2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	4413      	add	r3, r2
 80098a8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80098b0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80098b4:	4013      	ands	r3, r2
 80098b6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	3301      	adds	r3, #1
 80098bc:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d206      	bcs.n	80098d6 <DMA_List_FindNode+0xc2>
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80098ce:	4013      	ands	r3, r2
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d1d5      	bne.n	8009882 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d008      	beq.n	80098ee <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80098e2:	4013      	ands	r3, r2
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d001      	beq.n	80098ee <DMA_List_FindNode+0xda>
    {
      return 1U;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e02b      	b.n	8009946 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	0c1b      	lsrs	r3, r3, #16
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	461a      	mov	r2, r3
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00f      	beq.n	8009944 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	461a      	mov	r2, r3
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009930:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8009934:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	0c1b      	lsrs	r3, r3, #16
 800993c:	041b      	lsls	r3, r3, #16
 800993e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3724      	adds	r7, #36	@ 0x24
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009954:	b480      	push	{r7}
 8009956:	b089      	sub	sp, #36	@ 0x24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009966:	e1ba      	b.n	8009cde <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	2101      	movs	r1, #1
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	4013      	ands	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 81aa 	beq.w	8009cd8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a55      	ldr	r2, [pc, #340]	@ (8009adc <HAL_GPIO_Init+0x188>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d15d      	bne.n	8009a48 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8009992:	2201      	movs	r2, #1
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	fa02 f303 	lsl.w	r3, r2, r3
 800999a:	43db      	mvns	r3, r3
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	4013      	ands	r3, r2
 80099a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f003 0201 	and.w	r2, r3, #1
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	fa02 f303 	lsl.w	r3, r2, r3
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80099bc:	4a48      	ldr	r2, [pc, #288]	@ (8009ae0 <HAL_GPIO_Init+0x18c>)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099c4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80099c6:	4a46      	ldr	r2, [pc, #280]	@ (8009ae0 <HAL_GPIO_Init+0x18c>)
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	4413      	add	r3, r2
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	08da      	lsrs	r2, r3, #3
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	3208      	adds	r2, #8
 80099da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099de:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	220f      	movs	r2, #15
 80099ea:	fa02 f303 	lsl.w	r3, r2, r3
 80099ee:	43db      	mvns	r3, r3
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	4013      	ands	r3, r2
 80099f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	220b      	movs	r2, #11
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	08da      	lsrs	r2, r3, #3
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3208      	adds	r2, #8
 8009a12:	69f9      	ldr	r1, [r7, #28]
 8009a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	2203      	movs	r2, #3
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	2202      	movs	r2, #2
 8009a36:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	e067      	b.n	8009b18 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d003      	beq.n	8009a58 <HAL_GPIO_Init+0x104>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b12      	cmp	r3, #18
 8009a56:	d145      	bne.n	8009ae4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	08da      	lsrs	r2, r3, #3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3208      	adds	r2, #8
 8009a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	220f      	movs	r2, #15
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	43db      	mvns	r3, r3
 8009a76:	69fa      	ldr	r2, [r7, #28]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	f003 020f 	and.w	r2, r3, #15
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f003 0307 	and.w	r3, r3, #7
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	08da      	lsrs	r2, r3, #3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3208      	adds	r2, #8
 8009a9e:	69f9      	ldr	r1, [r7, #28]
 8009aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	2203      	movs	r2, #3
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	43db      	mvns	r3, r3
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f003 0203 	and.w	r2, r3, #3
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	69fa      	ldr	r2, [r7, #28]
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e01e      	b.n	8009b18 <HAL_GPIO_Init+0x1c4>
 8009ada:	bf00      	nop
 8009adc:	46020000 	.word	0x46020000
 8009ae0:	08017c78 	.word	0x08017c78
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	2203      	movs	r2, #3
 8009af0:	fa02 f303 	lsl.w	r3, r2, r3
 8009af4:	43db      	mvns	r3, r3
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	4013      	ands	r3, r2
 8009afa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f003 0203 	and.w	r2, r3, #3
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0c:	69fa      	ldr	r2, [r7, #28]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d00b      	beq.n	8009b38 <HAL_GPIO_Init+0x1e4>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d007      	beq.n	8009b38 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b2c:	2b11      	cmp	r3, #17
 8009b2e:	d003      	beq.n	8009b38 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2b12      	cmp	r3, #18
 8009b36:	d130      	bne.n	8009b9a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	2203      	movs	r2, #3
 8009b44:	fa02 f303 	lsl.w	r3, r2, r3
 8009b48:	43db      	mvns	r3, r3
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009b6e:	2201      	movs	r2, #1
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	43db      	mvns	r3, r3
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	091b      	lsrs	r3, r3, #4
 8009b84:	f003 0201 	and.w	r2, r3, #1
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d017      	beq.n	8009bd2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	2203      	movs	r2, #3
 8009bae:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb2:	43db      	mvns	r3, r3
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	689a      	ldr	r2, [r3, #8]
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	69fa      	ldr	r2, [r7, #28]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d07c      	beq.n	8009cd8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8009bde:	4a47      	ldr	r2, [pc, #284]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	089b      	lsrs	r3, r3, #2
 8009be4:	3318      	adds	r3, #24
 8009be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	220f      	movs	r2, #15
 8009bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	0a9a      	lsrs	r2, r3, #10
 8009c06:	4b3e      	ldr	r3, [pc, #248]	@ (8009d00 <HAL_GPIO_Init+0x3ac>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	f002 0203 	and.w	r2, r2, #3
 8009c10:	00d2      	lsls	r2, r2, #3
 8009c12:	4093      	lsls	r3, r2
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009c1a:	4938      	ldr	r1, [pc, #224]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	089b      	lsrs	r3, r3, #2
 8009c20:	3318      	adds	r3, #24
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009c28:	4b34      	ldr	r3, [pc, #208]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	43db      	mvns	r3, r3
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	4013      	ands	r3, r2
 8009c36:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009c44:	69fa      	ldr	r2, [r7, #28]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8009c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009c52:	4b2a      	ldr	r3, [pc, #168]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	43db      	mvns	r3, r3
 8009c5c:	69fa      	ldr	r2, [r7, #28]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009c76:	4a21      	ldr	r2, [pc, #132]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8009c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	43db      	mvns	r3, r3
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009ca2:	4a16      	ldr	r2, [pc, #88]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8009caa:	4b14      	ldr	r3, [pc, #80]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	43db      	mvns	r3, r3
 8009cb6:	69fa      	ldr	r2, [r7, #28]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009cc8:	69fa      	ldr	r2, [r7, #28]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009cfc <HAL_GPIO_Init+0x3a8>)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f47f ae3d 	bne.w	8009968 <HAL_GPIO_Init+0x14>
  }
}
 8009cee:	bf00      	nop
 8009cf0:	bf00      	nop
 8009cf2:	3724      	adds	r7, #36	@ 0x24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	46022000 	.word	0x46022000
 8009d00:	002f7f7f 	.word	0x002f7f7f

08009d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	807b      	strh	r3, [r7, #2]
 8009d10:	4613      	mov	r3, r2
 8009d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d14:	787b      	ldrb	r3, [r7, #1]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d1a:	887a      	ldrh	r2, [r7, #2]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009d20:	e002      	b.n	8009d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009d22:	887a      	ldrh	r2, [r7, #2]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8009d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009d7c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	88fb      	ldrh	r3, [r7, #6]
 8009d44:	4013      	ands	r3, r2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d006      	beq.n	8009d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d7c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009d50:	88fb      	ldrh	r3, [r7, #6]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 f814 	bl	8009d80 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8009d58:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	88fb      	ldrh	r3, [r7, #6]
 8009d5e:	4013      	ands	r3, r2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009d64:	4a05      	ldr	r2, [pc, #20]	@ (8009d7c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f812 	bl	8009d96 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	46022000 	.word	0x46022000

08009d80 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e08d      	b.n	8009eda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7fa fcea 	bl	80047ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2224      	movs	r2, #36	@ 0x24
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0201 	bic.w	r2, r2, #1
 8009dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d107      	bne.n	8009e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e22:	609a      	str	r2, [r3, #8]
 8009e24:	e006      	b.n	8009e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d108      	bne.n	8009e4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e4a:	605a      	str	r2, [r3, #4]
 8009e4c:	e007      	b.n	8009e5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68da      	ldr	r2, [r3, #12]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	69d9      	ldr	r1, [r3, #28]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1a      	ldr	r2, [r3, #32]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0201 	orr.w	r2, r2, #1
 8009eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	607a      	str	r2, [r7, #4]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	817b      	strh	r3, [r7, #10]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	f040 80da 	bne.w	800a0ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_I2C_Master_Transmit+0x30>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e0d3      	b.n	800a0bc <HAL_I2C_Master_Transmit+0x1d8>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009f1c:	f7fb fdec 	bl	8005af8 <HAL_GetTick>
 8009f20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	2319      	movs	r3, #25
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 ff73 	bl	800ae1a <I2C_WaitOnFlagUntilTimeout>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e0be      	b.n	800a0bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2221      	movs	r2, #33	@ 0x21
 8009f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2210      	movs	r2, #16
 8009f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	893a      	ldrh	r2, [r7, #8]
 8009f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	2bff      	cmp	r3, #255	@ 0xff
 8009f6e:	d90e      	bls.n	8009f8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	22ff      	movs	r2, #255	@ 0xff
 8009f74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	8979      	ldrh	r1, [r7, #10]
 8009f7e:	4b51      	ldr	r3, [pc, #324]	@ (800a0c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f001 f996 	bl	800b2b8 <I2C_TransferConfig>
 8009f8c:	e06c      	b.n	800a068 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	8979      	ldrh	r1, [r7, #10]
 8009fa0:	4b48      	ldr	r3, [pc, #288]	@ (800a0c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f001 f985 	bl	800b2b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009fae:	e05b      	b.n	800a068 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	6a39      	ldr	r1, [r7, #32]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 ff89 	bl	800aecc <I2C_WaitOnTXISFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e07b      	b.n	800a0bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc8:	781a      	ldrb	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d034      	beq.n	800a068 <HAL_I2C_Master_Transmit+0x184>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a002:	2b00      	cmp	r3, #0
 800a004:	d130      	bne.n	800a068 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	2200      	movs	r2, #0
 800a00e:	2180      	movs	r1, #128	@ 0x80
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 ff02 	bl	800ae1a <I2C_WaitOnFlagUntilTimeout>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e04d      	b.n	800a0bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a024:	b29b      	uxth	r3, r3
 800a026:	2bff      	cmp	r3, #255	@ 0xff
 800a028:	d90e      	bls.n	800a048 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	22ff      	movs	r2, #255	@ 0xff
 800a02e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a034:	b2da      	uxtb	r2, r3
 800a036:	8979      	ldrh	r1, [r7, #10]
 800a038:	2300      	movs	r3, #0
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f001 f939 	bl	800b2b8 <I2C_TransferConfig>
 800a046:	e00f      	b.n	800a068 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a056:	b2da      	uxtb	r2, r3
 800a058:	8979      	ldrh	r1, [r7, #10]
 800a05a:	2300      	movs	r3, #0
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f001 f928 	bl	800b2b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d19e      	bne.n	8009fb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	6a39      	ldr	r1, [r7, #32]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 ff6f 	bl	800af5a <I2C_WaitOnSTOPFlagUntilTimeout>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e01a      	b.n	800a0bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2220      	movs	r2, #32
 800a08c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6859      	ldr	r1, [r3, #4]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800a09a:	400b      	ands	r3, r1
 800a09c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e000      	b.n	800a0bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
  }
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	80002000 	.word	0x80002000
 800a0c8:	fe00e800 	.word	0xfe00e800

0800a0cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	460b      	mov	r3, r1
 800a0da:	817b      	strh	r3, [r7, #10]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	f040 80db 	bne.w	800a2a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d101      	bne.n	800a0fc <HAL_I2C_Master_Receive+0x30>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e0d4      	b.n	800a2a6 <HAL_I2C_Master_Receive+0x1da>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a104:	f7fb fcf8 	bl	8005af8 <HAL_GetTick>
 800a108:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	2319      	movs	r3, #25
 800a110:	2201      	movs	r2, #1
 800a112:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fe7f 	bl	800ae1a <I2C_WaitOnFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e0bf      	b.n	800a2a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2222      	movs	r2, #34	@ 0x22
 800a12a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2210      	movs	r2, #16
 800a132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	893a      	ldrh	r2, [r7, #8]
 800a146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a152:	b29b      	uxth	r3, r3
 800a154:	2bff      	cmp	r3, #255	@ 0xff
 800a156:	d90e      	bls.n	800a176 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	22ff      	movs	r2, #255	@ 0xff
 800a15c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a162:	b2da      	uxtb	r2, r3
 800a164:	8979      	ldrh	r1, [r7, #10]
 800a166:	4b52      	ldr	r3, [pc, #328]	@ (800a2b0 <HAL_I2C_Master_Receive+0x1e4>)
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f001 f8a2 	bl	800b2b8 <I2C_TransferConfig>
 800a174:	e06d      	b.n	800a252 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a184:	b2da      	uxtb	r2, r3
 800a186:	8979      	ldrh	r1, [r7, #10]
 800a188:	4b49      	ldr	r3, [pc, #292]	@ (800a2b0 <HAL_I2C_Master_Receive+0x1e4>)
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f001 f891 	bl	800b2b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a196:	e05c      	b.n	800a252 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	6a39      	ldr	r1, [r7, #32]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 ff1f 	bl	800afe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e07c      	b.n	800a2a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d034      	beq.n	800a252 <HAL_I2C_Master_Receive+0x186>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d130      	bne.n	800a252 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2180      	movs	r1, #128	@ 0x80
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 fe0d 	bl	800ae1a <I2C_WaitOnFlagUntilTimeout>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e04d      	b.n	800a2a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a20e:	b29b      	uxth	r3, r3
 800a210:	2bff      	cmp	r3, #255	@ 0xff
 800a212:	d90e      	bls.n	800a232 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	22ff      	movs	r2, #255	@ 0xff
 800a218:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	8979      	ldrh	r1, [r7, #10]
 800a222:	2300      	movs	r3, #0
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f001 f844 	bl	800b2b8 <I2C_TransferConfig>
 800a230:	e00f      	b.n	800a252 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a240:	b2da      	uxtb	r2, r3
 800a242:	8979      	ldrh	r1, [r7, #10]
 800a244:	2300      	movs	r3, #0
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f001 f833 	bl	800b2b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a256:	b29b      	uxth	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d19d      	bne.n	800a198 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	6a39      	ldr	r1, [r7, #32]
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 fe7a 	bl	800af5a <I2C_WaitOnSTOPFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e01a      	b.n	800a2a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2220      	movs	r2, #32
 800a276:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6859      	ldr	r1, [r3, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b4 <HAL_I2C_Master_Receive+0x1e8>)
 800a284:	400b      	ands	r3, r1
 800a286:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e000      	b.n	800a2a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a2a4:	2302      	movs	r3, #2
  }
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	80002400 	.word	0x80002400
 800a2b4:	fe00e800 	.word	0xfe00e800

0800a2b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d005      	beq.n	800a2e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	4798      	blx	r3
  }
}
 800a2e4:	bf00      	nop
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00f      	beq.n	800a32e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00a      	beq.n	800a32e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a31c:	f043 0201 	orr.w	r2, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a32c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00f      	beq.n	800a358 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a346:	f043 0208 	orr.w	r2, r3, #8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a356:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00f      	beq.n	800a382 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00a      	beq.n	800a382 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a370:	f043 0202 	orr.w	r2, r3, #2
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a380:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a386:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f003 030b 	and.w	r3, r3, #11
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800a392:	68f9      	ldr	r1, [r7, #12]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fbe7 	bl	800ab68 <I2C_ITError>
  }
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a3be:	bf00      	nop
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a402:	bf00      	nop
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b086      	sub	sp, #24
 800a426:	af00      	add	r7, sp, #0
 800a428:	60f8      	str	r0, [r7, #12]
 800a42a:	60b9      	str	r1, [r7, #8]
 800a42c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a432:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <I2C_Slave_ISR_IT+0x24>
 800a442:	2302      	movs	r3, #2
 800a444:	e0e2      	b.n	800a60c <I2C_Slave_ISR_IT+0x1ea>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a462:	6939      	ldr	r1, [r7, #16]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 f9b5 	bl	800a7d4 <I2C_ITSlaveCplt>
 800a46a:	e0ca      	b.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f003 0310 	and.w	r3, r3, #16
 800a472:	2b00      	cmp	r3, #0
 800a474:	d04b      	beq.n	800a50e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d046      	beq.n	800a50e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d128      	bne.n	800a4dc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b28      	cmp	r3, #40	@ 0x28
 800a494:	d108      	bne.n	800a4a8 <I2C_Slave_ISR_IT+0x86>
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a49c:	d104      	bne.n	800a4a8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a49e:	6939      	ldr	r1, [r7, #16]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 fb0d 	bl	800aac0 <I2C_ITListenCplt>
 800a4a6:	e031      	b.n	800a50c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b29      	cmp	r3, #41	@ 0x29
 800a4b2:	d10e      	bne.n	800a4d2 <I2C_Slave_ISR_IT+0xb0>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a4ba:	d00a      	beq.n	800a4d2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2210      	movs	r2, #16
 800a4c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fc66 	bl	800ad96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f926 	bl	800a71c <I2C_ITSlaveSeqCplt>
 800a4d0:	e01c      	b.n	800a50c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2210      	movs	r2, #16
 800a4d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a4da:	e08f      	b.n	800a5fc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2210      	movs	r2, #16
 800a4e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e8:	f043 0204 	orr.w	r2, r3, #4
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <I2C_Slave_ISR_IT+0xdc>
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4fc:	d17e      	bne.n	800a5fc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a502:	4619      	mov	r1, r3
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 fb2f 	bl	800ab68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a50a:	e077      	b.n	800a5fc <I2C_Slave_ISR_IT+0x1da>
 800a50c:	e076      	b.n	800a5fc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d02f      	beq.n	800a578 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d02a      	beq.n	800a578 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a526:	b29b      	uxth	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d018      	beq.n	800a55e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a548:	3b01      	subs	r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a554:	b29b      	uxth	r3, r3
 800a556:	3b01      	subs	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d14b      	bne.n	800a600 <I2C_Slave_ISR_IT+0x1de>
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a56e:	d047      	beq.n	800a600 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 f8d3 	bl	800a71c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a576:	e043      	b.n	800a600 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a58c:	6939      	ldr	r1, [r7, #16]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f840 	bl	800a614 <I2C_ITAddrCplt>
 800a594:	e035      	b.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d030      	beq.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d02b      	beq.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d018      	beq.n	800a5e6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b8:	781a      	ldrb	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a5e4:	e00d      	b.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5ec:	d002      	beq.n	800a5f4 <I2C_Slave_ISR_IT+0x1d2>
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 f891 	bl	800a71c <I2C_ITSlaveSeqCplt>
 800a5fa:	e002      	b.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800a5fc:	bf00      	nop
 800a5fe:	e000      	b.n	800a602 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800a600:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a624:	b2db      	uxtb	r3, r3
 800a626:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a62a:	2b28      	cmp	r3, #40	@ 0x28
 800a62c:	d16a      	bne.n	800a704 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	0c1b      	lsrs	r3, r3, #16
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	0c1b      	lsrs	r3, r3, #16
 800a646:	b29b      	uxth	r3, r3
 800a648:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a64c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	b29b      	uxth	r3, r3
 800a656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a65a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	b29b      	uxth	r3, r3
 800a664:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a668:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d138      	bne.n	800a6e4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a672:	897b      	ldrh	r3, [r7, #10]
 800a674:	09db      	lsrs	r3, r3, #7
 800a676:	b29a      	uxth	r2, r3
 800a678:	89bb      	ldrh	r3, [r7, #12]
 800a67a:	4053      	eors	r3, r2
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f003 0306 	and.w	r3, r3, #6
 800a682:	2b00      	cmp	r3, #0
 800a684:	d11c      	bne.n	800a6c0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a686:	897b      	ldrh	r3, [r7, #10]
 800a688:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d13b      	bne.n	800a714 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2208      	movs	r2, #8
 800a6a8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a6b2:	89ba      	ldrh	r2, [r7, #12]
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fe86 	bl	800a3ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a6be:	e029      	b.n	800a714 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a6c0:	893b      	ldrh	r3, [r7, #8]
 800a6c2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a6c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fe27 	bl	800b31c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a6d6:	89ba      	ldrh	r2, [r7, #12]
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff fe74 	bl	800a3ca <HAL_I2C_AddrCallback>
}
 800a6e2:	e017      	b.n	800a714 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a6e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fe17 	bl	800b31c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a6f6:	89ba      	ldrh	r2, [r7, #12]
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff fe64 	bl	800a3ca <HAL_I2C_AddrCallback>
}
 800a702:	e007      	b.n	800a714 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2208      	movs	r2, #8
 800a70a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a714:	bf00      	nop
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d008      	beq.n	800a750 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e00c      	b.n	800a76a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a768:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b29      	cmp	r3, #41	@ 0x29
 800a774:	d112      	bne.n	800a79c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2228      	movs	r2, #40	@ 0x28
 800a77a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2221      	movs	r2, #33	@ 0x21
 800a782:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a784:	2101      	movs	r1, #1
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fdc8 	bl	800b31c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fe04 	bl	800a3a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a79a:	e017      	b.n	800a7cc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7a6:	d111      	bne.n	800a7cc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2228      	movs	r2, #40	@ 0x28
 800a7ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2222      	movs	r2, #34	@ 0x22
 800a7b4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fdaf 	bl	800b31c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff fdf5 	bl	800a3b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7f6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	2b21      	cmp	r3, #33	@ 0x21
 800a804:	d002      	beq.n	800a80c <I2C_ITSlaveCplt+0x38>
 800a806:	7afb      	ldrb	r3, [r7, #11]
 800a808:	2b29      	cmp	r3, #41	@ 0x29
 800a80a:	d108      	bne.n	800a81e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a80c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd83 	bl	800b31c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2221      	movs	r2, #33	@ 0x21
 800a81a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a81c:	e019      	b.n	800a852 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a81e:	7afb      	ldrb	r3, [r7, #11]
 800a820:	2b22      	cmp	r3, #34	@ 0x22
 800a822:	d002      	beq.n	800a82a <I2C_ITSlaveCplt+0x56>
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	2b2a      	cmp	r3, #42	@ 0x2a
 800a828:	d108      	bne.n	800a83c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a82a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fd74 	bl	800b31c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2222      	movs	r2, #34	@ 0x22
 800a838:	631a      	str	r2, [r3, #48]	@ 0x30
 800a83a:	e00a      	b.n	800a852 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	2b28      	cmp	r3, #40	@ 0x28
 800a840:	d107      	bne.n	800a852 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a842:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fd68 	bl	800b31c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a860:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6859      	ldr	r1, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	4b92      	ldr	r3, [pc, #584]	@ (800aab8 <I2C_ITSlaveCplt+0x2e4>)
 800a86e:	400b      	ands	r3, r1
 800a870:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa8f 	bl	800ad96 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01c      	beq.n	800a8bc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a890:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a896:	2b00      	cmp	r3, #0
 800a898:	d031      	beq.n	800a8fe <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8a2:	b29c      	uxth	r4, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fe fc5d 	bl	8009168 <HAL_DMAEx_GetFifoLevel>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4423      	add	r3, r4
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a8ba:	e020      	b.n	800a8fe <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d01b      	beq.n	800a8fe <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a8d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00f      	beq.n	800a8fe <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8e6:	b29c      	uxth	r4, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe fc3b 	bl	8009168 <HAL_DMAEx_GetFifoLevel>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4423      	add	r3, r4
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d020      	beq.n	800a94a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f023 0304 	bic.w	r3, r3, #4
 800a90e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00c      	beq.n	800a94a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a934:	3b01      	subs	r3, #1
 800a936:	b29a      	uxth	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a94e:	b29b      	uxth	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a958:	f043 0204 	orr.w	r2, r3, #4
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f003 0310 	and.w	r3, r3, #16
 800a966:	2b00      	cmp	r3, #0
 800a968:	d049      	beq.n	800a9fe <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a970:	2b00      	cmp	r3, #0
 800a972:	d044      	beq.n	800a9fe <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a978:	b29b      	uxth	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d128      	bne.n	800a9d0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b28      	cmp	r3, #40	@ 0x28
 800a988:	d108      	bne.n	800a99c <I2C_ITSlaveCplt+0x1c8>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a990:	d104      	bne.n	800a99c <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a992:	6979      	ldr	r1, [r7, #20]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f893 	bl	800aac0 <I2C_ITListenCplt>
 800a99a:	e030      	b.n	800a9fe <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b29      	cmp	r3, #41	@ 0x29
 800a9a6:	d10e      	bne.n	800a9c6 <I2C_ITSlaveCplt+0x1f2>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a9ae:	d00a      	beq.n	800a9c6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2210      	movs	r2, #16
 800a9b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f9ec 	bl	800ad96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff feac 	bl	800a71c <I2C_ITSlaveSeqCplt>
 800a9c4:	e01b      	b.n	800a9fe <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2210      	movs	r2, #16
 800a9cc:	61da      	str	r2, [r3, #28]
 800a9ce:	e016      	b.n	800a9fe <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2210      	movs	r2, #16
 800a9d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9dc:	f043 0204 	orr.w	r2, r3, #4
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <I2C_ITSlaveCplt+0x21e>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9f0:	d105      	bne.n	800a9fe <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f8b5 	bl	800ab68 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d010      	beq.n	800aa36 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f8a4 	bl	800ab68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b28      	cmp	r3, #40	@ 0x28
 800aa2a:	d141      	bne.n	800aab0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800aa2c:	6979      	ldr	r1, [r7, #20]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f846 	bl	800aac0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aa34:	e03c      	b.n	800aab0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aa3e:	d014      	beq.n	800aa6a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff fe6b 	bl	800a71c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1c      	ldr	r2, [pc, #112]	@ (800aabc <I2C_ITSlaveCplt+0x2e8>)
 800aa4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff fcbf 	bl	800a3e6 <HAL_I2C_ListenCpltCallback>
}
 800aa68:	e022      	b.n	800aab0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b22      	cmp	r3, #34	@ 0x22
 800aa74:	d10e      	bne.n	800aa94 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff fc92 	bl	800a3b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800aa92:	e00d      	b.n	800aab0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7ff fc79 	bl	800a3a2 <HAL_I2C_SlaveTxCpltCallback>
}
 800aab0:	bf00      	nop
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd90      	pop	{r4, r7, pc}
 800aab8:	fe00e800 	.word	0xfe00e800
 800aabc:	ffff0000 	.word	0xffff0000

0800aac0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a25      	ldr	r2, [pc, #148]	@ (800ab64 <I2C_ITListenCplt+0xa4>)
 800aace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2220      	movs	r2, #32
 800aada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	f003 0304 	and.w	r3, r3, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d022      	beq.n	800ab3c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d012      	beq.n	800ab3c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab34:	f043 0204 	orr.w	r2, r3, #4
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ab3c:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fbeb 	bl	800b31c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff fc45 	bl	800a3e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	ffff0000 	.word	0xffff0000

0800ab68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab78:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a6d      	ldr	r2, [pc, #436]	@ (800ad3c <I2C_ITError+0x1d4>)
 800ab86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	2b28      	cmp	r3, #40	@ 0x28
 800ab9e:	d005      	beq.n	800abac <I2C_ITError+0x44>
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	2b29      	cmp	r3, #41	@ 0x29
 800aba4:	d002      	beq.n	800abac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abaa:	d10b      	bne.n	800abc4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800abac:	2103      	movs	r1, #3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fbb4 	bl	800b31c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2228      	movs	r2, #40	@ 0x28
 800abb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a60      	ldr	r2, [pc, #384]	@ (800ad40 <I2C_ITError+0x1d8>)
 800abc0:	635a      	str	r2, [r3, #52]	@ 0x34
 800abc2:	e030      	b.n	800ac26 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800abc4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fba7 	bl	800b31c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f8e1 	bl	800ad96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b60      	cmp	r3, #96	@ 0x60
 800abde:	d01f      	beq.n	800ac20 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2220      	movs	r2, #32
 800abe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	f003 0320 	and.w	r3, r3, #32
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	d114      	bne.n	800ac20 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	f003 0310 	and.w	r3, r3, #16
 800ac00:	2b10      	cmp	r3, #16
 800ac02:	d109      	bne.n	800ac18 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2210      	movs	r2, #16
 800ac0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac10:	f043 0204 	orr.w	r2, r3, #4
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d039      	beq.n	800aca8 <I2C_ITError+0x140>
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b11      	cmp	r3, #17
 800ac38:	d002      	beq.n	800ac40 <I2C_ITError+0xd8>
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2b21      	cmp	r3, #33	@ 0x21
 800ac3e:	d133      	bne.n	800aca8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac4e:	d107      	bne.n	800ac60 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ac5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd fba3 	bl	80083b0 <HAL_DMA_GetState>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d017      	beq.n	800aca0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac74:	4a33      	ldr	r2, [pc, #204]	@ (800ad44 <I2C_ITError+0x1dc>)
 800ac76:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fd fa09 	bl	800809c <HAL_DMA_Abort_IT>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d04d      	beq.n	800ad2c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ac9e:	e045      	b.n	800ad2c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f851 	bl	800ad48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aca6:	e041      	b.n	800ad2c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d039      	beq.n	800ad24 <I2C_ITError+0x1bc>
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b12      	cmp	r3, #18
 800acb4:	d002      	beq.n	800acbc <I2C_ITError+0x154>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b22      	cmp	r3, #34	@ 0x22
 800acba:	d133      	bne.n	800ad24 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acca:	d107      	bne.n	800acdc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800acda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fd fb65 	bl	80083b0 <HAL_DMA_GetState>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d017      	beq.n	800ad1c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf0:	4a14      	ldr	r2, [pc, #80]	@ (800ad44 <I2C_ITError+0x1dc>)
 800acf2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd f9cb 	bl	800809c <HAL_DMA_Abort_IT>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d011      	beq.n	800ad30 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ad16:	4610      	mov	r0, r2
 800ad18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad1a:	e009      	b.n	800ad30 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f813 	bl	800ad48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad22:	e005      	b.n	800ad30 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f80f 	bl	800ad48 <I2C_TreatErrorCallback>
  }
}
 800ad2a:	e002      	b.n	800ad32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ad2c:	bf00      	nop
 800ad2e:	e000      	b.n	800ad32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad30:	bf00      	nop
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	ffff0000 	.word	0xffff0000
 800ad40:	0800a423 	.word	0x0800a423
 800ad44:	0800addf 	.word	0x0800addf

0800ad48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b60      	cmp	r3, #96	@ 0x60
 800ad5a:	d10e      	bne.n	800ad7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2220      	movs	r2, #32
 800ad60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff fb4b 	bl	800a40e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ad78:	e009      	b.n	800ad8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7ff fb36 	bl	800a3fa <HAL_I2C_ErrorCallback>
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f003 0302 	and.w	r3, r3, #2
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d103      	bne.n	800adb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2200      	movs	r2, #0
 800adb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d007      	beq.n	800add2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	699a      	ldr	r2, [r3, #24]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f042 0201 	orr.w	r2, r2, #1
 800add0:	619a      	str	r2, [r3, #24]
  }
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf8:	2200      	movs	r2, #0
 800adfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae08:	2200      	movs	r2, #0
 800ae0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7ff ff9b 	bl	800ad48 <I2C_TreatErrorCallback>
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	603b      	str	r3, [r7, #0]
 800ae26:	4613      	mov	r3, r2
 800ae28:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae2a:	e03b      	b.n	800aea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae2c:	69ba      	ldr	r2, [r7, #24]
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f961 	bl	800b0f8 <I2C_IsErrorOccurred>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e041      	b.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae46:	d02d      	beq.n	800aea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae48:	f7fa fe56 	bl	8005af8 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d302      	bcc.n	800ae5e <I2C_WaitOnFlagUntilTimeout+0x44>
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d122      	bne.n	800aea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	699a      	ldr	r2, [r3, #24]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4013      	ands	r3, r2
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	bf0c      	ite	eq
 800ae6e:	2301      	moveq	r3, #1
 800ae70:	2300      	movne	r3, #0
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d113      	bne.n	800aea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae80:	f043 0220 	orr.w	r2, r3, #32
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e00f      	b.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	4013      	ands	r3, r2
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	bf0c      	ite	eq
 800aeb4:	2301      	moveq	r3, #1
 800aeb6:	2300      	movne	r3, #0
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	79fb      	ldrb	r3, [r7, #7]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d0b4      	beq.n	800ae2c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aed8:	e033      	b.n	800af42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f90a 	bl	800b0f8 <I2C_IsErrorOccurred>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e031      	b.n	800af52 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d025      	beq.n	800af42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aef6:	f7fa fdff 	bl	8005af8 <HAL_GetTick>
 800aefa:	4602      	mov	r2, r0
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	429a      	cmp	r2, r3
 800af04:	d302      	bcc.n	800af0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d11a      	bne.n	800af42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b02      	cmp	r3, #2
 800af18:	d013      	beq.n	800af42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af1e:	f043 0220 	orr.w	r2, r3, #32
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2220      	movs	r2, #32
 800af2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e007      	b.n	800af52 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d1c4      	bne.n	800aeda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af66:	e02f      	b.n	800afc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 f8c3 	bl	800b0f8 <I2C_IsErrorOccurred>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e02d      	b.n	800afd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af7c:	f7fa fdbc 	bl	8005af8 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d302      	bcc.n	800af92 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d11a      	bne.n	800afc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	d013      	beq.n	800afc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa4:	f043 0220 	orr.w	r2, r3, #32
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2220      	movs	r2, #32
 800afb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e007      	b.n	800afd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d1c8      	bne.n	800af68 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800aff0:	e071      	b.n	800b0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 f87e 	bl	800b0f8 <I2C_IsErrorOccurred>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b20      	cmp	r3, #32
 800b012:	d13b      	bne.n	800b08c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d138      	bne.n	800b08c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b04      	cmp	r3, #4
 800b026:	d105      	bne.n	800b034 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f003 0310 	and.w	r3, r3, #16
 800b03e:	2b10      	cmp	r3, #16
 800b040:	d121      	bne.n	800b086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2210      	movs	r2, #16
 800b048:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2204      	movs	r2, #4
 800b04e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2220      	movs	r2, #32
 800b056:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6859      	ldr	r1, [r3, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	4b24      	ldr	r3, [pc, #144]	@ (800b0f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800b064:	400b      	ands	r3, r1
 800b066:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2220      	movs	r2, #32
 800b06c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	75fb      	strb	r3, [r7, #23]
 800b084:	e002      	b.n	800b08c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800b08c:	f7fa fd34 	bl	8005af8 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d302      	bcc.n	800b0a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d119      	bne.n	800b0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d116      	bne.n	800b0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f003 0304 	and.w	r3, r3, #4
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d00f      	beq.n	800b0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ba:	f043 0220 	orr.w	r2, r3, #32
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	f003 0304 	and.w	r3, r3, #4
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d002      	beq.n	800b0ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d083      	beq.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	fe00e800 	.word	0xfe00e800

0800b0f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08a      	sub	sp, #40	@ 0x28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	f003 0310 	and.w	r3, r3, #16
 800b120:	2b00      	cmp	r3, #0
 800b122:	d068      	beq.n	800b1f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2210      	movs	r2, #16
 800b12a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b12c:	e049      	b.n	800b1c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b134:	d045      	beq.n	800b1c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b136:	f7fa fcdf 	bl	8005af8 <HAL_GetTick>
 800b13a:	4602      	mov	r2, r0
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	429a      	cmp	r2, r3
 800b144:	d302      	bcc.n	800b14c <I2C_IsErrorOccurred+0x54>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d13a      	bne.n	800b1c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b15e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b16a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b16e:	d121      	bne.n	800b1b4 <I2C_IsErrorOccurred+0xbc>
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b176:	d01d      	beq.n	800b1b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b178:	7cfb      	ldrb	r3, [r7, #19]
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	d01a      	beq.n	800b1b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b18c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b18e:	f7fa fcb3 	bl	8005af8 <HAL_GetTick>
 800b192:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b194:	e00e      	b.n	800b1b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b196:	f7fa fcaf 	bl	8005af8 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b19      	cmp	r3, #25
 800b1a2:	d907      	bls.n	800b1b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	f043 0320 	orr.w	r3, r3, #32
 800b1aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b1b2:	e006      	b.n	800b1c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	d1e9      	bne.n	800b196 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f003 0320 	and.w	r3, r3, #32
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d003      	beq.n	800b1d8 <I2C_IsErrorOccurred+0xe0>
 800b1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d0aa      	beq.n	800b12e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d103      	bne.n	800b1e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	f043 0304 	orr.w	r3, r3, #4
 800b1ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00b      	beq.n	800b220 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	f043 0301 	orr.w	r3, r3, #1
 800b20e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00b      	beq.n	800b242 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	f043 0308 	orr.w	r3, r3, #8
 800b230:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b23a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00b      	beq.n	800b264 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	f043 0302 	orr.w	r3, r3, #2
 800b252:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b25c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01c      	beq.n	800b2a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff fd92 	bl	800ad96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6859      	ldr	r1, [r3, #4]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <I2C_IsErrorOccurred+0x1bc>)
 800b27e:	400b      	ands	r3, r1
 800b280:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	431a      	orrs	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2220      	movs	r2, #32
 800b292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3728      	adds	r7, #40	@ 0x28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	fe00e800 	.word	0xfe00e800

0800b2b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	817b      	strh	r3, [r7, #10]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2ca:	897b      	ldrh	r3, [r7, #10]
 800b2cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b2d0:	7a7b      	ldrb	r3, [r7, #9]
 800b2d2:	041b      	lsls	r3, r3, #16
 800b2d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	0d5b      	lsrs	r3, r3, #21
 800b2f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b2f6:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <I2C_TransferConfig+0x60>)
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	ea02 0103 	and.w	r1, r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	430a      	orrs	r2, r1
 800b308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	03ff63ff 	.word	0x03ff63ff

0800b31c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b32c:	887b      	ldrh	r3, [r7, #2]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00f      	beq.n	800b356 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b33c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b344:	b2db      	uxtb	r3, r3
 800b346:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b34a:	2b28      	cmp	r3, #40	@ 0x28
 800b34c:	d003      	beq.n	800b356 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b354:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b356:	887b      	ldrh	r3, [r7, #2]
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00f      	beq.n	800b380 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b366:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b374:	2b28      	cmp	r3, #40	@ 0x28
 800b376:	d003      	beq.n	800b380 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b37e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b380:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b384:	2b00      	cmp	r3, #0
 800b386:	da03      	bge.n	800b390 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b38e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b390:	887b      	ldrh	r3, [r7, #2]
 800b392:	2b10      	cmp	r3, #16
 800b394:	d103      	bne.n	800b39e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b39c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b39e:	887b      	ldrh	r3, [r7, #2]
 800b3a0:	2b20      	cmp	r3, #32
 800b3a2:	d103      	bne.n	800b3ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f043 0320 	orr.w	r3, r3, #32
 800b3aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	2b40      	cmp	r3, #64	@ 0x40
 800b3b0:	d103      	bne.n	800b3ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6819      	ldr	r1, [r3, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	43da      	mvns	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	400a      	ands	r2, r1
 800b3ca:	601a      	str	r2, [r3, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	d138      	bne.n	800b460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d101      	bne.n	800b3fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	e032      	b.n	800b462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2224      	movs	r2, #36	@ 0x24
 800b408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b42a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6819      	ldr	r1, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f042 0201 	orr.w	r2, r2, #1
 800b44a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2220      	movs	r2, #32
 800b450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	e000      	b.n	800b462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b460:	2302      	movs	r3, #2
  }
}
 800b462:	4618      	mov	r0, r3
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b20      	cmp	r3, #32
 800b482:	d139      	bne.n	800b4f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b48e:	2302      	movs	r3, #2
 800b490:	e033      	b.n	800b4fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2224      	movs	r2, #36	@ 0x24
 800b49e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f022 0201 	bic.w	r2, r2, #1
 800b4b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b4c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e000      	b.n	800b4fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b4f8:	2302      	movs	r3, #2
  }
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
	...

0800b508 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b514:	4b0b      	ldr	r3, [pc, #44]	@ (800b544 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	73fb      	strb	r3, [r7, #15]
 800b524:	e007      	b.n	800b536 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b526:	4b07      	ldr	r3, [pc, #28]	@ (800b544 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f023 0204 	bic.w	r2, r3, #4
 800b52e:	4905      	ldr	r1, [pc, #20]	@ (800b544 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4313      	orrs	r3, r2
 800b534:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	40030400 	.word	0x40030400

0800b548 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b54c:	4b05      	ldr	r3, [pc, #20]	@ (800b564 <HAL_ICACHE_Enable+0x1c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a04      	ldr	r2, [pc, #16]	@ (800b564 <HAL_ICACHE_Enable+0x1c>)
 800b552:	f043 0301 	orr.w	r3, r3, #1
 800b556:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	40030400 	.word	0x40030400

0800b568 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e0bf      	b.n	800b6fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d106      	bne.n	800b594 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7f9 f9fa 	bl	8004988 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800b5aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6999      	ldr	r1, [r3, #24]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	685a      	ldr	r2, [r3, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b5c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6899      	ldr	r1, [r3, #8]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b4a      	ldr	r3, [pc, #296]	@ (800b704 <HAL_LTDC_Init+0x19c>)
 800b5dc:	400b      	ands	r3, r1
 800b5de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	041b      	lsls	r3, r3, #16
 800b5e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6899      	ldr	r1, [r3, #8]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699a      	ldr	r2, [r3, #24]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68d9      	ldr	r1, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	4b3e      	ldr	r3, [pc, #248]	@ (800b704 <HAL_LTDC_Init+0x19c>)
 800b60a:	400b      	ands	r3, r1
 800b60c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	041b      	lsls	r3, r3, #16
 800b614:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68d9      	ldr	r1, [r3, #12]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1a      	ldr	r2, [r3, #32]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	431a      	orrs	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	430a      	orrs	r2, r1
 800b62a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6919      	ldr	r1, [r3, #16]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4b33      	ldr	r3, [pc, #204]	@ (800b704 <HAL_LTDC_Init+0x19c>)
 800b638:	400b      	ands	r3, r1
 800b63a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b640:	041b      	lsls	r3, r3, #16
 800b642:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6919      	ldr	r1, [r3, #16]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	431a      	orrs	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6959      	ldr	r1, [r3, #20]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	4b27      	ldr	r3, [pc, #156]	@ (800b704 <HAL_LTDC_Init+0x19c>)
 800b666:	400b      	ands	r3, r1
 800b668:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66e:	041b      	lsls	r3, r3, #16
 800b670:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6959      	ldr	r1, [r3, #20]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	430a      	orrs	r2, r1
 800b686:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b68e:	021b      	lsls	r3, r3, #8
 800b690:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b698:	041b      	lsls	r3, r3, #16
 800b69a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800b6aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f042 0206 	orr.w	r2, r2, #6
 800b6d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699a      	ldr	r2, [r3, #24]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0201 	orr.w	r2, r2, #1
 800b6e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	f000f800 	.word	0xf000f800

0800b708 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b716:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b71e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f003 0304 	and.w	r3, r3, #4
 800b726:	2b00      	cmp	r3, #0
 800b728:	d023      	beq.n	800b772 <HAL_LTDC_IRQHandler+0x6a>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01e      	beq.n	800b772 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0204 	bic.w	r2, r2, #4
 800b742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2204      	movs	r2, #4
 800b74a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b752:	f043 0201 	orr.w	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2204      	movs	r2, #4
 800b760:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f86f 	bl	800b850 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d023      	beq.n	800b7c4 <HAL_LTDC_IRQHandler+0xbc>
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d01e      	beq.n	800b7c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0202 	bic.w	r2, r2, #2
 800b794:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2202      	movs	r2, #2
 800b79c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7a4:	f043 0202 	orr.w	r2, r3, #2
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2204      	movs	r2, #4
 800b7b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f846 	bl	800b850 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d01b      	beq.n	800b806 <HAL_LTDC_IRQHandler+0xfe>
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d016      	beq.n	800b806 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0201 	bic.w	r2, r2, #1
 800b7e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f82f 	bl	800b864 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f003 0308 	and.w	r3, r3, #8
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d01b      	beq.n	800b848 <HAL_LTDC_IRQHandler+0x140>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f003 0308 	and.w	r3, r3, #8
 800b816:	2b00      	cmp	r3, #0
 800b818:	d016      	beq.n	800b848 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0208 	bic.w	r2, r2, #8
 800b828:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2208      	movs	r2, #8
 800b830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f818 	bl	800b878 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b848:	bf00      	nop
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b88c:	b5b0      	push	{r4, r5, r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d101      	bne.n	800b8a6 <HAL_LTDC_ConfigLayer+0x1a>
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	e02c      	b.n	800b900 <HAL_LTDC_ConfigLayer+0x74>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2134      	movs	r1, #52	@ 0x34
 800b8bc:	fb01 f303 	mul.w	r3, r1, r3
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	461d      	mov	r5, r3
 800b8cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	68b9      	ldr	r1, [r7, #8]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 f811 	bl	800b908 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bdb0      	pop	{r4, r5, r7, pc}

0800b908 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b908:	b480      	push	{r7}
 800b90a:	b089      	sub	sp, #36	@ 0x24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	0c1b      	lsrs	r3, r3, #16
 800b920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b924:	4413      	add	r3, r2
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	01db      	lsls	r3, r3, #7
 800b934:	4413      	add	r3, r2
 800b936:	3384      	adds	r3, #132	@ 0x84
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	4611      	mov	r1, r2
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	01d2      	lsls	r2, r2, #7
 800b944:	440a      	add	r2, r1
 800b946:	3284      	adds	r2, #132	@ 0x84
 800b948:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800b94c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	0c1b      	lsrs	r3, r3, #16
 800b95a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b95e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b960:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4619      	mov	r1, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	01db      	lsls	r3, r3, #7
 800b96c:	440b      	add	r3, r1
 800b96e:	3384      	adds	r3, #132	@ 0x84
 800b970:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b976:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b986:	4413      	add	r3, r2
 800b988:	041b      	lsls	r3, r3, #16
 800b98a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	01db      	lsls	r3, r3, #7
 800b996:	4413      	add	r3, r2
 800b998:	3384      	adds	r3, #132	@ 0x84
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	6812      	ldr	r2, [r2, #0]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	01d2      	lsls	r2, r2, #7
 800b9a6:	440a      	add	r2, r1
 800b9a8:	3284      	adds	r2, #132	@ 0x84
 800b9aa:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800b9ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b9be:	4413      	add	r3, r2
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	01db      	lsls	r3, r3, #7
 800b9cc:	440b      	add	r3, r1
 800b9ce:	3384      	adds	r3, #132	@ 0x84
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	01db      	lsls	r3, r3, #7
 800b9e2:	4413      	add	r3, r2
 800b9e4:	3384      	adds	r3, #132	@ 0x84
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	6812      	ldr	r2, [r2, #0]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	01d2      	lsls	r2, r2, #7
 800b9f2:	440a      	add	r2, r1
 800b9f4:	3284      	adds	r2, #132	@ 0x84
 800b9f6:	f023 0307 	bic.w	r3, r3, #7
 800b9fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	461a      	mov	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	01db      	lsls	r3, r3, #7
 800ba06:	4413      	add	r3, r2
 800ba08:	3384      	adds	r3, #132	@ 0x84
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ba18:	021b      	lsls	r3, r3, #8
 800ba1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ba22:	041b      	lsls	r3, r3, #16
 800ba24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	061b      	lsls	r3, r3, #24
 800ba2c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba34:	461a      	mov	r2, r3
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	431a      	orrs	r2, r3
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4619      	mov	r1, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	01db      	lsls	r3, r3, #7
 800ba48:	440b      	add	r3, r1
 800ba4a:	3384      	adds	r3, #132	@ 0x84
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	01db      	lsls	r3, r3, #7
 800ba5e:	4413      	add	r3, r2
 800ba60:	3384      	adds	r3, #132	@ 0x84
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	01d2      	lsls	r2, r2, #7
 800ba6e:	440a      	add	r2, r1
 800ba70:	3284      	adds	r2, #132	@ 0x84
 800ba72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ba76:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	01db      	lsls	r3, r3, #7
 800ba82:	4413      	add	r3, r2
 800ba84:	3384      	adds	r3, #132	@ 0x84
 800ba86:	461a      	mov	r2, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	01db      	lsls	r3, r3, #7
 800ba98:	4413      	add	r3, r2
 800ba9a:	3384      	adds	r3, #132	@ 0x84
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	4611      	mov	r1, r2
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	01d2      	lsls	r2, r2, #7
 800baa8:	440a      	add	r2, r1
 800baaa:	3284      	adds	r2, #132	@ 0x84
 800baac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800bab0:	f023 0307 	bic.w	r3, r3, #7
 800bab4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	69da      	ldr	r2, [r3, #28]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	68f9      	ldr	r1, [r7, #12]
 800bac0:	6809      	ldr	r1, [r1, #0]
 800bac2:	4608      	mov	r0, r1
 800bac4:	6879      	ldr	r1, [r7, #4]
 800bac6:	01c9      	lsls	r1, r1, #7
 800bac8:	4401      	add	r1, r0
 800baca:	3184      	adds	r1, #132	@ 0x84
 800bacc:	4313      	orrs	r3, r2
 800bace:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	01db      	lsls	r3, r3, #7
 800bada:	4413      	add	r3, r2
 800badc:	3384      	adds	r3, #132	@ 0x84
 800bade:	461a      	mov	r2, r3
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d102      	bne.n	800baf4 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800baee:	2304      	movs	r3, #4
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e01b      	b.n	800bb2c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d102      	bne.n	800bb02 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800bafc:	2303      	movs	r3, #3
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	e014      	b.n	800bb2c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d00b      	beq.n	800bb22 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d007      	beq.n	800bb22 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d003      	beq.n	800bb22 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bb1e:	2b07      	cmp	r3, #7
 800bb20:	d102      	bne.n	800bb28 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800bb22:	2302      	movs	r3, #2
 800bb24:	61fb      	str	r3, [r7, #28]
 800bb26:	e001      	b.n	800bb2c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	461a      	mov	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	01db      	lsls	r3, r3, #7
 800bb36:	4413      	add	r3, r2
 800bb38:	3384      	adds	r3, #132	@ 0x84
 800bb3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	4611      	mov	r1, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	01d2      	lsls	r2, r2, #7
 800bb46:	440a      	add	r2, r1
 800bb48:	3284      	adds	r2, #132	@ 0x84
 800bb4a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800bb4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	fb02 f303 	mul.w	r3, r2, r3
 800bb5a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	6859      	ldr	r1, [r3, #4]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	1acb      	subs	r3, r1, r3
 800bb66:	69f9      	ldr	r1, [r7, #28]
 800bb68:	fb01 f303 	mul.w	r3, r1, r3
 800bb6c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800bb6e:	68f9      	ldr	r1, [r7, #12]
 800bb70:	6809      	ldr	r1, [r1, #0]
 800bb72:	4608      	mov	r0, r1
 800bb74:	6879      	ldr	r1, [r7, #4]
 800bb76:	01c9      	lsls	r1, r1, #7
 800bb78:	4401      	add	r1, r0
 800bb7a:	3184      	adds	r1, #132	@ 0x84
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	01db      	lsls	r3, r3, #7
 800bb8a:	4413      	add	r3, r2
 800bb8c:	3384      	adds	r3, #132	@ 0x84
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	6812      	ldr	r2, [r2, #0]
 800bb94:	4611      	mov	r1, r2
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	01d2      	lsls	r2, r2, #7
 800bb9a:	440a      	add	r2, r1
 800bb9c:	3284      	adds	r2, #132	@ 0x84
 800bb9e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bba2:	f023 0307 	bic.w	r3, r3, #7
 800bba6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	01db      	lsls	r3, r3, #7
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3384      	adds	r3, #132	@ 0x84
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	01db      	lsls	r3, r3, #7
 800bbc8:	4413      	add	r3, r2
 800bbca:	3384      	adds	r3, #132	@ 0x84
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	6812      	ldr	r2, [r2, #0]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	01d2      	lsls	r2, r2, #7
 800bbd8:	440a      	add	r2, r1
 800bbda:	3284      	adds	r2, #132	@ 0x84
 800bbdc:	f043 0301 	orr.w	r3, r3, #1
 800bbe0:	6013      	str	r3, [r2, #0]
}
 800bbe2:	bf00      	nop
 800bbe4:	3724      	adds	r7, #36	@ 0x24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
	...

0800bbf0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bbf4:	4b05      	ldr	r3, [pc, #20]	@ (800bc0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf8:	4a04      	ldr	r2, [pc, #16]	@ (800bc0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800bc00:	bf00      	nop
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	46020800 	.word	0x46020800

0800bc10 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800bc18:	4b39      	ldr	r3, [pc, #228]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bc20:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d10b      	bne.n	800bc42 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc30:	d905      	bls.n	800bc3e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bc32:	4b33      	ldr	r3, [pc, #204]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	4a32      	ldr	r2, [pc, #200]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc3c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e057      	b.n	800bcf2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc48:	d90a      	bls.n	800bc60 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800bc4a:	4b2d      	ldr	r3, [pc, #180]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	4a2a      	ldr	r2, [pc, #168]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc5c:	60d3      	str	r3, [r2, #12]
 800bc5e:	e007      	b.n	800bc70 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800bc60:	4b27      	ldr	r3, [pc, #156]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800bc68:	4925      	ldr	r1, [pc, #148]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bc70:	4b24      	ldr	r3, [pc, #144]	@ (800bd04 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a24      	ldr	r2, [pc, #144]	@ (800bd08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bc76:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7a:	099b      	lsrs	r3, r3, #6
 800bc7c:	2232      	movs	r2, #50	@ 0x32
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
 800bc82:	4a21      	ldr	r2, [pc, #132]	@ (800bd08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bc84:	fba2 2303 	umull	r2, r3, r2, r3
 800bc88:	099b      	lsrs	r3, r3, #6
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bc8e:	e002      	b.n	800bc96 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bc96:	4b1a      	ldr	r3, [pc, #104]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1f3      	bne.n	800bc90 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d01b      	beq.n	800bce6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bcae:	4b15      	ldr	r3, [pc, #84]	@ (800bd04 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a15      	ldr	r2, [pc, #84]	@ (800bd08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bcb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb8:	099b      	lsrs	r3, r3, #6
 800bcba:	2232      	movs	r2, #50	@ 0x32
 800bcbc:	fb02 f303 	mul.w	r3, r2, r3
 800bcc0:	4a11      	ldr	r2, [pc, #68]	@ (800bd08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bcc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc6:	099b      	lsrs	r3, r3, #6
 800bcc8:	3301      	adds	r3, #1
 800bcca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800bccc:	e002      	b.n	800bcd4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bcd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d102      	bne.n	800bce6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1f3      	bne.n	800bcce <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e000      	b.n	800bcf2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	46020800 	.word	0x46020800
 800bd04:	2000018c 	.word	0x2000018c
 800bd08:	10624dd3 	.word	0x10624dd3

0800bd0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800bd10:	4b04      	ldr	r3, [pc, #16]	@ (800bd24 <HAL_PWREx_GetVoltageRange+0x18>)
 800bd12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	46020800 	.word	0x46020800

0800bd28 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bd30:	4b22      	ldr	r3, [pc, #136]	@ (800bdbc <HAL_PWREx_ConfigSupply+0x94>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a22      	ldr	r2, [pc, #136]	@ (800bdc0 <HAL_PWREx_ConfigSupply+0x98>)
 800bd36:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3a:	099b      	lsrs	r3, r3, #6
 800bd3c:	2232      	movs	r2, #50	@ 0x32
 800bd3e:	fb02 f303 	mul.w	r3, r2, r3
 800bd42:	4a1f      	ldr	r2, [pc, #124]	@ (800bdc0 <HAL_PWREx_ConfigSupply+0x98>)
 800bd44:	fba2 2303 	umull	r2, r3, r2, r3
 800bd48:	099b      	lsrs	r3, r3, #6
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d113      	bne.n	800bd7c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800bd54:	4b1b      	ldr	r3, [pc, #108]	@ (800bdc4 <HAL_PWREx_ConfigSupply+0x9c>)
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	4a1a      	ldr	r2, [pc, #104]	@ (800bdc4 <HAL_PWREx_ConfigSupply+0x9c>)
 800bd5a:	f023 0302 	bic.w	r3, r3, #2
 800bd5e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800bd60:	e002      	b.n	800bd68 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800bd68:	4b16      	ldr	r3, [pc, #88]	@ (800bdc4 <HAL_PWREx_ConfigSupply+0x9c>)
 800bd6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd6c:	f003 0302 	and.w	r3, r3, #2
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d116      	bne.n	800bda2 <HAL_PWREx_ConfigSupply+0x7a>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1f3      	bne.n	800bd62 <HAL_PWREx_ConfigSupply+0x3a>
 800bd7a:	e012      	b.n	800bda2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800bd7c:	4b11      	ldr	r3, [pc, #68]	@ (800bdc4 <HAL_PWREx_ConfigSupply+0x9c>)
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	4a10      	ldr	r2, [pc, #64]	@ (800bdc4 <HAL_PWREx_ConfigSupply+0x9c>)
 800bd82:	f043 0302 	orr.w	r3, r3, #2
 800bd86:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800bd88:	e002      	b.n	800bd90 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800bd90:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc4 <HAL_PWREx_ConfigSupply+0x9c>)
 800bd92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd94:	f003 0302 	and.w	r3, r3, #2
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d102      	bne.n	800bda2 <HAL_PWREx_ConfigSupply+0x7a>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1f3      	bne.n	800bd8a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e000      	b.n	800bdae <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	2000018c 	.word	0x2000018c
 800bdc0:	10624dd3 	.word	0x10624dd3
 800bdc4:	46020800 	.word	0x46020800

0800bdc8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800bdcc:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	4a04      	ldr	r2, [pc, #16]	@ (800bde4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800bdd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bdd6:	6113      	str	r3, [r2, #16]
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	46020800 	.word	0x46020800

0800bde8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800bde8:	b480      	push	{r7}
 800bdea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800bdec:	4b05      	ldr	r3, [pc, #20]	@ (800be04 <HAL_PWREx_EnableVddA+0x1c>)
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	4a04      	ldr	r2, [pc, #16]	@ (800be04 <HAL_PWREx_EnableVddA+0x1c>)
 800bdf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bdf6:	6113      	str	r3, [r2, #16]
}
 800bdf8:	bf00      	nop
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	46020800 	.word	0x46020800

0800be08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08e      	sub	sp, #56	@ 0x38
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800be10:	2300      	movs	r3, #0
 800be12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	f000 bec8 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800be22:	4b99      	ldr	r3, [pc, #612]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800be24:	69db      	ldr	r3, [r3, #28]
 800be26:	f003 030c 	and.w	r3, r3, #12
 800be2a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be2c:	4b96      	ldr	r3, [pc, #600]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800be2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be30:	f003 0303 	and.w	r3, r3, #3
 800be34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f003 0310 	and.w	r3, r3, #16
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 816c 	beq.w	800c11c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800be44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be46:	2b00      	cmp	r3, #0
 800be48:	d007      	beq.n	800be5a <HAL_RCC_OscConfig+0x52>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	2b0c      	cmp	r3, #12
 800be4e:	f040 80de 	bne.w	800c00e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800be52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be54:	2b01      	cmp	r3, #1
 800be56:	f040 80da 	bne.w	800c00e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	f000 bea5 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be6c:	4b86      	ldr	r3, [pc, #536]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d004      	beq.n	800be82 <HAL_RCC_OscConfig+0x7a>
 800be78:	4b83      	ldr	r3, [pc, #524]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800be80:	e005      	b.n	800be8e <HAL_RCC_OscConfig+0x86>
 800be82:	4b81      	ldr	r3, [pc, #516]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800be84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be88:	041b      	lsls	r3, r3, #16
 800be8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800be8e:	4293      	cmp	r3, r2
 800be90:	d255      	bcs.n	800bf3e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9c:	4618      	mov	r0, r3
 800be9e:	f001 f9d9 	bl	800d254 <RCC_SetFlashLatencyFromMSIRange>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	f000 be82 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800beae:	4b76      	ldr	r3, [pc, #472]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	4a75      	ldr	r2, [pc, #468]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800beb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800beb8:	6093      	str	r3, [r2, #8]
 800beba:	4b73      	ldr	r3, [pc, #460]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec6:	4970      	ldr	r1, [pc, #448]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bec8:	4313      	orrs	r3, r2
 800beca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bed4:	d309      	bcc.n	800beea <HAL_RCC_OscConfig+0xe2>
 800bed6:	4b6c      	ldr	r3, [pc, #432]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	f023 021f 	bic.w	r2, r3, #31
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	4969      	ldr	r1, [pc, #420]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60cb      	str	r3, [r1, #12]
 800bee8:	e07e      	b.n	800bfe8 <HAL_RCC_OscConfig+0x1e0>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	da0a      	bge.n	800bf08 <HAL_RCC_OscConfig+0x100>
 800bef2:	4b65      	ldr	r3, [pc, #404]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	015b      	lsls	r3, r3, #5
 800bf00:	4961      	ldr	r1, [pc, #388]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60cb      	str	r3, [r1, #12]
 800bf06:	e06f      	b.n	800bfe8 <HAL_RCC_OscConfig+0x1e0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf10:	d30a      	bcc.n	800bf28 <HAL_RCC_OscConfig+0x120>
 800bf12:	4b5d      	ldr	r3, [pc, #372]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	029b      	lsls	r3, r3, #10
 800bf20:	4959      	ldr	r1, [pc, #356]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	60cb      	str	r3, [r1, #12]
 800bf26:	e05f      	b.n	800bfe8 <HAL_RCC_OscConfig+0x1e0>
 800bf28:	4b57      	ldr	r3, [pc, #348]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	03db      	lsls	r3, r3, #15
 800bf36:	4954      	ldr	r1, [pc, #336]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60cb      	str	r3, [r1, #12]
 800bf3c:	e054      	b.n	800bfe8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bf3e:	4b52      	ldr	r3, [pc, #328]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	4a51      	ldr	r2, [pc, #324]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf48:	6093      	str	r3, [r2, #8]
 800bf4a:	4b4f      	ldr	r3, [pc, #316]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf56:	494c      	ldr	r1, [pc, #304]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf60:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bf64:	d309      	bcc.n	800bf7a <HAL_RCC_OscConfig+0x172>
 800bf66:	4b48      	ldr	r3, [pc, #288]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	f023 021f 	bic.w	r2, r3, #31
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	4945      	ldr	r1, [pc, #276]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	60cb      	str	r3, [r1, #12]
 800bf78:	e028      	b.n	800bfcc <HAL_RCC_OscConfig+0x1c4>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	da0a      	bge.n	800bf98 <HAL_RCC_OscConfig+0x190>
 800bf82:	4b41      	ldr	r3, [pc, #260]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	015b      	lsls	r3, r3, #5
 800bf90:	493d      	ldr	r1, [pc, #244]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60cb      	str	r3, [r1, #12]
 800bf96:	e019      	b.n	800bfcc <HAL_RCC_OscConfig+0x1c4>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfa0:	d30a      	bcc.n	800bfb8 <HAL_RCC_OscConfig+0x1b0>
 800bfa2:	4b39      	ldr	r3, [pc, #228]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	029b      	lsls	r3, r3, #10
 800bfb0:	4935      	ldr	r1, [pc, #212]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	60cb      	str	r3, [r1, #12]
 800bfb6:	e009      	b.n	800bfcc <HAL_RCC_OscConfig+0x1c4>
 800bfb8:	4b33      	ldr	r3, [pc, #204]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a1b      	ldr	r3, [r3, #32]
 800bfc4:	03db      	lsls	r3, r3, #15
 800bfc6:	4930      	ldr	r1, [pc, #192]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 f93c 	bl	800d254 <RCC_SetFlashLatencyFromMSIRange>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d002      	beq.n	800bfe8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	f000 bde5 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800bfe8:	f001 f8de 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bfec:	4b27      	ldr	r3, [pc, #156]	@ (800c08c <HAL_RCC_OscConfig+0x284>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7f9 fcf7 	bl	80059e4 <HAL_InitTick>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800bffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 808a 	beq.w	800c11a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c00a:	f000 bdd2 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d066      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c016:	4b1c      	ldr	r3, [pc, #112]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a1b      	ldr	r2, [pc, #108]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c01c:	f043 0301 	orr.w	r3, r3, #1
 800c020:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c022:	f7f9 fd69 	bl	8005af8 <HAL_GetTick>
 800c026:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c028:	e009      	b.n	800c03e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c02a:	f7f9 fd65 	bl	8005af8 <HAL_GetTick>
 800c02e:	4602      	mov	r2, r0
 800c030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	2b02      	cmp	r3, #2
 800c036:	d902      	bls.n	800c03e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	f000 bdba 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c03e:	4b12      	ldr	r3, [pc, #72]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0304 	and.w	r3, r3, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0ef      	beq.n	800c02a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c04a:	4b0f      	ldr	r3, [pc, #60]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	4a0e      	ldr	r2, [pc, #56]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c050:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c054:	6093      	str	r3, [r2, #8]
 800c056:	4b0c      	ldr	r3, [pc, #48]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c062:	4909      	ldr	r1, [pc, #36]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c064:	4313      	orrs	r3, r2
 800c066:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c06c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c070:	d30e      	bcc.n	800c090 <HAL_RCC_OscConfig+0x288>
 800c072:	4b05      	ldr	r3, [pc, #20]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f023 021f 	bic.w	r2, r3, #31
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	4902      	ldr	r1, [pc, #8]	@ (800c088 <HAL_RCC_OscConfig+0x280>)
 800c080:	4313      	orrs	r3, r2
 800c082:	60cb      	str	r3, [r1, #12]
 800c084:	e04a      	b.n	800c11c <HAL_RCC_OscConfig+0x314>
 800c086:	bf00      	nop
 800c088:	46020c00 	.word	0x46020c00
 800c08c:	200001a0 	.word	0x200001a0
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	da0a      	bge.n	800c0ae <HAL_RCC_OscConfig+0x2a6>
 800c098:	4b98      	ldr	r3, [pc, #608]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	015b      	lsls	r3, r3, #5
 800c0a6:	4995      	ldr	r1, [pc, #596]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	60cb      	str	r3, [r1, #12]
 800c0ac:	e036      	b.n	800c11c <HAL_RCC_OscConfig+0x314>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b6:	d30a      	bcc.n	800c0ce <HAL_RCC_OscConfig+0x2c6>
 800c0b8:	4b90      	ldr	r3, [pc, #576]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	029b      	lsls	r3, r3, #10
 800c0c6:	498d      	ldr	r1, [pc, #564]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	60cb      	str	r3, [r1, #12]
 800c0cc:	e026      	b.n	800c11c <HAL_RCC_OscConfig+0x314>
 800c0ce:	4b8b      	ldr	r3, [pc, #556]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	03db      	lsls	r3, r3, #15
 800c0dc:	4987      	ldr	r1, [pc, #540]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60cb      	str	r3, [r1, #12]
 800c0e2:	e01b      	b.n	800c11c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c0e4:	4b85      	ldr	r3, [pc, #532]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a84      	ldr	r2, [pc, #528]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c0f0:	f7f9 fd02 	bl	8005af8 <HAL_GetTick>
 800c0f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c0f6:	e009      	b.n	800c10c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0f8:	f7f9 fcfe 	bl	8005af8 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b02      	cmp	r3, #2
 800c104:	d902      	bls.n	800c10c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	f000 bd53 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c10c:	4b7b      	ldr	r3, [pc, #492]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0304 	and.w	r3, r3, #4
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1ef      	bne.n	800c0f8 <HAL_RCC_OscConfig+0x2f0>
 800c118:	e000      	b.n	800c11c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c11a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 808b 	beq.w	800c240 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12c:	2b08      	cmp	r3, #8
 800c12e:	d005      	beq.n	800c13c <HAL_RCC_OscConfig+0x334>
 800c130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c132:	2b0c      	cmp	r3, #12
 800c134:	d109      	bne.n	800c14a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d106      	bne.n	800c14a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d17d      	bne.n	800c240 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	f000 bd34 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c152:	d106      	bne.n	800c162 <HAL_RCC_OscConfig+0x35a>
 800c154:	4b69      	ldr	r3, [pc, #420]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a68      	ldr	r2, [pc, #416]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c15a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	e041      	b.n	800c1e6 <HAL_RCC_OscConfig+0x3de>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c16a:	d112      	bne.n	800c192 <HAL_RCC_OscConfig+0x38a>
 800c16c:	4b63      	ldr	r3, [pc, #396]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a62      	ldr	r2, [pc, #392]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c172:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	4b60      	ldr	r3, [pc, #384]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a5f      	ldr	r2, [pc, #380]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c17e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	4b5d      	ldr	r3, [pc, #372]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a5c      	ldr	r2, [pc, #368]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c18a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	e029      	b.n	800c1e6 <HAL_RCC_OscConfig+0x3de>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800c19a:	d112      	bne.n	800c1c2 <HAL_RCC_OscConfig+0x3ba>
 800c19c:	4b57      	ldr	r3, [pc, #348]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a56      	ldr	r2, [pc, #344]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	4b54      	ldr	r3, [pc, #336]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a53      	ldr	r2, [pc, #332]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	4b51      	ldr	r3, [pc, #324]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a50      	ldr	r2, [pc, #320]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	e011      	b.n	800c1e6 <HAL_RCC_OscConfig+0x3de>
 800c1c2:	4b4e      	ldr	r3, [pc, #312]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a4d      	ldr	r2, [pc, #308]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4b4b      	ldr	r3, [pc, #300]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a4a      	ldr	r2, [pc, #296]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	4b48      	ldr	r3, [pc, #288]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a47      	ldr	r2, [pc, #284]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c1e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c1e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d014      	beq.n	800c218 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c1ee:	f7f9 fc83 	bl	8005af8 <HAL_GetTick>
 800c1f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c1f4:	e009      	b.n	800c20a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1f6:	f7f9 fc7f 	bl	8005af8 <HAL_GetTick>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	2b64      	cmp	r3, #100	@ 0x64
 800c202:	d902      	bls.n	800c20a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c204:	2303      	movs	r3, #3
 800c206:	f000 bcd4 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c20a:	4b3c      	ldr	r3, [pc, #240]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0ef      	beq.n	800c1f6 <HAL_RCC_OscConfig+0x3ee>
 800c216:	e013      	b.n	800c240 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c218:	f7f9 fc6e 	bl	8005af8 <HAL_GetTick>
 800c21c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c21e:	e009      	b.n	800c234 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c220:	f7f9 fc6a 	bl	8005af8 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b64      	cmp	r3, #100	@ 0x64
 800c22c:	d902      	bls.n	800c234 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	f000 bcbf 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c234:	4b31      	ldr	r3, [pc, #196]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1ef      	bne.n	800c220 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0302 	and.w	r3, r3, #2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d05f      	beq.n	800c30c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24e:	2b04      	cmp	r3, #4
 800c250:	d005      	beq.n	800c25e <HAL_RCC_OscConfig+0x456>
 800c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c254:	2b0c      	cmp	r3, #12
 800c256:	d114      	bne.n	800c282 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d111      	bne.n	800c282 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d102      	bne.n	800c26c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	f000 bca3 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c26c:	4b23      	ldr	r3, [pc, #140]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	4920      	ldr	r1, [pc, #128]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c27c:	4313      	orrs	r3, r2
 800c27e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c280:	e044      	b.n	800c30c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d024      	beq.n	800c2d4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c28a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a1b      	ldr	r2, [pc, #108]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c294:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c296:	f7f9 fc2f 	bl	8005af8 <HAL_GetTick>
 800c29a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c29c:	e009      	b.n	800c2b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c29e:	f7f9 fc2b 	bl	8005af8 <HAL_GetTick>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d902      	bls.n	800c2b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	f000 bc80 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2b2:	4b12      	ldr	r3, [pc, #72]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d0ef      	beq.n	800c29e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c2be:	4b0f      	ldr	r3, [pc, #60]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	041b      	lsls	r3, r3, #16
 800c2cc:	490b      	ldr	r1, [pc, #44]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	610b      	str	r3, [r1, #16]
 800c2d2:	e01b      	b.n	800c30c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c2d4:	4b09      	ldr	r3, [pc, #36]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a08      	ldr	r2, [pc, #32]	@ (800c2fc <HAL_RCC_OscConfig+0x4f4>)
 800c2da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c2e0:	f7f9 fc0a 	bl	8005af8 <HAL_GetTick>
 800c2e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c2e6:	e00b      	b.n	800c300 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2e8:	f7f9 fc06 	bl	8005af8 <HAL_GetTick>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d904      	bls.n	800c300 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	f000 bc5b 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
 800c2fc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c300:	4baf      	ldr	r3, [pc, #700]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1ed      	bne.n	800c2e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0308 	and.w	r3, r3, #8
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 80c8 	beq.w	800c4aa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c31a:	2300      	movs	r3, #0
 800c31c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c320:	4ba7      	ldr	r3, [pc, #668]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c326:	f003 0304 	and.w	r3, r3, #4
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d111      	bne.n	800c352 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c32e:	4ba4      	ldr	r3, [pc, #656]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c334:	4aa2      	ldr	r2, [pc, #648]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c336:	f043 0304 	orr.w	r3, r3, #4
 800c33a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c33e:	4ba0      	ldr	r3, [pc, #640]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c34c:	2301      	movs	r3, #1
 800c34e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c352:	4b9c      	ldr	r3, [pc, #624]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d119      	bne.n	800c392 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c35e:	4b99      	ldr	r3, [pc, #612]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c362:	4a98      	ldr	r2, [pc, #608]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c364:	f043 0301 	orr.w	r3, r3, #1
 800c368:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c36a:	f7f9 fbc5 	bl	8005af8 <HAL_GetTick>
 800c36e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c370:	e009      	b.n	800c386 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c372:	f7f9 fbc1 	bl	8005af8 <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d902      	bls.n	800c386 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c380:	2303      	movs	r3, #3
 800c382:	f000 bc16 	b.w	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c386:	4b8f      	ldr	r3, [pc, #572]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0ef      	beq.n	800c372 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d05f      	beq.n	800c45a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c39a:	4b89      	ldr	r3, [pc, #548]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c39c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c3a0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d037      	beq.n	800c420 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c3b0:	6a3b      	ldr	r3, [r7, #32]
 800c3b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d006      	beq.n	800c3c8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e3f4      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
 800c3ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01b      	beq.n	800c40a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c3d2:	4b7b      	ldr	r3, [pc, #492]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c3d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c3d8:	4a79      	ldr	r2, [pc, #484]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c3da:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800c3de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800c3e2:	f7f9 fb89 	bl	8005af8 <HAL_GetTick>
 800c3e6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c3e8:	e008      	b.n	800c3fc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3ea:	f7f9 fb85 	bl	8005af8 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	2b05      	cmp	r3, #5
 800c3f6:	d901      	bls.n	800c3fc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e3da      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c3fc:	4b70      	ldr	r3, [pc, #448]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c3fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c402:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1ef      	bne.n	800c3ea <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c40a:	4b6d      	ldr	r3, [pc, #436]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c40c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c410:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	4969      	ldr	r1, [pc, #420]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c420:	4b67      	ldr	r3, [pc, #412]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c426:	4a66      	ldr	r2, [pc, #408]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c428:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c42c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800c430:	f7f9 fb62 	bl	8005af8 <HAL_GetTick>
 800c434:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c436:	e008      	b.n	800c44a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c438:	f7f9 fb5e 	bl	8005af8 <HAL_GetTick>
 800c43c:	4602      	mov	r2, r0
 800c43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	2b05      	cmp	r3, #5
 800c444:	d901      	bls.n	800c44a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e3b3      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c44a:	4b5d      	ldr	r3, [pc, #372]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c44c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d0ef      	beq.n	800c438 <HAL_RCC_OscConfig+0x630>
 800c458:	e01b      	b.n	800c492 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c45a:	4b59      	ldr	r3, [pc, #356]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c45c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c460:	4a57      	ldr	r2, [pc, #348]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c462:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800c466:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800c46a:	f7f9 fb45 	bl	8005af8 <HAL_GetTick>
 800c46e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c470:	e008      	b.n	800c484 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c472:	f7f9 fb41 	bl	8005af8 <HAL_GetTick>
 800c476:	4602      	mov	r2, r0
 800c478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	2b05      	cmp	r3, #5
 800c47e:	d901      	bls.n	800c484 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	e396      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c484:	4b4e      	ldr	r3, [pc, #312]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c48a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1ef      	bne.n	800c472 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c492:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c496:	2b01      	cmp	r3, #1
 800c498:	d107      	bne.n	800c4aa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c49a:	4b49      	ldr	r3, [pc, #292]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c49c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4a0:	4a47      	ldr	r2, [pc, #284]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c4a2:	f023 0304 	bic.w	r3, r3, #4
 800c4a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0304 	and.w	r3, r3, #4
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 8111 	beq.w	800c6da <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c4be:	4b40      	ldr	r3, [pc, #256]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d111      	bne.n	800c4f0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4cc:	4b3c      	ldr	r3, [pc, #240]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c4ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4d2:	4a3b      	ldr	r2, [pc, #236]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c4d4:	f043 0304 	orr.w	r3, r3, #4
 800c4d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c4dc:	4b38      	ldr	r3, [pc, #224]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c4de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4e2:	f003 0304 	and.w	r3, r3, #4
 800c4e6:	613b      	str	r3, [r7, #16]
 800c4e8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c4f0:	4b34      	ldr	r3, [pc, #208]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d118      	bne.n	800c52e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c4fc:	4b31      	ldr	r3, [pc, #196]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c500:	4a30      	ldr	r2, [pc, #192]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c502:	f043 0301 	orr.w	r3, r3, #1
 800c506:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c508:	f7f9 faf6 	bl	8005af8 <HAL_GetTick>
 800c50c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c50e:	e008      	b.n	800c522 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c510:	f7f9 faf2 	bl	8005af8 <HAL_GetTick>
 800c514:	4602      	mov	r2, r0
 800c516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d901      	bls.n	800c522 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e347      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c522:	4b28      	ldr	r3, [pc, #160]	@ (800c5c4 <HAL_RCC_OscConfig+0x7bc>)
 800c524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0f0      	beq.n	800c510 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	2b00      	cmp	r3, #0
 800c538:	d01f      	beq.n	800c57a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f003 0304 	and.w	r3, r3, #4
 800c542:	2b00      	cmp	r3, #0
 800c544:	d010      	beq.n	800c568 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c546:	4b1e      	ldr	r3, [pc, #120]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c54c:	4a1c      	ldr	r2, [pc, #112]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c54e:	f043 0304 	orr.w	r3, r3, #4
 800c552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c556:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c55c:	4a18      	ldr	r2, [pc, #96]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c55e:	f043 0301 	orr.w	r3, r3, #1
 800c562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c566:	e018      	b.n	800c59a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c568:	4b15      	ldr	r3, [pc, #84]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c56a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c56e:	4a14      	ldr	r2, [pc, #80]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c570:	f043 0301 	orr.w	r3, r3, #1
 800c574:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c578:	e00f      	b.n	800c59a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c57a:	4b11      	ldr	r3, [pc, #68]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c57c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c580:	4a0f      	ldr	r2, [pc, #60]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c582:	f023 0301 	bic.w	r3, r3, #1
 800c586:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c58a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c58c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c590:	4a0b      	ldr	r2, [pc, #44]	@ (800c5c0 <HAL_RCC_OscConfig+0x7b8>)
 800c592:	f023 0304 	bic.w	r3, r3, #4
 800c596:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d057      	beq.n	800c652 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c5a2:	f7f9 faa9 	bl	8005af8 <HAL_GetTick>
 800c5a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5a8:	e00e      	b.n	800c5c8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5aa:	f7f9 faa5 	bl	8005af8 <HAL_GetTick>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	1ad3      	subs	r3, r2, r3
 800c5b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d905      	bls.n	800c5c8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e2f8      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
 800c5c0:	46020c00 	.word	0x46020c00
 800c5c4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5c8:	4b9c      	ldr	r3, [pc, #624]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c5ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5ce:	f003 0302 	and.w	r3, r3, #2
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0e9      	beq.n	800c5aa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d01b      	beq.n	800c61a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c5e2:	4b96      	ldr	r3, [pc, #600]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c5e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5e8:	4a94      	ldr	r2, [pc, #592]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c5ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c5f2:	e00a      	b.n	800c60a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5f4:	f7f9 fa80 	bl	8005af8 <HAL_GetTick>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c602:	4293      	cmp	r3, r2
 800c604:	d901      	bls.n	800c60a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e2d3      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c60a:	4b8c      	ldr	r3, [pc, #560]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c60c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c614:	2b00      	cmp	r3, #0
 800c616:	d0ed      	beq.n	800c5f4 <HAL_RCC_OscConfig+0x7ec>
 800c618:	e053      	b.n	800c6c2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c61a:	4b88      	ldr	r3, [pc, #544]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c61c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c620:	4a86      	ldr	r2, [pc, #536]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c626:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c62a:	e00a      	b.n	800c642 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c62c:	f7f9 fa64 	bl	8005af8 <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d901      	bls.n	800c642 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e2b7      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c642:	4b7e      	ldr	r3, [pc, #504]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1ed      	bne.n	800c62c <HAL_RCC_OscConfig+0x824>
 800c650:	e037      	b.n	800c6c2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c652:	f7f9 fa51 	bl	8005af8 <HAL_GetTick>
 800c656:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c658:	e00a      	b.n	800c670 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c65a:	f7f9 fa4d 	bl	8005af8 <HAL_GetTick>
 800c65e:	4602      	mov	r2, r0
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c668:	4293      	cmp	r3, r2
 800c66a:	d901      	bls.n	800c670 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e2a0      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c670:	4b72      	ldr	r3, [pc, #456]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1ed      	bne.n	800c65a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c67e:	4b6f      	ldr	r3, [pc, #444]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01a      	beq.n	800c6c2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c68c:	4b6b      	ldr	r3, [pc, #428]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c68e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c692:	4a6a      	ldr	r2, [pc, #424]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c698:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c69c:	e00a      	b.n	800c6b4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c69e:	f7f9 fa2b 	bl	8005af8 <HAL_GetTick>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d901      	bls.n	800c6b4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e27e      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c6b4:	4b61      	ldr	r3, [pc, #388]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c6b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1ed      	bne.n	800c69e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d107      	bne.n	800c6da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6ca:	4b5c      	ldr	r3, [pc, #368]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c6cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6d0:	4a5a      	ldr	r2, [pc, #360]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c6d2:	f023 0304 	bic.w	r3, r3, #4
 800c6d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0320 	and.w	r3, r3, #32
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d036      	beq.n	800c754 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d019      	beq.n	800c722 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c6ee:	4b53      	ldr	r3, [pc, #332]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a52      	ldr	r2, [pc, #328]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c6f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c6f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c6fa:	f7f9 f9fd 	bl	8005af8 <HAL_GetTick>
 800c6fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c700:	e008      	b.n	800c714 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c702:	f7f9 f9f9 	bl	8005af8 <HAL_GetTick>
 800c706:	4602      	mov	r2, r0
 800c708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d901      	bls.n	800c714 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c710:	2303      	movs	r3, #3
 800c712:	e24e      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c714:	4b49      	ldr	r3, [pc, #292]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d0f0      	beq.n	800c702 <HAL_RCC_OscConfig+0x8fa>
 800c720:	e018      	b.n	800c754 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c722:	4b46      	ldr	r3, [pc, #280]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a45      	ldr	r2, [pc, #276]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c72c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c72e:	f7f9 f9e3 	bl	8005af8 <HAL_GetTick>
 800c732:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c734:	e008      	b.n	800c748 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c736:	f7f9 f9df 	bl	8005af8 <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d901      	bls.n	800c748 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e234      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c748:	4b3c      	ldr	r3, [pc, #240]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1f0      	bne.n	800c736 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d036      	beq.n	800c7ce <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c764:	2b00      	cmp	r3, #0
 800c766:	d019      	beq.n	800c79c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c768:	4b34      	ldr	r3, [pc, #208]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a33      	ldr	r2, [pc, #204]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c76e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c772:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c774:	f7f9 f9c0 	bl	8005af8 <HAL_GetTick>
 800c778:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c77a:	e008      	b.n	800c78e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c77c:	f7f9 f9bc 	bl	8005af8 <HAL_GetTick>
 800c780:	4602      	mov	r2, r0
 800c782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	2b02      	cmp	r3, #2
 800c788:	d901      	bls.n	800c78e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e211      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c78e:	4b2b      	ldr	r3, [pc, #172]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d0f0      	beq.n	800c77c <HAL_RCC_OscConfig+0x974>
 800c79a:	e018      	b.n	800c7ce <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c79c:	4b27      	ldr	r3, [pc, #156]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a26      	ldr	r2, [pc, #152]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c7a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c7a8:	f7f9 f9a6 	bl	8005af8 <HAL_GetTick>
 800c7ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c7ae:	e008      	b.n	800c7c2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c7b0:	f7f9 f9a2 	bl	8005af8 <HAL_GetTick>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d901      	bls.n	800c7c2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e1f7      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c7c2:	4b1e      	ldr	r3, [pc, #120]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1f0      	bne.n	800c7b0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d07f      	beq.n	800c8da <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d062      	beq.n	800c8a8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c7e2:	4b16      	ldr	r3, [pc, #88]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	4a15      	ldr	r2, [pc, #84]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c7e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c7ec:	6093      	str	r3, [r2, #8]
 800c7ee:	4b13      	ldr	r3, [pc, #76]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7fa:	4910      	ldr	r1, [pc, #64]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c804:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c808:	d309      	bcc.n	800c81e <HAL_RCC_OscConfig+0xa16>
 800c80a:	4b0c      	ldr	r3, [pc, #48]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f023 021f 	bic.w	r2, r3, #31
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a1b      	ldr	r3, [r3, #32]
 800c816:	4909      	ldr	r1, [pc, #36]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c818:	4313      	orrs	r3, r2
 800c81a:	60cb      	str	r3, [r1, #12]
 800c81c:	e02a      	b.n	800c874 <HAL_RCC_OscConfig+0xa6c>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c822:	2b00      	cmp	r3, #0
 800c824:	da0c      	bge.n	800c840 <HAL_RCC_OscConfig+0xa38>
 800c826:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	015b      	lsls	r3, r3, #5
 800c834:	4901      	ldr	r1, [pc, #4]	@ (800c83c <HAL_RCC_OscConfig+0xa34>)
 800c836:	4313      	orrs	r3, r2
 800c838:	60cb      	str	r3, [r1, #12]
 800c83a:	e01b      	b.n	800c874 <HAL_RCC_OscConfig+0xa6c>
 800c83c:	46020c00 	.word	0x46020c00
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c848:	d30a      	bcc.n	800c860 <HAL_RCC_OscConfig+0xa58>
 800c84a:	4ba1      	ldr	r3, [pc, #644]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	029b      	lsls	r3, r3, #10
 800c858:	499d      	ldr	r1, [pc, #628]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c85a:	4313      	orrs	r3, r2
 800c85c:	60cb      	str	r3, [r1, #12]
 800c85e:	e009      	b.n	800c874 <HAL_RCC_OscConfig+0xa6c>
 800c860:	4b9b      	ldr	r3, [pc, #620]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	03db      	lsls	r3, r3, #15
 800c86e:	4998      	ldr	r1, [pc, #608]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c870:	4313      	orrs	r3, r2
 800c872:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c874:	4b96      	ldr	r3, [pc, #600]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a95      	ldr	r2, [pc, #596]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c87a:	f043 0310 	orr.w	r3, r3, #16
 800c87e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c880:	f7f9 f93a 	bl	8005af8 <HAL_GetTick>
 800c884:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c886:	e008      	b.n	800c89a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c888:	f7f9 f936 	bl	8005af8 <HAL_GetTick>
 800c88c:	4602      	mov	r2, r0
 800c88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	2b02      	cmp	r3, #2
 800c894:	d901      	bls.n	800c89a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e18b      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c89a:	4b8d      	ldr	r3, [pc, #564]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0f0      	beq.n	800c888 <HAL_RCC_OscConfig+0xa80>
 800c8a6:	e018      	b.n	800c8da <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c8a8:	4b89      	ldr	r3, [pc, #548]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a88      	ldr	r2, [pc, #544]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c8ae:	f023 0310 	bic.w	r3, r3, #16
 800c8b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c8b4:	f7f9 f920 	bl	8005af8 <HAL_GetTick>
 800c8b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c8ba:	e008      	b.n	800c8ce <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c8bc:	f7f9 f91c 	bl	8005af8 <HAL_GetTick>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d901      	bls.n	800c8ce <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e171      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c8ce:	4b80      	ldr	r3, [pc, #512]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 0320 	and.w	r3, r3, #32
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1f0      	bne.n	800c8bc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f000 8166 	beq.w	800cbb0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8ea:	4b79      	ldr	r3, [pc, #484]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c8ec:	69db      	ldr	r3, [r3, #28]
 800c8ee:	f003 030c 	and.w	r3, r3, #12
 800c8f2:	2b0c      	cmp	r3, #12
 800c8f4:	f000 80f2 	beq.w	800cadc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	f040 80c5 	bne.w	800ca8c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c902:	4b73      	ldr	r3, [pc, #460]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a72      	ldr	r2, [pc, #456]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c90c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c90e:	f7f9 f8f3 	bl	8005af8 <HAL_GetTick>
 800c912:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c914:	e008      	b.n	800c928 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c916:	f7f9 f8ef 	bl	8005af8 <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	d901      	bls.n	800c928 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e144      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c928:	4b69      	ldr	r3, [pc, #420]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1f0      	bne.n	800c916 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c934:	4b66      	ldr	r3, [pc, #408]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c93a:	f003 0304 	and.w	r3, r3, #4
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d111      	bne.n	800c966 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c942:	4b63      	ldr	r3, [pc, #396]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c948:	4a61      	ldr	r2, [pc, #388]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c94a:	f043 0304 	orr.w	r3, r3, #4
 800c94e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c952:	4b5f      	ldr	r3, [pc, #380]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c958:	f003 0304 	and.w	r3, r3, #4
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c960:	2301      	movs	r3, #1
 800c962:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c966:	4b5b      	ldr	r3, [pc, #364]	@ (800cad4 <HAL_RCC_OscConfig+0xccc>)
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c96e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c972:	d102      	bne.n	800c97a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800c974:	2301      	movs	r3, #1
 800c976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c97a:	4b56      	ldr	r3, [pc, #344]	@ (800cad4 <HAL_RCC_OscConfig+0xccc>)
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	4a55      	ldr	r2, [pc, #340]	@ (800cad4 <HAL_RCC_OscConfig+0xccc>)
 800c980:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c984:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c986:	4b52      	ldr	r3, [pc, #328]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c98e:	f023 0303 	bic.w	r3, r3, #3
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c99a:	3a01      	subs	r2, #1
 800c99c:	0212      	lsls	r2, r2, #8
 800c99e:	4311      	orrs	r1, r2
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c9a4:	430a      	orrs	r2, r1
 800c9a6:	494a      	ldr	r1, [pc, #296]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	628b      	str	r3, [r1, #40]	@ 0x28
 800c9ac:	4b48      	ldr	r3, [pc, #288]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c9ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9b0:	4b49      	ldr	r3, [pc, #292]	@ (800cad8 <HAL_RCC_OscConfig+0xcd0>)
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c9b8:	3a01      	subs	r2, #1
 800c9ba:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c9c2:	3a01      	subs	r2, #1
 800c9c4:	0252      	lsls	r2, r2, #9
 800c9c6:	b292      	uxth	r2, r2
 800c9c8:	4311      	orrs	r1, r2
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c9ce:	3a01      	subs	r2, #1
 800c9d0:	0412      	lsls	r2, r2, #16
 800c9d2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c9d6:	4311      	orrs	r1, r2
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c9dc:	3a01      	subs	r2, #1
 800c9de:	0612      	lsls	r2, r2, #24
 800c9e0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c9e4:	430a      	orrs	r2, r1
 800c9e6:	493a      	ldr	r1, [pc, #232]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c9ec:	4b38      	ldr	r3, [pc, #224]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f0:	4a37      	ldr	r2, [pc, #220]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c9f2:	f023 0310 	bic.w	r3, r3, #16
 800c9f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9fc:	4a34      	ldr	r2, [pc, #208]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800c9fe:	00db      	lsls	r3, r3, #3
 800ca00:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ca02:	4b33      	ldr	r3, [pc, #204]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca06:	4a32      	ldr	r2, [pc, #200]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca08:	f043 0310 	orr.w	r3, r3, #16
 800ca0c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800ca0e:	4b30      	ldr	r3, [pc, #192]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca12:	f023 020c 	bic.w	r2, r3, #12
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca1a:	492d      	ldr	r1, [pc, #180]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800ca20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d105      	bne.n	800ca34 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ca28:	4b2a      	ldr	r3, [pc, #168]	@ (800cad4 <HAL_RCC_OscConfig+0xccc>)
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	4a29      	ldr	r2, [pc, #164]	@ (800cad4 <HAL_RCC_OscConfig+0xccc>)
 800ca2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca32:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800ca34:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d107      	bne.n	800ca4c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800ca3c:	4b24      	ldr	r3, [pc, #144]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca42:	4a23      	ldr	r2, [pc, #140]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca44:	f023 0304 	bic.w	r3, r3, #4
 800ca48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800ca4c:	4b20      	ldr	r3, [pc, #128]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a1f      	ldr	r2, [pc, #124]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ca56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ca58:	f7f9 f84e 	bl	8005af8 <HAL_GetTick>
 800ca5c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ca5e:	e008      	b.n	800ca72 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca60:	f7f9 f84a 	bl	8005af8 <HAL_GetTick>
 800ca64:	4602      	mov	r2, r0
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d901      	bls.n	800ca72 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800ca6e:	2303      	movs	r3, #3
 800ca70:	e09f      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ca72:	4b17      	ldr	r3, [pc, #92]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0f0      	beq.n	800ca60 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ca7e:	4b14      	ldr	r3, [pc, #80]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca82:	4a13      	ldr	r2, [pc, #76]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca88:	6293      	str	r3, [r2, #40]	@ 0x28
 800ca8a:	e091      	b.n	800cbb0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ca8c:	4b10      	ldr	r3, [pc, #64]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a0f      	ldr	r2, [pc, #60]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800ca92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ca96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ca98:	f7f9 f82e 	bl	8005af8 <HAL_GetTick>
 800ca9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800caa0:	f7f9 f82a 	bl	8005af8 <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e07f      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cab2:	4b07      	ldr	r3, [pc, #28]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1f0      	bne.n	800caa0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800cabe:	4b04      	ldr	r3, [pc, #16]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800cac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac2:	4a03      	ldr	r2, [pc, #12]	@ (800cad0 <HAL_RCC_OscConfig+0xcc8>)
 800cac4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800cac8:	f023 0303 	bic.w	r3, r3, #3
 800cacc:	6293      	str	r3, [r2, #40]	@ 0x28
 800cace:	e06f      	b.n	800cbb0 <HAL_RCC_OscConfig+0xda8>
 800cad0:	46020c00 	.word	0x46020c00
 800cad4:	46020800 	.word	0x46020800
 800cad8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800cadc:	4b37      	ldr	r3, [pc, #220]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cae2:	4b36      	ldr	r3, [pc, #216]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cae6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caec:	2b01      	cmp	r3, #1
 800caee:	d039      	beq.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	f003 0203 	and.w	r2, r3, #3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d132      	bne.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	0a1b      	lsrs	r3, r3, #8
 800cb02:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb0a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d129      	bne.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d122      	bne.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb28:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d11a      	bne.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	0a5b      	lsrs	r3, r3, #9
 800cb32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d111      	bne.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	0c1b      	lsrs	r3, r3, #16
 800cb44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb4c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d108      	bne.n	800cb64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	0e1b      	lsrs	r3, r3, #24
 800cb56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb5e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d001      	beq.n	800cb68 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e024      	b.n	800cbb2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cb68:	4b14      	ldr	r3, [pc, #80]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb6c:	08db      	lsrs	r3, r3, #3
 800cb6e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d01a      	beq.n	800cbb0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cb7a:	4b10      	ldr	r3, [pc, #64]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7e:	4a0f      	ldr	r2, [pc, #60]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cb80:	f023 0310 	bic.w	r3, r3, #16
 800cb84:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb86:	f7f8 ffb7 	bl	8005af8 <HAL_GetTick>
 800cb8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800cb8c:	bf00      	nop
 800cb8e:	f7f8 ffb3 	bl	8005af8 <HAL_GetTick>
 800cb92:	4602      	mov	r2, r0
 800cb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d0f9      	beq.n	800cb8e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb9e:	4a07      	ldr	r2, [pc, #28]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cba0:	00db      	lsls	r3, r3, #3
 800cba2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba8:	4a04      	ldr	r2, [pc, #16]	@ (800cbbc <HAL_RCC_OscConfig+0xdb4>)
 800cbaa:	f043 0310 	orr.w	r3, r3, #16
 800cbae:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3738      	adds	r7, #56	@ 0x38
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	46020c00 	.word	0x46020c00

0800cbc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e1d9      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbd4:	4b9b      	ldr	r3, [pc, #620]	@ (800ce44 <HAL_RCC_ClockConfig+0x284>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 030f 	and.w	r3, r3, #15
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d910      	bls.n	800cc04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbe2:	4b98      	ldr	r3, [pc, #608]	@ (800ce44 <HAL_RCC_ClockConfig+0x284>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f023 020f 	bic.w	r2, r3, #15
 800cbea:	4996      	ldr	r1, [pc, #600]	@ (800ce44 <HAL_RCC_ClockConfig+0x284>)
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbf2:	4b94      	ldr	r3, [pc, #592]	@ (800ce44 <HAL_RCC_ClockConfig+0x284>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 030f 	and.w	r3, r3, #15
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d001      	beq.n	800cc04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e1c1      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0310 	and.w	r3, r3, #16
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d010      	beq.n	800cc32 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	695a      	ldr	r2, [r3, #20]
 800cc14:	4b8c      	ldr	r3, [pc, #560]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d908      	bls.n	800cc32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800cc20:	4b89      	ldr	r3, [pc, #548]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	4986      	ldr	r1, [pc, #536]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0308 	and.w	r3, r3, #8
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d012      	beq.n	800cc64 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	691a      	ldr	r2, [r3, #16]
 800cc42:	4b81      	ldr	r3, [pc, #516]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	091b      	lsrs	r3, r3, #4
 800cc48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d909      	bls.n	800cc64 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cc50:	4b7d      	ldr	r3, [pc, #500]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc52:	6a1b      	ldr	r3, [r3, #32]
 800cc54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	497a      	ldr	r1, [pc, #488]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc60:	4313      	orrs	r3, r2
 800cc62:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d010      	beq.n	800cc92 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	68da      	ldr	r2, [r3, #12]
 800cc74:	4b74      	ldr	r3, [pc, #464]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc76:	6a1b      	ldr	r3, [r3, #32]
 800cc78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d908      	bls.n	800cc92 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cc80:	4b71      	ldr	r3, [pc, #452]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc82:	6a1b      	ldr	r3, [r3, #32]
 800cc84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	496e      	ldr	r1, [pc, #440]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 0302 	and.w	r3, r3, #2
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d010      	beq.n	800ccc0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689a      	ldr	r2, [r3, #8]
 800cca2:	4b69      	ldr	r3, [pc, #420]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cca4:	6a1b      	ldr	r3, [r3, #32]
 800cca6:	f003 030f 	and.w	r3, r3, #15
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d908      	bls.n	800ccc0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ccae:	4b66      	ldr	r3, [pc, #408]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	f023 020f 	bic.w	r2, r3, #15
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	4963      	ldr	r1, [pc, #396]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 80d2 	beq.w	800ce72 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d143      	bne.n	800cd62 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccda:	4b5b      	ldr	r3, [pc, #364]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ccdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d110      	bne.n	800cd0a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800cce8:	4b57      	ldr	r3, [pc, #348]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ccea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccee:	4a56      	ldr	r2, [pc, #344]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ccf0:	f043 0304 	orr.w	r3, r3, #4
 800ccf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ccf8:	4b53      	ldr	r3, [pc, #332]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ccfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccfe:	f003 0304 	and.w	r3, r3, #4
 800cd02:	60bb      	str	r3, [r7, #8]
 800cd04:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800cd06:	2301      	movs	r3, #1
 800cd08:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800cd0a:	f7f8 fef5 	bl	8005af8 <HAL_GetTick>
 800cd0e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800cd10:	4b4e      	ldr	r3, [pc, #312]	@ (800ce4c <HAL_RCC_ClockConfig+0x28c>)
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00f      	beq.n	800cd3c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800cd1c:	e008      	b.n	800cd30 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800cd1e:	f7f8 feeb 	bl	8005af8 <HAL_GetTick>
 800cd22:	4602      	mov	r2, r0
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	1ad3      	subs	r3, r2, r3
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d901      	bls.n	800cd30 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e12b      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800cd30:	4b46      	ldr	r3, [pc, #280]	@ (800ce4c <HAL_RCC_ClockConfig+0x28c>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d0f0      	beq.n	800cd1e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d107      	bne.n	800cd52 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800cd42:	4b41      	ldr	r3, [pc, #260]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cd44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd48:	4a3f      	ldr	r2, [pc, #252]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cd4a:	f023 0304 	bic.w	r3, r3, #4
 800cd4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cd52:	4b3d      	ldr	r3, [pc, #244]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d121      	bne.n	800cda2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e112      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d107      	bne.n	800cd7a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd6a:	4b37      	ldr	r3, [pc, #220]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d115      	bne.n	800cda2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e106      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d107      	bne.n	800cd92 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800cd82:	4b31      	ldr	r3, [pc, #196]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 0304 	and.w	r3, r3, #4
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e0fa      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd92:	4b2d      	ldr	r3, [pc, #180]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e0f2      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800cda2:	4b29      	ldr	r3, [pc, #164]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cda4:	69db      	ldr	r3, [r3, #28]
 800cda6:	f023 0203 	bic.w	r2, r3, #3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	4926      	ldr	r1, [pc, #152]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800cdb4:	f7f8 fea0 	bl	8005af8 <HAL_GetTick>
 800cdb8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d112      	bne.n	800cde8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cdc2:	e00a      	b.n	800cdda <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cdc4:	f7f8 fe98 	bl	8005af8 <HAL_GetTick>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d901      	bls.n	800cdda <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e0d6      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cdda:	4b1b      	ldr	r3, [pc, #108]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	f003 030c 	and.w	r3, r3, #12
 800cde2:	2b0c      	cmp	r3, #12
 800cde4:	d1ee      	bne.n	800cdc4 <HAL_RCC_ClockConfig+0x204>
 800cde6:	e044      	b.n	800ce72 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d112      	bne.n	800ce16 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cdf0:	e00a      	b.n	800ce08 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cdf2:	f7f8 fe81 	bl	8005af8 <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d901      	bls.n	800ce08 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e0bf      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce08:	4b0f      	ldr	r3, [pc, #60]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	f003 030c 	and.w	r3, r3, #12
 800ce10:	2b08      	cmp	r3, #8
 800ce12:	d1ee      	bne.n	800cdf2 <HAL_RCC_ClockConfig+0x232>
 800ce14:	e02d      	b.n	800ce72 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d123      	bne.n	800ce66 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ce1e:	e00a      	b.n	800ce36 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce20:	f7f8 fe6a 	bl	8005af8 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d901      	bls.n	800ce36 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800ce32:	2303      	movs	r3, #3
 800ce34:	e0a8      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ce36:	4b04      	ldr	r3, [pc, #16]	@ (800ce48 <HAL_RCC_ClockConfig+0x288>)
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	f003 030c 	and.w	r3, r3, #12
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1ee      	bne.n	800ce20 <HAL_RCC_ClockConfig+0x260>
 800ce42:	e016      	b.n	800ce72 <HAL_RCC_ClockConfig+0x2b2>
 800ce44:	40022000 	.word	0x40022000
 800ce48:	46020c00 	.word	0x46020c00
 800ce4c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce50:	f7f8 fe52 	bl	8005af8 <HAL_GetTick>
 800ce54:	4602      	mov	r2, r0
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d901      	bls.n	800ce66 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e090      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ce66:	4b4a      	ldr	r3, [pc, #296]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	f003 030c 	and.w	r3, r3, #12
 800ce6e:	2b04      	cmp	r3, #4
 800ce70:	d1ee      	bne.n	800ce50 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0302 	and.w	r3, r3, #2
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d010      	beq.n	800cea0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	689a      	ldr	r2, [r3, #8]
 800ce82:	4b43      	ldr	r3, [pc, #268]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	f003 030f 	and.w	r3, r3, #15
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d208      	bcs.n	800cea0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ce8e:	4b40      	ldr	r3, [pc, #256]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	f023 020f 	bic.w	r2, r3, #15
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	493d      	ldr	r1, [pc, #244]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cea0:	4b3c      	ldr	r3, [pc, #240]	@ (800cf94 <HAL_RCC_ClockConfig+0x3d4>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 030f 	and.w	r3, r3, #15
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d210      	bcs.n	800ced0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ceae:	4b39      	ldr	r3, [pc, #228]	@ (800cf94 <HAL_RCC_ClockConfig+0x3d4>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f023 020f 	bic.w	r2, r3, #15
 800ceb6:	4937      	ldr	r1, [pc, #220]	@ (800cf94 <HAL_RCC_ClockConfig+0x3d4>)
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cebe:	4b35      	ldr	r3, [pc, #212]	@ (800cf94 <HAL_RCC_ClockConfig+0x3d4>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 030f 	and.w	r3, r3, #15
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d001      	beq.n	800ced0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	e05b      	b.n	800cf88 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0304 	and.w	r3, r3, #4
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d010      	beq.n	800cefe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68da      	ldr	r2, [r3, #12]
 800cee0:	4b2b      	ldr	r3, [pc, #172]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d208      	bcs.n	800cefe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ceec:	4b28      	ldr	r3, [pc, #160]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800ceee:	6a1b      	ldr	r3, [r3, #32]
 800cef0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	4925      	ldr	r1, [pc, #148]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0308 	and.w	r3, r3, #8
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d012      	beq.n	800cf30 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	691a      	ldr	r2, [r3, #16]
 800cf0e:	4b20      	ldr	r3, [pc, #128]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf10:	6a1b      	ldr	r3, [r3, #32]
 800cf12:	091b      	lsrs	r3, r3, #4
 800cf14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d209      	bcs.n	800cf30 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cf1c:	4b1c      	ldr	r3, [pc, #112]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf1e:	6a1b      	ldr	r3, [r3, #32]
 800cf20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	011b      	lsls	r3, r3, #4
 800cf2a:	4919      	ldr	r1, [pc, #100]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 0310 	and.w	r3, r3, #16
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d010      	beq.n	800cf5e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	695a      	ldr	r2, [r3, #20]
 800cf40:	4b13      	ldr	r3, [pc, #76]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d208      	bcs.n	800cf5e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800cf4c:	4b10      	ldr	r3, [pc, #64]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	490d      	ldr	r1, [pc, #52]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cf5e:	f000 f821 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800cf62:	4602      	mov	r2, r0
 800cf64:	4b0a      	ldr	r3, [pc, #40]	@ (800cf90 <HAL_RCC_ClockConfig+0x3d0>)
 800cf66:	6a1b      	ldr	r3, [r3, #32]
 800cf68:	f003 030f 	and.w	r3, r3, #15
 800cf6c:	490a      	ldr	r1, [pc, #40]	@ (800cf98 <HAL_RCC_ClockConfig+0x3d8>)
 800cf6e:	5ccb      	ldrb	r3, [r1, r3]
 800cf70:	fa22 f303 	lsr.w	r3, r2, r3
 800cf74:	4a09      	ldr	r2, [pc, #36]	@ (800cf9c <HAL_RCC_ClockConfig+0x3dc>)
 800cf76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cf78:	4b09      	ldr	r3, [pc, #36]	@ (800cfa0 <HAL_RCC_ClockConfig+0x3e0>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7f8 fd31 	bl	80059e4 <HAL_InitTick>
 800cf82:	4603      	mov	r3, r0
 800cf84:	73fb      	strb	r3, [r7, #15]

  return status;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	46020c00 	.word	0x46020c00
 800cf94:	40022000 	.word	0x40022000
 800cf98:	08017be4 	.word	0x08017be4
 800cf9c:	2000018c 	.word	0x2000018c
 800cfa0:	200001a0 	.word	0x200001a0

0800cfa4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b08b      	sub	sp, #44	@ 0x2c
 800cfa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfb2:	4b78      	ldr	r3, [pc, #480]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	f003 030c 	and.w	r3, r3, #12
 800cfba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cfbc:	4b75      	ldr	r3, [pc, #468]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfc0:	f003 0303 	and.w	r3, r3, #3
 800cfc4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <HAL_RCC_GetSysClockFreq+0x34>
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	2b0c      	cmp	r3, #12
 800cfd0:	d121      	bne.n	800d016 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d11e      	bne.n	800d016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800cfd8:	4b6e      	ldr	r3, [pc, #440]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d107      	bne.n	800cff4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800cfe4:	4b6b      	ldr	r3, [pc, #428]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cfe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfea:	0b1b      	lsrs	r3, r3, #12
 800cfec:	f003 030f 	and.w	r3, r3, #15
 800cff0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cff2:	e005      	b.n	800d000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800cff4:	4b67      	ldr	r3, [pc, #412]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	0f1b      	lsrs	r3, r3, #28
 800cffa:	f003 030f 	and.w	r3, r3, #15
 800cffe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d000:	4a65      	ldr	r2, [pc, #404]	@ (800d198 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800d002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d008:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d110      	bne.n	800d032 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d014:	e00d      	b.n	800d032 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d016:	4b5f      	ldr	r3, [pc, #380]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	f003 030c 	and.w	r3, r3, #12
 800d01e:	2b04      	cmp	r3, #4
 800d020:	d102      	bne.n	800d028 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d022:	4b5e      	ldr	r3, [pc, #376]	@ (800d19c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d024:	623b      	str	r3, [r7, #32]
 800d026:	e004      	b.n	800d032 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	2b08      	cmp	r3, #8
 800d02c:	d101      	bne.n	800d032 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d02e:	4b5b      	ldr	r3, [pc, #364]	@ (800d19c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d030:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2b0c      	cmp	r3, #12
 800d036:	f040 80a5 	bne.w	800d184 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d03a:	4b56      	ldr	r3, [pc, #344]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d03e:	f003 0303 	and.w	r3, r3, #3
 800d042:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d044:	4b53      	ldr	r3, [pc, #332]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d048:	0a1b      	lsrs	r3, r3, #8
 800d04a:	f003 030f 	and.w	r3, r3, #15
 800d04e:	3301      	adds	r3, #1
 800d050:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d052:	4b50      	ldr	r3, [pc, #320]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d056:	091b      	lsrs	r3, r3, #4
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d05e:	4b4d      	ldr	r3, [pc, #308]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d062:	08db      	lsrs	r3, r3, #3
 800d064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	fb02 f303 	mul.w	r3, r2, r3
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d076:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d003      	beq.n	800d088 <HAL_RCC_GetSysClockFreq+0xe4>
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b03      	cmp	r3, #3
 800d084:	d022      	beq.n	800d0cc <HAL_RCC_GetSysClockFreq+0x128>
 800d086:	e043      	b.n	800d110 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	ee07 3a90 	vmov	s15, r3
 800d08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d092:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800d1a0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800d096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09a:	4b3e      	ldr	r3, [pc, #248]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d0aa:	ed97 6a01 	vldr	s12, [r7, #4]
 800d0ae:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800d1a4 <HAL_RCC_GetSysClockFreq+0x200>
 800d0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ca:	e046      	b.n	800d15a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	ee07 3a90 	vmov	s15, r3
 800d0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800d1a0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800d0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0de:	4b2d      	ldr	r3, [pc, #180]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e6:	ee07 3a90 	vmov	s15, r3
 800d0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d0ee:	ed97 6a01 	vldr	s12, [r7, #4]
 800d0f2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800d1a4 <HAL_RCC_GetSysClockFreq+0x200>
 800d0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d102:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d10e:	e024      	b.n	800d15a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d128:	4b1a      	ldr	r3, [pc, #104]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d130:	ee07 3a90 	vmov	s15, r3
 800d134:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d138:	ed97 6a01 	vldr	s12, [r7, #4]
 800d13c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800d1a4 <HAL_RCC_GetSysClockFreq+0x200>
 800d140:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d144:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d148:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d14c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d154:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d158:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d15a:	4b0e      	ldr	r3, [pc, #56]	@ (800d194 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d15e:	0e1b      	lsrs	r3, r3, #24
 800d160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d164:	3301      	adds	r3, #1
 800d166:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d172:	edd7 6a07 	vldr	s13, [r7, #28]
 800d176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d17e:	ee17 3a90 	vmov	r3, s15
 800d182:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800d184:	6a3b      	ldr	r3, [r7, #32]
}
 800d186:	4618      	mov	r0, r3
 800d188:	372c      	adds	r7, #44	@ 0x2c
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	46020c00 	.word	0x46020c00
 800d198:	08017bfc 	.word	0x08017bfc
 800d19c:	00f42400 	.word	0x00f42400
 800d1a0:	4b742400 	.word	0x4b742400
 800d1a4:	46000000 	.word	0x46000000

0800d1a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d1ac:	f7ff fefa 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	4b07      	ldr	r3, [pc, #28]	@ (800d1d0 <HAL_RCC_GetHCLKFreq+0x28>)
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	f003 030f 	and.w	r3, r3, #15
 800d1ba:	4906      	ldr	r1, [pc, #24]	@ (800d1d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800d1bc:	5ccb      	ldrb	r3, [r1, r3]
 800d1be:	fa22 f303 	lsr.w	r3, r2, r3
 800d1c2:	4a05      	ldr	r2, [pc, #20]	@ (800d1d8 <HAL_RCC_GetHCLKFreq+0x30>)
 800d1c4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d1c6:	4b04      	ldr	r3, [pc, #16]	@ (800d1d8 <HAL_RCC_GetHCLKFreq+0x30>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	46020c00 	.word	0x46020c00
 800d1d4:	08017be4 	.word	0x08017be4
 800d1d8:	2000018c 	.word	0x2000018c

0800d1dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d1e0:	f7ff ffe2 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	4b05      	ldr	r3, [pc, #20]	@ (800d1fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	091b      	lsrs	r3, r3, #4
 800d1ec:	f003 0307 	and.w	r3, r3, #7
 800d1f0:	4903      	ldr	r1, [pc, #12]	@ (800d200 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d1f2:	5ccb      	ldrb	r3, [r1, r3]
 800d1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	46020c00 	.word	0x46020c00
 800d200:	08017bf4 	.word	0x08017bf4

0800d204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d208:	f7ff ffce 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
 800d20c:	4602      	mov	r2, r0
 800d20e:	4b05      	ldr	r3, [pc, #20]	@ (800d224 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d210:	6a1b      	ldr	r3, [r3, #32]
 800d212:	0a1b      	lsrs	r3, r3, #8
 800d214:	f003 0307 	and.w	r3, r3, #7
 800d218:	4903      	ldr	r1, [pc, #12]	@ (800d228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d21a:	5ccb      	ldrb	r3, [r1, r3]
 800d21c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d220:	4618      	mov	r0, r3
 800d222:	bd80      	pop	{r7, pc}
 800d224:	46020c00 	.word	0x46020c00
 800d228:	08017bf4 	.word	0x08017bf4

0800d22c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d230:	f7ff ffba 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
 800d234:	4602      	mov	r2, r0
 800d236:	4b05      	ldr	r3, [pc, #20]	@ (800d24c <HAL_RCC_GetPCLK3Freq+0x20>)
 800d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23a:	091b      	lsrs	r3, r3, #4
 800d23c:	f003 0307 	and.w	r3, r3, #7
 800d240:	4903      	ldr	r1, [pc, #12]	@ (800d250 <HAL_RCC_GetPCLK3Freq+0x24>)
 800d242:	5ccb      	ldrb	r3, [r1, r3]
 800d244:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d248:	4618      	mov	r0, r3
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	46020c00 	.word	0x46020c00
 800d250:	08017bf4 	.word	0x08017bf4

0800d254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d25c:	4b3e      	ldr	r3, [pc, #248]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d25e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d262:	f003 0304 	and.w	r3, r3, #4
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d26a:	f7fe fd4f 	bl	800bd0c <HAL_PWREx_GetVoltageRange>
 800d26e:	6178      	str	r0, [r7, #20]
 800d270:	e019      	b.n	800d2a6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d272:	4b39      	ldr	r3, [pc, #228]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d278:	4a37      	ldr	r2, [pc, #220]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d27a:	f043 0304 	orr.w	r3, r3, #4
 800d27e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800d282:	4b35      	ldr	r3, [pc, #212]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d288:	f003 0304 	and.w	r3, r3, #4
 800d28c:	60fb      	str	r3, [r7, #12]
 800d28e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d290:	f7fe fd3c 	bl	800bd0c <HAL_PWREx_GetVoltageRange>
 800d294:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d296:	4b30      	ldr	r3, [pc, #192]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d29c:	4a2e      	ldr	r2, [pc, #184]	@ (800d358 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d29e:	f023 0304 	bic.w	r3, r3, #4
 800d2a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d2ac:	d003      	beq.n	800d2b6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2b4:	d109      	bne.n	800d2ca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2bc:	d202      	bcs.n	800d2c4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d2be:	2301      	movs	r3, #1
 800d2c0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d2c2:	e033      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d2c8:	e030      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2d0:	d208      	bcs.n	800d2e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2d8:	d102      	bne.n	800d2e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d2da:	2303      	movs	r3, #3
 800d2dc:	613b      	str	r3, [r7, #16]
 800d2de:	e025      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e035      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2ea:	d90f      	bls.n	800d30c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d109      	bne.n	800d306 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d2f8:	d902      	bls.n	800d300 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	613b      	str	r3, [r7, #16]
 800d2fe:	e015      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d300:	2301      	movs	r3, #1
 800d302:	613b      	str	r3, [r7, #16]
 800d304:	e012      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d306:	2300      	movs	r3, #0
 800d308:	613b      	str	r3, [r7, #16]
 800d30a:	e00f      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d312:	d109      	bne.n	800d328 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d31a:	d102      	bne.n	800d322 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d31c:	2301      	movs	r3, #1
 800d31e:	613b      	str	r3, [r7, #16]
 800d320:	e004      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d322:	2302      	movs	r3, #2
 800d324:	613b      	str	r3, [r7, #16]
 800d326:	e001      	b.n	800d32c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d328:	2301      	movs	r3, #1
 800d32a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d32c:	4b0b      	ldr	r3, [pc, #44]	@ (800d35c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f023 020f 	bic.w	r2, r3, #15
 800d334:	4909      	ldr	r1, [pc, #36]	@ (800d35c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	4313      	orrs	r3, r2
 800d33a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d33c:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 030f 	and.w	r3, r3, #15
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	429a      	cmp	r2, r3
 800d348:	d001      	beq.n	800d34e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e000      	b.n	800d350 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	46020c00 	.word	0x46020c00
 800d35c:	40022000 	.word	0x40022000

0800d360 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d364:	b0c8      	sub	sp, #288	@ 0x120
 800d366:	af00      	add	r7, sp, #0
 800d368:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d36c:	2300      	movs	r3, #0
 800d36e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d372:	2300      	movs	r3, #0
 800d374:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f002 0401 	and.w	r4, r2, #1
 800d384:	2500      	movs	r5, #0
 800d386:	ea54 0305 	orrs.w	r3, r4, r5
 800d38a:	d00b      	beq.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d38c:	4bd5      	ldr	r3, [pc, #852]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d38e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d392:	f023 0103 	bic.w	r1, r3, #3
 800d396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d39c:	4ad1      	ldr	r2, [pc, #836]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d39e:	430b      	orrs	r3, r1
 800d3a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	f002 0802 	and.w	r8, r2, #2
 800d3b0:	f04f 0900 	mov.w	r9, #0
 800d3b4:	ea58 0309 	orrs.w	r3, r8, r9
 800d3b8:	d00b      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d3ba:	4bca      	ldr	r3, [pc, #808]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3c0:	f023 010c 	bic.w	r1, r3, #12
 800d3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ca:	4ac6      	ldr	r2, [pc, #792]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3cc:	430b      	orrs	r3, r1
 800d3ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d3d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	f002 0a04 	and.w	sl, r2, #4
 800d3de:	f04f 0b00 	mov.w	fp, #0
 800d3e2:	ea5a 030b 	orrs.w	r3, sl, fp
 800d3e6:	d00b      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d3e8:	4bbe      	ldr	r3, [pc, #760]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3ee:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3f8:	4aba      	ldr	r2, [pc, #744]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d3fa:	430b      	orrs	r3, r1
 800d3fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	f002 0308 	and.w	r3, r2, #8
 800d40c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d410:	2300      	movs	r3, #0
 800d412:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d416:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d41a:	460b      	mov	r3, r1
 800d41c:	4313      	orrs	r3, r2
 800d41e:	d00b      	beq.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d420:	4bb0      	ldr	r3, [pc, #704]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d426:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d42a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d42e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d430:	4aac      	ldr	r2, [pc, #688]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d432:	430b      	orrs	r3, r1
 800d434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f002 0310 	and.w	r3, r2, #16
 800d444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d448:	2300      	movs	r3, #0
 800d44a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d44e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d452:	460b      	mov	r3, r1
 800d454:	4313      	orrs	r3, r2
 800d456:	d00b      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d458:	4ba2      	ldr	r3, [pc, #648]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d45a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d45e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d468:	4a9e      	ldr	r2, [pc, #632]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d46a:	430b      	orrs	r3, r1
 800d46c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d47c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d480:	2300      	movs	r3, #0
 800d482:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d486:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4313      	orrs	r3, r2
 800d48e:	d00b      	beq.n	800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800d490:	4b94      	ldr	r3, [pc, #592]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d496:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d49e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4a0:	4a90      	ldr	r2, [pc, #576]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d4a2:	430b      	orrs	r3, r1
 800d4a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b0:	f002 0320 	and.w	r3, r2, #32
 800d4b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4be:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	d00b      	beq.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d4c8:	4b86      	ldr	r3, [pc, #536]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d4ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4ce:	f023 0107 	bic.w	r1, r3, #7
 800d4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d4d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4d8:	4a82      	ldr	r2, [pc, #520]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d4da:	430b      	orrs	r3, r1
 800d4dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d4ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d4f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	d00b      	beq.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d500:	4b78      	ldr	r3, [pc, #480]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d506:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800d50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d50e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d510:	4a74      	ldr	r2, [pc, #464]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d512:	430b      	orrs	r3, r1
 800d514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d528:	2300      	movs	r3, #0
 800d52a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d52e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d532:	460b      	mov	r3, r1
 800d534:	4313      	orrs	r3, r2
 800d536:	d00b      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d538:	4b6a      	ldr	r3, [pc, #424]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d53a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d53e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d548:	4a66      	ldr	r2, [pc, #408]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d54a:	430b      	orrs	r3, r1
 800d54c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800d55c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d560:	2300      	movs	r3, #0
 800d562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d566:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4313      	orrs	r3, r2
 800d56e:	d00b      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d570:	4b5c      	ldr	r3, [pc, #368]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d576:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d57e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d580:	4a58      	ldr	r2, [pc, #352]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d582:	430b      	orrs	r3, r1
 800d584:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d594:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d598:	2300      	movs	r3, #0
 800d59a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d59e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	d00b      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d5a8:	4b4e      	ldr	r3, [pc, #312]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5ae:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800d5b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d5b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5b8:	4a4a      	ldr	r2, [pc, #296]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5ba:	430b      	orrs	r3, r1
 800d5bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800d5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d5cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	d00b      	beq.n	800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800d5e0:	4b40      	ldr	r3, [pc, #256]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5e6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800d5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d5ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5f0:	4a3c      	ldr	r2, [pc, #240]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5f2:	430b      	orrs	r3, r1
 800d5f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800d5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d608:	2300      	movs	r3, #0
 800d60a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d60e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d612:	460b      	mov	r3, r1
 800d614:	4313      	orrs	r3, r2
 800d616:	d00c      	beq.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800d618:	4b32      	ldr	r3, [pc, #200]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d61a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d61e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800d622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d62a:	4a2e      	ldr	r2, [pc, #184]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d62c:	430b      	orrs	r3, r1
 800d62e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800d63e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d642:	2300      	movs	r3, #0
 800d644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d648:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d64c:	460b      	mov	r3, r1
 800d64e:	4313      	orrs	r3, r2
 800d650:	d00c      	beq.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d652:	4b24      	ldr	r3, [pc, #144]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d654:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d658:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800d65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d664:	4a1f      	ldr	r2, [pc, #124]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d666:	430b      	orrs	r3, r1
 800d668:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d674:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d67c:	2300      	movs	r3, #0
 800d67e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d682:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d686:	460b      	mov	r3, r1
 800d688:	4313      	orrs	r3, r2
 800d68a:	d00c      	beq.n	800d6a6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d68c:	4b15      	ldr	r3, [pc, #84]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d68e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d692:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800d696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d69a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d69e:	4a11      	ldr	r2, [pc, #68]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d6bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	d010      	beq.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d6c6:	4b07      	ldr	r3, [pc, #28]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d6cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6d8:	4a02      	ldr	r2, [pc, #8]	@ (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6da:	430b      	orrs	r3, r1
 800d6dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d6e0:	e002      	b.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800d6e2:	bf00      	nop
 800d6e4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d6f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d702:	460b      	mov	r3, r1
 800d704:	4313      	orrs	r3, r2
 800d706:	d04c      	beq.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d70c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d710:	2b80      	cmp	r3, #128	@ 0x80
 800d712:	d02d      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d714:	2b80      	cmp	r3, #128	@ 0x80
 800d716:	d827      	bhi.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d718:	2b60      	cmp	r3, #96	@ 0x60
 800d71a:	d02b      	beq.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d71c:	2b60      	cmp	r3, #96	@ 0x60
 800d71e:	d823      	bhi.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d720:	2b40      	cmp	r3, #64	@ 0x40
 800d722:	d006      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800d724:	2b40      	cmp	r3, #64	@ 0x40
 800d726:	d81f      	bhi.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d009      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d72c:	2b20      	cmp	r3, #32
 800d72e:	d011      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d730:	e01a      	b.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d732:	4bc0      	ldr	r3, [pc, #768]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d736:	4abf      	ldr	r2, [pc, #764]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d73c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d73e:	e01a      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d744:	3308      	adds	r3, #8
 800d746:	4618      	mov	r0, r3
 800d748:	f002 fcd6 	bl	80100f8 <RCCEx_PLL2_Config>
 800d74c:	4603      	mov	r3, r0
 800d74e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d752:	e010      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d758:	332c      	adds	r3, #44	@ 0x2c
 800d75a:	4618      	mov	r0, r3
 800d75c:	f002 fd64 	bl	8010228 <RCCEx_PLL3_Config>
 800d760:	4603      	mov	r3, r0
 800d762:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d766:	e006      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800d76e:	e002      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d770:	bf00      	nop
 800d772:	e000      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d776:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10d      	bne.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d77e:	4bad      	ldr	r3, [pc, #692]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d780:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d784:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800d788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d78c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d790:	4aa8      	ldr	r2, [pc, #672]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d792:	430b      	orrs	r3, r1
 800d794:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d798:	e003      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d79a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d79e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d7a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d7ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7b8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	d053      	beq.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d7c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d7ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7ce:	d033      	beq.n	800d838 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800d7d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7d4:	d82c      	bhi.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d7d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7da:	d02f      	beq.n	800d83c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800d7dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d7e0:	d826      	bhi.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d7e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7e6:	d008      	beq.n	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800d7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7ec:	d820      	bhi.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00a      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7f6:	d011      	beq.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d7f8:	e01a      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d7fa:	4b8e      	ldr	r3, [pc, #568]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7fe:	4a8d      	ldr	r2, [pc, #564]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d804:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d806:	e01a      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d80c:	3308      	adds	r3, #8
 800d80e:	4618      	mov	r0, r3
 800d810:	f002 fc72 	bl	80100f8 <RCCEx_PLL2_Config>
 800d814:	4603      	mov	r3, r0
 800d816:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d81a:	e010      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d820:	332c      	adds	r3, #44	@ 0x2c
 800d822:	4618      	mov	r0, r3
 800d824:	f002 fd00 	bl	8010228 <RCCEx_PLL3_Config>
 800d828:	4603      	mov	r3, r0
 800d82a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d82e:	e006      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800d836:	e002      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d838:	bf00      	nop
 800d83a:	e000      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d83c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d83e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10d      	bne.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d846:	4b7b      	ldr	r3, [pc, #492]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d848:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d84c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800d850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d858:	4a76      	ldr	r2, [pc, #472]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d85a:	430b      	orrs	r3, r1
 800d85c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d860:	e003      	b.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d862:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d866:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d872:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d876:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d87a:	2300      	movs	r3, #0
 800d87c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d880:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d884:	460b      	mov	r3, r1
 800d886:	4313      	orrs	r3, r2
 800d888:	d046      	beq.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d88e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d892:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d896:	d028      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d898:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d89c:	d821      	bhi.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d89e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8a2:	d022      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d8a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8a8:	d81b      	bhi.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d8aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8ae:	d01c      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d8b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8b4:	d815      	bhi.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d8b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8ba:	d008      	beq.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800d8bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8c0:	d80f      	bhi.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d011      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d8c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8ca:	d00e      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d8cc:	e009      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f002 fc0f 	bl	80100f8 <RCCEx_PLL2_Config>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800d8e0:	e004      	b.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800d8e8:	e000      	b.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800d8ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10d      	bne.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d8f4:	4b4f      	ldr	r3, [pc, #316]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d8f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8fa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d8fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d906:	4a4b      	ldr	r2, [pc, #300]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d908:	430b      	orrs	r3, r1
 800d90a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d90e:	e003      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d910:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d914:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d920:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d928:	2300      	movs	r3, #0
 800d92a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d92e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d932:	460b      	mov	r3, r1
 800d934:	4313      	orrs	r3, r2
 800d936:	d03f      	beq.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d93c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d940:	2b04      	cmp	r3, #4
 800d942:	d81e      	bhi.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800d944:	a201      	add	r2, pc, #4	@ (adr r2, 800d94c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800d946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94a:	bf00      	nop
 800d94c:	0800d98b 	.word	0x0800d98b
 800d950:	0800d961 	.word	0x0800d961
 800d954:	0800d96f 	.word	0x0800d96f
 800d958:	0800d98b 	.word	0x0800d98b
 800d95c:	0800d98b 	.word	0x0800d98b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d960:	4b34      	ldr	r3, [pc, #208]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d964:	4a33      	ldr	r2, [pc, #204]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d96a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800d96c:	e00e      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d96e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d972:	332c      	adds	r3, #44	@ 0x2c
 800d974:	4618      	mov	r0, r3
 800d976:	f002 fc57 	bl	8010228 <RCCEx_PLL3_Config>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800d980:	e004      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800d988:	e000      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800d98a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d98c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10d      	bne.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d994:	4b27      	ldr	r3, [pc, #156]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d99a:	f023 0107 	bic.w	r1, r3, #7
 800d99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d9a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d9a6:	4a23      	ldr	r2, [pc, #140]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d9a8:	430b      	orrs	r3, r1
 800d9aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800d9ae:	e003      	b.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9b0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d9b4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d9b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d9c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d9ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	d04c      	beq.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d9d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d9d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d9dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9e0:	d02a      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800d9e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9e6:	d821      	bhi.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d9e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9ec:	d026      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800d9ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9f2:	d81b      	bhi.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d9f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9f8:	d00e      	beq.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800d9fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9fe:	d815      	bhi.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800da00:	2b00      	cmp	r3, #0
 800da02:	d01d      	beq.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800da04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da08:	d110      	bne.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da0a:	4b0a      	ldr	r3, [pc, #40]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da0e:	4a09      	ldr	r2, [pc, #36]	@ (800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da14:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800da16:	e014      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800da1c:	332c      	adds	r3, #44	@ 0x2c
 800da1e:	4618      	mov	r0, r3
 800da20:	f002 fc02 	bl	8010228 <RCCEx_PLL3_Config>
 800da24:	4603      	mov	r3, r0
 800da26:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800da2a:	e00a      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800da32:	e006      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800da34:	46020c00 	.word	0x46020c00
        break;
 800da38:	bf00      	nop
 800da3a:	e002      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800da3c:	bf00      	nop
 800da3e:	e000      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800da40:	bf00      	nop
    }
    if (ret == HAL_OK)
 800da42:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10d      	bne.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800da4a:	4baf      	ldr	r3, [pc, #700]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800da4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da50:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800da54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800da58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da5c:	4aaa      	ldr	r2, [pc, #680]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800da5e:	430b      	orrs	r3, r1
 800da60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800da64:	e003      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800da6a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800da6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800da7a:	673b      	str	r3, [r7, #112]	@ 0x70
 800da7c:	2300      	movs	r3, #0
 800da7e:	677b      	str	r3, [r7, #116]	@ 0x74
 800da80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800da84:	460b      	mov	r3, r1
 800da86:	4313      	orrs	r3, r2
 800da88:	f000 80b5 	beq.w	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da8c:	2300      	movs	r3, #0
 800da8e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da92:	4b9d      	ldr	r3, [pc, #628]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800da94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d113      	bne.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800daa0:	4b99      	ldr	r3, [pc, #612]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800daa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800daa6:	4a98      	ldr	r2, [pc, #608]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800daa8:	f043 0304 	orr.w	r3, r3, #4
 800daac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800dab0:	4b95      	ldr	r3, [pc, #596]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dab6:	f003 0304 	and.w	r3, r3, #4
 800daba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800dabe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800dac2:	2301      	movs	r3, #1
 800dac4:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800dac8:	4b90      	ldr	r3, [pc, #576]	@ (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800daca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dacc:	4a8f      	ldr	r2, [pc, #572]	@ (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800dace:	f043 0301 	orr.w	r3, r3, #1
 800dad2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dad4:	f7f8 f810 	bl	8005af8 <HAL_GetTick>
 800dad8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800dadc:	e00b      	b.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dade:	f7f8 f80b 	bl	8005af8 <HAL_GetTick>
 800dae2:	4602      	mov	r2, r0
 800dae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	2b02      	cmp	r3, #2
 800daec:	d903      	bls.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800daf4:	e005      	b.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800daf6:	4b85      	ldr	r3, [pc, #532]	@ (800dd0c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800daf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0ed      	beq.n	800dade <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800db02:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800db06:	2b00      	cmp	r3, #0
 800db08:	d165      	bne.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800db0a:	4b7f      	ldr	r3, [pc, #508]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800db18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d023      	beq.n	800db68 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800db20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800db24:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800db28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d01b      	beq.n	800db68 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800db30:	4b75      	ldr	r3, [pc, #468]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800db3e:	4b72      	ldr	r3, [pc, #456]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db44:	4a70      	ldr	r2, [pc, #448]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db4e:	4b6e      	ldr	r3, [pc, #440]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db54:	4a6c      	ldr	r2, [pc, #432]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800db5e:	4a6a      	ldr	r2, [pc, #424]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800db68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db6c:	f003 0301 	and.w	r3, r3, #1
 800db70:	2b00      	cmp	r3, #0
 800db72:	d019      	beq.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db74:	f7f7 ffc0 	bl	8005af8 <HAL_GetTick>
 800db78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db7c:	e00d      	b.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db7e:	f7f7 ffbb 	bl	8005af8 <HAL_GetTick>
 800db82:	4602      	mov	r2, r0
 800db84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db88:	1ad2      	subs	r2, r2, r3
 800db8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800db8e:	429a      	cmp	r2, r3
 800db90:	d903      	bls.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800db92:	2303      	movs	r3, #3
 800db94:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800db98:	e006      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db9a:	4b5b      	ldr	r3, [pc, #364]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800db9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dba0:	f003 0302 	and.w	r3, r3, #2
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d0ea      	beq.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800dba8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10d      	bne.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800dbb0:	4b55      	ldr	r3, [pc, #340]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dbb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dbb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dbba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dbbe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800dbc2:	4a51      	ldr	r2, [pc, #324]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dbc4:	430b      	orrs	r3, r1
 800dbc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800dbca:	e008      	b.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dbcc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dbd0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800dbd4:	e003      	b.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbd6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dbda:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dbde:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d107      	bne.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbe6:	4b48      	ldr	r3, [pc, #288]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dbe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dbec:	4a46      	ldr	r2, [pc, #280]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dbee:	f023 0304 	bic.w	r3, r3, #4
 800dbf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800dbf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dc02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc04:	2300      	movs	r3, #0
 800dc06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dc08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	d042      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800dc12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dc16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dc1a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800dc1e:	d022      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800dc20:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800dc24:	d81b      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800dc26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc2a:	d011      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800dc2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc30:	d815      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d019      	beq.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800dc36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc3a:	d110      	bne.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dc40:	3308      	adds	r3, #8
 800dc42:	4618      	mov	r0, r3
 800dc44:	f002 fa58 	bl	80100f8 <RCCEx_PLL2_Config>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800dc4e:	e00d      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc50:	4b2d      	ldr	r3, [pc, #180]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc54:	4a2c      	ldr	r2, [pc, #176]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc5a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800dc5c:	e006      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800dc64:	e002      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800dc66:	bf00      	nop
 800dc68:	e000      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800dc6a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dc6c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10d      	bne.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800dc74:	4b24      	ldr	r3, [pc, #144]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800dc7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dc82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dc86:	4a20      	ldr	r2, [pc, #128]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc88:	430b      	orrs	r3, r1
 800dc8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dc8e:	e003      	b.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc90:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dc94:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dc98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dca4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dca6:	2300      	movs	r3, #0
 800dca8:	667b      	str	r3, [r7, #100]	@ 0x64
 800dcaa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	d031      	beq.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800dcb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dcb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dcbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcc0:	d00b      	beq.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800dcc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcc6:	d804      	bhi.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d008      	beq.n	800dcde <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800dccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcd0:	d007      	beq.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800dcd8:	e004      	b.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800dcda:	bf00      	nop
 800dcdc:	e002      	b.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800dcde:	bf00      	nop
 800dce0:	e000      	b.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800dce2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dce4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d111      	bne.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800dcec:	4b06      	ldr	r3, [pc, #24]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dcee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dcf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dcf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dcfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dcfe:	4a02      	ldr	r2, [pc, #8]	@ (800dd08 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd00:	430b      	orrs	r3, r1
 800dd02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800dd06:	e007      	b.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800dd08:	46020c00 	.word	0x46020c00
 800dd0c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd10:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dd14:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800dd18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dd24:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd26:	2300      	movs	r3, #0
 800dd28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dd2e:	460b      	mov	r3, r1
 800dd30:	4313      	orrs	r3, r2
 800dd32:	d00c      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800dd34:	4bb2      	ldr	r3, [pc, #712]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd3a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800dd3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dd46:	4aae      	ldr	r2, [pc, #696]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800dd4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dd5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd60:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dd64:	460b      	mov	r3, r1
 800dd66:	4313      	orrs	r3, r2
 800dd68:	d019      	beq.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800dd6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dd72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd76:	d105      	bne.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dd78:	4ba1      	ldr	r3, [pc, #644]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd7c:	4aa0      	ldr	r2, [pc, #640]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd82:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800dd84:	4b9e      	ldr	r3, [pc, #632]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd8a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dd8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dd96:	4a9a      	ldr	r2, [pc, #616]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd98:	430b      	orrs	r3, r1
 800dd9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800dd9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ddaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddac:	2300      	movs	r3, #0
 800ddae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	d00c      	beq.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800ddba:	4b91      	ldr	r3, [pc, #580]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ddbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddc0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ddc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ddcc:	4a8c      	ldr	r2, [pc, #560]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ddce:	430b      	orrs	r3, r1
 800ddd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800ddd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800dde0:	643b      	str	r3, [r7, #64]	@ 0x40
 800dde2:	2300      	movs	r3, #0
 800dde4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dde6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ddea:	460b      	mov	r3, r1
 800ddec:	4313      	orrs	r3, r2
 800ddee:	d00c      	beq.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800ddf0:	4b83      	ldr	r3, [pc, #524]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ddf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ddfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800de02:	4a7f      	ldr	r2, [pc, #508]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800de04:	430b      	orrs	r3, r1
 800de06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800de0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de12:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800de16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de18:	2300      	movs	r3, #0
 800de1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800de20:	460b      	mov	r3, r1
 800de22:	4313      	orrs	r3, r2
 800de24:	d00c      	beq.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800de26:	4b76      	ldr	r3, [pc, #472]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800de28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de2c:	f023 0118 	bic.w	r1, r3, #24
 800de30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800de38:	4a71      	ldr	r2, [pc, #452]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800de3a:	430b      	orrs	r3, r1
 800de3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800de40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800de4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800de4e:	2300      	movs	r3, #0
 800de50:	637b      	str	r3, [r7, #52]	@ 0x34
 800de52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800de56:	460b      	mov	r3, r1
 800de58:	4313      	orrs	r3, r2
 800de5a:	d032      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800de5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de68:	d105      	bne.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de6a:	4b65      	ldr	r3, [pc, #404]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800de6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6e:	4a64      	ldr	r2, [pc, #400]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800de70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de74:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800de76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800de82:	d108      	bne.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800de84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de88:	3308      	adds	r3, #8
 800de8a:	4618      	mov	r0, r3
 800de8c:	f002 f934 	bl	80100f8 <RCCEx_PLL2_Config>
 800de90:	4603      	mov	r3, r0
 800de92:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800de96:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10d      	bne.n	800deba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800de9e:	4b58      	ldr	r3, [pc, #352]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dea0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dea4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800deac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800deb0:	4a53      	ldr	r2, [pc, #332]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800deb2:	430b      	orrs	r3, r1
 800deb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800deb8:	e003      	b.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800debe:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800dec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deca:	2100      	movs	r1, #0
 800decc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ded4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ded8:	460b      	mov	r3, r1
 800deda:	4313      	orrs	r3, r2
 800dedc:	d04a      	beq.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800dede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dee2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dee6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800deea:	d01e      	beq.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800deec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800def0:	d825      	bhi.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800def2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800def6:	d00e      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800def8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800defc:	d81f      	bhi.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800defe:	2b00      	cmp	r3, #0
 800df00:	d021      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800df02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800df06:	d11a      	bne.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df08:	4b3d      	ldr	r3, [pc, #244]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0c:	4a3c      	ldr	r2, [pc, #240]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df12:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800df14:	e018      	b.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800df16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df1a:	3308      	adds	r3, #8
 800df1c:	4618      	mov	r0, r3
 800df1e:	f002 f8eb 	bl	80100f8 <RCCEx_PLL2_Config>
 800df22:	4603      	mov	r3, r0
 800df24:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800df28:	e00e      	b.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800df2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df2e:	332c      	adds	r3, #44	@ 0x2c
 800df30:	4618      	mov	r0, r3
 800df32:	f002 f979 	bl	8010228 <RCCEx_PLL3_Config>
 800df36:	4603      	mov	r3, r0
 800df38:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800df3c:	e004      	b.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800df44:	e000      	b.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800df46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df48:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10d      	bne.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800df50:	4b2b      	ldr	r3, [pc, #172]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800df5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800df62:	4927      	ldr	r1, [pc, #156]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df64:	4313      	orrs	r3, r2
 800df66:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800df6a:	e003      	b.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df6c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800df70:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800df74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800df80:	623b      	str	r3, [r7, #32]
 800df82:	2300      	movs	r3, #0
 800df84:	627b      	str	r3, [r7, #36]	@ 0x24
 800df86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800df8a:	460b      	mov	r3, r1
 800df8c:	4313      	orrs	r3, r2
 800df8e:	d03d      	beq.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800df90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df9c:	d00e      	beq.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800df9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dfa2:	d815      	bhi.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d017      	beq.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800dfa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfac:	d110      	bne.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfae:	4b14      	ldr	r3, [pc, #80]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb2:	4a13      	ldr	r2, [pc, #76]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfb8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dfba:	e00e      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dfbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 f898 	bl	80100f8 <RCCEx_PLL2_Config>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dfce:	e004      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800dfd6:	e000      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dfd8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dfda:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d110      	bne.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800dfe2:	4b07      	ldr	r3, [pc, #28]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dfe8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800dfec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dff4:	4902      	ldr	r1, [pc, #8]	@ (800e000 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dff6:	4313      	orrs	r3, r2
 800dff8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800dffc:	e006      	b.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800dffe:	bf00      	nop
 800e000:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e004:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e008:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e014:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e018:	61bb      	str	r3, [r7, #24]
 800e01a:	2300      	movs	r3, #0
 800e01c:	61fb      	str	r3, [r7, #28]
 800e01e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e022:	460b      	mov	r3, r1
 800e024:	4313      	orrs	r3, r2
 800e026:	d00c      	beq.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e028:	4b68      	ldr	r3, [pc, #416]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e02a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e02e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e036:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e03a:	4964      	ldr	r1, [pc, #400]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e03c:	4313      	orrs	r3, r2
 800e03e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	2100      	movs	r1, #0
 800e04c:	6139      	str	r1, [r7, #16]
 800e04e:	f003 0302 	and.w	r3, r3, #2
 800e052:	617b      	str	r3, [r7, #20]
 800e054:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e058:	460b      	mov	r3, r1
 800e05a:	4313      	orrs	r3, r2
 800e05c:	d036      	beq.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800e05e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00c      	beq.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800e06a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e06e:	d113      	bne.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e074:	3308      	adds	r3, #8
 800e076:	4618      	mov	r0, r3
 800e078:	f002 f83e 	bl	80100f8 <RCCEx_PLL2_Config>
 800e07c:	4603      	mov	r3, r0
 800e07e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e082:	e00d      	b.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e088:	332c      	adds	r3, #44	@ 0x2c
 800e08a:	4618      	mov	r0, r3
 800e08c:	f002 f8cc 	bl	8010228 <RCCEx_PLL3_Config>
 800e090:	4603      	mov	r3, r0
 800e092:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e096:	e003      	b.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0a0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10d      	bne.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800e0a8:	4b48      	ldr	r3, [pc, #288]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e0aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e0ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e0ba:	4944      	ldr	r1, [pc, #272]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e0c2:	e003      	b.n	800e0cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e0c8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	60b9      	str	r1, [r7, #8]
 800e0d8:	f003 0304 	and.w	r3, r3, #4
 800e0dc:	60fb      	str	r3, [r7, #12]
 800e0de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	d024      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800e0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d108      	bne.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e0f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0f8:	332c      	adds	r3, #44	@ 0x2c
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 f894 	bl	8010228 <RCCEx_PLL3_Config>
 800e100:	4603      	mov	r3, r0
 800e102:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800e106:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10d      	bne.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800e10e:	4b2f      	ldr	r3, [pc, #188]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e114:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e11c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e120:	492a      	ldr	r1, [pc, #168]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e122:	4313      	orrs	r3, r2
 800e124:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e128:	e003      	b.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e12a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e12e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800e132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13a:	2100      	movs	r1, #0
 800e13c:	6039      	str	r1, [r7, #0]
 800e13e:	f003 0308 	and.w	r3, r3, #8
 800e142:	607b      	str	r3, [r7, #4]
 800e144:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e148:	460b      	mov	r3, r1
 800e14a:	4313      	orrs	r3, r2
 800e14c:	d036      	beq.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800e14e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e152:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e156:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e15a:	d00d      	beq.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800e15c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e160:	d811      	bhi.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e166:	d012      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e16c:	d80b      	bhi.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00d      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e176:	d106      	bne.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e178:	4b14      	ldr	r3, [pc, #80]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17c:	4a13      	ldr	r2, [pc, #76]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e17e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e182:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800e184:	e004      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800e186:	2301      	movs	r3, #1
 800e188:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800e18c:	e000      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800e18e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e190:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10d      	bne.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800e198:	4b0c      	ldr	r3, [pc, #48]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e19a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e19e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e1aa:	4908      	ldr	r1, [pc, #32]	@ (800e1cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800e1b2:	e003      	b.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e1b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e1bc:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1cc:	46020c00 	.word	0x46020c00

0800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b089      	sub	sp, #36	@ 0x24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e1d8:	4ba6      	ldr	r3, [pc, #664]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e1e2:	4ba4      	ldr	r3, [pc, #656]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e6:	f003 0303 	and.w	r3, r3, #3
 800e1ea:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e1ec:	4ba1      	ldr	r3, [pc, #644]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f0:	0a1b      	lsrs	r3, r3, #8
 800e1f2:	f003 030f 	and.w	r3, r3, #15
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e1fa:	4b9e      	ldr	r3, [pc, #632]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e1fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1fe:	091b      	lsrs	r3, r3, #4
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e206:	4b9b      	ldr	r3, [pc, #620]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e20a:	08db      	lsrs	r3, r3, #3
 800e20c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	fb02 f303 	mul.w	r3, r2, r3
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b03      	cmp	r3, #3
 800e226:	d062      	beq.n	800e2ee <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	f200 8081 	bhi.w	800e332 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	2b01      	cmp	r3, #1
 800e234:	d024      	beq.n	800e280 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d17a      	bne.n	800e332 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	ee07 3a90 	vmov	s15, r3
 800e242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e246:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e478 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e24e:	4b89      	ldr	r3, [pc, #548]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e256:	ee07 3a90 	vmov	s15, r3
 800e25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e25e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e262:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e47c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e266:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e26e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e272:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e27a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e27e:	e08f      	b.n	800e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e280:	4b7c      	ldr	r3, [pc, #496]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800e28c:	4b79      	ldr	r3, [pc, #484]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	0f1b      	lsrs	r3, r3, #28
 800e292:	f003 030f 	and.w	r3, r3, #15
 800e296:	e006      	b.n	800e2a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800e298:	4b76      	ldr	r3, [pc, #472]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e29a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e29e:	041b      	lsls	r3, r3, #16
 800e2a0:	0f1b      	lsrs	r3, r3, #28
 800e2a2:	f003 030f 	and.w	r3, r3, #15
 800e2a6:	4a76      	ldr	r2, [pc, #472]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ac:	ee07 3a90 	vmov	s15, r3
 800e2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	ee07 3a90 	vmov	s15, r3
 800e2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	ee07 3a90 	vmov	s15, r3
 800e2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2cc:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2d0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e47c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e2d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e2ec:	e058      	b.n	800e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	ee07 3a90 	vmov	s15, r3
 800e2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2f8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e478 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800e2fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e300:	4b5c      	ldr	r3, [pc, #368]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e308:	ee07 3a90 	vmov	s15, r3
 800e30c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e310:	ed97 6a02 	vldr	s12, [r7, #8]
 800e314:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e47c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e318:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e31c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800e320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e324:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e32c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e330:	e036      	b.n	800e3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e332:	4b50      	ldr	r3, [pc, #320]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d005      	beq.n	800e34a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800e33e:	4b4d      	ldr	r3, [pc, #308]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	0f1b      	lsrs	r3, r3, #28
 800e344:	f003 030f 	and.w	r3, r3, #15
 800e348:	e006      	b.n	800e358 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800e34a:	4b4a      	ldr	r3, [pc, #296]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e34c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e350:	041b      	lsls	r3, r3, #16
 800e352:	0f1b      	lsrs	r3, r3, #28
 800e354:	f003 030f 	and.w	r3, r3, #15
 800e358:	4a49      	ldr	r2, [pc, #292]	@ (800e480 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800e35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e35e:	ee07 3a90 	vmov	s15, r3
 800e362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	ee07 3a90 	vmov	s15, r3
 800e36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	ee07 3a90 	vmov	s15, r3
 800e37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e37e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e382:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e47c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800e386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e38e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e392:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e39a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e39e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e3a0:	4b34      	ldr	r3, [pc, #208]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d017      	beq.n	800e3dc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e3ac:	4b31      	ldr	r3, [pc, #196]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3b0:	0a5b      	lsrs	r3, r3, #9
 800e3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3b6:	ee07 3a90 	vmov	s15, r3
 800e3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e3be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3d2:	ee17 2a90 	vmov	r2, s15
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	e002      	b.n	800e3e2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e3e2:	4b24      	ldr	r3, [pc, #144]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d017      	beq.n	800e41e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e3ee:	4b21      	ldr	r3, [pc, #132]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3f2:	0c1b      	lsrs	r3, r3, #16
 800e3f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3f8:	ee07 3a90 	vmov	s15, r3
 800e3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e404:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e408:	edd7 6a07 	vldr	s13, [r7, #28]
 800e40c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e414:	ee17 2a90 	vmov	r2, s15
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	605a      	str	r2, [r3, #4]
 800e41c:	e002      	b.n	800e424 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e424:	4b13      	ldr	r3, [pc, #76]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d017      	beq.n	800e460 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e430:	4b10      	ldr	r3, [pc, #64]	@ (800e474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800e432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e434:	0e1b      	lsrs	r3, r3, #24
 800e436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e43a:	ee07 3a90 	vmov	s15, r3
 800e43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e446:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e44a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e456:	ee17 2a90 	vmov	r2, s15
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e45e:	e002      	b.n	800e466 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	609a      	str	r2, [r3, #8]
}
 800e466:	bf00      	nop
 800e468:	3724      	adds	r7, #36	@ 0x24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	46020c00 	.word	0x46020c00
 800e478:	4b742400 	.word	0x4b742400
 800e47c:	46000000 	.word	0x46000000
 800e480:	08017bfc 	.word	0x08017bfc

0800e484 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e484:	b480      	push	{r7}
 800e486:	b089      	sub	sp, #36	@ 0x24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e48c:	4ba6      	ldr	r3, [pc, #664]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e494:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e496:	4ba4      	ldr	r3, [pc, #656]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49a:	f003 0303 	and.w	r3, r3, #3
 800e49e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e4a0:	4ba1      	ldr	r3, [pc, #644]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a4:	0a1b      	lsrs	r3, r3, #8
 800e4a6:	f003 030f 	and.w	r3, r3, #15
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e4ae:	4b9e      	ldr	r3, [pc, #632]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	091b      	lsrs	r3, r3, #4
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e4ba:	4b9b      	ldr	r3, [pc, #620]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4be:	08db      	lsrs	r3, r3, #3
 800e4c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	fb02 f303 	mul.w	r3, r2, r3
 800e4ca:	ee07 3a90 	vmov	s15, r3
 800e4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	2b03      	cmp	r3, #3
 800e4da:	d062      	beq.n	800e5a2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	f200 8081 	bhi.w	800e5e6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d024      	beq.n	800e534 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d17a      	bne.n	800e5e6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	ee07 3a90 	vmov	s15, r3
 800e4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e502:	4b89      	ldr	r3, [pc, #548]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e50a:	ee07 3a90 	vmov	s15, r3
 800e50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e512:	ed97 6a02 	vldr	s12, [r7, #8]
 800e516:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e730 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e526:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e52e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e532:	e08f      	b.n	800e654 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e534:	4b7c      	ldr	r3, [pc, #496]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d005      	beq.n	800e54c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800e540:	4b79      	ldr	r3, [pc, #484]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	0f1b      	lsrs	r3, r3, #28
 800e546:	f003 030f 	and.w	r3, r3, #15
 800e54a:	e006      	b.n	800e55a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800e54c:	4b76      	ldr	r3, [pc, #472]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e54e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e552:	041b      	lsls	r3, r3, #16
 800e554:	0f1b      	lsrs	r3, r3, #28
 800e556:	f003 030f 	and.w	r3, r3, #15
 800e55a:	4a76      	ldr	r2, [pc, #472]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e560:	ee07 3a90 	vmov	s15, r3
 800e564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	ee07 3a90 	vmov	s15, r3
 800e56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	ee07 3a90 	vmov	s15, r3
 800e57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e580:	ed97 6a02 	vldr	s12, [r7, #8]
 800e584:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e730 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e58c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e590:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e594:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e59c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e5a0:	e058      	b.n	800e654 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	ee07 3a90 	vmov	s15, r3
 800e5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800e5b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5b4:	4b5c      	ldr	r3, [pc, #368]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5bc:	ee07 3a90 	vmov	s15, r3
 800e5c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5c4:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e730 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e5cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e5e4:	e036      	b.n	800e654 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e5e6:	4b50      	ldr	r3, [pc, #320]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d005      	beq.n	800e5fe <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800e5f2:	4b4d      	ldr	r3, [pc, #308]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	0f1b      	lsrs	r3, r3, #28
 800e5f8:	f003 030f 	and.w	r3, r3, #15
 800e5fc:	e006      	b.n	800e60c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800e5fe:	4b4a      	ldr	r3, [pc, #296]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e604:	041b      	lsls	r3, r3, #16
 800e606:	0f1b      	lsrs	r3, r3, #28
 800e608:	f003 030f 	and.w	r3, r3, #15
 800e60c:	4a49      	ldr	r2, [pc, #292]	@ (800e734 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800e60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e612:	ee07 3a90 	vmov	s15, r3
 800e616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	ee07 3a90 	vmov	s15, r3
 800e620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	ee07 3a90 	vmov	s15, r3
 800e62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e632:	ed97 6a02 	vldr	s12, [r7, #8]
 800e636:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e730 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800e63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e646:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e64e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e652:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e654:	4b34      	ldr	r3, [pc, #208]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d017      	beq.n	800e690 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e660:	4b31      	ldr	r3, [pc, #196]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e664:	0a5b      	lsrs	r3, r3, #9
 800e666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e66a:	ee07 3a90 	vmov	s15, r3
 800e66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e676:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e67a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e686:	ee17 2a90 	vmov	r2, s15
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	e002      	b.n	800e696 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e696:	4b24      	ldr	r3, [pc, #144]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e69a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d017      	beq.n	800e6d2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6a2:	4b21      	ldr	r3, [pc, #132]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6a6:	0c1b      	lsrs	r3, r3, #16
 800e6a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6ac:	ee07 3a90 	vmov	s15, r3
 800e6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e6b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e6b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6c8:	ee17 2a90 	vmov	r2, s15
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	605a      	str	r2, [r3, #4]
 800e6d0:	e002      	b.n	800e6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e6d8:	4b13      	ldr	r3, [pc, #76]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d017      	beq.n	800e714 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6e4:	4b10      	ldr	r3, [pc, #64]	@ (800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800e6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6e8:	0e1b      	lsrs	r3, r3, #24
 800e6ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6ee:	ee07 3a90 	vmov	s15, r3
 800e6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e6f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e6fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e6fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800e702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e70a:	ee17 2a90 	vmov	r2, s15
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e712:	e002      	b.n	800e71a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2200      	movs	r2, #0
 800e718:	609a      	str	r2, [r3, #8]
}
 800e71a:	bf00      	nop
 800e71c:	3724      	adds	r7, #36	@ 0x24
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	46020c00 	.word	0x46020c00
 800e72c:	4b742400 	.word	0x4b742400
 800e730:	46000000 	.word	0x46000000
 800e734:	08017bfc 	.word	0x08017bfc

0800e738 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e738:	b480      	push	{r7}
 800e73a:	b089      	sub	sp, #36	@ 0x24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e740:	4ba6      	ldr	r3, [pc, #664]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e748:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e74a:	4ba4      	ldr	r3, [pc, #656]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e74c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e74e:	f003 0303 	and.w	r3, r3, #3
 800e752:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e754:	4ba1      	ldr	r3, [pc, #644]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e758:	0a1b      	lsrs	r3, r3, #8
 800e75a:	f003 030f 	and.w	r3, r3, #15
 800e75e:	3301      	adds	r3, #1
 800e760:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e762:	4b9e      	ldr	r3, [pc, #632]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e766:	091b      	lsrs	r3, r3, #4
 800e768:	f003 0301 	and.w	r3, r3, #1
 800e76c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e76e:	4b9b      	ldr	r3, [pc, #620]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e772:	08db      	lsrs	r3, r3, #3
 800e774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	fb02 f303 	mul.w	r3, r2, r3
 800e77e:	ee07 3a90 	vmov	s15, r3
 800e782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e786:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2b03      	cmp	r3, #3
 800e78e:	d062      	beq.n	800e856 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2b03      	cmp	r3, #3
 800e794:	f200 8081 	bhi.w	800e89a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d024      	beq.n	800e7e8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d17a      	bne.n	800e89a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	ee07 3a90 	vmov	s15, r3
 800e7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800e9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7b6:	4b89      	ldr	r3, [pc, #548]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e7b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7be:	ee07 3a90 	vmov	s15, r3
 800e7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e7ca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800e9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7e2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800e7e6:	e08f      	b.n	800e908 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e7e8:	4b7c      	ldr	r3, [pc, #496]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d005      	beq.n	800e800 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800e7f4:	4b79      	ldr	r3, [pc, #484]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	0f1b      	lsrs	r3, r3, #28
 800e7fa:	f003 030f 	and.w	r3, r3, #15
 800e7fe:	e006      	b.n	800e80e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800e800:	4b76      	ldr	r3, [pc, #472]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e806:	041b      	lsls	r3, r3, #16
 800e808:	0f1b      	lsrs	r3, r3, #28
 800e80a:	f003 030f 	and.w	r3, r3, #15
 800e80e:	4a76      	ldr	r2, [pc, #472]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e814:	ee07 3a90 	vmov	s15, r3
 800e818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	ee07 3a90 	vmov	s15, r3
 800e822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	ee07 3a90 	vmov	s15, r3
 800e830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e834:	ed97 6a02 	vldr	s12, [r7, #8]
 800e838:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800e9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e83c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e848:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e854:	e058      	b.n	800e908 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	ee07 3a90 	vmov	s15, r3
 800e85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e860:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800e864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e868:	4b5c      	ldr	r3, [pc, #368]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e86a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e870:	ee07 3a90 	vmov	s15, r3
 800e874:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e878:	ed97 6a02 	vldr	s12, [r7, #8]
 800e87c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800e9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e880:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e884:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800e888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e88c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e890:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e898:	e036      	b.n	800e908 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e89a:	4b50      	ldr	r3, [pc, #320]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d005      	beq.n	800e8b2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800e8a6:	4b4d      	ldr	r3, [pc, #308]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	0f1b      	lsrs	r3, r3, #28
 800e8ac:	f003 030f 	and.w	r3, r3, #15
 800e8b0:	e006      	b.n	800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800e8b2:	4b4a      	ldr	r3, [pc, #296]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e8b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e8b8:	041b      	lsls	r3, r3, #16
 800e8ba:	0f1b      	lsrs	r3, r3, #28
 800e8bc:	f003 030f 	and.w	r3, r3, #15
 800e8c0:	4a49      	ldr	r2, [pc, #292]	@ (800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800e8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8c6:	ee07 3a90 	vmov	s15, r3
 800e8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	ee07 3a90 	vmov	s15, r3
 800e8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	ee07 3a90 	vmov	s15, r3
 800e8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8ea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800e9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800e8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e906:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e908:	4b34      	ldr	r3, [pc, #208]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e90c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e910:	2b00      	cmp	r3, #0
 800e912:	d017      	beq.n	800e944 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e914:	4b31      	ldr	r3, [pc, #196]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e918:	0a5b      	lsrs	r3, r3, #9
 800e91a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e91e:	ee07 3a90 	vmov	s15, r3
 800e922:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e92a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e92e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e93a:	ee17 2a90 	vmov	r2, s15
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	601a      	str	r2, [r3, #0]
 800e942:	e002      	b.n	800e94a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e94a:	4b24      	ldr	r3, [pc, #144]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e94e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e952:	2b00      	cmp	r3, #0
 800e954:	d017      	beq.n	800e986 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e956:	4b21      	ldr	r3, [pc, #132]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e95a:	0c1b      	lsrs	r3, r3, #16
 800e95c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e960:	ee07 3a90 	vmov	s15, r3
 800e964:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e96c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e970:	edd7 6a07 	vldr	s13, [r7, #28]
 800e974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e97c:	ee17 2a90 	vmov	r2, s15
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	605a      	str	r2, [r3, #4]
 800e984:	e002      	b.n	800e98c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e98c:	4b13      	ldr	r3, [pc, #76]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e98e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e994:	2b00      	cmp	r3, #0
 800e996:	d017      	beq.n	800e9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e998:	4b10      	ldr	r3, [pc, #64]	@ (800e9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800e99a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e99c:	0e1b      	lsrs	r3, r3, #24
 800e99e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9a2:	ee07 3a90 	vmov	s15, r3
 800e9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e9aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e9ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e9b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9be:	ee17 2a90 	vmov	r2, s15
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e9c6:	e002      	b.n	800e9ce <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	609a      	str	r2, [r3, #8]
}
 800e9ce:	bf00      	nop
 800e9d0:	3724      	adds	r7, #36	@ 0x24
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	46020c00 	.word	0x46020c00
 800e9e0:	4b742400 	.word	0x4b742400
 800e9e4:	46000000 	.word	0x46000000
 800e9e8:	08017bfc 	.word	0x08017bfc

0800e9ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08e      	sub	sp, #56	@ 0x38
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9fa:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800e9fe:	430b      	orrs	r3, r1
 800ea00:	d145      	bne.n	800ea8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ea02:	4ba7      	ldr	r3, [pc, #668]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea0c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ea0e:	4ba4      	ldr	r3, [pc, #656]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea14:	f003 0302 	and.w	r3, r3, #2
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d108      	bne.n	800ea2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea22:	d104      	bne.n	800ea2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ea24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea2a:	f001 bb5a 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ea2e:	4b9c      	ldr	r3, [pc, #624]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea3c:	d114      	bne.n	800ea68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea44:	d110      	bne.n	800ea68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ea46:	4b96      	ldr	r3, [pc, #600]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea54:	d103      	bne.n	800ea5e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ea56:	23fa      	movs	r3, #250	@ 0xfa
 800ea58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ea5a:	f001 bb42 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ea5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ea62:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ea64:	f001 bb3d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ea68:	4b8d      	ldr	r3, [pc, #564]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea74:	d107      	bne.n	800ea86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ea76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea7c:	d103      	bne.n	800ea86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ea7e:	4b89      	ldr	r3, [pc, #548]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ea80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea82:	f001 bb2e 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ea86:	2300      	movs	r3, #0
 800ea88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea8a:	f001 bb2a 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ea8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea92:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ea96:	430b      	orrs	r3, r1
 800ea98:	d151      	bne.n	800eb3e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ea9a:	4b81      	ldr	r3, [pc, #516]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ea9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eaa0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800eaa4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	2b80      	cmp	r3, #128	@ 0x80
 800eaaa:	d035      	beq.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800eaac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaae:	2b80      	cmp	r3, #128	@ 0x80
 800eab0:	d841      	bhi.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab4:	2b60      	cmp	r3, #96	@ 0x60
 800eab6:	d02a      	beq.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800eab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaba:	2b60      	cmp	r3, #96	@ 0x60
 800eabc:	d83b      	bhi.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac0:	2b40      	cmp	r3, #64	@ 0x40
 800eac2:	d009      	beq.n	800ead8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac6:	2b40      	cmp	r3, #64	@ 0x40
 800eac8:	d835      	bhi.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800eaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00c      	beq.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800ead0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead2:	2b20      	cmp	r3, #32
 800ead4:	d012      	beq.n	800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ead6:	e02e      	b.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ead8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eadc:	4618      	mov	r0, r3
 800eade:	f7ff fb77 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eae6:	f001 bafc 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaea:	f107 0318 	add.w	r3, r7, #24
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff fcc8 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eaf8:	f001 baf3 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eafc:	f107 030c 	add.w	r3, r7, #12
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff fe19 	bl	800e738 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb0a:	f001 baea 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eb0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800eb12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb14:	f001 bae5 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eb18:	4b61      	ldr	r3, [pc, #388]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eb20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb24:	d103      	bne.n	800eb2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800eb26:	4b60      	ldr	r3, [pc, #384]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800eb28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eb2a:	f001 bada 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb32:	f001 bad6 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800eb36:	2300      	movs	r3, #0
 800eb38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eb3a:	f001 bad2 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800eb3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb42:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800eb46:	430b      	orrs	r3, r1
 800eb48:	d158      	bne.n	800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800eb4a:	4b55      	ldr	r3, [pc, #340]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eb4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eb50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eb54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800eb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb5c:	d03b      	beq.n	800ebd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb64:	d846      	bhi.n	800ebf4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb6c:	d02e      	beq.n	800ebcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb74:	d83e      	bhi.n	800ebf4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb7c:	d00b      	beq.n	800eb96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb84:	d836      	bhi.n	800ebf4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00d      	beq.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb92:	d012      	beq.n	800ebba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800eb94:	e02e      	b.n	800ebf4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff fb18 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eba4:	f001 ba9d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eba8:	f107 0318 	add.w	r3, r7, #24
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7ff fc69 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebb6:	f001 ba94 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebba:	f107 030c 	add.w	r3, r7, #12
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7ff fdba 	bl	800e738 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebc8:	f001 ba8b 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ebcc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ebd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebd2:	f001 ba86 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ebd6:	4b32      	ldr	r3, [pc, #200]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebe2:	d103      	bne.n	800ebec <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ebe4:	4b30      	ldr	r3, [pc, #192]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ebe6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ebe8:	f001 ba7b 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ebec:	2300      	movs	r3, #0
 800ebee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebf0:	f001 ba77 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ebf8:	f001 ba73 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ebfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec00:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ec04:	430b      	orrs	r3, r1
 800ec06:	d126      	bne.n	800ec56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ec08:	4b25      	ldr	r3, [pc, #148]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ec0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ec14:	4b22      	ldr	r3, [pc, #136]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec20:	d106      	bne.n	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ec22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d103      	bne.n	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ec28:	4b1f      	ldr	r3, [pc, #124]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ec2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec2c:	f001 ba59 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ec30:	4b1b      	ldr	r3, [pc, #108]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec3c:	d107      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec44:	d103      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ec46:	4b19      	ldr	r3, [pc, #100]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ec48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec4a:	f001 ba4a 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec52:	f001 ba46 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ec56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec5a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ec5e:	430b      	orrs	r3, r1
 800ec60:	d16e      	bne.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ec62:	4b0f      	ldr	r3, [pc, #60]	@ (800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec68:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ec6c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ec6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec70:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ec74:	d03d      	beq.n	800ecf2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ec76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ec7c:	d85c      	bhi.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec84:	d014      	beq.n	800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ec86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec8c:	d854      	bhi.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d01f      	beq.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800ec94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec9a:	d012      	beq.n	800ecc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ec9c:	e04c      	b.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ec9e:	bf00      	nop
 800eca0:	46020c00 	.word	0x46020c00
 800eca4:	0007a120 	.word	0x0007a120
 800eca8:	00f42400 	.word	0x00f42400
 800ecac:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff fa8b 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ecbe:	f001 ba10 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecc2:	f107 0318 	add.w	r3, r7, #24
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff fbdc 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ecd0:	f001 ba07 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ecd4:	4ba7      	ldr	r3, [pc, #668]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ecdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ece0:	d103      	bne.n	800ecea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ece2:	4ba5      	ldr	r3, [pc, #660]	@ (800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ece4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ece6:	f001 b9fc 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ecea:	2300      	movs	r3, #0
 800ecec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ecee:	f001 b9f8 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ecf2:	4ba0      	ldr	r3, [pc, #640]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f003 0320 	and.w	r3, r3, #32
 800ecfa:	2b20      	cmp	r3, #32
 800ecfc:	d118      	bne.n	800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ecfe:	4b9d      	ldr	r3, [pc, #628]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d005      	beq.n	800ed16 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ed0a:	4b9a      	ldr	r3, [pc, #616]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	0e1b      	lsrs	r3, r3, #24
 800ed10:	f003 030f 	and.w	r3, r3, #15
 800ed14:	e006      	b.n	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ed16:	4b97      	ldr	r3, [pc, #604]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ed1c:	041b      	lsls	r3, r3, #16
 800ed1e:	0e1b      	lsrs	r3, r3, #24
 800ed20:	f003 030f 	and.w	r3, r3, #15
 800ed24:	4a95      	ldr	r2, [pc, #596]	@ (800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ed26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed2a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ed2c:	f001 b9d9 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ed30:	2300      	movs	r3, #0
 800ed32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed34:	f001 b9d5 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ed3c:	f001 b9d1 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ed40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed44:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	d17f      	bne.n	800ee4c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ed4c:	4b89      	ldr	r3, [pc, #548]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ed52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed56:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ed58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d165      	bne.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ed5e:	4b85      	ldr	r3, [pc, #532]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ed60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed64:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ed68:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ed70:	d034      	beq.n	800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ed72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed74:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ed78:	d853      	bhi.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed80:	d00b      	beq.n	800ed9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ed82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed88:	d84b      	bhi.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d016      	beq.n	800edbe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ed90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ed96:	d009      	beq.n	800edac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ed98:	e043      	b.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff fa16 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800eda8:	f001 b99b 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edac:	f107 0318 	add.w	r3, r7, #24
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7ff fb67 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800edba:	f001 b992 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800edbe:	4b6d      	ldr	r3, [pc, #436]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800edc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edca:	d103      	bne.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800edcc:	4b6a      	ldr	r3, [pc, #424]	@ (800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800edce:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800edd0:	f001 b987 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800edd4:	2300      	movs	r3, #0
 800edd6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800edd8:	f001 b983 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800eddc:	4b65      	ldr	r3, [pc, #404]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f003 0320 	and.w	r3, r3, #32
 800ede4:	2b20      	cmp	r3, #32
 800ede6:	d118      	bne.n	800ee1a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ede8:	4b62      	ldr	r3, [pc, #392]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d005      	beq.n	800ee00 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800edf4:	4b5f      	ldr	r3, [pc, #380]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	0e1b      	lsrs	r3, r3, #24
 800edfa:	f003 030f 	and.w	r3, r3, #15
 800edfe:	e006      	b.n	800ee0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ee00:	4b5c      	ldr	r3, [pc, #368]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ee06:	041b      	lsls	r3, r3, #16
 800ee08:	0e1b      	lsrs	r3, r3, #24
 800ee0a:	f003 030f 	and.w	r3, r3, #15
 800ee0e:	4a5b      	ldr	r2, [pc, #364]	@ (800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ee10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee14:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ee16:	f001 b964 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ee1e:	f001 b960 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800ee22:	2300      	movs	r3, #0
 800ee24:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ee26:	f001 b95c 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee30:	d108      	bne.n	800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff f9ca 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee40:	f001 b94f 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800ee44:	2300      	movs	r3, #0
 800ee46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee48:	f001 b94b 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ee4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee50:	1e51      	subs	r1, r2, #1
 800ee52:	430b      	orrs	r3, r1
 800ee54:	d136      	bne.n	800eec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ee56:	4b47      	ldr	r3, [pc, #284]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee5c:	f003 0303 	and.w	r3, r3, #3
 800ee60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ee62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d104      	bne.n	800ee72 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800ee68:	f7fe f9cc 	bl	800d204 <HAL_RCC_GetPCLK2Freq>
 800ee6c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ee6e:	f001 b938 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ee72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d104      	bne.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ee78:	f7fe f894 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800ee7c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ee7e:	f001 b930 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ee82:	4b3c      	ldr	r3, [pc, #240]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ee8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee8e:	d106      	bne.n	800ee9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ee90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee92:	2b02      	cmp	r3, #2
 800ee94:	d103      	bne.n	800ee9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ee96:	4b3a      	ldr	r3, [pc, #232]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ee98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee9a:	f001 b922 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ee9e:	4b35      	ldr	r3, [pc, #212]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eea4:	f003 0302 	and.w	r3, r3, #2
 800eea8:	2b02      	cmp	r3, #2
 800eeaa:	d107      	bne.n	800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800eeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeae:	2b03      	cmp	r3, #3
 800eeb0:	d104      	bne.n	800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800eeb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eeb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeb8:	f001 b913 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800eebc:	2300      	movs	r3, #0
 800eebe:	637b      	str	r3, [r7, #52]	@ 0x34
 800eec0:	f001 b90f 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800eec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eec8:	1e91      	subs	r1, r2, #2
 800eeca:	430b      	orrs	r3, r1
 800eecc:	d136      	bne.n	800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800eece:	4b29      	ldr	r3, [pc, #164]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eed4:	f003 030c 	and.w	r3, r3, #12
 800eed8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800eeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d104      	bne.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800eee0:	f7fe f97c 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800eee4:	6378      	str	r0, [r7, #52]	@ 0x34
 800eee6:	f001 b8fc 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800eeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeec:	2b04      	cmp	r3, #4
 800eeee:	d104      	bne.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eef0:	f7fe f858 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800eef4:	6378      	str	r0, [r7, #52]	@ 0x34
 800eef6:	f001 b8f4 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800eefa:	4b1e      	ldr	r3, [pc, #120]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef06:	d106      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ef08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0a:	2b08      	cmp	r3, #8
 800ef0c:	d103      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ef0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ef10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef12:	f001 b8e6 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ef16:	4b17      	ldr	r3, [pc, #92]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ef1c:	f003 0302 	and.w	r3, r3, #2
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d107      	bne.n	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	2b0c      	cmp	r3, #12
 800ef28:	d104      	bne.n	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ef2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef30:	f001 b8d7 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ef34:	2300      	movs	r3, #0
 800ef36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef38:	f001 b8d3 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ef3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef40:	1f11      	subs	r1, r2, #4
 800ef42:	430b      	orrs	r3, r1
 800ef44:	d13f      	bne.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ef46:	4b0b      	ldr	r3, [pc, #44]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ef4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ef50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ef52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d104      	bne.n	800ef62 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ef58:	f7fe f940 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800ef5c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ef5e:	f001 b8c0 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ef62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef64:	2b10      	cmp	r3, #16
 800ef66:	d10d      	bne.n	800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef68:	f7fe f81c 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800ef6c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ef6e:	f001 b8b8 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ef72:	bf00      	nop
 800ef74:	46020c00 	.word	0x46020c00
 800ef78:	02dc6c00 	.word	0x02dc6c00
 800ef7c:	08017bfc 	.word	0x08017bfc
 800ef80:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ef84:	4ba8      	ldr	r3, [pc, #672]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef90:	d106      	bne.n	800efa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef94:	2b20      	cmp	r3, #32
 800ef96:	d103      	bne.n	800efa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ef98:	4ba4      	ldr	r3, [pc, #656]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ef9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef9c:	f001 b8a1 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800efa0:	4ba1      	ldr	r3, [pc, #644]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800efa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800efa6:	f003 0302 	and.w	r3, r3, #2
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d107      	bne.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800efae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb0:	2b30      	cmp	r3, #48	@ 0x30
 800efb2:	d104      	bne.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800efb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800efba:	f001 b892 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800efbe:	2300      	movs	r3, #0
 800efc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800efc2:	f001 b88e 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800efc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efca:	f1a2 0108 	sub.w	r1, r2, #8
 800efce:	430b      	orrs	r3, r1
 800efd0:	d136      	bne.n	800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800efd2:	4b95      	ldr	r3, [pc, #596]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800efd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800efd8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800efdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800efde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d104      	bne.n	800efee <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800efe4:	f7fe f8fa 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800efe8:	6378      	str	r0, [r7, #52]	@ 0x34
 800efea:	f001 b87a 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800efee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff0:	2b40      	cmp	r3, #64	@ 0x40
 800eff2:	d104      	bne.n	800effe <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eff4:	f7fd ffd6 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800eff8:	6378      	str	r0, [r7, #52]	@ 0x34
 800effa:	f001 b872 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800effe:	4b8a      	ldr	r3, [pc, #552]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f00a:	d106      	bne.n	800f01a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f00e:	2b80      	cmp	r3, #128	@ 0x80
 800f010:	d103      	bne.n	800f01a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f012:	4b86      	ldr	r3, [pc, #536]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f014:	637b      	str	r3, [r7, #52]	@ 0x34
 800f016:	f001 b864 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f01a:	4b83      	ldr	r3, [pc, #524]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f01c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f020:	f003 0302 	and.w	r3, r3, #2
 800f024:	2b02      	cmp	r3, #2
 800f026:	d107      	bne.n	800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f02a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f02c:	d104      	bne.n	800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f02e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f032:	637b      	str	r3, [r7, #52]	@ 0x34
 800f034:	f001 b855 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f038:	2300      	movs	r3, #0
 800f03a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f03c:	f001 b851 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f044:	f1a2 0110 	sub.w	r1, r2, #16
 800f048:	430b      	orrs	r3, r1
 800f04a:	d139      	bne.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f04c:	4b76      	ldr	r3, [pc, #472]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f04e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f056:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d104      	bne.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f05e:	f7fe f8bd 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f062:	6378      	str	r0, [r7, #52]	@ 0x34
 800f064:	f001 b83d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f06a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f06e:	d104      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f070:	f7fd ff98 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f074:	6378      	str	r0, [r7, #52]	@ 0x34
 800f076:	f001 b834 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f07a:	4b6b      	ldr	r3, [pc, #428]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f086:	d107      	bne.n	800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800f088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f08e:	d103      	bne.n	800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800f090:	4b66      	ldr	r3, [pc, #408]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f092:	637b      	str	r3, [r7, #52]	@ 0x34
 800f094:	f001 b825 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f098:	4b63      	ldr	r3, [pc, #396]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f09a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f09e:	f003 0302 	and.w	r3, r3, #2
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d108      	bne.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f0ac:	d104      	bne.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800f0ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0b4:	f001 b815 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0bc:	f001 b811 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800f0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0c4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800f0c8:	430b      	orrs	r3, r1
 800f0ca:	d139      	bne.n	800f140 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800f0cc:	4b56      	ldr	r3, [pc, #344]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f0ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f0d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f0d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800f0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d104      	bne.n	800f0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f0de:	f7fe f87d 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f0e2:	6378      	str	r0, [r7, #52]	@ 0x34
 800f0e4:	f000 bffd 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ee:	d104      	bne.n	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f0f0:	f7fd ff58 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f0f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800f0f6:	f000 bff4 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800f0fa:	4b4b      	ldr	r3, [pc, #300]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f106:	d107      	bne.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800f108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f10e:	d103      	bne.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800f110:	4b46      	ldr	r3, [pc, #280]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f112:	637b      	str	r3, [r7, #52]	@ 0x34
 800f114:	f000 bfe5 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800f118:	4b43      	ldr	r3, [pc, #268]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f11a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f11e:	f003 0302 	and.w	r3, r3, #2
 800f122:	2b02      	cmp	r3, #2
 800f124:	d108      	bne.n	800f138 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800f126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f12c:	d104      	bne.n	800f138 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800f12e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f132:	637b      	str	r3, [r7, #52]	@ 0x34
 800f134:	f000 bfd5 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f138:	2300      	movs	r3, #0
 800f13a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f13c:	f000 bfd1 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f144:	f1a2 0120 	sub.w	r1, r2, #32
 800f148:	430b      	orrs	r3, r1
 800f14a:	d158      	bne.n	800f1fe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f14c:	4b36      	ldr	r3, [pc, #216]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f14e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f152:	f003 0307 	and.w	r3, r3, #7
 800f156:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d104      	bne.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f15e:	f7fe f865 	bl	800d22c <HAL_RCC_GetPCLK3Freq>
 800f162:	6378      	str	r0, [r7, #52]	@ 0x34
 800f164:	f000 bfbd 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d104      	bne.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f16e:	f7fd ff19 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f172:	6378      	str	r0, [r7, #52]	@ 0x34
 800f174:	f000 bfb5 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f178:	4b2b      	ldr	r3, [pc, #172]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f184:	d106      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800f186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d103      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800f18c:	4b27      	ldr	r3, [pc, #156]	@ (800f22c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f190:	f000 bfa7 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f194:	4b24      	ldr	r3, [pc, #144]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f19a:	f003 0302 	and.w	r3, r3, #2
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d107      	bne.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	d104      	bne.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800f1a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ae:	f000 bf98 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f1b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f003 0320 	and.w	r3, r3, #32
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d11b      	bne.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800f1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d118      	bne.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1c4:	4b18      	ldr	r3, [pc, #96]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d005      	beq.n	800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800f1d0:	4b15      	ldr	r3, [pc, #84]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	0e1b      	lsrs	r3, r3, #24
 800f1d6:	f003 030f 	and.w	r3, r3, #15
 800f1da:	e006      	b.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800f1dc:	4b12      	ldr	r3, [pc, #72]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f1de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f1e2:	041b      	lsls	r3, r3, #16
 800f1e4:	0e1b      	lsrs	r3, r3, #24
 800f1e6:	f003 030f 	and.w	r3, r3, #15
 800f1ea:	4a11      	ldr	r2, [pc, #68]	@ (800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1f2:	f000 bf76 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1fa:	f000 bf72 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f202:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f206:	430b      	orrs	r3, r1
 800f208:	d172      	bne.n	800f2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f20a:	4b07      	ldr	r3, [pc, #28]	@ (800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f20c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f210:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f214:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f21c:	d10a      	bne.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f21e:	f7fd fec1 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f222:	6378      	str	r0, [r7, #52]	@ 0x34
 800f224:	f000 bf5d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800f228:	46020c00 	.word	0x46020c00
 800f22c:	00f42400 	.word	0x00f42400
 800f230:	08017bfc 	.word	0x08017bfc
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f23a:	d108      	bne.n	800f24e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f23c:	f107 0318 	add.w	r3, r7, #24
 800f240:	4618      	mov	r0, r3
 800f242:	f7ff f91f 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	637b      	str	r3, [r7, #52]	@ 0x34
 800f24a:	f000 bf4a 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f250:	2b00      	cmp	r3, #0
 800f252:	d104      	bne.n	800f25e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f254:	f7fd ffa8 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
 800f258:	6378      	str	r0, [r7, #52]	@ 0x34
 800f25a:	f000 bf42 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f260:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f264:	d122      	bne.n	800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f266:	4bb0      	ldr	r3, [pc, #704]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f003 0320 	and.w	r3, r3, #32
 800f26e:	2b20      	cmp	r3, #32
 800f270:	d118      	bne.n	800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f272:	4bad      	ldr	r3, [pc, #692]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d005      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800f27e:	4baa      	ldr	r3, [pc, #680]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	0e1b      	lsrs	r3, r3, #24
 800f284:	f003 030f 	and.w	r3, r3, #15
 800f288:	e006      	b.n	800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800f28a:	4ba7      	ldr	r3, [pc, #668]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f28c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f290:	041b      	lsls	r3, r3, #16
 800f292:	0e1b      	lsrs	r3, r3, #24
 800f294:	f003 030f 	and.w	r3, r3, #15
 800f298:	4aa4      	ldr	r2, [pc, #656]	@ (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800f29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2a0:	f000 bf1f 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2a8:	f000 bf1b 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f2ac:	4b9e      	ldr	r3, [pc, #632]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2b8:	d107      	bne.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f2c0:	d103      	bne.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800f2c2:	4b9b      	ldr	r3, [pc, #620]	@ (800f530 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800f2c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2c6:	f000 bf0c 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f2ca:	4b97      	ldr	r3, [pc, #604]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f2d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2d6:	d107      	bne.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f2de:	d103      	bne.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800f2e0:	4b93      	ldr	r3, [pc, #588]	@ (800f530 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800f2e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2e4:	f000 befd 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2ec:	f000 bef9 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f2f8:	430b      	orrs	r3, r1
 800f2fa:	d158      	bne.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f2fc:	4b8a      	ldr	r3, [pc, #552]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f2fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f302:	f003 0307 	and.w	r3, r3, #7
 800f306:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30a:	2b04      	cmp	r3, #4
 800f30c:	d84b      	bhi.n	800f3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800f30e:	a201      	add	r2, pc, #4	@ (adr r2, 800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800f310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f314:	0800f34d 	.word	0x0800f34d
 800f318:	0800f329 	.word	0x0800f329
 800f31c:	0800f33b 	.word	0x0800f33b
 800f320:	0800f357 	.word	0x0800f357
 800f324:	0800f361 	.word	0x0800f361
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe ff4f 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f336:	f000 bed4 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f33a:	f107 030c 	add.w	r3, r7, #12
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff f9fa 	bl	800e738 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f348:	f000 becb 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f34c:	f7fd ff2c 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
 800f350:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f352:	f000 bec6 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f356:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f35a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f35c:	f000 bec1 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f360:	4b71      	ldr	r3, [pc, #452]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 0320 	and.w	r3, r3, #32
 800f368:	2b20      	cmp	r3, #32
 800f36a:	d118      	bne.n	800f39e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f36c:	4b6e      	ldr	r3, [pc, #440]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d005      	beq.n	800f384 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f378:	4b6b      	ldr	r3, [pc, #428]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	0e1b      	lsrs	r3, r3, #24
 800f37e:	f003 030f 	and.w	r3, r3, #15
 800f382:	e006      	b.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f384:	4b68      	ldr	r3, [pc, #416]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f38a:	041b      	lsls	r3, r3, #16
 800f38c:	0e1b      	lsrs	r3, r3, #24
 800f38e:	f003 030f 	and.w	r3, r3, #15
 800f392:	4a66      	ldr	r2, [pc, #408]	@ (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800f394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f398:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f39a:	f000 bea2 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3a2:	f000 be9e 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f3aa:	f000 be9a 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f3ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3b2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800f3b6:	430b      	orrs	r3, r1
 800f3b8:	d167      	bne.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f3ba:	4b5b      	ldr	r3, [pc, #364]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f3bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f3c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f3c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f3cc:	d036      	beq.n	800f43c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f3d4:	d855      	bhi.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f3dc:	d029      	beq.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800f3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f3e4:	d84d      	bhi.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f3ec:	d013      	beq.n	800f416 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f3f4:	d845      	bhi.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d015      	beq.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f402:	d13e      	bne.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fe fee1 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f412:	f000 be66 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f416:	f107 030c 	add.w	r3, r7, #12
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff f98c 	bl	800e738 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f424:	f000 be5d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f428:	f7fd febe 	bl	800d1a8 <HAL_RCC_GetHCLKFreq>
 800f42c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f42e:	f000 be58 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f432:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f438:	f000 be53 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f43c:	4b3a      	ldr	r3, [pc, #232]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f003 0320 	and.w	r3, r3, #32
 800f444:	2b20      	cmp	r3, #32
 800f446:	d118      	bne.n	800f47a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f448:	4b37      	ldr	r3, [pc, #220]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800f454:	4b34      	ldr	r3, [pc, #208]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	0e1b      	lsrs	r3, r3, #24
 800f45a:	f003 030f 	and.w	r3, r3, #15
 800f45e:	e006      	b.n	800f46e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f460:	4b31      	ldr	r3, [pc, #196]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f466:	041b      	lsls	r3, r3, #16
 800f468:	0e1b      	lsrs	r3, r3, #24
 800f46a:	f003 030f 	and.w	r3, r3, #15
 800f46e:	4a2f      	ldr	r2, [pc, #188]	@ (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800f470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f474:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f476:	f000 be34 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f47a:	2300      	movs	r3, #0
 800f47c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f47e:	f000 be30 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800f482:	2300      	movs	r3, #0
 800f484:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f486:	f000 be2c 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f48a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f48e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800f492:	430b      	orrs	r3, r1
 800f494:	d152      	bne.n	800f53c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f496:	4b24      	ldr	r3, [pc, #144]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f49c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f4a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d104      	bne.n	800f4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f4a8:	f7fd fe98 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f4ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800f4ae:	f000 be18 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4b8:	d104      	bne.n	800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f4ba:	f7fd fd73 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f4be:	6378      	str	r0, [r7, #52]	@ 0x34
 800f4c0:	f000 be0f 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f4c4:	4b18      	ldr	r3, [pc, #96]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f4cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4d0:	d107      	bne.n	800f4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4d8:	d103      	bne.n	800f4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800f4da:	4b15      	ldr	r3, [pc, #84]	@ (800f530 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800f4dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4de:	f000 be00 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f4e2:	4b11      	ldr	r3, [pc, #68]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f003 0320 	and.w	r3, r3, #32
 800f4ea:	2b20      	cmp	r3, #32
 800f4ec:	d122      	bne.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f4f4:	d11e      	bne.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d005      	beq.n	800f50e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800f502:	4b09      	ldr	r3, [pc, #36]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	0e1b      	lsrs	r3, r3, #24
 800f508:	f003 030f 	and.w	r3, r3, #15
 800f50c:	e006      	b.n	800f51c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800f50e:	4b06      	ldr	r3, [pc, #24]	@ (800f528 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800f510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f514:	041b      	lsls	r3, r3, #16
 800f516:	0e1b      	lsrs	r3, r3, #24
 800f518:	f003 030f 	and.w	r3, r3, #15
 800f51c:	4a03      	ldr	r2, [pc, #12]	@ (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800f51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f522:	637b      	str	r3, [r7, #52]	@ 0x34
 800f524:	f000 bddd 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800f528:	46020c00 	.word	0x46020c00
 800f52c:	08017bfc 	.word	0x08017bfc
 800f530:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f534:	2300      	movs	r3, #0
 800f536:	637b      	str	r3, [r7, #52]	@ 0x34
 800f538:	f000 bdd3 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f540:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800f544:	430b      	orrs	r3, r1
 800f546:	d14c      	bne.n	800f5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f548:	4ba8      	ldr	r3, [pc, #672]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f54a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f54e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f552:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f556:	2b00      	cmp	r3, #0
 800f558:	d104      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f55a:	f7fd fe3f 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f55e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f560:	f000 bdbf 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f56a:	d104      	bne.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f56c:	f7fd fd1a 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f570:	6378      	str	r0, [r7, #52]	@ 0x34
 800f572:	f000 bdb6 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f576:	4b9d      	ldr	r3, [pc, #628]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f57e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f582:	d107      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800f584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f58a:	d103      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800f58c:	4b98      	ldr	r3, [pc, #608]	@ (800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800f58e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f590:	f000 bda7 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f594:	4b95      	ldr	r3, [pc, #596]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f003 0320 	and.w	r3, r3, #32
 800f59c:	2b20      	cmp	r3, #32
 800f59e:	d11c      	bne.n	800f5da <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f5a6:	d118      	bne.n	800f5da <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f5a8:	4b90      	ldr	r3, [pc, #576]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d005      	beq.n	800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800f5b4:	4b8d      	ldr	r3, [pc, #564]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	0e1b      	lsrs	r3, r3, #24
 800f5ba:	f003 030f 	and.w	r3, r3, #15
 800f5be:	e006      	b.n	800f5ce <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800f5c0:	4b8a      	ldr	r3, [pc, #552]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f5c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f5c6:	041b      	lsls	r3, r3, #16
 800f5c8:	0e1b      	lsrs	r3, r3, #24
 800f5ca:	f003 030f 	and.w	r3, r3, #15
 800f5ce:	4a89      	ldr	r2, [pc, #548]	@ (800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800f5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5d6:	f000 bd84 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5de:	f000 bd80 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f5ea:	430b      	orrs	r3, r1
 800f5ec:	d158      	bne.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f5ee:	4b7f      	ldr	r3, [pc, #508]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f5f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f5f4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f5f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800f5fe:	d028      	beq.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800f600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f602:	2bc0      	cmp	r3, #192	@ 0xc0
 800f604:	d848      	bhi.n	800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800f606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f608:	2b80      	cmp	r3, #128	@ 0x80
 800f60a:	d00e      	beq.n	800f62a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800f60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f60e:	2b80      	cmp	r3, #128	@ 0x80
 800f610:	d842      	bhi.n	800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800f612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f614:	2b00      	cmp	r3, #0
 800f616:	d003      	beq.n	800f620 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800f618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f61a:	2b40      	cmp	r3, #64	@ 0x40
 800f61c:	d014      	beq.n	800f648 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800f61e:	e03b      	b.n	800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f620:	f7fd fe04 	bl	800d22c <HAL_RCC_GetPCLK3Freq>
 800f624:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f626:	f000 bd5c 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f62a:	4b70      	ldr	r3, [pc, #448]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f636:	d103      	bne.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800f638:	4b6d      	ldr	r3, [pc, #436]	@ (800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800f63a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f63c:	f000 bd51 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f640:	2300      	movs	r3, #0
 800f642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f644:	f000 bd4d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f648:	f7fd fcac 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f64c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800f64e:	f000 bd48 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f652:	4b66      	ldr	r3, [pc, #408]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f003 0320 	and.w	r3, r3, #32
 800f65a:	2b20      	cmp	r3, #32
 800f65c:	d118      	bne.n	800f690 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f65e:	4b63      	ldr	r3, [pc, #396]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800f66a:	4b60      	ldr	r3, [pc, #384]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	0e1b      	lsrs	r3, r3, #24
 800f670:	f003 030f 	and.w	r3, r3, #15
 800f674:	e006      	b.n	800f684 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800f676:	4b5d      	ldr	r3, [pc, #372]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f67c:	041b      	lsls	r3, r3, #16
 800f67e:	0e1b      	lsrs	r3, r3, #24
 800f680:	f003 030f 	and.w	r3, r3, #15
 800f684:	4a5b      	ldr	r2, [pc, #364]	@ (800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800f686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f68a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f68c:	f000 bd29 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800f690:	2300      	movs	r3, #0
 800f692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f694:	f000 bd25 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800f698:	2300      	movs	r3, #0
 800f69a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f69c:	f000 bd21 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6a4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800f6a8:	430b      	orrs	r3, r1
 800f6aa:	d14c      	bne.n	800f746 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f6ac:	4b4f      	ldr	r3, [pc, #316]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f6ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f6b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f6b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d104      	bne.n	800f6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f6be:	f7fd fd8d 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f6c2:	6378      	str	r0, [r7, #52]	@ 0x34
 800f6c4:	f000 bd0d 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f6ce:	d104      	bne.n	800f6da <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f6d0:	f7fd fc68 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f6d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800f6d6:	f000 bd04 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f6da:	4b44      	ldr	r3, [pc, #272]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f6e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6e6:	d107      	bne.n	800f6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6ee:	d103      	bne.n	800f6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800f6f0:	4b3f      	ldr	r3, [pc, #252]	@ (800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800f6f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6f4:	f000 bcf5 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f6f8:	4b3c      	ldr	r3, [pc, #240]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f003 0320 	and.w	r3, r3, #32
 800f700:	2b20      	cmp	r3, #32
 800f702:	d11c      	bne.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800f704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f706:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f70a:	d118      	bne.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f70c:	4b37      	ldr	r3, [pc, #220]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f714:	2b00      	cmp	r3, #0
 800f716:	d005      	beq.n	800f724 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800f718:	4b34      	ldr	r3, [pc, #208]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	0e1b      	lsrs	r3, r3, #24
 800f71e:	f003 030f 	and.w	r3, r3, #15
 800f722:	e006      	b.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800f724:	4b31      	ldr	r3, [pc, #196]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f72a:	041b      	lsls	r3, r3, #16
 800f72c:	0e1b      	lsrs	r3, r3, #24
 800f72e:	f003 030f 	and.w	r3, r3, #15
 800f732:	4a30      	ldr	r2, [pc, #192]	@ (800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800f734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f738:	637b      	str	r3, [r7, #52]	@ 0x34
 800f73a:	f000 bcd2 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f73e:	2300      	movs	r3, #0
 800f740:	637b      	str	r3, [r7, #52]	@ 0x34
 800f742:	f000 bcce 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800f746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f74a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800f74e:	430b      	orrs	r3, r1
 800f750:	d152      	bne.n	800f7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800f752:	4b26      	ldr	r3, [pc, #152]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f754:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f758:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800f75c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800f75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f764:	f7fd fd3a 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f768:	6378      	str	r0, [r7, #52]	@ 0x34
 800f76a:	f000 bcba 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800f76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f774:	d104      	bne.n	800f780 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f776:	f7fd fc15 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f77a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f77c:	f000 bcb1 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800f780:	4b1a      	ldr	r3, [pc, #104]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f78c:	d107      	bne.n	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800f78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f794:	d103      	bne.n	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800f796:	4b16      	ldr	r3, [pc, #88]	@ (800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800f798:	637b      	str	r3, [r7, #52]	@ 0x34
 800f79a:	f000 bca2 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800f79e:	4b13      	ldr	r3, [pc, #76]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f003 0320 	and.w	r3, r3, #32
 800f7a6:	2b20      	cmp	r3, #32
 800f7a8:	d11c      	bne.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f7b0:	d118      	bne.n	800f7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d005      	beq.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800f7be:	4b0b      	ldr	r3, [pc, #44]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	0e1b      	lsrs	r3, r3, #24
 800f7c4:	f003 030f 	and.w	r3, r3, #15
 800f7c8:	e006      	b.n	800f7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800f7ca:	4b08      	ldr	r3, [pc, #32]	@ (800f7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800f7cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f7d0:	041b      	lsls	r3, r3, #16
 800f7d2:	0e1b      	lsrs	r3, r3, #24
 800f7d4:	f003 030f 	and.w	r3, r3, #15
 800f7d8:	4a06      	ldr	r2, [pc, #24]	@ (800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800f7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7e0:	f000 bc7f 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7e8:	f000 bc7b 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800f7ec:	46020c00 	.word	0x46020c00
 800f7f0:	00f42400 	.word	0x00f42400
 800f7f4:	08017bfc 	.word	0x08017bfc
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800f7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7fc:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800f800:	430b      	orrs	r3, r1
 800f802:	d14c      	bne.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800f804:	4ba6      	ldr	r3, [pc, #664]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f80a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800f80e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800f810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f812:	2b00      	cmp	r3, #0
 800f814:	d104      	bne.n	800f820 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f816:	f7fd fce1 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800f81a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f81c:	f000 bc61 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800f820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f826:	d104      	bne.n	800f832 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f828:	f7fd fbbc 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800f82c:	6378      	str	r0, [r7, #52]	@ 0x34
 800f82e:	f000 bc58 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800f832:	4b9b      	ldr	r3, [pc, #620]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f83a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f83e:	d107      	bne.n	800f850 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800f840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f846:	d103      	bne.n	800f850 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800f848:	4b96      	ldr	r3, [pc, #600]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800f84a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f84c:	f000 bc49 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800f850:	4b93      	ldr	r3, [pc, #588]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f003 0320 	and.w	r3, r3, #32
 800f858:	2b20      	cmp	r3, #32
 800f85a:	d11c      	bne.n	800f896 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800f85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f862:	d118      	bne.n	800f896 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f864:	4b8e      	ldr	r3, [pc, #568]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d005      	beq.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800f870:	4b8b      	ldr	r3, [pc, #556]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	0e1b      	lsrs	r3, r3, #24
 800f876:	f003 030f 	and.w	r3, r3, #15
 800f87a:	e006      	b.n	800f88a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800f87c:	4b88      	ldr	r3, [pc, #544]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f87e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f882:	041b      	lsls	r3, r3, #16
 800f884:	0e1b      	lsrs	r3, r3, #24
 800f886:	f003 030f 	and.w	r3, r3, #15
 800f88a:	4a87      	ldr	r2, [pc, #540]	@ (800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800f88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f890:	637b      	str	r3, [r7, #52]	@ 0x34
 800f892:	f000 bc26 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800f896:	2300      	movs	r3, #0
 800f898:	637b      	str	r3, [r7, #52]	@ 0x34
 800f89a:	f000 bc22 	b.w	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8a2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	d164      	bne.n	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f8aa:	4b7d      	ldr	r3, [pc, #500]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f8ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f8b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f8b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d120      	bne.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f8bc:	4b78      	ldr	r3, [pc, #480]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 0320 	and.w	r3, r3, #32
 800f8c4:	2b20      	cmp	r3, #32
 800f8c6:	d117      	bne.n	800f8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f8c8:	4b75      	ldr	r3, [pc, #468]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d005      	beq.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800f8d4:	4b72      	ldr	r3, [pc, #456]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	0e1b      	lsrs	r3, r3, #24
 800f8da:	f003 030f 	and.w	r3, r3, #15
 800f8de:	e006      	b.n	800f8ee <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800f8e0:	4b6f      	ldr	r3, [pc, #444]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f8e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f8e6:	041b      	lsls	r3, r3, #16
 800f8e8:	0e1b      	lsrs	r3, r3, #24
 800f8ea:	f003 030f 	and.w	r3, r3, #15
 800f8ee:	4a6e      	ldr	r2, [pc, #440]	@ (800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800f8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8f6:	e3f4      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8fc:	e3f1      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f8fe:	4b68      	ldr	r3, [pc, #416]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f90c:	d112      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800f90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f914:	d10e      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f916:	4b62      	ldr	r3, [pc, #392]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f91c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f924:	d102      	bne.n	800f92c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800f926:	23fa      	movs	r3, #250	@ 0xfa
 800f928:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f92a:	e3da      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800f92c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f930:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f932:	e3d6      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f934:	4b5a      	ldr	r3, [pc, #360]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f93c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f940:	d106      	bne.n	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800f942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f948:	d102      	bne.n	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800f94a:	4b56      	ldr	r3, [pc, #344]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800f94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f94e:	e3c8      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f950:	4b53      	ldr	r3, [pc, #332]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f956:	f003 0302 	and.w	r3, r3, #2
 800f95a:	2b02      	cmp	r3, #2
 800f95c:	d107      	bne.n	800f96e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800f95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f964:	d103      	bne.n	800f96e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800f966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f96a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f96c:	e3b9      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f96e:	2300      	movs	r3, #0
 800f970:	637b      	str	r3, [r7, #52]	@ 0x34
 800f972:	e3b6      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f974:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f978:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800f97c:	430b      	orrs	r3, r1
 800f97e:	d164      	bne.n	800fa4a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f980:	4b47      	ldr	r3, [pc, #284]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f986:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f98a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d120      	bne.n	800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f992:	4b43      	ldr	r3, [pc, #268]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0320 	and.w	r3, r3, #32
 800f99a:	2b20      	cmp	r3, #32
 800f99c:	d117      	bne.n	800f9ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f99e:	4b40      	ldr	r3, [pc, #256]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d005      	beq.n	800f9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800f9aa:	4b3d      	ldr	r3, [pc, #244]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	0e1b      	lsrs	r3, r3, #24
 800f9b0:	f003 030f 	and.w	r3, r3, #15
 800f9b4:	e006      	b.n	800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800f9b6:	4b3a      	ldr	r3, [pc, #232]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f9b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f9bc:	041b      	lsls	r3, r3, #16
 800f9be:	0e1b      	lsrs	r3, r3, #24
 800f9c0:	f003 030f 	and.w	r3, r3, #15
 800f9c4:	4a38      	ldr	r2, [pc, #224]	@ (800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800f9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9cc:	e389      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9d2:	e386      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f9d4:	4b32      	ldr	r3, [pc, #200]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f9d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f9da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9e2:	d112      	bne.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800f9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9ea:	d10e      	bne.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f9ec:	4b2c      	ldr	r3, [pc, #176]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800f9ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f9f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f9f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9fa:	d102      	bne.n	800fa02 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800f9fc:	23fa      	movs	r3, #250	@ 0xfa
 800f9fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa00:	e36f      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800fa02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800fa06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa08:	e36b      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800fa0a:	4b25      	ldr	r3, [pc, #148]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa16:	d106      	bne.n	800fa26 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800fa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fa1e:	d102      	bne.n	800fa26 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800fa20:	4b20      	ldr	r3, [pc, #128]	@ (800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800fa22:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa24:	e35d      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800fa26:	4b1e      	ldr	r3, [pc, #120]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800fa28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fa2c:	f003 0302 	and.w	r3, r3, #2
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d107      	bne.n	800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800fa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fa3a:	d103      	bne.n	800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800fa3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa40:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa42:	e34e      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800fa44:	2300      	movs	r3, #0
 800fa46:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa48:	e34b      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800fa4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa4e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800fa52:	430b      	orrs	r3, r1
 800fa54:	d14e      	bne.n	800faf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800fa56:	4b12      	ldr	r3, [pc, #72]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800fa58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa5c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800fa60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800fa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d103      	bne.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa68:	f7fd fbb8 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800fa6c:	6378      	str	r0, [r7, #52]	@ 0x34
 800fa6e:	e338      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800fa70:	4b0b      	ldr	r3, [pc, #44]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800fa72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fa76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa7e:	d119      	bne.n	800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800fa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fa86:	d115      	bne.n	800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa88:	4b05      	ldr	r3, [pc, #20]	@ (800faa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800fa8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fa8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fa92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa96:	d109      	bne.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800fa98:	23fa      	movs	r3, #250	@ 0xfa
 800fa9a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fa9c:	e321      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800fa9e:	bf00      	nop
 800faa0:	46020c00 	.word	0x46020c00
 800faa4:	00f42400 	.word	0x00f42400
 800faa8:	08017bfc 	.word	0x08017bfc
      }
      else
      {
        frequency = LSI_VALUE;
 800faac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800fab0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fab2:	e316      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800fab4:	4ba8      	ldr	r3, [pc, #672]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fabc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fac0:	d106      	bne.n	800fad0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800fac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fac8:	d102      	bne.n	800fad0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800faca:	4ba4      	ldr	r3, [pc, #656]	@ (800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800facc:	637b      	str	r3, [r7, #52]	@ 0x34
 800face:	e308      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800fad0:	4ba1      	ldr	r3, [pc, #644]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800fad6:	f003 0302 	and.w	r3, r3, #2
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d107      	bne.n	800faee <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800fade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fae0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800fae4:	d103      	bne.n	800faee <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800fae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800faea:	637b      	str	r3, [r7, #52]	@ 0x34
 800faec:	e2f9      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800faee:	2300      	movs	r3, #0
 800faf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800faf2:	e2f6      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800faf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faf8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800fafc:	430b      	orrs	r3, r1
 800fafe:	d12d      	bne.n	800fb5c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800fb00:	4b95      	ldr	r3, [pc, #596]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fb02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fb06:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800fb0a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800fb0c:	4b92      	ldr	r3, [pc, #584]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb18:	d105      	bne.n	800fb26 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800fb20:	4b8e      	ldr	r3, [pc, #568]	@ (800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800fb22:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb24:	e2dd      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800fb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb2c:	d107      	bne.n	800fb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe fb4c 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb3c:	e2d1      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb44:	d107      	bne.n	800fb56 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb46:	f107 0318 	add.w	r3, r7, #24
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fe fc9a 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb54:	e2c5      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800fb56:	2300      	movs	r3, #0
 800fb58:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb5a:	e2c2      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800fb5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb60:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800fb64:	430b      	orrs	r3, r1
 800fb66:	d156      	bne.n	800fc16 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800fb68:	4b7b      	ldr	r3, [pc, #492]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fb6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fb6e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800fb72:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800fb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fb7a:	d028      	beq.n	800fbce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800fb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fb82:	d845      	bhi.n	800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800fb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fb8a:	d013      	beq.n	800fbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800fb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fb92:	d83d      	bhi.n	800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800fb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d004      	beq.n	800fba4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fba0:	d004      	beq.n	800fbac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800fba2:	e035      	b.n	800fc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800fba4:	f7fd fb2e 	bl	800d204 <HAL_RCC_GetPCLK2Freq>
 800fba8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fbaa:	e29a      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fbac:	f7fd f9fa 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800fbb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fbb2:	e296      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fbb4:	4b68      	ldr	r3, [pc, #416]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fbbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fbc0:	d102      	bne.n	800fbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800fbc2:	4b66      	ldr	r3, [pc, #408]	@ (800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800fbc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fbc6:	e28c      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fbcc:	e289      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fbce:	4b62      	ldr	r3, [pc, #392]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f003 0320 	and.w	r3, r3, #32
 800fbd6:	2b20      	cmp	r3, #32
 800fbd8:	d117      	bne.n	800fc0a <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fbda:	4b5f      	ldr	r3, [pc, #380]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d005      	beq.n	800fbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800fbe6:	4b5c      	ldr	r3, [pc, #368]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fbe8:	689b      	ldr	r3, [r3, #8]
 800fbea:	0e1b      	lsrs	r3, r3, #24
 800fbec:	f003 030f 	and.w	r3, r3, #15
 800fbf0:	e006      	b.n	800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800fbf2:	4b59      	ldr	r3, [pc, #356]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fbf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fbf8:	041b      	lsls	r3, r3, #16
 800fbfa:	0e1b      	lsrs	r3, r3, #24
 800fbfc:	f003 030f 	and.w	r3, r3, #15
 800fc00:	4a57      	ldr	r2, [pc, #348]	@ (800fd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800fc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fc08:	e26b      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc0e:	e268      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800fc10:	2300      	movs	r3, #0
 800fc12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc14:	e265      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800fc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc1a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800fc1e:	430b      	orrs	r3, r1
 800fc20:	d156      	bne.n	800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800fc22:	4b4d      	ldr	r3, [pc, #308]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fc24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fc2c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fc34:	d028      	beq.n	800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800fc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fc3c:	d845      	bhi.n	800fcca <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc44:	d013      	beq.n	800fc6e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800fc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fc4c:	d83d      	bhi.n	800fcca <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800fc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc5a:	d004      	beq.n	800fc66 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800fc5c:	e035      	b.n	800fcca <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800fc5e:	f7fd fabd 	bl	800d1dc <HAL_RCC_GetPCLK1Freq>
 800fc62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fc64:	e23d      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fc66:	f7fd f99d 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800fc6a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fc6c:	e239      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fc6e:	4b3a      	ldr	r3, [pc, #232]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fc76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc7a:	d102      	bne.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800fc7c:	4b37      	ldr	r3, [pc, #220]	@ (800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800fc7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fc80:	e22f      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fc82:	2300      	movs	r3, #0
 800fc84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fc86:	e22c      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fc88:	4b33      	ldr	r3, [pc, #204]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 0320 	and.w	r3, r3, #32
 800fc90:	2b20      	cmp	r3, #32
 800fc92:	d117      	bne.n	800fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc94:	4b30      	ldr	r3, [pc, #192]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d005      	beq.n	800fcac <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800fca0:	4b2d      	ldr	r3, [pc, #180]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	0e1b      	lsrs	r3, r3, #24
 800fca6:	f003 030f 	and.w	r3, r3, #15
 800fcaa:	e006      	b.n	800fcba <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800fcac:	4b2a      	ldr	r3, [pc, #168]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fcae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fcb2:	041b      	lsls	r3, r3, #16
 800fcb4:	0e1b      	lsrs	r3, r3, #24
 800fcb6:	f003 030f 	and.w	r3, r3, #15
 800fcba:	4a29      	ldr	r2, [pc, #164]	@ (800fd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800fcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fcc2:	e20e      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fcc8:	e20b      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800fcca:	2300      	movs	r3, #0
 800fccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fcce:	e208      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcd4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800fcd8:	430b      	orrs	r3, r1
 800fcda:	d17c      	bne.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fcdc:	4b1e      	ldr	r3, [pc, #120]	@ (800fd58 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800fcde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fce2:	f003 0318 	and.w	r3, r3, #24
 800fce6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800fce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcea:	2b18      	cmp	r3, #24
 800fcec:	d870      	bhi.n	800fdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800fcee:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800fcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf4:	0800fd65 	.word	0x0800fd65
 800fcf8:	0800fdd1 	.word	0x0800fdd1
 800fcfc:	0800fdd1 	.word	0x0800fdd1
 800fd00:	0800fdd1 	.word	0x0800fdd1
 800fd04:	0800fdd1 	.word	0x0800fdd1
 800fd08:	0800fdd1 	.word	0x0800fdd1
 800fd0c:	0800fdd1 	.word	0x0800fdd1
 800fd10:	0800fdd1 	.word	0x0800fdd1
 800fd14:	0800fd6d 	.word	0x0800fd6d
 800fd18:	0800fdd1 	.word	0x0800fdd1
 800fd1c:	0800fdd1 	.word	0x0800fdd1
 800fd20:	0800fdd1 	.word	0x0800fdd1
 800fd24:	0800fdd1 	.word	0x0800fdd1
 800fd28:	0800fdd1 	.word	0x0800fdd1
 800fd2c:	0800fdd1 	.word	0x0800fdd1
 800fd30:	0800fdd1 	.word	0x0800fdd1
 800fd34:	0800fd75 	.word	0x0800fd75
 800fd38:	0800fdd1 	.word	0x0800fdd1
 800fd3c:	0800fdd1 	.word	0x0800fdd1
 800fd40:	0800fdd1 	.word	0x0800fdd1
 800fd44:	0800fdd1 	.word	0x0800fdd1
 800fd48:	0800fdd1 	.word	0x0800fdd1
 800fd4c:	0800fdd1 	.word	0x0800fdd1
 800fd50:	0800fdd1 	.word	0x0800fdd1
 800fd54:	0800fd8f 	.word	0x0800fd8f
 800fd58:	46020c00 	.word	0x46020c00
 800fd5c:	00f42400 	.word	0x00f42400
 800fd60:	08017bfc 	.word	0x08017bfc
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800fd64:	f7fd fa62 	bl	800d22c <HAL_RCC_GetPCLK3Freq>
 800fd68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fd6a:	e1ba      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fd6c:	f7fd f91a 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800fd70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fd72:	e1b6      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fd74:	4b9f      	ldr	r3, [pc, #636]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd80:	d102      	bne.n	800fd88 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800fd82:	4b9d      	ldr	r3, [pc, #628]	@ (800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800fd84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fd86:	e1ac      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fd8c:	e1a9      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fd8e:	4b99      	ldr	r3, [pc, #612]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f003 0320 	and.w	r3, r3, #32
 800fd96:	2b20      	cmp	r3, #32
 800fd98:	d117      	bne.n	800fdca <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd9a:	4b96      	ldr	r3, [pc, #600]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d005      	beq.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800fda6:	4b93      	ldr	r3, [pc, #588]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	0e1b      	lsrs	r3, r3, #24
 800fdac:	f003 030f 	and.w	r3, r3, #15
 800fdb0:	e006      	b.n	800fdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800fdb2:	4b90      	ldr	r3, [pc, #576]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fdb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fdb8:	041b      	lsls	r3, r3, #16
 800fdba:	0e1b      	lsrs	r3, r3, #24
 800fdbc:	f003 030f 	and.w	r3, r3, #15
 800fdc0:	4a8e      	ldr	r2, [pc, #568]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800fdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fdc8:	e18b      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fdce:	e188      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fdd4:	e185      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fdd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdda:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800fdde:	430b      	orrs	r3, r1
 800fde0:	d155      	bne.n	800fe8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fde2:	4b84      	ldr	r3, [pc, #528]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fde4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fde8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800fdec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800fdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fdf4:	d013      	beq.n	800fe1e <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800fdfc:	d844      	bhi.n	800fe88 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fe04:	d013      	beq.n	800fe2e <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800fe06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fe0c:	d83c      	bhi.n	800fe88 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800fe0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d014      	beq.n	800fe3e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800fe14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe1a:	d014      	beq.n	800fe46 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800fe1c:	e034      	b.n	800fe88 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe1e:	f107 0318 	add.w	r3, r7, #24
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fe fb2e 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe2c:	e159      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fe f9cc 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe3c:	e151      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fe3e:	f7fd f8b1 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800fe42:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fe44:	e14d      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fe46:	4b6b      	ldr	r3, [pc, #428]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f003 0320 	and.w	r3, r3, #32
 800fe4e:	2b20      	cmp	r3, #32
 800fe50:	d117      	bne.n	800fe82 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fe52:	4b68      	ldr	r3, [pc, #416]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d005      	beq.n	800fe6a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800fe5e:	4b65      	ldr	r3, [pc, #404]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	0e1b      	lsrs	r3, r3, #24
 800fe64:	f003 030f 	and.w	r3, r3, #15
 800fe68:	e006      	b.n	800fe78 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800fe6a:	4b62      	ldr	r3, [pc, #392]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fe6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fe70:	041b      	lsls	r3, r3, #16
 800fe72:	0e1b      	lsrs	r3, r3, #24
 800fe74:	f003 030f 	and.w	r3, r3, #15
 800fe78:	4a60      	ldr	r2, [pc, #384]	@ (800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800fe7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fe80:	e12f      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800fe82:	2300      	movs	r3, #0
 800fe84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe86:	e12c      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fe8c:	e129      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800fe8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe92:	1e59      	subs	r1, r3, #1
 800fe94:	ea52 0301 	orrs.w	r3, r2, r1
 800fe98:	d13c      	bne.n	800ff14 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800fe9a:	4b56      	ldr	r3, [pc, #344]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800fe9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fea0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800fea4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800fea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800feac:	d027      	beq.n	800fefe <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800feae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800feb4:	d82b      	bhi.n	800ff0e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800feb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800febc:	d017      	beq.n	800feee <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800febe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fec4:	d823      	bhi.n	800ff0e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800fec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d004      	beq.n	800fed6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800fecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fed2:	d004      	beq.n	800fede <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800fed4:	e01b      	b.n	800ff0e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fed6:	f7fd f865 	bl	800cfa4 <HAL_RCC_GetSysClockFreq>
 800feda:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800fedc:	e101      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fe f974 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800feec:	e0f9      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feee:	f107 0318 	add.w	r3, r7, #24
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fe fac6 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800fefc:	e0f1      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fefe:	f107 030c 	add.w	r3, r7, #12
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fc18 	bl	800e738 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ff0c:	e0e9      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ff12:	e0e6      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ff14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff18:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800ff1c:	430b      	orrs	r3, r1
 800ff1e:	d131      	bne.n	800ff84 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ff20:	4b34      	ldr	r3, [pc, #208]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ff22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ff26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff2a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800ff2c:	4b31      	ldr	r3, [pc, #196]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ff2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ff32:	f003 0302 	and.w	r3, r3, #2
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	d106      	bne.n	800ff48 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800ff3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d103      	bne.n	800ff48 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800ff40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff46:	e0cc      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800ff48:	4b2a      	ldr	r3, [pc, #168]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ff4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ff4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ff56:	d112      	bne.n	800ff7e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800ff58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff5e:	d10e      	bne.n	800ff7e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ff60:	4b24      	ldr	r3, [pc, #144]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ff62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ff66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff6e:	d102      	bne.n	800ff76 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800ff70:	23fa      	movs	r3, #250	@ 0xfa
 800ff72:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ff74:	e0b5      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ff76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ff7a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ff7c:	e0b1      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff82:	e0ae      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800ff84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff88:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ff8c:	430b      	orrs	r3, r1
 800ff8e:	d13b      	bne.n	8010008 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ff90:	4b18      	ldr	r3, [pc, #96]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ff92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ff96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ff9a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800ff9c:	4b15      	ldr	r3, [pc, #84]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ffa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffa8:	d105      	bne.n	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800ffb0:	4b13      	ldr	r3, [pc, #76]	@ (8010000 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800ffb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffb4:	e095      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800ffb6:	4b0f      	ldr	r3, [pc, #60]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ffbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffc2:	d106      	bne.n	800ffd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffca:	d102      	bne.n	800ffd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800ffcc:	4b0d      	ldr	r3, [pc, #52]	@ (8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800ffce:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffd0:	e087      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800ffd2:	4b08      	ldr	r3, [pc, #32]	@ (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ffda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ffde:	d106      	bne.n	800ffee <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800ffe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffe6:	d102      	bne.n	800ffee <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800ffe8:	4b03      	ldr	r3, [pc, #12]	@ (800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ffea:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffec:	e079      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800ffee:	2300      	movs	r3, #0
 800fff0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fff2:	e076      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800fff4:	46020c00 	.word	0x46020c00
 800fff8:	00f42400 	.word	0x00f42400
 800fffc:	08017bfc 	.word	0x08017bfc
 8010000:	02dc6c00 	.word	0x02dc6c00
 8010004:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8010008:	e9d7 2300 	ldrd	r2, r3, [r7]
 801000c:	1e99      	subs	r1, r3, #2
 801000e:	ea52 0301 	orrs.w	r3, r2, r1
 8010012:	d120      	bne.n	8010056 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 8010014:	4b35      	ldr	r3, [pc, #212]	@ (80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010016:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801001a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801001e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8010020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010022:	2b00      	cmp	r3, #0
 8010024:	d004      	beq.n	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 8010026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801002c:	d008      	beq.n	8010040 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 801002e:	e00f      	b.n	8010050 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010030:	f107 030c 	add.w	r3, r7, #12
 8010034:	4618      	mov	r0, r3
 8010036:	f7fe fb7f 	bl	800e738 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801003e:	e050      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010040:	f107 0318 	add.w	r3, r7, #24
 8010044:	4618      	mov	r0, r3
 8010046:	f7fe fa1d 	bl	800e484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 801004a:	6a3b      	ldr	r3, [r7, #32]
 801004c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801004e:	e048      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8010050:	2300      	movs	r3, #0
 8010052:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8010054:	e045      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8010056:	e9d7 2300 	ldrd	r2, r3, [r7]
 801005a:	f1a3 0108 	sub.w	r1, r3, #8
 801005e:	ea52 0301 	orrs.w	r3, r2, r1
 8010062:	d13c      	bne.n	80100de <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8010064:	4b21      	ldr	r3, [pc, #132]	@ (80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010066:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801006a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801006e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8010070:	4b1e      	ldr	r3, [pc, #120]	@ (80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801007c:	d105      	bne.n	801008a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 801007e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010080:	2b00      	cmp	r3, #0
 8010082:	d102      	bne.n	801008a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 8010084:	4b1a      	ldr	r3, [pc, #104]	@ (80100f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 8010086:	637b      	str	r3, [r7, #52]	@ 0x34
 8010088:	e02b      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 801008a:	4b18      	ldr	r3, [pc, #96]	@ (80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010096:	d106      	bne.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 8010098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801009e:	d102      	bne.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 80100a0:	4b14      	ldr	r3, [pc, #80]	@ (80100f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 80100a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80100a4:	e01d      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80100a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100ac:	d107      	bne.n	80100be <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fe f88c 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80100b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80100bc:	e011      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80100be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80100c4:	d108      	bne.n	80100d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fe f880 	bl	800e1d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80100d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d2:	085b      	lsrs	r3, r3, #1
 80100d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80100d6:	e004      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80100d8:	2300      	movs	r3, #0
 80100da:	637b      	str	r3, [r7, #52]	@ 0x34
 80100dc:	e001      	b.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80100e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3738      	adds	r7, #56	@ 0x38
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	46020c00 	.word	0x46020c00
 80100f0:	00f42400 	.word	0x00f42400
 80100f4:	007a1200 	.word	0x007a1200

080100f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010100:	4b47      	ldr	r3, [pc, #284]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a46      	ldr	r2, [pc, #280]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 8010106:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801010a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801010c:	f7f5 fcf4 	bl	8005af8 <HAL_GetTick>
 8010110:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010112:	e008      	b.n	8010126 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010114:	f7f5 fcf0 	bl	8005af8 <HAL_GetTick>
 8010118:	4602      	mov	r2, r0
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	2b02      	cmp	r3, #2
 8010120:	d901      	bls.n	8010126 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010122:	2303      	movs	r3, #3
 8010124:	e077      	b.n	8010216 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010126:	4b3e      	ldr	r3, [pc, #248]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1f0      	bne.n	8010114 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8010132:	4b3b      	ldr	r3, [pc, #236]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 8010134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010136:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801013a:	f023 0303 	bic.w	r3, r3, #3
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	6811      	ldr	r1, [r2, #0]
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	6852      	ldr	r2, [r2, #4]
 8010146:	3a01      	subs	r2, #1
 8010148:	0212      	lsls	r2, r2, #8
 801014a:	430a      	orrs	r2, r1
 801014c:	4934      	ldr	r1, [pc, #208]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 801014e:	4313      	orrs	r3, r2
 8010150:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8010152:	4b33      	ldr	r3, [pc, #204]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 8010154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010156:	4b33      	ldr	r3, [pc, #204]	@ (8010224 <RCCEx_PLL2_Config+0x12c>)
 8010158:	4013      	ands	r3, r2
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	6892      	ldr	r2, [r2, #8]
 801015e:	3a01      	subs	r2, #1
 8010160:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	68d2      	ldr	r2, [r2, #12]
 8010168:	3a01      	subs	r2, #1
 801016a:	0252      	lsls	r2, r2, #9
 801016c:	b292      	uxth	r2, r2
 801016e:	4311      	orrs	r1, r2
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	6912      	ldr	r2, [r2, #16]
 8010174:	3a01      	subs	r2, #1
 8010176:	0412      	lsls	r2, r2, #16
 8010178:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 801017c:	4311      	orrs	r1, r2
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	6952      	ldr	r2, [r2, #20]
 8010182:	3a01      	subs	r2, #1
 8010184:	0612      	lsls	r2, r2, #24
 8010186:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801018a:	430a      	orrs	r2, r1
 801018c:	4924      	ldr	r1, [pc, #144]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 801018e:	4313      	orrs	r3, r2
 8010190:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8010192:	4b23      	ldr	r3, [pc, #140]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 8010194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010196:	f023 020c 	bic.w	r2, r3, #12
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	4920      	ldr	r1, [pc, #128]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101a0:	4313      	orrs	r3, r2
 80101a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80101a4:	4b1e      	ldr	r3, [pc, #120]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a1b      	ldr	r3, [r3, #32]
 80101ac:	491c      	ldr	r1, [pc, #112]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101ae:	4313      	orrs	r3, r2
 80101b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80101b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b6:	4a1a      	ldr	r2, [pc, #104]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101b8:	f023 0310 	bic.w	r3, r3, #16
 80101bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80101be:	4b18      	ldr	r3, [pc, #96]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80101c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	69d2      	ldr	r2, [r2, #28]
 80101ce:	00d2      	lsls	r2, r2, #3
 80101d0:	4913      	ldr	r1, [pc, #76]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101d2:	4313      	orrs	r3, r2
 80101d4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80101d6:	4b12      	ldr	r3, [pc, #72]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101da:	4a11      	ldr	r2, [pc, #68]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101dc:	f043 0310 	orr.w	r3, r3, #16
 80101e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80101e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4a0e      	ldr	r2, [pc, #56]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 80101e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80101ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80101ee:	f7f5 fc83 	bl	8005af8 <HAL_GetTick>
 80101f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80101f4:	e008      	b.n	8010208 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80101f6:	f7f5 fc7f 	bl	8005af8 <HAL_GetTick>
 80101fa:	4602      	mov	r2, r0
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	2b02      	cmp	r3, #2
 8010202:	d901      	bls.n	8010208 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010204:	2303      	movs	r3, #3
 8010206:	e006      	b.n	8010216 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010208:	4b05      	ldr	r3, [pc, #20]	@ (8010220 <RCCEx_PLL2_Config+0x128>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010210:	2b00      	cmp	r3, #0
 8010212:	d0f0      	beq.n	80101f6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8010214:	2300      	movs	r3, #0

}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	46020c00 	.word	0x46020c00
 8010224:	80800000 	.word	0x80800000

08010228 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8010230:	4b47      	ldr	r3, [pc, #284]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a46      	ldr	r2, [pc, #280]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801023a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801023c:	f7f5 fc5c 	bl	8005af8 <HAL_GetTick>
 8010240:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010242:	e008      	b.n	8010256 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010244:	f7f5 fc58 	bl	8005af8 <HAL_GetTick>
 8010248:	4602      	mov	r2, r0
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	2b02      	cmp	r3, #2
 8010250:	d901      	bls.n	8010256 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010252:	2303      	movs	r3, #3
 8010254:	e077      	b.n	8010346 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010256:	4b3e      	ldr	r3, [pc, #248]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1f0      	bne.n	8010244 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8010262:	4b3b      	ldr	r3, [pc, #236]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010266:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801026a:	f023 0303 	bic.w	r3, r3, #3
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	6811      	ldr	r1, [r2, #0]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	6852      	ldr	r2, [r2, #4]
 8010276:	3a01      	subs	r2, #1
 8010278:	0212      	lsls	r2, r2, #8
 801027a:	430a      	orrs	r2, r1
 801027c:	4934      	ldr	r1, [pc, #208]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 801027e:	4313      	orrs	r3, r2
 8010280:	630b      	str	r3, [r1, #48]	@ 0x30
 8010282:	4b33      	ldr	r3, [pc, #204]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010286:	4b33      	ldr	r3, [pc, #204]	@ (8010354 <RCCEx_PLL3_Config+0x12c>)
 8010288:	4013      	ands	r3, r2
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	6892      	ldr	r2, [r2, #8]
 801028e:	3a01      	subs	r2, #1
 8010290:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	68d2      	ldr	r2, [r2, #12]
 8010298:	3a01      	subs	r2, #1
 801029a:	0252      	lsls	r2, r2, #9
 801029c:	b292      	uxth	r2, r2
 801029e:	4311      	orrs	r1, r2
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	6912      	ldr	r2, [r2, #16]
 80102a4:	3a01      	subs	r2, #1
 80102a6:	0412      	lsls	r2, r2, #16
 80102a8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80102ac:	4311      	orrs	r1, r2
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	6952      	ldr	r2, [r2, #20]
 80102b2:	3a01      	subs	r2, #1
 80102b4:	0612      	lsls	r2, r2, #24
 80102b6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80102ba:	430a      	orrs	r2, r1
 80102bc:	4924      	ldr	r1, [pc, #144]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102be:	4313      	orrs	r3, r2
 80102c0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80102c2:	4b23      	ldr	r3, [pc, #140]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102c6:	f023 020c 	bic.w	r2, r3, #12
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	699b      	ldr	r3, [r3, #24]
 80102ce:	4920      	ldr	r1, [pc, #128]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102d0:	4313      	orrs	r3, r2
 80102d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80102d4:	4b1e      	ldr	r3, [pc, #120]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a1b      	ldr	r3, [r3, #32]
 80102dc:	491c      	ldr	r1, [pc, #112]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102de:	4313      	orrs	r3, r2
 80102e0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80102e2:	4b1b      	ldr	r3, [pc, #108]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102e6:	4a1a      	ldr	r2, [pc, #104]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102e8:	f023 0310 	bic.w	r3, r3, #16
 80102ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80102ee:	4b18      	ldr	r3, [pc, #96]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 80102f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80102f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	69d2      	ldr	r2, [r2, #28]
 80102fe:	00d2      	lsls	r2, r2, #3
 8010300:	4913      	ldr	r1, [pc, #76]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010302:	4313      	orrs	r3, r2
 8010304:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8010306:	4b12      	ldr	r3, [pc, #72]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801030a:	4a11      	ldr	r2, [pc, #68]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 801030c:	f043 0310 	orr.w	r3, r3, #16
 8010310:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010312:	4b0f      	ldr	r3, [pc, #60]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a0e      	ldr	r2, [pc, #56]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 8010318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801031c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801031e:	f7f5 fbeb 	bl	8005af8 <HAL_GetTick>
 8010322:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010324:	e008      	b.n	8010338 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010326:	f7f5 fbe7 	bl	8005af8 <HAL_GetTick>
 801032a:	4602      	mov	r2, r0
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	2b02      	cmp	r3, #2
 8010332:	d901      	bls.n	8010338 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010334:	2303      	movs	r3, #3
 8010336:	e006      	b.n	8010346 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010338:	4b05      	ldr	r3, [pc, #20]	@ (8010350 <RCCEx_PLL3_Config+0x128>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0f0      	beq.n	8010326 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	46020c00 	.word	0x46020c00
 8010354:	80800000 	.word	0x80800000

08010358 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010360:	2301      	movs	r3, #1
 8010362:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d071      	beq.n	801044e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010370:	b2db      	uxtb	r3, r3
 8010372:	2b00      	cmp	r3, #0
 8010374:	d106      	bne.n	8010384 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7f4 fc50 	bl	8004c24 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2202      	movs	r2, #2
 8010388:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801038c:	4b32      	ldr	r3, [pc, #200]	@ (8010458 <HAL_RTC_Init+0x100>)
 801038e:	68db      	ldr	r3, [r3, #12]
 8010390:	f003 0310 	and.w	r3, r3, #16
 8010394:	2b10      	cmp	r3, #16
 8010396:	d051      	beq.n	801043c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010398:	4b2f      	ldr	r3, [pc, #188]	@ (8010458 <HAL_RTC_Init+0x100>)
 801039a:	22ca      	movs	r2, #202	@ 0xca
 801039c:	625a      	str	r2, [r3, #36]	@ 0x24
 801039e:	4b2e      	ldr	r3, [pc, #184]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103a0:	2253      	movs	r2, #83	@ 0x53
 80103a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 f88b 	bl	80104c0 <RTC_EnterInitMode>
 80103aa:	4603      	mov	r3, r0
 80103ac:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d13f      	bne.n	8010434 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80103b4:	4b28      	ldr	r3, [pc, #160]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103b6:	699b      	ldr	r3, [r3, #24]
 80103b8:	4a27      	ldr	r2, [pc, #156]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103ba:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80103be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103c2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80103c4:	4b24      	ldr	r3, [pc, #144]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103c6:	699a      	ldr	r2, [r3, #24]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6859      	ldr	r1, [r3, #4]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	4319      	orrs	r1, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	699b      	ldr	r3, [r3, #24]
 80103d6:	430b      	orrs	r3, r1
 80103d8:	491f      	ldr	r1, [pc, #124]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103da:	4313      	orrs	r3, r2
 80103dc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	68da      	ldr	r2, [r3, #12]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	041b      	lsls	r3, r3, #16
 80103e8:	491b      	ldr	r1, [pc, #108]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103ea:	4313      	orrs	r3, r2
 80103ec:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80103ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010458 <HAL_RTC_Init+0x100>)
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103fe:	430b      	orrs	r3, r1
 8010400:	4915      	ldr	r1, [pc, #84]	@ (8010458 <HAL_RTC_Init+0x100>)
 8010402:	4313      	orrs	r3, r2
 8010404:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 f896 	bl	8010538 <RTC_ExitInitMode>
 801040c:	4603      	mov	r3, r0
 801040e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8010410:	7bfb      	ldrb	r3, [r7, #15]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d10e      	bne.n	8010434 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8010416:	4b10      	ldr	r3, [pc, #64]	@ (8010458 <HAL_RTC_Init+0x100>)
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a19      	ldr	r1, [r3, #32]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	69db      	ldr	r3, [r3, #28]
 8010426:	4319      	orrs	r1, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	695b      	ldr	r3, [r3, #20]
 801042c:	430b      	orrs	r3, r1
 801042e:	490a      	ldr	r1, [pc, #40]	@ (8010458 <HAL_RTC_Init+0x100>)
 8010430:	4313      	orrs	r3, r2
 8010432:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010434:	4b08      	ldr	r3, [pc, #32]	@ (8010458 <HAL_RTC_Init+0x100>)
 8010436:	22ff      	movs	r2, #255	@ 0xff
 8010438:	625a      	str	r2, [r3, #36]	@ 0x24
 801043a:	e001      	b.n	8010440 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010440:	7bfb      	ldrb	r3, [r7, #15]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d103      	bne.n	801044e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 801044e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010450:	4618      	mov	r0, r3
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	46007800 	.word	0x46007800

0801045c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8010464:	4b15      	ldr	r3, [pc, #84]	@ (80104bc <HAL_RTC_WaitForSynchro+0x60>)
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	4a14      	ldr	r2, [pc, #80]	@ (80104bc <HAL_RTC_WaitForSynchro+0x60>)
 801046a:	f023 0320 	bic.w	r3, r3, #32
 801046e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010470:	f7f5 fb42 	bl	8005af8 <HAL_GetTick>
 8010474:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010476:	e013      	b.n	80104a0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010478:	f7f5 fb3e 	bl	8005af8 <HAL_GetTick>
 801047c:	4602      	mov	r2, r0
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010486:	d90b      	bls.n	80104a0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010488:	4b0c      	ldr	r3, [pc, #48]	@ (80104bc <HAL_RTC_WaitForSynchro+0x60>)
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	f003 0320 	and.w	r3, r3, #32
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10c      	bne.n	80104ae <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2203      	movs	r2, #3
 8010498:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 801049c:	2303      	movs	r3, #3
 801049e:	e008      	b.n	80104b2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80104a0:	4b06      	ldr	r3, [pc, #24]	@ (80104bc <HAL_RTC_WaitForSynchro+0x60>)
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	f003 0320 	and.w	r3, r3, #32
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d0e5      	beq.n	8010478 <HAL_RTC_WaitForSynchro+0x1c>
 80104ac:	e000      	b.n	80104b0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80104ae:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	46007800 	.word	0x46007800

080104c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80104cc:	4b19      	ldr	r3, [pc, #100]	@ (8010534 <RTC_EnterInitMode+0x74>)
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d128      	bne.n	801052a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80104d8:	4b16      	ldr	r3, [pc, #88]	@ (8010534 <RTC_EnterInitMode+0x74>)
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	4a15      	ldr	r2, [pc, #84]	@ (8010534 <RTC_EnterInitMode+0x74>)
 80104de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104e2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80104e4:	f7f5 fb08 	bl	8005af8 <HAL_GetTick>
 80104e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80104ea:	e013      	b.n	8010514 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80104ec:	f7f5 fb04 	bl	8005af8 <HAL_GetTick>
 80104f0:	4602      	mov	r2, r0
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80104fa:	d90b      	bls.n	8010514 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80104fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010534 <RTC_EnterInitMode+0x74>)
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10f      	bne.n	8010528 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8010508:	2303      	movs	r3, #3
 801050a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2203      	movs	r2, #3
 8010510:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010514:	4b07      	ldr	r3, [pc, #28]	@ (8010534 <RTC_EnterInitMode+0x74>)
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801051c:	2b00      	cmp	r3, #0
 801051e:	d104      	bne.n	801052a <RTC_EnterInitMode+0x6a>
 8010520:	7bfb      	ldrb	r3, [r7, #15]
 8010522:	2b03      	cmp	r3, #3
 8010524:	d1e2      	bne.n	80104ec <RTC_EnterInitMode+0x2c>
 8010526:	e000      	b.n	801052a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8010528:	bf00      	nop
        }
      }
    }
  }

  return status;
 801052a:	7bfb      	ldrb	r3, [r7, #15]
}
 801052c:	4618      	mov	r0, r3
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	46007800 	.word	0x46007800

08010538 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010544:	4b1a      	ldr	r3, [pc, #104]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	4a19      	ldr	r2, [pc, #100]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 801054a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801054e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010550:	4b17      	ldr	r3, [pc, #92]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 8010552:	699b      	ldr	r3, [r3, #24]
 8010554:	f003 0320 	and.w	r3, r3, #32
 8010558:	2b00      	cmp	r3, #0
 801055a:	d10c      	bne.n	8010576 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7ff ff7d 	bl	801045c <HAL_RTC_WaitForSynchro>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d01e      	beq.n	80105a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2203      	movs	r2, #3
 801056c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8010570:	2303      	movs	r3, #3
 8010572:	73fb      	strb	r3, [r7, #15]
 8010574:	e017      	b.n	80105a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010576:	4b0e      	ldr	r3, [pc, #56]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 8010578:	699b      	ldr	r3, [r3, #24]
 801057a:	4a0d      	ldr	r2, [pc, #52]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 801057c:	f023 0320 	bic.w	r3, r3, #32
 8010580:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7ff ff6a 	bl	801045c <HAL_RTC_WaitForSynchro>
 8010588:	4603      	mov	r3, r0
 801058a:	2b00      	cmp	r3, #0
 801058c:	d005      	beq.n	801059a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2203      	movs	r2, #3
 8010592:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8010596:	2303      	movs	r3, #3
 8010598:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801059a:	4b05      	ldr	r3, [pc, #20]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 801059c:	699b      	ldr	r3, [r3, #24]
 801059e:	4a04      	ldr	r2, [pc, #16]	@ (80105b0 <RTC_ExitInitMode+0x78>)
 80105a0:	f043 0320 	orr.w	r3, r3, #32
 80105a4:	6193      	str	r3, [r2, #24]
  }
  return status;
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	46007800 	.word	0x46007800

080105b4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	4910      	ldr	r1, [pc, #64]	@ (8010608 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80105c8:	4313      	orrs	r3, r2
 80105ca:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	689a      	ldr	r2, [r3, #8]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	431a      	orrs	r2, r3
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	699b      	ldr	r3, [r3, #24]
 80105da:	490c      	ldr	r1, [pc, #48]	@ (801060c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80105dc:	4313      	orrs	r3, r2
 80105de:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80105e0:	4b0a      	ldr	r3, [pc, #40]	@ (801060c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	6919      	ldr	r1, [r3, #16]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	695b      	ldr	r3, [r3, #20]
 80105f0:	041b      	lsls	r3, r3, #16
 80105f2:	430b      	orrs	r3, r1
 80105f4:	4905      	ldr	r1, [pc, #20]	@ (801060c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80105f6:	4313      	orrs	r3, r2
 80105f8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	46007800 	.word	0x46007800
 801060c:	46007c00 	.word	0x46007c00

08010610 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	2b02      	cmp	r3, #2
 8010622:	d904      	bls.n	801062e <HAL_SAI_InitProtocol+0x1e>
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	3b03      	subs	r3, #3
 8010628:	2b01      	cmp	r3, #1
 801062a:	d812      	bhi.n	8010652 <HAL_SAI_InitProtocol+0x42>
 801062c:	e008      	b.n	8010640 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	68b9      	ldr	r1, [r7, #8]
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f000 fa01 	bl	8010a3c <SAI_InitI2S>
 801063a:	4603      	mov	r3, r0
 801063c:	75fb      	strb	r3, [r7, #23]
      break;
 801063e:	e00b      	b.n	8010658 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	68b9      	ldr	r1, [r7, #8]
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f000 faaa 	bl	8010ba0 <SAI_InitPCM>
 801064c:	4603      	mov	r3, r0
 801064e:	75fb      	strb	r3, [r7, #23]
      break;
 8010650:	e002      	b.n	8010658 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8010652:	2301      	movs	r3, #1
 8010654:	75fb      	strb	r3, [r7, #23]
      break;
 8010656:	bf00      	nop
  }

  if (status == HAL_OK)
 8010658:	7dfb      	ldrb	r3, [r7, #23]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d104      	bne.n	8010668 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f000 f808 	bl	8010674 <HAL_SAI_Init>
 8010664:	4603      	mov	r3, r0
 8010666:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010668:	7dfb      	ldrb	r3, [r7, #23]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
	...

08010674 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b08a      	sub	sp, #40	@ 0x28
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d101      	bne.n	8010686 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8010682:	2301      	movs	r3, #1
 8010684:	e1ce      	b.n	8010a24 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801068c:	2b01      	cmp	r3, #1
 801068e:	d10e      	bne.n	80106ae <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a83      	ldr	r2, [pc, #524]	@ (80108a4 <HAL_SAI_Init+0x230>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d107      	bne.n	80106aa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d103      	bne.n	80106aa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80106aa:	2301      	movs	r3, #1
 80106ac:	e1ba      	b.n	8010a24 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2200      	movs	r2, #0
 80106be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7f4 fbd8 	bl	8004e78 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 faeb 	bl	8010ca4 <SAI_Disable>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80106d4:	2301      	movs	r3, #1
 80106d6:	e1a5      	b.n	8010a24 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2202      	movs	r2, #2
 80106dc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d00c      	beq.n	8010702 <HAL_SAI_Init+0x8e>
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d80d      	bhi.n	8010708 <HAL_SAI_Init+0x94>
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <HAL_SAI_Init+0x82>
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d003      	beq.n	80106fc <HAL_SAI_Init+0x88>
 80106f4:	e008      	b.n	8010708 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80106f6:	2300      	movs	r3, #0
 80106f8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80106fa:	e008      	b.n	801070e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80106fc:	2310      	movs	r3, #16
 80106fe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8010700:	e005      	b.n	801070e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8010702:	2320      	movs	r3, #32
 8010704:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8010706:	e002      	b.n	801070e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8010708:	2300      	movs	r3, #0
 801070a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801070c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	2b03      	cmp	r3, #3
 8010714:	d81d      	bhi.n	8010752 <HAL_SAI_Init+0xde>
 8010716:	a201      	add	r2, pc, #4	@ (adr r2, 801071c <HAL_SAI_Init+0xa8>)
 8010718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801071c:	0801072d 	.word	0x0801072d
 8010720:	08010733 	.word	0x08010733
 8010724:	0801073b 	.word	0x0801073b
 8010728:	08010743 	.word	0x08010743
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 801072c:	2300      	movs	r3, #0
 801072e:	61fb      	str	r3, [r7, #28]
      break;
 8010730:	e012      	b.n	8010758 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8010732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010736:	61fb      	str	r3, [r7, #28]
      break;
 8010738:	e00e      	b.n	8010758 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801073a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801073e:	61fb      	str	r3, [r7, #28]
      break;
 8010740:	e00a      	b.n	8010758 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8010742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010746:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8010748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074a:	f043 0301 	orr.w	r3, r3, #1
 801074e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8010750:	e002      	b.n	8010758 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8010752:	2300      	movs	r3, #0
 8010754:	61fb      	str	r3, [r7, #28]
      break;
 8010756:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4a51      	ldr	r2, [pc, #324]	@ (80108a4 <HAL_SAI_Init+0x230>)
 801075e:	4293      	cmp	r3, r2
 8010760:	d004      	beq.n	801076c <HAL_SAI_Init+0xf8>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a50      	ldr	r2, [pc, #320]	@ (80108a8 <HAL_SAI_Init+0x234>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d103      	bne.n	8010774 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 801076c:	4a4f      	ldr	r2, [pc, #316]	@ (80108ac <HAL_SAI_Init+0x238>)
 801076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010770:	6013      	str	r3, [r2, #0]
 8010772:	e002      	b.n	801077a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8010774:	4a4e      	ldr	r2, [pc, #312]	@ (80108b0 <HAL_SAI_Init+0x23c>)
 8010776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010778:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6a1b      	ldr	r3, [r3, #32]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d077      	beq.n	8010872 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	4a47      	ldr	r2, [pc, #284]	@ (80108a4 <HAL_SAI_Init+0x230>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d004      	beq.n	8010796 <HAL_SAI_Init+0x122>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4a45      	ldr	r2, [pc, #276]	@ (80108a8 <HAL_SAI_Init+0x234>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d107      	bne.n	80107a6 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8010796:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801079a:	f04f 0100 	mov.w	r1, #0
 801079e:	f7fe f925 	bl	800e9ec <HAL_RCCEx_GetPeriphCLKFreq>
 80107a2:	61b8      	str	r0, [r7, #24]
 80107a4:	e006      	b.n	80107b4 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80107a6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80107aa:	f04f 0100 	mov.w	r1, #0
 80107ae:	f7fe f91d 	bl	800e9ec <HAL_RCCEx_GetPeriphCLKFreq>
 80107b2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	699b      	ldr	r3, [r3, #24]
 80107b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80107bc:	d120      	bne.n	8010800 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107c2:	2b04      	cmp	r3, #4
 80107c4:	d102      	bne.n	80107cc <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80107c6:	2340      	movs	r3, #64	@ 0x40
 80107c8:	613b      	str	r3, [r7, #16]
 80107ca:	e00a      	b.n	80107e2 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107d0:	2b08      	cmp	r3, #8
 80107d2:	d103      	bne.n	80107dc <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80107d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80107d8:	613b      	str	r3, [r7, #16]
 80107da:	e002      	b.n	80107e2 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107e0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80107e2:	69ba      	ldr	r2, [r7, #24]
 80107e4:	4613      	mov	r3, r2
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	4413      	add	r3, r2
 80107ea:	005b      	lsls	r3, r3, #1
 80107ec:	4619      	mov	r1, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a1b      	ldr	r3, [r3, #32]
 80107f2:	693a      	ldr	r2, [r7, #16]
 80107f4:	fb02 f303 	mul.w	r3, r2, r3
 80107f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80107fc:	617b      	str	r3, [r7, #20]
 80107fe:	e017      	b.n	8010830 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010808:	d101      	bne.n	801080e <HAL_SAI_Init+0x19a>
 801080a:	2302      	movs	r3, #2
 801080c:	e000      	b.n	8010810 <HAL_SAI_Init+0x19c>
 801080e:	2301      	movs	r3, #1
 8010810:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8010812:	69ba      	ldr	r2, [r7, #24]
 8010814:	4613      	mov	r3, r2
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	4413      	add	r3, r2
 801081a:	005b      	lsls	r3, r3, #1
 801081c:	4619      	mov	r1, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6a1b      	ldr	r3, [r3, #32]
 8010822:	68fa      	ldr	r2, [r7, #12]
 8010824:	fb02 f303 	mul.w	r3, r2, r3
 8010828:	021b      	lsls	r3, r3, #8
 801082a:	fbb1 f3f3 	udiv	r3, r1, r3
 801082e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	4a20      	ldr	r2, [pc, #128]	@ (80108b4 <HAL_SAI_Init+0x240>)
 8010834:	fba2 2303 	umull	r2, r3, r2, r3
 8010838:	08da      	lsrs	r2, r3, #3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 801083e:	6979      	ldr	r1, [r7, #20]
 8010840:	4b1c      	ldr	r3, [pc, #112]	@ (80108b4 <HAL_SAI_Init+0x240>)
 8010842:	fba3 2301 	umull	r2, r3, r3, r1
 8010846:	08da      	lsrs	r2, r3, #3
 8010848:	4613      	mov	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	4413      	add	r3, r2
 801084e:	005b      	lsls	r3, r3, #1
 8010850:	1aca      	subs	r2, r1, r3
 8010852:	2a08      	cmp	r2, #8
 8010854:	d904      	bls.n	8010860 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801085a:	1c5a      	adds	r2, r3, #1
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010864:	2b04      	cmp	r3, #4
 8010866:	d104      	bne.n	8010872 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801086c:	085a      	lsrs	r2, r3, #1
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <HAL_SAI_Init+0x20e>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	2b02      	cmp	r3, #2
 8010880:	d109      	bne.n	8010896 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010886:	2b01      	cmp	r3, #1
 8010888:	d101      	bne.n	801088e <HAL_SAI_Init+0x21a>
 801088a:	2300      	movs	r3, #0
 801088c:	e001      	b.n	8010892 <HAL_SAI_Init+0x21e>
 801088e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010892:	623b      	str	r3, [r7, #32]
 8010894:	e012      	b.n	80108bc <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801089a:	2b01      	cmp	r3, #1
 801089c:	d10c      	bne.n	80108b8 <HAL_SAI_Init+0x244>
 801089e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108a2:	e00a      	b.n	80108ba <HAL_SAI_Init+0x246>
 80108a4:	40015404 	.word	0x40015404
 80108a8:	40015424 	.word	0x40015424
 80108ac:	40015400 	.word	0x40015400
 80108b0:	40015800 	.word	0x40015800
 80108b4:	cccccccd 	.word	0xcccccccd
 80108b8:	2300      	movs	r3, #0
 80108ba:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	6819      	ldr	r1, [r3, #0]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	4b59      	ldr	r3, [pc, #356]	@ (8010a2c <HAL_SAI_Init+0x3b8>)
 80108c8:	400b      	ands	r3, r1
 80108ca:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	6819      	ldr	r1, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	685a      	ldr	r2, [r3, #4]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80108e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108e6:	431a      	orrs	r2, r3
 80108e8:	6a3b      	ldr	r3, [r7, #32]
 80108ea:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 80108f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	695b      	ldr	r3, [r3, #20]
 80108fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010900:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010906:	051b      	lsls	r3, r3, #20
 8010908:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801090e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	691b      	ldr	r3, [r3, #16]
 8010914:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	430a      	orrs	r2, r1
 801091c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801092c:	f023 030f 	bic.w	r3, r3, #15
 8010930:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	6859      	ldr	r1, [r3, #4]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	69da      	ldr	r2, [r3, #28]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010940:	431a      	orrs	r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010946:	431a      	orrs	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	430a      	orrs	r2, r1
 801094e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	6899      	ldr	r1, [r3, #8]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	4b35      	ldr	r3, [pc, #212]	@ (8010a30 <HAL_SAI_Init+0x3bc>)
 801095c:	400b      	ands	r3, r1
 801095e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6899      	ldr	r1, [r3, #8]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801096a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010970:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8010976:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 801097c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010982:	3b01      	subs	r3, #1
 8010984:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8010986:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	430a      	orrs	r2, r1
 801098e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	68d9      	ldr	r1, [r3, #12]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 801099e:	400b      	ands	r3, r1
 80109a0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	68d9      	ldr	r1, [r3, #12]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109b6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80109b8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109be:	3b01      	subs	r3, #1
 80109c0:	021b      	lsls	r3, r3, #8
 80109c2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a18      	ldr	r2, [pc, #96]	@ (8010a34 <HAL_SAI_Init+0x3c0>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d119      	bne.n	8010a0a <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80109d6:	4b18      	ldr	r3, [pc, #96]	@ (8010a38 <HAL_SAI_Init+0x3c4>)
 80109d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109da:	4a17      	ldr	r2, [pc, #92]	@ (8010a38 <HAL_SAI_Init+0x3c4>)
 80109dc:	f023 0301 	bic.w	r3, r3, #1
 80109e0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d10e      	bne.n	8010a0a <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109f4:	3b01      	subs	r3, #1
 80109f6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80109f8:	490f      	ldr	r1, [pc, #60]	@ (8010a38 <HAL_SAI_Init+0x3c4>)
 80109fa:	4313      	orrs	r3, r2
 80109fc:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80109fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010a38 <HAL_SAI_Init+0x3c4>)
 8010a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a02:	4a0d      	ldr	r2, [pc, #52]	@ (8010a38 <HAL_SAI_Init+0x3c4>)
 8010a04:	f043 0301 	orr.w	r3, r3, #1
 8010a08:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3728      	adds	r7, #40	@ 0x28
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	f005c010 	.word	0xf005c010
 8010a30:	fff88000 	.word	0xfff88000
 8010a34:	40015404 	.word	0x40015404
 8010a38:	40015400 	.word	0x40015400

08010a3c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b087      	sub	sp, #28
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2200      	movs	r2, #0
 8010a52:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2200      	movs	r2, #0
 8010a58:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d003      	beq.n	8010a6a <SAI_InitI2S+0x2e>
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d103      	bne.n	8010a72 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8010a70:	e002      	b.n	8010a78 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2201      	movs	r2, #1
 8010a76:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a86:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	683a      	ldr	r2, [r7, #0]
 8010a92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	f003 0301 	and.w	r3, r3, #1
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d001      	beq.n	8010aa2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e077      	b.n	8010b92 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d107      	bne.n	8010ab8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010ab4:	665a      	str	r2, [r3, #100]	@ 0x64
 8010ab6:	e006      	b.n	8010ac6 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8010abe:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b03      	cmp	r3, #3
 8010aca:	d84f      	bhi.n	8010b6c <SAI_InitI2S+0x130>
 8010acc:	a201      	add	r2, pc, #4	@ (adr r2, 8010ad4 <SAI_InitI2S+0x98>)
 8010ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad2:	bf00      	nop
 8010ad4:	08010ae5 	.word	0x08010ae5
 8010ad8:	08010b07 	.word	0x08010b07
 8010adc:	08010b29 	.word	0x08010b29
 8010ae0:	08010b4b 	.word	0x08010b4b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2280      	movs	r2, #128	@ 0x80
 8010ae8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	085b      	lsrs	r3, r3, #1
 8010aee:	015a      	lsls	r2, r3, #5
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	085b      	lsrs	r3, r3, #1
 8010af8:	011a      	lsls	r2, r3, #4
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2240      	movs	r2, #64	@ 0x40
 8010b02:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010b04:	e035      	b.n	8010b72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2280      	movs	r2, #128	@ 0x80
 8010b0a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	085b      	lsrs	r3, r3, #1
 8010b10:	019a      	lsls	r2, r3, #6
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	085b      	lsrs	r3, r3, #1
 8010b1a:	015a      	lsls	r2, r3, #5
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2280      	movs	r2, #128	@ 0x80
 8010b24:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010b26:	e024      	b.n	8010b72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	22c0      	movs	r2, #192	@ 0xc0
 8010b2c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	085b      	lsrs	r3, r3, #1
 8010b32:	019a      	lsls	r2, r3, #6
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	085b      	lsrs	r3, r3, #1
 8010b3c:	015a      	lsls	r2, r3, #5
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2280      	movs	r2, #128	@ 0x80
 8010b46:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010b48:	e013      	b.n	8010b72 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	22e0      	movs	r2, #224	@ 0xe0
 8010b4e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	085b      	lsrs	r3, r3, #1
 8010b54:	019a      	lsls	r2, r3, #6
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	085b      	lsrs	r3, r3, #1
 8010b5e:	015a      	lsls	r2, r3, #5
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2280      	movs	r2, #128	@ 0x80
 8010b68:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010b6a:	e002      	b.n	8010b72 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b70:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d10b      	bne.n	8010b90 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d102      	bne.n	8010b84 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2210      	movs	r2, #16
 8010b82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d102      	bne.n	8010b90 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2208      	movs	r2, #8
 8010b8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8010b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	371c      	adds	r7, #28
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop

08010ba0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b087      	sub	sp, #28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
 8010bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d003      	beq.n	8010bce <SAI_InitPCM+0x2e>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	2b02      	cmp	r3, #2
 8010bcc:	d103      	bne.n	8010bd6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8010bd4:	e002      	b.n	8010bdc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2200      	movs	r2, #0
 8010be0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8010be8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010bf0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	683a      	ldr	r2, [r7, #0]
 8010bfc:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c04:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	2b04      	cmp	r3, #4
 8010c0a:	d103      	bne.n	8010c14 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	659a      	str	r2, [r3, #88]	@ 0x58
 8010c12:	e002      	b.n	8010c1a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	220d      	movs	r2, #13
 8010c18:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2b03      	cmp	r3, #3
 8010c1e:	d837      	bhi.n	8010c90 <SAI_InitPCM+0xf0>
 8010c20:	a201      	add	r2, pc, #4	@ (adr r2, 8010c28 <SAI_InitPCM+0x88>)
 8010c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c26:	bf00      	nop
 8010c28:	08010c39 	.word	0x08010c39
 8010c2c:	08010c4f 	.word	0x08010c4f
 8010c30:	08010c65 	.word	0x08010c65
 8010c34:	08010c7b 	.word	0x08010c7b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2280      	movs	r2, #128	@ 0x80
 8010c3c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	011a      	lsls	r2, r3, #4
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2240      	movs	r2, #64	@ 0x40
 8010c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010c4c:	e023      	b.n	8010c96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2280      	movs	r2, #128	@ 0x80
 8010c52:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	015a      	lsls	r2, r3, #5
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2280      	movs	r2, #128	@ 0x80
 8010c60:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010c62:	e018      	b.n	8010c96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	22c0      	movs	r2, #192	@ 0xc0
 8010c68:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	015a      	lsls	r2, r3, #5
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2280      	movs	r2, #128	@ 0x80
 8010c76:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010c78:	e00d      	b.n	8010c96 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	22e0      	movs	r2, #224	@ 0xe0
 8010c7e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	015a      	lsls	r2, r3, #5
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2280      	movs	r2, #128	@ 0x80
 8010c8c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010c8e:	e002      	b.n	8010c96 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	75fb      	strb	r3, [r7, #23]
      break;
 8010c94:	bf00      	nop
  }

  return status;
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	371c      	adds	r7, #28
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010cac:	4b18      	ldr	r3, [pc, #96]	@ (8010d10 <SAI_Disable+0x6c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4a18      	ldr	r2, [pc, #96]	@ (8010d14 <SAI_Disable+0x70>)
 8010cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8010cb6:	0b1b      	lsrs	r3, r3, #12
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8010cce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10a      	bne.n	8010cec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010cdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8010ce6:	2303      	movs	r3, #3
 8010ce8:	72fb      	strb	r3, [r7, #11]
      break;
 8010cea:	e009      	b.n	8010d00 <SAI_Disable+0x5c>
    }
    count--;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1e7      	bne.n	8010cd0 <SAI_Disable+0x2c>

  return status;
 8010d00:	7afb      	ldrb	r3, [r7, #11]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	2000018c 	.word	0x2000018c
 8010d14:	95cbec1b 	.word	0x95cbec1b

08010d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d101      	bne.n	8010d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010d26:	2301      	movs	r3, #1
 8010d28:	e049      	b.n	8010dbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f7f3 ffbc 	bl	8004cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2202      	movs	r2, #2
 8010d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	3304      	adds	r3, #4
 8010d54:	4619      	mov	r1, r3
 8010d56:	4610      	mov	r0, r2
 8010d58:	f000 f94a 	bl	8010ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2201      	movs	r2, #1
 8010d60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2201      	movs	r2, #1
 8010d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2201      	movs	r2, #1
 8010d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2201      	movs	r2, #1
 8010d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2201      	movs	r2, #1
 8010d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2201      	movs	r2, #1
 8010d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2201      	movs	r2, #1
 8010da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2201      	movs	r2, #1
 8010da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2201      	movs	r2, #1
 8010db0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2201      	movs	r2, #1
 8010db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010dbc:	2300      	movs	r3, #0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
	...

08010dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d101      	bne.n	8010de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010de2:	2302      	movs	r3, #2
 8010de4:	e0ff      	b.n	8010fe6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2201      	movs	r2, #1
 8010dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b14      	cmp	r3, #20
 8010df2:	f200 80f0 	bhi.w	8010fd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010df6:	a201      	add	r2, pc, #4	@ (adr r2, 8010dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfc:	08010e51 	.word	0x08010e51
 8010e00:	08010fd7 	.word	0x08010fd7
 8010e04:	08010fd7 	.word	0x08010fd7
 8010e08:	08010fd7 	.word	0x08010fd7
 8010e0c:	08010e91 	.word	0x08010e91
 8010e10:	08010fd7 	.word	0x08010fd7
 8010e14:	08010fd7 	.word	0x08010fd7
 8010e18:	08010fd7 	.word	0x08010fd7
 8010e1c:	08010ed3 	.word	0x08010ed3
 8010e20:	08010fd7 	.word	0x08010fd7
 8010e24:	08010fd7 	.word	0x08010fd7
 8010e28:	08010fd7 	.word	0x08010fd7
 8010e2c:	08010f13 	.word	0x08010f13
 8010e30:	08010fd7 	.word	0x08010fd7
 8010e34:	08010fd7 	.word	0x08010fd7
 8010e38:	08010fd7 	.word	0x08010fd7
 8010e3c:	08010f55 	.word	0x08010f55
 8010e40:	08010fd7 	.word	0x08010fd7
 8010e44:	08010fd7 	.word	0x08010fd7
 8010e48:	08010fd7 	.word	0x08010fd7
 8010e4c:	08010f95 	.word	0x08010f95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68b9      	ldr	r1, [r7, #8]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 f9d0 	bl	80111fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	699a      	ldr	r2, [r3, #24]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f042 0208 	orr.w	r2, r2, #8
 8010e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	699a      	ldr	r2, [r3, #24]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f022 0204 	bic.w	r2, r2, #4
 8010e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	6999      	ldr	r1, [r3, #24]
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	691a      	ldr	r2, [r3, #16]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	430a      	orrs	r2, r1
 8010e8c:	619a      	str	r2, [r3, #24]
      break;
 8010e8e:	e0a5      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	68b9      	ldr	r1, [r7, #8]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 fa72 	bl	8011380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	699a      	ldr	r2, [r3, #24]
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	699a      	ldr	r2, [r3, #24]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	6999      	ldr	r1, [r3, #24]
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	021a      	lsls	r2, r3, #8
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	430a      	orrs	r2, r1
 8010ece:	619a      	str	r2, [r3, #24]
      break;
 8010ed0:	e084      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	68b9      	ldr	r1, [r7, #8]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f000 fb01 	bl	80114e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	69da      	ldr	r2, [r3, #28]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f042 0208 	orr.w	r2, r2, #8
 8010eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	69da      	ldr	r2, [r3, #28]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f022 0204 	bic.w	r2, r2, #4
 8010efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	69d9      	ldr	r1, [r3, #28]
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	691a      	ldr	r2, [r3, #16]
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	430a      	orrs	r2, r1
 8010f0e:	61da      	str	r2, [r3, #28]
      break;
 8010f10:	e064      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	68b9      	ldr	r1, [r7, #8]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f000 fb8f 	bl	801163c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	69da      	ldr	r2, [r3, #28]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	69da      	ldr	r2, [r3, #28]
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	69d9      	ldr	r1, [r3, #28]
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	021a      	lsls	r2, r3, #8
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	430a      	orrs	r2, r1
 8010f50:	61da      	str	r2, [r3, #28]
      break;
 8010f52:	e043      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	68b9      	ldr	r1, [r7, #8]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f000 fc1e 	bl	801179c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f042 0208 	orr.w	r2, r2, #8
 8010f6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f022 0204 	bic.w	r2, r2, #4
 8010f7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	691a      	ldr	r2, [r3, #16]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	430a      	orrs	r2, r1
 8010f90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8010f92:	e023      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	68b9      	ldr	r1, [r7, #8]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f000 fc80 	bl	80118a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010fae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010fbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	021a      	lsls	r2, r3, #8
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	430a      	orrs	r2, r1
 8010fd2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8010fd4:	e002      	b.n	8010fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8010fda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop

08010ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4a6e      	ldr	r2, [pc, #440]	@ (80111bc <TIM_Base_SetConfig+0x1cc>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d02b      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	4a6d      	ldr	r2, [pc, #436]	@ (80111c0 <TIM_Base_SetConfig+0x1d0>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d027      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011016:	d023      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801101e:	d01f      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	4a68      	ldr	r2, [pc, #416]	@ (80111c4 <TIM_Base_SetConfig+0x1d4>)
 8011024:	4293      	cmp	r3, r2
 8011026:	d01b      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	4a67      	ldr	r2, [pc, #412]	@ (80111c8 <TIM_Base_SetConfig+0x1d8>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d017      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	4a66      	ldr	r2, [pc, #408]	@ (80111cc <TIM_Base_SetConfig+0x1dc>)
 8011034:	4293      	cmp	r3, r2
 8011036:	d013      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	4a65      	ldr	r2, [pc, #404]	@ (80111d0 <TIM_Base_SetConfig+0x1e0>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d00f      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	4a64      	ldr	r2, [pc, #400]	@ (80111d4 <TIM_Base_SetConfig+0x1e4>)
 8011044:	4293      	cmp	r3, r2
 8011046:	d00b      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4a63      	ldr	r2, [pc, #396]	@ (80111d8 <TIM_Base_SetConfig+0x1e8>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d007      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a62      	ldr	r2, [pc, #392]	@ (80111dc <TIM_Base_SetConfig+0x1ec>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d003      	beq.n	8011060 <TIM_Base_SetConfig+0x70>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a61      	ldr	r2, [pc, #388]	@ (80111e0 <TIM_Base_SetConfig+0x1f0>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d108      	bne.n	8011072 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	68fa      	ldr	r2, [r7, #12]
 801106e:	4313      	orrs	r3, r2
 8011070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	4a51      	ldr	r2, [pc, #324]	@ (80111bc <TIM_Base_SetConfig+0x1cc>)
 8011076:	4293      	cmp	r3, r2
 8011078:	d043      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4a50      	ldr	r2, [pc, #320]	@ (80111c0 <TIM_Base_SetConfig+0x1d0>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d03f      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011088:	d03b      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011090:	d037      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4a4b      	ldr	r2, [pc, #300]	@ (80111c4 <TIM_Base_SetConfig+0x1d4>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d033      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4a4a      	ldr	r2, [pc, #296]	@ (80111c8 <TIM_Base_SetConfig+0x1d8>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d02f      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4a49      	ldr	r2, [pc, #292]	@ (80111cc <TIM_Base_SetConfig+0x1dc>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d02b      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4a48      	ldr	r2, [pc, #288]	@ (80111d0 <TIM_Base_SetConfig+0x1e0>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d027      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	4a47      	ldr	r2, [pc, #284]	@ (80111d4 <TIM_Base_SetConfig+0x1e4>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d023      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4a46      	ldr	r2, [pc, #280]	@ (80111d8 <TIM_Base_SetConfig+0x1e8>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d01f      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4a45      	ldr	r2, [pc, #276]	@ (80111dc <TIM_Base_SetConfig+0x1ec>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d01b      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4a44      	ldr	r2, [pc, #272]	@ (80111e0 <TIM_Base_SetConfig+0x1f0>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d017      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4a43      	ldr	r2, [pc, #268]	@ (80111e4 <TIM_Base_SetConfig+0x1f4>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d013      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	4a42      	ldr	r2, [pc, #264]	@ (80111e8 <TIM_Base_SetConfig+0x1f8>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d00f      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	4a41      	ldr	r2, [pc, #260]	@ (80111ec <TIM_Base_SetConfig+0x1fc>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d00b      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4a40      	ldr	r2, [pc, #256]	@ (80111f0 <TIM_Base_SetConfig+0x200>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d007      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4a3f      	ldr	r2, [pc, #252]	@ (80111f4 <TIM_Base_SetConfig+0x204>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d003      	beq.n	8011102 <TIM_Base_SetConfig+0x112>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a3e      	ldr	r2, [pc, #248]	@ (80111f8 <TIM_Base_SetConfig+0x208>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d108      	bne.n	8011114 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	4313      	orrs	r3, r2
 8011112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	4313      	orrs	r3, r2
 8011120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	689a      	ldr	r2, [r3, #8]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4a20      	ldr	r2, [pc, #128]	@ (80111bc <TIM_Base_SetConfig+0x1cc>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d023      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a1f      	ldr	r2, [pc, #124]	@ (80111c0 <TIM_Base_SetConfig+0x1d0>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d01f      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a24      	ldr	r2, [pc, #144]	@ (80111dc <TIM_Base_SetConfig+0x1ec>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d01b      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4a23      	ldr	r2, [pc, #140]	@ (80111e0 <TIM_Base_SetConfig+0x1f0>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d017      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a22      	ldr	r2, [pc, #136]	@ (80111e4 <TIM_Base_SetConfig+0x1f4>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d013      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4a21      	ldr	r2, [pc, #132]	@ (80111e8 <TIM_Base_SetConfig+0x1f8>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d00f      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a20      	ldr	r2, [pc, #128]	@ (80111ec <TIM_Base_SetConfig+0x1fc>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d00b      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4a1f      	ldr	r2, [pc, #124]	@ (80111f0 <TIM_Base_SetConfig+0x200>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d007      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4a1e      	ldr	r2, [pc, #120]	@ (80111f4 <TIM_Base_SetConfig+0x204>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d003      	beq.n	8011188 <TIM_Base_SetConfig+0x198>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4a1d      	ldr	r2, [pc, #116]	@ (80111f8 <TIM_Base_SetConfig+0x208>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d103      	bne.n	8011190 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	691a      	ldr	r2, [r3, #16]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	691b      	ldr	r3, [r3, #16]
 801119a:	f003 0301 	and.w	r3, r3, #1
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d105      	bne.n	80111ae <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	f023 0201 	bic.w	r2, r3, #1
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	611a      	str	r2, [r3, #16]
  }
}
 80111ae:	bf00      	nop
 80111b0:	3714      	adds	r7, #20
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	40012c00 	.word	0x40012c00
 80111c0:	50012c00 	.word	0x50012c00
 80111c4:	40000400 	.word	0x40000400
 80111c8:	50000400 	.word	0x50000400
 80111cc:	40000800 	.word	0x40000800
 80111d0:	50000800 	.word	0x50000800
 80111d4:	40000c00 	.word	0x40000c00
 80111d8:	50000c00 	.word	0x50000c00
 80111dc:	40013400 	.word	0x40013400
 80111e0:	50013400 	.word	0x50013400
 80111e4:	40014000 	.word	0x40014000
 80111e8:	50014000 	.word	0x50014000
 80111ec:	40014400 	.word	0x40014400
 80111f0:	50014400 	.word	0x50014400
 80111f4:	40014800 	.word	0x40014800
 80111f8:	50014800 	.word	0x50014800

080111fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b087      	sub	sp, #28
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a1b      	ldr	r3, [r3, #32]
 801120a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6a1b      	ldr	r3, [r3, #32]
 8011210:	f023 0201 	bic.w	r2, r3, #1
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	699b      	ldr	r3, [r3, #24]
 8011222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801122a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801122e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f023 0303 	bic.w	r3, r3, #3
 8011236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	4313      	orrs	r3, r2
 8011240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	f023 0302 	bic.w	r3, r3, #2
 8011248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	697a      	ldr	r2, [r7, #20]
 8011250:	4313      	orrs	r3, r2
 8011252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4a40      	ldr	r2, [pc, #256]	@ (8011358 <TIM_OC1_SetConfig+0x15c>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d023      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a3f      	ldr	r2, [pc, #252]	@ (801135c <TIM_OC1_SetConfig+0x160>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d01f      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a3e      	ldr	r2, [pc, #248]	@ (8011360 <TIM_OC1_SetConfig+0x164>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d01b      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	4a3d      	ldr	r2, [pc, #244]	@ (8011364 <TIM_OC1_SetConfig+0x168>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d017      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4a3c      	ldr	r2, [pc, #240]	@ (8011368 <TIM_OC1_SetConfig+0x16c>)
 8011278:	4293      	cmp	r3, r2
 801127a:	d013      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a3b      	ldr	r2, [pc, #236]	@ (801136c <TIM_OC1_SetConfig+0x170>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d00f      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a3a      	ldr	r2, [pc, #232]	@ (8011370 <TIM_OC1_SetConfig+0x174>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d00b      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a39      	ldr	r2, [pc, #228]	@ (8011374 <TIM_OC1_SetConfig+0x178>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d007      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a38      	ldr	r2, [pc, #224]	@ (8011378 <TIM_OC1_SetConfig+0x17c>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d003      	beq.n	80112a4 <TIM_OC1_SetConfig+0xa8>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a37      	ldr	r2, [pc, #220]	@ (801137c <TIM_OC1_SetConfig+0x180>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d10c      	bne.n	80112be <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	f023 0308 	bic.w	r3, r3, #8
 80112aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	697a      	ldr	r2, [r7, #20]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	f023 0304 	bic.w	r3, r3, #4
 80112bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4a25      	ldr	r2, [pc, #148]	@ (8011358 <TIM_OC1_SetConfig+0x15c>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d023      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a24      	ldr	r2, [pc, #144]	@ (801135c <TIM_OC1_SetConfig+0x160>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d01f      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a23      	ldr	r2, [pc, #140]	@ (8011360 <TIM_OC1_SetConfig+0x164>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d01b      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a22      	ldr	r2, [pc, #136]	@ (8011364 <TIM_OC1_SetConfig+0x168>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d017      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a21      	ldr	r2, [pc, #132]	@ (8011368 <TIM_OC1_SetConfig+0x16c>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d013      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a20      	ldr	r2, [pc, #128]	@ (801136c <TIM_OC1_SetConfig+0x170>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d00f      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a1f      	ldr	r2, [pc, #124]	@ (8011370 <TIM_OC1_SetConfig+0x174>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d00b      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4a1e      	ldr	r2, [pc, #120]	@ (8011374 <TIM_OC1_SetConfig+0x178>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d007      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a1d      	ldr	r2, [pc, #116]	@ (8011378 <TIM_OC1_SetConfig+0x17c>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d003      	beq.n	801130e <TIM_OC1_SetConfig+0x112>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a1c      	ldr	r2, [pc, #112]	@ (801137c <TIM_OC1_SetConfig+0x180>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d111      	bne.n	8011332 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801131c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	695b      	ldr	r3, [r3, #20]
 8011322:	693a      	ldr	r2, [r7, #16]
 8011324:	4313      	orrs	r3, r2
 8011326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	4313      	orrs	r3, r2
 8011330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	693a      	ldr	r2, [r7, #16]
 8011336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68fa      	ldr	r2, [r7, #12]
 801133c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	685a      	ldr	r2, [r3, #4]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	621a      	str	r2, [r3, #32]
}
 801134c:	bf00      	nop
 801134e:	371c      	adds	r7, #28
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr
 8011358:	40012c00 	.word	0x40012c00
 801135c:	50012c00 	.word	0x50012c00
 8011360:	40013400 	.word	0x40013400
 8011364:	50013400 	.word	0x50013400
 8011368:	40014000 	.word	0x40014000
 801136c:	50014000 	.word	0x50014000
 8011370:	40014400 	.word	0x40014400
 8011374:	50014400 	.word	0x50014400
 8011378:	40014800 	.word	0x40014800
 801137c:	50014800 	.word	0x50014800

08011380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011380:	b480      	push	{r7}
 8011382:	b087      	sub	sp, #28
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6a1b      	ldr	r3, [r3, #32]
 801138e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6a1b      	ldr	r3, [r3, #32]
 8011394:	f023 0210 	bic.w	r2, r3, #16
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	699b      	ldr	r3, [r3, #24]
 80113a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80113ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80113ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	021b      	lsls	r3, r3, #8
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	f023 0320 	bic.w	r3, r3, #32
 80113ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	689b      	ldr	r3, [r3, #8]
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	697a      	ldr	r2, [r7, #20]
 80113d8:	4313      	orrs	r3, r2
 80113da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a36      	ldr	r2, [pc, #216]	@ (80114b8 <TIM_OC2_SetConfig+0x138>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d00b      	beq.n	80113fc <TIM_OC2_SetConfig+0x7c>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a35      	ldr	r2, [pc, #212]	@ (80114bc <TIM_OC2_SetConfig+0x13c>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d007      	beq.n	80113fc <TIM_OC2_SetConfig+0x7c>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4a34      	ldr	r2, [pc, #208]	@ (80114c0 <TIM_OC2_SetConfig+0x140>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d003      	beq.n	80113fc <TIM_OC2_SetConfig+0x7c>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4a33      	ldr	r2, [pc, #204]	@ (80114c4 <TIM_OC2_SetConfig+0x144>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d10d      	bne.n	8011418 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	011b      	lsls	r3, r3, #4
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	4313      	orrs	r3, r2
 801140e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4a27      	ldr	r2, [pc, #156]	@ (80114b8 <TIM_OC2_SetConfig+0x138>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d023      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4a26      	ldr	r2, [pc, #152]	@ (80114bc <TIM_OC2_SetConfig+0x13c>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d01f      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	4a25      	ldr	r2, [pc, #148]	@ (80114c0 <TIM_OC2_SetConfig+0x140>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d01b      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	4a24      	ldr	r2, [pc, #144]	@ (80114c4 <TIM_OC2_SetConfig+0x144>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d017      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4a23      	ldr	r2, [pc, #140]	@ (80114c8 <TIM_OC2_SetConfig+0x148>)
 801143c:	4293      	cmp	r3, r2
 801143e:	d013      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	4a22      	ldr	r2, [pc, #136]	@ (80114cc <TIM_OC2_SetConfig+0x14c>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d00f      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4a21      	ldr	r2, [pc, #132]	@ (80114d0 <TIM_OC2_SetConfig+0x150>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d00b      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4a20      	ldr	r2, [pc, #128]	@ (80114d4 <TIM_OC2_SetConfig+0x154>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d007      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4a1f      	ldr	r2, [pc, #124]	@ (80114d8 <TIM_OC2_SetConfig+0x158>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d003      	beq.n	8011468 <TIM_OC2_SetConfig+0xe8>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	4a1e      	ldr	r2, [pc, #120]	@ (80114dc <TIM_OC2_SetConfig+0x15c>)
 8011464:	4293      	cmp	r3, r2
 8011466:	d113      	bne.n	8011490 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801146e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	695b      	ldr	r3, [r3, #20]
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	693a      	ldr	r2, [r7, #16]
 8011480:	4313      	orrs	r3, r2
 8011482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	699b      	ldr	r3, [r3, #24]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	693a      	ldr	r2, [r7, #16]
 801148c:	4313      	orrs	r3, r2
 801148e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	693a      	ldr	r2, [r7, #16]
 8011494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	685a      	ldr	r2, [r3, #4]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	697a      	ldr	r2, [r7, #20]
 80114a8:	621a      	str	r2, [r3, #32]
}
 80114aa:	bf00      	nop
 80114ac:	371c      	adds	r7, #28
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop
 80114b8:	40012c00 	.word	0x40012c00
 80114bc:	50012c00 	.word	0x50012c00
 80114c0:	40013400 	.word	0x40013400
 80114c4:	50013400 	.word	0x50013400
 80114c8:	40014000 	.word	0x40014000
 80114cc:	50014000 	.word	0x50014000
 80114d0:	40014400 	.word	0x40014400
 80114d4:	50014400 	.word	0x50014400
 80114d8:	40014800 	.word	0x40014800
 80114dc:	50014800 	.word	0x50014800

080114e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b087      	sub	sp, #28
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a1b      	ldr	r3, [r3, #32]
 80114ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a1b      	ldr	r3, [r3, #32]
 80114f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	69db      	ldr	r3, [r3, #28]
 8011506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801150e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f023 0303 	bic.w	r3, r3, #3
 801151a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	68fa      	ldr	r2, [r7, #12]
 8011522:	4313      	orrs	r3, r2
 8011524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801152c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	021b      	lsls	r3, r3, #8
 8011534:	697a      	ldr	r2, [r7, #20]
 8011536:	4313      	orrs	r3, r2
 8011538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4a35      	ldr	r2, [pc, #212]	@ (8011614 <TIM_OC3_SetConfig+0x134>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d00b      	beq.n	801155a <TIM_OC3_SetConfig+0x7a>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4a34      	ldr	r2, [pc, #208]	@ (8011618 <TIM_OC3_SetConfig+0x138>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d007      	beq.n	801155a <TIM_OC3_SetConfig+0x7a>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4a33      	ldr	r2, [pc, #204]	@ (801161c <TIM_OC3_SetConfig+0x13c>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d003      	beq.n	801155a <TIM_OC3_SetConfig+0x7a>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4a32      	ldr	r2, [pc, #200]	@ (8011620 <TIM_OC3_SetConfig+0x140>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d10d      	bne.n	8011576 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	68db      	ldr	r3, [r3, #12]
 8011566:	021b      	lsls	r3, r3, #8
 8011568:	697a      	ldr	r2, [r7, #20]
 801156a:	4313      	orrs	r3, r2
 801156c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a26      	ldr	r2, [pc, #152]	@ (8011614 <TIM_OC3_SetConfig+0x134>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d023      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a25      	ldr	r2, [pc, #148]	@ (8011618 <TIM_OC3_SetConfig+0x138>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d01f      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a24      	ldr	r2, [pc, #144]	@ (801161c <TIM_OC3_SetConfig+0x13c>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d01b      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a23      	ldr	r2, [pc, #140]	@ (8011620 <TIM_OC3_SetConfig+0x140>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d017      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4a22      	ldr	r2, [pc, #136]	@ (8011624 <TIM_OC3_SetConfig+0x144>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d013      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a21      	ldr	r2, [pc, #132]	@ (8011628 <TIM_OC3_SetConfig+0x148>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d00f      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4a20      	ldr	r2, [pc, #128]	@ (801162c <TIM_OC3_SetConfig+0x14c>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d00b      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	4a1f      	ldr	r2, [pc, #124]	@ (8011630 <TIM_OC3_SetConfig+0x150>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d007      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a1e      	ldr	r2, [pc, #120]	@ (8011634 <TIM_OC3_SetConfig+0x154>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d003      	beq.n	80115c6 <TIM_OC3_SetConfig+0xe6>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011638 <TIM_OC3_SetConfig+0x158>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d113      	bne.n	80115ee <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80115d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	695b      	ldr	r3, [r3, #20]
 80115da:	011b      	lsls	r3, r3, #4
 80115dc:	693a      	ldr	r2, [r7, #16]
 80115de:	4313      	orrs	r3, r2
 80115e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	699b      	ldr	r3, [r3, #24]
 80115e6:	011b      	lsls	r3, r3, #4
 80115e8:	693a      	ldr	r2, [r7, #16]
 80115ea:	4313      	orrs	r3, r2
 80115ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	693a      	ldr	r2, [r7, #16]
 80115f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	685a      	ldr	r2, [r3, #4]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	697a      	ldr	r2, [r7, #20]
 8011606:	621a      	str	r2, [r3, #32]
}
 8011608:	bf00      	nop
 801160a:	371c      	adds	r7, #28
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr
 8011614:	40012c00 	.word	0x40012c00
 8011618:	50012c00 	.word	0x50012c00
 801161c:	40013400 	.word	0x40013400
 8011620:	50013400 	.word	0x50013400
 8011624:	40014000 	.word	0x40014000
 8011628:	50014000 	.word	0x50014000
 801162c:	40014400 	.word	0x40014400
 8011630:	50014400 	.word	0x50014400
 8011634:	40014800 	.word	0x40014800
 8011638:	50014800 	.word	0x50014800

0801163c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801163c:	b480      	push	{r7}
 801163e:	b087      	sub	sp, #28
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6a1b      	ldr	r3, [r3, #32]
 801164a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6a1b      	ldr	r3, [r3, #32]
 8011650:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	69db      	ldr	r3, [r3, #28]
 8011662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801166a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801166e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	021b      	lsls	r3, r3, #8
 801167e:	68fa      	ldr	r2, [r7, #12]
 8011680:	4313      	orrs	r3, r2
 8011682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801168a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	031b      	lsls	r3, r3, #12
 8011692:	697a      	ldr	r2, [r7, #20]
 8011694:	4313      	orrs	r3, r2
 8011696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	4a36      	ldr	r2, [pc, #216]	@ (8011774 <TIM_OC4_SetConfig+0x138>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d00b      	beq.n	80116b8 <TIM_OC4_SetConfig+0x7c>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4a35      	ldr	r2, [pc, #212]	@ (8011778 <TIM_OC4_SetConfig+0x13c>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d007      	beq.n	80116b8 <TIM_OC4_SetConfig+0x7c>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	4a34      	ldr	r2, [pc, #208]	@ (801177c <TIM_OC4_SetConfig+0x140>)
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d003      	beq.n	80116b8 <TIM_OC4_SetConfig+0x7c>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	4a33      	ldr	r2, [pc, #204]	@ (8011780 <TIM_OC4_SetConfig+0x144>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d10d      	bne.n	80116d4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80116be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	031b      	lsls	r3, r3, #12
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	4313      	orrs	r3, r2
 80116ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	4a27      	ldr	r2, [pc, #156]	@ (8011774 <TIM_OC4_SetConfig+0x138>)
 80116d8:	4293      	cmp	r3, r2
 80116da:	d023      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	4a26      	ldr	r2, [pc, #152]	@ (8011778 <TIM_OC4_SetConfig+0x13c>)
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d01f      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4a25      	ldr	r2, [pc, #148]	@ (801177c <TIM_OC4_SetConfig+0x140>)
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d01b      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	4a24      	ldr	r2, [pc, #144]	@ (8011780 <TIM_OC4_SetConfig+0x144>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d017      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	4a23      	ldr	r2, [pc, #140]	@ (8011784 <TIM_OC4_SetConfig+0x148>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d013      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	4a22      	ldr	r2, [pc, #136]	@ (8011788 <TIM_OC4_SetConfig+0x14c>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d00f      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4a21      	ldr	r2, [pc, #132]	@ (801178c <TIM_OC4_SetConfig+0x150>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d00b      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4a20      	ldr	r2, [pc, #128]	@ (8011790 <TIM_OC4_SetConfig+0x154>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d007      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	4a1f      	ldr	r2, [pc, #124]	@ (8011794 <TIM_OC4_SetConfig+0x158>)
 8011718:	4293      	cmp	r3, r2
 801171a:	d003      	beq.n	8011724 <TIM_OC4_SetConfig+0xe8>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4a1e      	ldr	r2, [pc, #120]	@ (8011798 <TIM_OC4_SetConfig+0x15c>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d113      	bne.n	801174c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801172a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011732:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	695b      	ldr	r3, [r3, #20]
 8011738:	019b      	lsls	r3, r3, #6
 801173a:	693a      	ldr	r2, [r7, #16]
 801173c:	4313      	orrs	r3, r2
 801173e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	699b      	ldr	r3, [r3, #24]
 8011744:	019b      	lsls	r3, r3, #6
 8011746:	693a      	ldr	r2, [r7, #16]
 8011748:	4313      	orrs	r3, r2
 801174a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	68fa      	ldr	r2, [r7, #12]
 8011756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	621a      	str	r2, [r3, #32]
}
 8011766:	bf00      	nop
 8011768:	371c      	adds	r7, #28
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	40012c00 	.word	0x40012c00
 8011778:	50012c00 	.word	0x50012c00
 801177c:	40013400 	.word	0x40013400
 8011780:	50013400 	.word	0x50013400
 8011784:	40014000 	.word	0x40014000
 8011788:	50014000 	.word	0x50014000
 801178c:	40014400 	.word	0x40014400
 8011790:	50014400 	.word	0x50014400
 8011794:	40014800 	.word	0x40014800
 8011798:	50014800 	.word	0x50014800

0801179c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801179c:	b480      	push	{r7}
 801179e:	b087      	sub	sp, #28
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6a1b      	ldr	r3, [r3, #32]
 80117b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80117ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	4313      	orrs	r3, r2
 80117d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80117e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	041b      	lsls	r3, r3, #16
 80117e8:	693a      	ldr	r2, [r7, #16]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4a21      	ldr	r2, [pc, #132]	@ (8011878 <TIM_OC5_SetConfig+0xdc>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d023      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4a20      	ldr	r2, [pc, #128]	@ (801187c <TIM_OC5_SetConfig+0xe0>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d01f      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	4a1f      	ldr	r2, [pc, #124]	@ (8011880 <TIM_OC5_SetConfig+0xe4>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d01b      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4a1e      	ldr	r2, [pc, #120]	@ (8011884 <TIM_OC5_SetConfig+0xe8>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d017      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4a1d      	ldr	r2, [pc, #116]	@ (8011888 <TIM_OC5_SetConfig+0xec>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d013      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a1c      	ldr	r2, [pc, #112]	@ (801188c <TIM_OC5_SetConfig+0xf0>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d00f      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4a1b      	ldr	r2, [pc, #108]	@ (8011890 <TIM_OC5_SetConfig+0xf4>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d00b      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a1a      	ldr	r2, [pc, #104]	@ (8011894 <TIM_OC5_SetConfig+0xf8>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d007      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a19      	ldr	r2, [pc, #100]	@ (8011898 <TIM_OC5_SetConfig+0xfc>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d003      	beq.n	801183e <TIM_OC5_SetConfig+0xa2>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a18      	ldr	r2, [pc, #96]	@ (801189c <TIM_OC5_SetConfig+0x100>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d109      	bne.n	8011852 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011844:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	695b      	ldr	r3, [r3, #20]
 801184a:	021b      	lsls	r3, r3, #8
 801184c:	697a      	ldr	r2, [r7, #20]
 801184e:	4313      	orrs	r3, r2
 8011850:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	697a      	ldr	r2, [r7, #20]
 8011856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	685a      	ldr	r2, [r3, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	693a      	ldr	r2, [r7, #16]
 801186a:	621a      	str	r2, [r3, #32]
}
 801186c:	bf00      	nop
 801186e:	371c      	adds	r7, #28
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	40012c00 	.word	0x40012c00
 801187c:	50012c00 	.word	0x50012c00
 8011880:	40013400 	.word	0x40013400
 8011884:	50013400 	.word	0x50013400
 8011888:	40014000 	.word	0x40014000
 801188c:	50014000 	.word	0x50014000
 8011890:	40014400 	.word	0x40014400
 8011894:	50014400 	.word	0x50014400
 8011898:	40014800 	.word	0x40014800
 801189c:	50014800 	.word	0x50014800

080118a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b087      	sub	sp, #28
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6a1b      	ldr	r3, [r3, #32]
 80118ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a1b      	ldr	r3, [r3, #32]
 80118b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80118ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	021b      	lsls	r3, r3, #8
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	4313      	orrs	r3, r2
 80118de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80118e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	051b      	lsls	r3, r3, #20
 80118ee:	693a      	ldr	r2, [r7, #16]
 80118f0:	4313      	orrs	r3, r2
 80118f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4a22      	ldr	r2, [pc, #136]	@ (8011980 <TIM_OC6_SetConfig+0xe0>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d023      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4a21      	ldr	r2, [pc, #132]	@ (8011984 <TIM_OC6_SetConfig+0xe4>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d01f      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	4a20      	ldr	r2, [pc, #128]	@ (8011988 <TIM_OC6_SetConfig+0xe8>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d01b      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4a1f      	ldr	r2, [pc, #124]	@ (801198c <TIM_OC6_SetConfig+0xec>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d017      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	4a1e      	ldr	r2, [pc, #120]	@ (8011990 <TIM_OC6_SetConfig+0xf0>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d013      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	4a1d      	ldr	r2, [pc, #116]	@ (8011994 <TIM_OC6_SetConfig+0xf4>)
 8011920:	4293      	cmp	r3, r2
 8011922:	d00f      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	4a1c      	ldr	r2, [pc, #112]	@ (8011998 <TIM_OC6_SetConfig+0xf8>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d00b      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4a1b      	ldr	r2, [pc, #108]	@ (801199c <TIM_OC6_SetConfig+0xfc>)
 8011930:	4293      	cmp	r3, r2
 8011932:	d007      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a1a      	ldr	r2, [pc, #104]	@ (80119a0 <TIM_OC6_SetConfig+0x100>)
 8011938:	4293      	cmp	r3, r2
 801193a:	d003      	beq.n	8011944 <TIM_OC6_SetConfig+0xa4>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4a19      	ldr	r2, [pc, #100]	@ (80119a4 <TIM_OC6_SetConfig+0x104>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d109      	bne.n	8011958 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801194a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	695b      	ldr	r3, [r3, #20]
 8011950:	029b      	lsls	r3, r3, #10
 8011952:	697a      	ldr	r2, [r7, #20]
 8011954:	4313      	orrs	r3, r2
 8011956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	697a      	ldr	r2, [r7, #20]
 801195c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	685a      	ldr	r2, [r3, #4]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	693a      	ldr	r2, [r7, #16]
 8011970:	621a      	str	r2, [r3, #32]
}
 8011972:	bf00      	nop
 8011974:	371c      	adds	r7, #28
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	40012c00 	.word	0x40012c00
 8011984:	50012c00 	.word	0x50012c00
 8011988:	40013400 	.word	0x40013400
 801198c:	50013400 	.word	0x50013400
 8011990:	40014000 	.word	0x40014000
 8011994:	50014000 	.word	0x50014000
 8011998:	40014400 	.word	0x40014400
 801199c:	50014400 	.word	0x50014400
 80119a0:	40014800 	.word	0x40014800
 80119a4:	50014800 	.word	0x50014800

080119a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d101      	bne.n	80119c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80119bc:	2302      	movs	r3, #2
 80119be:	e097      	b.n	8011af0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2201      	movs	r2, #1
 80119c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2202      	movs	r2, #2
 80119cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	4a45      	ldr	r2, [pc, #276]	@ (8011afc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80119e6:	4293      	cmp	r3, r2
 80119e8:	d00e      	beq.n	8011a08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4a44      	ldr	r2, [pc, #272]	@ (8011b00 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d009      	beq.n	8011a08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	4a42      	ldr	r2, [pc, #264]	@ (8011b04 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80119fa:	4293      	cmp	r3, r2
 80119fc:	d004      	beq.n	8011a08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4a41      	ldr	r2, [pc, #260]	@ (8011b08 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d108      	bne.n	8011a1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8011a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8011afc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d040      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a2e      	ldr	r2, [pc, #184]	@ (8011b00 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d03b      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a54:	d036      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011a5e:	d031      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a29      	ldr	r2, [pc, #164]	@ (8011b0c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d02c      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a28      	ldr	r2, [pc, #160]	@ (8011b10 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d027      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a26      	ldr	r2, [pc, #152]	@ (8011b14 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d022      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a25      	ldr	r2, [pc, #148]	@ (8011b18 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d01d      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4a23      	ldr	r2, [pc, #140]	@ (8011b1c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d018      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	4a22      	ldr	r2, [pc, #136]	@ (8011b20 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d013      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4a18      	ldr	r2, [pc, #96]	@ (8011b04 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d00e      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4a17      	ldr	r2, [pc, #92]	@ (8011b08 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d009      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8011b24 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d004      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4a1a      	ldr	r2, [pc, #104]	@ (8011b28 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d10c      	bne.n	8011ade <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	689b      	ldr	r3, [r3, #8]
 8011ad0:	68ba      	ldr	r2, [r7, #8]
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	68ba      	ldr	r2, [r7, #8]
 8011adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr
 8011afc:	40012c00 	.word	0x40012c00
 8011b00:	50012c00 	.word	0x50012c00
 8011b04:	40013400 	.word	0x40013400
 8011b08:	50013400 	.word	0x50013400
 8011b0c:	40000400 	.word	0x40000400
 8011b10:	50000400 	.word	0x50000400
 8011b14:	40000800 	.word	0x40000800
 8011b18:	50000800 	.word	0x50000800
 8011b1c:	40000c00 	.word	0x40000c00
 8011b20:	50000c00 	.word	0x50000c00
 8011b24:	40014000 	.word	0x40014000
 8011b28:	50014000 	.word	0x50014000

08011b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d101      	bne.n	8011b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	e042      	b.n	8011bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d106      	bne.n	8011b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f7f3 f90f 	bl	8004d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2224      	movs	r2, #36	@ 0x24
 8011b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f022 0201 	bic.w	r2, r2, #1
 8011b6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d002      	beq.n	8011b7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fde2 	bl	8012740 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f000 fc31 	bl	80123e4 <UART_SetConfig>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d101      	bne.n	8011b8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011b88:	2301      	movs	r3, #1
 8011b8a:	e01b      	b.n	8011bc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	685a      	ldr	r2, [r3, #4]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	689a      	ldr	r2, [r3, #8]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f042 0201 	orr.w	r2, r2, #1
 8011bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f000 fe61 	bl	8012884 <UART_CheckIdleState>
 8011bc2:	4603      	mov	r3, r0
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b08a      	sub	sp, #40	@ 0x28
 8011bd0:	af02      	add	r7, sp, #8
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	603b      	str	r3, [r7, #0]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011be2:	2b20      	cmp	r3, #32
 8011be4:	d17b      	bne.n	8011cde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d002      	beq.n	8011bf2 <HAL_UART_Transmit+0x26>
 8011bec:	88fb      	ldrh	r3, [r7, #6]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d101      	bne.n	8011bf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e074      	b.n	8011ce0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2221      	movs	r2, #33	@ 0x21
 8011c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011c06:	f7f3 ff77 	bl	8005af8 <HAL_GetTick>
 8011c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	88fa      	ldrh	r2, [r7, #6]
 8011c10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	88fa      	ldrh	r2, [r7, #6]
 8011c18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c24:	d108      	bne.n	8011c38 <HAL_UART_Transmit+0x6c>
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	691b      	ldr	r3, [r3, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d104      	bne.n	8011c38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	61bb      	str	r3, [r7, #24]
 8011c36:	e003      	b.n	8011c40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011c40:	e030      	b.n	8011ca4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	2180      	movs	r1, #128	@ 0x80
 8011c4c:	68f8      	ldr	r0, [r7, #12]
 8011c4e:	f000 fec3 	bl	80129d8 <UART_WaitOnFlagUntilTimeout>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d005      	beq.n	8011c64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2220      	movs	r2, #32
 8011c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011c60:	2303      	movs	r3, #3
 8011c62:	e03d      	b.n	8011ce0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d10b      	bne.n	8011c82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	881b      	ldrh	r3, [r3, #0]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011c78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011c7a:	69bb      	ldr	r3, [r7, #24]
 8011c7c:	3302      	adds	r3, #2
 8011c7e:	61bb      	str	r3, [r7, #24]
 8011c80:	e007      	b.n	8011c92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	781a      	ldrb	r2, [r3, #0]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	3b01      	subs	r3, #1
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d1c8      	bne.n	8011c42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	2140      	movs	r1, #64	@ 0x40
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f000 fe8c 	bl	80129d8 <UART_WaitOnFlagUntilTimeout>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d005      	beq.n	8011cd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2220      	movs	r2, #32
 8011cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8011cce:	2303      	movs	r3, #3
 8011cd0:	e006      	b.n	8011ce0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2220      	movs	r2, #32
 8011cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	e000      	b.n	8011ce0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011cde:	2302      	movs	r3, #2
  }
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3720      	adds	r7, #32
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b08a      	sub	sp, #40	@ 0x28
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011cfc:	2b20      	cmp	r3, #32
 8011cfe:	d13c      	bne.n	8011d7a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d002      	beq.n	8011d0c <HAL_UART_Receive_IT+0x24>
 8011d06:	88fb      	ldrh	r3, [r7, #6]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d101      	bne.n	8011d10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	e035      	b.n	8011d7c <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2200      	movs	r2, #0
 8011d14:	66da      	str	r2, [r3, #108]	@ 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8011d84 <HAL_UART_Receive_IT+0x9c>)
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	d024      	beq.n	8011d6a <HAL_UART_Receive_IT+0x82>
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4a18      	ldr	r2, [pc, #96]	@ (8011d88 <HAL_UART_Receive_IT+0xa0>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d01f      	beq.n	8011d6a <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d018      	beq.n	8011d6a <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	e853 3f00 	ldrex	r3, [r3]
 8011d44:	613b      	str	r3, [r7, #16]
   return(result);
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d56:	623b      	str	r3, [r7, #32]
 8011d58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d5a:	69f9      	ldr	r1, [r7, #28]
 8011d5c:	6a3a      	ldr	r2, [r7, #32]
 8011d5e:	e841 2300 	strex	r3, r2, [r1]
 8011d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1e6      	bne.n	8011d38 <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011d6a:	88fb      	ldrh	r3, [r7, #6]
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	68b9      	ldr	r1, [r7, #8]
 8011d70:	68f8      	ldr	r0, [r7, #12]
 8011d72:	f000 fe9f 	bl	8012ab4 <UART_Start_Receive_IT>
 8011d76:	4603      	mov	r3, r0
 8011d78:	e000      	b.n	8011d7c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011d7a:	2302      	movs	r3, #2
  }
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3728      	adds	r7, #40	@ 0x28
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	46002400 	.word	0x46002400
 8011d88:	56002400 	.word	0x56002400

08011d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011db2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011db6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8011dba:	4013      	ands	r3, r2
 8011dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d11b      	bne.n	8011e00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011dcc:	f003 0320 	and.w	r3, r3, #32
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d015      	beq.n	8011e00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011dd8:	f003 0320 	and.w	r3, r3, #32
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d105      	bne.n	8011dec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d009      	beq.n	8011e00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f000 82cb 	beq.w	801238c <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	4798      	blx	r3
      }
      return;
 8011dfe:	e2c5      	b.n	801238c <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	f000 8123 	beq.w	8012050 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011e0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8012044 <HAL_UART_IRQHandler+0x2b8>)
 8011e10:	4013      	ands	r3, r2
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d106      	bne.n	8011e24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011e16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8012048 <HAL_UART_IRQHandler+0x2bc>)
 8011e1c:	4013      	ands	r3, r2
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	f000 8116 	beq.w	8012050 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e28:	f003 0301 	and.w	r3, r3, #1
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d011      	beq.n	8011e54 <HAL_UART_IRQHandler+0xc8>
 8011e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00b      	beq.n	8011e54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2201      	movs	r2, #1
 8011e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e4a:	f043 0201 	orr.w	r2, r3, #1
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e58:	f003 0302 	and.w	r3, r3, #2
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d011      	beq.n	8011e84 <HAL_UART_IRQHandler+0xf8>
 8011e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011e64:	f003 0301 	and.w	r3, r3, #1
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d00b      	beq.n	8011e84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2202      	movs	r2, #2
 8011e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e7a:	f043 0204 	orr.w	r2, r3, #4
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e88:	f003 0304 	and.w	r3, r3, #4
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d011      	beq.n	8011eb4 <HAL_UART_IRQHandler+0x128>
 8011e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011e94:	f003 0301 	and.w	r3, r3, #1
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00b      	beq.n	8011eb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2204      	movs	r2, #4
 8011ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011eaa:	f043 0202 	orr.w	r2, r3, #2
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011eb8:	f003 0308 	and.w	r3, r3, #8
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d017      	beq.n	8011ef0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ec4:	f003 0320 	and.w	r3, r3, #32
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d105      	bne.n	8011ed8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011ecc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8012044 <HAL_UART_IRQHandler+0x2b8>)
 8011ed2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00b      	beq.n	8011ef0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2208      	movs	r2, #8
 8011ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ee6:	f043 0208 	orr.w	r2, r3, #8
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d012      	beq.n	8011f22 <HAL_UART_IRQHandler+0x196>
 8011efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011f00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00c      	beq.n	8011f22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f18:	f043 0220 	orr.w	r2, r3, #32
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f000 8231 	beq.w	8012390 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f32:	f003 0320 	and.w	r3, r3, #32
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d013      	beq.n	8011f62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011f3e:	f003 0320 	and.w	r3, r3, #32
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d105      	bne.n	8011f52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d007      	beq.n	8011f62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d003      	beq.n	8011f62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	689b      	ldr	r3, [r3, #8]
 8011f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f76:	2b40      	cmp	r3, #64	@ 0x40
 8011f78:	d005      	beq.n	8011f86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011f7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d054      	beq.n	8012030 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 feb6 	bl	8012cf8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f96:	2b40      	cmp	r3, #64	@ 0x40
 8011f98:	d146      	bne.n	8012028 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	3308      	adds	r3, #8
 8011fa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011fa8:	e853 3f00 	ldrex	r3, [r3]
 8011fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	3308      	adds	r3, #8
 8011fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011fd6:	e841 2300 	strex	r3, r2, [r1]
 8011fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d1d9      	bne.n	8011f9a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d017      	beq.n	8012020 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ff6:	4a15      	ldr	r2, [pc, #84]	@ (801204c <HAL_UART_IRQHandler+0x2c0>)
 8011ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012000:	4618      	mov	r0, r3
 8012002:	f7f6 f84b 	bl	800809c <HAL_DMA_Abort_IT>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d019      	beq.n	8012040 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801201a:	4610      	mov	r0, r2
 801201c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801201e:	e00f      	b.n	8012040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f000 f9c9 	bl	80123b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012026:	e00b      	b.n	8012040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 f9c5 	bl	80123b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801202e:	e007      	b.n	8012040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f9c1 	bl	80123b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801203e:	e1a7      	b.n	8012390 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012040:	bf00      	nop
    return;
 8012042:	e1a5      	b.n	8012390 <HAL_UART_IRQHandler+0x604>
 8012044:	10000001 	.word	0x10000001
 8012048:	04000120 	.word	0x04000120
 801204c:	08012dc5 	.word	0x08012dc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012054:	2b01      	cmp	r3, #1
 8012056:	f040 8150 	bne.w	80122fa <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801205a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801205e:	f003 0310 	and.w	r3, r3, #16
 8012062:	2b00      	cmp	r3, #0
 8012064:	f000 8149 	beq.w	80122fa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801206c:	f003 0310 	and.w	r3, r3, #16
 8012070:	2b00      	cmp	r3, #0
 8012072:	f000 8142 	beq.w	80122fa <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2210      	movs	r2, #16
 801207c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012088:	2b40      	cmp	r3, #64	@ 0x40
 801208a:	f040 80b8 	bne.w	80121fe <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012098:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801209c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f000 8177 	beq.w	8012394 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80120ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80120b0:	429a      	cmp	r2, r3
 80120b2:	f080 816f 	bcs.w	8012394 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80120bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120c8:	2b81      	cmp	r3, #129	@ 0x81
 80120ca:	f000 8087 	beq.w	80121dc <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80120da:	e853 3f00 	ldrex	r3, [r3]
 80120de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80120e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80120e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80120ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	461a      	mov	r2, r3
 80120f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80120f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80120fc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012100:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012104:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012108:	e841 2300 	strex	r3, r2, [r1]
 801210c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1da      	bne.n	80120ce <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	3308      	adds	r3, #8
 801211e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012122:	e853 3f00 	ldrex	r3, [r3]
 8012126:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012128:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801212a:	f023 0301 	bic.w	r3, r3, #1
 801212e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3308      	adds	r3, #8
 8012138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801213c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012140:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012142:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012144:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012148:	e841 2300 	strex	r3, r2, [r1]
 801214c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801214e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1e1      	bne.n	8012118 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	3308      	adds	r3, #8
 801215a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801215e:	e853 3f00 	ldrex	r3, [r3]
 8012162:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801216a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	3308      	adds	r3, #8
 8012174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012178:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801217a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801217e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012180:	e841 2300 	strex	r3, r2, [r1]
 8012184:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1e3      	bne.n	8012154 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2220      	movs	r2, #32
 8012190:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121a2:	e853 3f00 	ldrex	r3, [r3]
 80121a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80121a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121aa:	f023 0310 	bic.w	r3, r3, #16
 80121ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80121be:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80121c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80121c4:	e841 2300 	strex	r3, r2, [r1]
 80121c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80121ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1e4      	bne.n	801219a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7f5 fee4 	bl	8007fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2202      	movs	r2, #2
 80121e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	1ad3      	subs	r3, r2, r3
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	4619      	mov	r1, r3
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f000 f8e8 	bl	80123cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80121fc:	e0ca      	b.n	8012394 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801220a:	b29b      	uxth	r3, r3
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012218:	b29b      	uxth	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	f000 80bc 	beq.w	8012398 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8012220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012224:	2b00      	cmp	r3, #0
 8012226:	f000 80b7 	beq.w	8012398 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012232:	e853 3f00 	ldrex	r3, [r3]
 8012236:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801223a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801223e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	461a      	mov	r2, r3
 8012248:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801224c:	647b      	str	r3, [r7, #68]	@ 0x44
 801224e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012250:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012254:	e841 2300 	strex	r3, r2, [r1]
 8012258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801225a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1e4      	bne.n	801222a <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	3308      	adds	r3, #8
 8012266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801226a:	e853 3f00 	ldrex	r3, [r3]
 801226e:	623b      	str	r3, [r7, #32]
   return(result);
 8012270:	6a3b      	ldr	r3, [r7, #32]
 8012272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012276:	f023 0301 	bic.w	r3, r3, #1
 801227a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	3308      	adds	r3, #8
 8012284:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012288:	633a      	str	r2, [r7, #48]	@ 0x30
 801228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801228e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012290:	e841 2300 	strex	r3, r2, [r1]
 8012294:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012298:	2b00      	cmp	r3, #0
 801229a:	d1e1      	bne.n	8012260 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2220      	movs	r2, #32
 80122a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2200      	movs	r2, #0
 80122ae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	e853 3f00 	ldrex	r3, [r3]
 80122bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	f023 0310 	bic.w	r3, r3, #16
 80122c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	461a      	mov	r2, r3
 80122ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80122d2:	61fb      	str	r3, [r7, #28]
 80122d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d6:	69b9      	ldr	r1, [r7, #24]
 80122d8:	69fa      	ldr	r2, [r7, #28]
 80122da:	e841 2300 	strex	r3, r2, [r1]
 80122de:	617b      	str	r3, [r7, #20]
   return(result);
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1e4      	bne.n	80122b0 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2202      	movs	r2, #2
 80122ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80122ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80122f0:	4619      	mov	r1, r3
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 f86a 	bl	80123cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80122f8:	e04e      	b.n	8012398 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80122fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012302:	2b00      	cmp	r3, #0
 8012304:	d014      	beq.n	8012330 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801230e:	2b00      	cmp	r3, #0
 8012310:	d105      	bne.n	801231e <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801231a:	2b00      	cmp	r3, #0
 801231c:	d008      	beq.n	8012330 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012322:	2b00      	cmp	r3, #0
 8012324:	d03a      	beq.n	801239c <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	4798      	blx	r3
    }
    return;
 801232e:	e035      	b.n	801239c <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012338:	2b00      	cmp	r3, #0
 801233a:	d009      	beq.n	8012350 <HAL_UART_IRQHandler+0x5c4>
 801233c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012344:	2b00      	cmp	r3, #0
 8012346:	d003      	beq.n	8012350 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f000 fd51 	bl	8012df0 <UART_EndTransmit_IT>
    return;
 801234e:	e026      	b.n	801239e <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012358:	2b00      	cmp	r3, #0
 801235a:	d009      	beq.n	8012370 <HAL_UART_IRQHandler+0x5e4>
 801235c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012360:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012364:	2b00      	cmp	r3, #0
 8012366:	d003      	beq.n	8012370 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f001 faaf 	bl	80138cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801236e:	e016      	b.n	801239e <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012378:	2b00      	cmp	r3, #0
 801237a:	d010      	beq.n	801239e <HAL_UART_IRQHandler+0x612>
 801237c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012380:	2b00      	cmp	r3, #0
 8012382:	da0c      	bge.n	801239e <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f001 fa97 	bl	80138b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801238a:	e008      	b.n	801239e <HAL_UART_IRQHandler+0x612>
      return;
 801238c:	bf00      	nop
 801238e:	e006      	b.n	801239e <HAL_UART_IRQHandler+0x612>
    return;
 8012390:	bf00      	nop
 8012392:	e004      	b.n	801239e <HAL_UART_IRQHandler+0x612>
      return;
 8012394:	bf00      	nop
 8012396:	e002      	b.n	801239e <HAL_UART_IRQHandler+0x612>
      return;
 8012398:	bf00      	nop
 801239a:	e000      	b.n	801239e <HAL_UART_IRQHandler+0x612>
    return;
 801239c:	bf00      	nop
  }
}
 801239e:	37e8      	adds	r7, #232	@ 0xe8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b083      	sub	sp, #12
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80123ac:	bf00      	nop
 80123ae:	370c      	adds	r7, #12
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80123c0:	bf00      	nop
 80123c2:	370c      	adds	r7, #12
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr

080123cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	460b      	mov	r3, r1
 80123d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80123d8:	bf00      	nop
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80123e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80123e8:	b094      	sub	sp, #80	@ 0x50
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80123f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	4b83      	ldr	r3, [pc, #524]	@ (8012608 <UART_SetConfig+0x224>)
 80123fa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123fe:	689a      	ldr	r2, [r3, #8]
 8012400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	431a      	orrs	r2, r3
 8012406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012408:	695b      	ldr	r3, [r3, #20]
 801240a:	431a      	orrs	r2, r3
 801240c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801240e:	69db      	ldr	r3, [r3, #28]
 8012410:	4313      	orrs	r3, r2
 8012412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	497c      	ldr	r1, [pc, #496]	@ (801260c <UART_SetConfig+0x228>)
 801241c:	4019      	ands	r1, r3
 801241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012424:	430b      	orrs	r3, r1
 8012426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8012432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012434:	68d9      	ldr	r1, [r3, #12]
 8012436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	ea40 0301 	orr.w	r3, r0, r1
 801243e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012442:	699b      	ldr	r3, [r3, #24]
 8012444:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	4b6f      	ldr	r3, [pc, #444]	@ (8012608 <UART_SetConfig+0x224>)
 801244c:	429a      	cmp	r2, r3
 801244e:	d009      	beq.n	8012464 <UART_SetConfig+0x80>
 8012450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	4b6e      	ldr	r3, [pc, #440]	@ (8012610 <UART_SetConfig+0x22c>)
 8012456:	429a      	cmp	r2, r3
 8012458:	d004      	beq.n	8012464 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801245a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801245c:	6a1a      	ldr	r2, [r3, #32]
 801245e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012460:	4313      	orrs	r3, r2
 8012462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	689b      	ldr	r3, [r3, #8]
 801246a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801246e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8012472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012478:	430b      	orrs	r3, r1
 801247a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012482:	f023 000f 	bic.w	r0, r3, #15
 8012486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012488:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801248a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	ea40 0301 	orr.w	r3, r0, r1
 8012492:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	4b5e      	ldr	r3, [pc, #376]	@ (8012614 <UART_SetConfig+0x230>)
 801249a:	429a      	cmp	r2, r3
 801249c:	d102      	bne.n	80124a4 <UART_SetConfig+0xc0>
 801249e:	2301      	movs	r3, #1
 80124a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124a2:	e032      	b.n	801250a <UART_SetConfig+0x126>
 80124a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	4b5b      	ldr	r3, [pc, #364]	@ (8012618 <UART_SetConfig+0x234>)
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d102      	bne.n	80124b4 <UART_SetConfig+0xd0>
 80124ae:	2302      	movs	r3, #2
 80124b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124b2:	e02a      	b.n	801250a <UART_SetConfig+0x126>
 80124b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	4b58      	ldr	r3, [pc, #352]	@ (801261c <UART_SetConfig+0x238>)
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d102      	bne.n	80124c4 <UART_SetConfig+0xe0>
 80124be:	2304      	movs	r3, #4
 80124c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124c2:	e022      	b.n	801250a <UART_SetConfig+0x126>
 80124c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	4b55      	ldr	r3, [pc, #340]	@ (8012620 <UART_SetConfig+0x23c>)
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d102      	bne.n	80124d4 <UART_SetConfig+0xf0>
 80124ce:	2308      	movs	r3, #8
 80124d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124d2:	e01a      	b.n	801250a <UART_SetConfig+0x126>
 80124d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	4b52      	ldr	r3, [pc, #328]	@ (8012624 <UART_SetConfig+0x240>)
 80124da:	429a      	cmp	r2, r3
 80124dc:	d102      	bne.n	80124e4 <UART_SetConfig+0x100>
 80124de:	2310      	movs	r3, #16
 80124e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124e2:	e012      	b.n	801250a <UART_SetConfig+0x126>
 80124e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	4b4f      	ldr	r3, [pc, #316]	@ (8012628 <UART_SetConfig+0x244>)
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d103      	bne.n	80124f6 <UART_SetConfig+0x112>
 80124ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80124f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124f4:	e009      	b.n	801250a <UART_SetConfig+0x126>
 80124f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	4b43      	ldr	r3, [pc, #268]	@ (8012608 <UART_SetConfig+0x224>)
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d102      	bne.n	8012506 <UART_SetConfig+0x122>
 8012500:	2320      	movs	r3, #32
 8012502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012504:	e001      	b.n	801250a <UART_SetConfig+0x126>
 8012506:	2300      	movs	r3, #0
 8012508:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	4b3e      	ldr	r3, [pc, #248]	@ (8012608 <UART_SetConfig+0x224>)
 8012510:	429a      	cmp	r2, r3
 8012512:	d005      	beq.n	8012520 <UART_SetConfig+0x13c>
 8012514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	4b3d      	ldr	r3, [pc, #244]	@ (8012610 <UART_SetConfig+0x22c>)
 801251a:	429a      	cmp	r2, r3
 801251c:	f040 8088 	bne.w	8012630 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012522:	2200      	movs	r2, #0
 8012524:	623b      	str	r3, [r7, #32]
 8012526:	627a      	str	r2, [r7, #36]	@ 0x24
 8012528:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801252c:	f7fc fa5e 	bl	800e9ec <HAL_RCCEx_GetPeriphCLKFreq>
 8012530:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8012532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 80eb 	beq.w	8012710 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801253a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801253e:	4a3b      	ldr	r2, [pc, #236]	@ (801262c <UART_SetConfig+0x248>)
 8012540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012544:	461a      	mov	r2, r3
 8012546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012548:	fbb3 f3f2 	udiv	r3, r3, r2
 801254c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801254e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012550:	685a      	ldr	r2, [r3, #4]
 8012552:	4613      	mov	r3, r2
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	4413      	add	r3, r2
 8012558:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801255a:	429a      	cmp	r2, r3
 801255c:	d305      	bcc.n	801256a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012566:	429a      	cmp	r2, r3
 8012568:	d903      	bls.n	8012572 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801256a:	2301      	movs	r3, #1
 801256c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8012570:	e048      	b.n	8012604 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012574:	2200      	movs	r2, #0
 8012576:	61bb      	str	r3, [r7, #24]
 8012578:	61fa      	str	r2, [r7, #28]
 801257a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801257e:	4a2b      	ldr	r2, [pc, #172]	@ (801262c <UART_SetConfig+0x248>)
 8012580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012584:	b29b      	uxth	r3, r3
 8012586:	2200      	movs	r2, #0
 8012588:	613b      	str	r3, [r7, #16]
 801258a:	617a      	str	r2, [r7, #20]
 801258c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012590:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012594:	f7ee fb36 	bl	8000c04 <__aeabi_uldivmod>
 8012598:	4602      	mov	r2, r0
 801259a:	460b      	mov	r3, r1
 801259c:	4610      	mov	r0, r2
 801259e:	4619      	mov	r1, r3
 80125a0:	f04f 0200 	mov.w	r2, #0
 80125a4:	f04f 0300 	mov.w	r3, #0
 80125a8:	020b      	lsls	r3, r1, #8
 80125aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80125ae:	0202      	lsls	r2, r0, #8
 80125b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80125b2:	6849      	ldr	r1, [r1, #4]
 80125b4:	0849      	lsrs	r1, r1, #1
 80125b6:	2000      	movs	r0, #0
 80125b8:	460c      	mov	r4, r1
 80125ba:	4605      	mov	r5, r0
 80125bc:	eb12 0804 	adds.w	r8, r2, r4
 80125c0:	eb43 0905 	adc.w	r9, r3, r5
 80125c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	2200      	movs	r2, #0
 80125ca:	60bb      	str	r3, [r7, #8]
 80125cc:	60fa      	str	r2, [r7, #12]
 80125ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80125d2:	4640      	mov	r0, r8
 80125d4:	4649      	mov	r1, r9
 80125d6:	f7ee fb15 	bl	8000c04 <__aeabi_uldivmod>
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	4613      	mov	r3, r2
 80125e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80125e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80125e8:	d308      	bcc.n	80125fc <UART_SetConfig+0x218>
 80125ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80125f0:	d204      	bcs.n	80125fc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80125f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80125f8:	60da      	str	r2, [r3, #12]
 80125fa:	e003      	b.n	8012604 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80125fc:	2301      	movs	r3, #1
 80125fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8012602:	e085      	b.n	8012710 <UART_SetConfig+0x32c>
 8012604:	e084      	b.n	8012710 <UART_SetConfig+0x32c>
 8012606:	bf00      	nop
 8012608:	46002400 	.word	0x46002400
 801260c:	cfff69f3 	.word	0xcfff69f3
 8012610:	56002400 	.word	0x56002400
 8012614:	40013800 	.word	0x40013800
 8012618:	40004400 	.word	0x40004400
 801261c:	40004800 	.word	0x40004800
 8012620:	40004c00 	.word	0x40004c00
 8012624:	40005000 	.word	0x40005000
 8012628:	40006400 	.word	0x40006400
 801262c:	08017cf8 	.word	0x08017cf8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012632:	69db      	ldr	r3, [r3, #28]
 8012634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012638:	d13c      	bne.n	80126b4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801263a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801263c:	2200      	movs	r2, #0
 801263e:	603b      	str	r3, [r7, #0]
 8012640:	607a      	str	r2, [r7, #4]
 8012642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012646:	f7fc f9d1 	bl	800e9ec <HAL_RCCEx_GetPeriphCLKFreq>
 801264a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801264c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801264e:	2b00      	cmp	r3, #0
 8012650:	d05e      	beq.n	8012710 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012656:	4a39      	ldr	r2, [pc, #228]	@ (801273c <UART_SetConfig+0x358>)
 8012658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801265c:	461a      	mov	r2, r3
 801265e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012660:	fbb3 f3f2 	udiv	r3, r3, r2
 8012664:	005a      	lsls	r2, r3, #1
 8012666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	085b      	lsrs	r3, r3, #1
 801266c:	441a      	add	r2, r3
 801266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	fbb2 f3f3 	udiv	r3, r2, r3
 8012676:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801267a:	2b0f      	cmp	r3, #15
 801267c:	d916      	bls.n	80126ac <UART_SetConfig+0x2c8>
 801267e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012684:	d212      	bcs.n	80126ac <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012688:	b29b      	uxth	r3, r3
 801268a:	f023 030f 	bic.w	r3, r3, #15
 801268e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012692:	085b      	lsrs	r3, r3, #1
 8012694:	b29b      	uxth	r3, r3
 8012696:	f003 0307 	and.w	r3, r3, #7
 801269a:	b29a      	uxth	r2, r3
 801269c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801269e:	4313      	orrs	r3, r2
 80126a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80126a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80126a8:	60da      	str	r2, [r3, #12]
 80126aa:	e031      	b.n	8012710 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80126ac:	2301      	movs	r3, #1
 80126ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80126b2:	e02d      	b.n	8012710 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80126b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80126b6:	2200      	movs	r2, #0
 80126b8:	469a      	mov	sl, r3
 80126ba:	4693      	mov	fp, r2
 80126bc:	4650      	mov	r0, sl
 80126be:	4659      	mov	r1, fp
 80126c0:	f7fc f994 	bl	800e9ec <HAL_RCCEx_GetPeriphCLKFreq>
 80126c4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80126c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d021      	beq.n	8012710 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80126cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126d0:	4a1a      	ldr	r2, [pc, #104]	@ (801273c <UART_SetConfig+0x358>)
 80126d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126d6:	461a      	mov	r2, r3
 80126d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126da:	fbb3 f2f2 	udiv	r2, r3, r2
 80126de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	085b      	lsrs	r3, r3, #1
 80126e4:	441a      	add	r2, r3
 80126e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80126ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126f2:	2b0f      	cmp	r3, #15
 80126f4:	d909      	bls.n	801270a <UART_SetConfig+0x326>
 80126f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80126fc:	d205      	bcs.n	801270a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80126fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012700:	b29a      	uxth	r2, r3
 8012702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	60da      	str	r2, [r3, #12]
 8012708:	e002      	b.n	8012710 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801270a:	2301      	movs	r3, #1
 801270c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012712:	2201      	movs	r2, #1
 8012714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801271a:	2201      	movs	r2, #1
 801271c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012722:	2200      	movs	r2, #0
 8012724:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012728:	2200      	movs	r2, #0
 801272a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801272c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8012730:	4618      	mov	r0, r3
 8012732:	3750      	adds	r7, #80	@ 0x50
 8012734:	46bd      	mov	sp, r7
 8012736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801273a:	bf00      	nop
 801273c:	08017cf8 	.word	0x08017cf8

08012740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801274c:	f003 0308 	and.w	r3, r3, #8
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00a      	beq.n	801276a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	430a      	orrs	r2, r1
 8012768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801276e:	f003 0301 	and.w	r3, r3, #1
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00a      	beq.n	801278c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	430a      	orrs	r2, r1
 801278a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012790:	f003 0302 	and.w	r3, r3, #2
 8012794:	2b00      	cmp	r3, #0
 8012796:	d00a      	beq.n	80127ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	430a      	orrs	r2, r1
 80127ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127b2:	f003 0304 	and.w	r3, r3, #4
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00a      	beq.n	80127d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	430a      	orrs	r2, r1
 80127ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127d4:	f003 0310 	and.w	r3, r3, #16
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d00a      	beq.n	80127f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	430a      	orrs	r2, r1
 80127f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127f6:	f003 0320 	and.w	r3, r3, #32
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00a      	beq.n	8012814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	430a      	orrs	r2, r1
 8012812:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801281c:	2b00      	cmp	r3, #0
 801281e:	d01a      	beq.n	8012856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	430a      	orrs	r2, r1
 8012834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801283a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801283e:	d10a      	bne.n	8012856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	430a      	orrs	r2, r1
 8012854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00a      	beq.n	8012878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	430a      	orrs	r2, r1
 8012876:	605a      	str	r2, [r3, #4]
  }
}
 8012878:	bf00      	nop
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr

08012884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b098      	sub	sp, #96	@ 0x60
 8012888:	af02      	add	r7, sp, #8
 801288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2200      	movs	r2, #0
 8012890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012894:	f7f3 f930 	bl	8005af8 <HAL_GetTick>
 8012898:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f003 0308 	and.w	r3, r3, #8
 80128a4:	2b08      	cmp	r3, #8
 80128a6:	d12f      	bne.n	8012908 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80128a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128b0:	2200      	movs	r2, #0
 80128b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 f88e 	bl	80129d8 <UART_WaitOnFlagUntilTimeout>
 80128bc:	4603      	mov	r3, r0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d022      	beq.n	8012908 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ca:	e853 3f00 	ldrex	r3, [r3]
 80128ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80128d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80128d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	461a      	mov	r2, r3
 80128de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80128e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80128e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80128e8:	e841 2300 	strex	r3, r2, [r1]
 80128ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80128ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1e6      	bne.n	80128c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2220      	movs	r2, #32
 80128f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2200      	movs	r2, #0
 8012900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012904:	2303      	movs	r3, #3
 8012906:	e063      	b.n	80129d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f003 0304 	and.w	r3, r3, #4
 8012912:	2b04      	cmp	r3, #4
 8012914:	d149      	bne.n	80129aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012916:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801291a:	9300      	str	r3, [sp, #0]
 801291c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801291e:	2200      	movs	r2, #0
 8012920:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f000 f857 	bl	80129d8 <UART_WaitOnFlagUntilTimeout>
 801292a:	4603      	mov	r3, r0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d03c      	beq.n	80129aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012938:	e853 3f00 	ldrex	r3, [r3]
 801293c:	623b      	str	r3, [r7, #32]
   return(result);
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	461a      	mov	r2, r3
 801294c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801294e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012950:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012956:	e841 2300 	strex	r3, r2, [r1]
 801295a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1e6      	bne.n	8012930 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	3308      	adds	r3, #8
 8012968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	e853 3f00 	ldrex	r3, [r3]
 8012970:	60fb      	str	r3, [r7, #12]
   return(result);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	f023 0301 	bic.w	r3, r3, #1
 8012978:	64bb      	str	r3, [r7, #72]	@ 0x48
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3308      	adds	r3, #8
 8012980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012982:	61fa      	str	r2, [r7, #28]
 8012984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012986:	69b9      	ldr	r1, [r7, #24]
 8012988:	69fa      	ldr	r2, [r7, #28]
 801298a:	e841 2300 	strex	r3, r2, [r1]
 801298e:	617b      	str	r3, [r7, #20]
   return(result);
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d1e5      	bne.n	8012962 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2220      	movs	r2, #32
 801299a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2200      	movs	r2, #0
 80129a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129a6:	2303      	movs	r3, #3
 80129a8:	e012      	b.n	80129d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2220      	movs	r2, #32
 80129ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2220      	movs	r2, #32
 80129b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2200      	movs	r2, #0
 80129ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3758      	adds	r7, #88	@ 0x58
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	60b9      	str	r1, [r7, #8]
 80129e2:	603b      	str	r3, [r7, #0]
 80129e4:	4613      	mov	r3, r2
 80129e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129e8:	e04f      	b.n	8012a8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129f0:	d04b      	beq.n	8012a8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129f2:	f7f3 f881 	bl	8005af8 <HAL_GetTick>
 80129f6:	4602      	mov	r2, r0
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	1ad3      	subs	r3, r2, r3
 80129fc:	69ba      	ldr	r2, [r7, #24]
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d302      	bcc.n	8012a08 <UART_WaitOnFlagUntilTimeout+0x30>
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d101      	bne.n	8012a0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	e04e      	b.n	8012aaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	f003 0304 	and.w	r3, r3, #4
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d037      	beq.n	8012a8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	2b80      	cmp	r3, #128	@ 0x80
 8012a1e:	d034      	beq.n	8012a8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	2b40      	cmp	r3, #64	@ 0x40
 8012a24:	d031      	beq.n	8012a8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	69db      	ldr	r3, [r3, #28]
 8012a2c:	f003 0308 	and.w	r3, r3, #8
 8012a30:	2b08      	cmp	r3, #8
 8012a32:	d110      	bne.n	8012a56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2208      	movs	r2, #8
 8012a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f000 f95b 	bl	8012cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	2208      	movs	r2, #8
 8012a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8012a52:	2301      	movs	r3, #1
 8012a54:	e029      	b.n	8012aaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	69db      	ldr	r3, [r3, #28]
 8012a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a64:	d111      	bne.n	8012a8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012a70:	68f8      	ldr	r0, [r7, #12]
 8012a72:	f000 f941 	bl	8012cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2220      	movs	r2, #32
 8012a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2200      	movs	r2, #0
 8012a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012a86:	2303      	movs	r3, #3
 8012a88:	e00f      	b.n	8012aaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	69da      	ldr	r2, [r3, #28]
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	4013      	ands	r3, r2
 8012a94:	68ba      	ldr	r2, [r7, #8]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	bf0c      	ite	eq
 8012a9a:	2301      	moveq	r3, #1
 8012a9c:	2300      	movne	r3, #0
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	79fb      	ldrb	r3, [r7, #7]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d0a0      	beq.n	80129ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3710      	adds	r7, #16
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
	...

08012ab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b0a3      	sub	sp, #140	@ 0x8c
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	68ba      	ldr	r2, [r7, #8]
 8012ac6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	88fa      	ldrh	r2, [r7, #6]
 8012acc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	88fa      	ldrh	r2, [r7, #6]
 8012ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2200      	movs	r2, #0
 8012adc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ae6:	d10e      	bne.n	8012b06 <UART_Start_Receive_IT+0x52>
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	691b      	ldr	r3, [r3, #16]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d105      	bne.n	8012afc <UART_Start_Receive_IT+0x48>
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012af6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012afa:	e02d      	b.n	8012b58 <UART_Start_Receive_IT+0xa4>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	22ff      	movs	r2, #255	@ 0xff
 8012b00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012b04:	e028      	b.n	8012b58 <UART_Start_Receive_IT+0xa4>
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	689b      	ldr	r3, [r3, #8]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d10d      	bne.n	8012b2a <UART_Start_Receive_IT+0x76>
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	691b      	ldr	r3, [r3, #16]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d104      	bne.n	8012b20 <UART_Start_Receive_IT+0x6c>
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	22ff      	movs	r2, #255	@ 0xff
 8012b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012b1e:	e01b      	b.n	8012b58 <UART_Start_Receive_IT+0xa4>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	227f      	movs	r2, #127	@ 0x7f
 8012b24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012b28:	e016      	b.n	8012b58 <UART_Start_Receive_IT+0xa4>
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b32:	d10d      	bne.n	8012b50 <UART_Start_Receive_IT+0x9c>
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	691b      	ldr	r3, [r3, #16]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d104      	bne.n	8012b46 <UART_Start_Receive_IT+0x92>
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	227f      	movs	r2, #127	@ 0x7f
 8012b40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012b44:	e008      	b.n	8012b58 <UART_Start_Receive_IT+0xa4>
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	223f      	movs	r2, #63	@ 0x3f
 8012b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012b4e:	e003      	b.n	8012b58 <UART_Start_Receive_IT+0xa4>
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2200      	movs	r2, #0
 8012b54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2222      	movs	r2, #34	@ 0x22
 8012b64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	3308      	adds	r3, #8
 8012b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b72:	e853 3f00 	ldrex	r3, [r3]
 8012b76:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8012b78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b7a:	f043 0301 	orr.w	r3, r3, #1
 8012b7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	3308      	adds	r3, #8
 8012b88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012b8c:	673a      	str	r2, [r7, #112]	@ 0x70
 8012b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012b92:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012b94:	e841 2300 	strex	r3, r2, [r1]
 8012b98:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8012b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d1e3      	bne.n	8012b68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012ba8:	d14f      	bne.n	8012c4a <UART_Start_Receive_IT+0x196>
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012bb0:	88fa      	ldrh	r2, [r7, #6]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d349      	bcc.n	8012c4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bbe:	d107      	bne.n	8012bd0 <UART_Start_Receive_IT+0x11c>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d103      	bne.n	8012bd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	4a47      	ldr	r2, [pc, #284]	@ (8012ce8 <UART_Start_Receive_IT+0x234>)
 8012bcc:	675a      	str	r2, [r3, #116]	@ 0x74
 8012bce:	e002      	b.n	8012bd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	4a46      	ldr	r2, [pc, #280]	@ (8012cec <UART_Start_Receive_IT+0x238>)
 8012bd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	691b      	ldr	r3, [r3, #16]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d01a      	beq.n	8012c14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012be6:	e853 3f00 	ldrex	r3, [r3]
 8012bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012bf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c02:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012c06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c08:	e841 2300 	strex	r3, r2, [r1]
 8012c0c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8012c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1e4      	bne.n	8012bde <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	3308      	adds	r3, #8
 8012c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c1e:	e853 3f00 	ldrex	r3, [r3]
 8012c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	3308      	adds	r3, #8
 8012c32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012c34:	64ba      	str	r2, [r7, #72]	@ 0x48
 8012c36:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012c3c:	e841 2300 	strex	r3, r2, [r1]
 8012c40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8012c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1e5      	bne.n	8012c14 <UART_Start_Receive_IT+0x160>
 8012c48:	e046      	b.n	8012cd8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c52:	d107      	bne.n	8012c64 <UART_Start_Receive_IT+0x1b0>
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	691b      	ldr	r3, [r3, #16]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d103      	bne.n	8012c64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	4a24      	ldr	r2, [pc, #144]	@ (8012cf0 <UART_Start_Receive_IT+0x23c>)
 8012c60:	675a      	str	r2, [r3, #116]	@ 0x74
 8012c62:	e002      	b.n	8012c6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	4a23      	ldr	r2, [pc, #140]	@ (8012cf4 <UART_Start_Receive_IT+0x240>)
 8012c68:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	691b      	ldr	r3, [r3, #16]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d019      	beq.n	8012ca6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c7a:	e853 3f00 	ldrex	r3, [r3]
 8012c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c82:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8012c86:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8012c92:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012c98:	e841 2300 	strex	r3, r2, [r1]
 8012c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8012c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1e6      	bne.n	8012c72 <UART_Start_Receive_IT+0x1be>
 8012ca4:	e018      	b.n	8012cd8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	e853 3f00 	ldrex	r3, [r3]
 8012cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	f043 0320 	orr.w	r3, r3, #32
 8012cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012cc4:	623b      	str	r3, [r7, #32]
 8012cc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cc8:	69f9      	ldr	r1, [r7, #28]
 8012cca:	6a3a      	ldr	r2, [r7, #32]
 8012ccc:	e841 2300 	strex	r3, r2, [r1]
 8012cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d1e6      	bne.n	8012ca6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012cd8:	2300      	movs	r3, #0
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	378c      	adds	r7, #140	@ 0x8c
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	08013541 	.word	0x08013541
 8012cec:	080131d1 	.word	0x080131d1
 8012cf0:	0801300d 	.word	0x0801300d
 8012cf4:	08012e49 	.word	0x08012e49

08012cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b095      	sub	sp, #84	@ 0x54
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d08:	e853 3f00 	ldrex	r3, [r3]
 8012d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d26:	e841 2300 	strex	r3, r2, [r1]
 8012d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1e6      	bne.n	8012d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	3308      	adds	r3, #8
 8012d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d3a:	6a3b      	ldr	r3, [r7, #32]
 8012d3c:	e853 3f00 	ldrex	r3, [r3]
 8012d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012d48:	f023 0301 	bic.w	r3, r3, #1
 8012d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	3308      	adds	r3, #8
 8012d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d5e:	e841 2300 	strex	r3, r2, [r1]
 8012d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d1e3      	bne.n	8012d32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d118      	bne.n	8012da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	e853 3f00 	ldrex	r3, [r3]
 8012d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	f023 0310 	bic.w	r3, r3, #16
 8012d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d90:	61bb      	str	r3, [r7, #24]
 8012d92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d94:	6979      	ldr	r1, [r7, #20]
 8012d96:	69ba      	ldr	r2, [r7, #24]
 8012d98:	e841 2300 	strex	r3, r2, [r1]
 8012d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1e6      	bne.n	8012d72 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2220      	movs	r2, #32
 8012da8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2200      	movs	r2, #0
 8012db6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012db8:	bf00      	nop
 8012dba:	3754      	adds	r7, #84	@ 0x54
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr

08012dc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012de2:	68f8      	ldr	r0, [r7, #12]
 8012de4:	f7ff fae8 	bl	80123b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012de8:	bf00      	nop
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b088      	sub	sp, #32
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	e853 3f00 	ldrex	r3, [r3]
 8012e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e0c:	61fb      	str	r3, [r7, #28]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	461a      	mov	r2, r3
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	61bb      	str	r3, [r7, #24]
 8012e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e1a:	6979      	ldr	r1, [r7, #20]
 8012e1c:	69ba      	ldr	r2, [r7, #24]
 8012e1e:	e841 2300 	strex	r3, r2, [r1]
 8012e22:	613b      	str	r3, [r7, #16]
   return(result);
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1e6      	bne.n	8012df8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2220      	movs	r2, #32
 8012e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2200      	movs	r2, #0
 8012e36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ff fab3 	bl	80123a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012e3e:	bf00      	nop
 8012e40:	3720      	adds	r7, #32
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
	...

08012e48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b09c      	sub	sp, #112	@ 0x70
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012e60:	2b22      	cmp	r3, #34	@ 0x22
 8012e62:	f040 80c3 	bne.w	8012fec <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012e70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8012e74:	b2d9      	uxtb	r1, r3
 8012e76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e80:	400a      	ands	r2, r1
 8012e82:	b2d2      	uxtb	r2, r2
 8012e84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	3b01      	subs	r3, #1
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	f040 80a6 	bne.w	8012ffc <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012eb8:	e853 3f00 	ldrex	r3, [r3]
 8012ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ece:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012ed0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ed2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012ed4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ed6:	e841 2300 	strex	r3, r2, [r1]
 8012eda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d1e6      	bne.n	8012eb0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	3308      	adds	r3, #8
 8012ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eec:	e853 3f00 	ldrex	r3, [r3]
 8012ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ef4:	f023 0301 	bic.w	r3, r3, #1
 8012ef8:	667b      	str	r3, [r7, #100]	@ 0x64
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	3308      	adds	r3, #8
 8012f00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012f02:	647a      	str	r2, [r7, #68]	@ 0x44
 8012f04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012f0a:	e841 2300 	strex	r3, r2, [r1]
 8012f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1e5      	bne.n	8012ee2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2220      	movs	r2, #32
 8012f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4a35      	ldr	r2, [pc, #212]	@ (8013004 <UART_RxISR_8BIT+0x1bc>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d024      	beq.n	8012f7e <UART_RxISR_8BIT+0x136>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a33      	ldr	r2, [pc, #204]	@ (8013008 <UART_RxISR_8BIT+0x1c0>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d01f      	beq.n	8012f7e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d018      	beq.n	8012f7e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f54:	e853 3f00 	ldrex	r3, [r3]
 8012f58:	623b      	str	r3, [r7, #32]
   return(result);
 8012f5a:	6a3b      	ldr	r3, [r7, #32]
 8012f5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012f60:	663b      	str	r3, [r7, #96]	@ 0x60
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	461a      	mov	r2, r3
 8012f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f72:	e841 2300 	strex	r3, r2, [r1]
 8012f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d1e6      	bne.n	8012f4c <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f82:	2b01      	cmp	r3, #1
 8012f84:	d12e      	bne.n	8012fe4 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	e853 3f00 	ldrex	r3, [r3]
 8012f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	f023 0310 	bic.w	r3, r3, #16
 8012fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012faa:	61fb      	str	r3, [r7, #28]
 8012fac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fae:	69b9      	ldr	r1, [r7, #24]
 8012fb0:	69fa      	ldr	r2, [r7, #28]
 8012fb2:	e841 2300 	strex	r3, r2, [r1]
 8012fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d1e6      	bne.n	8012f8c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	69db      	ldr	r3, [r3, #28]
 8012fc4:	f003 0310 	and.w	r3, r3, #16
 8012fc8:	2b10      	cmp	r3, #16
 8012fca:	d103      	bne.n	8012fd4 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2210      	movs	r2, #16
 8012fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012fda:	4619      	mov	r1, r3
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7ff f9f5 	bl	80123cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012fe2:	e00b      	b.n	8012ffc <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7ed ffb5 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 8012fea:	e007      	b.n	8012ffc <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	699a      	ldr	r2, [r3, #24]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f042 0208 	orr.w	r2, r2, #8
 8012ffa:	619a      	str	r2, [r3, #24]
}
 8012ffc:	bf00      	nop
 8012ffe:	3770      	adds	r7, #112	@ 0x70
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	46002400 	.word	0x46002400
 8013008:	56002400 	.word	0x56002400

0801300c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b09c      	sub	sp, #112	@ 0x70
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801301a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013024:	2b22      	cmp	r3, #34	@ 0x22
 8013026:	f040 80c3 	bne.w	80131b0 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013030:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013038:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801303a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801303e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8013042:	4013      	ands	r3, r2
 8013044:	b29a      	uxth	r2, r3
 8013046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013048:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801304e:	1c9a      	adds	r2, r3, #2
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801305a:	b29b      	uxth	r3, r3
 801305c:	3b01      	subs	r3, #1
 801305e:	b29a      	uxth	r2, r3
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801306c:	b29b      	uxth	r3, r3
 801306e:	2b00      	cmp	r3, #0
 8013070:	f040 80a6 	bne.w	80131c0 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801307a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801307c:	e853 3f00 	ldrex	r3, [r3]
 8013080:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8013082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013088:	667b      	str	r3, [r7, #100]	@ 0x64
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	461a      	mov	r2, r3
 8013090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013092:	657b      	str	r3, [r7, #84]	@ 0x54
 8013094:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801309a:	e841 2300 	strex	r3, r2, [r1]
 801309e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80130a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d1e6      	bne.n	8013074 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	3308      	adds	r3, #8
 80130ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130b0:	e853 3f00 	ldrex	r3, [r3]
 80130b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80130b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b8:	f023 0301 	bic.w	r3, r3, #1
 80130bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	3308      	adds	r3, #8
 80130c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80130c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80130c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80130cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80130ce:	e841 2300 	strex	r3, r2, [r1]
 80130d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80130d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d1e5      	bne.n	80130a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2220      	movs	r2, #32
 80130de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2200      	movs	r2, #0
 80130ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a35      	ldr	r2, [pc, #212]	@ (80131c8 <UART_RxISR_16BIT+0x1bc>)
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d024      	beq.n	8013142 <UART_RxISR_16BIT+0x136>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a33      	ldr	r2, [pc, #204]	@ (80131cc <UART_RxISR_16BIT+0x1c0>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d01f      	beq.n	8013142 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801310c:	2b00      	cmp	r3, #0
 801310e:	d018      	beq.n	8013142 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	e853 3f00 	ldrex	r3, [r3]
 801311c:	61fb      	str	r3, [r7, #28]
   return(result);
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	461a      	mov	r2, r3
 801312c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013130:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013136:	e841 2300 	strex	r3, r2, [r1]
 801313a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1e6      	bne.n	8013110 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013146:	2b01      	cmp	r3, #1
 8013148:	d12e      	bne.n	80131a8 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2200      	movs	r2, #0
 801314e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	e853 3f00 	ldrex	r3, [r3]
 801315c:	60bb      	str	r3, [r7, #8]
   return(result);
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	f023 0310 	bic.w	r3, r3, #16
 8013164:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	461a      	mov	r2, r3
 801316c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801316e:	61bb      	str	r3, [r7, #24]
 8013170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013172:	6979      	ldr	r1, [r7, #20]
 8013174:	69ba      	ldr	r2, [r7, #24]
 8013176:	e841 2300 	strex	r3, r2, [r1]
 801317a:	613b      	str	r3, [r7, #16]
   return(result);
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1e6      	bne.n	8013150 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	69db      	ldr	r3, [r3, #28]
 8013188:	f003 0310 	and.w	r3, r3, #16
 801318c:	2b10      	cmp	r3, #16
 801318e:	d103      	bne.n	8013198 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2210      	movs	r2, #16
 8013196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801319e:	4619      	mov	r1, r3
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7ff f913 	bl	80123cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80131a6:	e00b      	b.n	80131c0 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ed fed3 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 80131ae:	e007      	b.n	80131c0 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	699a      	ldr	r2, [r3, #24]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	f042 0208 	orr.w	r2, r2, #8
 80131be:	619a      	str	r2, [r3, #24]
}
 80131c0:	bf00      	nop
 80131c2:	3770      	adds	r7, #112	@ 0x70
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	46002400 	.word	0x46002400
 80131cc:	56002400 	.word	0x56002400

080131d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b0ac      	sub	sp, #176	@ 0xb0
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80131de:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	69db      	ldr	r3, [r3, #28]
 80131e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013206:	2b22      	cmp	r3, #34	@ 0x22
 8013208:	f040 8187 	bne.w	801351a <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013212:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013216:	e12a      	b.n	801346e <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801321e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013222:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8013226:	b2d9      	uxtb	r1, r3
 8013228:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801322c:	b2da      	uxtb	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013232:	400a      	ands	r2, r1
 8013234:	b2d2      	uxtb	r2, r2
 8013236:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801323c:	1c5a      	adds	r2, r3, #1
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013248:	b29b      	uxth	r3, r3
 801324a:	3b01      	subs	r3, #1
 801324c:	b29a      	uxth	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	69db      	ldr	r3, [r3, #28]
 801325a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801325e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013262:	f003 0307 	and.w	r3, r3, #7
 8013266:	2b00      	cmp	r3, #0
 8013268:	d053      	beq.n	8013312 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801326a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801326e:	f003 0301 	and.w	r3, r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	d011      	beq.n	801329a <UART_RxISR_8BIT_FIFOEN+0xca>
 8013276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801327e:	2b00      	cmp	r3, #0
 8013280:	d00b      	beq.n	801329a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2201      	movs	r2, #1
 8013288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013290:	f043 0201 	orr.w	r2, r3, #1
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801329a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801329e:	f003 0302 	and.w	r3, r3, #2
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d011      	beq.n	80132ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80132a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d00b      	beq.n	80132ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2202      	movs	r2, #2
 80132b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80132c0:	f043 0204 	orr.w	r2, r3, #4
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80132ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80132ce:	f003 0304 	and.w	r3, r3, #4
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d011      	beq.n	80132fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80132d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d00b      	beq.n	80132fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2204      	movs	r2, #4
 80132e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80132f0:	f043 0202 	orr.w	r2, r3, #2
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013300:	2b00      	cmp	r3, #0
 8013302:	d006      	beq.n	8013312 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ff f857 	bl	80123b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2200      	movs	r2, #0
 801330e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013318:	b29b      	uxth	r3, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	f040 80a7 	bne.w	801346e <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013328:	e853 3f00 	ldrex	r3, [r3]
 801332c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801332e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	461a      	mov	r2, r3
 801333e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013342:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013344:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013346:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013348:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801334a:	e841 2300 	strex	r3, r2, [r1]
 801334e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8013350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013352:	2b00      	cmp	r3, #0
 8013354:	d1e4      	bne.n	8013320 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	3308      	adds	r3, #8
 801335c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801335e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013360:	e853 3f00 	ldrex	r3, [r3]
 8013364:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8013366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801336c:	f023 0301 	bic.w	r3, r3, #1
 8013370:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	3308      	adds	r3, #8
 801337a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801337e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8013380:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013382:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8013384:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013386:	e841 2300 	strex	r3, r2, [r1]
 801338a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801338c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801338e:	2b00      	cmp	r3, #0
 8013390:	d1e1      	bne.n	8013356 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2220      	movs	r2, #32
 8013396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2200      	movs	r2, #0
 801339e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2200      	movs	r2, #0
 80133a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	4a62      	ldr	r2, [pc, #392]	@ (8013534 <UART_RxISR_8BIT_FIFOEN+0x364>)
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d026      	beq.n	80133fe <UART_RxISR_8BIT_FIFOEN+0x22e>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4a60      	ldr	r2, [pc, #384]	@ (8013538 <UART_RxISR_8BIT_FIFOEN+0x368>)
 80133b6:	4293      	cmp	r3, r2
 80133b8:	d021      	beq.n	80133fe <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d01a      	beq.n	80133fe <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133d0:	e853 3f00 	ldrex	r3, [r3]
 80133d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80133d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80133dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	461a      	mov	r2, r3
 80133e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80133ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80133ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80133f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80133f2:	e841 2300 	strex	r3, r2, [r1]
 80133f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80133f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1e4      	bne.n	80133c8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013402:	2b01      	cmp	r3, #1
 8013404:	d130      	bne.n	8013468 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2200      	movs	r2, #0
 801340a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013414:	e853 3f00 	ldrex	r3, [r3]
 8013418:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801341c:	f023 0310 	bic.w	r3, r3, #16
 8013420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	461a      	mov	r2, r3
 801342a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801342e:	643b      	str	r3, [r7, #64]	@ 0x40
 8013430:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013436:	e841 2300 	strex	r3, r2, [r1]
 801343a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343e:	2b00      	cmp	r3, #0
 8013440:	d1e4      	bne.n	801340c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	69db      	ldr	r3, [r3, #28]
 8013448:	f003 0310 	and.w	r3, r3, #16
 801344c:	2b10      	cmp	r3, #16
 801344e:	d103      	bne.n	8013458 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2210      	movs	r2, #16
 8013456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801345e:	4619      	mov	r1, r3
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7fe ffb3 	bl	80123cc <HAL_UARTEx_RxEventCallback>
 8013466:	e002      	b.n	801346e <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f7ed fd73 	bl	8000f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801346e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8013472:	2b00      	cmp	r3, #0
 8013474:	d006      	beq.n	8013484 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8013476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801347a:	f003 0320 	and.w	r3, r3, #32
 801347e:	2b00      	cmp	r3, #0
 8013480:	f47f aeca 	bne.w	8013218 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801348a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801348e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013492:	2b00      	cmp	r3, #0
 8013494:	d049      	beq.n	801352a <UART_RxISR_8BIT_FIFOEN+0x35a>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801349c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d242      	bcs.n	801352a <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	3308      	adds	r3, #8
 80134aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ac:	6a3b      	ldr	r3, [r7, #32]
 80134ae:	e853 3f00 	ldrex	r3, [r3]
 80134b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80134b4:	69fb      	ldr	r3, [r7, #28]
 80134b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80134ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	3308      	adds	r3, #8
 80134c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80134c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80134ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80134ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134d0:	e841 2300 	strex	r3, r2, [r1]
 80134d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80134d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1e3      	bne.n	80134a4 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	4a17      	ldr	r2, [pc, #92]	@ (801353c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 80134e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	e853 3f00 	ldrex	r3, [r3]
 80134ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	f043 0320 	orr.w	r3, r3, #32
 80134f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	461a      	mov	r2, r3
 8013500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013504:	61bb      	str	r3, [r7, #24]
 8013506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013508:	6979      	ldr	r1, [r7, #20]
 801350a:	69ba      	ldr	r2, [r7, #24]
 801350c:	e841 2300 	strex	r3, r2, [r1]
 8013510:	613b      	str	r3, [r7, #16]
   return(result);
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1e4      	bne.n	80134e2 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013518:	e007      	b.n	801352a <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	699a      	ldr	r2, [r3, #24]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f042 0208 	orr.w	r2, r2, #8
 8013528:	619a      	str	r2, [r3, #24]
}
 801352a:	bf00      	nop
 801352c:	37b0      	adds	r7, #176	@ 0xb0
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	46002400 	.word	0x46002400
 8013538:	56002400 	.word	0x56002400
 801353c:	08012e49 	.word	0x08012e49

08013540 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b0ae      	sub	sp, #184	@ 0xb8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801354e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	69db      	ldr	r3, [r3, #28]
 8013558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	689b      	ldr	r3, [r3, #8]
 801356c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013576:	2b22      	cmp	r3, #34	@ 0x22
 8013578:	f040 818b 	bne.w	8013892 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013582:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013586:	e12e      	b.n	80137e6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801358e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801359a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801359e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80135a2:	4013      	ands	r3, r2
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80135aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80135b0:	1c9a      	adds	r2, r3, #2
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80135bc:	b29b      	uxth	r3, r3
 80135be:	3b01      	subs	r3, #1
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	69db      	ldr	r3, [r3, #28]
 80135ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80135d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80135d6:	f003 0307 	and.w	r3, r3, #7
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d053      	beq.n	8013686 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80135de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80135e2:	f003 0301 	and.w	r3, r3, #1
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d011      	beq.n	801360e <UART_RxISR_16BIT_FIFOEN+0xce>
 80135ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80135ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d00b      	beq.n	801360e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2201      	movs	r2, #1
 80135fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013604:	f043 0201 	orr.w	r2, r3, #1
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801360e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013612:	f003 0302 	and.w	r3, r3, #2
 8013616:	2b00      	cmp	r3, #0
 8013618:	d011      	beq.n	801363e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801361a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00b      	beq.n	801363e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2202      	movs	r2, #2
 801362c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013634:	f043 0204 	orr.w	r2, r3, #4
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801363e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013642:	f003 0304 	and.w	r3, r3, #4
 8013646:	2b00      	cmp	r3, #0
 8013648:	d011      	beq.n	801366e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801364a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801364e:	f003 0301 	and.w	r3, r3, #1
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00b      	beq.n	801366e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2204      	movs	r2, #4
 801365c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013664:	f043 0202 	orr.w	r2, r3, #2
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013674:	2b00      	cmp	r3, #0
 8013676:	d006      	beq.n	8013686 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f7fe fe9d 	bl	80123b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2200      	movs	r2, #0
 8013682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801368c:	b29b      	uxth	r3, r3
 801368e:	2b00      	cmp	r3, #0
 8013690:	f040 80a9 	bne.w	80137e6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801369a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801369c:	e853 3f00 	ldrex	r3, [r3]
 80136a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80136a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80136a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80136a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	461a      	mov	r2, r3
 80136b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80136b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80136ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80136be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80136c2:	e841 2300 	strex	r3, r2, [r1]
 80136c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80136c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d1e2      	bne.n	8013694 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	3308      	adds	r3, #8
 80136d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80136d8:	e853 3f00 	ldrex	r3, [r3]
 80136dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80136de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80136e4:	f023 0301 	bic.w	r3, r3, #1
 80136e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	3308      	adds	r3, #8
 80136f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80136f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80136f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80136fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80136fe:	e841 2300 	strex	r3, r2, [r1]
 8013702:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013706:	2b00      	cmp	r3, #0
 8013708:	d1e1      	bne.n	80136ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2220      	movs	r2, #32
 801370e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2200      	movs	r2, #0
 8013716:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2200      	movs	r2, #0
 801371c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	4a62      	ldr	r2, [pc, #392]	@ (80138ac <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8013724:	4293      	cmp	r3, r2
 8013726:	d026      	beq.n	8013776 <UART_RxISR_16BIT_FIFOEN+0x236>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	4a60      	ldr	r2, [pc, #384]	@ (80138b0 <UART_RxISR_16BIT_FIFOEN+0x370>)
 801372e:	4293      	cmp	r3, r2
 8013730:	d021      	beq.n	8013776 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801373c:	2b00      	cmp	r3, #0
 801373e:	d01a      	beq.n	8013776 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013748:	e853 3f00 	ldrex	r3, [r3]
 801374c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801374e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013750:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013754:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	461a      	mov	r2, r3
 801375e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013764:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013766:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013768:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801376a:	e841 2300 	strex	r3, r2, [r1]
 801376e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013772:	2b00      	cmp	r3, #0
 8013774:	d1e4      	bne.n	8013740 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801377a:	2b01      	cmp	r3, #1
 801377c:	d130      	bne.n	80137e0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801378c:	e853 3f00 	ldrex	r3, [r3]
 8013790:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013794:	f023 0310 	bic.w	r3, r3, #16
 8013798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	461a      	mov	r2, r3
 80137a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80137a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80137a8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80137ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80137ae:	e841 2300 	strex	r3, r2, [r1]
 80137b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80137b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d1e4      	bne.n	8013784 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	69db      	ldr	r3, [r3, #28]
 80137c0:	f003 0310 	and.w	r3, r3, #16
 80137c4:	2b10      	cmp	r3, #16
 80137c6:	d103      	bne.n	80137d0 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2210      	movs	r2, #16
 80137ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80137d6:	4619      	mov	r1, r3
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f7fe fdf7 	bl	80123cc <HAL_UARTEx_RxEventCallback>
 80137de:	e002      	b.n	80137e6 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7ed fbb7 	bl	8000f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80137e6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d006      	beq.n	80137fc <UART_RxISR_16BIT_FIFOEN+0x2bc>
 80137ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80137f2:	f003 0320 	and.w	r3, r3, #32
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f47f aec6 	bne.w	8013588 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8013802:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013806:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801380a:	2b00      	cmp	r3, #0
 801380c:	d049      	beq.n	80138a2 <UART_RxISR_16BIT_FIFOEN+0x362>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013814:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8013818:	429a      	cmp	r2, r3
 801381a:	d242      	bcs.n	80138a2 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	3308      	adds	r3, #8
 8013822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013826:	e853 3f00 	ldrex	r3, [r3]
 801382a:	623b      	str	r3, [r7, #32]
   return(result);
 801382c:	6a3b      	ldr	r3, [r7, #32]
 801382e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	3308      	adds	r3, #8
 801383c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013840:	633a      	str	r2, [r7, #48]	@ 0x30
 8013842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013848:	e841 2300 	strex	r3, r2, [r1]
 801384c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013850:	2b00      	cmp	r3, #0
 8013852:	d1e3      	bne.n	801381c <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	4a17      	ldr	r2, [pc, #92]	@ (80138b4 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8013858:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	e853 3f00 	ldrex	r3, [r3]
 8013866:	60fb      	str	r3, [r7, #12]
   return(result);
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f043 0320 	orr.w	r3, r3, #32
 801386e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	461a      	mov	r2, r3
 8013878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801387c:	61fb      	str	r3, [r7, #28]
 801387e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013880:	69b9      	ldr	r1, [r7, #24]
 8013882:	69fa      	ldr	r2, [r7, #28]
 8013884:	e841 2300 	strex	r3, r2, [r1]
 8013888:	617b      	str	r3, [r7, #20]
   return(result);
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d1e4      	bne.n	801385a <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013890:	e007      	b.n	80138a2 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	699a      	ldr	r2, [r3, #24]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f042 0208 	orr.w	r2, r2, #8
 80138a0:	619a      	str	r2, [r3, #24]
}
 80138a2:	bf00      	nop
 80138a4:	37b8      	adds	r7, #184	@ 0xb8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	46002400 	.word	0x46002400
 80138b0:	56002400 	.word	0x56002400
 80138b4:	0801300d 	.word	0x0801300d

080138b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80138c0:	bf00      	nop
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80138d4:	bf00      	nop
 80138d6:	370c      	adds	r7, #12
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr

080138e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	d101      	bne.n	80138f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80138f2:	2302      	movs	r3, #2
 80138f4:	e027      	b.n	8013946 <HAL_UARTEx_DisableFifoMode+0x66>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2201      	movs	r2, #1
 80138fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2224      	movs	r2, #36	@ 0x24
 8013902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f022 0201 	bic.w	r2, r2, #1
 801391c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2220      	movs	r2, #32
 8013938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3714      	adds	r7, #20
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b084      	sub	sp, #16
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013962:	2b01      	cmp	r3, #1
 8013964:	d101      	bne.n	801396a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013966:	2302      	movs	r3, #2
 8013968:	e02d      	b.n	80139c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2201      	movs	r2, #1
 801396e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2224      	movs	r2, #36	@ 0x24
 8013976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f022 0201 	bic.w	r2, r2, #1
 8013990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	683a      	ldr	r2, [r7, #0]
 80139a2:	430a      	orrs	r2, r1
 80139a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 f850 	bl	8013a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	68fa      	ldr	r2, [r7, #12]
 80139b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2220      	movs	r2, #32
 80139b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b084      	sub	sp, #16
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d101      	bne.n	80139e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80139e2:	2302      	movs	r3, #2
 80139e4:	e02d      	b.n	8013a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2201      	movs	r2, #1
 80139ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2224      	movs	r2, #36	@ 0x24
 80139f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f022 0201 	bic.w	r2, r2, #1
 8013a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	430a      	orrs	r2, r1
 8013a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f000 f812 	bl	8013a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	68fa      	ldr	r2, [r7, #12]
 8013a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2220      	movs	r2, #32
 8013a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
	...

08013a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d108      	bne.n	8013a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2201      	movs	r2, #1
 8013a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2201      	movs	r2, #1
 8013a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013a6c:	e031      	b.n	8013ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013a6e:	2308      	movs	r3, #8
 8013a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013a72:	2308      	movs	r3, #8
 8013a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	689b      	ldr	r3, [r3, #8]
 8013a7c:	0e5b      	lsrs	r3, r3, #25
 8013a7e:	b2db      	uxtb	r3, r3
 8013a80:	f003 0307 	and.w	r3, r3, #7
 8013a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	0f5b      	lsrs	r3, r3, #29
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	f003 0307 	and.w	r3, r3, #7
 8013a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013a96:	7bbb      	ldrb	r3, [r7, #14]
 8013a98:	7b3a      	ldrb	r2, [r7, #12]
 8013a9a:	4911      	ldr	r1, [pc, #68]	@ (8013ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8013a9c:	5c8a      	ldrb	r2, [r1, r2]
 8013a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013aa2:	7b3a      	ldrb	r2, [r7, #12]
 8013aa4:	490f      	ldr	r1, [pc, #60]	@ (8013ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8013aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013ab4:	7bfb      	ldrb	r3, [r7, #15]
 8013ab6:	7b7a      	ldrb	r2, [r7, #13]
 8013ab8:	4909      	ldr	r1, [pc, #36]	@ (8013ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8013aba:	5c8a      	ldrb	r2, [r1, r2]
 8013abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013ac0:	7b7a      	ldrb	r2, [r7, #13]
 8013ac2:	4908      	ldr	r1, [pc, #32]	@ (8013ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8013ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013ad2:	bf00      	nop
 8013ad4:	3714      	adds	r7, #20
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	08017d10 	.word	0x08017d10
 8013ae4:	08017d18 	.word	0x08017d18

08013ae8 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b086      	sub	sp, #24
 8013aec:	af02      	add	r7, sp, #8
 8013aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013af0:	2300      	movs	r3, #0
 8013af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8013af4:	f7f2 f800 	bl	8005af8 <HAL_GetTick>
 8013af8:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d102      	bne.n	8013b06 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8013b00:	2301      	movs	r3, #1
 8013b02:	73fb      	strb	r3, [r7, #15]
 8013b04:	e137      	b.n	8013d76 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	4a76      	ldr	r2, [pc, #472]	@ (8013ce4 <HAL_XSPI_Init+0x1fc>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d008      	beq.n	8013b22 <HAL_XSPI_Init+0x3a>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4a74      	ldr	r2, [pc, #464]	@ (8013ce8 <HAL_XSPI_Init+0x200>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d003      	beq.n	8013b22 <HAL_XSPI_Init+0x3a>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	4a73      	ldr	r2, [pc, #460]	@ (8013cec <HAL_XSPI_Init+0x204>)
 8013b20:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4a72      	ldr	r2, [pc, #456]	@ (8013cf0 <HAL_XSPI_Init+0x208>)
 8013b28:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8013ce4 <HAL_XSPI_Init+0x1fc>)
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d008      	beq.n	8013b46 <HAL_XSPI_Init+0x5e>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4a6b      	ldr	r2, [pc, #428]	@ (8013ce8 <HAL_XSPI_Init+0x200>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d003      	beq.n	8013b46 <HAL_XSPI_Init+0x5e>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	4a6a      	ldr	r2, [pc, #424]	@ (8013cec <HAL_XSPI_Init+0x204>)
 8013b44:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	4a66      	ldr	r2, [pc, #408]	@ (8013ce4 <HAL_XSPI_Init+0x1fc>)
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	d008      	beq.n	8013b62 <HAL_XSPI_Init+0x7a>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a64      	ldr	r2, [pc, #400]	@ (8013ce8 <HAL_XSPI_Init+0x200>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d003      	beq.n	8013b62 <HAL_XSPI_Init+0x7a>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	4a63      	ldr	r2, [pc, #396]	@ (8013cec <HAL_XSPI_Init+0x204>)
 8013b60:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2200      	movs	r2, #0
 8013b66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f040 8102 	bne.w	8013d76 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7f0 fdae 	bl	80046d4 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8013b78:	f241 3188 	movw	r1, #5000	@ 0x1388
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f000 f8ff 	bl	8013d80 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	689a      	ldr	r2, [r3, #8]
 8013b88:	4b5a      	ldr	r3, [pc, #360]	@ (8013cf4 <HAL_XSPI_Init+0x20c>)
 8013b8a:	4013      	ands	r3, r2
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	68d1      	ldr	r1, [r2, #12]
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	6912      	ldr	r2, [r2, #16]
 8013b94:	0412      	lsls	r2, r2, #16
 8013b96:	4311      	orrs	r1, r2
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	6952      	ldr	r2, [r2, #20]
 8013b9c:	3a01      	subs	r2, #1
 8013b9e:	0212      	lsls	r2, r2, #8
 8013ba0:	4311      	orrs	r1, r2
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	69d2      	ldr	r2, [r2, #28]
 8013ba6:	4311      	orrs	r1, r2
 8013ba8:	687a      	ldr	r2, [r7, #4]
 8013baa:	6812      	ldr	r2, [r2, #0]
 8013bac:	430b      	orrs	r3, r1
 8013bae:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8013ce4 <HAL_XSPI_Init+0x1fc>)
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d00e      	beq.n	8013bd8 <HAL_XSPI_Init+0xf0>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8013ce8 <HAL_XSPI_Init+0x200>)
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d009      	beq.n	8013bd8 <HAL_XSPI_Init+0xf0>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	4a48      	ldr	r2, [pc, #288]	@ (8013cec <HAL_XSPI_Init+0x204>)
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d004      	beq.n	8013bd8 <HAL_XSPI_Init+0xf0>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4a49      	ldr	r2, [pc, #292]	@ (8013cf8 <HAL_XSPI_Init+0x210>)
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	d10a      	bne.n	8013bee <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	f023 0108 	bic.w	r1, r3, #8
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	430a      	orrs	r2, r1
 8013bec:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6a1a      	ldr	r2, [r3, #32]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	430a      	orrs	r2, r1
 8013c02:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c12:	041a      	lsls	r2, r3, #16
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	430a      	orrs	r2, r1
 8013c1a:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	4a30      	ldr	r2, [pc, #192]	@ (8013ce4 <HAL_XSPI_Init+0x1fc>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d00e      	beq.n	8013c44 <HAL_XSPI_Init+0x15c>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8013ce8 <HAL_XSPI_Init+0x200>)
 8013c2c:	4293      	cmp	r3, r2
 8013c2e:	d009      	beq.n	8013c44 <HAL_XSPI_Init+0x15c>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4a2d      	ldr	r2, [pc, #180]	@ (8013cec <HAL_XSPI_Init+0x204>)
 8013c36:	4293      	cmp	r3, r2
 8013c38:	d004      	beq.n	8013c44 <HAL_XSPI_Init+0x15c>
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8013cf8 <HAL_XSPI_Init+0x210>)
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d10a      	bne.n	8013c5a <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	691b      	ldr	r3, [r3, #16]
 8013c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	430a      	orrs	r2, r1
 8013c58:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8013c62:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	3b01      	subs	r3, #1
 8013c74:	021a      	lsls	r2, r3, #8
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	430a      	orrs	r2, r1
 8013c7c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013c82:	9300      	str	r3, [sp, #0]
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	2200      	movs	r2, #0
 8013c88:	2120      	movs	r1, #32
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 f887 	bl	8013d9e <XSPI_WaitFlagStateUntilTimeout>
 8013c90:	4603      	mov	r3, r0
 8013c92:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d16d      	bne.n	8013d76 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	430a      	orrs	r2, r1
 8013cae:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8013cf0 <HAL_XSPI_Init+0x208>)
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d004      	beq.n	8013cc4 <HAL_XSPI_Init+0x1dc>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8013cfc <HAL_XSPI_Init+0x214>)
 8013cc0:	4293      	cmp	r3, r2
 8013cc2:	d11d      	bne.n	8013d00 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013cc8:	9300      	str	r3, [sp, #0]
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	2120      	movs	r1, #32
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f000 f864 	bl	8013d9e <XSPI_WaitFlagStateUntilTimeout>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8013cda:	7bfb      	ldrb	r3, [r7, #15]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00f      	beq.n	8013d00 <HAL_XSPI_Init+0x218>
          {
            return status;
 8013ce0:	7bfb      	ldrb	r3, [r7, #15]
 8013ce2:	e049      	b.n	8013d78 <HAL_XSPI_Init+0x290>
 8013ce4:	420d1400 	.word	0x420d1400
 8013ce8:	520d1400 	.word	0x520d1400
 8013cec:	420d2400 	.word	0x420d2400
 8013cf0:	420d3400 	.word	0x420d3400
 8013cf4:	f8e0c0fc 	.word	0xf8e0c0fc
 8013cf8:	520d2400 	.word	0x520d2400
 8013cfc:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	689a      	ldr	r2, [r3, #8]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	430a      	orrs	r2, r1
 8013d14:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013d1e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d2a:	431a      	orrs	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	430a      	orrs	r2, r1
 8013d32:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f042 0201 	orr.w	r2, r2, #1
 8013d44:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	699b      	ldr	r3, [r3, #24]
 8013d4a:	2b02      	cmp	r3, #2
 8013d4c:	d107      	bne.n	8013d5e <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	689a      	ldr	r2, [r3, #8]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f042 0202 	orr.w	r2, r2, #2
 8013d5c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	68db      	ldr	r3, [r3, #12]
 8013d62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013d66:	d103      	bne.n	8013d70 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8013d6e:	e002      	b.n	8013d76 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2202      	movs	r2, #2
 8013d74:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8013d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	683a      	ldr	r2, [r7, #0]
 8013d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr

08013d9e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013d9e:	b580      	push	{r7, lr}
 8013da0:	b084      	sub	sp, #16
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	60f8      	str	r0, [r7, #12]
 8013da6:	60b9      	str	r1, [r7, #8]
 8013da8:	603b      	str	r3, [r7, #0]
 8013daa:	4613      	mov	r3, r2
 8013dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013dae:	e01a      	b.n	8013de6 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db6:	d016      	beq.n	8013de6 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013db8:	f7f1 fe9e 	bl	8005af8 <HAL_GetTick>
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	1ad3      	subs	r3, r2, r3
 8013dc2:	69ba      	ldr	r2, [r7, #24]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d302      	bcc.n	8013dce <XSPI_WaitFlagStateUntilTimeout+0x30>
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d10b      	bne.n	8013de6 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013dda:	f043 0201 	orr.w	r2, r3, #1
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8013de2:	2303      	movs	r3, #3
 8013de4:	e00e      	b.n	8013e04 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	6a1a      	ldr	r2, [r3, #32]
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	4013      	ands	r3, r2
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	bf14      	ite	ne
 8013df4:	2301      	movne	r3, #1
 8013df6:	2300      	moveq	r3, #0
 8013df8:	b2db      	uxtb	r3, r3
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	79fb      	ldrb	r3, [r7, #7]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d1d6      	bne.n	8013db0 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013e02:	2300      	movs	r3, #0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <_strtol_l.constprop.0>:
 8013e0c:	2b24      	cmp	r3, #36	@ 0x24
 8013e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e12:	4686      	mov	lr, r0
 8013e14:	4690      	mov	r8, r2
 8013e16:	d801      	bhi.n	8013e1c <_strtol_l.constprop.0+0x10>
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d106      	bne.n	8013e2a <_strtol_l.constprop.0+0x1e>
 8013e1c:	f001 f8c8 	bl	8014fb0 <__errno>
 8013e20:	2316      	movs	r3, #22
 8013e22:	6003      	str	r3, [r0, #0]
 8013e24:	2000      	movs	r0, #0
 8013e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	4833      	ldr	r0, [pc, #204]	@ (8013efc <_strtol_l.constprop.0+0xf0>)
 8013e2e:	462a      	mov	r2, r5
 8013e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e34:	5d06      	ldrb	r6, [r0, r4]
 8013e36:	f016 0608 	ands.w	r6, r6, #8
 8013e3a:	d1f8      	bne.n	8013e2e <_strtol_l.constprop.0+0x22>
 8013e3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013e3e:	d12d      	bne.n	8013e9c <_strtol_l.constprop.0+0x90>
 8013e40:	782c      	ldrb	r4, [r5, #0]
 8013e42:	2601      	movs	r6, #1
 8013e44:	1c95      	adds	r5, r2, #2
 8013e46:	f033 0210 	bics.w	r2, r3, #16
 8013e4a:	d109      	bne.n	8013e60 <_strtol_l.constprop.0+0x54>
 8013e4c:	2c30      	cmp	r4, #48	@ 0x30
 8013e4e:	d12a      	bne.n	8013ea6 <_strtol_l.constprop.0+0x9a>
 8013e50:	782a      	ldrb	r2, [r5, #0]
 8013e52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013e56:	2a58      	cmp	r2, #88	@ 0x58
 8013e58:	d125      	bne.n	8013ea6 <_strtol_l.constprop.0+0x9a>
 8013e5a:	786c      	ldrb	r4, [r5, #1]
 8013e5c:	2310      	movs	r3, #16
 8013e5e:	3502      	adds	r5, #2
 8013e60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013e64:	2200      	movs	r2, #0
 8013e66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013e6a:	4610      	mov	r0, r2
 8013e6c:	fbbc f9f3 	udiv	r9, ip, r3
 8013e70:	fb03 ca19 	mls	sl, r3, r9, ip
 8013e74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013e78:	2f09      	cmp	r7, #9
 8013e7a:	d81b      	bhi.n	8013eb4 <_strtol_l.constprop.0+0xa8>
 8013e7c:	463c      	mov	r4, r7
 8013e7e:	42a3      	cmp	r3, r4
 8013e80:	dd27      	ble.n	8013ed2 <_strtol_l.constprop.0+0xc6>
 8013e82:	1c57      	adds	r7, r2, #1
 8013e84:	d007      	beq.n	8013e96 <_strtol_l.constprop.0+0x8a>
 8013e86:	4581      	cmp	r9, r0
 8013e88:	d320      	bcc.n	8013ecc <_strtol_l.constprop.0+0xc0>
 8013e8a:	d101      	bne.n	8013e90 <_strtol_l.constprop.0+0x84>
 8013e8c:	45a2      	cmp	sl, r4
 8013e8e:	db1d      	blt.n	8013ecc <_strtol_l.constprop.0+0xc0>
 8013e90:	fb00 4003 	mla	r0, r0, r3, r4
 8013e94:	2201      	movs	r2, #1
 8013e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e9a:	e7eb      	b.n	8013e74 <_strtol_l.constprop.0+0x68>
 8013e9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8013e9e:	bf04      	itt	eq
 8013ea0:	782c      	ldrbeq	r4, [r5, #0]
 8013ea2:	1c95      	addeq	r5, r2, #2
 8013ea4:	e7cf      	b.n	8013e46 <_strtol_l.constprop.0+0x3a>
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1da      	bne.n	8013e60 <_strtol_l.constprop.0+0x54>
 8013eaa:	2c30      	cmp	r4, #48	@ 0x30
 8013eac:	bf0c      	ite	eq
 8013eae:	2308      	moveq	r3, #8
 8013eb0:	230a      	movne	r3, #10
 8013eb2:	e7d5      	b.n	8013e60 <_strtol_l.constprop.0+0x54>
 8013eb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013eb8:	2f19      	cmp	r7, #25
 8013eba:	d801      	bhi.n	8013ec0 <_strtol_l.constprop.0+0xb4>
 8013ebc:	3c37      	subs	r4, #55	@ 0x37
 8013ebe:	e7de      	b.n	8013e7e <_strtol_l.constprop.0+0x72>
 8013ec0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013ec4:	2f19      	cmp	r7, #25
 8013ec6:	d804      	bhi.n	8013ed2 <_strtol_l.constprop.0+0xc6>
 8013ec8:	3c57      	subs	r4, #87	@ 0x57
 8013eca:	e7d8      	b.n	8013e7e <_strtol_l.constprop.0+0x72>
 8013ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ed0:	e7e1      	b.n	8013e96 <_strtol_l.constprop.0+0x8a>
 8013ed2:	1c53      	adds	r3, r2, #1
 8013ed4:	d108      	bne.n	8013ee8 <_strtol_l.constprop.0+0xdc>
 8013ed6:	2322      	movs	r3, #34	@ 0x22
 8013ed8:	4660      	mov	r0, ip
 8013eda:	f8ce 3000 	str.w	r3, [lr]
 8013ede:	f1b8 0f00 	cmp.w	r8, #0
 8013ee2:	d0a0      	beq.n	8013e26 <_strtol_l.constprop.0+0x1a>
 8013ee4:	1e69      	subs	r1, r5, #1
 8013ee6:	e006      	b.n	8013ef6 <_strtol_l.constprop.0+0xea>
 8013ee8:	b106      	cbz	r6, 8013eec <_strtol_l.constprop.0+0xe0>
 8013eea:	4240      	negs	r0, r0
 8013eec:	f1b8 0f00 	cmp.w	r8, #0
 8013ef0:	d099      	beq.n	8013e26 <_strtol_l.constprop.0+0x1a>
 8013ef2:	2a00      	cmp	r2, #0
 8013ef4:	d1f6      	bne.n	8013ee4 <_strtol_l.constprop.0+0xd8>
 8013ef6:	f8c8 1000 	str.w	r1, [r8]
 8013efa:	e794      	b.n	8013e26 <_strtol_l.constprop.0+0x1a>
 8013efc:	08017d21 	.word	0x08017d21

08013f00 <strtol>:
 8013f00:	4613      	mov	r3, r2
 8013f02:	460a      	mov	r2, r1
 8013f04:	4601      	mov	r1, r0
 8013f06:	4802      	ldr	r0, [pc, #8]	@ (8013f10 <strtol+0x10>)
 8013f08:	6800      	ldr	r0, [r0, #0]
 8013f0a:	f7ff bf7f 	b.w	8013e0c <_strtol_l.constprop.0>
 8013f0e:	bf00      	nop
 8013f10:	200001b4 	.word	0x200001b4

08013f14 <__cvt>:
 8013f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f18:	ec57 6b10 	vmov	r6, r7, d0
 8013f1c:	2f00      	cmp	r7, #0
 8013f1e:	460c      	mov	r4, r1
 8013f20:	4619      	mov	r1, r3
 8013f22:	463b      	mov	r3, r7
 8013f24:	bfb4      	ite	lt
 8013f26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013f2a:	2300      	movge	r3, #0
 8013f2c:	4691      	mov	r9, r2
 8013f2e:	bfbf      	itttt	lt
 8013f30:	4632      	movlt	r2, r6
 8013f32:	461f      	movlt	r7, r3
 8013f34:	232d      	movlt	r3, #45	@ 0x2d
 8013f36:	4616      	movlt	r6, r2
 8013f38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013f3c:	700b      	strb	r3, [r1, #0]
 8013f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f40:	f023 0820 	bic.w	r8, r3, #32
 8013f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013f48:	d005      	beq.n	8013f56 <__cvt+0x42>
 8013f4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013f4e:	d100      	bne.n	8013f52 <__cvt+0x3e>
 8013f50:	3401      	adds	r4, #1
 8013f52:	2102      	movs	r1, #2
 8013f54:	e000      	b.n	8013f58 <__cvt+0x44>
 8013f56:	2103      	movs	r1, #3
 8013f58:	ab03      	add	r3, sp, #12
 8013f5a:	4622      	mov	r2, r4
 8013f5c:	9301      	str	r3, [sp, #4]
 8013f5e:	ab02      	add	r3, sp, #8
 8013f60:	ec47 6b10 	vmov	d0, r6, r7
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	4653      	mov	r3, sl
 8013f68:	f001 f916 	bl	8015198 <_dtoa_r>
 8013f6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013f70:	4605      	mov	r5, r0
 8013f72:	d119      	bne.n	8013fa8 <__cvt+0x94>
 8013f74:	f019 0f01 	tst.w	r9, #1
 8013f78:	d00e      	beq.n	8013f98 <__cvt+0x84>
 8013f7a:	eb00 0904 	add.w	r9, r0, r4
 8013f7e:	2200      	movs	r2, #0
 8013f80:	2300      	movs	r3, #0
 8013f82:	4630      	mov	r0, r6
 8013f84:	4639      	mov	r1, r7
 8013f86:	f7ec fdcd 	bl	8000b24 <__aeabi_dcmpeq>
 8013f8a:	b108      	cbz	r0, 8013f90 <__cvt+0x7c>
 8013f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f90:	2230      	movs	r2, #48	@ 0x30
 8013f92:	9b03      	ldr	r3, [sp, #12]
 8013f94:	454b      	cmp	r3, r9
 8013f96:	d31e      	bcc.n	8013fd6 <__cvt+0xc2>
 8013f98:	9b03      	ldr	r3, [sp, #12]
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f9e:	1b5b      	subs	r3, r3, r5
 8013fa0:	6013      	str	r3, [r2, #0]
 8013fa2:	b004      	add	sp, #16
 8013fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013fac:	eb00 0904 	add.w	r9, r0, r4
 8013fb0:	d1e5      	bne.n	8013f7e <__cvt+0x6a>
 8013fb2:	7803      	ldrb	r3, [r0, #0]
 8013fb4:	2b30      	cmp	r3, #48	@ 0x30
 8013fb6:	d10a      	bne.n	8013fce <__cvt+0xba>
 8013fb8:	2200      	movs	r2, #0
 8013fba:	2300      	movs	r3, #0
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	4639      	mov	r1, r7
 8013fc0:	f7ec fdb0 	bl	8000b24 <__aeabi_dcmpeq>
 8013fc4:	b918      	cbnz	r0, 8013fce <__cvt+0xba>
 8013fc6:	f1c4 0401 	rsb	r4, r4, #1
 8013fca:	f8ca 4000 	str.w	r4, [sl]
 8013fce:	f8da 3000 	ldr.w	r3, [sl]
 8013fd2:	4499      	add	r9, r3
 8013fd4:	e7d3      	b.n	8013f7e <__cvt+0x6a>
 8013fd6:	1c59      	adds	r1, r3, #1
 8013fd8:	9103      	str	r1, [sp, #12]
 8013fda:	701a      	strb	r2, [r3, #0]
 8013fdc:	e7d9      	b.n	8013f92 <__cvt+0x7e>

08013fde <__exponent>:
 8013fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fe0:	2900      	cmp	r1, #0
 8013fe2:	7002      	strb	r2, [r0, #0]
 8013fe4:	bfba      	itte	lt
 8013fe6:	4249      	neglt	r1, r1
 8013fe8:	232d      	movlt	r3, #45	@ 0x2d
 8013fea:	232b      	movge	r3, #43	@ 0x2b
 8013fec:	2909      	cmp	r1, #9
 8013fee:	7043      	strb	r3, [r0, #1]
 8013ff0:	dd28      	ble.n	8014044 <__exponent+0x66>
 8013ff2:	f10d 0307 	add.w	r3, sp, #7
 8013ff6:	270a      	movs	r7, #10
 8013ff8:	461d      	mov	r5, r3
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	3b01      	subs	r3, #1
 8013ffe:	fbb1 f6f7 	udiv	r6, r1, r7
 8014002:	fb07 1416 	mls	r4, r7, r6, r1
 8014006:	3430      	adds	r4, #48	@ 0x30
 8014008:	f802 4c01 	strb.w	r4, [r2, #-1]
 801400c:	460c      	mov	r4, r1
 801400e:	4631      	mov	r1, r6
 8014010:	2c63      	cmp	r4, #99	@ 0x63
 8014012:	dcf2      	bgt.n	8013ffa <__exponent+0x1c>
 8014014:	3130      	adds	r1, #48	@ 0x30
 8014016:	1e94      	subs	r4, r2, #2
 8014018:	f803 1c01 	strb.w	r1, [r3, #-1]
 801401c:	1c41      	adds	r1, r0, #1
 801401e:	4623      	mov	r3, r4
 8014020:	42ab      	cmp	r3, r5
 8014022:	d30a      	bcc.n	801403a <__exponent+0x5c>
 8014024:	f10d 0309 	add.w	r3, sp, #9
 8014028:	1a9b      	subs	r3, r3, r2
 801402a:	42ac      	cmp	r4, r5
 801402c:	bf88      	it	hi
 801402e:	2300      	movhi	r3, #0
 8014030:	3302      	adds	r3, #2
 8014032:	4403      	add	r3, r0
 8014034:	1a18      	subs	r0, r3, r0
 8014036:	b003      	add	sp, #12
 8014038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801403a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801403e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014042:	e7ed      	b.n	8014020 <__exponent+0x42>
 8014044:	2330      	movs	r3, #48	@ 0x30
 8014046:	3130      	adds	r1, #48	@ 0x30
 8014048:	7083      	strb	r3, [r0, #2]
 801404a:	1d03      	adds	r3, r0, #4
 801404c:	70c1      	strb	r1, [r0, #3]
 801404e:	e7f1      	b.n	8014034 <__exponent+0x56>

08014050 <_printf_float>:
 8014050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014054:	b08d      	sub	sp, #52	@ 0x34
 8014056:	460c      	mov	r4, r1
 8014058:	4616      	mov	r6, r2
 801405a:	461f      	mov	r7, r3
 801405c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014060:	4605      	mov	r5, r0
 8014062:	f000 ff5b 	bl	8014f1c <_localeconv_r>
 8014066:	6803      	ldr	r3, [r0, #0]
 8014068:	4618      	mov	r0, r3
 801406a:	9304      	str	r3, [sp, #16]
 801406c:	f7ec f92e 	bl	80002cc <strlen>
 8014070:	2300      	movs	r3, #0
 8014072:	9005      	str	r0, [sp, #20]
 8014074:	930a      	str	r3, [sp, #40]	@ 0x28
 8014076:	f8d8 3000 	ldr.w	r3, [r8]
 801407a:	f894 a018 	ldrb.w	sl, [r4, #24]
 801407e:	3307      	adds	r3, #7
 8014080:	f8d4 b000 	ldr.w	fp, [r4]
 8014084:	f023 0307 	bic.w	r3, r3, #7
 8014088:	f103 0208 	add.w	r2, r3, #8
 801408c:	f8c8 2000 	str.w	r2, [r8]
 8014090:	f04f 32ff 	mov.w	r2, #4294967295
 8014094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014098:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801409c:	f8cd 8018 	str.w	r8, [sp, #24]
 80140a0:	9307      	str	r3, [sp, #28]
 80140a2:	4b9d      	ldr	r3, [pc, #628]	@ (8014318 <_printf_float+0x2c8>)
 80140a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80140ac:	f7ec fd6c 	bl	8000b88 <__aeabi_dcmpun>
 80140b0:	bb70      	cbnz	r0, 8014110 <_printf_float+0xc0>
 80140b2:	f04f 32ff 	mov.w	r2, #4294967295
 80140b6:	4b98      	ldr	r3, [pc, #608]	@ (8014318 <_printf_float+0x2c8>)
 80140b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80140bc:	f7ec fd46 	bl	8000b4c <__aeabi_dcmple>
 80140c0:	bb30      	cbnz	r0, 8014110 <_printf_float+0xc0>
 80140c2:	2200      	movs	r2, #0
 80140c4:	2300      	movs	r3, #0
 80140c6:	4640      	mov	r0, r8
 80140c8:	4649      	mov	r1, r9
 80140ca:	f7ec fd35 	bl	8000b38 <__aeabi_dcmplt>
 80140ce:	b110      	cbz	r0, 80140d6 <_printf_float+0x86>
 80140d0:	232d      	movs	r3, #45	@ 0x2d
 80140d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140d6:	4a91      	ldr	r2, [pc, #580]	@ (801431c <_printf_float+0x2cc>)
 80140d8:	4b91      	ldr	r3, [pc, #580]	@ (8014320 <_printf_float+0x2d0>)
 80140da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80140de:	bf94      	ite	ls
 80140e0:	4690      	movls	r8, r2
 80140e2:	4698      	movhi	r8, r3
 80140e4:	2303      	movs	r3, #3
 80140e6:	f04f 0900 	mov.w	r9, #0
 80140ea:	6123      	str	r3, [r4, #16]
 80140ec:	f02b 0304 	bic.w	r3, fp, #4
 80140f0:	6023      	str	r3, [r4, #0]
 80140f2:	4633      	mov	r3, r6
 80140f4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80140f6:	4621      	mov	r1, r4
 80140f8:	4628      	mov	r0, r5
 80140fa:	9700      	str	r7, [sp, #0]
 80140fc:	f000 f9d2 	bl	80144a4 <_printf_common>
 8014100:	3001      	adds	r0, #1
 8014102:	f040 808d 	bne.w	8014220 <_printf_float+0x1d0>
 8014106:	f04f 30ff 	mov.w	r0, #4294967295
 801410a:	b00d      	add	sp, #52	@ 0x34
 801410c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014110:	4642      	mov	r2, r8
 8014112:	464b      	mov	r3, r9
 8014114:	4640      	mov	r0, r8
 8014116:	4649      	mov	r1, r9
 8014118:	f7ec fd36 	bl	8000b88 <__aeabi_dcmpun>
 801411c:	b140      	cbz	r0, 8014130 <_printf_float+0xe0>
 801411e:	464b      	mov	r3, r9
 8014120:	4a80      	ldr	r2, [pc, #512]	@ (8014324 <_printf_float+0x2d4>)
 8014122:	2b00      	cmp	r3, #0
 8014124:	bfbc      	itt	lt
 8014126:	232d      	movlt	r3, #45	@ 0x2d
 8014128:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801412c:	4b7e      	ldr	r3, [pc, #504]	@ (8014328 <_printf_float+0x2d8>)
 801412e:	e7d4      	b.n	80140da <_printf_float+0x8a>
 8014130:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014134:	6863      	ldr	r3, [r4, #4]
 8014136:	9206      	str	r2, [sp, #24]
 8014138:	1c5a      	adds	r2, r3, #1
 801413a:	d13b      	bne.n	80141b4 <_printf_float+0x164>
 801413c:	2306      	movs	r3, #6
 801413e:	6063      	str	r3, [r4, #4]
 8014140:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014144:	2300      	movs	r3, #0
 8014146:	4628      	mov	r0, r5
 8014148:	6022      	str	r2, [r4, #0]
 801414a:	9303      	str	r3, [sp, #12]
 801414c:	ab0a      	add	r3, sp, #40	@ 0x28
 801414e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014152:	ab09      	add	r3, sp, #36	@ 0x24
 8014154:	ec49 8b10 	vmov	d0, r8, r9
 8014158:	9300      	str	r3, [sp, #0]
 801415a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801415e:	6861      	ldr	r1, [r4, #4]
 8014160:	f7ff fed8 	bl	8013f14 <__cvt>
 8014164:	9b06      	ldr	r3, [sp, #24]
 8014166:	4680      	mov	r8, r0
 8014168:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801416a:	2b47      	cmp	r3, #71	@ 0x47
 801416c:	d129      	bne.n	80141c2 <_printf_float+0x172>
 801416e:	1cc8      	adds	r0, r1, #3
 8014170:	db02      	blt.n	8014178 <_printf_float+0x128>
 8014172:	6863      	ldr	r3, [r4, #4]
 8014174:	4299      	cmp	r1, r3
 8014176:	dd41      	ble.n	80141fc <_printf_float+0x1ac>
 8014178:	f1aa 0a02 	sub.w	sl, sl, #2
 801417c:	fa5f fa8a 	uxtb.w	sl, sl
 8014180:	3901      	subs	r1, #1
 8014182:	4652      	mov	r2, sl
 8014184:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014188:	9109      	str	r1, [sp, #36]	@ 0x24
 801418a:	f7ff ff28 	bl	8013fde <__exponent>
 801418e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014190:	4681      	mov	r9, r0
 8014192:	1813      	adds	r3, r2, r0
 8014194:	2a01      	cmp	r2, #1
 8014196:	6123      	str	r3, [r4, #16]
 8014198:	dc02      	bgt.n	80141a0 <_printf_float+0x150>
 801419a:	6822      	ldr	r2, [r4, #0]
 801419c:	07d2      	lsls	r2, r2, #31
 801419e:	d501      	bpl.n	80141a4 <_printf_float+0x154>
 80141a0:	3301      	adds	r3, #1
 80141a2:	6123      	str	r3, [r4, #16]
 80141a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d0a2      	beq.n	80140f2 <_printf_float+0xa2>
 80141ac:	232d      	movs	r3, #45	@ 0x2d
 80141ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80141b2:	e79e      	b.n	80140f2 <_printf_float+0xa2>
 80141b4:	9a06      	ldr	r2, [sp, #24]
 80141b6:	2a47      	cmp	r2, #71	@ 0x47
 80141b8:	d1c2      	bne.n	8014140 <_printf_float+0xf0>
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d1c0      	bne.n	8014140 <_printf_float+0xf0>
 80141be:	2301      	movs	r3, #1
 80141c0:	e7bd      	b.n	801413e <_printf_float+0xee>
 80141c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80141c6:	d9db      	bls.n	8014180 <_printf_float+0x130>
 80141c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80141cc:	d118      	bne.n	8014200 <_printf_float+0x1b0>
 80141ce:	2900      	cmp	r1, #0
 80141d0:	6863      	ldr	r3, [r4, #4]
 80141d2:	dd0b      	ble.n	80141ec <_printf_float+0x19c>
 80141d4:	6121      	str	r1, [r4, #16]
 80141d6:	b913      	cbnz	r3, 80141de <_printf_float+0x18e>
 80141d8:	6822      	ldr	r2, [r4, #0]
 80141da:	07d0      	lsls	r0, r2, #31
 80141dc:	d502      	bpl.n	80141e4 <_printf_float+0x194>
 80141de:	3301      	adds	r3, #1
 80141e0:	440b      	add	r3, r1
 80141e2:	6123      	str	r3, [r4, #16]
 80141e4:	f04f 0900 	mov.w	r9, #0
 80141e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80141ea:	e7db      	b.n	80141a4 <_printf_float+0x154>
 80141ec:	b913      	cbnz	r3, 80141f4 <_printf_float+0x1a4>
 80141ee:	6822      	ldr	r2, [r4, #0]
 80141f0:	07d2      	lsls	r2, r2, #31
 80141f2:	d501      	bpl.n	80141f8 <_printf_float+0x1a8>
 80141f4:	3302      	adds	r3, #2
 80141f6:	e7f4      	b.n	80141e2 <_printf_float+0x192>
 80141f8:	2301      	movs	r3, #1
 80141fa:	e7f2      	b.n	80141e2 <_printf_float+0x192>
 80141fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014202:	4299      	cmp	r1, r3
 8014204:	db05      	blt.n	8014212 <_printf_float+0x1c2>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	6121      	str	r1, [r4, #16]
 801420a:	07d8      	lsls	r0, r3, #31
 801420c:	d5ea      	bpl.n	80141e4 <_printf_float+0x194>
 801420e:	1c4b      	adds	r3, r1, #1
 8014210:	e7e7      	b.n	80141e2 <_printf_float+0x192>
 8014212:	2900      	cmp	r1, #0
 8014214:	bfd4      	ite	le
 8014216:	f1c1 0202 	rsble	r2, r1, #2
 801421a:	2201      	movgt	r2, #1
 801421c:	4413      	add	r3, r2
 801421e:	e7e0      	b.n	80141e2 <_printf_float+0x192>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	055a      	lsls	r2, r3, #21
 8014224:	d407      	bmi.n	8014236 <_printf_float+0x1e6>
 8014226:	6923      	ldr	r3, [r4, #16]
 8014228:	4642      	mov	r2, r8
 801422a:	4631      	mov	r1, r6
 801422c:	4628      	mov	r0, r5
 801422e:	47b8      	blx	r7
 8014230:	3001      	adds	r0, #1
 8014232:	d12b      	bne.n	801428c <_printf_float+0x23c>
 8014234:	e767      	b.n	8014106 <_printf_float+0xb6>
 8014236:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801423a:	f240 80dd 	bls.w	80143f8 <_printf_float+0x3a8>
 801423e:	2200      	movs	r2, #0
 8014240:	2300      	movs	r3, #0
 8014242:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014246:	f7ec fc6d 	bl	8000b24 <__aeabi_dcmpeq>
 801424a:	2800      	cmp	r0, #0
 801424c:	d033      	beq.n	80142b6 <_printf_float+0x266>
 801424e:	2301      	movs	r3, #1
 8014250:	4a36      	ldr	r2, [pc, #216]	@ (801432c <_printf_float+0x2dc>)
 8014252:	4631      	mov	r1, r6
 8014254:	4628      	mov	r0, r5
 8014256:	47b8      	blx	r7
 8014258:	3001      	adds	r0, #1
 801425a:	f43f af54 	beq.w	8014106 <_printf_float+0xb6>
 801425e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014262:	4543      	cmp	r3, r8
 8014264:	db02      	blt.n	801426c <_printf_float+0x21c>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	07d8      	lsls	r0, r3, #31
 801426a:	d50f      	bpl.n	801428c <_printf_float+0x23c>
 801426c:	4631      	mov	r1, r6
 801426e:	4628      	mov	r0, r5
 8014270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014274:	47b8      	blx	r7
 8014276:	3001      	adds	r0, #1
 8014278:	f43f af45 	beq.w	8014106 <_printf_float+0xb6>
 801427c:	f04f 0900 	mov.w	r9, #0
 8014280:	f108 38ff 	add.w	r8, r8, #4294967295
 8014284:	f104 0a1a 	add.w	sl, r4, #26
 8014288:	45c8      	cmp	r8, r9
 801428a:	dc09      	bgt.n	80142a0 <_printf_float+0x250>
 801428c:	6823      	ldr	r3, [r4, #0]
 801428e:	079b      	lsls	r3, r3, #30
 8014290:	f100 8103 	bmi.w	801449a <_printf_float+0x44a>
 8014294:	68e0      	ldr	r0, [r4, #12]
 8014296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014298:	4298      	cmp	r0, r3
 801429a:	bfb8      	it	lt
 801429c:	4618      	movlt	r0, r3
 801429e:	e734      	b.n	801410a <_printf_float+0xba>
 80142a0:	2301      	movs	r3, #1
 80142a2:	4652      	mov	r2, sl
 80142a4:	4631      	mov	r1, r6
 80142a6:	4628      	mov	r0, r5
 80142a8:	47b8      	blx	r7
 80142aa:	3001      	adds	r0, #1
 80142ac:	f43f af2b 	beq.w	8014106 <_printf_float+0xb6>
 80142b0:	f109 0901 	add.w	r9, r9, #1
 80142b4:	e7e8      	b.n	8014288 <_printf_float+0x238>
 80142b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	dc39      	bgt.n	8014330 <_printf_float+0x2e0>
 80142bc:	2301      	movs	r3, #1
 80142be:	4a1b      	ldr	r2, [pc, #108]	@ (801432c <_printf_float+0x2dc>)
 80142c0:	4631      	mov	r1, r6
 80142c2:	4628      	mov	r0, r5
 80142c4:	47b8      	blx	r7
 80142c6:	3001      	adds	r0, #1
 80142c8:	f43f af1d 	beq.w	8014106 <_printf_float+0xb6>
 80142cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80142d0:	ea59 0303 	orrs.w	r3, r9, r3
 80142d4:	d102      	bne.n	80142dc <_printf_float+0x28c>
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	07d9      	lsls	r1, r3, #31
 80142da:	d5d7      	bpl.n	801428c <_printf_float+0x23c>
 80142dc:	4631      	mov	r1, r6
 80142de:	4628      	mov	r0, r5
 80142e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142e4:	47b8      	blx	r7
 80142e6:	3001      	adds	r0, #1
 80142e8:	f43f af0d 	beq.w	8014106 <_printf_float+0xb6>
 80142ec:	f04f 0a00 	mov.w	sl, #0
 80142f0:	f104 0b1a 	add.w	fp, r4, #26
 80142f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142f6:	425b      	negs	r3, r3
 80142f8:	4553      	cmp	r3, sl
 80142fa:	dc01      	bgt.n	8014300 <_printf_float+0x2b0>
 80142fc:	464b      	mov	r3, r9
 80142fe:	e793      	b.n	8014228 <_printf_float+0x1d8>
 8014300:	2301      	movs	r3, #1
 8014302:	465a      	mov	r2, fp
 8014304:	4631      	mov	r1, r6
 8014306:	4628      	mov	r0, r5
 8014308:	47b8      	blx	r7
 801430a:	3001      	adds	r0, #1
 801430c:	f43f aefb 	beq.w	8014106 <_printf_float+0xb6>
 8014310:	f10a 0a01 	add.w	sl, sl, #1
 8014314:	e7ee      	b.n	80142f4 <_printf_float+0x2a4>
 8014316:	bf00      	nop
 8014318:	7fefffff 	.word	0x7fefffff
 801431c:	08017e21 	.word	0x08017e21
 8014320:	08017e25 	.word	0x08017e25
 8014324:	08017e29 	.word	0x08017e29
 8014328:	08017e2d 	.word	0x08017e2d
 801432c:	08017e31 	.word	0x08017e31
 8014330:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014332:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014336:	4553      	cmp	r3, sl
 8014338:	bfa8      	it	ge
 801433a:	4653      	movge	r3, sl
 801433c:	2b00      	cmp	r3, #0
 801433e:	4699      	mov	r9, r3
 8014340:	dc36      	bgt.n	80143b0 <_printf_float+0x360>
 8014342:	f04f 0b00 	mov.w	fp, #0
 8014346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801434a:	f104 021a 	add.w	r2, r4, #26
 801434e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014350:	9306      	str	r3, [sp, #24]
 8014352:	eba3 0309 	sub.w	r3, r3, r9
 8014356:	455b      	cmp	r3, fp
 8014358:	dc31      	bgt.n	80143be <_printf_float+0x36e>
 801435a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801435c:	459a      	cmp	sl, r3
 801435e:	dc3a      	bgt.n	80143d6 <_printf_float+0x386>
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	07da      	lsls	r2, r3, #31
 8014364:	d437      	bmi.n	80143d6 <_printf_float+0x386>
 8014366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014368:	ebaa 0903 	sub.w	r9, sl, r3
 801436c:	9b06      	ldr	r3, [sp, #24]
 801436e:	ebaa 0303 	sub.w	r3, sl, r3
 8014372:	4599      	cmp	r9, r3
 8014374:	bfa8      	it	ge
 8014376:	4699      	movge	r9, r3
 8014378:	f1b9 0f00 	cmp.w	r9, #0
 801437c:	dc33      	bgt.n	80143e6 <_printf_float+0x396>
 801437e:	f04f 0800 	mov.w	r8, #0
 8014382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014386:	f104 0b1a 	add.w	fp, r4, #26
 801438a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801438c:	ebaa 0303 	sub.w	r3, sl, r3
 8014390:	eba3 0309 	sub.w	r3, r3, r9
 8014394:	4543      	cmp	r3, r8
 8014396:	f77f af79 	ble.w	801428c <_printf_float+0x23c>
 801439a:	2301      	movs	r3, #1
 801439c:	465a      	mov	r2, fp
 801439e:	4631      	mov	r1, r6
 80143a0:	4628      	mov	r0, r5
 80143a2:	47b8      	blx	r7
 80143a4:	3001      	adds	r0, #1
 80143a6:	f43f aeae 	beq.w	8014106 <_printf_float+0xb6>
 80143aa:	f108 0801 	add.w	r8, r8, #1
 80143ae:	e7ec      	b.n	801438a <_printf_float+0x33a>
 80143b0:	4642      	mov	r2, r8
 80143b2:	4631      	mov	r1, r6
 80143b4:	4628      	mov	r0, r5
 80143b6:	47b8      	blx	r7
 80143b8:	3001      	adds	r0, #1
 80143ba:	d1c2      	bne.n	8014342 <_printf_float+0x2f2>
 80143bc:	e6a3      	b.n	8014106 <_printf_float+0xb6>
 80143be:	2301      	movs	r3, #1
 80143c0:	4631      	mov	r1, r6
 80143c2:	4628      	mov	r0, r5
 80143c4:	9206      	str	r2, [sp, #24]
 80143c6:	47b8      	blx	r7
 80143c8:	3001      	adds	r0, #1
 80143ca:	f43f ae9c 	beq.w	8014106 <_printf_float+0xb6>
 80143ce:	f10b 0b01 	add.w	fp, fp, #1
 80143d2:	9a06      	ldr	r2, [sp, #24]
 80143d4:	e7bb      	b.n	801434e <_printf_float+0x2fe>
 80143d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143da:	4631      	mov	r1, r6
 80143dc:	4628      	mov	r0, r5
 80143de:	47b8      	blx	r7
 80143e0:	3001      	adds	r0, #1
 80143e2:	d1c0      	bne.n	8014366 <_printf_float+0x316>
 80143e4:	e68f      	b.n	8014106 <_printf_float+0xb6>
 80143e6:	9a06      	ldr	r2, [sp, #24]
 80143e8:	464b      	mov	r3, r9
 80143ea:	4631      	mov	r1, r6
 80143ec:	4628      	mov	r0, r5
 80143ee:	4442      	add	r2, r8
 80143f0:	47b8      	blx	r7
 80143f2:	3001      	adds	r0, #1
 80143f4:	d1c3      	bne.n	801437e <_printf_float+0x32e>
 80143f6:	e686      	b.n	8014106 <_printf_float+0xb6>
 80143f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80143fc:	f1ba 0f01 	cmp.w	sl, #1
 8014400:	dc01      	bgt.n	8014406 <_printf_float+0x3b6>
 8014402:	07db      	lsls	r3, r3, #31
 8014404:	d536      	bpl.n	8014474 <_printf_float+0x424>
 8014406:	2301      	movs	r3, #1
 8014408:	4642      	mov	r2, r8
 801440a:	4631      	mov	r1, r6
 801440c:	4628      	mov	r0, r5
 801440e:	47b8      	blx	r7
 8014410:	3001      	adds	r0, #1
 8014412:	f43f ae78 	beq.w	8014106 <_printf_float+0xb6>
 8014416:	4631      	mov	r1, r6
 8014418:	4628      	mov	r0, r5
 801441a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801441e:	47b8      	blx	r7
 8014420:	3001      	adds	r0, #1
 8014422:	f43f ae70 	beq.w	8014106 <_printf_float+0xb6>
 8014426:	2200      	movs	r2, #0
 8014428:	2300      	movs	r3, #0
 801442a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801442e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014432:	f7ec fb77 	bl	8000b24 <__aeabi_dcmpeq>
 8014436:	b9c0      	cbnz	r0, 801446a <_printf_float+0x41a>
 8014438:	4653      	mov	r3, sl
 801443a:	f108 0201 	add.w	r2, r8, #1
 801443e:	4631      	mov	r1, r6
 8014440:	4628      	mov	r0, r5
 8014442:	47b8      	blx	r7
 8014444:	3001      	adds	r0, #1
 8014446:	d10c      	bne.n	8014462 <_printf_float+0x412>
 8014448:	e65d      	b.n	8014106 <_printf_float+0xb6>
 801444a:	2301      	movs	r3, #1
 801444c:	465a      	mov	r2, fp
 801444e:	4631      	mov	r1, r6
 8014450:	4628      	mov	r0, r5
 8014452:	47b8      	blx	r7
 8014454:	3001      	adds	r0, #1
 8014456:	f43f ae56 	beq.w	8014106 <_printf_float+0xb6>
 801445a:	f108 0801 	add.w	r8, r8, #1
 801445e:	45d0      	cmp	r8, sl
 8014460:	dbf3      	blt.n	801444a <_printf_float+0x3fa>
 8014462:	464b      	mov	r3, r9
 8014464:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014468:	e6df      	b.n	801422a <_printf_float+0x1da>
 801446a:	f04f 0800 	mov.w	r8, #0
 801446e:	f104 0b1a 	add.w	fp, r4, #26
 8014472:	e7f4      	b.n	801445e <_printf_float+0x40e>
 8014474:	2301      	movs	r3, #1
 8014476:	4642      	mov	r2, r8
 8014478:	e7e1      	b.n	801443e <_printf_float+0x3ee>
 801447a:	2301      	movs	r3, #1
 801447c:	464a      	mov	r2, r9
 801447e:	4631      	mov	r1, r6
 8014480:	4628      	mov	r0, r5
 8014482:	47b8      	blx	r7
 8014484:	3001      	adds	r0, #1
 8014486:	f43f ae3e 	beq.w	8014106 <_printf_float+0xb6>
 801448a:	f108 0801 	add.w	r8, r8, #1
 801448e:	68e3      	ldr	r3, [r4, #12]
 8014490:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014492:	1a5b      	subs	r3, r3, r1
 8014494:	4543      	cmp	r3, r8
 8014496:	dcf0      	bgt.n	801447a <_printf_float+0x42a>
 8014498:	e6fc      	b.n	8014294 <_printf_float+0x244>
 801449a:	f04f 0800 	mov.w	r8, #0
 801449e:	f104 0919 	add.w	r9, r4, #25
 80144a2:	e7f4      	b.n	801448e <_printf_float+0x43e>

080144a4 <_printf_common>:
 80144a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	4616      	mov	r6, r2
 80144aa:	4698      	mov	r8, r3
 80144ac:	688a      	ldr	r2, [r1, #8]
 80144ae:	4607      	mov	r7, r0
 80144b0:	690b      	ldr	r3, [r1, #16]
 80144b2:	460c      	mov	r4, r1
 80144b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80144b8:	4293      	cmp	r3, r2
 80144ba:	bfb8      	it	lt
 80144bc:	4613      	movlt	r3, r2
 80144be:	6033      	str	r3, [r6, #0]
 80144c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80144c4:	b10a      	cbz	r2, 80144ca <_printf_common+0x26>
 80144c6:	3301      	adds	r3, #1
 80144c8:	6033      	str	r3, [r6, #0]
 80144ca:	6823      	ldr	r3, [r4, #0]
 80144cc:	0699      	lsls	r1, r3, #26
 80144ce:	bf42      	ittt	mi
 80144d0:	6833      	ldrmi	r3, [r6, #0]
 80144d2:	3302      	addmi	r3, #2
 80144d4:	6033      	strmi	r3, [r6, #0]
 80144d6:	6825      	ldr	r5, [r4, #0]
 80144d8:	f015 0506 	ands.w	r5, r5, #6
 80144dc:	d106      	bne.n	80144ec <_printf_common+0x48>
 80144de:	f104 0a19 	add.w	sl, r4, #25
 80144e2:	68e3      	ldr	r3, [r4, #12]
 80144e4:	6832      	ldr	r2, [r6, #0]
 80144e6:	1a9b      	subs	r3, r3, r2
 80144e8:	42ab      	cmp	r3, r5
 80144ea:	dc2b      	bgt.n	8014544 <_printf_common+0xa0>
 80144ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80144f0:	6822      	ldr	r2, [r4, #0]
 80144f2:	3b00      	subs	r3, #0
 80144f4:	bf18      	it	ne
 80144f6:	2301      	movne	r3, #1
 80144f8:	0692      	lsls	r2, r2, #26
 80144fa:	d430      	bmi.n	801455e <_printf_common+0xba>
 80144fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014500:	4641      	mov	r1, r8
 8014502:	4638      	mov	r0, r7
 8014504:	47c8      	blx	r9
 8014506:	3001      	adds	r0, #1
 8014508:	d023      	beq.n	8014552 <_printf_common+0xae>
 801450a:	6823      	ldr	r3, [r4, #0]
 801450c:	341a      	adds	r4, #26
 801450e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8014512:	f003 0306 	and.w	r3, r3, #6
 8014516:	2b04      	cmp	r3, #4
 8014518:	bf0a      	itet	eq
 801451a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801451e:	2500      	movne	r5, #0
 8014520:	6833      	ldreq	r3, [r6, #0]
 8014522:	f04f 0600 	mov.w	r6, #0
 8014526:	bf08      	it	eq
 8014528:	1aed      	subeq	r5, r5, r3
 801452a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801452e:	bf08      	it	eq
 8014530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014534:	4293      	cmp	r3, r2
 8014536:	bfc4      	itt	gt
 8014538:	1a9b      	subgt	r3, r3, r2
 801453a:	18ed      	addgt	r5, r5, r3
 801453c:	42b5      	cmp	r5, r6
 801453e:	d11a      	bne.n	8014576 <_printf_common+0xd2>
 8014540:	2000      	movs	r0, #0
 8014542:	e008      	b.n	8014556 <_printf_common+0xb2>
 8014544:	2301      	movs	r3, #1
 8014546:	4652      	mov	r2, sl
 8014548:	4641      	mov	r1, r8
 801454a:	4638      	mov	r0, r7
 801454c:	47c8      	blx	r9
 801454e:	3001      	adds	r0, #1
 8014550:	d103      	bne.n	801455a <_printf_common+0xb6>
 8014552:	f04f 30ff 	mov.w	r0, #4294967295
 8014556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801455a:	3501      	adds	r5, #1
 801455c:	e7c1      	b.n	80144e2 <_printf_common+0x3e>
 801455e:	18e1      	adds	r1, r4, r3
 8014560:	1c5a      	adds	r2, r3, #1
 8014562:	2030      	movs	r0, #48	@ 0x30
 8014564:	3302      	adds	r3, #2
 8014566:	4422      	add	r2, r4
 8014568:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801456c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014574:	e7c2      	b.n	80144fc <_printf_common+0x58>
 8014576:	2301      	movs	r3, #1
 8014578:	4622      	mov	r2, r4
 801457a:	4641      	mov	r1, r8
 801457c:	4638      	mov	r0, r7
 801457e:	47c8      	blx	r9
 8014580:	3001      	adds	r0, #1
 8014582:	d0e6      	beq.n	8014552 <_printf_common+0xae>
 8014584:	3601      	adds	r6, #1
 8014586:	e7d9      	b.n	801453c <_printf_common+0x98>

08014588 <_printf_i>:
 8014588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801458c:	7e0f      	ldrb	r7, [r1, #24]
 801458e:	4691      	mov	r9, r2
 8014590:	4680      	mov	r8, r0
 8014592:	460c      	mov	r4, r1
 8014594:	2f78      	cmp	r7, #120	@ 0x78
 8014596:	469a      	mov	sl, r3
 8014598:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801459a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801459e:	d807      	bhi.n	80145b0 <_printf_i+0x28>
 80145a0:	2f62      	cmp	r7, #98	@ 0x62
 80145a2:	d80a      	bhi.n	80145ba <_printf_i+0x32>
 80145a4:	2f00      	cmp	r7, #0
 80145a6:	f000 80d2 	beq.w	801474e <_printf_i+0x1c6>
 80145aa:	2f58      	cmp	r7, #88	@ 0x58
 80145ac:	f000 80b9 	beq.w	8014722 <_printf_i+0x19a>
 80145b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80145b8:	e03a      	b.n	8014630 <_printf_i+0xa8>
 80145ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80145be:	2b15      	cmp	r3, #21
 80145c0:	d8f6      	bhi.n	80145b0 <_printf_i+0x28>
 80145c2:	a101      	add	r1, pc, #4	@ (adr r1, 80145c8 <_printf_i+0x40>)
 80145c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80145c8:	08014621 	.word	0x08014621
 80145cc:	08014635 	.word	0x08014635
 80145d0:	080145b1 	.word	0x080145b1
 80145d4:	080145b1 	.word	0x080145b1
 80145d8:	080145b1 	.word	0x080145b1
 80145dc:	080145b1 	.word	0x080145b1
 80145e0:	08014635 	.word	0x08014635
 80145e4:	080145b1 	.word	0x080145b1
 80145e8:	080145b1 	.word	0x080145b1
 80145ec:	080145b1 	.word	0x080145b1
 80145f0:	080145b1 	.word	0x080145b1
 80145f4:	08014735 	.word	0x08014735
 80145f8:	0801465f 	.word	0x0801465f
 80145fc:	080146ef 	.word	0x080146ef
 8014600:	080145b1 	.word	0x080145b1
 8014604:	080145b1 	.word	0x080145b1
 8014608:	08014757 	.word	0x08014757
 801460c:	080145b1 	.word	0x080145b1
 8014610:	0801465f 	.word	0x0801465f
 8014614:	080145b1 	.word	0x080145b1
 8014618:	080145b1 	.word	0x080145b1
 801461c:	080146f7 	.word	0x080146f7
 8014620:	6833      	ldr	r3, [r6, #0]
 8014622:	1d1a      	adds	r2, r3, #4
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	6032      	str	r2, [r6, #0]
 8014628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801462c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014630:	2301      	movs	r3, #1
 8014632:	e09d      	b.n	8014770 <_printf_i+0x1e8>
 8014634:	6833      	ldr	r3, [r6, #0]
 8014636:	6820      	ldr	r0, [r4, #0]
 8014638:	1d19      	adds	r1, r3, #4
 801463a:	6031      	str	r1, [r6, #0]
 801463c:	0606      	lsls	r6, r0, #24
 801463e:	d501      	bpl.n	8014644 <_printf_i+0xbc>
 8014640:	681d      	ldr	r5, [r3, #0]
 8014642:	e003      	b.n	801464c <_printf_i+0xc4>
 8014644:	0645      	lsls	r5, r0, #25
 8014646:	d5fb      	bpl.n	8014640 <_printf_i+0xb8>
 8014648:	f9b3 5000 	ldrsh.w	r5, [r3]
 801464c:	2d00      	cmp	r5, #0
 801464e:	da03      	bge.n	8014658 <_printf_i+0xd0>
 8014650:	232d      	movs	r3, #45	@ 0x2d
 8014652:	426d      	negs	r5, r5
 8014654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014658:	4859      	ldr	r0, [pc, #356]	@ (80147c0 <_printf_i+0x238>)
 801465a:	230a      	movs	r3, #10
 801465c:	e011      	b.n	8014682 <_printf_i+0xfa>
 801465e:	6821      	ldr	r1, [r4, #0]
 8014660:	6833      	ldr	r3, [r6, #0]
 8014662:	0608      	lsls	r0, r1, #24
 8014664:	f853 5b04 	ldr.w	r5, [r3], #4
 8014668:	d402      	bmi.n	8014670 <_printf_i+0xe8>
 801466a:	0649      	lsls	r1, r1, #25
 801466c:	bf48      	it	mi
 801466e:	b2ad      	uxthmi	r5, r5
 8014670:	2f6f      	cmp	r7, #111	@ 0x6f
 8014672:	6033      	str	r3, [r6, #0]
 8014674:	4852      	ldr	r0, [pc, #328]	@ (80147c0 <_printf_i+0x238>)
 8014676:	bf14      	ite	ne
 8014678:	230a      	movne	r3, #10
 801467a:	2308      	moveq	r3, #8
 801467c:	2100      	movs	r1, #0
 801467e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014682:	6866      	ldr	r6, [r4, #4]
 8014684:	2e00      	cmp	r6, #0
 8014686:	60a6      	str	r6, [r4, #8]
 8014688:	bfa2      	ittt	ge
 801468a:	6821      	ldrge	r1, [r4, #0]
 801468c:	f021 0104 	bicge.w	r1, r1, #4
 8014690:	6021      	strge	r1, [r4, #0]
 8014692:	b90d      	cbnz	r5, 8014698 <_printf_i+0x110>
 8014694:	2e00      	cmp	r6, #0
 8014696:	d04b      	beq.n	8014730 <_printf_i+0x1a8>
 8014698:	4616      	mov	r6, r2
 801469a:	fbb5 f1f3 	udiv	r1, r5, r3
 801469e:	fb03 5711 	mls	r7, r3, r1, r5
 80146a2:	5dc7      	ldrb	r7, [r0, r7]
 80146a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80146a8:	462f      	mov	r7, r5
 80146aa:	460d      	mov	r5, r1
 80146ac:	42bb      	cmp	r3, r7
 80146ae:	d9f4      	bls.n	801469a <_printf_i+0x112>
 80146b0:	2b08      	cmp	r3, #8
 80146b2:	d10b      	bne.n	80146cc <_printf_i+0x144>
 80146b4:	6823      	ldr	r3, [r4, #0]
 80146b6:	07df      	lsls	r7, r3, #31
 80146b8:	d508      	bpl.n	80146cc <_printf_i+0x144>
 80146ba:	6923      	ldr	r3, [r4, #16]
 80146bc:	6861      	ldr	r1, [r4, #4]
 80146be:	4299      	cmp	r1, r3
 80146c0:	bfde      	ittt	le
 80146c2:	2330      	movle	r3, #48	@ 0x30
 80146c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80146c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80146cc:	1b92      	subs	r2, r2, r6
 80146ce:	6122      	str	r2, [r4, #16]
 80146d0:	464b      	mov	r3, r9
 80146d2:	aa03      	add	r2, sp, #12
 80146d4:	4621      	mov	r1, r4
 80146d6:	4640      	mov	r0, r8
 80146d8:	f8cd a000 	str.w	sl, [sp]
 80146dc:	f7ff fee2 	bl	80144a4 <_printf_common>
 80146e0:	3001      	adds	r0, #1
 80146e2:	d14a      	bne.n	801477a <_printf_i+0x1f2>
 80146e4:	f04f 30ff 	mov.w	r0, #4294967295
 80146e8:	b004      	add	sp, #16
 80146ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ee:	6823      	ldr	r3, [r4, #0]
 80146f0:	f043 0320 	orr.w	r3, r3, #32
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	2778      	movs	r7, #120	@ 0x78
 80146f8:	4832      	ldr	r0, [pc, #200]	@ (80147c4 <_printf_i+0x23c>)
 80146fa:	6823      	ldr	r3, [r4, #0]
 80146fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014700:	061f      	lsls	r7, r3, #24
 8014702:	6831      	ldr	r1, [r6, #0]
 8014704:	f851 5b04 	ldr.w	r5, [r1], #4
 8014708:	d402      	bmi.n	8014710 <_printf_i+0x188>
 801470a:	065f      	lsls	r7, r3, #25
 801470c:	bf48      	it	mi
 801470e:	b2ad      	uxthmi	r5, r5
 8014710:	6031      	str	r1, [r6, #0]
 8014712:	07d9      	lsls	r1, r3, #31
 8014714:	bf44      	itt	mi
 8014716:	f043 0320 	orrmi.w	r3, r3, #32
 801471a:	6023      	strmi	r3, [r4, #0]
 801471c:	b11d      	cbz	r5, 8014726 <_printf_i+0x19e>
 801471e:	2310      	movs	r3, #16
 8014720:	e7ac      	b.n	801467c <_printf_i+0xf4>
 8014722:	4827      	ldr	r0, [pc, #156]	@ (80147c0 <_printf_i+0x238>)
 8014724:	e7e9      	b.n	80146fa <_printf_i+0x172>
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	f023 0320 	bic.w	r3, r3, #32
 801472c:	6023      	str	r3, [r4, #0]
 801472e:	e7f6      	b.n	801471e <_printf_i+0x196>
 8014730:	4616      	mov	r6, r2
 8014732:	e7bd      	b.n	80146b0 <_printf_i+0x128>
 8014734:	6833      	ldr	r3, [r6, #0]
 8014736:	6825      	ldr	r5, [r4, #0]
 8014738:	1d18      	adds	r0, r3, #4
 801473a:	6961      	ldr	r1, [r4, #20]
 801473c:	6030      	str	r0, [r6, #0]
 801473e:	062e      	lsls	r6, r5, #24
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	d501      	bpl.n	8014748 <_printf_i+0x1c0>
 8014744:	6019      	str	r1, [r3, #0]
 8014746:	e002      	b.n	801474e <_printf_i+0x1c6>
 8014748:	0668      	lsls	r0, r5, #25
 801474a:	d5fb      	bpl.n	8014744 <_printf_i+0x1bc>
 801474c:	8019      	strh	r1, [r3, #0]
 801474e:	2300      	movs	r3, #0
 8014750:	4616      	mov	r6, r2
 8014752:	6123      	str	r3, [r4, #16]
 8014754:	e7bc      	b.n	80146d0 <_printf_i+0x148>
 8014756:	6833      	ldr	r3, [r6, #0]
 8014758:	2100      	movs	r1, #0
 801475a:	1d1a      	adds	r2, r3, #4
 801475c:	6032      	str	r2, [r6, #0]
 801475e:	681e      	ldr	r6, [r3, #0]
 8014760:	6862      	ldr	r2, [r4, #4]
 8014762:	4630      	mov	r0, r6
 8014764:	f000 fc51 	bl	801500a <memchr>
 8014768:	b108      	cbz	r0, 801476e <_printf_i+0x1e6>
 801476a:	1b80      	subs	r0, r0, r6
 801476c:	6060      	str	r0, [r4, #4]
 801476e:	6863      	ldr	r3, [r4, #4]
 8014770:	6123      	str	r3, [r4, #16]
 8014772:	2300      	movs	r3, #0
 8014774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014778:	e7aa      	b.n	80146d0 <_printf_i+0x148>
 801477a:	6923      	ldr	r3, [r4, #16]
 801477c:	4632      	mov	r2, r6
 801477e:	4649      	mov	r1, r9
 8014780:	4640      	mov	r0, r8
 8014782:	47d0      	blx	sl
 8014784:	3001      	adds	r0, #1
 8014786:	d0ad      	beq.n	80146e4 <_printf_i+0x15c>
 8014788:	6823      	ldr	r3, [r4, #0]
 801478a:	079b      	lsls	r3, r3, #30
 801478c:	d413      	bmi.n	80147b6 <_printf_i+0x22e>
 801478e:	68e0      	ldr	r0, [r4, #12]
 8014790:	9b03      	ldr	r3, [sp, #12]
 8014792:	4298      	cmp	r0, r3
 8014794:	bfb8      	it	lt
 8014796:	4618      	movlt	r0, r3
 8014798:	e7a6      	b.n	80146e8 <_printf_i+0x160>
 801479a:	2301      	movs	r3, #1
 801479c:	4632      	mov	r2, r6
 801479e:	4649      	mov	r1, r9
 80147a0:	4640      	mov	r0, r8
 80147a2:	47d0      	blx	sl
 80147a4:	3001      	adds	r0, #1
 80147a6:	d09d      	beq.n	80146e4 <_printf_i+0x15c>
 80147a8:	3501      	adds	r5, #1
 80147aa:	68e3      	ldr	r3, [r4, #12]
 80147ac:	9903      	ldr	r1, [sp, #12]
 80147ae:	1a5b      	subs	r3, r3, r1
 80147b0:	42ab      	cmp	r3, r5
 80147b2:	dcf2      	bgt.n	801479a <_printf_i+0x212>
 80147b4:	e7eb      	b.n	801478e <_printf_i+0x206>
 80147b6:	2500      	movs	r5, #0
 80147b8:	f104 0619 	add.w	r6, r4, #25
 80147bc:	e7f5      	b.n	80147aa <_printf_i+0x222>
 80147be:	bf00      	nop
 80147c0:	08017e33 	.word	0x08017e33
 80147c4:	08017e44 	.word	0x08017e44

080147c8 <std>:
 80147c8:	2300      	movs	r3, #0
 80147ca:	b510      	push	{r4, lr}
 80147cc:	4604      	mov	r4, r0
 80147ce:	6083      	str	r3, [r0, #8]
 80147d0:	8181      	strh	r1, [r0, #12]
 80147d2:	4619      	mov	r1, r3
 80147d4:	6643      	str	r3, [r0, #100]	@ 0x64
 80147d6:	81c2      	strh	r2, [r0, #14]
 80147d8:	2208      	movs	r2, #8
 80147da:	6183      	str	r3, [r0, #24]
 80147dc:	e9c0 3300 	strd	r3, r3, [r0]
 80147e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147e4:	305c      	adds	r0, #92	@ 0x5c
 80147e6:	f000 fb0f 	bl	8014e08 <memset>
 80147ea:	4b0d      	ldr	r3, [pc, #52]	@ (8014820 <std+0x58>)
 80147ec:	6224      	str	r4, [r4, #32]
 80147ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80147f0:	4b0c      	ldr	r3, [pc, #48]	@ (8014824 <std+0x5c>)
 80147f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80147f4:	4b0c      	ldr	r3, [pc, #48]	@ (8014828 <std+0x60>)
 80147f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80147f8:	4b0c      	ldr	r3, [pc, #48]	@ (801482c <std+0x64>)
 80147fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80147fc:	4b0c      	ldr	r3, [pc, #48]	@ (8014830 <std+0x68>)
 80147fe:	429c      	cmp	r4, r3
 8014800:	d006      	beq.n	8014810 <std+0x48>
 8014802:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014806:	4294      	cmp	r4, r2
 8014808:	d002      	beq.n	8014810 <std+0x48>
 801480a:	33d0      	adds	r3, #208	@ 0xd0
 801480c:	429c      	cmp	r4, r3
 801480e:	d105      	bne.n	801481c <std+0x54>
 8014810:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014818:	f000 bbf4 	b.w	8015004 <__retarget_lock_init_recursive>
 801481c:	bd10      	pop	{r4, pc}
 801481e:	bf00      	nop
 8014820:	08014be9 	.word	0x08014be9
 8014824:	08014c0b 	.word	0x08014c0b
 8014828:	08014c43 	.word	0x08014c43
 801482c:	08014c67 	.word	0x08014c67
 8014830:	200043bc 	.word	0x200043bc

08014834 <stdio_exit_handler>:
 8014834:	4a02      	ldr	r2, [pc, #8]	@ (8014840 <stdio_exit_handler+0xc>)
 8014836:	4903      	ldr	r1, [pc, #12]	@ (8014844 <stdio_exit_handler+0x10>)
 8014838:	4803      	ldr	r0, [pc, #12]	@ (8014848 <stdio_exit_handler+0x14>)
 801483a:	f000 b869 	b.w	8014910 <_fwalk_sglue>
 801483e:	bf00      	nop
 8014840:	200001a8 	.word	0x200001a8
 8014844:	080169e9 	.word	0x080169e9
 8014848:	200001b8 	.word	0x200001b8

0801484c <cleanup_stdio>:
 801484c:	6841      	ldr	r1, [r0, #4]
 801484e:	4b0c      	ldr	r3, [pc, #48]	@ (8014880 <cleanup_stdio+0x34>)
 8014850:	4299      	cmp	r1, r3
 8014852:	b510      	push	{r4, lr}
 8014854:	4604      	mov	r4, r0
 8014856:	d001      	beq.n	801485c <cleanup_stdio+0x10>
 8014858:	f002 f8c6 	bl	80169e8 <_fflush_r>
 801485c:	68a1      	ldr	r1, [r4, #8]
 801485e:	4b09      	ldr	r3, [pc, #36]	@ (8014884 <cleanup_stdio+0x38>)
 8014860:	4299      	cmp	r1, r3
 8014862:	d002      	beq.n	801486a <cleanup_stdio+0x1e>
 8014864:	4620      	mov	r0, r4
 8014866:	f002 f8bf 	bl	80169e8 <_fflush_r>
 801486a:	68e1      	ldr	r1, [r4, #12]
 801486c:	4b06      	ldr	r3, [pc, #24]	@ (8014888 <cleanup_stdio+0x3c>)
 801486e:	4299      	cmp	r1, r3
 8014870:	d004      	beq.n	801487c <cleanup_stdio+0x30>
 8014872:	4620      	mov	r0, r4
 8014874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014878:	f002 b8b6 	b.w	80169e8 <_fflush_r>
 801487c:	bd10      	pop	{r4, pc}
 801487e:	bf00      	nop
 8014880:	200043bc 	.word	0x200043bc
 8014884:	20004424 	.word	0x20004424
 8014888:	2000448c 	.word	0x2000448c

0801488c <global_stdio_init.part.0>:
 801488c:	b510      	push	{r4, lr}
 801488e:	4b0b      	ldr	r3, [pc, #44]	@ (80148bc <global_stdio_init.part.0+0x30>)
 8014890:	2104      	movs	r1, #4
 8014892:	4c0b      	ldr	r4, [pc, #44]	@ (80148c0 <global_stdio_init.part.0+0x34>)
 8014894:	4a0b      	ldr	r2, [pc, #44]	@ (80148c4 <global_stdio_init.part.0+0x38>)
 8014896:	4620      	mov	r0, r4
 8014898:	601a      	str	r2, [r3, #0]
 801489a:	2200      	movs	r2, #0
 801489c:	f7ff ff94 	bl	80147c8 <std>
 80148a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80148a4:	2201      	movs	r2, #1
 80148a6:	2109      	movs	r1, #9
 80148a8:	f7ff ff8e 	bl	80147c8 <std>
 80148ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80148b0:	2202      	movs	r2, #2
 80148b2:	2112      	movs	r1, #18
 80148b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148b8:	f7ff bf86 	b.w	80147c8 <std>
 80148bc:	200044f4 	.word	0x200044f4
 80148c0:	200043bc 	.word	0x200043bc
 80148c4:	08014835 	.word	0x08014835

080148c8 <__sfp_lock_acquire>:
 80148c8:	4801      	ldr	r0, [pc, #4]	@ (80148d0 <__sfp_lock_acquire+0x8>)
 80148ca:	f000 bb9c 	b.w	8015006 <__retarget_lock_acquire_recursive>
 80148ce:	bf00      	nop
 80148d0:	200044fd 	.word	0x200044fd

080148d4 <__sfp_lock_release>:
 80148d4:	4801      	ldr	r0, [pc, #4]	@ (80148dc <__sfp_lock_release+0x8>)
 80148d6:	f000 bb97 	b.w	8015008 <__retarget_lock_release_recursive>
 80148da:	bf00      	nop
 80148dc:	200044fd 	.word	0x200044fd

080148e0 <__sinit>:
 80148e0:	b510      	push	{r4, lr}
 80148e2:	4604      	mov	r4, r0
 80148e4:	f7ff fff0 	bl	80148c8 <__sfp_lock_acquire>
 80148e8:	6a23      	ldr	r3, [r4, #32]
 80148ea:	b11b      	cbz	r3, 80148f4 <__sinit+0x14>
 80148ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148f0:	f7ff bff0 	b.w	80148d4 <__sfp_lock_release>
 80148f4:	4b04      	ldr	r3, [pc, #16]	@ (8014908 <__sinit+0x28>)
 80148f6:	6223      	str	r3, [r4, #32]
 80148f8:	4b04      	ldr	r3, [pc, #16]	@ (801490c <__sinit+0x2c>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d1f5      	bne.n	80148ec <__sinit+0xc>
 8014900:	f7ff ffc4 	bl	801488c <global_stdio_init.part.0>
 8014904:	e7f2      	b.n	80148ec <__sinit+0xc>
 8014906:	bf00      	nop
 8014908:	0801484d 	.word	0x0801484d
 801490c:	200044f4 	.word	0x200044f4

08014910 <_fwalk_sglue>:
 8014910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014914:	4607      	mov	r7, r0
 8014916:	4688      	mov	r8, r1
 8014918:	4614      	mov	r4, r2
 801491a:	2600      	movs	r6, #0
 801491c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014920:	f1b9 0901 	subs.w	r9, r9, #1
 8014924:	d505      	bpl.n	8014932 <_fwalk_sglue+0x22>
 8014926:	6824      	ldr	r4, [r4, #0]
 8014928:	2c00      	cmp	r4, #0
 801492a:	d1f7      	bne.n	801491c <_fwalk_sglue+0xc>
 801492c:	4630      	mov	r0, r6
 801492e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014932:	89ab      	ldrh	r3, [r5, #12]
 8014934:	2b01      	cmp	r3, #1
 8014936:	d907      	bls.n	8014948 <_fwalk_sglue+0x38>
 8014938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801493c:	3301      	adds	r3, #1
 801493e:	d003      	beq.n	8014948 <_fwalk_sglue+0x38>
 8014940:	4629      	mov	r1, r5
 8014942:	4638      	mov	r0, r7
 8014944:	47c0      	blx	r8
 8014946:	4306      	orrs	r6, r0
 8014948:	3568      	adds	r5, #104	@ 0x68
 801494a:	e7e9      	b.n	8014920 <_fwalk_sglue+0x10>

0801494c <putchar>:
 801494c:	4b02      	ldr	r3, [pc, #8]	@ (8014958 <putchar+0xc>)
 801494e:	4601      	mov	r1, r0
 8014950:	6818      	ldr	r0, [r3, #0]
 8014952:	6882      	ldr	r2, [r0, #8]
 8014954:	f002 b8e3 	b.w	8016b1e <_putc_r>
 8014958:	200001b4 	.word	0x200001b4

0801495c <_puts_r>:
 801495c:	6a03      	ldr	r3, [r0, #32]
 801495e:	b570      	push	{r4, r5, r6, lr}
 8014960:	4605      	mov	r5, r0
 8014962:	460e      	mov	r6, r1
 8014964:	6884      	ldr	r4, [r0, #8]
 8014966:	b90b      	cbnz	r3, 801496c <_puts_r+0x10>
 8014968:	f7ff ffba 	bl	80148e0 <__sinit>
 801496c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801496e:	07db      	lsls	r3, r3, #31
 8014970:	d405      	bmi.n	801497e <_puts_r+0x22>
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	0598      	lsls	r0, r3, #22
 8014976:	d402      	bmi.n	801497e <_puts_r+0x22>
 8014978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801497a:	f000 fb44 	bl	8015006 <__retarget_lock_acquire_recursive>
 801497e:	89a3      	ldrh	r3, [r4, #12]
 8014980:	0719      	lsls	r1, r3, #28
 8014982:	d502      	bpl.n	801498a <_puts_r+0x2e>
 8014984:	6923      	ldr	r3, [r4, #16]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d135      	bne.n	80149f6 <_puts_r+0x9a>
 801498a:	4621      	mov	r1, r4
 801498c:	4628      	mov	r0, r5
 801498e:	f000 f9e5 	bl	8014d5c <__swsetup_r>
 8014992:	b380      	cbz	r0, 80149f6 <_puts_r+0x9a>
 8014994:	f04f 35ff 	mov.w	r5, #4294967295
 8014998:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801499a:	07da      	lsls	r2, r3, #31
 801499c:	d405      	bmi.n	80149aa <_puts_r+0x4e>
 801499e:	89a3      	ldrh	r3, [r4, #12]
 80149a0:	059b      	lsls	r3, r3, #22
 80149a2:	d402      	bmi.n	80149aa <_puts_r+0x4e>
 80149a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149a6:	f000 fb2f 	bl	8015008 <__retarget_lock_release_recursive>
 80149aa:	4628      	mov	r0, r5
 80149ac:	bd70      	pop	{r4, r5, r6, pc}
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	da04      	bge.n	80149bc <_puts_r+0x60>
 80149b2:	69a2      	ldr	r2, [r4, #24]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	dc17      	bgt.n	80149e8 <_puts_r+0x8c>
 80149b8:	290a      	cmp	r1, #10
 80149ba:	d015      	beq.n	80149e8 <_puts_r+0x8c>
 80149bc:	6823      	ldr	r3, [r4, #0]
 80149be:	1c5a      	adds	r2, r3, #1
 80149c0:	6022      	str	r2, [r4, #0]
 80149c2:	7019      	strb	r1, [r3, #0]
 80149c4:	68a3      	ldr	r3, [r4, #8]
 80149c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80149ca:	3b01      	subs	r3, #1
 80149cc:	60a3      	str	r3, [r4, #8]
 80149ce:	2900      	cmp	r1, #0
 80149d0:	d1ed      	bne.n	80149ae <_puts_r+0x52>
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	da11      	bge.n	80149fa <_puts_r+0x9e>
 80149d6:	4622      	mov	r2, r4
 80149d8:	210a      	movs	r1, #10
 80149da:	4628      	mov	r0, r5
 80149dc:	f000 f980 	bl	8014ce0 <__swbuf_r>
 80149e0:	3001      	adds	r0, #1
 80149e2:	d0d7      	beq.n	8014994 <_puts_r+0x38>
 80149e4:	250a      	movs	r5, #10
 80149e6:	e7d7      	b.n	8014998 <_puts_r+0x3c>
 80149e8:	4622      	mov	r2, r4
 80149ea:	4628      	mov	r0, r5
 80149ec:	f000 f978 	bl	8014ce0 <__swbuf_r>
 80149f0:	3001      	adds	r0, #1
 80149f2:	d1e7      	bne.n	80149c4 <_puts_r+0x68>
 80149f4:	e7ce      	b.n	8014994 <_puts_r+0x38>
 80149f6:	3e01      	subs	r6, #1
 80149f8:	e7e4      	b.n	80149c4 <_puts_r+0x68>
 80149fa:	6823      	ldr	r3, [r4, #0]
 80149fc:	1c5a      	adds	r2, r3, #1
 80149fe:	6022      	str	r2, [r4, #0]
 8014a00:	220a      	movs	r2, #10
 8014a02:	701a      	strb	r2, [r3, #0]
 8014a04:	e7ee      	b.n	80149e4 <_puts_r+0x88>
	...

08014a08 <puts>:
 8014a08:	4b02      	ldr	r3, [pc, #8]	@ (8014a14 <puts+0xc>)
 8014a0a:	4601      	mov	r1, r0
 8014a0c:	6818      	ldr	r0, [r3, #0]
 8014a0e:	f7ff bfa5 	b.w	801495c <_puts_r>
 8014a12:	bf00      	nop
 8014a14:	200001b4 	.word	0x200001b4

08014a18 <setvbuf>:
 8014a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a1c:	461d      	mov	r5, r3
 8014a1e:	4b57      	ldr	r3, [pc, #348]	@ (8014b7c <setvbuf+0x164>)
 8014a20:	4604      	mov	r4, r0
 8014a22:	460e      	mov	r6, r1
 8014a24:	681f      	ldr	r7, [r3, #0]
 8014a26:	4690      	mov	r8, r2
 8014a28:	b127      	cbz	r7, 8014a34 <setvbuf+0x1c>
 8014a2a:	6a3b      	ldr	r3, [r7, #32]
 8014a2c:	b913      	cbnz	r3, 8014a34 <setvbuf+0x1c>
 8014a2e:	4638      	mov	r0, r7
 8014a30:	f7ff ff56 	bl	80148e0 <__sinit>
 8014a34:	f1b8 0f02 	cmp.w	r8, #2
 8014a38:	d006      	beq.n	8014a48 <setvbuf+0x30>
 8014a3a:	f1b8 0f01 	cmp.w	r8, #1
 8014a3e:	f200 8099 	bhi.w	8014b74 <setvbuf+0x15c>
 8014a42:	2d00      	cmp	r5, #0
 8014a44:	f2c0 8096 	blt.w	8014b74 <setvbuf+0x15c>
 8014a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a4a:	07d9      	lsls	r1, r3, #31
 8014a4c:	d405      	bmi.n	8014a5a <setvbuf+0x42>
 8014a4e:	89a3      	ldrh	r3, [r4, #12]
 8014a50:	059a      	lsls	r2, r3, #22
 8014a52:	d402      	bmi.n	8014a5a <setvbuf+0x42>
 8014a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a56:	f000 fad6 	bl	8015006 <__retarget_lock_acquire_recursive>
 8014a5a:	4621      	mov	r1, r4
 8014a5c:	4638      	mov	r0, r7
 8014a5e:	f001 ffc3 	bl	80169e8 <_fflush_r>
 8014a62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a64:	b141      	cbz	r1, 8014a78 <setvbuf+0x60>
 8014a66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a6a:	4299      	cmp	r1, r3
 8014a6c:	d002      	beq.n	8014a74 <setvbuf+0x5c>
 8014a6e:	4638      	mov	r0, r7
 8014a70:	f001 f956 	bl	8015d20 <_free_r>
 8014a74:	2300      	movs	r3, #0
 8014a76:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a78:	2300      	movs	r3, #0
 8014a7a:	61a3      	str	r3, [r4, #24]
 8014a7c:	6063      	str	r3, [r4, #4]
 8014a7e:	89a3      	ldrh	r3, [r4, #12]
 8014a80:	061b      	lsls	r3, r3, #24
 8014a82:	d503      	bpl.n	8014a8c <setvbuf+0x74>
 8014a84:	6921      	ldr	r1, [r4, #16]
 8014a86:	4638      	mov	r0, r7
 8014a88:	f001 f94a 	bl	8015d20 <_free_r>
 8014a8c:	89a3      	ldrh	r3, [r4, #12]
 8014a8e:	f1b8 0f02 	cmp.w	r8, #2
 8014a92:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8014a96:	f023 0303 	bic.w	r3, r3, #3
 8014a9a:	81a3      	strh	r3, [r4, #12]
 8014a9c:	d060      	beq.n	8014b60 <setvbuf+0x148>
 8014a9e:	ab01      	add	r3, sp, #4
 8014aa0:	466a      	mov	r2, sp
 8014aa2:	4621      	mov	r1, r4
 8014aa4:	4638      	mov	r0, r7
 8014aa6:	f001 ffd9 	bl	8016a5c <__swhatbuf_r>
 8014aaa:	89a3      	ldrh	r3, [r4, #12]
 8014aac:	4318      	orrs	r0, r3
 8014aae:	81a0      	strh	r0, [r4, #12]
 8014ab0:	bb2d      	cbnz	r5, 8014afe <setvbuf+0xe6>
 8014ab2:	9d00      	ldr	r5, [sp, #0]
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	f001 f97d 	bl	8015db4 <malloc>
 8014aba:	4606      	mov	r6, r0
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d151      	bne.n	8014b64 <setvbuf+0x14c>
 8014ac0:	f8dd 9000 	ldr.w	r9, [sp]
 8014ac4:	45a9      	cmp	r9, r5
 8014ac6:	d13f      	bne.n	8014b48 <setvbuf+0x130>
 8014ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8014acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ad0:	f043 0202 	orr.w	r2, r3, #2
 8014ad4:	81a2      	strh	r2, [r4, #12]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	60a2      	str	r2, [r4, #8]
 8014ada:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8014ade:	6022      	str	r2, [r4, #0]
 8014ae0:	6122      	str	r2, [r4, #16]
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	6162      	str	r2, [r4, #20]
 8014ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014ae8:	07d6      	lsls	r6, r2, #31
 8014aea:	d404      	bmi.n	8014af6 <setvbuf+0xde>
 8014aec:	0598      	lsls	r0, r3, #22
 8014aee:	d402      	bmi.n	8014af6 <setvbuf+0xde>
 8014af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014af2:	f000 fa89 	bl	8015008 <__retarget_lock_release_recursive>
 8014af6:	4628      	mov	r0, r5
 8014af8:	b003      	add	sp, #12
 8014afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014afe:	2e00      	cmp	r6, #0
 8014b00:	d0d8      	beq.n	8014ab4 <setvbuf+0x9c>
 8014b02:	6a3b      	ldr	r3, [r7, #32]
 8014b04:	b913      	cbnz	r3, 8014b0c <setvbuf+0xf4>
 8014b06:	4638      	mov	r0, r7
 8014b08:	f7ff feea 	bl	80148e0 <__sinit>
 8014b0c:	f1b8 0f01 	cmp.w	r8, #1
 8014b10:	6026      	str	r6, [r4, #0]
 8014b12:	bf02      	ittt	eq
 8014b14:	89a3      	ldrheq	r3, [r4, #12]
 8014b16:	f043 0301 	orreq.w	r3, r3, #1
 8014b1a:	81a3      	strheq	r3, [r4, #12]
 8014b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b20:	f013 0208 	ands.w	r2, r3, #8
 8014b24:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8014b28:	d01e      	beq.n	8014b68 <setvbuf+0x150>
 8014b2a:	07d9      	lsls	r1, r3, #31
 8014b2c:	bf45      	ittet	mi
 8014b2e:	2200      	movmi	r2, #0
 8014b30:	426d      	negmi	r5, r5
 8014b32:	60a5      	strpl	r5, [r4, #8]
 8014b34:	60a2      	strmi	r2, [r4, #8]
 8014b36:	bf48      	it	mi
 8014b38:	61a5      	strmi	r5, [r4, #24]
 8014b3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014b3c:	07d2      	lsls	r2, r2, #31
 8014b3e:	d401      	bmi.n	8014b44 <setvbuf+0x12c>
 8014b40:	059b      	lsls	r3, r3, #22
 8014b42:	d513      	bpl.n	8014b6c <setvbuf+0x154>
 8014b44:	2500      	movs	r5, #0
 8014b46:	e7d6      	b.n	8014af6 <setvbuf+0xde>
 8014b48:	4648      	mov	r0, r9
 8014b4a:	f001 f933 	bl	8015db4 <malloc>
 8014b4e:	4606      	mov	r6, r0
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d0b9      	beq.n	8014ac8 <setvbuf+0xb0>
 8014b54:	89a3      	ldrh	r3, [r4, #12]
 8014b56:	464d      	mov	r5, r9
 8014b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b5c:	81a3      	strh	r3, [r4, #12]
 8014b5e:	e7d0      	b.n	8014b02 <setvbuf+0xea>
 8014b60:	2500      	movs	r5, #0
 8014b62:	e7b3      	b.n	8014acc <setvbuf+0xb4>
 8014b64:	46a9      	mov	r9, r5
 8014b66:	e7f5      	b.n	8014b54 <setvbuf+0x13c>
 8014b68:	60a2      	str	r2, [r4, #8]
 8014b6a:	e7e6      	b.n	8014b3a <setvbuf+0x122>
 8014b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b6e:	f000 fa4b 	bl	8015008 <__retarget_lock_release_recursive>
 8014b72:	e7e7      	b.n	8014b44 <setvbuf+0x12c>
 8014b74:	f04f 35ff 	mov.w	r5, #4294967295
 8014b78:	e7bd      	b.n	8014af6 <setvbuf+0xde>
 8014b7a:	bf00      	nop
 8014b7c:	200001b4 	.word	0x200001b4

08014b80 <sniprintf>:
 8014b80:	b40c      	push	{r2, r3}
 8014b82:	4b18      	ldr	r3, [pc, #96]	@ (8014be4 <sniprintf+0x64>)
 8014b84:	b530      	push	{r4, r5, lr}
 8014b86:	1e0c      	subs	r4, r1, #0
 8014b88:	b09d      	sub	sp, #116	@ 0x74
 8014b8a:	681d      	ldr	r5, [r3, #0]
 8014b8c:	da08      	bge.n	8014ba0 <sniprintf+0x20>
 8014b8e:	238b      	movs	r3, #139	@ 0x8b
 8014b90:	f04f 30ff 	mov.w	r0, #4294967295
 8014b94:	602b      	str	r3, [r5, #0]
 8014b96:	b01d      	add	sp, #116	@ 0x74
 8014b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b9c:	b002      	add	sp, #8
 8014b9e:	4770      	bx	lr
 8014ba0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014ba4:	9002      	str	r0, [sp, #8]
 8014ba6:	9006      	str	r0, [sp, #24]
 8014ba8:	a902      	add	r1, sp, #8
 8014baa:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014bae:	bf14      	ite	ne
 8014bb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014bb4:	4623      	moveq	r3, r4
 8014bb6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014bb8:	4628      	mov	r0, r5
 8014bba:	9304      	str	r3, [sp, #16]
 8014bbc:	9307      	str	r3, [sp, #28]
 8014bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014bc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014bc6:	ab21      	add	r3, sp, #132	@ 0x84
 8014bc8:	9301      	str	r3, [sp, #4]
 8014bca:	f001 fd8d 	bl	80166e8 <_svfiprintf_r>
 8014bce:	1c43      	adds	r3, r0, #1
 8014bd0:	bfbc      	itt	lt
 8014bd2:	238b      	movlt	r3, #139	@ 0x8b
 8014bd4:	602b      	strlt	r3, [r5, #0]
 8014bd6:	2c00      	cmp	r4, #0
 8014bd8:	d0dd      	beq.n	8014b96 <sniprintf+0x16>
 8014bda:	9b02      	ldr	r3, [sp, #8]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	701a      	strb	r2, [r3, #0]
 8014be0:	e7d9      	b.n	8014b96 <sniprintf+0x16>
 8014be2:	bf00      	nop
 8014be4:	200001b4 	.word	0x200001b4

08014be8 <__sread>:
 8014be8:	b510      	push	{r4, lr}
 8014bea:	460c      	mov	r4, r1
 8014bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bf0:	f000 f9ba 	bl	8014f68 <_read_r>
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	bfab      	itete	ge
 8014bf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8014bfc:	181b      	addge	r3, r3, r0
 8014bfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014c02:	bfac      	ite	ge
 8014c04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014c06:	81a3      	strhlt	r3, [r4, #12]
 8014c08:	bd10      	pop	{r4, pc}

08014c0a <__swrite>:
 8014c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c0e:	461f      	mov	r7, r3
 8014c10:	898b      	ldrh	r3, [r1, #12]
 8014c12:	4605      	mov	r5, r0
 8014c14:	460c      	mov	r4, r1
 8014c16:	05db      	lsls	r3, r3, #23
 8014c18:	4616      	mov	r6, r2
 8014c1a:	d505      	bpl.n	8014c28 <__swrite+0x1e>
 8014c1c:	2302      	movs	r3, #2
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c24:	f000 f98e 	bl	8014f44 <_lseek_r>
 8014c28:	89a3      	ldrh	r3, [r4, #12]
 8014c2a:	4632      	mov	r2, r6
 8014c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c30:	4628      	mov	r0, r5
 8014c32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014c36:	81a3      	strh	r3, [r4, #12]
 8014c38:	463b      	mov	r3, r7
 8014c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3e:	f000 b9a5 	b.w	8014f8c <_write_r>

08014c42 <__sseek>:
 8014c42:	b510      	push	{r4, lr}
 8014c44:	460c      	mov	r4, r1
 8014c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c4a:	f000 f97b 	bl	8014f44 <_lseek_r>
 8014c4e:	1c43      	adds	r3, r0, #1
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	bf15      	itete	ne
 8014c54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014c56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014c5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014c5e:	81a3      	strheq	r3, [r4, #12]
 8014c60:	bf18      	it	ne
 8014c62:	81a3      	strhne	r3, [r4, #12]
 8014c64:	bd10      	pop	{r4, pc}

08014c66 <__sclose>:
 8014c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c6a:	f000 b95b 	b.w	8014f24 <_close_r>

08014c6e <_vsniprintf_r>:
 8014c6e:	b530      	push	{r4, r5, lr}
 8014c70:	4614      	mov	r4, r2
 8014c72:	b09b      	sub	sp, #108	@ 0x6c
 8014c74:	4605      	mov	r5, r0
 8014c76:	461a      	mov	r2, r3
 8014c78:	2c00      	cmp	r4, #0
 8014c7a:	da05      	bge.n	8014c88 <_vsniprintf_r+0x1a>
 8014c7c:	238b      	movs	r3, #139	@ 0x8b
 8014c7e:	6003      	str	r3, [r0, #0]
 8014c80:	f04f 30ff 	mov.w	r0, #4294967295
 8014c84:	b01b      	add	sp, #108	@ 0x6c
 8014c86:	bd30      	pop	{r4, r5, pc}
 8014c88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014c8c:	9100      	str	r1, [sp, #0]
 8014c8e:	9104      	str	r1, [sp, #16]
 8014c90:	4669      	mov	r1, sp
 8014c92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014c96:	bf14      	ite	ne
 8014c98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014c9c:	4623      	moveq	r3, r4
 8014c9e:	9302      	str	r3, [sp, #8]
 8014ca0:	9305      	str	r3, [sp, #20]
 8014ca2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014ca6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014caa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014cac:	f001 fd1c 	bl	80166e8 <_svfiprintf_r>
 8014cb0:	1c43      	adds	r3, r0, #1
 8014cb2:	bfbc      	itt	lt
 8014cb4:	238b      	movlt	r3, #139	@ 0x8b
 8014cb6:	602b      	strlt	r3, [r5, #0]
 8014cb8:	2c00      	cmp	r4, #0
 8014cba:	d0e3      	beq.n	8014c84 <_vsniprintf_r+0x16>
 8014cbc:	9b00      	ldr	r3, [sp, #0]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	701a      	strb	r2, [r3, #0]
 8014cc2:	e7df      	b.n	8014c84 <_vsniprintf_r+0x16>

08014cc4 <vsniprintf>:
 8014cc4:	b507      	push	{r0, r1, r2, lr}
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	4613      	mov	r3, r2
 8014cca:	460a      	mov	r2, r1
 8014ccc:	4601      	mov	r1, r0
 8014cce:	4803      	ldr	r0, [pc, #12]	@ (8014cdc <vsniprintf+0x18>)
 8014cd0:	6800      	ldr	r0, [r0, #0]
 8014cd2:	f7ff ffcc 	bl	8014c6e <_vsniprintf_r>
 8014cd6:	b003      	add	sp, #12
 8014cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014cdc:	200001b4 	.word	0x200001b4

08014ce0 <__swbuf_r>:
 8014ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ce2:	460e      	mov	r6, r1
 8014ce4:	4614      	mov	r4, r2
 8014ce6:	4605      	mov	r5, r0
 8014ce8:	b118      	cbz	r0, 8014cf2 <__swbuf_r+0x12>
 8014cea:	6a03      	ldr	r3, [r0, #32]
 8014cec:	b90b      	cbnz	r3, 8014cf2 <__swbuf_r+0x12>
 8014cee:	f7ff fdf7 	bl	80148e0 <__sinit>
 8014cf2:	69a3      	ldr	r3, [r4, #24]
 8014cf4:	60a3      	str	r3, [r4, #8]
 8014cf6:	89a3      	ldrh	r3, [r4, #12]
 8014cf8:	071a      	lsls	r2, r3, #28
 8014cfa:	d501      	bpl.n	8014d00 <__swbuf_r+0x20>
 8014cfc:	6923      	ldr	r3, [r4, #16]
 8014cfe:	b943      	cbnz	r3, 8014d12 <__swbuf_r+0x32>
 8014d00:	4621      	mov	r1, r4
 8014d02:	4628      	mov	r0, r5
 8014d04:	f000 f82a 	bl	8014d5c <__swsetup_r>
 8014d08:	b118      	cbz	r0, 8014d12 <__swbuf_r+0x32>
 8014d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8014d0e:	4638      	mov	r0, r7
 8014d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d12:	6823      	ldr	r3, [r4, #0]
 8014d14:	b2f6      	uxtb	r6, r6
 8014d16:	6922      	ldr	r2, [r4, #16]
 8014d18:	4637      	mov	r7, r6
 8014d1a:	1a98      	subs	r0, r3, r2
 8014d1c:	6963      	ldr	r3, [r4, #20]
 8014d1e:	4283      	cmp	r3, r0
 8014d20:	dc05      	bgt.n	8014d2e <__swbuf_r+0x4e>
 8014d22:	4621      	mov	r1, r4
 8014d24:	4628      	mov	r0, r5
 8014d26:	f001 fe5f 	bl	80169e8 <_fflush_r>
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	d1ed      	bne.n	8014d0a <__swbuf_r+0x2a>
 8014d2e:	68a3      	ldr	r3, [r4, #8]
 8014d30:	3b01      	subs	r3, #1
 8014d32:	60a3      	str	r3, [r4, #8]
 8014d34:	6823      	ldr	r3, [r4, #0]
 8014d36:	1c5a      	adds	r2, r3, #1
 8014d38:	6022      	str	r2, [r4, #0]
 8014d3a:	701e      	strb	r6, [r3, #0]
 8014d3c:	1c43      	adds	r3, r0, #1
 8014d3e:	6962      	ldr	r2, [r4, #20]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d004      	beq.n	8014d4e <__swbuf_r+0x6e>
 8014d44:	89a3      	ldrh	r3, [r4, #12]
 8014d46:	07db      	lsls	r3, r3, #31
 8014d48:	d5e1      	bpl.n	8014d0e <__swbuf_r+0x2e>
 8014d4a:	2e0a      	cmp	r6, #10
 8014d4c:	d1df      	bne.n	8014d0e <__swbuf_r+0x2e>
 8014d4e:	4621      	mov	r1, r4
 8014d50:	4628      	mov	r0, r5
 8014d52:	f001 fe49 	bl	80169e8 <_fflush_r>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d0d9      	beq.n	8014d0e <__swbuf_r+0x2e>
 8014d5a:	e7d6      	b.n	8014d0a <__swbuf_r+0x2a>

08014d5c <__swsetup_r>:
 8014d5c:	b538      	push	{r3, r4, r5, lr}
 8014d5e:	4b29      	ldr	r3, [pc, #164]	@ (8014e04 <__swsetup_r+0xa8>)
 8014d60:	4605      	mov	r5, r0
 8014d62:	460c      	mov	r4, r1
 8014d64:	6818      	ldr	r0, [r3, #0]
 8014d66:	b118      	cbz	r0, 8014d70 <__swsetup_r+0x14>
 8014d68:	6a03      	ldr	r3, [r0, #32]
 8014d6a:	b90b      	cbnz	r3, 8014d70 <__swsetup_r+0x14>
 8014d6c:	f7ff fdb8 	bl	80148e0 <__sinit>
 8014d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d74:	0719      	lsls	r1, r3, #28
 8014d76:	d422      	bmi.n	8014dbe <__swsetup_r+0x62>
 8014d78:	06da      	lsls	r2, r3, #27
 8014d7a:	d407      	bmi.n	8014d8c <__swsetup_r+0x30>
 8014d7c:	2209      	movs	r2, #9
 8014d7e:	602a      	str	r2, [r5, #0]
 8014d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d84:	f04f 30ff 	mov.w	r0, #4294967295
 8014d88:	81a3      	strh	r3, [r4, #12]
 8014d8a:	e033      	b.n	8014df4 <__swsetup_r+0x98>
 8014d8c:	0758      	lsls	r0, r3, #29
 8014d8e:	d512      	bpl.n	8014db6 <__swsetup_r+0x5a>
 8014d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d92:	b141      	cbz	r1, 8014da6 <__swsetup_r+0x4a>
 8014d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d98:	4299      	cmp	r1, r3
 8014d9a:	d002      	beq.n	8014da2 <__swsetup_r+0x46>
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	f000 ffbf 	bl	8015d20 <_free_r>
 8014da2:	2300      	movs	r3, #0
 8014da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8014da6:	89a3      	ldrh	r3, [r4, #12]
 8014da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014dac:	81a3      	strh	r3, [r4, #12]
 8014dae:	2300      	movs	r3, #0
 8014db0:	6063      	str	r3, [r4, #4]
 8014db2:	6923      	ldr	r3, [r4, #16]
 8014db4:	6023      	str	r3, [r4, #0]
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f043 0308 	orr.w	r3, r3, #8
 8014dbc:	81a3      	strh	r3, [r4, #12]
 8014dbe:	6923      	ldr	r3, [r4, #16]
 8014dc0:	b94b      	cbnz	r3, 8014dd6 <__swsetup_r+0x7a>
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014dcc:	d003      	beq.n	8014dd6 <__swsetup_r+0x7a>
 8014dce:	4621      	mov	r1, r4
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	f001 fe68 	bl	8016aa6 <__smakebuf_r>
 8014dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dda:	f013 0201 	ands.w	r2, r3, #1
 8014dde:	d00a      	beq.n	8014df6 <__swsetup_r+0x9a>
 8014de0:	2200      	movs	r2, #0
 8014de2:	60a2      	str	r2, [r4, #8]
 8014de4:	6962      	ldr	r2, [r4, #20]
 8014de6:	4252      	negs	r2, r2
 8014de8:	61a2      	str	r2, [r4, #24]
 8014dea:	6922      	ldr	r2, [r4, #16]
 8014dec:	b942      	cbnz	r2, 8014e00 <__swsetup_r+0xa4>
 8014dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014df2:	d1c5      	bne.n	8014d80 <__swsetup_r+0x24>
 8014df4:	bd38      	pop	{r3, r4, r5, pc}
 8014df6:	0799      	lsls	r1, r3, #30
 8014df8:	bf58      	it	pl
 8014dfa:	6962      	ldrpl	r2, [r4, #20]
 8014dfc:	60a2      	str	r2, [r4, #8]
 8014dfe:	e7f4      	b.n	8014dea <__swsetup_r+0x8e>
 8014e00:	2000      	movs	r0, #0
 8014e02:	e7f7      	b.n	8014df4 <__swsetup_r+0x98>
 8014e04:	200001b4 	.word	0x200001b4

08014e08 <memset>:
 8014e08:	4402      	add	r2, r0
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	4293      	cmp	r3, r2
 8014e0e:	d100      	bne.n	8014e12 <memset+0xa>
 8014e10:	4770      	bx	lr
 8014e12:	f803 1b01 	strb.w	r1, [r3], #1
 8014e16:	e7f9      	b.n	8014e0c <memset+0x4>

08014e18 <strncat>:
 8014e18:	b530      	push	{r4, r5, lr}
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	7825      	ldrb	r5, [r4, #0]
 8014e1e:	4623      	mov	r3, r4
 8014e20:	3401      	adds	r4, #1
 8014e22:	2d00      	cmp	r5, #0
 8014e24:	d1fa      	bne.n	8014e1c <strncat+0x4>
 8014e26:	3a01      	subs	r2, #1
 8014e28:	d304      	bcc.n	8014e34 <strncat+0x1c>
 8014e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e2e:	f803 4b01 	strb.w	r4, [r3], #1
 8014e32:	b904      	cbnz	r4, 8014e36 <strncat+0x1e>
 8014e34:	bd30      	pop	{r4, r5, pc}
 8014e36:	2a00      	cmp	r2, #0
 8014e38:	d1f5      	bne.n	8014e26 <strncat+0xe>
 8014e3a:	701a      	strb	r2, [r3, #0]
 8014e3c:	e7f3      	b.n	8014e26 <strncat+0xe>

08014e3e <strncpy>:
 8014e3e:	3901      	subs	r1, #1
 8014e40:	4603      	mov	r3, r0
 8014e42:	b510      	push	{r4, lr}
 8014e44:	b132      	cbz	r2, 8014e54 <strncpy+0x16>
 8014e46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014e4a:	3a01      	subs	r2, #1
 8014e4c:	f803 4b01 	strb.w	r4, [r3], #1
 8014e50:	2c00      	cmp	r4, #0
 8014e52:	d1f7      	bne.n	8014e44 <strncpy+0x6>
 8014e54:	441a      	add	r2, r3
 8014e56:	2100      	movs	r1, #0
 8014e58:	4293      	cmp	r3, r2
 8014e5a:	d100      	bne.n	8014e5e <strncpy+0x20>
 8014e5c:	bd10      	pop	{r4, pc}
 8014e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e62:	e7f9      	b.n	8014e58 <strncpy+0x1a>

08014e64 <strtok>:
 8014e64:	4b16      	ldr	r3, [pc, #88]	@ (8014ec0 <strtok+0x5c>)
 8014e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e6a:	681f      	ldr	r7, [r3, #0]
 8014e6c:	4605      	mov	r5, r0
 8014e6e:	460e      	mov	r6, r1
 8014e70:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014e72:	b9ec      	cbnz	r4, 8014eb0 <strtok+0x4c>
 8014e74:	2050      	movs	r0, #80	@ 0x50
 8014e76:	f000 ff9d 	bl	8015db4 <malloc>
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8014e7e:	b920      	cbnz	r0, 8014e8a <strtok+0x26>
 8014e80:	4b10      	ldr	r3, [pc, #64]	@ (8014ec4 <strtok+0x60>)
 8014e82:	215b      	movs	r1, #91	@ 0x5b
 8014e84:	4810      	ldr	r0, [pc, #64]	@ (8014ec8 <strtok+0x64>)
 8014e86:	f000 f8db 	bl	8015040 <__assert_func>
 8014e8a:	e9c0 4400 	strd	r4, r4, [r0]
 8014e8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014e92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014e96:	6184      	str	r4, [r0, #24]
 8014e98:	7704      	strb	r4, [r0, #28]
 8014e9a:	6244      	str	r4, [r0, #36]	@ 0x24
 8014e9c:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8014ea0:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014ea4:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014ea8:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8014eac:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8014eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014eb2:	4631      	mov	r1, r6
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ebc:	f000 b806 	b.w	8014ecc <__strtok_r>
 8014ec0:	200001b4 	.word	0x200001b4
 8014ec4:	08017e55 	.word	0x08017e55
 8014ec8:	08017e6c 	.word	0x08017e6c

08014ecc <__strtok_r>:
 8014ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ece:	4604      	mov	r4, r0
 8014ed0:	b908      	cbnz	r0, 8014ed6 <__strtok_r+0xa>
 8014ed2:	6814      	ldr	r4, [r2, #0]
 8014ed4:	b144      	cbz	r4, 8014ee8 <__strtok_r+0x1c>
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	460f      	mov	r7, r1
 8014eda:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014ede:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014ee2:	b91e      	cbnz	r6, 8014eec <__strtok_r+0x20>
 8014ee4:	b965      	cbnz	r5, 8014f00 <__strtok_r+0x34>
 8014ee6:	6015      	str	r5, [r2, #0]
 8014ee8:	2000      	movs	r0, #0
 8014eea:	e005      	b.n	8014ef8 <__strtok_r+0x2c>
 8014eec:	42b5      	cmp	r5, r6
 8014eee:	d1f6      	bne.n	8014ede <__strtok_r+0x12>
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d1f0      	bne.n	8014ed6 <__strtok_r+0xa>
 8014ef4:	6014      	str	r4, [r2, #0]
 8014ef6:	7003      	strb	r3, [r0, #0]
 8014ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014efa:	461c      	mov	r4, r3
 8014efc:	e00c      	b.n	8014f18 <__strtok_r+0x4c>
 8014efe:	b915      	cbnz	r5, 8014f06 <__strtok_r+0x3a>
 8014f00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014f04:	460e      	mov	r6, r1
 8014f06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014f0a:	42ab      	cmp	r3, r5
 8014f0c:	d1f7      	bne.n	8014efe <__strtok_r+0x32>
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d0f3      	beq.n	8014efa <__strtok_r+0x2e>
 8014f12:	2300      	movs	r3, #0
 8014f14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014f18:	6014      	str	r4, [r2, #0]
 8014f1a:	e7ed      	b.n	8014ef8 <__strtok_r+0x2c>

08014f1c <_localeconv_r>:
 8014f1c:	4800      	ldr	r0, [pc, #0]	@ (8014f20 <_localeconv_r+0x4>)
 8014f1e:	4770      	bx	lr
 8014f20:	200002f4 	.word	0x200002f4

08014f24 <_close_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	2300      	movs	r3, #0
 8014f28:	4d05      	ldr	r5, [pc, #20]	@ (8014f40 <_close_r+0x1c>)
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	4608      	mov	r0, r1
 8014f2e:	602b      	str	r3, [r5, #0]
 8014f30:	f7f0 fa1e 	bl	8005370 <_close>
 8014f34:	1c43      	adds	r3, r0, #1
 8014f36:	d102      	bne.n	8014f3e <_close_r+0x1a>
 8014f38:	682b      	ldr	r3, [r5, #0]
 8014f3a:	b103      	cbz	r3, 8014f3e <_close_r+0x1a>
 8014f3c:	6023      	str	r3, [r4, #0]
 8014f3e:	bd38      	pop	{r3, r4, r5, pc}
 8014f40:	200044f8 	.word	0x200044f8

08014f44 <_lseek_r>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	4604      	mov	r4, r0
 8014f48:	4d06      	ldr	r5, [pc, #24]	@ (8014f64 <_lseek_r+0x20>)
 8014f4a:	4608      	mov	r0, r1
 8014f4c:	4611      	mov	r1, r2
 8014f4e:	2200      	movs	r2, #0
 8014f50:	602a      	str	r2, [r5, #0]
 8014f52:	461a      	mov	r2, r3
 8014f54:	f7f0 fa33 	bl	80053be <_lseek>
 8014f58:	1c43      	adds	r3, r0, #1
 8014f5a:	d102      	bne.n	8014f62 <_lseek_r+0x1e>
 8014f5c:	682b      	ldr	r3, [r5, #0]
 8014f5e:	b103      	cbz	r3, 8014f62 <_lseek_r+0x1e>
 8014f60:	6023      	str	r3, [r4, #0]
 8014f62:	bd38      	pop	{r3, r4, r5, pc}
 8014f64:	200044f8 	.word	0x200044f8

08014f68 <_read_r>:
 8014f68:	b538      	push	{r3, r4, r5, lr}
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	4d06      	ldr	r5, [pc, #24]	@ (8014f88 <_read_r+0x20>)
 8014f6e:	4608      	mov	r0, r1
 8014f70:	4611      	mov	r1, r2
 8014f72:	2200      	movs	r2, #0
 8014f74:	602a      	str	r2, [r5, #0]
 8014f76:	461a      	mov	r2, r3
 8014f78:	f7f0 f9c1 	bl	80052fe <_read>
 8014f7c:	1c43      	adds	r3, r0, #1
 8014f7e:	d102      	bne.n	8014f86 <_read_r+0x1e>
 8014f80:	682b      	ldr	r3, [r5, #0]
 8014f82:	b103      	cbz	r3, 8014f86 <_read_r+0x1e>
 8014f84:	6023      	str	r3, [r4, #0]
 8014f86:	bd38      	pop	{r3, r4, r5, pc}
 8014f88:	200044f8 	.word	0x200044f8

08014f8c <_write_r>:
 8014f8c:	b538      	push	{r3, r4, r5, lr}
 8014f8e:	4604      	mov	r4, r0
 8014f90:	4d06      	ldr	r5, [pc, #24]	@ (8014fac <_write_r+0x20>)
 8014f92:	4608      	mov	r0, r1
 8014f94:	4611      	mov	r1, r2
 8014f96:	2200      	movs	r2, #0
 8014f98:	602a      	str	r2, [r5, #0]
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	f7f0 f9cc 	bl	8005338 <_write>
 8014fa0:	1c43      	adds	r3, r0, #1
 8014fa2:	d102      	bne.n	8014faa <_write_r+0x1e>
 8014fa4:	682b      	ldr	r3, [r5, #0]
 8014fa6:	b103      	cbz	r3, 8014faa <_write_r+0x1e>
 8014fa8:	6023      	str	r3, [r4, #0]
 8014faa:	bd38      	pop	{r3, r4, r5, pc}
 8014fac:	200044f8 	.word	0x200044f8

08014fb0 <__errno>:
 8014fb0:	4b01      	ldr	r3, [pc, #4]	@ (8014fb8 <__errno+0x8>)
 8014fb2:	6818      	ldr	r0, [r3, #0]
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop
 8014fb8:	200001b4 	.word	0x200001b4

08014fbc <__libc_init_array>:
 8014fbc:	b570      	push	{r4, r5, r6, lr}
 8014fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8014ff4 <__libc_init_array+0x38>)
 8014fc0:	2600      	movs	r6, #0
 8014fc2:	4c0d      	ldr	r4, [pc, #52]	@ (8014ff8 <__libc_init_array+0x3c>)
 8014fc4:	1b64      	subs	r4, r4, r5
 8014fc6:	10a4      	asrs	r4, r4, #2
 8014fc8:	42a6      	cmp	r6, r4
 8014fca:	d109      	bne.n	8014fe0 <__libc_init_array+0x24>
 8014fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8014ffc <__libc_init_array+0x40>)
 8014fce:	2600      	movs	r6, #0
 8014fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8015000 <__libc_init_array+0x44>)
 8014fd2:	f002 f81b 	bl	801700c <_init>
 8014fd6:	1b64      	subs	r4, r4, r5
 8014fd8:	10a4      	asrs	r4, r4, #2
 8014fda:	42a6      	cmp	r6, r4
 8014fdc:	d105      	bne.n	8014fea <__libc_init_array+0x2e>
 8014fde:	bd70      	pop	{r4, r5, r6, pc}
 8014fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fe4:	3601      	adds	r6, #1
 8014fe6:	4798      	blx	r3
 8014fe8:	e7ee      	b.n	8014fc8 <__libc_init_array+0xc>
 8014fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fee:	3601      	adds	r6, #1
 8014ff0:	4798      	blx	r3
 8014ff2:	e7f2      	b.n	8014fda <__libc_init_array+0x1e>
 8014ff4:	080180f4 	.word	0x080180f4
 8014ff8:	080180f4 	.word	0x080180f4
 8014ffc:	080180f4 	.word	0x080180f4
 8015000:	080180f8 	.word	0x080180f8

08015004 <__retarget_lock_init_recursive>:
 8015004:	4770      	bx	lr

08015006 <__retarget_lock_acquire_recursive>:
 8015006:	4770      	bx	lr

08015008 <__retarget_lock_release_recursive>:
 8015008:	4770      	bx	lr

0801500a <memchr>:
 801500a:	b2c9      	uxtb	r1, r1
 801500c:	4603      	mov	r3, r0
 801500e:	4402      	add	r2, r0
 8015010:	b510      	push	{r4, lr}
 8015012:	4293      	cmp	r3, r2
 8015014:	4618      	mov	r0, r3
 8015016:	d101      	bne.n	801501c <memchr+0x12>
 8015018:	2000      	movs	r0, #0
 801501a:	e003      	b.n	8015024 <memchr+0x1a>
 801501c:	7804      	ldrb	r4, [r0, #0]
 801501e:	3301      	adds	r3, #1
 8015020:	428c      	cmp	r4, r1
 8015022:	d1f6      	bne.n	8015012 <memchr+0x8>
 8015024:	bd10      	pop	{r4, pc}

08015026 <memcpy>:
 8015026:	440a      	add	r2, r1
 8015028:	1e43      	subs	r3, r0, #1
 801502a:	4291      	cmp	r1, r2
 801502c:	d100      	bne.n	8015030 <memcpy+0xa>
 801502e:	4770      	bx	lr
 8015030:	b510      	push	{r4, lr}
 8015032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015036:	4291      	cmp	r1, r2
 8015038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801503c:	d1f9      	bne.n	8015032 <memcpy+0xc>
 801503e:	bd10      	pop	{r4, pc}

08015040 <__assert_func>:
 8015040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015042:	4614      	mov	r4, r2
 8015044:	461a      	mov	r2, r3
 8015046:	4b09      	ldr	r3, [pc, #36]	@ (801506c <__assert_func+0x2c>)
 8015048:	4605      	mov	r5, r0
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	68d8      	ldr	r0, [r3, #12]
 801504e:	b954      	cbnz	r4, 8015066 <__assert_func+0x26>
 8015050:	4b07      	ldr	r3, [pc, #28]	@ (8015070 <__assert_func+0x30>)
 8015052:	461c      	mov	r4, r3
 8015054:	9100      	str	r1, [sp, #0]
 8015056:	4907      	ldr	r1, [pc, #28]	@ (8015074 <__assert_func+0x34>)
 8015058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801505c:	462b      	mov	r3, r5
 801505e:	f001 fceb 	bl	8016a38 <fiprintf>
 8015062:	f001 fddd 	bl	8016c20 <abort>
 8015066:	4b04      	ldr	r3, [pc, #16]	@ (8015078 <__assert_func+0x38>)
 8015068:	e7f4      	b.n	8015054 <__assert_func+0x14>
 801506a:	bf00      	nop
 801506c:	200001b4 	.word	0x200001b4
 8015070:	08017f01 	.word	0x08017f01
 8015074:	08017ed3 	.word	0x08017ed3
 8015078:	08017ec6 	.word	0x08017ec6

0801507c <quorem>:
 801507c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015080:	6903      	ldr	r3, [r0, #16]
 8015082:	4607      	mov	r7, r0
 8015084:	690c      	ldr	r4, [r1, #16]
 8015086:	42a3      	cmp	r3, r4
 8015088:	f2c0 8083 	blt.w	8015192 <quorem+0x116>
 801508c:	3c01      	subs	r4, #1
 801508e:	f100 0514 	add.w	r5, r0, #20
 8015092:	f101 0814 	add.w	r8, r1, #20
 8015096:	00a3      	lsls	r3, r4, #2
 8015098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801509c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80150a0:	9300      	str	r3, [sp, #0]
 80150a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150a6:	9301      	str	r3, [sp, #4]
 80150a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80150ac:	3301      	adds	r3, #1
 80150ae:	429a      	cmp	r2, r3
 80150b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80150b4:	d331      	bcc.n	801511a <quorem+0x9e>
 80150b6:	f04f 0a00 	mov.w	sl, #0
 80150ba:	46c4      	mov	ip, r8
 80150bc:	46ae      	mov	lr, r5
 80150be:	46d3      	mov	fp, sl
 80150c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80150c4:	b298      	uxth	r0, r3
 80150c6:	45e1      	cmp	r9, ip
 80150c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80150cc:	fb06 a000 	mla	r0, r6, r0, sl
 80150d0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80150d4:	b280      	uxth	r0, r0
 80150d6:	fb06 2303 	mla	r3, r6, r3, r2
 80150da:	f8de 2000 	ldr.w	r2, [lr]
 80150de:	b292      	uxth	r2, r2
 80150e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150e4:	eba2 0200 	sub.w	r2, r2, r0
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	f8de 0000 	ldr.w	r0, [lr]
 80150ee:	445a      	add	r2, fp
 80150f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80150f4:	b292      	uxth	r2, r2
 80150f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80150fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80150fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015102:	f84e 2b04 	str.w	r2, [lr], #4
 8015106:	d2db      	bcs.n	80150c0 <quorem+0x44>
 8015108:	9b00      	ldr	r3, [sp, #0]
 801510a:	58eb      	ldr	r3, [r5, r3]
 801510c:	b92b      	cbnz	r3, 801511a <quorem+0x9e>
 801510e:	9b01      	ldr	r3, [sp, #4]
 8015110:	3b04      	subs	r3, #4
 8015112:	429d      	cmp	r5, r3
 8015114:	461a      	mov	r2, r3
 8015116:	d330      	bcc.n	801517a <quorem+0xfe>
 8015118:	613c      	str	r4, [r7, #16]
 801511a:	4638      	mov	r0, r7
 801511c:	f001 f97c 	bl	8016418 <__mcmp>
 8015120:	2800      	cmp	r0, #0
 8015122:	db26      	blt.n	8015172 <quorem+0xf6>
 8015124:	4629      	mov	r1, r5
 8015126:	2000      	movs	r0, #0
 8015128:	f858 2b04 	ldr.w	r2, [r8], #4
 801512c:	f8d1 c000 	ldr.w	ip, [r1]
 8015130:	fa1f fe82 	uxth.w	lr, r2
 8015134:	45c1      	cmp	r9, r8
 8015136:	fa1f f38c 	uxth.w	r3, ip
 801513a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 801513e:	eba3 030e 	sub.w	r3, r3, lr
 8015142:	4403      	add	r3, r0
 8015144:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015148:	b29b      	uxth	r3, r3
 801514a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801514e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015152:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015156:	f841 3b04 	str.w	r3, [r1], #4
 801515a:	d2e5      	bcs.n	8015128 <quorem+0xac>
 801515c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015164:	b922      	cbnz	r2, 8015170 <quorem+0xf4>
 8015166:	3b04      	subs	r3, #4
 8015168:	429d      	cmp	r5, r3
 801516a:	461a      	mov	r2, r3
 801516c:	d30b      	bcc.n	8015186 <quorem+0x10a>
 801516e:	613c      	str	r4, [r7, #16]
 8015170:	3601      	adds	r6, #1
 8015172:	4630      	mov	r0, r6
 8015174:	b003      	add	sp, #12
 8015176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801517a:	6812      	ldr	r2, [r2, #0]
 801517c:	3b04      	subs	r3, #4
 801517e:	2a00      	cmp	r2, #0
 8015180:	d1ca      	bne.n	8015118 <quorem+0x9c>
 8015182:	3c01      	subs	r4, #1
 8015184:	e7c5      	b.n	8015112 <quorem+0x96>
 8015186:	6812      	ldr	r2, [r2, #0]
 8015188:	3b04      	subs	r3, #4
 801518a:	2a00      	cmp	r2, #0
 801518c:	d1ef      	bne.n	801516e <quorem+0xf2>
 801518e:	3c01      	subs	r4, #1
 8015190:	e7ea      	b.n	8015168 <quorem+0xec>
 8015192:	2000      	movs	r0, #0
 8015194:	e7ee      	b.n	8015174 <quorem+0xf8>
	...

08015198 <_dtoa_r>:
 8015198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519c:	69c7      	ldr	r7, [r0, #28]
 801519e:	b099      	sub	sp, #100	@ 0x64
 80151a0:	4683      	mov	fp, r0
 80151a2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80151a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80151a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80151a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80151aa:	ec55 4b10 	vmov	r4, r5, d0
 80151ae:	ed8d 0b02 	vstr	d0, [sp, #8]
 80151b2:	b97f      	cbnz	r7, 80151d4 <_dtoa_r+0x3c>
 80151b4:	2010      	movs	r0, #16
 80151b6:	f000 fdfd 	bl	8015db4 <malloc>
 80151ba:	4602      	mov	r2, r0
 80151bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80151c0:	b920      	cbnz	r0, 80151cc <_dtoa_r+0x34>
 80151c2:	4ba7      	ldr	r3, [pc, #668]	@ (8015460 <_dtoa_r+0x2c8>)
 80151c4:	21ef      	movs	r1, #239	@ 0xef
 80151c6:	48a7      	ldr	r0, [pc, #668]	@ (8015464 <_dtoa_r+0x2cc>)
 80151c8:	f7ff ff3a 	bl	8015040 <__assert_func>
 80151cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80151d0:	6007      	str	r7, [r0, #0]
 80151d2:	60c7      	str	r7, [r0, #12]
 80151d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80151d8:	6819      	ldr	r1, [r3, #0]
 80151da:	b159      	cbz	r1, 80151f4 <_dtoa_r+0x5c>
 80151dc:	685a      	ldr	r2, [r3, #4]
 80151de:	2301      	movs	r3, #1
 80151e0:	4658      	mov	r0, fp
 80151e2:	4093      	lsls	r3, r2
 80151e4:	604a      	str	r2, [r1, #4]
 80151e6:	608b      	str	r3, [r1, #8]
 80151e8:	f000 feda 	bl	8015fa0 <_Bfree>
 80151ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80151f0:	2200      	movs	r2, #0
 80151f2:	601a      	str	r2, [r3, #0]
 80151f4:	1e2b      	subs	r3, r5, #0
 80151f6:	bfb7      	itett	lt
 80151f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80151fc:	2300      	movge	r3, #0
 80151fe:	2201      	movlt	r2, #1
 8015200:	9303      	strlt	r3, [sp, #12]
 8015202:	bfa8      	it	ge
 8015204:	6033      	strge	r3, [r6, #0]
 8015206:	9f03      	ldr	r7, [sp, #12]
 8015208:	4b97      	ldr	r3, [pc, #604]	@ (8015468 <_dtoa_r+0x2d0>)
 801520a:	bfb8      	it	lt
 801520c:	6032      	strlt	r2, [r6, #0]
 801520e:	43bb      	bics	r3, r7
 8015210:	d112      	bne.n	8015238 <_dtoa_r+0xa0>
 8015212:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015218:	6013      	str	r3, [r2, #0]
 801521a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801521e:	4323      	orrs	r3, r4
 8015220:	f000 854c 	beq.w	8015cbc <_dtoa_r+0xb24>
 8015224:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015226:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801547c <_dtoa_r+0x2e4>
 801522a:	2b00      	cmp	r3, #0
 801522c:	f000 854e 	beq.w	8015ccc <_dtoa_r+0xb34>
 8015230:	f10a 0303 	add.w	r3, sl, #3
 8015234:	f000 bd48 	b.w	8015cc8 <_dtoa_r+0xb30>
 8015238:	ed9d 7b02 	vldr	d7, [sp, #8]
 801523c:	2200      	movs	r2, #0
 801523e:	2300      	movs	r3, #0
 8015240:	ec51 0b17 	vmov	r0, r1, d7
 8015244:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015248:	f7eb fc6c 	bl	8000b24 <__aeabi_dcmpeq>
 801524c:	4680      	mov	r8, r0
 801524e:	b158      	cbz	r0, 8015268 <_dtoa_r+0xd0>
 8015250:	2301      	movs	r3, #1
 8015252:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015254:	6013      	str	r3, [r2, #0]
 8015256:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015258:	b113      	cbz	r3, 8015260 <_dtoa_r+0xc8>
 801525a:	4b84      	ldr	r3, [pc, #528]	@ (801546c <_dtoa_r+0x2d4>)
 801525c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801525e:	6013      	str	r3, [r2, #0]
 8015260:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8015480 <_dtoa_r+0x2e8>
 8015264:	f000 bd32 	b.w	8015ccc <_dtoa_r+0xb34>
 8015268:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801526c:	aa16      	add	r2, sp, #88	@ 0x58
 801526e:	a917      	add	r1, sp, #92	@ 0x5c
 8015270:	4658      	mov	r0, fp
 8015272:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015276:	f001 f983 	bl	8016580 <__d2b>
 801527a:	4681      	mov	r9, r0
 801527c:	2e00      	cmp	r6, #0
 801527e:	d075      	beq.n	801536c <_dtoa_r+0x1d4>
 8015280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015282:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015286:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801528a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801528e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015296:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801529a:	4619      	mov	r1, r3
 801529c:	2200      	movs	r2, #0
 801529e:	4b74      	ldr	r3, [pc, #464]	@ (8015470 <_dtoa_r+0x2d8>)
 80152a0:	f7eb f820 	bl	80002e4 <__aeabi_dsub>
 80152a4:	a368      	add	r3, pc, #416	@ (adr r3, 8015448 <_dtoa_r+0x2b0>)
 80152a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152aa:	f7eb f9d3 	bl	8000654 <__aeabi_dmul>
 80152ae:	a368      	add	r3, pc, #416	@ (adr r3, 8015450 <_dtoa_r+0x2b8>)
 80152b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b4:	f7eb f818 	bl	80002e8 <__adddf3>
 80152b8:	4604      	mov	r4, r0
 80152ba:	460d      	mov	r5, r1
 80152bc:	4630      	mov	r0, r6
 80152be:	f7eb f95f 	bl	8000580 <__aeabi_i2d>
 80152c2:	a365      	add	r3, pc, #404	@ (adr r3, 8015458 <_dtoa_r+0x2c0>)
 80152c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c8:	f7eb f9c4 	bl	8000654 <__aeabi_dmul>
 80152cc:	4602      	mov	r2, r0
 80152ce:	460b      	mov	r3, r1
 80152d0:	4620      	mov	r0, r4
 80152d2:	4629      	mov	r1, r5
 80152d4:	f7eb f808 	bl	80002e8 <__adddf3>
 80152d8:	4604      	mov	r4, r0
 80152da:	460d      	mov	r5, r1
 80152dc:	f7eb fc6a 	bl	8000bb4 <__aeabi_d2iz>
 80152e0:	2200      	movs	r2, #0
 80152e2:	4607      	mov	r7, r0
 80152e4:	2300      	movs	r3, #0
 80152e6:	4620      	mov	r0, r4
 80152e8:	4629      	mov	r1, r5
 80152ea:	f7eb fc25 	bl	8000b38 <__aeabi_dcmplt>
 80152ee:	b140      	cbz	r0, 8015302 <_dtoa_r+0x16a>
 80152f0:	4638      	mov	r0, r7
 80152f2:	f7eb f945 	bl	8000580 <__aeabi_i2d>
 80152f6:	4622      	mov	r2, r4
 80152f8:	462b      	mov	r3, r5
 80152fa:	f7eb fc13 	bl	8000b24 <__aeabi_dcmpeq>
 80152fe:	b900      	cbnz	r0, 8015302 <_dtoa_r+0x16a>
 8015300:	3f01      	subs	r7, #1
 8015302:	2f16      	cmp	r7, #22
 8015304:	d851      	bhi.n	80153aa <_dtoa_r+0x212>
 8015306:	4b5b      	ldr	r3, [pc, #364]	@ (8015474 <_dtoa_r+0x2dc>)
 8015308:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801530c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015314:	f7eb fc10 	bl	8000b38 <__aeabi_dcmplt>
 8015318:	2800      	cmp	r0, #0
 801531a:	d048      	beq.n	80153ae <_dtoa_r+0x216>
 801531c:	3f01      	subs	r7, #1
 801531e:	2300      	movs	r3, #0
 8015320:	9312      	str	r3, [sp, #72]	@ 0x48
 8015322:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015324:	1b9b      	subs	r3, r3, r6
 8015326:	1e5a      	subs	r2, r3, #1
 8015328:	bf46      	itte	mi
 801532a:	f1c3 0801 	rsbmi	r8, r3, #1
 801532e:	2300      	movmi	r3, #0
 8015330:	f04f 0800 	movpl.w	r8, #0
 8015334:	9208      	str	r2, [sp, #32]
 8015336:	bf48      	it	mi
 8015338:	9308      	strmi	r3, [sp, #32]
 801533a:	2f00      	cmp	r7, #0
 801533c:	db39      	blt.n	80153b2 <_dtoa_r+0x21a>
 801533e:	9b08      	ldr	r3, [sp, #32]
 8015340:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015342:	443b      	add	r3, r7
 8015344:	9308      	str	r3, [sp, #32]
 8015346:	2300      	movs	r3, #0
 8015348:	930a      	str	r3, [sp, #40]	@ 0x28
 801534a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801534c:	2b09      	cmp	r3, #9
 801534e:	d864      	bhi.n	801541a <_dtoa_r+0x282>
 8015350:	2b05      	cmp	r3, #5
 8015352:	bfc5      	ittet	gt
 8015354:	3b04      	subgt	r3, #4
 8015356:	2400      	movgt	r4, #0
 8015358:	2401      	movle	r4, #1
 801535a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801535c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801535e:	3b02      	subs	r3, #2
 8015360:	2b03      	cmp	r3, #3
 8015362:	d865      	bhi.n	8015430 <_dtoa_r+0x298>
 8015364:	e8df f003 	tbb	[pc, r3]
 8015368:	5737392c 	.word	0x5737392c
 801536c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015370:	441e      	add	r6, r3
 8015372:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015376:	2b20      	cmp	r3, #32
 8015378:	bfc9      	itett	gt
 801537a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801537e:	f1c3 0320 	rsble	r3, r3, #32
 8015382:	409f      	lslgt	r7, r3
 8015384:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015388:	bfd8      	it	le
 801538a:	fa04 f003 	lslle.w	r0, r4, r3
 801538e:	f106 36ff 	add.w	r6, r6, #4294967295
 8015392:	bfc4      	itt	gt
 8015394:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015398:	ea47 0003 	orrgt.w	r0, r7, r3
 801539c:	f7eb f8e0 	bl	8000560 <__aeabi_ui2d>
 80153a0:	2201      	movs	r2, #1
 80153a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80153a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80153a8:	e777      	b.n	801529a <_dtoa_r+0x102>
 80153aa:	2301      	movs	r3, #1
 80153ac:	e7b8      	b.n	8015320 <_dtoa_r+0x188>
 80153ae:	9012      	str	r0, [sp, #72]	@ 0x48
 80153b0:	e7b7      	b.n	8015322 <_dtoa_r+0x18a>
 80153b2:	427b      	negs	r3, r7
 80153b4:	eba8 0807 	sub.w	r8, r8, r7
 80153b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80153ba:	2300      	movs	r3, #0
 80153bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80153be:	e7c4      	b.n	801534a <_dtoa_r+0x1b2>
 80153c0:	2300      	movs	r3, #0
 80153c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80153c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	dc35      	bgt.n	8015436 <_dtoa_r+0x29e>
 80153ca:	2301      	movs	r3, #1
 80153cc:	461a      	mov	r2, r3
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	9307      	str	r3, [sp, #28]
 80153d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80153d4:	e00b      	b.n	80153ee <_dtoa_r+0x256>
 80153d6:	2301      	movs	r3, #1
 80153d8:	e7f3      	b.n	80153c2 <_dtoa_r+0x22a>
 80153da:	2300      	movs	r3, #0
 80153dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80153de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153e0:	18fb      	adds	r3, r7, r3
 80153e2:	9300      	str	r3, [sp, #0]
 80153e4:	3301      	adds	r3, #1
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	9307      	str	r3, [sp, #28]
 80153ea:	bfb8      	it	lt
 80153ec:	2301      	movlt	r3, #1
 80153ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 80153f2:	2100      	movs	r1, #0
 80153f4:	2204      	movs	r2, #4
 80153f6:	f102 0514 	add.w	r5, r2, #20
 80153fa:	429d      	cmp	r5, r3
 80153fc:	d91f      	bls.n	801543e <_dtoa_r+0x2a6>
 80153fe:	6041      	str	r1, [r0, #4]
 8015400:	4658      	mov	r0, fp
 8015402:	f000 fd8d 	bl	8015f20 <_Balloc>
 8015406:	4682      	mov	sl, r0
 8015408:	2800      	cmp	r0, #0
 801540a:	d13b      	bne.n	8015484 <_dtoa_r+0x2ec>
 801540c:	4b1a      	ldr	r3, [pc, #104]	@ (8015478 <_dtoa_r+0x2e0>)
 801540e:	4602      	mov	r2, r0
 8015410:	f240 11af 	movw	r1, #431	@ 0x1af
 8015414:	e6d7      	b.n	80151c6 <_dtoa_r+0x2e>
 8015416:	2301      	movs	r3, #1
 8015418:	e7e0      	b.n	80153dc <_dtoa_r+0x244>
 801541a:	2401      	movs	r4, #1
 801541c:	2300      	movs	r3, #0
 801541e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015420:	9309      	str	r3, [sp, #36]	@ 0x24
 8015422:	f04f 33ff 	mov.w	r3, #4294967295
 8015426:	2200      	movs	r2, #0
 8015428:	9300      	str	r3, [sp, #0]
 801542a:	9307      	str	r3, [sp, #28]
 801542c:	2312      	movs	r3, #18
 801542e:	e7d0      	b.n	80153d2 <_dtoa_r+0x23a>
 8015430:	2301      	movs	r3, #1
 8015432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015434:	e7f5      	b.n	8015422 <_dtoa_r+0x28a>
 8015436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015438:	9300      	str	r3, [sp, #0]
 801543a:	9307      	str	r3, [sp, #28]
 801543c:	e7d7      	b.n	80153ee <_dtoa_r+0x256>
 801543e:	3101      	adds	r1, #1
 8015440:	0052      	lsls	r2, r2, #1
 8015442:	e7d8      	b.n	80153f6 <_dtoa_r+0x25e>
 8015444:	f3af 8000 	nop.w
 8015448:	636f4361 	.word	0x636f4361
 801544c:	3fd287a7 	.word	0x3fd287a7
 8015450:	8b60c8b3 	.word	0x8b60c8b3
 8015454:	3fc68a28 	.word	0x3fc68a28
 8015458:	509f79fb 	.word	0x509f79fb
 801545c:	3fd34413 	.word	0x3fd34413
 8015460:	08017e55 	.word	0x08017e55
 8015464:	08017f0f 	.word	0x08017f0f
 8015468:	7ff00000 	.word	0x7ff00000
 801546c:	08017e32 	.word	0x08017e32
 8015470:	3ff80000 	.word	0x3ff80000
 8015474:	08018008 	.word	0x08018008
 8015478:	08017f67 	.word	0x08017f67
 801547c:	08017f0b 	.word	0x08017f0b
 8015480:	08017e31 	.word	0x08017e31
 8015484:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015488:	6018      	str	r0, [r3, #0]
 801548a:	9b07      	ldr	r3, [sp, #28]
 801548c:	2b0e      	cmp	r3, #14
 801548e:	f200 80a4 	bhi.w	80155da <_dtoa_r+0x442>
 8015492:	2c00      	cmp	r4, #0
 8015494:	f000 80a1 	beq.w	80155da <_dtoa_r+0x442>
 8015498:	2f00      	cmp	r7, #0
 801549a:	dd33      	ble.n	8015504 <_dtoa_r+0x36c>
 801549c:	f007 020f 	and.w	r2, r7, #15
 80154a0:	4bac      	ldr	r3, [pc, #688]	@ (8015754 <_dtoa_r+0x5bc>)
 80154a2:	05f8      	lsls	r0, r7, #23
 80154a4:	ea4f 1427 	mov.w	r4, r7, asr #4
 80154a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154ac:	ed93 7b00 	vldr	d7, [r3]
 80154b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80154b4:	d516      	bpl.n	80154e4 <_dtoa_r+0x34c>
 80154b6:	4ba8      	ldr	r3, [pc, #672]	@ (8015758 <_dtoa_r+0x5c0>)
 80154b8:	f004 040f 	and.w	r4, r4, #15
 80154bc:	2603      	movs	r6, #3
 80154be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80154c6:	f7eb f9ef 	bl	80008a8 <__aeabi_ddiv>
 80154ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154ce:	4da2      	ldr	r5, [pc, #648]	@ (8015758 <_dtoa_r+0x5c0>)
 80154d0:	b954      	cbnz	r4, 80154e8 <_dtoa_r+0x350>
 80154d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154da:	f7eb f9e5 	bl	80008a8 <__aeabi_ddiv>
 80154de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154e2:	e028      	b.n	8015536 <_dtoa_r+0x39e>
 80154e4:	2602      	movs	r6, #2
 80154e6:	e7f2      	b.n	80154ce <_dtoa_r+0x336>
 80154e8:	07e1      	lsls	r1, r4, #31
 80154ea:	d508      	bpl.n	80154fe <_dtoa_r+0x366>
 80154ec:	3601      	adds	r6, #1
 80154ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154f6:	f7eb f8ad 	bl	8000654 <__aeabi_dmul>
 80154fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154fe:	1064      	asrs	r4, r4, #1
 8015500:	3508      	adds	r5, #8
 8015502:	e7e5      	b.n	80154d0 <_dtoa_r+0x338>
 8015504:	f000 80d2 	beq.w	80156ac <_dtoa_r+0x514>
 8015508:	427c      	negs	r4, r7
 801550a:	4b92      	ldr	r3, [pc, #584]	@ (8015754 <_dtoa_r+0x5bc>)
 801550c:	4d92      	ldr	r5, [pc, #584]	@ (8015758 <_dtoa_r+0x5c0>)
 801550e:	2602      	movs	r6, #2
 8015510:	f004 020f 	and.w	r2, r4, #15
 8015514:	1124      	asrs	r4, r4, #4
 8015516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801551a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015522:	f7eb f897 	bl	8000654 <__aeabi_dmul>
 8015526:	2300      	movs	r3, #0
 8015528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801552c:	2c00      	cmp	r4, #0
 801552e:	f040 80b2 	bne.w	8015696 <_dtoa_r+0x4fe>
 8015532:	2b00      	cmp	r3, #0
 8015534:	d1d3      	bne.n	80154de <_dtoa_r+0x346>
 8015536:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801553c:	2b00      	cmp	r3, #0
 801553e:	f000 80b7 	beq.w	80156b0 <_dtoa_r+0x518>
 8015542:	2200      	movs	r2, #0
 8015544:	4b85      	ldr	r3, [pc, #532]	@ (801575c <_dtoa_r+0x5c4>)
 8015546:	4620      	mov	r0, r4
 8015548:	4629      	mov	r1, r5
 801554a:	f7eb faf5 	bl	8000b38 <__aeabi_dcmplt>
 801554e:	2800      	cmp	r0, #0
 8015550:	f000 80ae 	beq.w	80156b0 <_dtoa_r+0x518>
 8015554:	9b07      	ldr	r3, [sp, #28]
 8015556:	2b00      	cmp	r3, #0
 8015558:	f000 80aa 	beq.w	80156b0 <_dtoa_r+0x518>
 801555c:	9b00      	ldr	r3, [sp, #0]
 801555e:	2b00      	cmp	r3, #0
 8015560:	dd37      	ble.n	80155d2 <_dtoa_r+0x43a>
 8015562:	1e7b      	subs	r3, r7, #1
 8015564:	4620      	mov	r0, r4
 8015566:	2200      	movs	r2, #0
 8015568:	4629      	mov	r1, r5
 801556a:	9304      	str	r3, [sp, #16]
 801556c:	3601      	adds	r6, #1
 801556e:	4b7c      	ldr	r3, [pc, #496]	@ (8015760 <_dtoa_r+0x5c8>)
 8015570:	f7eb f870 	bl	8000654 <__aeabi_dmul>
 8015574:	9c00      	ldr	r4, [sp, #0]
 8015576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801557a:	4630      	mov	r0, r6
 801557c:	f7eb f800 	bl	8000580 <__aeabi_i2d>
 8015580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015584:	f7eb f866 	bl	8000654 <__aeabi_dmul>
 8015588:	2200      	movs	r2, #0
 801558a:	4b76      	ldr	r3, [pc, #472]	@ (8015764 <_dtoa_r+0x5cc>)
 801558c:	f7ea feac 	bl	80002e8 <__adddf3>
 8015590:	4605      	mov	r5, r0
 8015592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015596:	2c00      	cmp	r4, #0
 8015598:	f040 808d 	bne.w	80156b6 <_dtoa_r+0x51e>
 801559c:	2200      	movs	r2, #0
 801559e:	4b72      	ldr	r3, [pc, #456]	@ (8015768 <_dtoa_r+0x5d0>)
 80155a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155a4:	f7ea fe9e 	bl	80002e4 <__aeabi_dsub>
 80155a8:	4602      	mov	r2, r0
 80155aa:	460b      	mov	r3, r1
 80155ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80155b0:	462a      	mov	r2, r5
 80155b2:	4633      	mov	r3, r6
 80155b4:	f7eb fade 	bl	8000b74 <__aeabi_dcmpgt>
 80155b8:	2800      	cmp	r0, #0
 80155ba:	f040 828b 	bne.w	8015ad4 <_dtoa_r+0x93c>
 80155be:	462a      	mov	r2, r5
 80155c0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80155c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155c8:	f7eb fab6 	bl	8000b38 <__aeabi_dcmplt>
 80155cc:	2800      	cmp	r0, #0
 80155ce:	f040 8128 	bne.w	8015822 <_dtoa_r+0x68a>
 80155d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80155d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80155da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f2c0 815a 	blt.w	8015896 <_dtoa_r+0x6fe>
 80155e2:	2f0e      	cmp	r7, #14
 80155e4:	f300 8157 	bgt.w	8015896 <_dtoa_r+0x6fe>
 80155e8:	4b5a      	ldr	r3, [pc, #360]	@ (8015754 <_dtoa_r+0x5bc>)
 80155ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80155ee:	ed93 7b00 	vldr	d7, [r3]
 80155f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	ed8d 7b00 	vstr	d7, [sp]
 80155fa:	da03      	bge.n	8015604 <_dtoa_r+0x46c>
 80155fc:	9b07      	ldr	r3, [sp, #28]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	f340 8101 	ble.w	8015806 <_dtoa_r+0x66e>
 8015604:	4656      	mov	r6, sl
 8015606:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801560a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801560e:	4620      	mov	r0, r4
 8015610:	4629      	mov	r1, r5
 8015612:	f7eb f949 	bl	80008a8 <__aeabi_ddiv>
 8015616:	f7eb facd 	bl	8000bb4 <__aeabi_d2iz>
 801561a:	4680      	mov	r8, r0
 801561c:	f7ea ffb0 	bl	8000580 <__aeabi_i2d>
 8015620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015624:	f7eb f816 	bl	8000654 <__aeabi_dmul>
 8015628:	4602      	mov	r2, r0
 801562a:	4620      	mov	r0, r4
 801562c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015630:	460b      	mov	r3, r1
 8015632:	4629      	mov	r1, r5
 8015634:	f7ea fe56 	bl	80002e4 <__aeabi_dsub>
 8015638:	9d07      	ldr	r5, [sp, #28]
 801563a:	f806 4b01 	strb.w	r4, [r6], #1
 801563e:	eba6 040a 	sub.w	r4, r6, sl
 8015642:	4602      	mov	r2, r0
 8015644:	460b      	mov	r3, r1
 8015646:	42a5      	cmp	r5, r4
 8015648:	f040 8117 	bne.w	801587a <_dtoa_r+0x6e2>
 801564c:	f7ea fe4c 	bl	80002e8 <__adddf3>
 8015650:	4604      	mov	r4, r0
 8015652:	460d      	mov	r5, r1
 8015654:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015658:	f7eb fa8c 	bl	8000b74 <__aeabi_dcmpgt>
 801565c:	2800      	cmp	r0, #0
 801565e:	f040 80f9 	bne.w	8015854 <_dtoa_r+0x6bc>
 8015662:	4620      	mov	r0, r4
 8015664:	4629      	mov	r1, r5
 8015666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801566a:	f7eb fa5b 	bl	8000b24 <__aeabi_dcmpeq>
 801566e:	b118      	cbz	r0, 8015678 <_dtoa_r+0x4e0>
 8015670:	f018 0f01 	tst.w	r8, #1
 8015674:	f040 80ee 	bne.w	8015854 <_dtoa_r+0x6bc>
 8015678:	4649      	mov	r1, r9
 801567a:	4658      	mov	r0, fp
 801567c:	f000 fc90 	bl	8015fa0 <_Bfree>
 8015680:	2300      	movs	r3, #0
 8015682:	3701      	adds	r7, #1
 8015684:	7033      	strb	r3, [r6, #0]
 8015686:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015688:	601f      	str	r7, [r3, #0]
 801568a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801568c:	2b00      	cmp	r3, #0
 801568e:	f000 831d 	beq.w	8015ccc <_dtoa_r+0xb34>
 8015692:	601e      	str	r6, [r3, #0]
 8015694:	e31a      	b.n	8015ccc <_dtoa_r+0xb34>
 8015696:	07e2      	lsls	r2, r4, #31
 8015698:	d505      	bpl.n	80156a6 <_dtoa_r+0x50e>
 801569a:	3601      	adds	r6, #1
 801569c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80156a0:	f7ea ffd8 	bl	8000654 <__aeabi_dmul>
 80156a4:	2301      	movs	r3, #1
 80156a6:	1064      	asrs	r4, r4, #1
 80156a8:	3508      	adds	r5, #8
 80156aa:	e73f      	b.n	801552c <_dtoa_r+0x394>
 80156ac:	2602      	movs	r6, #2
 80156ae:	e742      	b.n	8015536 <_dtoa_r+0x39e>
 80156b0:	9c07      	ldr	r4, [sp, #28]
 80156b2:	9704      	str	r7, [sp, #16]
 80156b4:	e761      	b.n	801557a <_dtoa_r+0x3e2>
 80156b6:	4b27      	ldr	r3, [pc, #156]	@ (8015754 <_dtoa_r+0x5bc>)
 80156b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80156ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80156be:	4454      	add	r4, sl
 80156c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80156c4:	2900      	cmp	r1, #0
 80156c6:	d053      	beq.n	8015770 <_dtoa_r+0x5d8>
 80156c8:	2000      	movs	r0, #0
 80156ca:	4928      	ldr	r1, [pc, #160]	@ (801576c <_dtoa_r+0x5d4>)
 80156cc:	f7eb f8ec 	bl	80008a8 <__aeabi_ddiv>
 80156d0:	4633      	mov	r3, r6
 80156d2:	4656      	mov	r6, sl
 80156d4:	462a      	mov	r2, r5
 80156d6:	f7ea fe05 	bl	80002e4 <__aeabi_dsub>
 80156da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80156de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156e2:	f7eb fa67 	bl	8000bb4 <__aeabi_d2iz>
 80156e6:	4605      	mov	r5, r0
 80156e8:	f7ea ff4a 	bl	8000580 <__aeabi_i2d>
 80156ec:	4602      	mov	r2, r0
 80156ee:	460b      	mov	r3, r1
 80156f0:	3530      	adds	r5, #48	@ 0x30
 80156f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156f6:	f7ea fdf5 	bl	80002e4 <__aeabi_dsub>
 80156fa:	4602      	mov	r2, r0
 80156fc:	460b      	mov	r3, r1
 80156fe:	f806 5b01 	strb.w	r5, [r6], #1
 8015702:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801570a:	f7eb fa15 	bl	8000b38 <__aeabi_dcmplt>
 801570e:	2800      	cmp	r0, #0
 8015710:	d171      	bne.n	80157f6 <_dtoa_r+0x65e>
 8015712:	2000      	movs	r0, #0
 8015714:	4911      	ldr	r1, [pc, #68]	@ (801575c <_dtoa_r+0x5c4>)
 8015716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801571a:	f7ea fde3 	bl	80002e4 <__aeabi_dsub>
 801571e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015722:	f7eb fa09 	bl	8000b38 <__aeabi_dcmplt>
 8015726:	2800      	cmp	r0, #0
 8015728:	f040 8095 	bne.w	8015856 <_dtoa_r+0x6be>
 801572c:	42a6      	cmp	r6, r4
 801572e:	f43f af50 	beq.w	80155d2 <_dtoa_r+0x43a>
 8015732:	2200      	movs	r2, #0
 8015734:	4b0a      	ldr	r3, [pc, #40]	@ (8015760 <_dtoa_r+0x5c8>)
 8015736:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801573a:	f7ea ff8b 	bl	8000654 <__aeabi_dmul>
 801573e:	2200      	movs	r2, #0
 8015740:	4b07      	ldr	r3, [pc, #28]	@ (8015760 <_dtoa_r+0x5c8>)
 8015742:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801574a:	f7ea ff83 	bl	8000654 <__aeabi_dmul>
 801574e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015752:	e7c4      	b.n	80156de <_dtoa_r+0x546>
 8015754:	08018008 	.word	0x08018008
 8015758:	08017fe0 	.word	0x08017fe0
 801575c:	3ff00000 	.word	0x3ff00000
 8015760:	40240000 	.word	0x40240000
 8015764:	401c0000 	.word	0x401c0000
 8015768:	40140000 	.word	0x40140000
 801576c:	3fe00000 	.word	0x3fe00000
 8015770:	4631      	mov	r1, r6
 8015772:	4656      	mov	r6, sl
 8015774:	4628      	mov	r0, r5
 8015776:	f7ea ff6d 	bl	8000654 <__aeabi_dmul>
 801577a:	9415      	str	r4, [sp, #84]	@ 0x54
 801577c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015784:	f7eb fa16 	bl	8000bb4 <__aeabi_d2iz>
 8015788:	4605      	mov	r5, r0
 801578a:	f7ea fef9 	bl	8000580 <__aeabi_i2d>
 801578e:	4602      	mov	r2, r0
 8015790:	3530      	adds	r5, #48	@ 0x30
 8015792:	460b      	mov	r3, r1
 8015794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015798:	f7ea fda4 	bl	80002e4 <__aeabi_dsub>
 801579c:	f806 5b01 	strb.w	r5, [r6], #1
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	42a6      	cmp	r6, r4
 80157a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80157aa:	f04f 0200 	mov.w	r2, #0
 80157ae:	d124      	bne.n	80157fa <_dtoa_r+0x662>
 80157b0:	4bac      	ldr	r3, [pc, #688]	@ (8015a64 <_dtoa_r+0x8cc>)
 80157b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80157b6:	f7ea fd97 	bl	80002e8 <__adddf3>
 80157ba:	4602      	mov	r2, r0
 80157bc:	460b      	mov	r3, r1
 80157be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157c2:	f7eb f9d7 	bl	8000b74 <__aeabi_dcmpgt>
 80157c6:	2800      	cmp	r0, #0
 80157c8:	d145      	bne.n	8015856 <_dtoa_r+0x6be>
 80157ca:	2000      	movs	r0, #0
 80157cc:	49a5      	ldr	r1, [pc, #660]	@ (8015a64 <_dtoa_r+0x8cc>)
 80157ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80157d2:	f7ea fd87 	bl	80002e4 <__aeabi_dsub>
 80157d6:	4602      	mov	r2, r0
 80157d8:	460b      	mov	r3, r1
 80157da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157de:	f7eb f9ab 	bl	8000b38 <__aeabi_dcmplt>
 80157e2:	2800      	cmp	r0, #0
 80157e4:	f43f aef5 	beq.w	80155d2 <_dtoa_r+0x43a>
 80157e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80157ea:	1e73      	subs	r3, r6, #1
 80157ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80157ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80157f2:	2b30      	cmp	r3, #48	@ 0x30
 80157f4:	d0f8      	beq.n	80157e8 <_dtoa_r+0x650>
 80157f6:	9f04      	ldr	r7, [sp, #16]
 80157f8:	e73e      	b.n	8015678 <_dtoa_r+0x4e0>
 80157fa:	4b9b      	ldr	r3, [pc, #620]	@ (8015a68 <_dtoa_r+0x8d0>)
 80157fc:	f7ea ff2a 	bl	8000654 <__aeabi_dmul>
 8015800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015804:	e7bc      	b.n	8015780 <_dtoa_r+0x5e8>
 8015806:	d10c      	bne.n	8015822 <_dtoa_r+0x68a>
 8015808:	2200      	movs	r2, #0
 801580a:	4b98      	ldr	r3, [pc, #608]	@ (8015a6c <_dtoa_r+0x8d4>)
 801580c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015810:	f7ea ff20 	bl	8000654 <__aeabi_dmul>
 8015814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015818:	f7eb f9a2 	bl	8000b60 <__aeabi_dcmpge>
 801581c:	2800      	cmp	r0, #0
 801581e:	f000 8157 	beq.w	8015ad0 <_dtoa_r+0x938>
 8015822:	2400      	movs	r4, #0
 8015824:	4625      	mov	r5, r4
 8015826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015828:	4656      	mov	r6, sl
 801582a:	43db      	mvns	r3, r3
 801582c:	9304      	str	r3, [sp, #16]
 801582e:	2700      	movs	r7, #0
 8015830:	4621      	mov	r1, r4
 8015832:	4658      	mov	r0, fp
 8015834:	f000 fbb4 	bl	8015fa0 <_Bfree>
 8015838:	2d00      	cmp	r5, #0
 801583a:	d0dc      	beq.n	80157f6 <_dtoa_r+0x65e>
 801583c:	b12f      	cbz	r7, 801584a <_dtoa_r+0x6b2>
 801583e:	42af      	cmp	r7, r5
 8015840:	d003      	beq.n	801584a <_dtoa_r+0x6b2>
 8015842:	4639      	mov	r1, r7
 8015844:	4658      	mov	r0, fp
 8015846:	f000 fbab 	bl	8015fa0 <_Bfree>
 801584a:	4629      	mov	r1, r5
 801584c:	4658      	mov	r0, fp
 801584e:	f000 fba7 	bl	8015fa0 <_Bfree>
 8015852:	e7d0      	b.n	80157f6 <_dtoa_r+0x65e>
 8015854:	9704      	str	r7, [sp, #16]
 8015856:	4633      	mov	r3, r6
 8015858:	461e      	mov	r6, r3
 801585a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801585e:	2a39      	cmp	r2, #57	@ 0x39
 8015860:	d107      	bne.n	8015872 <_dtoa_r+0x6da>
 8015862:	459a      	cmp	sl, r3
 8015864:	d1f8      	bne.n	8015858 <_dtoa_r+0x6c0>
 8015866:	9a04      	ldr	r2, [sp, #16]
 8015868:	3201      	adds	r2, #1
 801586a:	9204      	str	r2, [sp, #16]
 801586c:	2230      	movs	r2, #48	@ 0x30
 801586e:	f88a 2000 	strb.w	r2, [sl]
 8015872:	781a      	ldrb	r2, [r3, #0]
 8015874:	3201      	adds	r2, #1
 8015876:	701a      	strb	r2, [r3, #0]
 8015878:	e7bd      	b.n	80157f6 <_dtoa_r+0x65e>
 801587a:	2200      	movs	r2, #0
 801587c:	4b7a      	ldr	r3, [pc, #488]	@ (8015a68 <_dtoa_r+0x8d0>)
 801587e:	f7ea fee9 	bl	8000654 <__aeabi_dmul>
 8015882:	2200      	movs	r2, #0
 8015884:	2300      	movs	r3, #0
 8015886:	4604      	mov	r4, r0
 8015888:	460d      	mov	r5, r1
 801588a:	f7eb f94b 	bl	8000b24 <__aeabi_dcmpeq>
 801588e:	2800      	cmp	r0, #0
 8015890:	f43f aebb 	beq.w	801560a <_dtoa_r+0x472>
 8015894:	e6f0      	b.n	8015678 <_dtoa_r+0x4e0>
 8015896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015898:	2a00      	cmp	r2, #0
 801589a:	f000 80db 	beq.w	8015a54 <_dtoa_r+0x8bc>
 801589e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158a0:	2a01      	cmp	r2, #1
 80158a2:	f300 80bf 	bgt.w	8015a24 <_dtoa_r+0x88c>
 80158a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80158a8:	2a00      	cmp	r2, #0
 80158aa:	f000 80b7 	beq.w	8015a1c <_dtoa_r+0x884>
 80158ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80158b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80158b4:	4646      	mov	r6, r8
 80158b6:	9a08      	ldr	r2, [sp, #32]
 80158b8:	2101      	movs	r1, #1
 80158ba:	4658      	mov	r0, fp
 80158bc:	4498      	add	r8, r3
 80158be:	441a      	add	r2, r3
 80158c0:	9208      	str	r2, [sp, #32]
 80158c2:	f000 fc23 	bl	801610c <__i2b>
 80158c6:	4605      	mov	r5, r0
 80158c8:	b15e      	cbz	r6, 80158e2 <_dtoa_r+0x74a>
 80158ca:	9b08      	ldr	r3, [sp, #32]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	dd08      	ble.n	80158e2 <_dtoa_r+0x74a>
 80158d0:	42b3      	cmp	r3, r6
 80158d2:	9a08      	ldr	r2, [sp, #32]
 80158d4:	bfa8      	it	ge
 80158d6:	4633      	movge	r3, r6
 80158d8:	eba8 0803 	sub.w	r8, r8, r3
 80158dc:	1af6      	subs	r6, r6, r3
 80158de:	1ad3      	subs	r3, r2, r3
 80158e0:	9308      	str	r3, [sp, #32]
 80158e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80158e4:	b1f3      	cbz	r3, 8015924 <_dtoa_r+0x78c>
 80158e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f000 80b7 	beq.w	8015a5c <_dtoa_r+0x8c4>
 80158ee:	b18c      	cbz	r4, 8015914 <_dtoa_r+0x77c>
 80158f0:	4629      	mov	r1, r5
 80158f2:	4622      	mov	r2, r4
 80158f4:	4658      	mov	r0, fp
 80158f6:	f000 fcc9 	bl	801628c <__pow5mult>
 80158fa:	464a      	mov	r2, r9
 80158fc:	4601      	mov	r1, r0
 80158fe:	4605      	mov	r5, r0
 8015900:	4658      	mov	r0, fp
 8015902:	f000 fc19 	bl	8016138 <__multiply>
 8015906:	4649      	mov	r1, r9
 8015908:	9004      	str	r0, [sp, #16]
 801590a:	4658      	mov	r0, fp
 801590c:	f000 fb48 	bl	8015fa0 <_Bfree>
 8015910:	9b04      	ldr	r3, [sp, #16]
 8015912:	4699      	mov	r9, r3
 8015914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015916:	1b1a      	subs	r2, r3, r4
 8015918:	d004      	beq.n	8015924 <_dtoa_r+0x78c>
 801591a:	4649      	mov	r1, r9
 801591c:	4658      	mov	r0, fp
 801591e:	f000 fcb5 	bl	801628c <__pow5mult>
 8015922:	4681      	mov	r9, r0
 8015924:	2101      	movs	r1, #1
 8015926:	4658      	mov	r0, fp
 8015928:	f000 fbf0 	bl	801610c <__i2b>
 801592c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801592e:	4604      	mov	r4, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	f000 81cf 	beq.w	8015cd4 <_dtoa_r+0xb3c>
 8015936:	461a      	mov	r2, r3
 8015938:	4601      	mov	r1, r0
 801593a:	4658      	mov	r0, fp
 801593c:	f000 fca6 	bl	801628c <__pow5mult>
 8015940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015942:	4604      	mov	r4, r0
 8015944:	2b01      	cmp	r3, #1
 8015946:	f300 8095 	bgt.w	8015a74 <_dtoa_r+0x8dc>
 801594a:	9b02      	ldr	r3, [sp, #8]
 801594c:	2b00      	cmp	r3, #0
 801594e:	f040 8087 	bne.w	8015a60 <_dtoa_r+0x8c8>
 8015952:	9b03      	ldr	r3, [sp, #12]
 8015954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015958:	2b00      	cmp	r3, #0
 801595a:	f040 8089 	bne.w	8015a70 <_dtoa_r+0x8d8>
 801595e:	9b03      	ldr	r3, [sp, #12]
 8015960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015964:	0d1b      	lsrs	r3, r3, #20
 8015966:	051b      	lsls	r3, r3, #20
 8015968:	b12b      	cbz	r3, 8015976 <_dtoa_r+0x7de>
 801596a:	9b08      	ldr	r3, [sp, #32]
 801596c:	f108 0801 	add.w	r8, r8, #1
 8015970:	3301      	adds	r3, #1
 8015972:	9308      	str	r3, [sp, #32]
 8015974:	2301      	movs	r3, #1
 8015976:	930a      	str	r3, [sp, #40]	@ 0x28
 8015978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801597a:	2b00      	cmp	r3, #0
 801597c:	f000 81b0 	beq.w	8015ce0 <_dtoa_r+0xb48>
 8015980:	6923      	ldr	r3, [r4, #16]
 8015982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015986:	6918      	ldr	r0, [r3, #16]
 8015988:	f000 fb74 	bl	8016074 <__hi0bits>
 801598c:	f1c0 0020 	rsb	r0, r0, #32
 8015990:	9b08      	ldr	r3, [sp, #32]
 8015992:	4418      	add	r0, r3
 8015994:	f010 001f 	ands.w	r0, r0, #31
 8015998:	d077      	beq.n	8015a8a <_dtoa_r+0x8f2>
 801599a:	f1c0 0320 	rsb	r3, r0, #32
 801599e:	2b04      	cmp	r3, #4
 80159a0:	dd6b      	ble.n	8015a7a <_dtoa_r+0x8e2>
 80159a2:	f1c0 001c 	rsb	r0, r0, #28
 80159a6:	9b08      	ldr	r3, [sp, #32]
 80159a8:	4480      	add	r8, r0
 80159aa:	4403      	add	r3, r0
 80159ac:	4406      	add	r6, r0
 80159ae:	9308      	str	r3, [sp, #32]
 80159b0:	f1b8 0f00 	cmp.w	r8, #0
 80159b4:	dd05      	ble.n	80159c2 <_dtoa_r+0x82a>
 80159b6:	4649      	mov	r1, r9
 80159b8:	4642      	mov	r2, r8
 80159ba:	4658      	mov	r0, fp
 80159bc:	f000 fcc0 	bl	8016340 <__lshift>
 80159c0:	4681      	mov	r9, r0
 80159c2:	9b08      	ldr	r3, [sp, #32]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	dd05      	ble.n	80159d4 <_dtoa_r+0x83c>
 80159c8:	4621      	mov	r1, r4
 80159ca:	461a      	mov	r2, r3
 80159cc:	4658      	mov	r0, fp
 80159ce:	f000 fcb7 	bl	8016340 <__lshift>
 80159d2:	4604      	mov	r4, r0
 80159d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d059      	beq.n	8015a8e <_dtoa_r+0x8f6>
 80159da:	4621      	mov	r1, r4
 80159dc:	4648      	mov	r0, r9
 80159de:	f000 fd1b 	bl	8016418 <__mcmp>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	da53      	bge.n	8015a8e <_dtoa_r+0x8f6>
 80159e6:	1e7b      	subs	r3, r7, #1
 80159e8:	4649      	mov	r1, r9
 80159ea:	220a      	movs	r2, #10
 80159ec:	4658      	mov	r0, fp
 80159ee:	9304      	str	r3, [sp, #16]
 80159f0:	2300      	movs	r3, #0
 80159f2:	f000 faf7 	bl	8015fe4 <__multadd>
 80159f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80159f8:	4681      	mov	r9, r0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	f000 8172 	beq.w	8015ce4 <_dtoa_r+0xb4c>
 8015a00:	2300      	movs	r3, #0
 8015a02:	4629      	mov	r1, r5
 8015a04:	220a      	movs	r2, #10
 8015a06:	4658      	mov	r0, fp
 8015a08:	f000 faec 	bl	8015fe4 <__multadd>
 8015a0c:	9b00      	ldr	r3, [sp, #0]
 8015a0e:	4605      	mov	r5, r0
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	dc67      	bgt.n	8015ae4 <_dtoa_r+0x94c>
 8015a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a16:	2b02      	cmp	r3, #2
 8015a18:	dc41      	bgt.n	8015a9e <_dtoa_r+0x906>
 8015a1a:	e063      	b.n	8015ae4 <_dtoa_r+0x94c>
 8015a1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015a1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015a22:	e746      	b.n	80158b2 <_dtoa_r+0x71a>
 8015a24:	9b07      	ldr	r3, [sp, #28]
 8015a26:	1e5c      	subs	r4, r3, #1
 8015a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a2a:	42a3      	cmp	r3, r4
 8015a2c:	bfb7      	itett	lt
 8015a2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015a30:	1b1c      	subge	r4, r3, r4
 8015a32:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015a34:	1ae3      	sublt	r3, r4, r3
 8015a36:	bfbe      	ittt	lt
 8015a38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015a3a:	2400      	movlt	r4, #0
 8015a3c:	18d2      	addlt	r2, r2, r3
 8015a3e:	9b07      	ldr	r3, [sp, #28]
 8015a40:	bfb8      	it	lt
 8015a42:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	bfb5      	itete	lt
 8015a48:	eba8 0603 	sublt.w	r6, r8, r3
 8015a4c:	4646      	movge	r6, r8
 8015a4e:	2300      	movlt	r3, #0
 8015a50:	9b07      	ldrge	r3, [sp, #28]
 8015a52:	e730      	b.n	80158b6 <_dtoa_r+0x71e>
 8015a54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015a56:	4646      	mov	r6, r8
 8015a58:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015a5a:	e735      	b.n	80158c8 <_dtoa_r+0x730>
 8015a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a5e:	e75c      	b.n	801591a <_dtoa_r+0x782>
 8015a60:	2300      	movs	r3, #0
 8015a62:	e788      	b.n	8015976 <_dtoa_r+0x7de>
 8015a64:	3fe00000 	.word	0x3fe00000
 8015a68:	40240000 	.word	0x40240000
 8015a6c:	40140000 	.word	0x40140000
 8015a70:	9b02      	ldr	r3, [sp, #8]
 8015a72:	e780      	b.n	8015976 <_dtoa_r+0x7de>
 8015a74:	2300      	movs	r3, #0
 8015a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a78:	e782      	b.n	8015980 <_dtoa_r+0x7e8>
 8015a7a:	d099      	beq.n	80159b0 <_dtoa_r+0x818>
 8015a7c:	331c      	adds	r3, #28
 8015a7e:	9a08      	ldr	r2, [sp, #32]
 8015a80:	441a      	add	r2, r3
 8015a82:	4498      	add	r8, r3
 8015a84:	441e      	add	r6, r3
 8015a86:	9208      	str	r2, [sp, #32]
 8015a88:	e792      	b.n	80159b0 <_dtoa_r+0x818>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	e7f6      	b.n	8015a7c <_dtoa_r+0x8e4>
 8015a8e:	9b07      	ldr	r3, [sp, #28]
 8015a90:	9704      	str	r7, [sp, #16]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	dc20      	bgt.n	8015ad8 <_dtoa_r+0x940>
 8015a96:	9300      	str	r3, [sp, #0]
 8015a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a9a:	2b02      	cmp	r3, #2
 8015a9c:	dd1e      	ble.n	8015adc <_dtoa_r+0x944>
 8015a9e:	9b00      	ldr	r3, [sp, #0]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f47f aec0 	bne.w	8015826 <_dtoa_r+0x68e>
 8015aa6:	4621      	mov	r1, r4
 8015aa8:	2205      	movs	r2, #5
 8015aaa:	4658      	mov	r0, fp
 8015aac:	f000 fa9a 	bl	8015fe4 <__multadd>
 8015ab0:	4601      	mov	r1, r0
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	4648      	mov	r0, r9
 8015ab6:	f000 fcaf 	bl	8016418 <__mcmp>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f77f aeb3 	ble.w	8015826 <_dtoa_r+0x68e>
 8015ac0:	2331      	movs	r3, #49	@ 0x31
 8015ac2:	4656      	mov	r6, sl
 8015ac4:	f806 3b01 	strb.w	r3, [r6], #1
 8015ac8:	9b04      	ldr	r3, [sp, #16]
 8015aca:	3301      	adds	r3, #1
 8015acc:	9304      	str	r3, [sp, #16]
 8015ace:	e6ae      	b.n	801582e <_dtoa_r+0x696>
 8015ad0:	9c07      	ldr	r4, [sp, #28]
 8015ad2:	9704      	str	r7, [sp, #16]
 8015ad4:	4625      	mov	r5, r4
 8015ad6:	e7f3      	b.n	8015ac0 <_dtoa_r+0x928>
 8015ad8:	9b07      	ldr	r3, [sp, #28]
 8015ada:	9300      	str	r3, [sp, #0]
 8015adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f000 8104 	beq.w	8015cec <_dtoa_r+0xb54>
 8015ae4:	2e00      	cmp	r6, #0
 8015ae6:	dd05      	ble.n	8015af4 <_dtoa_r+0x95c>
 8015ae8:	4629      	mov	r1, r5
 8015aea:	4632      	mov	r2, r6
 8015aec:	4658      	mov	r0, fp
 8015aee:	f000 fc27 	bl	8016340 <__lshift>
 8015af2:	4605      	mov	r5, r0
 8015af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d05a      	beq.n	8015bb0 <_dtoa_r+0xa18>
 8015afa:	6869      	ldr	r1, [r5, #4]
 8015afc:	4658      	mov	r0, fp
 8015afe:	f000 fa0f 	bl	8015f20 <_Balloc>
 8015b02:	4606      	mov	r6, r0
 8015b04:	b928      	cbnz	r0, 8015b12 <_dtoa_r+0x97a>
 8015b06:	4b84      	ldr	r3, [pc, #528]	@ (8015d18 <_dtoa_r+0xb80>)
 8015b08:	4602      	mov	r2, r0
 8015b0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015b0e:	f7ff bb5a 	b.w	80151c6 <_dtoa_r+0x2e>
 8015b12:	692a      	ldr	r2, [r5, #16]
 8015b14:	f105 010c 	add.w	r1, r5, #12
 8015b18:	300c      	adds	r0, #12
 8015b1a:	3202      	adds	r2, #2
 8015b1c:	0092      	lsls	r2, r2, #2
 8015b1e:	f7ff fa82 	bl	8015026 <memcpy>
 8015b22:	2201      	movs	r2, #1
 8015b24:	4631      	mov	r1, r6
 8015b26:	4658      	mov	r0, fp
 8015b28:	f000 fc0a 	bl	8016340 <__lshift>
 8015b2c:	f10a 0301 	add.w	r3, sl, #1
 8015b30:	462f      	mov	r7, r5
 8015b32:	4605      	mov	r5, r0
 8015b34:	9307      	str	r3, [sp, #28]
 8015b36:	9b00      	ldr	r3, [sp, #0]
 8015b38:	4453      	add	r3, sl
 8015b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015b3c:	9b02      	ldr	r3, [sp, #8]
 8015b3e:	f003 0301 	and.w	r3, r3, #1
 8015b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b44:	9b07      	ldr	r3, [sp, #28]
 8015b46:	4621      	mov	r1, r4
 8015b48:	4648      	mov	r0, r9
 8015b4a:	3b01      	subs	r3, #1
 8015b4c:	9300      	str	r3, [sp, #0]
 8015b4e:	f7ff fa95 	bl	801507c <quorem>
 8015b52:	4639      	mov	r1, r7
 8015b54:	9002      	str	r0, [sp, #8]
 8015b56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015b5a:	4648      	mov	r0, r9
 8015b5c:	f000 fc5c 	bl	8016418 <__mcmp>
 8015b60:	462a      	mov	r2, r5
 8015b62:	9008      	str	r0, [sp, #32]
 8015b64:	4621      	mov	r1, r4
 8015b66:	4658      	mov	r0, fp
 8015b68:	f000 fc72 	bl	8016450 <__mdiff>
 8015b6c:	68c2      	ldr	r2, [r0, #12]
 8015b6e:	4606      	mov	r6, r0
 8015b70:	bb02      	cbnz	r2, 8015bb4 <_dtoa_r+0xa1c>
 8015b72:	4601      	mov	r1, r0
 8015b74:	4648      	mov	r0, r9
 8015b76:	f000 fc4f 	bl	8016418 <__mcmp>
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	4631      	mov	r1, r6
 8015b7e:	4658      	mov	r0, fp
 8015b80:	920e      	str	r2, [sp, #56]	@ 0x38
 8015b82:	f000 fa0d 	bl	8015fa0 <_Bfree>
 8015b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015b8a:	9e07      	ldr	r6, [sp, #28]
 8015b8c:	ea43 0102 	orr.w	r1, r3, r2
 8015b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b92:	4319      	orrs	r1, r3
 8015b94:	d110      	bne.n	8015bb8 <_dtoa_r+0xa20>
 8015b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015b9a:	d029      	beq.n	8015bf0 <_dtoa_r+0xa58>
 8015b9c:	9b08      	ldr	r3, [sp, #32]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	dd02      	ble.n	8015ba8 <_dtoa_r+0xa10>
 8015ba2:	9b02      	ldr	r3, [sp, #8]
 8015ba4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015ba8:	9b00      	ldr	r3, [sp, #0]
 8015baa:	f883 8000 	strb.w	r8, [r3]
 8015bae:	e63f      	b.n	8015830 <_dtoa_r+0x698>
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	e7bb      	b.n	8015b2c <_dtoa_r+0x994>
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	e7e1      	b.n	8015b7c <_dtoa_r+0x9e4>
 8015bb8:	9b08      	ldr	r3, [sp, #32]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	db04      	blt.n	8015bc8 <_dtoa_r+0xa30>
 8015bbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015bc0:	430b      	orrs	r3, r1
 8015bc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015bc4:	430b      	orrs	r3, r1
 8015bc6:	d120      	bne.n	8015c0a <_dtoa_r+0xa72>
 8015bc8:	2a00      	cmp	r2, #0
 8015bca:	dded      	ble.n	8015ba8 <_dtoa_r+0xa10>
 8015bcc:	4649      	mov	r1, r9
 8015bce:	2201      	movs	r2, #1
 8015bd0:	4658      	mov	r0, fp
 8015bd2:	f000 fbb5 	bl	8016340 <__lshift>
 8015bd6:	4621      	mov	r1, r4
 8015bd8:	4681      	mov	r9, r0
 8015bda:	f000 fc1d 	bl	8016418 <__mcmp>
 8015bde:	2800      	cmp	r0, #0
 8015be0:	dc03      	bgt.n	8015bea <_dtoa_r+0xa52>
 8015be2:	d1e1      	bne.n	8015ba8 <_dtoa_r+0xa10>
 8015be4:	f018 0f01 	tst.w	r8, #1
 8015be8:	d0de      	beq.n	8015ba8 <_dtoa_r+0xa10>
 8015bea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015bee:	d1d8      	bne.n	8015ba2 <_dtoa_r+0xa0a>
 8015bf0:	2339      	movs	r3, #57	@ 0x39
 8015bf2:	9a00      	ldr	r2, [sp, #0]
 8015bf4:	7013      	strb	r3, [r2, #0]
 8015bf6:	4633      	mov	r3, r6
 8015bf8:	461e      	mov	r6, r3
 8015bfa:	3b01      	subs	r3, #1
 8015bfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015c00:	2a39      	cmp	r2, #57	@ 0x39
 8015c02:	d052      	beq.n	8015caa <_dtoa_r+0xb12>
 8015c04:	3201      	adds	r2, #1
 8015c06:	701a      	strb	r2, [r3, #0]
 8015c08:	e612      	b.n	8015830 <_dtoa_r+0x698>
 8015c0a:	2a00      	cmp	r2, #0
 8015c0c:	dd07      	ble.n	8015c1e <_dtoa_r+0xa86>
 8015c0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015c12:	d0ed      	beq.n	8015bf0 <_dtoa_r+0xa58>
 8015c14:	f108 0301 	add.w	r3, r8, #1
 8015c18:	9a00      	ldr	r2, [sp, #0]
 8015c1a:	7013      	strb	r3, [r2, #0]
 8015c1c:	e608      	b.n	8015830 <_dtoa_r+0x698>
 8015c1e:	9b07      	ldr	r3, [sp, #28]
 8015c20:	9a07      	ldr	r2, [sp, #28]
 8015c22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	d028      	beq.n	8015c7e <_dtoa_r+0xae6>
 8015c2c:	4649      	mov	r1, r9
 8015c2e:	2300      	movs	r3, #0
 8015c30:	220a      	movs	r2, #10
 8015c32:	4658      	mov	r0, fp
 8015c34:	f000 f9d6 	bl	8015fe4 <__multadd>
 8015c38:	42af      	cmp	r7, r5
 8015c3a:	4681      	mov	r9, r0
 8015c3c:	f04f 0300 	mov.w	r3, #0
 8015c40:	f04f 020a 	mov.w	r2, #10
 8015c44:	4639      	mov	r1, r7
 8015c46:	4658      	mov	r0, fp
 8015c48:	d107      	bne.n	8015c5a <_dtoa_r+0xac2>
 8015c4a:	f000 f9cb 	bl	8015fe4 <__multadd>
 8015c4e:	4607      	mov	r7, r0
 8015c50:	4605      	mov	r5, r0
 8015c52:	9b07      	ldr	r3, [sp, #28]
 8015c54:	3301      	adds	r3, #1
 8015c56:	9307      	str	r3, [sp, #28]
 8015c58:	e774      	b.n	8015b44 <_dtoa_r+0x9ac>
 8015c5a:	f000 f9c3 	bl	8015fe4 <__multadd>
 8015c5e:	4629      	mov	r1, r5
 8015c60:	4607      	mov	r7, r0
 8015c62:	2300      	movs	r3, #0
 8015c64:	220a      	movs	r2, #10
 8015c66:	4658      	mov	r0, fp
 8015c68:	f000 f9bc 	bl	8015fe4 <__multadd>
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	e7f0      	b.n	8015c52 <_dtoa_r+0xaba>
 8015c70:	9b00      	ldr	r3, [sp, #0]
 8015c72:	2700      	movs	r7, #0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	bfcc      	ite	gt
 8015c78:	461e      	movgt	r6, r3
 8015c7a:	2601      	movle	r6, #1
 8015c7c:	4456      	add	r6, sl
 8015c7e:	4649      	mov	r1, r9
 8015c80:	2201      	movs	r2, #1
 8015c82:	4658      	mov	r0, fp
 8015c84:	f000 fb5c 	bl	8016340 <__lshift>
 8015c88:	4621      	mov	r1, r4
 8015c8a:	4681      	mov	r9, r0
 8015c8c:	f000 fbc4 	bl	8016418 <__mcmp>
 8015c90:	2800      	cmp	r0, #0
 8015c92:	dcb0      	bgt.n	8015bf6 <_dtoa_r+0xa5e>
 8015c94:	d102      	bne.n	8015c9c <_dtoa_r+0xb04>
 8015c96:	f018 0f01 	tst.w	r8, #1
 8015c9a:	d1ac      	bne.n	8015bf6 <_dtoa_r+0xa5e>
 8015c9c:	4633      	mov	r3, r6
 8015c9e:	461e      	mov	r6, r3
 8015ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ca4:	2a30      	cmp	r2, #48	@ 0x30
 8015ca6:	d0fa      	beq.n	8015c9e <_dtoa_r+0xb06>
 8015ca8:	e5c2      	b.n	8015830 <_dtoa_r+0x698>
 8015caa:	459a      	cmp	sl, r3
 8015cac:	d1a4      	bne.n	8015bf8 <_dtoa_r+0xa60>
 8015cae:	9b04      	ldr	r3, [sp, #16]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	9304      	str	r3, [sp, #16]
 8015cb4:	2331      	movs	r3, #49	@ 0x31
 8015cb6:	f88a 3000 	strb.w	r3, [sl]
 8015cba:	e5b9      	b.n	8015830 <_dtoa_r+0x698>
 8015cbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015cbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015d1c <_dtoa_r+0xb84>
 8015cc2:	b11b      	cbz	r3, 8015ccc <_dtoa_r+0xb34>
 8015cc4:	f10a 0308 	add.w	r3, sl, #8
 8015cc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015cca:	6013      	str	r3, [r2, #0]
 8015ccc:	4650      	mov	r0, sl
 8015cce:	b019      	add	sp, #100	@ 0x64
 8015cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	f77f ae37 	ble.w	801594a <_dtoa_r+0x7b2>
 8015cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ce0:	2001      	movs	r0, #1
 8015ce2:	e655      	b.n	8015990 <_dtoa_r+0x7f8>
 8015ce4:	9b00      	ldr	r3, [sp, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	f77f aed6 	ble.w	8015a98 <_dtoa_r+0x900>
 8015cec:	4656      	mov	r6, sl
 8015cee:	4621      	mov	r1, r4
 8015cf0:	4648      	mov	r0, r9
 8015cf2:	f7ff f9c3 	bl	801507c <quorem>
 8015cf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015cfa:	9b00      	ldr	r3, [sp, #0]
 8015cfc:	f806 8b01 	strb.w	r8, [r6], #1
 8015d00:	eba6 020a 	sub.w	r2, r6, sl
 8015d04:	4293      	cmp	r3, r2
 8015d06:	ddb3      	ble.n	8015c70 <_dtoa_r+0xad8>
 8015d08:	4649      	mov	r1, r9
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	220a      	movs	r2, #10
 8015d0e:	4658      	mov	r0, fp
 8015d10:	f000 f968 	bl	8015fe4 <__multadd>
 8015d14:	4681      	mov	r9, r0
 8015d16:	e7ea      	b.n	8015cee <_dtoa_r+0xb56>
 8015d18:	08017f67 	.word	0x08017f67
 8015d1c:	08017f02 	.word	0x08017f02

08015d20 <_free_r>:
 8015d20:	b538      	push	{r3, r4, r5, lr}
 8015d22:	4605      	mov	r5, r0
 8015d24:	2900      	cmp	r1, #0
 8015d26:	d041      	beq.n	8015dac <_free_r+0x8c>
 8015d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d2c:	1f0c      	subs	r4, r1, #4
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	bfb8      	it	lt
 8015d32:	18e4      	addlt	r4, r4, r3
 8015d34:	f000 f8e8 	bl	8015f08 <__malloc_lock>
 8015d38:	4a1d      	ldr	r2, [pc, #116]	@ (8015db0 <_free_r+0x90>)
 8015d3a:	6813      	ldr	r3, [r2, #0]
 8015d3c:	b933      	cbnz	r3, 8015d4c <_free_r+0x2c>
 8015d3e:	6063      	str	r3, [r4, #4]
 8015d40:	6014      	str	r4, [r2, #0]
 8015d42:	4628      	mov	r0, r5
 8015d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d48:	f000 b8e4 	b.w	8015f14 <__malloc_unlock>
 8015d4c:	42a3      	cmp	r3, r4
 8015d4e:	d908      	bls.n	8015d62 <_free_r+0x42>
 8015d50:	6820      	ldr	r0, [r4, #0]
 8015d52:	1821      	adds	r1, r4, r0
 8015d54:	428b      	cmp	r3, r1
 8015d56:	bf01      	itttt	eq
 8015d58:	6819      	ldreq	r1, [r3, #0]
 8015d5a:	685b      	ldreq	r3, [r3, #4]
 8015d5c:	1809      	addeq	r1, r1, r0
 8015d5e:	6021      	streq	r1, [r4, #0]
 8015d60:	e7ed      	b.n	8015d3e <_free_r+0x1e>
 8015d62:	461a      	mov	r2, r3
 8015d64:	685b      	ldr	r3, [r3, #4]
 8015d66:	b10b      	cbz	r3, 8015d6c <_free_r+0x4c>
 8015d68:	42a3      	cmp	r3, r4
 8015d6a:	d9fa      	bls.n	8015d62 <_free_r+0x42>
 8015d6c:	6811      	ldr	r1, [r2, #0]
 8015d6e:	1850      	adds	r0, r2, r1
 8015d70:	42a0      	cmp	r0, r4
 8015d72:	d10b      	bne.n	8015d8c <_free_r+0x6c>
 8015d74:	6820      	ldr	r0, [r4, #0]
 8015d76:	4401      	add	r1, r0
 8015d78:	1850      	adds	r0, r2, r1
 8015d7a:	6011      	str	r1, [r2, #0]
 8015d7c:	4283      	cmp	r3, r0
 8015d7e:	d1e0      	bne.n	8015d42 <_free_r+0x22>
 8015d80:	6818      	ldr	r0, [r3, #0]
 8015d82:	685b      	ldr	r3, [r3, #4]
 8015d84:	4408      	add	r0, r1
 8015d86:	6053      	str	r3, [r2, #4]
 8015d88:	6010      	str	r0, [r2, #0]
 8015d8a:	e7da      	b.n	8015d42 <_free_r+0x22>
 8015d8c:	d902      	bls.n	8015d94 <_free_r+0x74>
 8015d8e:	230c      	movs	r3, #12
 8015d90:	602b      	str	r3, [r5, #0]
 8015d92:	e7d6      	b.n	8015d42 <_free_r+0x22>
 8015d94:	6820      	ldr	r0, [r4, #0]
 8015d96:	1821      	adds	r1, r4, r0
 8015d98:	428b      	cmp	r3, r1
 8015d9a:	bf02      	ittt	eq
 8015d9c:	6819      	ldreq	r1, [r3, #0]
 8015d9e:	685b      	ldreq	r3, [r3, #4]
 8015da0:	1809      	addeq	r1, r1, r0
 8015da2:	6063      	str	r3, [r4, #4]
 8015da4:	bf08      	it	eq
 8015da6:	6021      	streq	r1, [r4, #0]
 8015da8:	6054      	str	r4, [r2, #4]
 8015daa:	e7ca      	b.n	8015d42 <_free_r+0x22>
 8015dac:	bd38      	pop	{r3, r4, r5, pc}
 8015dae:	bf00      	nop
 8015db0:	20004504 	.word	0x20004504

08015db4 <malloc>:
 8015db4:	4b02      	ldr	r3, [pc, #8]	@ (8015dc0 <malloc+0xc>)
 8015db6:	4601      	mov	r1, r0
 8015db8:	6818      	ldr	r0, [r3, #0]
 8015dba:	f000 b825 	b.w	8015e08 <_malloc_r>
 8015dbe:	bf00      	nop
 8015dc0:	200001b4 	.word	0x200001b4

08015dc4 <sbrk_aligned>:
 8015dc4:	b570      	push	{r4, r5, r6, lr}
 8015dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8015e04 <sbrk_aligned+0x40>)
 8015dc8:	460c      	mov	r4, r1
 8015dca:	4605      	mov	r5, r0
 8015dcc:	6831      	ldr	r1, [r6, #0]
 8015dce:	b911      	cbnz	r1, 8015dd6 <sbrk_aligned+0x12>
 8015dd0:	f000 ff16 	bl	8016c00 <_sbrk_r>
 8015dd4:	6030      	str	r0, [r6, #0]
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	4628      	mov	r0, r5
 8015dda:	f000 ff11 	bl	8016c00 <_sbrk_r>
 8015dde:	1c43      	adds	r3, r0, #1
 8015de0:	d103      	bne.n	8015dea <sbrk_aligned+0x26>
 8015de2:	f04f 34ff 	mov.w	r4, #4294967295
 8015de6:	4620      	mov	r0, r4
 8015de8:	bd70      	pop	{r4, r5, r6, pc}
 8015dea:	1cc4      	adds	r4, r0, #3
 8015dec:	f024 0403 	bic.w	r4, r4, #3
 8015df0:	42a0      	cmp	r0, r4
 8015df2:	d0f8      	beq.n	8015de6 <sbrk_aligned+0x22>
 8015df4:	1a21      	subs	r1, r4, r0
 8015df6:	4628      	mov	r0, r5
 8015df8:	f000 ff02 	bl	8016c00 <_sbrk_r>
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d1f2      	bne.n	8015de6 <sbrk_aligned+0x22>
 8015e00:	e7ef      	b.n	8015de2 <sbrk_aligned+0x1e>
 8015e02:	bf00      	nop
 8015e04:	20004500 	.word	0x20004500

08015e08 <_malloc_r>:
 8015e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e0c:	1ccd      	adds	r5, r1, #3
 8015e0e:	4606      	mov	r6, r0
 8015e10:	f025 0503 	bic.w	r5, r5, #3
 8015e14:	3508      	adds	r5, #8
 8015e16:	2d0c      	cmp	r5, #12
 8015e18:	bf38      	it	cc
 8015e1a:	250c      	movcc	r5, #12
 8015e1c:	2d00      	cmp	r5, #0
 8015e1e:	db01      	blt.n	8015e24 <_malloc_r+0x1c>
 8015e20:	42a9      	cmp	r1, r5
 8015e22:	d904      	bls.n	8015e2e <_malloc_r+0x26>
 8015e24:	230c      	movs	r3, #12
 8015e26:	6033      	str	r3, [r6, #0]
 8015e28:	2000      	movs	r0, #0
 8015e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015f04 <_malloc_r+0xfc>
 8015e32:	f000 f869 	bl	8015f08 <__malloc_lock>
 8015e36:	f8d8 3000 	ldr.w	r3, [r8]
 8015e3a:	461c      	mov	r4, r3
 8015e3c:	bb44      	cbnz	r4, 8015e90 <_malloc_r+0x88>
 8015e3e:	4629      	mov	r1, r5
 8015e40:	4630      	mov	r0, r6
 8015e42:	f7ff ffbf 	bl	8015dc4 <sbrk_aligned>
 8015e46:	1c43      	adds	r3, r0, #1
 8015e48:	4604      	mov	r4, r0
 8015e4a:	d158      	bne.n	8015efe <_malloc_r+0xf6>
 8015e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8015e50:	4627      	mov	r7, r4
 8015e52:	2f00      	cmp	r7, #0
 8015e54:	d143      	bne.n	8015ede <_malloc_r+0xd6>
 8015e56:	2c00      	cmp	r4, #0
 8015e58:	d04b      	beq.n	8015ef2 <_malloc_r+0xea>
 8015e5a:	6823      	ldr	r3, [r4, #0]
 8015e5c:	4639      	mov	r1, r7
 8015e5e:	4630      	mov	r0, r6
 8015e60:	eb04 0903 	add.w	r9, r4, r3
 8015e64:	f000 fecc 	bl	8016c00 <_sbrk_r>
 8015e68:	4581      	cmp	r9, r0
 8015e6a:	d142      	bne.n	8015ef2 <_malloc_r+0xea>
 8015e6c:	6821      	ldr	r1, [r4, #0]
 8015e6e:	4630      	mov	r0, r6
 8015e70:	1a6d      	subs	r5, r5, r1
 8015e72:	4629      	mov	r1, r5
 8015e74:	f7ff ffa6 	bl	8015dc4 <sbrk_aligned>
 8015e78:	3001      	adds	r0, #1
 8015e7a:	d03a      	beq.n	8015ef2 <_malloc_r+0xea>
 8015e7c:	6823      	ldr	r3, [r4, #0]
 8015e7e:	442b      	add	r3, r5
 8015e80:	6023      	str	r3, [r4, #0]
 8015e82:	f8d8 3000 	ldr.w	r3, [r8]
 8015e86:	685a      	ldr	r2, [r3, #4]
 8015e88:	bb62      	cbnz	r2, 8015ee4 <_malloc_r+0xdc>
 8015e8a:	f8c8 7000 	str.w	r7, [r8]
 8015e8e:	e00f      	b.n	8015eb0 <_malloc_r+0xa8>
 8015e90:	6822      	ldr	r2, [r4, #0]
 8015e92:	1b52      	subs	r2, r2, r5
 8015e94:	d420      	bmi.n	8015ed8 <_malloc_r+0xd0>
 8015e96:	2a0b      	cmp	r2, #11
 8015e98:	d917      	bls.n	8015eca <_malloc_r+0xc2>
 8015e9a:	1961      	adds	r1, r4, r5
 8015e9c:	42a3      	cmp	r3, r4
 8015e9e:	6025      	str	r5, [r4, #0]
 8015ea0:	bf18      	it	ne
 8015ea2:	6059      	strne	r1, [r3, #4]
 8015ea4:	6863      	ldr	r3, [r4, #4]
 8015ea6:	bf08      	it	eq
 8015ea8:	f8c8 1000 	streq.w	r1, [r8]
 8015eac:	5162      	str	r2, [r4, r5]
 8015eae:	604b      	str	r3, [r1, #4]
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	f000 f82f 	bl	8015f14 <__malloc_unlock>
 8015eb6:	f104 000b 	add.w	r0, r4, #11
 8015eba:	1d23      	adds	r3, r4, #4
 8015ebc:	f020 0007 	bic.w	r0, r0, #7
 8015ec0:	1ac2      	subs	r2, r0, r3
 8015ec2:	bf1c      	itt	ne
 8015ec4:	1a1b      	subne	r3, r3, r0
 8015ec6:	50a3      	strne	r3, [r4, r2]
 8015ec8:	e7af      	b.n	8015e2a <_malloc_r+0x22>
 8015eca:	6862      	ldr	r2, [r4, #4]
 8015ecc:	42a3      	cmp	r3, r4
 8015ece:	bf0c      	ite	eq
 8015ed0:	f8c8 2000 	streq.w	r2, [r8]
 8015ed4:	605a      	strne	r2, [r3, #4]
 8015ed6:	e7eb      	b.n	8015eb0 <_malloc_r+0xa8>
 8015ed8:	4623      	mov	r3, r4
 8015eda:	6864      	ldr	r4, [r4, #4]
 8015edc:	e7ae      	b.n	8015e3c <_malloc_r+0x34>
 8015ede:	463c      	mov	r4, r7
 8015ee0:	687f      	ldr	r7, [r7, #4]
 8015ee2:	e7b6      	b.n	8015e52 <_malloc_r+0x4a>
 8015ee4:	461a      	mov	r2, r3
 8015ee6:	685b      	ldr	r3, [r3, #4]
 8015ee8:	42a3      	cmp	r3, r4
 8015eea:	d1fb      	bne.n	8015ee4 <_malloc_r+0xdc>
 8015eec:	2300      	movs	r3, #0
 8015eee:	6053      	str	r3, [r2, #4]
 8015ef0:	e7de      	b.n	8015eb0 <_malloc_r+0xa8>
 8015ef2:	230c      	movs	r3, #12
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	6033      	str	r3, [r6, #0]
 8015ef8:	f000 f80c 	bl	8015f14 <__malloc_unlock>
 8015efc:	e794      	b.n	8015e28 <_malloc_r+0x20>
 8015efe:	6005      	str	r5, [r0, #0]
 8015f00:	e7d6      	b.n	8015eb0 <_malloc_r+0xa8>
 8015f02:	bf00      	nop
 8015f04:	20004504 	.word	0x20004504

08015f08 <__malloc_lock>:
 8015f08:	4801      	ldr	r0, [pc, #4]	@ (8015f10 <__malloc_lock+0x8>)
 8015f0a:	f7ff b87c 	b.w	8015006 <__retarget_lock_acquire_recursive>
 8015f0e:	bf00      	nop
 8015f10:	200044fc 	.word	0x200044fc

08015f14 <__malloc_unlock>:
 8015f14:	4801      	ldr	r0, [pc, #4]	@ (8015f1c <__malloc_unlock+0x8>)
 8015f16:	f7ff b877 	b.w	8015008 <__retarget_lock_release_recursive>
 8015f1a:	bf00      	nop
 8015f1c:	200044fc 	.word	0x200044fc

08015f20 <_Balloc>:
 8015f20:	b570      	push	{r4, r5, r6, lr}
 8015f22:	69c6      	ldr	r6, [r0, #28]
 8015f24:	4604      	mov	r4, r0
 8015f26:	460d      	mov	r5, r1
 8015f28:	b976      	cbnz	r6, 8015f48 <_Balloc+0x28>
 8015f2a:	2010      	movs	r0, #16
 8015f2c:	f7ff ff42 	bl	8015db4 <malloc>
 8015f30:	4602      	mov	r2, r0
 8015f32:	61e0      	str	r0, [r4, #28]
 8015f34:	b920      	cbnz	r0, 8015f40 <_Balloc+0x20>
 8015f36:	4b18      	ldr	r3, [pc, #96]	@ (8015f98 <_Balloc+0x78>)
 8015f38:	216b      	movs	r1, #107	@ 0x6b
 8015f3a:	4818      	ldr	r0, [pc, #96]	@ (8015f9c <_Balloc+0x7c>)
 8015f3c:	f7ff f880 	bl	8015040 <__assert_func>
 8015f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f44:	6006      	str	r6, [r0, #0]
 8015f46:	60c6      	str	r6, [r0, #12]
 8015f48:	69e6      	ldr	r6, [r4, #28]
 8015f4a:	68f3      	ldr	r3, [r6, #12]
 8015f4c:	b183      	cbz	r3, 8015f70 <_Balloc+0x50>
 8015f4e:	69e3      	ldr	r3, [r4, #28]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015f56:	b9b8      	cbnz	r0, 8015f88 <_Balloc+0x68>
 8015f58:	2101      	movs	r1, #1
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	fa01 f605 	lsl.w	r6, r1, r5
 8015f60:	1d72      	adds	r2, r6, #5
 8015f62:	0092      	lsls	r2, r2, #2
 8015f64:	f000 fe63 	bl	8016c2e <_calloc_r>
 8015f68:	b160      	cbz	r0, 8015f84 <_Balloc+0x64>
 8015f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015f6e:	e00e      	b.n	8015f8e <_Balloc+0x6e>
 8015f70:	2221      	movs	r2, #33	@ 0x21
 8015f72:	2104      	movs	r1, #4
 8015f74:	4620      	mov	r0, r4
 8015f76:	f000 fe5a 	bl	8016c2e <_calloc_r>
 8015f7a:	69e3      	ldr	r3, [r4, #28]
 8015f7c:	60f0      	str	r0, [r6, #12]
 8015f7e:	68db      	ldr	r3, [r3, #12]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1e4      	bne.n	8015f4e <_Balloc+0x2e>
 8015f84:	2000      	movs	r0, #0
 8015f86:	bd70      	pop	{r4, r5, r6, pc}
 8015f88:	6802      	ldr	r2, [r0, #0]
 8015f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f8e:	2300      	movs	r3, #0
 8015f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f94:	e7f7      	b.n	8015f86 <_Balloc+0x66>
 8015f96:	bf00      	nop
 8015f98:	08017e55 	.word	0x08017e55
 8015f9c:	08017f78 	.word	0x08017f78

08015fa0 <_Bfree>:
 8015fa0:	b570      	push	{r4, r5, r6, lr}
 8015fa2:	69c6      	ldr	r6, [r0, #28]
 8015fa4:	4605      	mov	r5, r0
 8015fa6:	460c      	mov	r4, r1
 8015fa8:	b976      	cbnz	r6, 8015fc8 <_Bfree+0x28>
 8015faa:	2010      	movs	r0, #16
 8015fac:	f7ff ff02 	bl	8015db4 <malloc>
 8015fb0:	4602      	mov	r2, r0
 8015fb2:	61e8      	str	r0, [r5, #28]
 8015fb4:	b920      	cbnz	r0, 8015fc0 <_Bfree+0x20>
 8015fb6:	4b09      	ldr	r3, [pc, #36]	@ (8015fdc <_Bfree+0x3c>)
 8015fb8:	218f      	movs	r1, #143	@ 0x8f
 8015fba:	4809      	ldr	r0, [pc, #36]	@ (8015fe0 <_Bfree+0x40>)
 8015fbc:	f7ff f840 	bl	8015040 <__assert_func>
 8015fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015fc4:	6006      	str	r6, [r0, #0]
 8015fc6:	60c6      	str	r6, [r0, #12]
 8015fc8:	b13c      	cbz	r4, 8015fda <_Bfree+0x3a>
 8015fca:	69eb      	ldr	r3, [r5, #28]
 8015fcc:	6862      	ldr	r2, [r4, #4]
 8015fce:	68db      	ldr	r3, [r3, #12]
 8015fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015fd4:	6021      	str	r1, [r4, #0]
 8015fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015fda:	bd70      	pop	{r4, r5, r6, pc}
 8015fdc:	08017e55 	.word	0x08017e55
 8015fe0:	08017f78 	.word	0x08017f78

08015fe4 <__multadd>:
 8015fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe8:	f101 0c14 	add.w	ip, r1, #20
 8015fec:	4607      	mov	r7, r0
 8015fee:	460c      	mov	r4, r1
 8015ff0:	461e      	mov	r6, r3
 8015ff2:	690d      	ldr	r5, [r1, #16]
 8015ff4:	2000      	movs	r0, #0
 8015ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8015ffa:	3001      	adds	r0, #1
 8015ffc:	b299      	uxth	r1, r3
 8015ffe:	4285      	cmp	r5, r0
 8016000:	fb02 6101 	mla	r1, r2, r1, r6
 8016004:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016008:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801600c:	b289      	uxth	r1, r1
 801600e:	fb02 3306 	mla	r3, r2, r6, r3
 8016012:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801601a:	f84c 1b04 	str.w	r1, [ip], #4
 801601e:	dcea      	bgt.n	8015ff6 <__multadd+0x12>
 8016020:	b30e      	cbz	r6, 8016066 <__multadd+0x82>
 8016022:	68a3      	ldr	r3, [r4, #8]
 8016024:	42ab      	cmp	r3, r5
 8016026:	dc19      	bgt.n	801605c <__multadd+0x78>
 8016028:	6861      	ldr	r1, [r4, #4]
 801602a:	4638      	mov	r0, r7
 801602c:	3101      	adds	r1, #1
 801602e:	f7ff ff77 	bl	8015f20 <_Balloc>
 8016032:	4680      	mov	r8, r0
 8016034:	b928      	cbnz	r0, 8016042 <__multadd+0x5e>
 8016036:	4602      	mov	r2, r0
 8016038:	4b0c      	ldr	r3, [pc, #48]	@ (801606c <__multadd+0x88>)
 801603a:	21ba      	movs	r1, #186	@ 0xba
 801603c:	480c      	ldr	r0, [pc, #48]	@ (8016070 <__multadd+0x8c>)
 801603e:	f7fe ffff 	bl	8015040 <__assert_func>
 8016042:	6922      	ldr	r2, [r4, #16]
 8016044:	f104 010c 	add.w	r1, r4, #12
 8016048:	300c      	adds	r0, #12
 801604a:	3202      	adds	r2, #2
 801604c:	0092      	lsls	r2, r2, #2
 801604e:	f7fe ffea 	bl	8015026 <memcpy>
 8016052:	4621      	mov	r1, r4
 8016054:	4644      	mov	r4, r8
 8016056:	4638      	mov	r0, r7
 8016058:	f7ff ffa2 	bl	8015fa0 <_Bfree>
 801605c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016060:	3501      	adds	r5, #1
 8016062:	615e      	str	r6, [r3, #20]
 8016064:	6125      	str	r5, [r4, #16]
 8016066:	4620      	mov	r0, r4
 8016068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801606c:	08017f67 	.word	0x08017f67
 8016070:	08017f78 	.word	0x08017f78

08016074 <__hi0bits>:
 8016074:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016078:	4603      	mov	r3, r0
 801607a:	bf36      	itet	cc
 801607c:	0403      	lslcc	r3, r0, #16
 801607e:	2000      	movcs	r0, #0
 8016080:	2010      	movcc	r0, #16
 8016082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016086:	bf3c      	itt	cc
 8016088:	021b      	lslcc	r3, r3, #8
 801608a:	3008      	addcc	r0, #8
 801608c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016090:	bf3c      	itt	cc
 8016092:	011b      	lslcc	r3, r3, #4
 8016094:	3004      	addcc	r0, #4
 8016096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801609a:	bf3c      	itt	cc
 801609c:	009b      	lslcc	r3, r3, #2
 801609e:	3002      	addcc	r0, #2
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	db05      	blt.n	80160b0 <__hi0bits+0x3c>
 80160a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80160a8:	f100 0001 	add.w	r0, r0, #1
 80160ac:	bf08      	it	eq
 80160ae:	2020      	moveq	r0, #32
 80160b0:	4770      	bx	lr

080160b2 <__lo0bits>:
 80160b2:	6803      	ldr	r3, [r0, #0]
 80160b4:	4602      	mov	r2, r0
 80160b6:	f013 0007 	ands.w	r0, r3, #7
 80160ba:	d00b      	beq.n	80160d4 <__lo0bits+0x22>
 80160bc:	07d9      	lsls	r1, r3, #31
 80160be:	d421      	bmi.n	8016104 <__lo0bits+0x52>
 80160c0:	0798      	lsls	r0, r3, #30
 80160c2:	bf47      	ittee	mi
 80160c4:	085b      	lsrmi	r3, r3, #1
 80160c6:	2001      	movmi	r0, #1
 80160c8:	089b      	lsrpl	r3, r3, #2
 80160ca:	2002      	movpl	r0, #2
 80160cc:	bf4c      	ite	mi
 80160ce:	6013      	strmi	r3, [r2, #0]
 80160d0:	6013      	strpl	r3, [r2, #0]
 80160d2:	4770      	bx	lr
 80160d4:	b299      	uxth	r1, r3
 80160d6:	b909      	cbnz	r1, 80160dc <__lo0bits+0x2a>
 80160d8:	0c1b      	lsrs	r3, r3, #16
 80160da:	2010      	movs	r0, #16
 80160dc:	b2d9      	uxtb	r1, r3
 80160de:	b909      	cbnz	r1, 80160e4 <__lo0bits+0x32>
 80160e0:	3008      	adds	r0, #8
 80160e2:	0a1b      	lsrs	r3, r3, #8
 80160e4:	0719      	lsls	r1, r3, #28
 80160e6:	bf04      	itt	eq
 80160e8:	091b      	lsreq	r3, r3, #4
 80160ea:	3004      	addeq	r0, #4
 80160ec:	0799      	lsls	r1, r3, #30
 80160ee:	bf04      	itt	eq
 80160f0:	089b      	lsreq	r3, r3, #2
 80160f2:	3002      	addeq	r0, #2
 80160f4:	07d9      	lsls	r1, r3, #31
 80160f6:	d403      	bmi.n	8016100 <__lo0bits+0x4e>
 80160f8:	085b      	lsrs	r3, r3, #1
 80160fa:	f100 0001 	add.w	r0, r0, #1
 80160fe:	d003      	beq.n	8016108 <__lo0bits+0x56>
 8016100:	6013      	str	r3, [r2, #0]
 8016102:	4770      	bx	lr
 8016104:	2000      	movs	r0, #0
 8016106:	4770      	bx	lr
 8016108:	2020      	movs	r0, #32
 801610a:	4770      	bx	lr

0801610c <__i2b>:
 801610c:	b510      	push	{r4, lr}
 801610e:	460c      	mov	r4, r1
 8016110:	2101      	movs	r1, #1
 8016112:	f7ff ff05 	bl	8015f20 <_Balloc>
 8016116:	4602      	mov	r2, r0
 8016118:	b928      	cbnz	r0, 8016126 <__i2b+0x1a>
 801611a:	4b05      	ldr	r3, [pc, #20]	@ (8016130 <__i2b+0x24>)
 801611c:	f240 1145 	movw	r1, #325	@ 0x145
 8016120:	4804      	ldr	r0, [pc, #16]	@ (8016134 <__i2b+0x28>)
 8016122:	f7fe ff8d 	bl	8015040 <__assert_func>
 8016126:	2301      	movs	r3, #1
 8016128:	6144      	str	r4, [r0, #20]
 801612a:	6103      	str	r3, [r0, #16]
 801612c:	bd10      	pop	{r4, pc}
 801612e:	bf00      	nop
 8016130:	08017f67 	.word	0x08017f67
 8016134:	08017f78 	.word	0x08017f78

08016138 <__multiply>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	4614      	mov	r4, r2
 801613e:	690a      	ldr	r2, [r1, #16]
 8016140:	460f      	mov	r7, r1
 8016142:	b085      	sub	sp, #20
 8016144:	6923      	ldr	r3, [r4, #16]
 8016146:	429a      	cmp	r2, r3
 8016148:	bfa2      	ittt	ge
 801614a:	4623      	movge	r3, r4
 801614c:	460c      	movge	r4, r1
 801614e:	461f      	movge	r7, r3
 8016150:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016154:	68a3      	ldr	r3, [r4, #8]
 8016156:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801615a:	6861      	ldr	r1, [r4, #4]
 801615c:	eb0a 0609 	add.w	r6, sl, r9
 8016160:	42b3      	cmp	r3, r6
 8016162:	bfb8      	it	lt
 8016164:	3101      	addlt	r1, #1
 8016166:	f7ff fedb 	bl	8015f20 <_Balloc>
 801616a:	b930      	cbnz	r0, 801617a <__multiply+0x42>
 801616c:	4602      	mov	r2, r0
 801616e:	4b45      	ldr	r3, [pc, #276]	@ (8016284 <__multiply+0x14c>)
 8016170:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016174:	4844      	ldr	r0, [pc, #272]	@ (8016288 <__multiply+0x150>)
 8016176:	f7fe ff63 	bl	8015040 <__assert_func>
 801617a:	f100 0514 	add.w	r5, r0, #20
 801617e:	2200      	movs	r2, #0
 8016180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016184:	462b      	mov	r3, r5
 8016186:	4543      	cmp	r3, r8
 8016188:	d321      	bcc.n	80161ce <__multiply+0x96>
 801618a:	f107 0114 	add.w	r1, r7, #20
 801618e:	f104 0214 	add.w	r2, r4, #20
 8016192:	f104 0715 	add.w	r7, r4, #21
 8016196:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801619a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801619e:	9302      	str	r3, [sp, #8]
 80161a0:	1b13      	subs	r3, r2, r4
 80161a2:	3b15      	subs	r3, #21
 80161a4:	f023 0303 	bic.w	r3, r3, #3
 80161a8:	3304      	adds	r3, #4
 80161aa:	42ba      	cmp	r2, r7
 80161ac:	bf38      	it	cc
 80161ae:	2304      	movcc	r3, #4
 80161b0:	9301      	str	r3, [sp, #4]
 80161b2:	9b02      	ldr	r3, [sp, #8]
 80161b4:	9103      	str	r1, [sp, #12]
 80161b6:	428b      	cmp	r3, r1
 80161b8:	d80c      	bhi.n	80161d4 <__multiply+0x9c>
 80161ba:	2e00      	cmp	r6, #0
 80161bc:	dd03      	ble.n	80161c6 <__multiply+0x8e>
 80161be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d05b      	beq.n	801627e <__multiply+0x146>
 80161c6:	6106      	str	r6, [r0, #16]
 80161c8:	b005      	add	sp, #20
 80161ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ce:	f843 2b04 	str.w	r2, [r3], #4
 80161d2:	e7d8      	b.n	8016186 <__multiply+0x4e>
 80161d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80161d8:	f1ba 0f00 	cmp.w	sl, #0
 80161dc:	d024      	beq.n	8016228 <__multiply+0xf0>
 80161de:	f104 0e14 	add.w	lr, r4, #20
 80161e2:	46a9      	mov	r9, r5
 80161e4:	f04f 0c00 	mov.w	ip, #0
 80161e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80161ec:	f8d9 3000 	ldr.w	r3, [r9]
 80161f0:	fa1f fb87 	uxth.w	fp, r7
 80161f4:	4572      	cmp	r2, lr
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80161fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016200:	f8d9 7000 	ldr.w	r7, [r9]
 8016204:	4463      	add	r3, ip
 8016206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801620a:	fb0a c70b 	mla	r7, sl, fp, ip
 801620e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016212:	b29b      	uxth	r3, r3
 8016214:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801621c:	f849 3b04 	str.w	r3, [r9], #4
 8016220:	d8e2      	bhi.n	80161e8 <__multiply+0xb0>
 8016222:	9b01      	ldr	r3, [sp, #4]
 8016224:	f845 c003 	str.w	ip, [r5, r3]
 8016228:	9b03      	ldr	r3, [sp, #12]
 801622a:	3104      	adds	r1, #4
 801622c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016230:	f1b9 0f00 	cmp.w	r9, #0
 8016234:	d021      	beq.n	801627a <__multiply+0x142>
 8016236:	682b      	ldr	r3, [r5, #0]
 8016238:	f104 0c14 	add.w	ip, r4, #20
 801623c:	46ae      	mov	lr, r5
 801623e:	f04f 0a00 	mov.w	sl, #0
 8016242:	f8bc b000 	ldrh.w	fp, [ip]
 8016246:	b29b      	uxth	r3, r3
 8016248:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801624c:	fb09 770b 	mla	r7, r9, fp, r7
 8016250:	4457      	add	r7, sl
 8016252:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016256:	f84e 3b04 	str.w	r3, [lr], #4
 801625a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801625e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016262:	f8be 3000 	ldrh.w	r3, [lr]
 8016266:	4562      	cmp	r2, ip
 8016268:	fb09 330a 	mla	r3, r9, sl, r3
 801626c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016274:	d8e5      	bhi.n	8016242 <__multiply+0x10a>
 8016276:	9f01      	ldr	r7, [sp, #4]
 8016278:	51eb      	str	r3, [r5, r7]
 801627a:	3504      	adds	r5, #4
 801627c:	e799      	b.n	80161b2 <__multiply+0x7a>
 801627e:	3e01      	subs	r6, #1
 8016280:	e79b      	b.n	80161ba <__multiply+0x82>
 8016282:	bf00      	nop
 8016284:	08017f67 	.word	0x08017f67
 8016288:	08017f78 	.word	0x08017f78

0801628c <__pow5mult>:
 801628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016290:	4615      	mov	r5, r2
 8016292:	f012 0203 	ands.w	r2, r2, #3
 8016296:	4607      	mov	r7, r0
 8016298:	460e      	mov	r6, r1
 801629a:	d007      	beq.n	80162ac <__pow5mult+0x20>
 801629c:	3a01      	subs	r2, #1
 801629e:	4c25      	ldr	r4, [pc, #148]	@ (8016334 <__pow5mult+0xa8>)
 80162a0:	2300      	movs	r3, #0
 80162a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80162a6:	f7ff fe9d 	bl	8015fe4 <__multadd>
 80162aa:	4606      	mov	r6, r0
 80162ac:	10ad      	asrs	r5, r5, #2
 80162ae:	d03d      	beq.n	801632c <__pow5mult+0xa0>
 80162b0:	69fc      	ldr	r4, [r7, #28]
 80162b2:	b97c      	cbnz	r4, 80162d4 <__pow5mult+0x48>
 80162b4:	2010      	movs	r0, #16
 80162b6:	f7ff fd7d 	bl	8015db4 <malloc>
 80162ba:	4602      	mov	r2, r0
 80162bc:	61f8      	str	r0, [r7, #28]
 80162be:	b928      	cbnz	r0, 80162cc <__pow5mult+0x40>
 80162c0:	4b1d      	ldr	r3, [pc, #116]	@ (8016338 <__pow5mult+0xac>)
 80162c2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80162c6:	481d      	ldr	r0, [pc, #116]	@ (801633c <__pow5mult+0xb0>)
 80162c8:	f7fe feba 	bl	8015040 <__assert_func>
 80162cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80162d0:	6004      	str	r4, [r0, #0]
 80162d2:	60c4      	str	r4, [r0, #12]
 80162d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80162d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80162dc:	b94c      	cbnz	r4, 80162f2 <__pow5mult+0x66>
 80162de:	f240 2171 	movw	r1, #625	@ 0x271
 80162e2:	4638      	mov	r0, r7
 80162e4:	f7ff ff12 	bl	801610c <__i2b>
 80162e8:	2300      	movs	r3, #0
 80162ea:	4604      	mov	r4, r0
 80162ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80162f0:	6003      	str	r3, [r0, #0]
 80162f2:	f04f 0900 	mov.w	r9, #0
 80162f6:	07eb      	lsls	r3, r5, #31
 80162f8:	d50a      	bpl.n	8016310 <__pow5mult+0x84>
 80162fa:	4631      	mov	r1, r6
 80162fc:	4622      	mov	r2, r4
 80162fe:	4638      	mov	r0, r7
 8016300:	f7ff ff1a 	bl	8016138 <__multiply>
 8016304:	4680      	mov	r8, r0
 8016306:	4631      	mov	r1, r6
 8016308:	4638      	mov	r0, r7
 801630a:	4646      	mov	r6, r8
 801630c:	f7ff fe48 	bl	8015fa0 <_Bfree>
 8016310:	106d      	asrs	r5, r5, #1
 8016312:	d00b      	beq.n	801632c <__pow5mult+0xa0>
 8016314:	6820      	ldr	r0, [r4, #0]
 8016316:	b938      	cbnz	r0, 8016328 <__pow5mult+0x9c>
 8016318:	4622      	mov	r2, r4
 801631a:	4621      	mov	r1, r4
 801631c:	4638      	mov	r0, r7
 801631e:	f7ff ff0b 	bl	8016138 <__multiply>
 8016322:	6020      	str	r0, [r4, #0]
 8016324:	f8c0 9000 	str.w	r9, [r0]
 8016328:	4604      	mov	r4, r0
 801632a:	e7e4      	b.n	80162f6 <__pow5mult+0x6a>
 801632c:	4630      	mov	r0, r6
 801632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016332:	bf00      	nop
 8016334:	08017fd4 	.word	0x08017fd4
 8016338:	08017e55 	.word	0x08017e55
 801633c:	08017f78 	.word	0x08017f78

08016340 <__lshift>:
 8016340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016344:	460c      	mov	r4, r1
 8016346:	4607      	mov	r7, r0
 8016348:	4691      	mov	r9, r2
 801634a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801634e:	6923      	ldr	r3, [r4, #16]
 8016350:	6849      	ldr	r1, [r1, #4]
 8016352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016356:	68a3      	ldr	r3, [r4, #8]
 8016358:	f108 0601 	add.w	r6, r8, #1
 801635c:	42b3      	cmp	r3, r6
 801635e:	db0b      	blt.n	8016378 <__lshift+0x38>
 8016360:	4638      	mov	r0, r7
 8016362:	f7ff fddd 	bl	8015f20 <_Balloc>
 8016366:	4605      	mov	r5, r0
 8016368:	b948      	cbnz	r0, 801637e <__lshift+0x3e>
 801636a:	4602      	mov	r2, r0
 801636c:	4b28      	ldr	r3, [pc, #160]	@ (8016410 <__lshift+0xd0>)
 801636e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016372:	4828      	ldr	r0, [pc, #160]	@ (8016414 <__lshift+0xd4>)
 8016374:	f7fe fe64 	bl	8015040 <__assert_func>
 8016378:	3101      	adds	r1, #1
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	e7ee      	b.n	801635c <__lshift+0x1c>
 801637e:	2300      	movs	r3, #0
 8016380:	f100 0114 	add.w	r1, r0, #20
 8016384:	f100 0210 	add.w	r2, r0, #16
 8016388:	4618      	mov	r0, r3
 801638a:	4553      	cmp	r3, sl
 801638c:	db33      	blt.n	80163f6 <__lshift+0xb6>
 801638e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016392:	f104 0314 	add.w	r3, r4, #20
 8016396:	6920      	ldr	r0, [r4, #16]
 8016398:	f019 091f 	ands.w	r9, r9, #31
 801639c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80163a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80163a4:	d02b      	beq.n	80163fe <__lshift+0xbe>
 80163a6:	f1c9 0e20 	rsb	lr, r9, #32
 80163aa:	468a      	mov	sl, r1
 80163ac:	2200      	movs	r2, #0
 80163ae:	6818      	ldr	r0, [r3, #0]
 80163b0:	fa00 f009 	lsl.w	r0, r0, r9
 80163b4:	4310      	orrs	r0, r2
 80163b6:	f84a 0b04 	str.w	r0, [sl], #4
 80163ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80163be:	459c      	cmp	ip, r3
 80163c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80163c4:	d8f3      	bhi.n	80163ae <__lshift+0x6e>
 80163c6:	ebac 0304 	sub.w	r3, ip, r4
 80163ca:	f104 0015 	add.w	r0, r4, #21
 80163ce:	3b15      	subs	r3, #21
 80163d0:	f023 0303 	bic.w	r3, r3, #3
 80163d4:	3304      	adds	r3, #4
 80163d6:	4584      	cmp	ip, r0
 80163d8:	bf38      	it	cc
 80163da:	2304      	movcc	r3, #4
 80163dc:	50ca      	str	r2, [r1, r3]
 80163de:	b10a      	cbz	r2, 80163e4 <__lshift+0xa4>
 80163e0:	f108 0602 	add.w	r6, r8, #2
 80163e4:	3e01      	subs	r6, #1
 80163e6:	4638      	mov	r0, r7
 80163e8:	4621      	mov	r1, r4
 80163ea:	612e      	str	r6, [r5, #16]
 80163ec:	f7ff fdd8 	bl	8015fa0 <_Bfree>
 80163f0:	4628      	mov	r0, r5
 80163f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f6:	3301      	adds	r3, #1
 80163f8:	f842 0f04 	str.w	r0, [r2, #4]!
 80163fc:	e7c5      	b.n	801638a <__lshift+0x4a>
 80163fe:	3904      	subs	r1, #4
 8016400:	f853 2b04 	ldr.w	r2, [r3], #4
 8016404:	459c      	cmp	ip, r3
 8016406:	f841 2f04 	str.w	r2, [r1, #4]!
 801640a:	d8f9      	bhi.n	8016400 <__lshift+0xc0>
 801640c:	e7ea      	b.n	80163e4 <__lshift+0xa4>
 801640e:	bf00      	nop
 8016410:	08017f67 	.word	0x08017f67
 8016414:	08017f78 	.word	0x08017f78

08016418 <__mcmp>:
 8016418:	4603      	mov	r3, r0
 801641a:	690a      	ldr	r2, [r1, #16]
 801641c:	6900      	ldr	r0, [r0, #16]
 801641e:	1a80      	subs	r0, r0, r2
 8016420:	b530      	push	{r4, r5, lr}
 8016422:	d10e      	bne.n	8016442 <__mcmp+0x2a>
 8016424:	3314      	adds	r3, #20
 8016426:	3114      	adds	r1, #20
 8016428:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801642c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016430:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016434:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016438:	4295      	cmp	r5, r2
 801643a:	d003      	beq.n	8016444 <__mcmp+0x2c>
 801643c:	d205      	bcs.n	801644a <__mcmp+0x32>
 801643e:	f04f 30ff 	mov.w	r0, #4294967295
 8016442:	bd30      	pop	{r4, r5, pc}
 8016444:	42a3      	cmp	r3, r4
 8016446:	d3f3      	bcc.n	8016430 <__mcmp+0x18>
 8016448:	e7fb      	b.n	8016442 <__mcmp+0x2a>
 801644a:	2001      	movs	r0, #1
 801644c:	e7f9      	b.n	8016442 <__mcmp+0x2a>
	...

08016450 <__mdiff>:
 8016450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016454:	4689      	mov	r9, r1
 8016456:	4606      	mov	r6, r0
 8016458:	4611      	mov	r1, r2
 801645a:	4614      	mov	r4, r2
 801645c:	4648      	mov	r0, r9
 801645e:	f7ff ffdb 	bl	8016418 <__mcmp>
 8016462:	1e05      	subs	r5, r0, #0
 8016464:	d112      	bne.n	801648c <__mdiff+0x3c>
 8016466:	4629      	mov	r1, r5
 8016468:	4630      	mov	r0, r6
 801646a:	f7ff fd59 	bl	8015f20 <_Balloc>
 801646e:	4602      	mov	r2, r0
 8016470:	b928      	cbnz	r0, 801647e <__mdiff+0x2e>
 8016472:	4b41      	ldr	r3, [pc, #260]	@ (8016578 <__mdiff+0x128>)
 8016474:	f240 2137 	movw	r1, #567	@ 0x237
 8016478:	4840      	ldr	r0, [pc, #256]	@ (801657c <__mdiff+0x12c>)
 801647a:	f7fe fde1 	bl	8015040 <__assert_func>
 801647e:	2301      	movs	r3, #1
 8016480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016484:	4610      	mov	r0, r2
 8016486:	b003      	add	sp, #12
 8016488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648c:	bfbc      	itt	lt
 801648e:	464b      	movlt	r3, r9
 8016490:	46a1      	movlt	r9, r4
 8016492:	4630      	mov	r0, r6
 8016494:	bfb8      	it	lt
 8016496:	2501      	movlt	r5, #1
 8016498:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801649c:	bfb4      	ite	lt
 801649e:	461c      	movlt	r4, r3
 80164a0:	2500      	movge	r5, #0
 80164a2:	f7ff fd3d 	bl	8015f20 <_Balloc>
 80164a6:	4602      	mov	r2, r0
 80164a8:	b918      	cbnz	r0, 80164b2 <__mdiff+0x62>
 80164aa:	4b33      	ldr	r3, [pc, #204]	@ (8016578 <__mdiff+0x128>)
 80164ac:	f240 2145 	movw	r1, #581	@ 0x245
 80164b0:	e7e2      	b.n	8016478 <__mdiff+0x28>
 80164b2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80164b6:	f104 0e14 	add.w	lr, r4, #20
 80164ba:	6926      	ldr	r6, [r4, #16]
 80164bc:	f100 0b14 	add.w	fp, r0, #20
 80164c0:	60c5      	str	r5, [r0, #12]
 80164c2:	f109 0514 	add.w	r5, r9, #20
 80164c6:	f109 0310 	add.w	r3, r9, #16
 80164ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80164ce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80164d2:	46d9      	mov	r9, fp
 80164d4:	f04f 0c00 	mov.w	ip, #0
 80164d8:	9301      	str	r3, [sp, #4]
 80164da:	9b01      	ldr	r3, [sp, #4]
 80164dc:	f85e 0b04 	ldr.w	r0, [lr], #4
 80164e0:	f853 af04 	ldr.w	sl, [r3, #4]!
 80164e4:	4576      	cmp	r6, lr
 80164e6:	9301      	str	r3, [sp, #4]
 80164e8:	fa1f f38a 	uxth.w	r3, sl
 80164ec:	4619      	mov	r1, r3
 80164ee:	b283      	uxth	r3, r0
 80164f0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80164f4:	eba1 0303 	sub.w	r3, r1, r3
 80164f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80164fc:	4463      	add	r3, ip
 80164fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016502:	b29b      	uxth	r3, r3
 8016504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801650c:	f849 3b04 	str.w	r3, [r9], #4
 8016510:	d8e3      	bhi.n	80164da <__mdiff+0x8a>
 8016512:	1b33      	subs	r3, r6, r4
 8016514:	3415      	adds	r4, #21
 8016516:	3b15      	subs	r3, #21
 8016518:	f023 0303 	bic.w	r3, r3, #3
 801651c:	3304      	adds	r3, #4
 801651e:	42a6      	cmp	r6, r4
 8016520:	bf38      	it	cc
 8016522:	2304      	movcc	r3, #4
 8016524:	441d      	add	r5, r3
 8016526:	445b      	add	r3, fp
 8016528:	462c      	mov	r4, r5
 801652a:	461e      	mov	r6, r3
 801652c:	4544      	cmp	r4, r8
 801652e:	d30e      	bcc.n	801654e <__mdiff+0xfe>
 8016530:	f108 0103 	add.w	r1, r8, #3
 8016534:	1b49      	subs	r1, r1, r5
 8016536:	3d03      	subs	r5, #3
 8016538:	f021 0103 	bic.w	r1, r1, #3
 801653c:	45a8      	cmp	r8, r5
 801653e:	bf38      	it	cc
 8016540:	2100      	movcc	r1, #0
 8016542:	440b      	add	r3, r1
 8016544:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016548:	b199      	cbz	r1, 8016572 <__mdiff+0x122>
 801654a:	6117      	str	r7, [r2, #16]
 801654c:	e79a      	b.n	8016484 <__mdiff+0x34>
 801654e:	f854 1b04 	ldr.w	r1, [r4], #4
 8016552:	46e6      	mov	lr, ip
 8016554:	fa1f fc81 	uxth.w	ip, r1
 8016558:	0c08      	lsrs	r0, r1, #16
 801655a:	4471      	add	r1, lr
 801655c:	44f4      	add	ip, lr
 801655e:	b289      	uxth	r1, r1
 8016560:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801656c:	f846 1b04 	str.w	r1, [r6], #4
 8016570:	e7dc      	b.n	801652c <__mdiff+0xdc>
 8016572:	3f01      	subs	r7, #1
 8016574:	e7e6      	b.n	8016544 <__mdiff+0xf4>
 8016576:	bf00      	nop
 8016578:	08017f67 	.word	0x08017f67
 801657c:	08017f78 	.word	0x08017f78

08016580 <__d2b>:
 8016580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016584:	460f      	mov	r7, r1
 8016586:	2101      	movs	r1, #1
 8016588:	4616      	mov	r6, r2
 801658a:	ec59 8b10 	vmov	r8, r9, d0
 801658e:	f7ff fcc7 	bl	8015f20 <_Balloc>
 8016592:	4604      	mov	r4, r0
 8016594:	b930      	cbnz	r0, 80165a4 <__d2b+0x24>
 8016596:	4602      	mov	r2, r0
 8016598:	4b23      	ldr	r3, [pc, #140]	@ (8016628 <__d2b+0xa8>)
 801659a:	f240 310f 	movw	r1, #783	@ 0x30f
 801659e:	4823      	ldr	r0, [pc, #140]	@ (801662c <__d2b+0xac>)
 80165a0:	f7fe fd4e 	bl	8015040 <__assert_func>
 80165a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80165a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165ac:	b10d      	cbz	r5, 80165b2 <__d2b+0x32>
 80165ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80165b2:	9301      	str	r3, [sp, #4]
 80165b4:	f1b8 0300 	subs.w	r3, r8, #0
 80165b8:	d023      	beq.n	8016602 <__d2b+0x82>
 80165ba:	4668      	mov	r0, sp
 80165bc:	9300      	str	r3, [sp, #0]
 80165be:	f7ff fd78 	bl	80160b2 <__lo0bits>
 80165c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80165c6:	b1d0      	cbz	r0, 80165fe <__d2b+0x7e>
 80165c8:	f1c0 0320 	rsb	r3, r0, #32
 80165cc:	fa02 f303 	lsl.w	r3, r2, r3
 80165d0:	40c2      	lsrs	r2, r0
 80165d2:	430b      	orrs	r3, r1
 80165d4:	9201      	str	r2, [sp, #4]
 80165d6:	6163      	str	r3, [r4, #20]
 80165d8:	9b01      	ldr	r3, [sp, #4]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	61a3      	str	r3, [r4, #24]
 80165de:	bf0c      	ite	eq
 80165e0:	2201      	moveq	r2, #1
 80165e2:	2202      	movne	r2, #2
 80165e4:	6122      	str	r2, [r4, #16]
 80165e6:	b1a5      	cbz	r5, 8016612 <__d2b+0x92>
 80165e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80165ec:	4405      	add	r5, r0
 80165ee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80165f2:	603d      	str	r5, [r7, #0]
 80165f4:	6030      	str	r0, [r6, #0]
 80165f6:	4620      	mov	r0, r4
 80165f8:	b003      	add	sp, #12
 80165fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165fe:	6161      	str	r1, [r4, #20]
 8016600:	e7ea      	b.n	80165d8 <__d2b+0x58>
 8016602:	a801      	add	r0, sp, #4
 8016604:	f7ff fd55 	bl	80160b2 <__lo0bits>
 8016608:	9b01      	ldr	r3, [sp, #4]
 801660a:	3020      	adds	r0, #32
 801660c:	2201      	movs	r2, #1
 801660e:	6163      	str	r3, [r4, #20]
 8016610:	e7e8      	b.n	80165e4 <__d2b+0x64>
 8016612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801661a:	6038      	str	r0, [r7, #0]
 801661c:	6918      	ldr	r0, [r3, #16]
 801661e:	f7ff fd29 	bl	8016074 <__hi0bits>
 8016622:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016626:	e7e5      	b.n	80165f4 <__d2b+0x74>
 8016628:	08017f67 	.word	0x08017f67
 801662c:	08017f78 	.word	0x08017f78

08016630 <__ssputs_r>:
 8016630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016634:	461f      	mov	r7, r3
 8016636:	688e      	ldr	r6, [r1, #8]
 8016638:	4682      	mov	sl, r0
 801663a:	460c      	mov	r4, r1
 801663c:	42be      	cmp	r6, r7
 801663e:	4690      	mov	r8, r2
 8016640:	680b      	ldr	r3, [r1, #0]
 8016642:	d82d      	bhi.n	80166a0 <__ssputs_r+0x70>
 8016644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801664c:	d026      	beq.n	801669c <__ssputs_r+0x6c>
 801664e:	6965      	ldr	r5, [r4, #20]
 8016650:	6909      	ldr	r1, [r1, #16]
 8016652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016656:	eba3 0901 	sub.w	r9, r3, r1
 801665a:	1c7b      	adds	r3, r7, #1
 801665c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016660:	444b      	add	r3, r9
 8016662:	106d      	asrs	r5, r5, #1
 8016664:	429d      	cmp	r5, r3
 8016666:	bf38      	it	cc
 8016668:	461d      	movcc	r5, r3
 801666a:	0553      	lsls	r3, r2, #21
 801666c:	d527      	bpl.n	80166be <__ssputs_r+0x8e>
 801666e:	4629      	mov	r1, r5
 8016670:	f7ff fbca 	bl	8015e08 <_malloc_r>
 8016674:	4606      	mov	r6, r0
 8016676:	b360      	cbz	r0, 80166d2 <__ssputs_r+0xa2>
 8016678:	464a      	mov	r2, r9
 801667a:	6921      	ldr	r1, [r4, #16]
 801667c:	f7fe fcd3 	bl	8015026 <memcpy>
 8016680:	89a3      	ldrh	r3, [r4, #12]
 8016682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801668a:	81a3      	strh	r3, [r4, #12]
 801668c:	6126      	str	r6, [r4, #16]
 801668e:	444e      	add	r6, r9
 8016690:	6165      	str	r5, [r4, #20]
 8016692:	eba5 0509 	sub.w	r5, r5, r9
 8016696:	6026      	str	r6, [r4, #0]
 8016698:	463e      	mov	r6, r7
 801669a:	60a5      	str	r5, [r4, #8]
 801669c:	42be      	cmp	r6, r7
 801669e:	d900      	bls.n	80166a2 <__ssputs_r+0x72>
 80166a0:	463e      	mov	r6, r7
 80166a2:	4632      	mov	r2, r6
 80166a4:	4641      	mov	r1, r8
 80166a6:	6820      	ldr	r0, [r4, #0]
 80166a8:	f000 fa6d 	bl	8016b86 <memmove>
 80166ac:	68a3      	ldr	r3, [r4, #8]
 80166ae:	2000      	movs	r0, #0
 80166b0:	1b9b      	subs	r3, r3, r6
 80166b2:	60a3      	str	r3, [r4, #8]
 80166b4:	6823      	ldr	r3, [r4, #0]
 80166b6:	4433      	add	r3, r6
 80166b8:	6023      	str	r3, [r4, #0]
 80166ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166be:	462a      	mov	r2, r5
 80166c0:	f000 fadb 	bl	8016c7a <_realloc_r>
 80166c4:	4606      	mov	r6, r0
 80166c6:	2800      	cmp	r0, #0
 80166c8:	d1e0      	bne.n	801668c <__ssputs_r+0x5c>
 80166ca:	6921      	ldr	r1, [r4, #16]
 80166cc:	4650      	mov	r0, sl
 80166ce:	f7ff fb27 	bl	8015d20 <_free_r>
 80166d2:	230c      	movs	r3, #12
 80166d4:	f04f 30ff 	mov.w	r0, #4294967295
 80166d8:	f8ca 3000 	str.w	r3, [sl]
 80166dc:	89a3      	ldrh	r3, [r4, #12]
 80166de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166e2:	81a3      	strh	r3, [r4, #12]
 80166e4:	e7e9      	b.n	80166ba <__ssputs_r+0x8a>
	...

080166e8 <_svfiprintf_r>:
 80166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	4698      	mov	r8, r3
 80166ee:	898b      	ldrh	r3, [r1, #12]
 80166f0:	b09d      	sub	sp, #116	@ 0x74
 80166f2:	4607      	mov	r7, r0
 80166f4:	061b      	lsls	r3, r3, #24
 80166f6:	460d      	mov	r5, r1
 80166f8:	4614      	mov	r4, r2
 80166fa:	d510      	bpl.n	801671e <_svfiprintf_r+0x36>
 80166fc:	690b      	ldr	r3, [r1, #16]
 80166fe:	b973      	cbnz	r3, 801671e <_svfiprintf_r+0x36>
 8016700:	2140      	movs	r1, #64	@ 0x40
 8016702:	f7ff fb81 	bl	8015e08 <_malloc_r>
 8016706:	6028      	str	r0, [r5, #0]
 8016708:	6128      	str	r0, [r5, #16]
 801670a:	b930      	cbnz	r0, 801671a <_svfiprintf_r+0x32>
 801670c:	230c      	movs	r3, #12
 801670e:	603b      	str	r3, [r7, #0]
 8016710:	f04f 30ff 	mov.w	r0, #4294967295
 8016714:	b01d      	add	sp, #116	@ 0x74
 8016716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801671a:	2340      	movs	r3, #64	@ 0x40
 801671c:	616b      	str	r3, [r5, #20]
 801671e:	2300      	movs	r3, #0
 8016720:	f8cd 800c 	str.w	r8, [sp, #12]
 8016724:	f04f 0901 	mov.w	r9, #1
 8016728:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80168cc <_svfiprintf_r+0x1e4>
 801672c:	9309      	str	r3, [sp, #36]	@ 0x24
 801672e:	2320      	movs	r3, #32
 8016730:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016734:	2330      	movs	r3, #48	@ 0x30
 8016736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801673a:	4623      	mov	r3, r4
 801673c:	469a      	mov	sl, r3
 801673e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016742:	b10a      	cbz	r2, 8016748 <_svfiprintf_r+0x60>
 8016744:	2a25      	cmp	r2, #37	@ 0x25
 8016746:	d1f9      	bne.n	801673c <_svfiprintf_r+0x54>
 8016748:	ebba 0b04 	subs.w	fp, sl, r4
 801674c:	d00b      	beq.n	8016766 <_svfiprintf_r+0x7e>
 801674e:	465b      	mov	r3, fp
 8016750:	4622      	mov	r2, r4
 8016752:	4629      	mov	r1, r5
 8016754:	4638      	mov	r0, r7
 8016756:	f7ff ff6b 	bl	8016630 <__ssputs_r>
 801675a:	3001      	adds	r0, #1
 801675c:	f000 80a7 	beq.w	80168ae <_svfiprintf_r+0x1c6>
 8016760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016762:	445a      	add	r2, fp
 8016764:	9209      	str	r2, [sp, #36]	@ 0x24
 8016766:	f89a 3000 	ldrb.w	r3, [sl]
 801676a:	2b00      	cmp	r3, #0
 801676c:	f000 809f 	beq.w	80168ae <_svfiprintf_r+0x1c6>
 8016770:	2300      	movs	r3, #0
 8016772:	f04f 32ff 	mov.w	r2, #4294967295
 8016776:	f10a 0a01 	add.w	sl, sl, #1
 801677a:	9304      	str	r3, [sp, #16]
 801677c:	9307      	str	r3, [sp, #28]
 801677e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016782:	931a      	str	r3, [sp, #104]	@ 0x68
 8016784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016788:	4654      	mov	r4, sl
 801678a:	2205      	movs	r2, #5
 801678c:	484f      	ldr	r0, [pc, #316]	@ (80168cc <_svfiprintf_r+0x1e4>)
 801678e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016792:	f7fe fc3a 	bl	801500a <memchr>
 8016796:	9a04      	ldr	r2, [sp, #16]
 8016798:	b9d8      	cbnz	r0, 80167d2 <_svfiprintf_r+0xea>
 801679a:	06d0      	lsls	r0, r2, #27
 801679c:	bf44      	itt	mi
 801679e:	2320      	movmi	r3, #32
 80167a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80167a4:	0711      	lsls	r1, r2, #28
 80167a6:	bf44      	itt	mi
 80167a8:	232b      	movmi	r3, #43	@ 0x2b
 80167aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80167ae:	f89a 3000 	ldrb.w	r3, [sl]
 80167b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80167b4:	d015      	beq.n	80167e2 <_svfiprintf_r+0xfa>
 80167b6:	9a07      	ldr	r2, [sp, #28]
 80167b8:	4654      	mov	r4, sl
 80167ba:	2000      	movs	r0, #0
 80167bc:	f04f 0c0a 	mov.w	ip, #10
 80167c0:	4621      	mov	r1, r4
 80167c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167c6:	3b30      	subs	r3, #48	@ 0x30
 80167c8:	2b09      	cmp	r3, #9
 80167ca:	d94b      	bls.n	8016864 <_svfiprintf_r+0x17c>
 80167cc:	b1b0      	cbz	r0, 80167fc <_svfiprintf_r+0x114>
 80167ce:	9207      	str	r2, [sp, #28]
 80167d0:	e014      	b.n	80167fc <_svfiprintf_r+0x114>
 80167d2:	eba0 0308 	sub.w	r3, r0, r8
 80167d6:	46a2      	mov	sl, r4
 80167d8:	fa09 f303 	lsl.w	r3, r9, r3
 80167dc:	4313      	orrs	r3, r2
 80167de:	9304      	str	r3, [sp, #16]
 80167e0:	e7d2      	b.n	8016788 <_svfiprintf_r+0xa0>
 80167e2:	9b03      	ldr	r3, [sp, #12]
 80167e4:	1d19      	adds	r1, r3, #4
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	9103      	str	r1, [sp, #12]
 80167ec:	bfbb      	ittet	lt
 80167ee:	425b      	neglt	r3, r3
 80167f0:	f042 0202 	orrlt.w	r2, r2, #2
 80167f4:	9307      	strge	r3, [sp, #28]
 80167f6:	9307      	strlt	r3, [sp, #28]
 80167f8:	bfb8      	it	lt
 80167fa:	9204      	strlt	r2, [sp, #16]
 80167fc:	7823      	ldrb	r3, [r4, #0]
 80167fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8016800:	d10a      	bne.n	8016818 <_svfiprintf_r+0x130>
 8016802:	7863      	ldrb	r3, [r4, #1]
 8016804:	2b2a      	cmp	r3, #42	@ 0x2a
 8016806:	d132      	bne.n	801686e <_svfiprintf_r+0x186>
 8016808:	9b03      	ldr	r3, [sp, #12]
 801680a:	3402      	adds	r4, #2
 801680c:	1d1a      	adds	r2, r3, #4
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016814:	9203      	str	r2, [sp, #12]
 8016816:	9305      	str	r3, [sp, #20]
 8016818:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80168dc <_svfiprintf_r+0x1f4>
 801681c:	2203      	movs	r2, #3
 801681e:	7821      	ldrb	r1, [r4, #0]
 8016820:	4650      	mov	r0, sl
 8016822:	f7fe fbf2 	bl	801500a <memchr>
 8016826:	b138      	cbz	r0, 8016838 <_svfiprintf_r+0x150>
 8016828:	eba0 000a 	sub.w	r0, r0, sl
 801682c:	2240      	movs	r2, #64	@ 0x40
 801682e:	9b04      	ldr	r3, [sp, #16]
 8016830:	3401      	adds	r4, #1
 8016832:	4082      	lsls	r2, r0
 8016834:	4313      	orrs	r3, r2
 8016836:	9304      	str	r3, [sp, #16]
 8016838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801683c:	2206      	movs	r2, #6
 801683e:	4824      	ldr	r0, [pc, #144]	@ (80168d0 <_svfiprintf_r+0x1e8>)
 8016840:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016844:	f7fe fbe1 	bl	801500a <memchr>
 8016848:	2800      	cmp	r0, #0
 801684a:	d036      	beq.n	80168ba <_svfiprintf_r+0x1d2>
 801684c:	4b21      	ldr	r3, [pc, #132]	@ (80168d4 <_svfiprintf_r+0x1ec>)
 801684e:	bb1b      	cbnz	r3, 8016898 <_svfiprintf_r+0x1b0>
 8016850:	9b03      	ldr	r3, [sp, #12]
 8016852:	3307      	adds	r3, #7
 8016854:	f023 0307 	bic.w	r3, r3, #7
 8016858:	3308      	adds	r3, #8
 801685a:	9303      	str	r3, [sp, #12]
 801685c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801685e:	4433      	add	r3, r6
 8016860:	9309      	str	r3, [sp, #36]	@ 0x24
 8016862:	e76a      	b.n	801673a <_svfiprintf_r+0x52>
 8016864:	fb0c 3202 	mla	r2, ip, r2, r3
 8016868:	460c      	mov	r4, r1
 801686a:	2001      	movs	r0, #1
 801686c:	e7a8      	b.n	80167c0 <_svfiprintf_r+0xd8>
 801686e:	2300      	movs	r3, #0
 8016870:	3401      	adds	r4, #1
 8016872:	f04f 0c0a 	mov.w	ip, #10
 8016876:	4619      	mov	r1, r3
 8016878:	9305      	str	r3, [sp, #20]
 801687a:	4620      	mov	r0, r4
 801687c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016880:	3a30      	subs	r2, #48	@ 0x30
 8016882:	2a09      	cmp	r2, #9
 8016884:	d903      	bls.n	801688e <_svfiprintf_r+0x1a6>
 8016886:	2b00      	cmp	r3, #0
 8016888:	d0c6      	beq.n	8016818 <_svfiprintf_r+0x130>
 801688a:	9105      	str	r1, [sp, #20]
 801688c:	e7c4      	b.n	8016818 <_svfiprintf_r+0x130>
 801688e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016892:	4604      	mov	r4, r0
 8016894:	2301      	movs	r3, #1
 8016896:	e7f0      	b.n	801687a <_svfiprintf_r+0x192>
 8016898:	ab03      	add	r3, sp, #12
 801689a:	462a      	mov	r2, r5
 801689c:	a904      	add	r1, sp, #16
 801689e:	4638      	mov	r0, r7
 80168a0:	9300      	str	r3, [sp, #0]
 80168a2:	4b0d      	ldr	r3, [pc, #52]	@ (80168d8 <_svfiprintf_r+0x1f0>)
 80168a4:	f7fd fbd4 	bl	8014050 <_printf_float>
 80168a8:	1c42      	adds	r2, r0, #1
 80168aa:	4606      	mov	r6, r0
 80168ac:	d1d6      	bne.n	801685c <_svfiprintf_r+0x174>
 80168ae:	89ab      	ldrh	r3, [r5, #12]
 80168b0:	065b      	lsls	r3, r3, #25
 80168b2:	f53f af2d 	bmi.w	8016710 <_svfiprintf_r+0x28>
 80168b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80168b8:	e72c      	b.n	8016714 <_svfiprintf_r+0x2c>
 80168ba:	ab03      	add	r3, sp, #12
 80168bc:	462a      	mov	r2, r5
 80168be:	a904      	add	r1, sp, #16
 80168c0:	4638      	mov	r0, r7
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	4b04      	ldr	r3, [pc, #16]	@ (80168d8 <_svfiprintf_r+0x1f0>)
 80168c6:	f7fd fe5f 	bl	8014588 <_printf_i>
 80168ca:	e7ed      	b.n	80168a8 <_svfiprintf_r+0x1c0>
 80168cc:	080180d0 	.word	0x080180d0
 80168d0:	080180da 	.word	0x080180da
 80168d4:	08014051 	.word	0x08014051
 80168d8:	08016631 	.word	0x08016631
 80168dc:	080180d6 	.word	0x080180d6

080168e0 <__sflush_r>:
 80168e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e8:	0716      	lsls	r6, r2, #28
 80168ea:	4605      	mov	r5, r0
 80168ec:	460c      	mov	r4, r1
 80168ee:	d454      	bmi.n	801699a <__sflush_r+0xba>
 80168f0:	684b      	ldr	r3, [r1, #4]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	dc02      	bgt.n	80168fc <__sflush_r+0x1c>
 80168f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	dd48      	ble.n	801698e <__sflush_r+0xae>
 80168fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80168fe:	2e00      	cmp	r6, #0
 8016900:	d045      	beq.n	801698e <__sflush_r+0xae>
 8016902:	2300      	movs	r3, #0
 8016904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016908:	682f      	ldr	r7, [r5, #0]
 801690a:	6a21      	ldr	r1, [r4, #32]
 801690c:	602b      	str	r3, [r5, #0]
 801690e:	d030      	beq.n	8016972 <__sflush_r+0x92>
 8016910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016912:	89a3      	ldrh	r3, [r4, #12]
 8016914:	0759      	lsls	r1, r3, #29
 8016916:	d505      	bpl.n	8016924 <__sflush_r+0x44>
 8016918:	6863      	ldr	r3, [r4, #4]
 801691a:	1ad2      	subs	r2, r2, r3
 801691c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801691e:	b10b      	cbz	r3, 8016924 <__sflush_r+0x44>
 8016920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016922:	1ad2      	subs	r2, r2, r3
 8016924:	2300      	movs	r3, #0
 8016926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016928:	6a21      	ldr	r1, [r4, #32]
 801692a:	4628      	mov	r0, r5
 801692c:	47b0      	blx	r6
 801692e:	1c43      	adds	r3, r0, #1
 8016930:	89a3      	ldrh	r3, [r4, #12]
 8016932:	d106      	bne.n	8016942 <__sflush_r+0x62>
 8016934:	6829      	ldr	r1, [r5, #0]
 8016936:	291d      	cmp	r1, #29
 8016938:	d82b      	bhi.n	8016992 <__sflush_r+0xb2>
 801693a:	4a2a      	ldr	r2, [pc, #168]	@ (80169e4 <__sflush_r+0x104>)
 801693c:	410a      	asrs	r2, r1
 801693e:	07d6      	lsls	r6, r2, #31
 8016940:	d427      	bmi.n	8016992 <__sflush_r+0xb2>
 8016942:	2200      	movs	r2, #0
 8016944:	04d9      	lsls	r1, r3, #19
 8016946:	6062      	str	r2, [r4, #4]
 8016948:	6922      	ldr	r2, [r4, #16]
 801694a:	6022      	str	r2, [r4, #0]
 801694c:	d504      	bpl.n	8016958 <__sflush_r+0x78>
 801694e:	1c42      	adds	r2, r0, #1
 8016950:	d101      	bne.n	8016956 <__sflush_r+0x76>
 8016952:	682b      	ldr	r3, [r5, #0]
 8016954:	b903      	cbnz	r3, 8016958 <__sflush_r+0x78>
 8016956:	6560      	str	r0, [r4, #84]	@ 0x54
 8016958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801695a:	602f      	str	r7, [r5, #0]
 801695c:	b1b9      	cbz	r1, 801698e <__sflush_r+0xae>
 801695e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016962:	4299      	cmp	r1, r3
 8016964:	d002      	beq.n	801696c <__sflush_r+0x8c>
 8016966:	4628      	mov	r0, r5
 8016968:	f7ff f9da 	bl	8015d20 <_free_r>
 801696c:	2300      	movs	r3, #0
 801696e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016970:	e00d      	b.n	801698e <__sflush_r+0xae>
 8016972:	2301      	movs	r3, #1
 8016974:	4628      	mov	r0, r5
 8016976:	47b0      	blx	r6
 8016978:	4602      	mov	r2, r0
 801697a:	1c50      	adds	r0, r2, #1
 801697c:	d1c9      	bne.n	8016912 <__sflush_r+0x32>
 801697e:	682b      	ldr	r3, [r5, #0]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d0c6      	beq.n	8016912 <__sflush_r+0x32>
 8016984:	2b1d      	cmp	r3, #29
 8016986:	d001      	beq.n	801698c <__sflush_r+0xac>
 8016988:	2b16      	cmp	r3, #22
 801698a:	d11d      	bne.n	80169c8 <__sflush_r+0xe8>
 801698c:	602f      	str	r7, [r5, #0]
 801698e:	2000      	movs	r0, #0
 8016990:	e021      	b.n	80169d6 <__sflush_r+0xf6>
 8016992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016996:	b21b      	sxth	r3, r3
 8016998:	e01a      	b.n	80169d0 <__sflush_r+0xf0>
 801699a:	690f      	ldr	r7, [r1, #16]
 801699c:	2f00      	cmp	r7, #0
 801699e:	d0f6      	beq.n	801698e <__sflush_r+0xae>
 80169a0:	0793      	lsls	r3, r2, #30
 80169a2:	680e      	ldr	r6, [r1, #0]
 80169a4:	600f      	str	r7, [r1, #0]
 80169a6:	bf0c      	ite	eq
 80169a8:	694b      	ldreq	r3, [r1, #20]
 80169aa:	2300      	movne	r3, #0
 80169ac:	eba6 0807 	sub.w	r8, r6, r7
 80169b0:	608b      	str	r3, [r1, #8]
 80169b2:	f1b8 0f00 	cmp.w	r8, #0
 80169b6:	ddea      	ble.n	801698e <__sflush_r+0xae>
 80169b8:	4643      	mov	r3, r8
 80169ba:	463a      	mov	r2, r7
 80169bc:	6a21      	ldr	r1, [r4, #32]
 80169be:	4628      	mov	r0, r5
 80169c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80169c2:	47b0      	blx	r6
 80169c4:	2800      	cmp	r0, #0
 80169c6:	dc08      	bgt.n	80169da <__sflush_r+0xfa>
 80169c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80169d0:	f04f 30ff 	mov.w	r0, #4294967295
 80169d4:	81a3      	strh	r3, [r4, #12]
 80169d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169da:	4407      	add	r7, r0
 80169dc:	eba8 0800 	sub.w	r8, r8, r0
 80169e0:	e7e7      	b.n	80169b2 <__sflush_r+0xd2>
 80169e2:	bf00      	nop
 80169e4:	dfbffffe 	.word	0xdfbffffe

080169e8 <_fflush_r>:
 80169e8:	b538      	push	{r3, r4, r5, lr}
 80169ea:	690b      	ldr	r3, [r1, #16]
 80169ec:	4605      	mov	r5, r0
 80169ee:	460c      	mov	r4, r1
 80169f0:	b913      	cbnz	r3, 80169f8 <_fflush_r+0x10>
 80169f2:	2500      	movs	r5, #0
 80169f4:	4628      	mov	r0, r5
 80169f6:	bd38      	pop	{r3, r4, r5, pc}
 80169f8:	b118      	cbz	r0, 8016a02 <_fflush_r+0x1a>
 80169fa:	6a03      	ldr	r3, [r0, #32]
 80169fc:	b90b      	cbnz	r3, 8016a02 <_fflush_r+0x1a>
 80169fe:	f7fd ff6f 	bl	80148e0 <__sinit>
 8016a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d0f3      	beq.n	80169f2 <_fflush_r+0xa>
 8016a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a0c:	07d0      	lsls	r0, r2, #31
 8016a0e:	d404      	bmi.n	8016a1a <_fflush_r+0x32>
 8016a10:	0599      	lsls	r1, r3, #22
 8016a12:	d402      	bmi.n	8016a1a <_fflush_r+0x32>
 8016a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a16:	f7fe faf6 	bl	8015006 <__retarget_lock_acquire_recursive>
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	4621      	mov	r1, r4
 8016a1e:	f7ff ff5f 	bl	80168e0 <__sflush_r>
 8016a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a24:	4605      	mov	r5, r0
 8016a26:	07da      	lsls	r2, r3, #31
 8016a28:	d4e4      	bmi.n	80169f4 <_fflush_r+0xc>
 8016a2a:	89a3      	ldrh	r3, [r4, #12]
 8016a2c:	059b      	lsls	r3, r3, #22
 8016a2e:	d4e1      	bmi.n	80169f4 <_fflush_r+0xc>
 8016a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a32:	f7fe fae9 	bl	8015008 <__retarget_lock_release_recursive>
 8016a36:	e7dd      	b.n	80169f4 <_fflush_r+0xc>

08016a38 <fiprintf>:
 8016a38:	b40e      	push	{r1, r2, r3}
 8016a3a:	b503      	push	{r0, r1, lr}
 8016a3c:	ab03      	add	r3, sp, #12
 8016a3e:	4601      	mov	r1, r0
 8016a40:	4805      	ldr	r0, [pc, #20]	@ (8016a58 <fiprintf+0x20>)
 8016a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a46:	6800      	ldr	r0, [r0, #0]
 8016a48:	9301      	str	r3, [sp, #4]
 8016a4a:	f000 f97b 	bl	8016d44 <_vfiprintf_r>
 8016a4e:	b002      	add	sp, #8
 8016a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a54:	b003      	add	sp, #12
 8016a56:	4770      	bx	lr
 8016a58:	200001b4 	.word	0x200001b4

08016a5c <__swhatbuf_r>:
 8016a5c:	b570      	push	{r4, r5, r6, lr}
 8016a5e:	460c      	mov	r4, r1
 8016a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a64:	b096      	sub	sp, #88	@ 0x58
 8016a66:	4615      	mov	r5, r2
 8016a68:	2900      	cmp	r1, #0
 8016a6a:	461e      	mov	r6, r3
 8016a6c:	da0c      	bge.n	8016a88 <__swhatbuf_r+0x2c>
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	2100      	movs	r1, #0
 8016a72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016a76:	bf14      	ite	ne
 8016a78:	2340      	movne	r3, #64	@ 0x40
 8016a7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016a7e:	2000      	movs	r0, #0
 8016a80:	6031      	str	r1, [r6, #0]
 8016a82:	602b      	str	r3, [r5, #0]
 8016a84:	b016      	add	sp, #88	@ 0x58
 8016a86:	bd70      	pop	{r4, r5, r6, pc}
 8016a88:	466a      	mov	r2, sp
 8016a8a:	f000 f897 	bl	8016bbc <_fstat_r>
 8016a8e:	2800      	cmp	r0, #0
 8016a90:	dbed      	blt.n	8016a6e <__swhatbuf_r+0x12>
 8016a92:	9901      	ldr	r1, [sp, #4]
 8016a94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016a98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016a9c:	4259      	negs	r1, r3
 8016a9e:	4159      	adcs	r1, r3
 8016aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016aa4:	e7eb      	b.n	8016a7e <__swhatbuf_r+0x22>

08016aa6 <__smakebuf_r>:
 8016aa6:	898b      	ldrh	r3, [r1, #12]
 8016aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016aaa:	079d      	lsls	r5, r3, #30
 8016aac:	4606      	mov	r6, r0
 8016aae:	460c      	mov	r4, r1
 8016ab0:	d507      	bpl.n	8016ac2 <__smakebuf_r+0x1c>
 8016ab2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016ab6:	6023      	str	r3, [r4, #0]
 8016ab8:	6123      	str	r3, [r4, #16]
 8016aba:	2301      	movs	r3, #1
 8016abc:	6163      	str	r3, [r4, #20]
 8016abe:	b003      	add	sp, #12
 8016ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ac2:	ab01      	add	r3, sp, #4
 8016ac4:	466a      	mov	r2, sp
 8016ac6:	f7ff ffc9 	bl	8016a5c <__swhatbuf_r>
 8016aca:	9f00      	ldr	r7, [sp, #0]
 8016acc:	4605      	mov	r5, r0
 8016ace:	4630      	mov	r0, r6
 8016ad0:	4639      	mov	r1, r7
 8016ad2:	f7ff f999 	bl	8015e08 <_malloc_r>
 8016ad6:	b948      	cbnz	r0, 8016aec <__smakebuf_r+0x46>
 8016ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016adc:	059a      	lsls	r2, r3, #22
 8016ade:	d4ee      	bmi.n	8016abe <__smakebuf_r+0x18>
 8016ae0:	f023 0303 	bic.w	r3, r3, #3
 8016ae4:	f043 0302 	orr.w	r3, r3, #2
 8016ae8:	81a3      	strh	r3, [r4, #12]
 8016aea:	e7e2      	b.n	8016ab2 <__smakebuf_r+0xc>
 8016aec:	89a3      	ldrh	r3, [r4, #12]
 8016aee:	6020      	str	r0, [r4, #0]
 8016af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016af4:	81a3      	strh	r3, [r4, #12]
 8016af6:	9b01      	ldr	r3, [sp, #4]
 8016af8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016afc:	b15b      	cbz	r3, 8016b16 <__smakebuf_r+0x70>
 8016afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b02:	4630      	mov	r0, r6
 8016b04:	f000 f86c 	bl	8016be0 <_isatty_r>
 8016b08:	b128      	cbz	r0, 8016b16 <__smakebuf_r+0x70>
 8016b0a:	89a3      	ldrh	r3, [r4, #12]
 8016b0c:	f023 0303 	bic.w	r3, r3, #3
 8016b10:	f043 0301 	orr.w	r3, r3, #1
 8016b14:	81a3      	strh	r3, [r4, #12]
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	431d      	orrs	r5, r3
 8016b1a:	81a5      	strh	r5, [r4, #12]
 8016b1c:	e7cf      	b.n	8016abe <__smakebuf_r+0x18>

08016b1e <_putc_r>:
 8016b1e:	b570      	push	{r4, r5, r6, lr}
 8016b20:	460d      	mov	r5, r1
 8016b22:	4614      	mov	r4, r2
 8016b24:	4606      	mov	r6, r0
 8016b26:	b118      	cbz	r0, 8016b30 <_putc_r+0x12>
 8016b28:	6a03      	ldr	r3, [r0, #32]
 8016b2a:	b90b      	cbnz	r3, 8016b30 <_putc_r+0x12>
 8016b2c:	f7fd fed8 	bl	80148e0 <__sinit>
 8016b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b32:	07d8      	lsls	r0, r3, #31
 8016b34:	d405      	bmi.n	8016b42 <_putc_r+0x24>
 8016b36:	89a3      	ldrh	r3, [r4, #12]
 8016b38:	0599      	lsls	r1, r3, #22
 8016b3a:	d402      	bmi.n	8016b42 <_putc_r+0x24>
 8016b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b3e:	f7fe fa62 	bl	8015006 <__retarget_lock_acquire_recursive>
 8016b42:	68a3      	ldr	r3, [r4, #8]
 8016b44:	3b01      	subs	r3, #1
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	60a3      	str	r3, [r4, #8]
 8016b4a:	da05      	bge.n	8016b58 <_putc_r+0x3a>
 8016b4c:	69a2      	ldr	r2, [r4, #24]
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	db12      	blt.n	8016b78 <_putc_r+0x5a>
 8016b52:	b2eb      	uxtb	r3, r5
 8016b54:	2b0a      	cmp	r3, #10
 8016b56:	d00f      	beq.n	8016b78 <_putc_r+0x5a>
 8016b58:	6823      	ldr	r3, [r4, #0]
 8016b5a:	1c5a      	adds	r2, r3, #1
 8016b5c:	6022      	str	r2, [r4, #0]
 8016b5e:	701d      	strb	r5, [r3, #0]
 8016b60:	b2ed      	uxtb	r5, r5
 8016b62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b64:	07da      	lsls	r2, r3, #31
 8016b66:	d405      	bmi.n	8016b74 <_putc_r+0x56>
 8016b68:	89a3      	ldrh	r3, [r4, #12]
 8016b6a:	059b      	lsls	r3, r3, #22
 8016b6c:	d402      	bmi.n	8016b74 <_putc_r+0x56>
 8016b6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b70:	f7fe fa4a 	bl	8015008 <__retarget_lock_release_recursive>
 8016b74:	4628      	mov	r0, r5
 8016b76:	bd70      	pop	{r4, r5, r6, pc}
 8016b78:	4629      	mov	r1, r5
 8016b7a:	4622      	mov	r2, r4
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f7fe f8af 	bl	8014ce0 <__swbuf_r>
 8016b82:	4605      	mov	r5, r0
 8016b84:	e7ed      	b.n	8016b62 <_putc_r+0x44>

08016b86 <memmove>:
 8016b86:	4288      	cmp	r0, r1
 8016b88:	b510      	push	{r4, lr}
 8016b8a:	eb01 0402 	add.w	r4, r1, r2
 8016b8e:	d902      	bls.n	8016b96 <memmove+0x10>
 8016b90:	4284      	cmp	r4, r0
 8016b92:	4623      	mov	r3, r4
 8016b94:	d807      	bhi.n	8016ba6 <memmove+0x20>
 8016b96:	1e43      	subs	r3, r0, #1
 8016b98:	42a1      	cmp	r1, r4
 8016b9a:	d008      	beq.n	8016bae <memmove+0x28>
 8016b9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ba0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ba4:	e7f8      	b.n	8016b98 <memmove+0x12>
 8016ba6:	4402      	add	r2, r0
 8016ba8:	4601      	mov	r1, r0
 8016baa:	428a      	cmp	r2, r1
 8016bac:	d100      	bne.n	8016bb0 <memmove+0x2a>
 8016bae:	bd10      	pop	{r4, pc}
 8016bb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016bb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016bb8:	e7f7      	b.n	8016baa <memmove+0x24>
	...

08016bbc <_fstat_r>:
 8016bbc:	b538      	push	{r3, r4, r5, lr}
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	4d06      	ldr	r5, [pc, #24]	@ (8016bdc <_fstat_r+0x20>)
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	4608      	mov	r0, r1
 8016bc6:	4611      	mov	r1, r2
 8016bc8:	602b      	str	r3, [r5, #0]
 8016bca:	f7ee fbdd 	bl	8005388 <_fstat>
 8016bce:	1c43      	adds	r3, r0, #1
 8016bd0:	d102      	bne.n	8016bd8 <_fstat_r+0x1c>
 8016bd2:	682b      	ldr	r3, [r5, #0]
 8016bd4:	b103      	cbz	r3, 8016bd8 <_fstat_r+0x1c>
 8016bd6:	6023      	str	r3, [r4, #0]
 8016bd8:	bd38      	pop	{r3, r4, r5, pc}
 8016bda:	bf00      	nop
 8016bdc:	200044f8 	.word	0x200044f8

08016be0 <_isatty_r>:
 8016be0:	b538      	push	{r3, r4, r5, lr}
 8016be2:	2300      	movs	r3, #0
 8016be4:	4d05      	ldr	r5, [pc, #20]	@ (8016bfc <_isatty_r+0x1c>)
 8016be6:	4604      	mov	r4, r0
 8016be8:	4608      	mov	r0, r1
 8016bea:	602b      	str	r3, [r5, #0]
 8016bec:	f7ee fbdc 	bl	80053a8 <_isatty>
 8016bf0:	1c43      	adds	r3, r0, #1
 8016bf2:	d102      	bne.n	8016bfa <_isatty_r+0x1a>
 8016bf4:	682b      	ldr	r3, [r5, #0]
 8016bf6:	b103      	cbz	r3, 8016bfa <_isatty_r+0x1a>
 8016bf8:	6023      	str	r3, [r4, #0]
 8016bfa:	bd38      	pop	{r3, r4, r5, pc}
 8016bfc:	200044f8 	.word	0x200044f8

08016c00 <_sbrk_r>:
 8016c00:	b538      	push	{r3, r4, r5, lr}
 8016c02:	2300      	movs	r3, #0
 8016c04:	4d05      	ldr	r5, [pc, #20]	@ (8016c1c <_sbrk_r+0x1c>)
 8016c06:	4604      	mov	r4, r0
 8016c08:	4608      	mov	r0, r1
 8016c0a:	602b      	str	r3, [r5, #0]
 8016c0c:	f7ee fbe4 	bl	80053d8 <_sbrk>
 8016c10:	1c43      	adds	r3, r0, #1
 8016c12:	d102      	bne.n	8016c1a <_sbrk_r+0x1a>
 8016c14:	682b      	ldr	r3, [r5, #0]
 8016c16:	b103      	cbz	r3, 8016c1a <_sbrk_r+0x1a>
 8016c18:	6023      	str	r3, [r4, #0]
 8016c1a:	bd38      	pop	{r3, r4, r5, pc}
 8016c1c:	200044f8 	.word	0x200044f8

08016c20 <abort>:
 8016c20:	2006      	movs	r0, #6
 8016c22:	b508      	push	{r3, lr}
 8016c24:	f000 f9ce 	bl	8016fc4 <raise>
 8016c28:	2001      	movs	r0, #1
 8016c2a:	f7ee fb5d 	bl	80052e8 <_exit>

08016c2e <_calloc_r>:
 8016c2e:	b570      	push	{r4, r5, r6, lr}
 8016c30:	fba1 5402 	umull	r5, r4, r1, r2
 8016c34:	b93c      	cbnz	r4, 8016c46 <_calloc_r+0x18>
 8016c36:	4629      	mov	r1, r5
 8016c38:	f7ff f8e6 	bl	8015e08 <_malloc_r>
 8016c3c:	4606      	mov	r6, r0
 8016c3e:	b928      	cbnz	r0, 8016c4c <_calloc_r+0x1e>
 8016c40:	2600      	movs	r6, #0
 8016c42:	4630      	mov	r0, r6
 8016c44:	bd70      	pop	{r4, r5, r6, pc}
 8016c46:	220c      	movs	r2, #12
 8016c48:	6002      	str	r2, [r0, #0]
 8016c4a:	e7f9      	b.n	8016c40 <_calloc_r+0x12>
 8016c4c:	462a      	mov	r2, r5
 8016c4e:	4621      	mov	r1, r4
 8016c50:	f7fe f8da 	bl	8014e08 <memset>
 8016c54:	e7f5      	b.n	8016c42 <_calloc_r+0x14>

08016c56 <__ascii_mbtowc>:
 8016c56:	b082      	sub	sp, #8
 8016c58:	b901      	cbnz	r1, 8016c5c <__ascii_mbtowc+0x6>
 8016c5a:	a901      	add	r1, sp, #4
 8016c5c:	b142      	cbz	r2, 8016c70 <__ascii_mbtowc+0x1a>
 8016c5e:	b14b      	cbz	r3, 8016c74 <__ascii_mbtowc+0x1e>
 8016c60:	7813      	ldrb	r3, [r2, #0]
 8016c62:	600b      	str	r3, [r1, #0]
 8016c64:	7812      	ldrb	r2, [r2, #0]
 8016c66:	1e10      	subs	r0, r2, #0
 8016c68:	bf18      	it	ne
 8016c6a:	2001      	movne	r0, #1
 8016c6c:	b002      	add	sp, #8
 8016c6e:	4770      	bx	lr
 8016c70:	4610      	mov	r0, r2
 8016c72:	e7fb      	b.n	8016c6c <__ascii_mbtowc+0x16>
 8016c74:	f06f 0001 	mvn.w	r0, #1
 8016c78:	e7f8      	b.n	8016c6c <__ascii_mbtowc+0x16>

08016c7a <_realloc_r>:
 8016c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c7e:	4680      	mov	r8, r0
 8016c80:	4615      	mov	r5, r2
 8016c82:	460c      	mov	r4, r1
 8016c84:	b921      	cbnz	r1, 8016c90 <_realloc_r+0x16>
 8016c86:	4611      	mov	r1, r2
 8016c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c8c:	f7ff b8bc 	b.w	8015e08 <_malloc_r>
 8016c90:	b92a      	cbnz	r2, 8016c9e <_realloc_r+0x24>
 8016c92:	f7ff f845 	bl	8015d20 <_free_r>
 8016c96:	2400      	movs	r4, #0
 8016c98:	4620      	mov	r0, r4
 8016c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c9e:	f000 f9ad 	bl	8016ffc <_malloc_usable_size_r>
 8016ca2:	4285      	cmp	r5, r0
 8016ca4:	4606      	mov	r6, r0
 8016ca6:	d802      	bhi.n	8016cae <_realloc_r+0x34>
 8016ca8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016cac:	d8f4      	bhi.n	8016c98 <_realloc_r+0x1e>
 8016cae:	4629      	mov	r1, r5
 8016cb0:	4640      	mov	r0, r8
 8016cb2:	f7ff f8a9 	bl	8015e08 <_malloc_r>
 8016cb6:	4607      	mov	r7, r0
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	d0ec      	beq.n	8016c96 <_realloc_r+0x1c>
 8016cbc:	42b5      	cmp	r5, r6
 8016cbe:	462a      	mov	r2, r5
 8016cc0:	4621      	mov	r1, r4
 8016cc2:	bf28      	it	cs
 8016cc4:	4632      	movcs	r2, r6
 8016cc6:	f7fe f9ae 	bl	8015026 <memcpy>
 8016cca:	4621      	mov	r1, r4
 8016ccc:	4640      	mov	r0, r8
 8016cce:	463c      	mov	r4, r7
 8016cd0:	f7ff f826 	bl	8015d20 <_free_r>
 8016cd4:	e7e0      	b.n	8016c98 <_realloc_r+0x1e>

08016cd6 <__ascii_wctomb>:
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	4608      	mov	r0, r1
 8016cda:	b141      	cbz	r1, 8016cee <__ascii_wctomb+0x18>
 8016cdc:	2aff      	cmp	r2, #255	@ 0xff
 8016cde:	d904      	bls.n	8016cea <__ascii_wctomb+0x14>
 8016ce0:	228a      	movs	r2, #138	@ 0x8a
 8016ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ce6:	601a      	str	r2, [r3, #0]
 8016ce8:	4770      	bx	lr
 8016cea:	2001      	movs	r0, #1
 8016cec:	700a      	strb	r2, [r1, #0]
 8016cee:	4770      	bx	lr

08016cf0 <__sfputc_r>:
 8016cf0:	6893      	ldr	r3, [r2, #8]
 8016cf2:	3b01      	subs	r3, #1
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	6093      	str	r3, [r2, #8]
 8016cf8:	b410      	push	{r4}
 8016cfa:	da08      	bge.n	8016d0e <__sfputc_r+0x1e>
 8016cfc:	6994      	ldr	r4, [r2, #24]
 8016cfe:	42a3      	cmp	r3, r4
 8016d00:	db01      	blt.n	8016d06 <__sfputc_r+0x16>
 8016d02:	290a      	cmp	r1, #10
 8016d04:	d103      	bne.n	8016d0e <__sfputc_r+0x1e>
 8016d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d0a:	f7fd bfe9 	b.w	8014ce0 <__swbuf_r>
 8016d0e:	6813      	ldr	r3, [r2, #0]
 8016d10:	1c58      	adds	r0, r3, #1
 8016d12:	6010      	str	r0, [r2, #0]
 8016d14:	4608      	mov	r0, r1
 8016d16:	7019      	strb	r1, [r3, #0]
 8016d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d1c:	4770      	bx	lr

08016d1e <__sfputs_r>:
 8016d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d20:	4606      	mov	r6, r0
 8016d22:	460f      	mov	r7, r1
 8016d24:	4614      	mov	r4, r2
 8016d26:	18d5      	adds	r5, r2, r3
 8016d28:	42ac      	cmp	r4, r5
 8016d2a:	d101      	bne.n	8016d30 <__sfputs_r+0x12>
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	e007      	b.n	8016d40 <__sfputs_r+0x22>
 8016d30:	463a      	mov	r2, r7
 8016d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d36:	4630      	mov	r0, r6
 8016d38:	f7ff ffda 	bl	8016cf0 <__sfputc_r>
 8016d3c:	1c43      	adds	r3, r0, #1
 8016d3e:	d1f3      	bne.n	8016d28 <__sfputs_r+0xa>
 8016d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d44 <_vfiprintf_r>:
 8016d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d48:	460d      	mov	r5, r1
 8016d4a:	b09d      	sub	sp, #116	@ 0x74
 8016d4c:	4614      	mov	r4, r2
 8016d4e:	4698      	mov	r8, r3
 8016d50:	4606      	mov	r6, r0
 8016d52:	b118      	cbz	r0, 8016d5c <_vfiprintf_r+0x18>
 8016d54:	6a03      	ldr	r3, [r0, #32]
 8016d56:	b90b      	cbnz	r3, 8016d5c <_vfiprintf_r+0x18>
 8016d58:	f7fd fdc2 	bl	80148e0 <__sinit>
 8016d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d5e:	07d9      	lsls	r1, r3, #31
 8016d60:	d405      	bmi.n	8016d6e <_vfiprintf_r+0x2a>
 8016d62:	89ab      	ldrh	r3, [r5, #12]
 8016d64:	059a      	lsls	r2, r3, #22
 8016d66:	d402      	bmi.n	8016d6e <_vfiprintf_r+0x2a>
 8016d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d6a:	f7fe f94c 	bl	8015006 <__retarget_lock_acquire_recursive>
 8016d6e:	89ab      	ldrh	r3, [r5, #12]
 8016d70:	071b      	lsls	r3, r3, #28
 8016d72:	d501      	bpl.n	8016d78 <_vfiprintf_r+0x34>
 8016d74:	692b      	ldr	r3, [r5, #16]
 8016d76:	b99b      	cbnz	r3, 8016da0 <_vfiprintf_r+0x5c>
 8016d78:	4629      	mov	r1, r5
 8016d7a:	4630      	mov	r0, r6
 8016d7c:	f7fd ffee 	bl	8014d5c <__swsetup_r>
 8016d80:	b170      	cbz	r0, 8016da0 <_vfiprintf_r+0x5c>
 8016d82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d84:	07dc      	lsls	r4, r3, #31
 8016d86:	d504      	bpl.n	8016d92 <_vfiprintf_r+0x4e>
 8016d88:	f04f 30ff 	mov.w	r0, #4294967295
 8016d8c:	b01d      	add	sp, #116	@ 0x74
 8016d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d92:	89ab      	ldrh	r3, [r5, #12]
 8016d94:	0598      	lsls	r0, r3, #22
 8016d96:	d4f7      	bmi.n	8016d88 <_vfiprintf_r+0x44>
 8016d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d9a:	f7fe f935 	bl	8015008 <__retarget_lock_release_recursive>
 8016d9e:	e7f3      	b.n	8016d88 <_vfiprintf_r+0x44>
 8016da0:	2300      	movs	r3, #0
 8016da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016da6:	f04f 0901 	mov.w	r9, #1
 8016daa:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8016f60 <_vfiprintf_r+0x21c>
 8016dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8016db0:	2320      	movs	r3, #32
 8016db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016db6:	2330      	movs	r3, #48	@ 0x30
 8016db8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016dbc:	4623      	mov	r3, r4
 8016dbe:	469a      	mov	sl, r3
 8016dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016dc4:	b10a      	cbz	r2, 8016dca <_vfiprintf_r+0x86>
 8016dc6:	2a25      	cmp	r2, #37	@ 0x25
 8016dc8:	d1f9      	bne.n	8016dbe <_vfiprintf_r+0x7a>
 8016dca:	ebba 0b04 	subs.w	fp, sl, r4
 8016dce:	d00b      	beq.n	8016de8 <_vfiprintf_r+0xa4>
 8016dd0:	465b      	mov	r3, fp
 8016dd2:	4622      	mov	r2, r4
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	4630      	mov	r0, r6
 8016dd8:	f7ff ffa1 	bl	8016d1e <__sfputs_r>
 8016ddc:	3001      	adds	r0, #1
 8016dde:	f000 80a7 	beq.w	8016f30 <_vfiprintf_r+0x1ec>
 8016de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016de4:	445a      	add	r2, fp
 8016de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016de8:	f89a 3000 	ldrb.w	r3, [sl]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	f000 809f 	beq.w	8016f30 <_vfiprintf_r+0x1ec>
 8016df2:	2300      	movs	r3, #0
 8016df4:	f04f 32ff 	mov.w	r2, #4294967295
 8016df8:	f10a 0a01 	add.w	sl, sl, #1
 8016dfc:	9304      	str	r3, [sp, #16]
 8016dfe:	9307      	str	r3, [sp, #28]
 8016e00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e04:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e0a:	4654      	mov	r4, sl
 8016e0c:	2205      	movs	r2, #5
 8016e0e:	4854      	ldr	r0, [pc, #336]	@ (8016f60 <_vfiprintf_r+0x21c>)
 8016e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e14:	f7fe f8f9 	bl	801500a <memchr>
 8016e18:	9a04      	ldr	r2, [sp, #16]
 8016e1a:	b9d8      	cbnz	r0, 8016e54 <_vfiprintf_r+0x110>
 8016e1c:	06d1      	lsls	r1, r2, #27
 8016e1e:	bf44      	itt	mi
 8016e20:	2320      	movmi	r3, #32
 8016e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e26:	0713      	lsls	r3, r2, #28
 8016e28:	bf44      	itt	mi
 8016e2a:	232b      	movmi	r3, #43	@ 0x2b
 8016e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e30:	f89a 3000 	ldrb.w	r3, [sl]
 8016e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e36:	d015      	beq.n	8016e64 <_vfiprintf_r+0x120>
 8016e38:	9a07      	ldr	r2, [sp, #28]
 8016e3a:	4654      	mov	r4, sl
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	f04f 0c0a 	mov.w	ip, #10
 8016e42:	4621      	mov	r1, r4
 8016e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e48:	3b30      	subs	r3, #48	@ 0x30
 8016e4a:	2b09      	cmp	r3, #9
 8016e4c:	d94b      	bls.n	8016ee6 <_vfiprintf_r+0x1a2>
 8016e4e:	b1b0      	cbz	r0, 8016e7e <_vfiprintf_r+0x13a>
 8016e50:	9207      	str	r2, [sp, #28]
 8016e52:	e014      	b.n	8016e7e <_vfiprintf_r+0x13a>
 8016e54:	eba0 0308 	sub.w	r3, r0, r8
 8016e58:	46a2      	mov	sl, r4
 8016e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	9304      	str	r3, [sp, #16]
 8016e62:	e7d2      	b.n	8016e0a <_vfiprintf_r+0xc6>
 8016e64:	9b03      	ldr	r3, [sp, #12]
 8016e66:	1d19      	adds	r1, r3, #4
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	9103      	str	r1, [sp, #12]
 8016e6e:	bfbb      	ittet	lt
 8016e70:	425b      	neglt	r3, r3
 8016e72:	f042 0202 	orrlt.w	r2, r2, #2
 8016e76:	9307      	strge	r3, [sp, #28]
 8016e78:	9307      	strlt	r3, [sp, #28]
 8016e7a:	bfb8      	it	lt
 8016e7c:	9204      	strlt	r2, [sp, #16]
 8016e7e:	7823      	ldrb	r3, [r4, #0]
 8016e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8016e82:	d10a      	bne.n	8016e9a <_vfiprintf_r+0x156>
 8016e84:	7863      	ldrb	r3, [r4, #1]
 8016e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e88:	d132      	bne.n	8016ef0 <_vfiprintf_r+0x1ac>
 8016e8a:	9b03      	ldr	r3, [sp, #12]
 8016e8c:	3402      	adds	r4, #2
 8016e8e:	1d1a      	adds	r2, r3, #4
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016e96:	9203      	str	r2, [sp, #12]
 8016e98:	9305      	str	r3, [sp, #20]
 8016e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016f70 <_vfiprintf_r+0x22c>
 8016e9e:	2203      	movs	r2, #3
 8016ea0:	7821      	ldrb	r1, [r4, #0]
 8016ea2:	4650      	mov	r0, sl
 8016ea4:	f7fe f8b1 	bl	801500a <memchr>
 8016ea8:	b138      	cbz	r0, 8016eba <_vfiprintf_r+0x176>
 8016eaa:	eba0 000a 	sub.w	r0, r0, sl
 8016eae:	2240      	movs	r2, #64	@ 0x40
 8016eb0:	9b04      	ldr	r3, [sp, #16]
 8016eb2:	3401      	adds	r4, #1
 8016eb4:	4082      	lsls	r2, r0
 8016eb6:	4313      	orrs	r3, r2
 8016eb8:	9304      	str	r3, [sp, #16]
 8016eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ebe:	2206      	movs	r2, #6
 8016ec0:	4828      	ldr	r0, [pc, #160]	@ (8016f64 <_vfiprintf_r+0x220>)
 8016ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ec6:	f7fe f8a0 	bl	801500a <memchr>
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	d03f      	beq.n	8016f4e <_vfiprintf_r+0x20a>
 8016ece:	4b26      	ldr	r3, [pc, #152]	@ (8016f68 <_vfiprintf_r+0x224>)
 8016ed0:	bb1b      	cbnz	r3, 8016f1a <_vfiprintf_r+0x1d6>
 8016ed2:	9b03      	ldr	r3, [sp, #12]
 8016ed4:	3307      	adds	r3, #7
 8016ed6:	f023 0307 	bic.w	r3, r3, #7
 8016eda:	3308      	adds	r3, #8
 8016edc:	9303      	str	r3, [sp, #12]
 8016ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ee0:	443b      	add	r3, r7
 8016ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ee4:	e76a      	b.n	8016dbc <_vfiprintf_r+0x78>
 8016ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016eea:	460c      	mov	r4, r1
 8016eec:	2001      	movs	r0, #1
 8016eee:	e7a8      	b.n	8016e42 <_vfiprintf_r+0xfe>
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	3401      	adds	r4, #1
 8016ef4:	f04f 0c0a 	mov.w	ip, #10
 8016ef8:	4619      	mov	r1, r3
 8016efa:	9305      	str	r3, [sp, #20]
 8016efc:	4620      	mov	r0, r4
 8016efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f02:	3a30      	subs	r2, #48	@ 0x30
 8016f04:	2a09      	cmp	r2, #9
 8016f06:	d903      	bls.n	8016f10 <_vfiprintf_r+0x1cc>
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d0c6      	beq.n	8016e9a <_vfiprintf_r+0x156>
 8016f0c:	9105      	str	r1, [sp, #20]
 8016f0e:	e7c4      	b.n	8016e9a <_vfiprintf_r+0x156>
 8016f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f14:	4604      	mov	r4, r0
 8016f16:	2301      	movs	r3, #1
 8016f18:	e7f0      	b.n	8016efc <_vfiprintf_r+0x1b8>
 8016f1a:	ab03      	add	r3, sp, #12
 8016f1c:	462a      	mov	r2, r5
 8016f1e:	a904      	add	r1, sp, #16
 8016f20:	4630      	mov	r0, r6
 8016f22:	9300      	str	r3, [sp, #0]
 8016f24:	4b11      	ldr	r3, [pc, #68]	@ (8016f6c <_vfiprintf_r+0x228>)
 8016f26:	f7fd f893 	bl	8014050 <_printf_float>
 8016f2a:	4607      	mov	r7, r0
 8016f2c:	1c78      	adds	r0, r7, #1
 8016f2e:	d1d6      	bne.n	8016ede <_vfiprintf_r+0x19a>
 8016f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016f32:	07d9      	lsls	r1, r3, #31
 8016f34:	d405      	bmi.n	8016f42 <_vfiprintf_r+0x1fe>
 8016f36:	89ab      	ldrh	r3, [r5, #12]
 8016f38:	059a      	lsls	r2, r3, #22
 8016f3a:	d402      	bmi.n	8016f42 <_vfiprintf_r+0x1fe>
 8016f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016f3e:	f7fe f863 	bl	8015008 <__retarget_lock_release_recursive>
 8016f42:	89ab      	ldrh	r3, [r5, #12]
 8016f44:	065b      	lsls	r3, r3, #25
 8016f46:	f53f af1f 	bmi.w	8016d88 <_vfiprintf_r+0x44>
 8016f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f4c:	e71e      	b.n	8016d8c <_vfiprintf_r+0x48>
 8016f4e:	ab03      	add	r3, sp, #12
 8016f50:	462a      	mov	r2, r5
 8016f52:	a904      	add	r1, sp, #16
 8016f54:	4630      	mov	r0, r6
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	4b04      	ldr	r3, [pc, #16]	@ (8016f6c <_vfiprintf_r+0x228>)
 8016f5a:	f7fd fb15 	bl	8014588 <_printf_i>
 8016f5e:	e7e4      	b.n	8016f2a <_vfiprintf_r+0x1e6>
 8016f60:	080180d0 	.word	0x080180d0
 8016f64:	080180da 	.word	0x080180da
 8016f68:	08014051 	.word	0x08014051
 8016f6c:	08016d1f 	.word	0x08016d1f
 8016f70:	080180d6 	.word	0x080180d6

08016f74 <_raise_r>:
 8016f74:	291f      	cmp	r1, #31
 8016f76:	b538      	push	{r3, r4, r5, lr}
 8016f78:	4605      	mov	r5, r0
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	d904      	bls.n	8016f88 <_raise_r+0x14>
 8016f7e:	2316      	movs	r3, #22
 8016f80:	6003      	str	r3, [r0, #0]
 8016f82:	f04f 30ff 	mov.w	r0, #4294967295
 8016f86:	bd38      	pop	{r3, r4, r5, pc}
 8016f88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016f8a:	b112      	cbz	r2, 8016f92 <_raise_r+0x1e>
 8016f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f90:	b94b      	cbnz	r3, 8016fa6 <_raise_r+0x32>
 8016f92:	4628      	mov	r0, r5
 8016f94:	f000 f830 	bl	8016ff8 <_getpid_r>
 8016f98:	4622      	mov	r2, r4
 8016f9a:	4601      	mov	r1, r0
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fa2:	f000 b817 	b.w	8016fd4 <_kill_r>
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	d00a      	beq.n	8016fc0 <_raise_r+0x4c>
 8016faa:	1c59      	adds	r1, r3, #1
 8016fac:	d103      	bne.n	8016fb6 <_raise_r+0x42>
 8016fae:	2316      	movs	r3, #22
 8016fb0:	6003      	str	r3, [r0, #0]
 8016fb2:	2001      	movs	r0, #1
 8016fb4:	e7e7      	b.n	8016f86 <_raise_r+0x12>
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016fbe:	4798      	blx	r3
 8016fc0:	2000      	movs	r0, #0
 8016fc2:	e7e0      	b.n	8016f86 <_raise_r+0x12>

08016fc4 <raise>:
 8016fc4:	4b02      	ldr	r3, [pc, #8]	@ (8016fd0 <raise+0xc>)
 8016fc6:	4601      	mov	r1, r0
 8016fc8:	6818      	ldr	r0, [r3, #0]
 8016fca:	f7ff bfd3 	b.w	8016f74 <_raise_r>
 8016fce:	bf00      	nop
 8016fd0:	200001b4 	.word	0x200001b4

08016fd4 <_kill_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	4d06      	ldr	r5, [pc, #24]	@ (8016ff4 <_kill_r+0x20>)
 8016fda:	4604      	mov	r4, r0
 8016fdc:	4608      	mov	r0, r1
 8016fde:	4611      	mov	r1, r2
 8016fe0:	602b      	str	r3, [r5, #0]
 8016fe2:	f7ee f971 	bl	80052c8 <_kill>
 8016fe6:	1c43      	adds	r3, r0, #1
 8016fe8:	d102      	bne.n	8016ff0 <_kill_r+0x1c>
 8016fea:	682b      	ldr	r3, [r5, #0]
 8016fec:	b103      	cbz	r3, 8016ff0 <_kill_r+0x1c>
 8016fee:	6023      	str	r3, [r4, #0]
 8016ff0:	bd38      	pop	{r3, r4, r5, pc}
 8016ff2:	bf00      	nop
 8016ff4:	200044f8 	.word	0x200044f8

08016ff8 <_getpid_r>:
 8016ff8:	f7ee b95e 	b.w	80052b8 <_getpid>

08016ffc <_malloc_usable_size_r>:
 8016ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017000:	1f18      	subs	r0, r3, #4
 8017002:	2b00      	cmp	r3, #0
 8017004:	bfbc      	itt	lt
 8017006:	580b      	ldrlt	r3, [r1, r0]
 8017008:	18c0      	addlt	r0, r0, r3
 801700a:	4770      	bx	lr

0801700c <_init>:
 801700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801700e:	bf00      	nop
 8017010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017012:	bc08      	pop	{r3}
 8017014:	469e      	mov	lr, r3
 8017016:	4770      	bx	lr

08017018 <_fini>:
 8017018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701a:	bf00      	nop
 801701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801701e:	bc08      	pop	{r3}
 8017020:	469e      	mov	lr, r3
 8017022:	4770      	bx	lr
